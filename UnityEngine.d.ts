/*
 Unity Version(2017.2.0f3)

 Assemblies
   UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.AccessibilityModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.AIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.Analytics, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.AnimationModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ARModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ClothModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ClusterInputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ClusterRendererModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.CrashReportingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.DirectorModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.GameCenterModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.GoogleAudioSpatializer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.GridModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.HoloLens, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.IMGUIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.InputModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.JSONSerializeModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.Networking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ParticlesLegacyModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ParticleSystemModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.PerformanceReportingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.Physics2DModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.PhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.Purchasing, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.ScreenCaptureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.SpatialTracking, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.SpriteMaskModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.StyleSheetsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.TerrainModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.TerrainPhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.TestRunner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.TextRenderingModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.TilemapModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.Timeline, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UIAutomation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UIElementsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UIModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UNETModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UnityAnalyticsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UnityConnectModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UnityWebRequestAudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UnityWebRequestModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UnityWebRequestTextureModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.UnityWebRequestWWWModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.VehiclesModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.VideoModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.VRModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.WebModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEngine.WindModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
 */

declare namespace UnityEngine.Accessibility {
  class VisionUtility extends System.Object {
    protected constructor();
    static GetColorBlindSafePalette(palette: UnityEngine.Color[], minimumLuminance: number, maximumLuminance: number): number;
  }
}
declare namespace System {
  class Object {
    constructor();
    Equals(obj: any): boolean;
    static Equals(objA: any, objB: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    static ReferenceEquals(objA: any, objB: any): boolean;
    ToString(): string;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshHit extends System.ValueType {
    protected constructor();
    distance: number;
    hit: boolean;
    mask: number;
    normal: UnityEngine.Vector3;
    position: UnityEngine.Vector3;
  }
}
declare namespace System {
  class ValueType extends System.Object {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshTriangulation extends System.ValueType {
    protected constructor();
    readonly layers: number[];
    areas: number[];
    indices: number[];
    vertices: UnityEngine.Vector3[];
  }
}
declare namespace UnityEngine.AI {
  class NavMeshData extends UnityEngine.Object {
    constructor();
    constructor(agentTypeID: number);
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    readonly sourceBounds: UnityEngine.Bounds;
  }
}
declare namespace UnityEngine {
  class Object extends System.Object {
    constructor();
    static Destroy(obj: UnityEngine.Object): void;
    static Destroy(obj: UnityEngine.Object, t: number): void;
    static DestroyImmediate(obj: UnityEngine.Object): void;
    static DestroyImmediate(obj: UnityEngine.Object, allowDestroyingAssets: boolean): void;
    static DestroyObject(obj: UnityEngine.Object): void;
    static DestroyObject(obj: UnityEngine.Object, t: number): void;
    static DontDestroyOnLoad(target: UnityEngine.Object): void;
    Equals(other: any): boolean;
    static FindObjectOfType(type: any): UnityEngine.Object;
    static FindObjectsOfType(type: any): UnityEngine.Object[];
    static FindObjectsOfTypeAll(type: any): UnityEngine.Object[];
    static FindObjectsOfTypeIncludingAssets(type: any): UnityEngine.Object[];
    static FindSceneObjectsOfType(type: any): UnityEngine.Object[];
    GetHashCode(): number;
    GetInstanceID(): number;
    static Instantiate(original: UnityEngine.Object): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, parent: UnityEngine.Transform): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, parent: UnityEngine.Transform, instantiateInWorldSpace: boolean): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, parent: UnityEngine.Transform): UnityEngine.Object;
    ToString(): string;
    hideFlags: UnityEngine.HideFlags;
    name: string;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshDataInstance extends System.ValueType {
    protected constructor();
    Remove(): void;
    owner: UnityEngine.Object;
    readonly valid: boolean;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshLinkData extends System.ValueType {
    protected constructor();
    agentTypeID: number;
    area: number;
    bidirectional: boolean;
    costModifier: number;
    endPosition: UnityEngine.Vector3;
    startPosition: UnityEngine.Vector3;
    width: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshLinkInstance extends System.ValueType {
    protected constructor();
    Remove(): void;
    owner: UnityEngine.Object;
    readonly valid: boolean;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshQueryFilter extends System.ValueType {
    protected constructor();
    GetAreaCost(areaIndex: number): number;
    SetAreaCost(areaIndex: number, cost: number): void;
    agentTypeID: number;
    areaMask: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMesh extends System.Object {
    protected constructor();
    static AddLink(link: UnityEngine.AI.NavMeshLinkData): UnityEngine.AI.NavMeshLinkInstance;
    static AddLink(link: UnityEngine.AI.NavMeshLinkData, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngine.AI.NavMeshLinkInstance;
    static AddNavMeshData(navMeshData: UnityEngine.AI.NavMeshData): UnityEngine.AI.NavMeshDataInstance;
    static AddNavMeshData(navMeshData: UnityEngine.AI.NavMeshData, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngine.AI.NavMeshDataInstance;
    static AddOffMeshLinks(): void;
    static CalculatePath(sourcePosition: UnityEngine.Vector3, targetPosition: UnityEngine.Vector3, areaMask: number, path: UnityEngine.AI.NavMeshPath): boolean;
    static CalculatePath(sourcePosition: UnityEngine.Vector3, targetPosition: UnityEngine.Vector3, filter: UnityEngine.AI.NavMeshQueryFilter, path: UnityEngine.AI.NavMeshPath): boolean;
    static CalculateTriangulation(): UnityEngine.AI.NavMeshTriangulation;
    static CreateSettings(): UnityEngine.AI.NavMeshBuildSettings;
    static FindClosestEdge(sourcePosition: UnityEngine.Vector3, hit: any, areaMask: number): boolean;
    static FindClosestEdge(sourcePosition: UnityEngine.Vector3, hit: any, filter: UnityEngine.AI.NavMeshQueryFilter): boolean;
    static GetAreaCost(areaIndex: number): number;
    static GetAreaFromName(areaName: string): number;
    static GetLayerCost(layer: number): number;
    static GetNavMeshLayerFromName(layerName: string): number;
    static GetSettingsByID(agentTypeID: number): UnityEngine.AI.NavMeshBuildSettings;
    static GetSettingsByIndex(index: number): UnityEngine.AI.NavMeshBuildSettings;
    static GetSettingsCount(): number;
    static GetSettingsNameFromID(agentTypeID: number): string;
    static Raycast(sourcePosition: UnityEngine.Vector3, targetPosition: UnityEngine.Vector3, hit: any, areaMask: number): boolean;
    static Raycast(sourcePosition: UnityEngine.Vector3, targetPosition: UnityEngine.Vector3, hit: any, filter: UnityEngine.AI.NavMeshQueryFilter): boolean;
    static RemoveLink(handle: UnityEngine.AI.NavMeshLinkInstance): void;
    static RemoveNavMeshData(handle: UnityEngine.AI.NavMeshDataInstance): void;
    static RemoveSettings(agentTypeID: number): void;
    static RestoreNavMesh(): void;
    static SamplePosition(sourcePosition: UnityEngine.Vector3, hit: any, maxDistance: number, areaMask: number): boolean;
    static SamplePosition(sourcePosition: UnityEngine.Vector3, hit: any, maxDistance: number, filter: UnityEngine.AI.NavMeshQueryFilter): boolean;
    static SetAreaCost(areaIndex: number, cost: number): void;
    static SetLayerCost(layer: number, cost: number): void;
    static Triangulate(vertices: any, indices: any): void;
    static avoidancePredictionTime: number;
    static pathfindingIterationsPerFrame: number;
    static AllAreas: number;
    static onPreUpdate: (() => void);
  }
}
declare namespace UnityEngine.AI {
  class ObstacleAvoidanceType extends System.Enum {
    protected constructor();
    static GoodQualityObstacleAvoidance: UnityEngine.AI.ObstacleAvoidanceType;
    static HighQualityObstacleAvoidance: UnityEngine.AI.ObstacleAvoidanceType;
    static LowQualityObstacleAvoidance: UnityEngine.AI.ObstacleAvoidanceType;
    static MedQualityObstacleAvoidance: UnityEngine.AI.ObstacleAvoidanceType;
    static NoObstacleAvoidance: UnityEngine.AI.ObstacleAvoidanceType;
    value__: number;
  }
}
declare namespace System {
  class Enum extends System.ValueType {
    protected constructor();
    CompareTo(target: any): number;
    Equals(obj: any): boolean;
    static Format(enumType: any, value: any, format: string): string;
    GetHashCode(): number;
    static GetName(enumType: any, value: any): string;
    static GetNames(enumType: any): string[];
    GetTypeCode(): any;
    static GetUnderlyingType(enumType: any): any;
    static GetValues(enumType: any): any;
    HasFlag(flag: System.Enum): boolean;
    static IsDefined(enumType: any, value: any): boolean;
    static Parse(enumType: any, value: string): any;
    static Parse(enumType: any, value: string, ignoreCase: boolean): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: any): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshAgent extends UnityEngine.Behaviour {
    constructor();
    ActivateCurrentOffMeshLink(activated: boolean): void;
    CalculatePath(targetPosition: UnityEngine.Vector3, path: UnityEngine.AI.NavMeshPath): boolean;
    CompleteOffMeshLink(): void;
    FindClosestEdge(hit: any): boolean;
    GetAreaCost(areaIndex: number): number;
    GetLayerCost(layer: number): number;
    Move(offset: UnityEngine.Vector3): void;
    Raycast(targetPosition: UnityEngine.Vector3, hit: any): boolean;
    ResetPath(): void;
    Resume(): void;
    SamplePathPosition(areaMask: number, maxDistance: number, hit: any): boolean;
    SetAreaCost(areaIndex: number, areaCost: number): void;
    SetDestination(target: UnityEngine.Vector3): boolean;
    SetLayerCost(layer: number, cost: number): void;
    SetPath(path: UnityEngine.AI.NavMeshPath): boolean;
    Stop(): void;
    Stop(stopUpdates: boolean): void;
    Warp(newPosition: UnityEngine.Vector3): boolean;
    acceleration: number;
    agentTypeID: number;
    angularSpeed: number;
    areaMask: number;
    autoBraking: boolean;
    autoRepath: boolean;
    autoTraverseOffMeshLink: boolean;
    avoidancePriority: number;
    baseOffset: number;
    readonly currentOffMeshLinkData: UnityEngine.AI.OffMeshLinkData;
    readonly desiredVelocity: UnityEngine.Vector3;
    destination: UnityEngine.Vector3;
    readonly hasPath: boolean;
    height: number;
    readonly isOnNavMesh: boolean;
    readonly isOnOffMeshLink: boolean;
    readonly isPathStale: boolean;
    isStopped: boolean;
    readonly navMeshOwner: UnityEngine.Object;
    readonly nextOffMeshLinkData: UnityEngine.AI.OffMeshLinkData;
    nextPosition: UnityEngine.Vector3;
    obstacleAvoidanceType: UnityEngine.AI.ObstacleAvoidanceType;
    path: UnityEngine.AI.NavMeshPath;
    readonly pathEndPosition: UnityEngine.Vector3;
    readonly pathPending: boolean;
    readonly pathStatus: UnityEngine.AI.NavMeshPathStatus;
    radius: number;
    readonly remainingDistance: number;
    speed: number;
    readonly steeringTarget: UnityEngine.Vector3;
    stoppingDistance: number;
    updatePosition: boolean;
    updateRotation: boolean;
    updateUpAxis: boolean;
    velocity: UnityEngine.Vector3;
    walkableMask: number;
  }
}
declare namespace UnityEngine {
  class Behaviour extends UnityEngine.Component {
    constructor();
    enabled: boolean;
    readonly isActiveAndEnabled: boolean;
  }
}
declare namespace UnityEngine {
  class Component extends UnityEngine.Object {
    constructor();
    BroadcastMessage(methodName: string): void;
    BroadcastMessage(methodName: string, parameter: any): void;
    BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
    BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    CompareTag(tag: string): boolean;
    GetComponent(type: string): UnityEngine.Component;
    GetComponent(type: any): UnityEngine.Component;
    GetComponentInChildren(t: any): UnityEngine.Component;
    GetComponentInChildren(t: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInParent(t: any): UnityEngine.Component;
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: UnityEngine.Component[]): void;
    GetComponentsInChildren(t: any): UnityEngine.Component[];
    GetComponentsInChildren(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentsInParent(t: any): UnityEngine.Component[];
    GetComponentsInParent(t: any, includeInactive: boolean): UnityEngine.Component[];
    SendMessage(methodName: string): void;
    SendMessage(methodName: string, value: any): void;
    SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    SendMessageUpwards(methodName: string): void;
    SendMessageUpwards(methodName: string, value: any): void;
    SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
    readonly animation: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly gameObject: UnityEngine.GameObject;
    readonly guiElement: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    readonly light: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    tag: string;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshObstacleShape extends System.Enum {
    protected constructor();
    static Box: UnityEngine.AI.NavMeshObstacleShape;
    static Capsule: UnityEngine.AI.NavMeshObstacleShape;
    value__: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshObstacle extends UnityEngine.Behaviour {
    constructor();
    carveOnlyStationary: boolean;
    carving: boolean;
    carvingMoveThreshold: number;
    carvingTimeToStationary: number;
    center: UnityEngine.Vector3;
    height: number;
    radius: number;
    shape: UnityEngine.AI.NavMeshObstacleShape;
    size: UnityEngine.Vector3;
    velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshPathStatus extends System.Enum {
    protected constructor();
    static PathComplete: UnityEngine.AI.NavMeshPathStatus;
    static PathInvalid: UnityEngine.AI.NavMeshPathStatus;
    static PathPartial: UnityEngine.AI.NavMeshPathStatus;
    value__: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshPath extends System.Object {
    constructor();
    ClearCorners(): void;
    GetCornersNonAlloc(results: UnityEngine.Vector3[]): number;
    readonly corners: UnityEngine.Vector3[];
    readonly status: UnityEngine.AI.NavMeshPathStatus;
  }
}
declare namespace UnityEngine.AI {
  class OffMeshLinkType extends System.Enum {
    protected constructor();
    static LinkTypeDropDown: UnityEngine.AI.OffMeshLinkType;
    static LinkTypeJumpAcross: UnityEngine.AI.OffMeshLinkType;
    static LinkTypeManual: UnityEngine.AI.OffMeshLinkType;
    value__: number;
  }
}
declare namespace UnityEngine.AI {
  class OffMeshLinkData extends System.ValueType {
    protected constructor();
    readonly activated: boolean;
    readonly endPos: UnityEngine.Vector3;
    readonly linkType: UnityEngine.AI.OffMeshLinkType;
    readonly offMeshLink: UnityEngine.AI.OffMeshLink;
    readonly startPos: UnityEngine.Vector3;
    readonly valid: boolean;
  }
}
declare namespace UnityEngine.AI {
  class OffMeshLink extends UnityEngine.Behaviour {
    constructor();
    UpdatePositions(): void;
    activated: boolean;
    area: number;
    autoUpdatePositions: boolean;
    biDirectional: boolean;
    costOverride: number;
    endTransform: UnityEngine.Transform;
    navMeshLayer: number;
    readonly occupied: boolean;
    startTransform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuildSettings extends System.ValueType {
    protected constructor();
    ValidationReport(buildBounds: UnityEngine.Bounds): string[];
    agentClimb: number;
    agentHeight: number;
    agentRadius: number;
    agentSlope: number;
    agentTypeID: number;
    debug: UnityEngine.AI.NavMeshBuildDebugSettings;
    minRegionArea: number;
    overrideTileSize: boolean;
    overrideVoxelSize: boolean;
    tileSize: number;
    voxelSize: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuildDebugFlags extends System.Enum {
    protected constructor();
    static All: UnityEngine.AI.NavMeshBuildDebugFlags;
    static InputGeometry: UnityEngine.AI.NavMeshBuildDebugFlags;
    static None: UnityEngine.AI.NavMeshBuildDebugFlags;
    static PolygonMeshes: UnityEngine.AI.NavMeshBuildDebugFlags;
    static PolygonMeshesDetail: UnityEngine.AI.NavMeshBuildDebugFlags;
    static RawContours: UnityEngine.AI.NavMeshBuildDebugFlags;
    static Regions: UnityEngine.AI.NavMeshBuildDebugFlags;
    static SimplifiedContours: UnityEngine.AI.NavMeshBuildDebugFlags;
    value__: number;
    static Voxels: UnityEngine.AI.NavMeshBuildDebugFlags;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuildDebugSettings extends System.ValueType {
    protected constructor();
    flags: UnityEngine.AI.NavMeshBuildDebugFlags;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuildSourceShape extends System.Enum {
    protected constructor();
    static Box: UnityEngine.AI.NavMeshBuildSourceShape;
    static Capsule: UnityEngine.AI.NavMeshBuildSourceShape;
    static Mesh: UnityEngine.AI.NavMeshBuildSourceShape;
    static ModifierBox: UnityEngine.AI.NavMeshBuildSourceShape;
    static Sphere: UnityEngine.AI.NavMeshBuildSourceShape;
    static Terrain: UnityEngine.AI.NavMeshBuildSourceShape;
    value__: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshCollectGeometry extends System.Enum {
    protected constructor();
    static PhysicsColliders: UnityEngine.AI.NavMeshCollectGeometry;
    static RenderMeshes: UnityEngine.AI.NavMeshCollectGeometry;
    value__: number;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuildSource extends System.ValueType {
    protected constructor();
    area: number;
    component: UnityEngine.Component;
    shape: UnityEngine.AI.NavMeshBuildSourceShape;
    size: UnityEngine.Vector3;
    sourceObject: UnityEngine.Object;
    transform: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuildMarkup extends System.ValueType {
    protected constructor();
    area: number;
    ignoreFromBuild: boolean;
    overrideArea: boolean;
    root: UnityEngine.Transform;
  }
}
declare namespace UnityEngine.AI {
  class NavMeshBuilder extends System.Object {
    protected constructor();
    static BuildNavMeshData(buildSettings: UnityEngine.AI.NavMeshBuildSettings, sources: UnityEngine.AI.NavMeshBuildSource[], localBounds: UnityEngine.Bounds, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngine.AI.NavMeshData;
    static Cancel(data: UnityEngine.AI.NavMeshData): void;
    static CollectSources(includedWorldBounds: UnityEngine.Bounds, includedLayerMask: number, geometry: UnityEngine.AI.NavMeshCollectGeometry, defaultArea: number, markups: UnityEngine.AI.NavMeshBuildMarkup[], results: UnityEngine.AI.NavMeshBuildSource[]): void;
    static CollectSources(root: UnityEngine.Transform, includedLayerMask: number, geometry: UnityEngine.AI.NavMeshCollectGeometry, defaultArea: number, markups: UnityEngine.AI.NavMeshBuildMarkup[], results: UnityEngine.AI.NavMeshBuildSource[]): void;
    static UpdateNavMeshData(data: UnityEngine.AI.NavMeshData, buildSettings: UnityEngine.AI.NavMeshBuildSettings, sources: UnityEngine.AI.NavMeshBuildSource[], localBounds: UnityEngine.Bounds): boolean;
    static UpdateNavMeshDataAsync(data: UnityEngine.AI.NavMeshData, buildSettings: UnityEngine.AI.NavMeshBuildSettings, sources: UnityEngine.AI.NavMeshBuildSource[], localBounds: UnityEngine.Bounds): UnityEngine.AsyncOperation;
  }
}
declare namespace UnityEngine.Analytics {
  class AnalyticsTracker extends UnityEngine.MonoBehaviour {
    constructor();
    TriggerEvent(): void;
    eventName: string;
  }
}
declare namespace UnityEngine {
  class MonoBehaviour extends UnityEngine.Behaviour {
    constructor();
    CancelInvoke(): void;
    CancelInvoke(methodName: string): void;
    Invoke(methodName: string, time: number): void;
    InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
    IsInvoking(): boolean;
    IsInvoking(methodName: string): boolean;
    static print(message: any): void;
    StartCoroutine(routine: any): UnityEngine.Coroutine;
    StartCoroutine(methodName: string): UnityEngine.Coroutine;
    StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
    StartCoroutine_Auto(routine: any): UnityEngine.Coroutine;
    StopAllCoroutines(): void;
    StopCoroutine(routine: any): void;
    StopCoroutine(methodName: string): void;
    StopCoroutine(routine: UnityEngine.Coroutine): void;
    runInEditMode: boolean;
    useGUILayout: boolean;
  }
}
declare namespace UnityEngine.Analytics.AnalyticsTracker {
  class Trigger extends System.Enum {
    protected constructor();
    static Awake: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    static External: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    static OnApplicationPause: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    static OnDestroy: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    static OnDisable: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    static OnEnable: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    static Start: UnityEngine.Analytics.AnalyticsTracker.Trigger;
    value__: number;
  }
}
declare namespace UnityEngine.Analytics {
  class TrackableProperty extends System.Object {
    constructor();
    GetHashCode(): number;
    fields: UnityEngine.Analytics.TrackableProperty.FieldWithTarget[];
    static kMaxParams: number;
  }
}
declare namespace UnityEngine.Analytics.TrackableProperty {
  class FieldWithTarget extends System.Object {
    constructor();
    GetValue(): any;
    doStatic: boolean;
    fieldPath: string;
    paramName: string;
    staticString: string;
    target: UnityEngine.Object;
    typeString: string;
  }
}
declare namespace UnityEngine.Animations {
  class AnimationClipPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, clip: UnityEngine.AnimationClip): UnityEngine.Animations.AnimationClipPlayable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Animations.AnimationClipPlayable): boolean;
    GetAnimationClip(): UnityEngine.AnimationClip;
    GetApplyFootIK(): boolean;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
    SetApplyFootIK(value: boolean): void;
  }
}
declare namespace UnityEngine.Animations {
  class AnimationLayerMixerPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, inputCount?: number): UnityEngine.Animations.AnimationLayerMixerPlayable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Animations.AnimationLayerMixerPlayable): boolean;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
    IsLayerAdditive(layerIndex: number): boolean;
    SetLayerAdditive(layerIndex: number, value: boolean): void;
    SetLayerMaskFromAvatarMask(layerIndex: number, mask: UnityEngine.AvatarMask): void;
    static readonly Null: UnityEngine.Animations.AnimationLayerMixerPlayable;
  }
}
declare namespace UnityEngine.Animations {
  class AnimationMixerPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, inputCount?: number, normalizeWeights?: boolean): UnityEngine.Animations.AnimationMixerPlayable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Animations.AnimationMixerPlayable): boolean;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
  }
}
declare namespace UnityEngine.Animations {
  class AnimationOffsetPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, inputCount: number): UnityEngine.Animations.AnimationOffsetPlayable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Animations.AnimationOffsetPlayable): boolean;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
    GetPosition(): UnityEngine.Vector3;
    GetRotation(): UnityEngine.Quaternion;
    SetPosition(value: UnityEngine.Vector3): void;
    SetRotation(value: UnityEngine.Quaternion): void;
    static readonly Null: UnityEngine.Animations.AnimationOffsetPlayable;
  }
}
declare namespace UnityEngine.Animations {
  class AnimationPlayableExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Animations {
  class AnimationPlayableGraphExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Animations {
  class AnimationPlayableOutput extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, name: string, target: UnityEngine.Animator): UnityEngine.Animations.AnimationPlayableOutput;
    GetHandle(): UnityEngine.Playables.PlayableOutputHandle;
    GetTarget(): UnityEngine.Animator;
    SetTarget(value: UnityEngine.Animator): void;
    static readonly Null: UnityEngine.Animations.AnimationPlayableOutput;
  }
}
declare namespace UnityEngine {
  class AnimationEventSource extends System.Enum {
    protected constructor();
    static Animator: UnityEngine.AnimationEventSource;
    static Legacy: UnityEngine.AnimationEventSource;
    static NoSource: UnityEngine.AnimationEventSource;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimationEvent extends System.Object {
    constructor();
    readonly animationState: UnityEngine.AnimationState;
    readonly animatorClipInfo: UnityEngine.AnimatorClipInfo;
    readonly animatorStateInfo: UnityEngine.AnimatorStateInfo;
    data: string;
    floatParameter: number;
    functionName: string;
    intParameter: number;
    readonly isFiredByAnimator: boolean;
    readonly isFiredByLegacy: boolean;
    messageOptions: UnityEngine.SendMessageOptions;
    objectReferenceParameter: UnityEngine.Object;
    stringParameter: string;
    time: number;
  }
}
declare namespace UnityEngine {
  class AnimationClip extends UnityEngine.Motion {
    constructor();
    AddEvent(evt: UnityEngine.AnimationEvent): void;
    ClearCurves(): void;
    EnsureQuaternionContinuity(): void;
    SampleAnimation(go: UnityEngine.GameObject, time: number): void;
    SetCurve(relativePath: string, type: any, propertyName: string, curve: UnityEngine.AnimationCurve): void;
    readonly empty: boolean;
    events: UnityEngine.AnimationEvent[];
    frameRate: number;
    readonly humanMotion: boolean;
    legacy: boolean;
    readonly length: number;
    localBounds: UnityEngine.Bounds;
    wrapMode: UnityEngine.WrapMode;
  }
}
declare namespace UnityEngine {
  class Motion extends UnityEngine.Object {
    constructor();
    ValidateIfRetargetable(val: boolean): boolean;
    readonly apparentSpeed: number;
    readonly averageAngularSpeed: number;
    readonly averageDuration: number;
    readonly averageSpeed: UnityEngine.Vector3;
    readonly isAnimatorMotion: boolean;
    readonly isHumanMotion: boolean;
    readonly isLooping: boolean;
    readonly legacy: boolean;
  }
}
declare namespace UnityEngine {
  class PlayMode extends System.Enum {
    protected constructor();
    static StopAll: UnityEngine.PlayMode;
    static StopSameLayer: UnityEngine.PlayMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class QueueMode extends System.Enum {
    protected constructor();
    static CompleteOthers: UnityEngine.QueueMode;
    static PlayNow: UnityEngine.QueueMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimationBlendMode extends System.Enum {
    protected constructor();
    static Additive: UnityEngine.AnimationBlendMode;
    static Blend: UnityEngine.AnimationBlendMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimationPlayMode extends System.Enum {
    protected constructor();
    static Mix: UnityEngine.AnimationPlayMode;
    static Queue: UnityEngine.AnimationPlayMode;
    static Stop: UnityEngine.AnimationPlayMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimationCullingType extends System.Enum {
    protected constructor();
    static AlwaysAnimate: UnityEngine.AnimationCullingType;
    static BasedOnClipBounds: UnityEngine.AnimationCullingType;
    static BasedOnRenderers: UnityEngine.AnimationCullingType;
    static BasedOnUserBounds: UnityEngine.AnimationCullingType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Animation extends UnityEngine.Behaviour {
    constructor();
    AddClip(clip: UnityEngine.AnimationClip, newName: string): void;
    AddClip(clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number): void;
    AddClip(clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number, addLoopFrame: boolean): void;
    Blend(animation: string): void;
    Blend(animation: string, targetWeight: number): void;
    Blend(animation: string, targetWeight: number, fadeLength: number): void;
    CrossFade(animation: string): void;
    CrossFade(animation: string, fadeLength: number): void;
    CrossFade(animation: string, fadeLength: number, mode: UnityEngine.PlayMode): void;
    CrossFadeQueued(animation: string): UnityEngine.AnimationState;
    CrossFadeQueued(animation: string, fadeLength: number): UnityEngine.AnimationState;
    CrossFadeQueued(animation: string, fadeLength: number, queue: UnityEngine.QueueMode): UnityEngine.AnimationState;
    CrossFadeQueued(animation: string, fadeLength: number, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode): UnityEngine.AnimationState;
    GetClip(name: string): UnityEngine.AnimationClip;
    GetClipCount(): number;
    GetEnumerator(): any;
    IsPlaying(name: string): boolean;
    Play(): boolean;
    Play(animation: string): boolean;
    Play(animation: string, mode: UnityEngine.AnimationPlayMode): boolean;
    Play(animation: string, mode: UnityEngine.PlayMode): boolean;
    Play(mode: UnityEngine.AnimationPlayMode): boolean;
    Play(mode: UnityEngine.PlayMode): boolean;
    PlayQueued(animation: string): UnityEngine.AnimationState;
    PlayQueued(animation: string, queue: UnityEngine.QueueMode): UnityEngine.AnimationState;
    PlayQueued(animation: string, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode): UnityEngine.AnimationState;
    RemoveClip(clipName: string): void;
    RemoveClip(clip: UnityEngine.AnimationClip): void;
    Rewind(): void;
    Rewind(name: string): void;
    Sample(): void;
    Stop(): void;
    Stop(name: string): void;
    SyncLayer(layer: number): void;
    animateOnlyIfVisible: boolean;
    animatePhysics: boolean;
    clip: UnityEngine.AnimationClip;
    cullingType: UnityEngine.AnimationCullingType;
    readonly isPlaying: boolean;
    get_Item(name: string): UnityEngine.AnimationState;
    localBounds: UnityEngine.Bounds;
    playAutomatically: boolean;
    wrapMode: UnityEngine.WrapMode;
  }
}
declare namespace UnityEngine.Animation {
  class Enumerator extends System.Object {
    protected constructor();
    MoveNext(): boolean;
    Reset(): void;
    readonly Current: any;
  }
}
declare namespace UnityEngine {
  class AnimationState extends UnityEngine.TrackedReference {
    constructor();
    AddMixingTransform(mix: UnityEngine.Transform): void;
    AddMixingTransform(mix: UnityEngine.Transform, recursive: boolean): void;
    RemoveMixingTransform(mix: UnityEngine.Transform): void;
    blendMode: UnityEngine.AnimationBlendMode;
    readonly clip: UnityEngine.AnimationClip;
    enabled: boolean;
    layer: number;
    readonly length: number;
    name: string;
    normalizedSpeed: number;
    normalizedTime: number;
    speed: number;
    time: number;
    weight: number;
    wrapMode: UnityEngine.WrapMode;
  }
}
declare namespace UnityEngine {
  class TrackedReference extends System.Object {
    protected constructor();
    Equals(o: any): boolean;
    GetHashCode(): number;
  }
}
declare namespace UnityEngine {
  class AvatarTarget extends System.Enum {
    protected constructor();
    static Body: UnityEngine.AvatarTarget;
    static LeftFoot: UnityEngine.AvatarTarget;
    static LeftHand: UnityEngine.AvatarTarget;
    static RightFoot: UnityEngine.AvatarTarget;
    static RightHand: UnityEngine.AvatarTarget;
    static Root: UnityEngine.AvatarTarget;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AvatarIKGoal extends System.Enum {
    protected constructor();
    static LeftFoot: UnityEngine.AvatarIKGoal;
    static LeftHand: UnityEngine.AvatarIKGoal;
    static RightFoot: UnityEngine.AvatarIKGoal;
    static RightHand: UnityEngine.AvatarIKGoal;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AvatarIKHint extends System.Enum {
    protected constructor();
    static LeftElbow: UnityEngine.AvatarIKHint;
    static LeftKnee: UnityEngine.AvatarIKHint;
    static RightElbow: UnityEngine.AvatarIKHint;
    static RightKnee: UnityEngine.AvatarIKHint;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimatorControllerParameterType extends System.Enum {
    protected constructor();
    static Bool: UnityEngine.AnimatorControllerParameterType;
    static Float: UnityEngine.AnimatorControllerParameterType;
    static Int: UnityEngine.AnimatorControllerParameterType;
    static Trigger: UnityEngine.AnimatorControllerParameterType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TransitionType extends System.Enum {
    protected constructor();
    static Entry: UnityEngine.TransitionType;
    static Exit: UnityEngine.TransitionType;
    static Normal: UnityEngine.TransitionType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimatorRecorderMode extends System.Enum {
    protected constructor();
    static Offline: UnityEngine.AnimatorRecorderMode;
    static Playback: UnityEngine.AnimatorRecorderMode;
    static Record: UnityEngine.AnimatorRecorderMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimatorClipInfo extends System.ValueType {
    protected constructor();
    readonly clip: UnityEngine.AnimationClip;
    readonly weight: number;
  }
}
declare namespace UnityEngine {
  class AnimatorCullingMode extends System.Enum {
    protected constructor();
    static AlwaysAnimate: UnityEngine.AnimatorCullingMode;
    static BasedOnRenderers: UnityEngine.AnimatorCullingMode;
    static CullCompletely: UnityEngine.AnimatorCullingMode;
    static CullUpdateTransforms: UnityEngine.AnimatorCullingMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimatorUpdateMode extends System.Enum {
    protected constructor();
    static AnimatePhysics: UnityEngine.AnimatorUpdateMode;
    static Normal: UnityEngine.AnimatorUpdateMode;
    static UnscaledTime: UnityEngine.AnimatorUpdateMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimatorStateInfo extends System.ValueType {
    protected constructor();
    IsName(name: string): boolean;
    IsTag(tag: string): boolean;
    readonly fullPathHash: number;
    readonly length: number;
    readonly loop: boolean;
    readonly nameHash: number;
    readonly normalizedTime: number;
    readonly shortNameHash: number;
    readonly speed: number;
    readonly speedMultiplier: number;
    readonly tagHash: number;
  }
}
declare namespace UnityEngine {
  class AnimatorTransitionInfo extends System.ValueType {
    protected constructor();
    IsName(name: string): boolean;
    IsUserName(name: string): boolean;
    readonly anyState: boolean;
    readonly fullPathHash: number;
    readonly nameHash: number;
    readonly normalizedTime: number;
    readonly userNameHash: number;
  }
}
declare namespace UnityEngine {
  class MatchTargetWeightMask extends System.ValueType {
    protected constructor();
    positionXYZWeight: UnityEngine.Vector3;
    rotationWeight: number;
  }
}
declare namespace UnityEngine {
  class Animator extends UnityEngine.Behaviour {
    constructor();
    ApplyBuiltinRootMotion(): void;
    CrossFade(stateNameHash: number, transitionDuration: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFade(stateName: string, transitionDuration: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number, fixedTime: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number, fixedTime: number): void;
    ForceStateNormalizedTime(normalizedTime: number): void;
    GetAnimatorTransitionInfo(layerIndex: number): UnityEngine.AnimatorTransitionInfo;
    GetBehaviours(fullPathHash: number, layerIndex: number): UnityEngine.StateMachineBehaviour[];
    GetBoneTransform(humanBoneId: UnityEngine.HumanBodyBones): UnityEngine.Transform;
    GetBool(id: number): boolean;
    GetBool(name: string): boolean;
    GetCurrentAnimationClipState(layerIndex: number): UnityEngine.AnimationInfo[];
    GetCurrentAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetCurrentAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
    GetCurrentAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetFloat(id: number): number;
    GetFloat(name: string): number;
    GetIKHintPosition(hint: UnityEngine.AvatarIKHint): UnityEngine.Vector3;
    GetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint): number;
    GetIKPosition(goal: UnityEngine.AvatarIKGoal): UnityEngine.Vector3;
    GetIKPositionWeight(goal: UnityEngine.AvatarIKGoal): number;
    GetIKRotation(goal: UnityEngine.AvatarIKGoal): UnityEngine.Quaternion;
    GetIKRotationWeight(goal: UnityEngine.AvatarIKGoal): number;
    GetInteger(id: number): number;
    GetInteger(name: string): number;
    GetLayerIndex(layerName: string): number;
    GetLayerName(layerIndex: number): string;
    GetLayerWeight(layerIndex: number): number;
    GetNextAnimationClipState(layerIndex: number): UnityEngine.AnimationInfo[];
    GetNextAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetNextAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetNextAnimatorClipInfoCount(layerIndex: number): number;
    GetNextAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetParameter(index: number): UnityEngine.AnimatorControllerParameter;
    GetQuaternion(id: number): UnityEngine.Quaternion;
    GetQuaternion(name: string): UnityEngine.Quaternion;
    GetVector(id: number): UnityEngine.Vector3;
    GetVector(name: string): UnityEngine.Vector3;
    HasState(layerIndex: number, stateID: number): boolean;
    InterruptMatchTarget(): void;
    InterruptMatchTarget(completeMatch: boolean): void;
    IsControlled(transform: UnityEngine.Transform): boolean;
    IsInTransition(layerIndex: number): boolean;
    IsParameterControlledByCurve(id: number): boolean;
    IsParameterControlledByCurve(name: string): boolean;
    MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number): void;
    MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number): void;
    Play(stateNameHash: number): void;
    Play(stateNameHash: number, layer: number): void;
    Play(stateNameHash: number, layer: number, normalizedTime: number): void;
    Play(stateName: string): void;
    Play(stateName: string, layer: number): void;
    Play(stateName: string, layer: number, normalizedTime: number): void;
    PlayInFixedTime(stateNameHash: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateName: string): void;
    PlayInFixedTime(stateName: string, layer: number): void;
    PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
    Rebind(): void;
    ResetTrigger(id: number): void;
    ResetTrigger(name: string): void;
    SetBoneLocalRotation(humanBoneId: UnityEngine.HumanBodyBones, rotation: UnityEngine.Quaternion): void;
    SetBool(id: number, value: boolean): void;
    SetBool(name: string, value: boolean): void;
    SetFloat(id: number, value: number): void;
    SetFloat(id: number, value: number, dampTime: number, deltaTime: number): void;
    SetFloat(name: string, value: number): void;
    SetFloat(name: string, value: number, dampTime: number, deltaTime: number): void;
    SetIKHintPosition(hint: UnityEngine.AvatarIKHint, hintPosition: UnityEngine.Vector3): void;
    SetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint, value: number): void;
    SetIKPosition(goal: UnityEngine.AvatarIKGoal, goalPosition: UnityEngine.Vector3): void;
    SetIKPositionWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
    SetIKRotation(goal: UnityEngine.AvatarIKGoal, goalRotation: UnityEngine.Quaternion): void;
    SetIKRotationWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
    SetInteger(id: number, value: number): void;
    SetInteger(name: string, value: number): void;
    SetLayerWeight(layerIndex: number, weight: number): void;
    SetLookAtPosition(lookAtPosition: UnityEngine.Vector3): void;
    SetLookAtWeight(weight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number, clampWeight: number): void;
    SetQuaternion(id: number, value: UnityEngine.Quaternion): void;
    SetQuaternion(name: string, value: UnityEngine.Quaternion): void;
    SetTarget(targetIndex: UnityEngine.AvatarTarget, targetNormalizedTime: number): void;
    SetTrigger(id: number): void;
    SetTrigger(name: string): void;
    SetVector(id: number, value: UnityEngine.Vector3): void;
    SetVector(name: string, value: UnityEngine.Vector3): void;
    StartPlayback(): void;
    StartRecording(frameCount: number): void;
    Stop(): void;
    StopPlayback(): void;
    StopRecording(): void;
    static StringToHash(name: string): number;
    Update(deltaTime: number): void;
    readonly angularVelocity: UnityEngine.Vector3;
    animatePhysics: boolean;
    applyRootMotion: boolean;
    avatar: UnityEngine.Avatar;
    bodyPosition: UnityEngine.Vector3;
    bodyRotation: UnityEngine.Quaternion;
    cullingMode: UnityEngine.AnimatorCullingMode;
    readonly deltaPosition: UnityEngine.Vector3;
    readonly deltaRotation: UnityEngine.Quaternion;
    feetPivotActive: number;
    fireEvents: boolean;
    readonly gravityWeight: number;
    readonly hasBoundPlayables: boolean;
    readonly hasRootMotion: boolean;
    readonly hasTransformHierarchy: boolean;
    readonly humanScale: number;
    readonly isHuman: boolean;
    readonly isInitialized: boolean;
    readonly isMatchingTarget: boolean;
    readonly isOptimizable: boolean;
    readonly layerCount: number;
    layersAffectMassCenter: boolean;
    readonly leftFeetBottomHeight: number;
    linearVelocityBlending: boolean;
    logWarnings: boolean;
    readonly parameterCount: number;
    readonly parameters: UnityEngine.AnimatorControllerParameter[];
    readonly pivotPosition: UnityEngine.Vector3;
    readonly pivotWeight: number;
    readonly playableGraph: UnityEngine.Playables.PlayableGraph;
    playbackTime: number;
    readonly recorderMode: UnityEngine.AnimatorRecorderMode;
    recorderStartTime: number;
    recorderStopTime: number;
    readonly rightFeetBottomHeight: number;
    rootPosition: UnityEngine.Vector3;
    rootRotation: UnityEngine.Quaternion;
    runtimeAnimatorController: UnityEngine.RuntimeAnimatorController;
    speed: number;
    stabilizeFeet: boolean;
    readonly targetPosition: UnityEngine.Vector3;
    readonly targetRotation: UnityEngine.Quaternion;
    updateMode: UnityEngine.AnimatorUpdateMode;
    readonly velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class AnimatorControllerParameter extends System.Object {
    constructor();
    Equals(o: any): boolean;
    GetHashCode(): number;
    defaultBool: boolean;
    defaultFloat: number;
    defaultInt: number;
    name: string;
    readonly nameHash: number;
    type: UnityEngine.AnimatorControllerParameterType;
  }
}
declare namespace UnityEngine.Animations {
  class IAnimatorControllerPlayable {
    protected constructor();
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number, fixedTime: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number, fixedTime: number): void;
    GetAnimatorTransitionInfo(layerIndex: number): UnityEngine.AnimatorTransitionInfo;
    GetBool(id: number): boolean;
    GetBool(name: string): boolean;
    GetCurrentAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetCurrentAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
    GetCurrentAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetFloat(id: number): number;
    GetFloat(name: string): number;
    GetInteger(id: number): number;
    GetInteger(name: string): number;
    GetLayerCount(): number;
    GetLayerIndex(layerName: string): number;
    GetLayerName(layerIndex: number): string;
    GetLayerWeight(layerIndex: number): number;
    GetNextAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetNextAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetNextAnimatorClipInfoCount(layerIndex: number): number;
    GetNextAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetParameter(index: number): UnityEngine.AnimatorControllerParameter;
    GetParameterCount(): number;
    HasState(layerIndex: number, stateID: number): boolean;
    IsInTransition(layerIndex: number): boolean;
    IsParameterControlledByCurve(id: number): boolean;
    IsParameterControlledByCurve(name: string): boolean;
    Play(stateNameHash: number, layer: number, normalizedTime: number): void;
    Play(stateName: string, layer: number, normalizedTime: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
    ResetTrigger(id: number): void;
    ResetTrigger(name: string): void;
    SetBool(id: number, value: boolean): void;
    SetBool(name: string, value: boolean): void;
    SetFloat(id: number, value: number): void;
    SetFloat(name: string, value: number): void;
    SetInteger(id: number, value: number): void;
    SetInteger(name: string, value: number): void;
    SetLayerWeight(layerIndex: number, weight: number): void;
    SetTrigger(id: number): void;
    SetTrigger(name: string): void;
  }
}
declare namespace UnityEngine.Animations {
  class AnimatorControllerPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, controller: UnityEngine.RuntimeAnimatorController): UnityEngine.Animations.AnimatorControllerPlayable;
    CrossFade(stateNameHash: number, transitionDuration: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFade(stateName: string, transitionDuration: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number, fixedTime: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number, fixedTime: number): void;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Animations.AnimatorControllerPlayable): boolean;
    GetAnimatorTransitionInfo(layerIndex: number): UnityEngine.AnimatorTransitionInfo;
    GetBool(id: number): boolean;
    GetBool(name: string): boolean;
    GetCurrentAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetCurrentAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
    GetCurrentAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetFloat(id: number): number;
    GetFloat(name: string): number;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
    GetInteger(id: number): number;
    GetInteger(name: string): number;
    GetLayerCount(): number;
    GetLayerIndex(layerName: string): number;
    GetLayerName(layerIndex: number): string;
    GetLayerWeight(layerIndex: number): number;
    GetNextAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetNextAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetNextAnimatorClipInfoCount(layerIndex: number): number;
    GetNextAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetParameter(index: number): UnityEngine.AnimatorControllerParameter;
    GetParameterCount(): number;
    HasState(layerIndex: number, stateID: number): boolean;
    IsInTransition(layerIndex: number): boolean;
    IsParameterControlledByCurve(id: number): boolean;
    IsParameterControlledByCurve(name: string): boolean;
    Play(stateNameHash: number): void;
    Play(stateNameHash: number, layer: number): void;
    Play(stateNameHash: number, layer: number, normalizedTime: number): void;
    Play(stateName: string): void;
    Play(stateName: string, layer: number): void;
    Play(stateName: string, layer: number, normalizedTime: number): void;
    PlayInFixedTime(stateNameHash: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateName: string): void;
    PlayInFixedTime(stateName: string, layer: number): void;
    PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
    ResetTrigger(id: number): void;
    ResetTrigger(name: string): void;
    SetBool(id: number, value: boolean): void;
    SetBool(name: string, value: boolean): void;
    SetFloat(id: number, value: number): void;
    SetFloat(name: string, value: number): void;
    SetHandle(handle: UnityEngine.Playables.PlayableHandle): void;
    SetInteger(id: number, value: number): void;
    SetInteger(name: string, value: number): void;
    SetLayerWeight(layerIndex: number, weight: number): void;
    SetTrigger(id: number): void;
    SetTrigger(name: string): void;
    static readonly Null: UnityEngine.Animations.AnimatorControllerPlayable;
  }
}
declare namespace UnityEngine {
  class AnimationClipPair extends System.Object {
    constructor();
    originalClip: UnityEngine.AnimationClip;
    overrideClip: UnityEngine.AnimationClip;
  }
}
declare namespace UnityEngine {
  class AnimatorOverrideController extends UnityEngine.RuntimeAnimatorController {
    constructor();
    constructor(controller: UnityEngine.RuntimeAnimatorController);
    ApplyOverrides(overrides: any[]): void;
    GetOverrides(overrides: any[]): void;
    clips: UnityEngine.AnimationClipPair[];
    get_Item(name: string): UnityEngine.AnimationClip;
    set_Item(name: string, value: UnityEngine.AnimationClip): void;
    get_Item(clip: UnityEngine.AnimationClip): UnityEngine.AnimationClip;
    set_Item(clip: UnityEngine.AnimationClip, value: UnityEngine.AnimationClip): void;
    readonly overridesCount: number;
    runtimeAnimatorController: UnityEngine.RuntimeAnimatorController;
  }
}
declare namespace UnityEngine {
  class RuntimeAnimatorController extends UnityEngine.Object {
    constructor();
    readonly animationClips: UnityEngine.AnimationClip[];
  }
}
declare namespace UnityEngine {
  class AnimatorUtility extends System.Object {
    constructor();
    static DeoptimizeTransformHierarchy(go: UnityEngine.GameObject): void;
    static OptimizeTransformHierarchy(go: UnityEngine.GameObject, exposedTransforms: string[]): void;
  }
}
declare namespace UnityEngine {
  class BodyDoF extends System.Enum {
    protected constructor();
    static ChestFrontBack: UnityEngine.BodyDoF;
    static ChestLeftRight: UnityEngine.BodyDoF;
    static ChestRollLeftRight: UnityEngine.BodyDoF;
    static LastBodyDoF: UnityEngine.BodyDoF;
    static SpineFrontBack: UnityEngine.BodyDoF;
    static SpineLeftRight: UnityEngine.BodyDoF;
    static SpineRollLeftRight: UnityEngine.BodyDoF;
    static UpperChestFrontBack: UnityEngine.BodyDoF;
    static UpperChestLeftRight: UnityEngine.BodyDoF;
    static UpperChestRollLeftRight: UnityEngine.BodyDoF;
    value__: number;
  }
}
declare namespace UnityEngine {
  class HeadDoF extends System.Enum {
    protected constructor();
    static HeadFrontBack: UnityEngine.HeadDoF;
    static HeadLeftRight: UnityEngine.HeadDoF;
    static HeadRollLeftRight: UnityEngine.HeadDoF;
    static JawDownUp: UnityEngine.HeadDoF;
    static JawLeftRight: UnityEngine.HeadDoF;
    static LastHeadDoF: UnityEngine.HeadDoF;
    static LeftEyeDownUp: UnityEngine.HeadDoF;
    static LeftEyeInOut: UnityEngine.HeadDoF;
    static NeckFrontBack: UnityEngine.HeadDoF;
    static NeckLeftRight: UnityEngine.HeadDoF;
    static NeckRollLeftRight: UnityEngine.HeadDoF;
    static RightEyeDownUp: UnityEngine.HeadDoF;
    static RightEyeInOut: UnityEngine.HeadDoF;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LegDoF extends System.Enum {
    protected constructor();
    static FootCloseOpen: UnityEngine.LegDoF;
    static FootInOut: UnityEngine.LegDoF;
    static LastLegDoF: UnityEngine.LegDoF;
    static LegCloseOpen: UnityEngine.LegDoF;
    static LegRollInOut: UnityEngine.LegDoF;
    static ToesUpDown: UnityEngine.LegDoF;
    static UpperLegFrontBack: UnityEngine.LegDoF;
    static UpperLegInOut: UnityEngine.LegDoF;
    static UpperLegRollInOut: UnityEngine.LegDoF;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ArmDoF extends System.Enum {
    protected constructor();
    static ArmDownUp: UnityEngine.ArmDoF;
    static ArmFrontBack: UnityEngine.ArmDoF;
    static ArmRollInOut: UnityEngine.ArmDoF;
    static ForeArmCloseOpen: UnityEngine.ArmDoF;
    static ForeArmRollInOut: UnityEngine.ArmDoF;
    static HandDownUp: UnityEngine.ArmDoF;
    static HandInOut: UnityEngine.ArmDoF;
    static LastArmDoF: UnityEngine.ArmDoF;
    static ShoulderDownUp: UnityEngine.ArmDoF;
    static ShoulderFrontBack: UnityEngine.ArmDoF;
    value__: number;
  }
}
declare namespace UnityEngine {
  class FingerDoF extends System.Enum {
    protected constructor();
    static DistalCloseOpen: UnityEngine.FingerDoF;
    static IntermediateCloseOpen: UnityEngine.FingerDoF;
    static LastFingerDoF: UnityEngine.FingerDoF;
    static ProximalDownUp: UnityEngine.FingerDoF;
    static ProximalInOut: UnityEngine.FingerDoF;
    value__: number;
  }
}
declare namespace UnityEngine {
  class DoF extends System.Enum {
    protected constructor();
    static BodyDoFStart: UnityEngine.DoF;
    static HeadDoFStart: UnityEngine.DoF;
    static LastDoF: UnityEngine.DoF;
    static LeftArmDoFStart: UnityEngine.DoF;
    static LeftIndexDoFStart: UnityEngine.DoF;
    static LeftLegDoFStart: UnityEngine.DoF;
    static LeftLittleDoFStart: UnityEngine.DoF;
    static LeftMiddleDoFStart: UnityEngine.DoF;
    static LeftRingDoFStart: UnityEngine.DoF;
    static LeftThumbDoFStart: UnityEngine.DoF;
    static RightArmDoFStart: UnityEngine.DoF;
    static RightIndexDoFStart: UnityEngine.DoF;
    static RightLegDoFStart: UnityEngine.DoF;
    static RightLittleDoFStart: UnityEngine.DoF;
    static RightMiddleDoFStart: UnityEngine.DoF;
    static RightRingDoFStart: UnityEngine.DoF;
    static RightThumbDoFStart: UnityEngine.DoF;
    value__: number;
  }
}
declare namespace UnityEngine {
  class HumanBodyBones extends System.Enum {
    protected constructor();
    static Chest: UnityEngine.HumanBodyBones;
    static Head: UnityEngine.HumanBodyBones;
    static Hips: UnityEngine.HumanBodyBones;
    static Jaw: UnityEngine.HumanBodyBones;
    static LastBone: UnityEngine.HumanBodyBones;
    static LeftEye: UnityEngine.HumanBodyBones;
    static LeftFoot: UnityEngine.HumanBodyBones;
    static LeftHand: UnityEngine.HumanBodyBones;
    static LeftIndexDistal: UnityEngine.HumanBodyBones;
    static LeftIndexIntermediate: UnityEngine.HumanBodyBones;
    static LeftIndexProximal: UnityEngine.HumanBodyBones;
    static LeftLittleDistal: UnityEngine.HumanBodyBones;
    static LeftLittleIntermediate: UnityEngine.HumanBodyBones;
    static LeftLittleProximal: UnityEngine.HumanBodyBones;
    static LeftLowerArm: UnityEngine.HumanBodyBones;
    static LeftLowerLeg: UnityEngine.HumanBodyBones;
    static LeftMiddleDistal: UnityEngine.HumanBodyBones;
    static LeftMiddleIntermediate: UnityEngine.HumanBodyBones;
    static LeftMiddleProximal: UnityEngine.HumanBodyBones;
    static LeftRingDistal: UnityEngine.HumanBodyBones;
    static LeftRingIntermediate: UnityEngine.HumanBodyBones;
    static LeftRingProximal: UnityEngine.HumanBodyBones;
    static LeftShoulder: UnityEngine.HumanBodyBones;
    static LeftThumbDistal: UnityEngine.HumanBodyBones;
    static LeftThumbIntermediate: UnityEngine.HumanBodyBones;
    static LeftThumbProximal: UnityEngine.HumanBodyBones;
    static LeftToes: UnityEngine.HumanBodyBones;
    static LeftUpperArm: UnityEngine.HumanBodyBones;
    static LeftUpperLeg: UnityEngine.HumanBodyBones;
    static Neck: UnityEngine.HumanBodyBones;
    static RightEye: UnityEngine.HumanBodyBones;
    static RightFoot: UnityEngine.HumanBodyBones;
    static RightHand: UnityEngine.HumanBodyBones;
    static RightIndexDistal: UnityEngine.HumanBodyBones;
    static RightIndexIntermediate: UnityEngine.HumanBodyBones;
    static RightIndexProximal: UnityEngine.HumanBodyBones;
    static RightLittleDistal: UnityEngine.HumanBodyBones;
    static RightLittleIntermediate: UnityEngine.HumanBodyBones;
    static RightLittleProximal: UnityEngine.HumanBodyBones;
    static RightLowerArm: UnityEngine.HumanBodyBones;
    static RightLowerLeg: UnityEngine.HumanBodyBones;
    static RightMiddleDistal: UnityEngine.HumanBodyBones;
    static RightMiddleIntermediate: UnityEngine.HumanBodyBones;
    static RightMiddleProximal: UnityEngine.HumanBodyBones;
    static RightRingDistal: UnityEngine.HumanBodyBones;
    static RightRingIntermediate: UnityEngine.HumanBodyBones;
    static RightRingProximal: UnityEngine.HumanBodyBones;
    static RightShoulder: UnityEngine.HumanBodyBones;
    static RightThumbDistal: UnityEngine.HumanBodyBones;
    static RightThumbIntermediate: UnityEngine.HumanBodyBones;
    static RightThumbProximal: UnityEngine.HumanBodyBones;
    static RightToes: UnityEngine.HumanBodyBones;
    static RightUpperArm: UnityEngine.HumanBodyBones;
    static RightUpperLeg: UnityEngine.HumanBodyBones;
    static Spine: UnityEngine.HumanBodyBones;
    static UpperChest: UnityEngine.HumanBodyBones;
    value__: number;
  }
}
declare namespace UnityEngine {
  class HumanParameter extends System.Enum {
    protected constructor();
    static ArmStretch: UnityEngine.HumanParameter;
    static FeetSpacing: UnityEngine.HumanParameter;
    static LegStretch: UnityEngine.HumanParameter;
    static LowerArmTwist: UnityEngine.HumanParameter;
    static LowerLegTwist: UnityEngine.HumanParameter;
    static UpperArmTwist: UnityEngine.HumanParameter;
    static UpperLegTwist: UnityEngine.HumanParameter;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Avatar extends UnityEngine.Object {
    protected constructor();
    readonly isHuman: boolean;
    readonly isValid: boolean;
  }
}
declare namespace UnityEngine {
  class HumanTrait extends System.Object {
    constructor();
    static BoneFromMuscle(i: number): number;
    static GetMuscleDefaultMax(i: number): number;
    static GetMuscleDefaultMin(i: number): number;
    static GetParentBone(i: number): number;
    static MuscleFromBone(i: number, dofIndex: number): number;
    static RequiredBone(i: number): boolean;
    static readonly BoneCount: number;
    static readonly BoneName: string[];
    static readonly MuscleCount: number;
    static readonly MuscleName: string[];
    static readonly RequiredBoneCount: number;
  }
}
declare namespace UnityEngine {
  class SkeletonBone extends System.ValueType {
    protected constructor();
    transformModified: number;
    name: string;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    scale: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class HumanLimit extends System.ValueType {
    protected constructor();
    axisLength: number;
    center: UnityEngine.Vector3;
    max: UnityEngine.Vector3;
    min: UnityEngine.Vector3;
    useDefaultValues: boolean;
  }
}
declare namespace UnityEngine {
  class HumanBone extends System.ValueType {
    protected constructor();
    boneName: string;
    humanName: string;
    limit: UnityEngine.HumanLimit;
  }
}
declare namespace UnityEngine {
  class HumanDescription extends System.ValueType {
    protected constructor();
    armStretch: number;
    feetSpacing: number;
    hasTranslationDoF: boolean;
    legStretch: number;
    lowerArmTwist: number;
    lowerLegTwist: number;
    upperArmTwist: number;
    upperLegTwist: number;
    human: UnityEngine.HumanBone[];
    skeleton: UnityEngine.SkeletonBone[];
  }
}
declare namespace UnityEngine {
  class AvatarBuilder extends System.Object {
    constructor();
    static BuildGenericAvatar(go: UnityEngine.GameObject, rootMotionTransformName: string): UnityEngine.Avatar;
    static BuildHumanAvatar(go: UnityEngine.GameObject, humanDescription: UnityEngine.HumanDescription): UnityEngine.Avatar;
  }
}
declare namespace UnityEngine {
  class AvatarMaskBodyPart extends System.Enum {
    protected constructor();
    static Body: UnityEngine.AvatarMaskBodyPart;
    static Head: UnityEngine.AvatarMaskBodyPart;
    static LastBodyPart: UnityEngine.AvatarMaskBodyPart;
    static LeftArm: UnityEngine.AvatarMaskBodyPart;
    static LeftFingers: UnityEngine.AvatarMaskBodyPart;
    static LeftFootIK: UnityEngine.AvatarMaskBodyPart;
    static LeftHandIK: UnityEngine.AvatarMaskBodyPart;
    static LeftLeg: UnityEngine.AvatarMaskBodyPart;
    static RightArm: UnityEngine.AvatarMaskBodyPart;
    static RightFingers: UnityEngine.AvatarMaskBodyPart;
    static RightFootIK: UnityEngine.AvatarMaskBodyPart;
    static RightHandIK: UnityEngine.AvatarMaskBodyPart;
    static RightLeg: UnityEngine.AvatarMaskBodyPart;
    static Root: UnityEngine.AvatarMaskBodyPart;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AvatarMask extends UnityEngine.Object {
    constructor();
    AddTransformPath(transform: UnityEngine.Transform): void;
    AddTransformPath(transform: UnityEngine.Transform, recursive: boolean): void;
    GetHumanoidBodyPartActive(index: UnityEngine.AvatarMaskBodyPart): boolean;
    GetTransformActive(index: number): boolean;
    GetTransformPath(index: number): string;
    RemoveTransformPath(transform: UnityEngine.Transform): void;
    RemoveTransformPath(transform: UnityEngine.Transform, recursive: boolean): void;
    SetHumanoidBodyPartActive(index: UnityEngine.AvatarMaskBodyPart, value: boolean): void;
    SetTransformActive(index: number, value: boolean): void;
    SetTransformPath(index: number, path: string): void;
    transformCount: number;
  }
}
declare namespace UnityEngine {
  class HumanPose extends System.ValueType {
    protected constructor();
    bodyPosition: UnityEngine.Vector3;
    bodyRotation: UnityEngine.Quaternion;
    muscles: number[];
  }
}
declare namespace UnityEngine {
  class HumanPoseHandler extends System.Object {
    constructor(avatar: UnityEngine.Avatar, root: UnityEngine.Transform);
    Dispose(): void;
    GetHumanPose(humanPose: any): void;
    SetHumanPose(humanPose: any): void;
  }
}
declare namespace UnityEditorInternal {
  class Transition extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class StateMachine extends UnityEngine.Object {
    constructor();
    AddAnyStateTransition(dst: UnityEditorInternal.State): UnityEditorInternal.Transition;
    AddState(stateName: string): UnityEditorInternal.State;
    AddStateMachine(stateMachineName: string): UnityEditorInternal.StateMachine;
    AddTransition(src: UnityEditorInternal.State, dst: UnityEditorInternal.State): UnityEditorInternal.Transition;
    GetState(index: number): UnityEditorInternal.State;
    GetStateMachine(index: number): UnityEditorInternal.StateMachine;
    GetStateMachinePosition(i: number): UnityEngine.Vector3;
    GetTransitionsFromState(srcState: UnityEditorInternal.State): UnityEditorInternal.Transition[];
    anyStatePosition: UnityEngine.Vector3;
    defaultState: UnityEditorInternal.State;
    parentStateMachinePosition: UnityEngine.Vector3;
  }
}
declare namespace UnityEditorInternal {
  class State extends UnityEngine.Object {
    constructor();
    CreateBlendTree(): UnityEditorInternal.BlendTree;
    CreateBlendTree(layer: UnityEditorInternal.AnimatorControllerLayer): UnityEditorInternal.BlendTree;
    GetMotion(): UnityEngine.Motion;
    GetMotion(layer: UnityEditorInternal.AnimatorControllerLayer): UnityEngine.Motion;
    iKOnFeet: boolean;
    mirror: boolean;
    speed: number;
    tag: string;
    readonly uniqueName: string;
    readonly uniqueNameHash: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimatorController extends UnityEngine.RuntimeAnimatorController {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class BlendTree extends UnityEngine.Motion {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class AnimatorControllerLayer extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class AnimatorControllerParameter extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class AnimatorControllerParameterType extends System.Enum {
    protected constructor();
    static Bool: UnityEditorInternal.AnimatorControllerParameterType;
    static Float: UnityEditorInternal.AnimatorControllerParameterType;
    static Int: UnityEditorInternal.AnimatorControllerParameterType;
    static Trigger: UnityEditorInternal.AnimatorControllerParameterType;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimatorLayerBlendingMode extends System.Enum {
    protected constructor();
    static Additive: UnityEditorInternal.AnimatorLayerBlendingMode;
    static Override: UnityEditorInternal.AnimatorLayerBlendingMode;
    value__: number;
  }
}
declare namespace UnityEngine.Playables {
  class AnimationPlayableUtilities extends System.Object {
    protected constructor();
    static Play(animator: UnityEngine.Animator, playable: UnityEngine.Playables.Playable, graph: UnityEngine.Playables.PlayableGraph): void;
    static PlayAnimatorController(animator: UnityEngine.Animator, controller: UnityEngine.RuntimeAnimatorController, graph: any): UnityEngine.Animations.AnimatorControllerPlayable;
    static PlayClip(animator: UnityEngine.Animator, clip: UnityEngine.AnimationClip, graph: any): UnityEngine.Animations.AnimationClipPlayable;
    static PlayLayerMixer(animator: UnityEngine.Animator, inputCount: number, graph: any): UnityEngine.Animations.AnimationLayerMixerPlayable;
    static PlayMixer(animator: UnityEngine.Animator, inputCount: number, graph: any): UnityEngine.Animations.AnimationMixerPlayable;
  }
}
declare namespace UnityEngine {
  class AnimationInfo extends System.ValueType {
    protected constructor();
    readonly clip: UnityEngine.AnimationClip;
    readonly weight: number;
  }
}
declare namespace UnityEngine {
  class SharedBetweenAnimatorsAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace System {
  class Attribute extends System.Object {
    protected constructor();
    Equals(obj: any): boolean;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, type: any): System.Attribute[];
    static GetCustomAttributes(element: any, type: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any, inherit: boolean): System.Attribute[];
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    Match(obj: any): boolean;
    readonly TypeId: any;
  }
}
declare namespace UnityEngine {
  class StateMachineBehaviour extends UnityEngine.ScriptableObject {
    protected constructor();
    OnStateEnter(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
    OnStateEnter(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
    OnStateExit(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
    OnStateExit(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
    OnStateIK(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
    OnStateIK(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
    OnStateMachineEnter(animator: UnityEngine.Animator, stateMachinePathHash: number): void;
    OnStateMachineEnter(animator: UnityEngine.Animator, stateMachinePathHash: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
    OnStateMachineExit(animator: UnityEngine.Animator, stateMachinePathHash: number): void;
    OnStateMachineExit(animator: UnityEngine.Animator, stateMachinePathHash: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
    OnStateMove(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
    OnStateMove(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
    OnStateUpdate(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
    OnStateUpdate(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable): void;
  }
}
declare namespace UnityEngine {
  class ScriptableObject extends UnityEngine.Object {
    constructor();
    static CreateInstance(className: string): UnityEngine.ScriptableObject;
    static CreateInstance(type: any): UnityEngine.ScriptableObject;
    SetDirty(): void;
  }
}
declare namespace UnityEngine.XR.Tango {
  class CoordinateFrame extends System.Enum {
    protected constructor();
    static AreaDescription: UnityEngine.XR.Tango.CoordinateFrame;
    static CameraColor: UnityEngine.XR.Tango.CoordinateFrame;
    static CameraDepth: UnityEngine.XR.Tango.CoordinateFrame;
    static CameraFisheye: UnityEngine.XR.Tango.CoordinateFrame;
    static Device: UnityEngine.XR.Tango.CoordinateFrame;
    static Display: UnityEngine.XR.Tango.CoordinateFrame;
    static GlobalWGS84: UnityEngine.XR.Tango.CoordinateFrame;
    static IMU: UnityEngine.XR.Tango.CoordinateFrame;
    static Invalid: UnityEngine.XR.Tango.CoordinateFrame;
    static MaxCoordinateFrameType: UnityEngine.XR.Tango.CoordinateFrame;
    static PreviousDevicePose: UnityEngine.XR.Tango.CoordinateFrame;
    static StartOfService: UnityEngine.XR.Tango.CoordinateFrame;
    static UUID: UnityEngine.XR.Tango.CoordinateFrame;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class PoseStatus extends System.Enum {
    protected constructor();
    static Initializing: UnityEngine.XR.Tango.PoseStatus;
    static Invalid: UnityEngine.XR.Tango.PoseStatus;
    static Unknown: UnityEngine.XR.Tango.PoseStatus;
    static Valid: UnityEngine.XR.Tango.PoseStatus;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class CoordinateFramePair extends System.ValueType {
    protected constructor();
    baseFrame: UnityEngine.XR.Tango.CoordinateFrame;
    targetFrame: UnityEngine.XR.Tango.CoordinateFrame;
  }
}
declare namespace UnityEngine.XR.Tango {
  class PoseData extends System.ValueType {
    protected constructor();
    readonly position: UnityEngine.Vector3;
    readonly rotation: UnityEngine.Quaternion;
    accuracy: number;
    confidence: number;
    frame: UnityEngine.XR.Tango.CoordinateFramePair;
    orientation_w: number;
    orientation_x: number;
    orientation_y: number;
    orientation_z: number;
    statusCode: UnityEngine.XR.Tango.PoseStatus;
    timestamp: number;
    translation_x: number;
    translation_y: number;
    translation_z: number;
    version: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class PointCloudData extends System.ValueType {
    protected constructor();
    points: UnityEngine.Vector4[];
    timestamp: number;
    version: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class ImageData extends System.ValueType {
    protected constructor();
    format: number;
    height: number;
    metadata: UnityEngine.XR.Tango.ImageData.CameraMetadata;
    planeData: number[];
    planeInfos: UnityEngine.XR.Tango.ImageData.PlaneInfo[];
    timestampNs: number;
    width: number;
  }
}
declare namespace UnityEngine.XR.Tango.ImageData {
  class PlaneInfo extends System.ValueType {
    protected constructor();
    offset: number;
    pixelStride: number;
    rowStride: number;
    size: number;
  }
}
declare namespace UnityEngine.XR.Tango.ImageData {
  class CameraMetadata extends System.ValueType {
    protected constructor();
    colorCorrectionGains0: number;
    colorCorrectionGains1: number;
    colorCorrectionGains2: number;
    colorCorrectionGains3: number;
    colorCorrectionMode: number;
    colorCorrectionTransform0: number;
    colorCorrectionTransform1: number;
    colorCorrectionTransform2: number;
    colorCorrectionTransform3: number;
    colorCorrectionTransform4: number;
    colorCorrectionTransform5: number;
    colorCorrectionTransform6: number;
    colorCorrectionTransform7: number;
    colorCorrectionTransform8: number;
    exposureDurationNs: number;
    frameNumber: number;
    lensAperture: number;
    sensitivityIso: number;
    sensorNeutralColorPoint0: number;
    sensorNeutralColorPoint1: number;
    sensorNeutralColorPoint2: number;
    timestampNs: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class NativePointCloud extends System.ValueType {
    protected constructor();
    nativePtr: any;
    numPoints: number;
    points: any;
    timestamp: number;
    version: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class NativeImage extends System.ValueType {
    protected constructor();
    format: number;
    height: number;
    metadata: UnityEngine.XR.Tango.ImageData.CameraMetadata;
    nativePtr: any;
    planeData: any;
    planeInfos: UnityEngine.XR.Tango.ImageData.PlaneInfo[];
    timestampNs: number;
    width: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class TangoDevice extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.XR.Tango {
  class TangoInputTracking extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.XR.Tango.TangoInputTracking {
  class TrackingStateEventType extends System.Enum {
    protected constructor();
    static TrackingAcquired: UnityEngine.XR.Tango.TangoInputTracking.TrackingStateEventType;
    static TrackingLost: UnityEngine.XR.Tango.TangoInputTracking.TrackingStateEventType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class MeshReconstructionServer extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.XR.Tango.MeshReconstructionServer {
  class Status extends System.Enum {
    protected constructor();
    static FailedToCreateMeshReconstructionContext: UnityEngine.XR.Tango.MeshReconstructionServer.Status;
    static FailedToSetDepthCalibration: UnityEngine.XR.Tango.MeshReconstructionServer.Status;
    static MissingMeshReconstructionLibrary: UnityEngine.XR.Tango.MeshReconstructionServer.Status;
    static Ok: UnityEngine.XR.Tango.MeshReconstructionServer.Status;
    static UnsupportedPlatform: UnityEngine.XR.Tango.MeshReconstructionServer.Status;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class AreaLearningMode extends System.Enum {
    protected constructor();
    static CloudAreaDescription: UnityEngine.XR.Tango.AreaLearningMode;
    static LocalAreaDescription: UnityEngine.XR.Tango.AreaLearningMode;
    static LocalAreaDescriptionWithoutLearning: UnityEngine.XR.Tango.AreaLearningMode;
    static None: UnityEngine.XR.Tango.AreaLearningMode;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class TangoConfig extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.XR.Tango {
  class SegmentChange extends System.Enum {
    protected constructor();
    static Added: UnityEngine.XR.Tango.SegmentChange;
    static Updated: UnityEngine.XR.Tango.SegmentChange;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class UpdateMethod extends System.Enum {
    protected constructor();
    static Projective: UnityEngine.XR.Tango.UpdateMethod;
    static Traversal: UnityEngine.XR.Tango.UpdateMethod;
    value__: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class MeshReconstructionConfig extends System.ValueType {
    protected constructor();
    static GetDefault(): UnityEngine.XR.Tango.MeshReconstructionConfig;
    generateColor: boolean;
    maxDepth: number;
    minDepth: number;
    minNumVertices: number;
    resolution: number;
    updateMethod: UnityEngine.XR.Tango.UpdateMethod;
    useParallelIntegration: boolean;
    useSpaceClearing: boolean;
  }
}
declare namespace UnityEngine.XR.Tango {
  class GridIndex extends System.ValueType {
    protected constructor();
    i: number;
    j: number;
    k: number;
  }
}
declare namespace UnityEngine.XR.Tango {
  class SegmentGenerationRequest extends System.ValueType {
    protected constructor();
    destinationMeshCollider: UnityEngine.MeshCollider;
    destinationMeshFilter: UnityEngine.MeshFilter;
    gridIndex: UnityEngine.XR.Tango.GridIndex;
    provideColors: boolean;
    provideNormals: boolean;
    providePhysics: boolean;
  }
}
declare namespace UnityEngine.XR.Tango {
  class SegmentGenerationResult extends System.ValueType {
    protected constructor();
    elapsedTimeSeconds: number;
    gridIndex: UnityEngine.XR.Tango.GridIndex;
    meshCollider: UnityEngine.MeshCollider;
    meshFilter: UnityEngine.MeshFilter;
    success: boolean;
  }
}
declare namespace UnityEngine.XR {
  class ARRenderMode extends System.Enum {
    protected constructor();
    static MaterialAsBackground: UnityEngine.XR.ARRenderMode;
    static StandardBackground: UnityEngine.XR.ARRenderMode;
    value__: number;
  }
}
declare namespace UnityEngine.XR {
  class ARBackgroundRenderer extends System.Object {
    constructor();
    backgroundMaterial: UnityEngine.Material;
    backgroundTexture: UnityEngine.Texture;
    camera: UnityEngine.Camera;
    mode: UnityEngine.XR.ARRenderMode;
  }
}
declare namespace UnityEngine {
  class AudioSpeakerMode extends System.Enum {
    protected constructor();
    static Mode5point1: UnityEngine.AudioSpeakerMode;
    static Mode7point1: UnityEngine.AudioSpeakerMode;
    static Mono: UnityEngine.AudioSpeakerMode;
    static Prologic: UnityEngine.AudioSpeakerMode;
    static Quad: UnityEngine.AudioSpeakerMode;
    static Raw: UnityEngine.AudioSpeakerMode;
    static Stereo: UnityEngine.AudioSpeakerMode;
    static Surround: UnityEngine.AudioSpeakerMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioDataLoadState extends System.Enum {
    protected constructor();
    static Failed: UnityEngine.AudioDataLoadState;
    static Loaded: UnityEngine.AudioDataLoadState;
    static Loading: UnityEngine.AudioDataLoadState;
    static Unloaded: UnityEngine.AudioDataLoadState;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioConfiguration extends System.ValueType {
    protected constructor();
    dspBufferSize: number;
    numRealVoices: number;
    numVirtualVoices: number;
    sampleRate: number;
    speakerMode: UnityEngine.AudioSpeakerMode;
  }
}
declare namespace UnityEngine {
  class AudioSettings extends System.Object {
    constructor();
    static GetConfiguration(): UnityEngine.AudioConfiguration;
    static GetDSPBufferSize(bufferLength: any, numBuffers: any): void;
    static GetSpatializerPluginName(): string;
    static GetSpatializerPluginNames(): string[];
    static Reset(config: UnityEngine.AudioConfiguration): boolean;
    static SetDSPBufferSize(bufferLength: number, numBuffers: number): void;
    static SetSpatializerPluginName(pluginName: string): void;
    static readonly driverCapabilities: UnityEngine.AudioSpeakerMode;
    static readonly driverCaps: UnityEngine.AudioSpeakerMode;
    static readonly dspTime: number;
    static outputSampleRate: number;
    static speakerMode: UnityEngine.AudioSpeakerMode;
  }
}
declare namespace UnityEngine {
  class AudioExtensionManager extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class AudioCompressionFormat extends System.Enum {
    protected constructor();
    static AAC: UnityEngine.AudioCompressionFormat;
    static ADPCM: UnityEngine.AudioCompressionFormat;
    static ATRAC9: UnityEngine.AudioCompressionFormat;
    static GCADPCM: UnityEngine.AudioCompressionFormat;
    static HEVAG: UnityEngine.AudioCompressionFormat;
    static MP3: UnityEngine.AudioCompressionFormat;
    static PCM: UnityEngine.AudioCompressionFormat;
    static VAG: UnityEngine.AudioCompressionFormat;
    value__: number;
    static Vorbis: UnityEngine.AudioCompressionFormat;
    static XMA: UnityEngine.AudioCompressionFormat;
  }
}
declare namespace UnityEngine {
  class AudioClipLoadType extends System.Enum {
    protected constructor();
    static CompressedInMemory: UnityEngine.AudioClipLoadType;
    static DecompressOnLoad: UnityEngine.AudioClipLoadType;
    static Streaming: UnityEngine.AudioClipLoadType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioClip extends UnityEngine.Object {
    constructor();
    static Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean): UnityEngine.AudioClip;
    static Create(name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean): UnityEngine.AudioClip;
    static Create(name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean, pcmreadercallback: ((data: number[]) => void)): UnityEngine.AudioClip;
    static Create(name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean, pcmreadercallback: ((data: number[]) => void), pcmsetpositioncallback: ((position: number) => void)): UnityEngine.AudioClip;
    static Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: ((data: number[]) => void)): UnityEngine.AudioClip;
    static Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: ((data: number[]) => void), pcmsetpositioncallback: ((position: number) => void)): UnityEngine.AudioClip;
    GetData(data: number[], offsetSamples: number): boolean;
    LoadAudioData(): boolean;
    SetData(data: number[], offsetSamples: number): boolean;
    UnloadAudioData(): boolean;
    readonly ambisonic: boolean;
    readonly channels: number;
    readonly frequency: number;
    readonly isReadyToPlay: boolean;
    readonly length: number;
    readonly loadInBackground: boolean;
    readonly loadState: UnityEngine.AudioDataLoadState;
    readonly loadType: UnityEngine.AudioClipLoadType;
    readonly preloadAudioData: boolean;
    readonly samples: number;
  }
}
declare namespace UnityEngine {
  class AudioVelocityUpdateMode extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.AudioVelocityUpdateMode;
    static Dynamic: UnityEngine.AudioVelocityUpdateMode;
    static Fixed: UnityEngine.AudioVelocityUpdateMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioBehaviour extends UnityEngine.Behaviour {
    constructor();
  }
}
declare namespace UnityEngine {
  class AudioListener extends UnityEngine.Behaviour {
    constructor();
    static GetOutputData(numSamples: number, channel: number): number[];
    static GetOutputData(samples: number[], channel: number): void;
    static GetSpectrumData(numSamples: number, channel: number, window: UnityEngine.FFTWindow): number[];
    static GetSpectrumData(samples: number[], channel: number, window: UnityEngine.FFTWindow): void;
    static pause: boolean;
    velocityUpdateMode: UnityEngine.AudioVelocityUpdateMode;
    static volume: number;
  }
}
declare namespace UnityEngine {
  class FFTWindow extends System.Enum {
    protected constructor();
    static Blackman: UnityEngine.FFTWindow;
    static BlackmanHarris: UnityEngine.FFTWindow;
    static Hamming: UnityEngine.FFTWindow;
    static Hanning: UnityEngine.FFTWindow;
    static Rectangular: UnityEngine.FFTWindow;
    static Triangle: UnityEngine.FFTWindow;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioRolloffMode extends System.Enum {
    protected constructor();
    static Custom: UnityEngine.AudioRolloffMode;
    static Linear: UnityEngine.AudioRolloffMode;
    static Logarithmic: UnityEngine.AudioRolloffMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioSourceCurveType extends System.Enum {
    protected constructor();
    static CustomRolloff: UnityEngine.AudioSourceCurveType;
    static ReverbZoneMix: UnityEngine.AudioSourceCurveType;
    static SpatialBlend: UnityEngine.AudioSourceCurveType;
    static Spread: UnityEngine.AudioSourceCurveType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioSource extends UnityEngine.Behaviour {
    constructor();
    GetAmbisonicDecoderFloat(index: number, value: any): boolean;
    GetCustomCurve(type: UnityEngine.AudioSourceCurveType): UnityEngine.AnimationCurve;
    GetOutputData(numSamples: number, channel: number): number[];
    GetOutputData(samples: number[], channel: number): void;
    GetSpatializerFloat(index: number, value: any): boolean;
    GetSpectrumData(numSamples: number, channel: number, window: UnityEngine.FFTWindow): number[];
    GetSpectrumData(samples: number[], channel: number, window: UnityEngine.FFTWindow): void;
    Pause(): void;
    Play(): void;
    Play(delay: number): void;
    static PlayClipAtPoint(clip: UnityEngine.AudioClip, position: UnityEngine.Vector3): void;
    static PlayClipAtPoint(clip: UnityEngine.AudioClip, position: UnityEngine.Vector3, volume: number): void;
    PlayDelayed(delay: number): void;
    PlayOneShot(clip: UnityEngine.AudioClip): void;
    PlayOneShot(clip: UnityEngine.AudioClip, volumeScale: number): void;
    PlayScheduled(time: number): void;
    SetAmbisonicDecoderFloat(index: number, value: number): boolean;
    SetCustomCurve(type: UnityEngine.AudioSourceCurveType, curve: UnityEngine.AnimationCurve): void;
    SetScheduledEndTime(time: number): void;
    SetScheduledStartTime(time: number): void;
    SetSpatializerFloat(index: number, value: number): boolean;
    Stop(): void;
    UnPause(): void;
    bypassEffects: boolean;
    bypassListenerEffects: boolean;
    bypassReverbZones: boolean;
    clip: UnityEngine.AudioClip;
    dopplerLevel: number;
    ignoreListenerPause: boolean;
    ignoreListenerVolume: boolean;
    readonly isPlaying: boolean;
    readonly isVirtual: boolean;
    loop: boolean;
    maxDistance: number;
    maxVolume: number;
    minDistance: number;
    minVolume: number;
    mute: boolean;
    outputAudioMixerGroup: UnityEngine.Audio.AudioMixerGroup;
    pan: number;
    panLevel: number;
    panStereo: number;
    pitch: number;
    playOnAwake: boolean;
    priority: number;
    reverbZoneMix: number;
    rolloffFactor: number;
    rolloffMode: UnityEngine.AudioRolloffMode;
    spatialBlend: number;
    spatialize: boolean;
    spatializePostEffects: boolean;
    spread: number;
    time: number;
    timeSamples: number;
    velocityUpdateMode: UnityEngine.AudioVelocityUpdateMode;
    volume: number;
  }
}
declare namespace UnityEngine {
  class AudioReverbPreset extends System.Enum {
    protected constructor();
    static Alley: UnityEngine.AudioReverbPreset;
    static Arena: UnityEngine.AudioReverbPreset;
    static Auditorium: UnityEngine.AudioReverbPreset;
    static Bathroom: UnityEngine.AudioReverbPreset;
    static CarpetedHallway: UnityEngine.AudioReverbPreset;
    static Cave: UnityEngine.AudioReverbPreset;
    static City: UnityEngine.AudioReverbPreset;
    static Concerthall: UnityEngine.AudioReverbPreset;
    static Dizzy: UnityEngine.AudioReverbPreset;
    static Drugged: UnityEngine.AudioReverbPreset;
    static Forest: UnityEngine.AudioReverbPreset;
    static Generic: UnityEngine.AudioReverbPreset;
    static Hallway: UnityEngine.AudioReverbPreset;
    static Hangar: UnityEngine.AudioReverbPreset;
    static Livingroom: UnityEngine.AudioReverbPreset;
    static Mountains: UnityEngine.AudioReverbPreset;
    static Off: UnityEngine.AudioReverbPreset;
    static PaddedCell: UnityEngine.AudioReverbPreset;
    static ParkingLot: UnityEngine.AudioReverbPreset;
    static Plain: UnityEngine.AudioReverbPreset;
    static Psychotic: UnityEngine.AudioReverbPreset;
    static Quarry: UnityEngine.AudioReverbPreset;
    static Room: UnityEngine.AudioReverbPreset;
    static SewerPipe: UnityEngine.AudioReverbPreset;
    static StoneCorridor: UnityEngine.AudioReverbPreset;
    static Stoneroom: UnityEngine.AudioReverbPreset;
    static Underwater: UnityEngine.AudioReverbPreset;
    static User: UnityEngine.AudioReverbPreset;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AudioReverbZone extends UnityEngine.Behaviour {
    constructor();
    decayHFRatio: number;
    decayTime: number;
    density: number;
    diffusion: number;
    HFReference: number;
    LFReference: number;
    maxDistance: number;
    minDistance: number;
    reflections: number;
    reflectionsDelay: number;
    reverb: number;
    reverbDelay: number;
    reverbPreset: UnityEngine.AudioReverbPreset;
    room: number;
    roomHF: number;
    roomLF: number;
    roomRolloffFactor: number;
  }
}
declare namespace UnityEngine {
  class AudioLowPassFilter extends UnityEngine.Behaviour {
    constructor();
    customCutoffCurve: UnityEngine.AnimationCurve;
    cutoffFrequency: number;
    lowpassResonaceQ: number;
    lowpassResonanceQ: number;
  }
}
declare namespace UnityEngine {
  class AudioHighPassFilter extends UnityEngine.Behaviour {
    constructor();
    cutoffFrequency: number;
    highpassResonaceQ: number;
    highpassResonanceQ: number;
  }
}
declare namespace UnityEngine {
  class AudioDistortionFilter extends UnityEngine.Behaviour {
    constructor();
    distortionLevel: number;
  }
}
declare namespace UnityEngine {
  class AudioEchoFilter extends UnityEngine.Behaviour {
    constructor();
    decayRatio: number;
    delay: number;
    dryMix: number;
    wetMix: number;
  }
}
declare namespace UnityEngine {
  class AudioChorusFilter extends UnityEngine.Behaviour {
    constructor();
    delay: number;
    depth: number;
    dryMix: number;
    feedback: number;
    rate: number;
    wetMix1: number;
    wetMix2: number;
    wetMix3: number;
  }
}
declare namespace UnityEngine {
  class AudioReverbFilter extends UnityEngine.Behaviour {
    constructor();
    decayHFRatio: number;
    decayTime: number;
    density: number;
    diffusion: number;
    dryLevel: number;
    hfReference: number;
    lfReference: number;
    lFReference: number;
    reflectionsDelay: number;
    reflectionsLevel: number;
    reverbDelay: number;
    reverbLevel: number;
    reverbPreset: UnityEngine.AudioReverbPreset;
    room: number;
    roomHF: number;
    roomLF: number;
    roomRolloffFactor: number;
  }
}
declare namespace UnityEngine {
  class Microphone extends System.Object {
    constructor();
    static End(deviceName: string): void;
    static GetDeviceCaps(deviceName: string, minFreq: any, maxFreq: any): void;
    static GetPosition(deviceName: string): number;
    static IsRecording(deviceName: string): boolean;
    static Start(deviceName: string, loop: boolean, lengthSec: number, frequency: number): UnityEngine.AudioClip;
    static readonly devices: string[];
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixerUpdateMode extends System.Enum {
    protected constructor();
    static Normal: UnityEngine.Audio.AudioMixerUpdateMode;
    static UnscaledTime: UnityEngine.Audio.AudioMixerUpdateMode;
    value__: number;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixer extends UnityEngine.Object {
    protected constructor();
    ClearFloat(name: string): boolean;
    FindMatchingGroups(subPath: string): UnityEngine.Audio.AudioMixerGroup[];
    FindSnapshot(name: string): UnityEngine.Audio.AudioMixerSnapshot;
    GetFloat(name: string, value: any): boolean;
    SetFloat(name: string, value: number): boolean;
    TransitionToSnapshots(snapshots: UnityEngine.Audio.AudioMixerSnapshot[], weights: number[], timeToReach: number): void;
    outputAudioMixerGroup: UnityEngine.Audio.AudioMixerGroup;
    updateMode: UnityEngine.Audio.AudioMixerUpdateMode;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixerSnapshot extends UnityEngine.Object {
    protected constructor();
    TransitionTo(timeToReach: number): void;
    readonly audioMixer: UnityEngine.Audio.AudioMixer;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixerGroup extends UnityEngine.Object {
    protected constructor();
    readonly audioMixer: UnityEngine.Audio.AudioMixer;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixerPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, inputCount?: number, normalizeInputVolumes?: boolean): UnityEngine.Audio.AudioMixerPlayable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Audio.AudioMixerPlayable): boolean;
    GetAutoNormalizeVolumes(): boolean;
    GetAutoNormalizeVolumes(value: boolean): void;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
  }
}
declare namespace UnityEngine.Audio {
  class AudioClipPlayable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, clip: UnityEngine.AudioClip, looping: boolean): UnityEngine.Audio.AudioClipPlayable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Audio.AudioClipPlayable): boolean;
    GetClip(): UnityEngine.AudioClip;
    GetClip(value: UnityEngine.AudioClip): void;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
    GetLooped(): boolean;
    GetPauseDelay(): number;
    GetStartDelay(): number;
    IsPlaying(): boolean;
    Seek(startTime: number, startDelay: number): void;
    Seek(startTime: number, startDelay: number, duration: number): void;
    SetLooped(value: boolean): void;
  }
}
declare namespace UnityEngine.Playables {
  class AudioPlayableGraphExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Audio {
  class AudioPlayableOutput extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, name: string, target: UnityEngine.AudioSource): UnityEngine.Audio.AudioPlayableOutput;
    GetHandle(): UnityEngine.Playables.PlayableOutputHandle;
    GetTarget(): UnityEngine.AudioSource;
    SetTarget(value: UnityEngine.AudioSource): void;
    static readonly Null: UnityEngine.Audio.AudioPlayableOutput;
  }
}
declare namespace UnityEngine {
  class MovieTexture extends UnityEngine.Texture {
    constructor();
    Pause(): void;
    Play(): void;
    Stop(): void;
    readonly audioClip: UnityEngine.AudioClip;
    readonly duration: number;
    readonly isPlaying: boolean;
    readonly isReadyToPlay: boolean;
    loop: boolean;
  }
}
declare namespace UnityEngine {
  class Texture extends UnityEngine.Object {
    constructor();
    GetNativeTextureID(): number;
    GetNativeTexturePtr(): any;
    static SetGlobalAnisotropicFilteringLimits(forcedMin: number, globalMax: number): void;
    anisoLevel: number;
    static anisotropicFiltering: UnityEngine.AnisotropicFiltering;
    dimension: UnityEngine.Rendering.TextureDimension;
    filterMode: UnityEngine.FilterMode;
    height: number;
    static masterTextureLimit: number;
    mipMapBias: number;
    readonly texelSize: UnityEngine.Vector2;
    width: number;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
  }
}
declare namespace UnityEngine {
  class WebCamFlags extends System.Enum {
    protected constructor();
    static FrontFacing: UnityEngine.WebCamFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class WebCamDevice extends System.ValueType {
    protected constructor();
    readonly isFrontFacing: boolean;
    readonly name: string;
  }
}
declare namespace UnityEngine {
  class WebCamTexture extends UnityEngine.Texture {
    constructor(deviceName: string, requestedWidth: number, requestedHeight: number, requestedFPS: number);
    constructor(deviceName: string, requestedWidth: number, requestedHeight: number);
    constructor(deviceName: string);
    constructor(requestedWidth: number, requestedHeight: number, requestedFPS: number);
    constructor(requestedWidth: number, requestedHeight: number);
    constructor();
    GetPixel(x: number, y: number): UnityEngine.Color;
    GetPixels(): UnityEngine.Color[];
    GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): UnityEngine.Color[];
    GetPixels32(): UnityEngine.Color32[];
    GetPixels32(colors: UnityEngine.Color32[]): UnityEngine.Color32[];
    MarkNonReadable(): void;
    Pause(): void;
    Play(): void;
    Stop(): void;
    deviceName: string;
    static readonly devices: UnityEngine.WebCamDevice[];
    readonly didUpdateThisFrame: boolean;
    readonly isPlaying: boolean;
    readonly isReadable: boolean;
    requestedFPS: number;
    requestedHeight: number;
    requestedWidth: number;
    readonly videoRotationAngle: number;
    readonly videoVerticallyMirrored: boolean;
  }
}
declare namespace UnityEngine {
  class AudioExtensionDefinition extends System.Object {
    constructor(definition: UnityEngine.AudioExtensionDefinition);
    constructor(assemblyNameIn: string, extensionNamespaceIn: string, extensionTypeNameIn: string);
    GetExtensionType(): any;
  }
}
declare namespace UnityEngine {
  class AudioSpatializerExtensionDefinition extends System.Object {
    constructor(spatializerNameIn: string, definitionIn: UnityEngine.AudioExtensionDefinition, editorDefinitionIn: UnityEngine.AudioExtensionDefinition);
    definition: UnityEngine.AudioExtensionDefinition;
    editorDefinition: UnityEngine.AudioExtensionDefinition;
    spatializerName: UnityEngine.PropertyName;
  }
}
declare namespace UnityEngine {
  class AudioAmbisonicExtensionDefinition extends System.Object {
    constructor(ambisonicNameIn: string, definitionIn: UnityEngine.AudioExtensionDefinition);
    ambisonicPluginName: UnityEngine.PropertyName;
    definition: UnityEngine.AudioExtensionDefinition;
  }
}
declare namespace UnityEngine {
  class AudioListenerExtension extends UnityEngine.ScriptableObject {
    constructor();
    ExtensionUpdate(): void;
    ReadExtensionProperty(propertyName: UnityEngine.PropertyName): number;
    WriteExtensionProperty(propertyName: UnityEngine.PropertyName, propertyValue: number): void;
    audioListener: UnityEngine.AudioListener;
  }
}
declare namespace UnityEngine {
  class AudioSourceExtension extends UnityEngine.ScriptableObject {
    constructor();
    ExtensionUpdate(): void;
    OnDestroy(): void;
    Play(): void;
    ReadExtensionProperty(propertyName: UnityEngine.PropertyName): number;
    Stop(): void;
    WriteExtensionProperty(propertyName: UnityEngine.PropertyName, propertyValue: number): void;
    audioSource: UnityEngine.AudioSource;
  }
}
declare namespace UnityEngine {
  class ClothSphereColliderPair extends System.ValueType {
    protected constructor();
    first: UnityEngine.SphereCollider;
    second: UnityEngine.SphereCollider;
  }
}
declare namespace UnityEngine {
  class Cloth extends UnityEngine.Component {
    constructor();
    ClearTransformMotion(): void;
    SetEnabledFading(enabled: boolean): void;
    SetEnabledFading(enabled: boolean, interpolationTime: number): void;
    bendingStiffness: number;
    capsuleColliders: UnityEngine.CapsuleCollider[];
    clothSolverFrequency: number;
    coefficients: UnityEngine.ClothSkinningCoefficient[];
    collisionMassScale: number;
    damping: number;
    enableContinuousCollision: boolean;
    enabled: boolean;
    externalAcceleration: UnityEngine.Vector3;
    friction: number;
    readonly normals: UnityEngine.Vector3[];
    randomAcceleration: UnityEngine.Vector3;
    selfCollision: boolean;
    sleepThreshold: number;
    solverFrequency: boolean;
    sphereColliders: UnityEngine.ClothSphereColliderPair[];
    stretchingStiffness: number;
    useContinuousCollision: number;
    useGravity: boolean;
    useVirtualParticles: number;
    readonly vertices: UnityEngine.Vector3[];
    worldAccelerationScale: number;
    worldVelocityScale: number;
  }
}
declare namespace UnityEngine {
  class ClothSkinningCoefficient extends System.ValueType {
    protected constructor();
    collisionSphereDistance: number;
    maxDistance: number;
  }
}
declare namespace UnityEngine {
  class ClusterInputType extends System.Enum {
    protected constructor();
    static Axis: UnityEngine.ClusterInputType;
    static Button: UnityEngine.ClusterInputType;
    static CustomProvidedInput: UnityEngine.ClusterInputType;
    static Tracker: UnityEngine.ClusterInputType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ClusterInput extends System.Object {
    constructor();
    static AddInput(name: string, deviceName: string, serverUrl: string, index: number, type: UnityEngine.ClusterInputType): boolean;
    static CheckConnectionToServer(name: string): boolean;
    static EditInput(name: string, deviceName: string, serverUrl: string, index: number, type: UnityEngine.ClusterInputType): boolean;
    static GetAxis(name: string): number;
    static GetButton(name: string): boolean;
    static GetTrackerPosition(name: string): UnityEngine.Vector3;
    static GetTrackerRotation(name: string): UnityEngine.Quaternion;
    static SetAxis(name: string, value: number): void;
    static SetButton(name: string, value: boolean): void;
    static SetTrackerPosition(name: string, value: UnityEngine.Vector3): void;
    static SetTrackerRotation(name: string, value: UnityEngine.Quaternion): void;
  }
}
declare namespace UnityEngine {
  class ClusterNetwork extends System.Object {
    constructor();
    static readonly isDisconnected: boolean;
    static readonly isMasterOfCluster: boolean;
    static nodeIndex: number;
  }
}
declare namespace UnityEngine {
  class AndroidInput extends System.Object {
    protected constructor();
    static GetSecondaryTouch(index: number): UnityEngine.Touch;
    static readonly secondaryTouchEnabled: boolean;
    static readonly secondaryTouchHeight: number;
    static readonly secondaryTouchWidth: number;
    static readonly touchCountSecondary: number;
  }
}
declare namespace UnityEngine {
  class AndroidJavaObject extends System.Object {
    constructor(className: string, args: any[]);
    Call(methodName: string, args: any[]): void;
    CallStatic(methodName: string, args: any[]): void;
    Dispose(): void;
    GetRawClass(): any;
    GetRawObject(): any;
  }
}
declare namespace UnityEngine {
  class AndroidJavaClass extends UnityEngine.AndroidJavaObject {
    constructor(className: string);
  }
}
declare namespace UnityEngine {
  class jvalue extends System.ValueType {
    protected constructor();
    b: number;
    c: any;
    d: number;
    f: number;
    i: number;
    j: number;
    l: any;
    s: number;
    z: boolean;
  }
}
declare namespace UnityEngine {
  class AndroidJNIHelper extends System.Object {
    protected constructor();
    static ConvertToJNIArray(array: any): any;
    static CreateJavaProxy(proxy: UnityEngine.AndroidJavaProxy): any;
    static CreateJavaRunnable(jrunnable: (() => void)): any;
    static CreateJNIArgArray(args: any[]): UnityEngine.jvalue[];
    static DeleteJNIArgArray(args: any[], jniArgs: UnityEngine.jvalue[]): void;
    static GetConstructorID(javaClass: any): any;
    static GetConstructorID(jclass: any, args: any[]): any;
    static GetConstructorID(javaClass: any, signature: string): any;
    static GetFieldID(javaClass: any, fieldName: string): any;
    static GetFieldID(javaClass: any, fieldName: string, signature: string): any;
    static GetFieldID(javaClass: any, fieldName: string, signature: string, isStatic: boolean): any;
    static GetMethodID(javaClass: any, methodName: string): any;
    static GetMethodID(jclass: any, methodName: string, args: any[], isStatic: boolean): any;
    static GetMethodID(javaClass: any, methodName: string, signature: string): any;
    static GetMethodID(javaClass: any, methodName: string, signature: string, isStatic: boolean): any;
    static GetSignature(obj: any): string;
    static GetSignature(args: any[]): string;
    static debug: boolean;
  }
}
declare namespace UnityEngine {
  class AndroidJNI extends System.Object {
    protected constructor();
    static AllocObject(clazz: any): any;
    static AttachCurrentThread(): number;
    static CallBooleanMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): boolean;
    static CallByteMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallCharMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallDoubleMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallFloatMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallIntMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallLongMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallObjectMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallShortMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticBooleanMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): boolean;
    static CallStaticByteMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticCharMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallStaticDoubleMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticFloatMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticIntMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticLongMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticObjectMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallStaticShortMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticStringMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): string;
    static CallStaticVoidMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): void;
    static CallStringMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): string;
    static CallVoidMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): void;
    static DeleteGlobalRef(obj: any): void;
    static DeleteLocalRef(obj: any): void;
    static DetachCurrentThread(): number;
    static EnsureLocalCapacity(capacity: number): number;
    static ExceptionClear(): void;
    static ExceptionDescribe(): void;
    static ExceptionOccurred(): any;
    static FatalError(message: string): void;
    static FindClass(name: string): any;
    static FromBooleanArray(array: any): boolean[];
    static FromByteArray(array: any): number[];
    static FromCharArray(array: any): any[];
    static FromDoubleArray(array: any): number[];
    static FromFloatArray(array: any): number[];
    static FromIntArray(array: any): number[];
    static FromLongArray(array: any): number[];
    static FromObjectArray(array: any): any[];
    static FromReflectedField(refField: any): any;
    static FromReflectedMethod(refMethod: any): any;
    static FromShortArray(array: any): number[];
    static GetArrayLength(array: any): number;
    static GetBooleanArrayElement(array: any, index: number): boolean;
    static GetBooleanField(obj: any, fieldID: any): boolean;
    static GetByteArrayElement(array: any, index: number): number;
    static GetByteField(obj: any, fieldID: any): number;
    static GetCharArrayElement(array: any, index: number): any;
    static GetCharField(obj: any, fieldID: any): any;
    static GetDoubleArrayElement(array: any, index: number): number;
    static GetDoubleField(obj: any, fieldID: any): number;
    static GetFieldID(clazz: any, name: string, sig: string): any;
    static GetFloatArrayElement(array: any, index: number): number;
    static GetFloatField(obj: any, fieldID: any): number;
    static GetIntArrayElement(array: any, index: number): number;
    static GetIntField(obj: any, fieldID: any): number;
    static GetLongArrayElement(array: any, index: number): number;
    static GetLongField(obj: any, fieldID: any): number;
    static GetMethodID(clazz: any, name: string, sig: string): any;
    static GetObjectArrayElement(array: any, index: number): any;
    static GetObjectClass(obj: any): any;
    static GetObjectField(obj: any, fieldID: any): any;
    static GetShortArrayElement(array: any, index: number): number;
    static GetShortField(obj: any, fieldID: any): number;
    static GetStaticBooleanField(clazz: any, fieldID: any): boolean;
    static GetStaticByteField(clazz: any, fieldID: any): number;
    static GetStaticCharField(clazz: any, fieldID: any): any;
    static GetStaticDoubleField(clazz: any, fieldID: any): number;
    static GetStaticFieldID(clazz: any, name: string, sig: string): any;
    static GetStaticFloatField(clazz: any, fieldID: any): number;
    static GetStaticIntField(clazz: any, fieldID: any): number;
    static GetStaticLongField(clazz: any, fieldID: any): number;
    static GetStaticMethodID(clazz: any, name: string, sig: string): any;
    static GetStaticObjectField(clazz: any, fieldID: any): any;
    static GetStaticShortField(clazz: any, fieldID: any): number;
    static GetStaticStringField(clazz: any, fieldID: any): string;
    static GetStringField(obj: any, fieldID: any): string;
    static GetStringUTFChars(str: any): string;
    static GetStringUTFLength(str: any): number;
    static GetSuperclass(clazz: any): any;
    static GetVersion(): number;
    static IsAssignableFrom(clazz1: any, clazz2: any): boolean;
    static IsInstanceOf(obj: any, clazz: any): boolean;
    static IsSameObject(obj1: any, obj2: any): boolean;
    static NewBooleanArray(size: number): any;
    static NewByteArray(size: number): any;
    static NewCharArray(size: number): any;
    static NewDoubleArray(size: number): any;
    static NewFloatArray(size: number): any;
    static NewGlobalRef(obj: any): any;
    static NewIntArray(size: number): any;
    static NewLocalRef(obj: any): any;
    static NewLongArray(size: number): any;
    static NewObject(clazz: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static NewObjectArray(size: number, clazz: any, obj: any): any;
    static NewShortArray(size: number): any;
    static NewStringUTF(bytes: string): any;
    static PopLocalFrame(ptr: any): any;
    static PushLocalFrame(capacity: number): number;
    static SetBooleanArrayElement(array: any, index: number, val: number): void;
    static SetBooleanField(obj: any, fieldID: any, val: boolean): void;
    static SetByteArrayElement(array: any, index: number, val: number): void;
    static SetByteField(obj: any, fieldID: any, val: number): void;
    static SetCharArrayElement(array: any, index: number, val: any): void;
    static SetCharField(obj: any, fieldID: any, val: any): void;
    static SetDoubleArrayElement(array: any, index: number, val: number): void;
    static SetDoubleField(obj: any, fieldID: any, val: number): void;
    static SetFloatArrayElement(array: any, index: number, val: number): void;
    static SetFloatField(obj: any, fieldID: any, val: number): void;
    static SetIntArrayElement(array: any, index: number, val: number): void;
    static SetIntField(obj: any, fieldID: any, val: number): void;
    static SetLongArrayElement(array: any, index: number, val: number): void;
    static SetLongField(obj: any, fieldID: any, val: number): void;
    static SetObjectArrayElement(array: any, index: number, obj: any): void;
    static SetObjectField(obj: any, fieldID: any, val: any): void;
    static SetShortArrayElement(array: any, index: number, val: number): void;
    static SetShortField(obj: any, fieldID: any, val: number): void;
    static SetStaticBooleanField(clazz: any, fieldID: any, val: boolean): void;
    static SetStaticByteField(clazz: any, fieldID: any, val: number): void;
    static SetStaticCharField(clazz: any, fieldID: any, val: any): void;
    static SetStaticDoubleField(clazz: any, fieldID: any, val: number): void;
    static SetStaticFloatField(clazz: any, fieldID: any, val: number): void;
    static SetStaticIntField(clazz: any, fieldID: any, val: number): void;
    static SetStaticLongField(clazz: any, fieldID: any, val: number): void;
    static SetStaticObjectField(clazz: any, fieldID: any, val: any): void;
    static SetStaticShortField(clazz: any, fieldID: any, val: number): void;
    static SetStaticStringField(clazz: any, fieldID: any, val: string): void;
    static SetStringField(obj: any, fieldID: any, val: string): void;
    static Throw(obj: any): number;
    static ThrowNew(clazz: any, message: string): number;
    static ToBooleanArray(array: boolean[]): any;
    static ToByteArray(array: number[]): any;
    static ToCharArray(array: any[]): any;
    static ToDoubleArray(array: number[]): any;
    static ToFloatArray(array: number[]): any;
    static ToIntArray(array: number[]): any;
    static ToLongArray(array: number[]): any;
    static ToObjectArray(array: any[]): any;
    static ToObjectArray(array: any[], arrayClass: any): any;
    static ToReflectedField(clazz: any, fieldID: any, isStatic: boolean): any;
    static ToReflectedMethod(clazz: any, methodID: any, isStatic: boolean): any;
    static ToShortArray(array: number[]): any;
  }
}
declare namespace UnityEngine {
  class NetworkReachability extends System.Enum {
    protected constructor();
    static NotReachable: UnityEngine.NetworkReachability;
    static ReachableViaCarrierDataNetwork: UnityEngine.NetworkReachability;
    static ReachableViaLocalAreaNetwork: UnityEngine.NetworkReachability;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Application extends System.Object {
    constructor();
    static CancelQuit(): void;
    static CanStreamedLevelBeLoaded(levelIndex: number): boolean;
    static CanStreamedLevelBeLoaded(levelName: string): boolean;
    static CaptureScreenshot(filename: string): void;
    static CaptureScreenshot(filename: string, superSize: number): void;
    static DontDestroyOnLoad(mono: UnityEngine.Object): void;
    static ExternalCall(functionName: string, args: any[]): void;
    static ExternalEval(script: string): void;
    static ForceCrash(mode: number): void;
    static GetBuildTags(): string[];
    static GetStackTraceLogType(logType: UnityEngine.LogType): UnityEngine.StackTraceLogType;
    static GetStreamProgressForLevel(levelIndex: number): number;
    static GetStreamProgressForLevel(levelName: string): number;
    static HasProLicense(): boolean;
    static HasUserAuthorization(mode: UnityEngine.UserAuthorization): boolean;
    static LoadLevel(index: number): void;
    static LoadLevel(name: string): void;
    static LoadLevelAdditive(index: number): void;
    static LoadLevelAdditive(name: string): void;
    static LoadLevelAdditiveAsync(index: number): UnityEngine.AsyncOperation;
    static LoadLevelAdditiveAsync(levelName: string): UnityEngine.AsyncOperation;
    static LoadLevelAsync(index: number): UnityEngine.AsyncOperation;
    static LoadLevelAsync(levelName: string): UnityEngine.AsyncOperation;
    static OpenURL(url: string): void;
    static Quit(): void;
    static RegisterLogCallback(handler: ((condition: string, stackTrace: string, type: UnityEngine.LogType) => void)): void;
    static RegisterLogCallbackThreaded(handler: ((condition: string, stackTrace: string, type: UnityEngine.LogType) => void)): void;
    static RequestAdvertisingIdentifierAsync(delegateMethod: ((advertisingId: string, trackingEnabled: boolean, errorMsg: string) => void)): boolean;
    static RequestUserAuthorization(mode: UnityEngine.UserAuthorization): UnityEngine.AsyncOperation;
    static SetBuildTags(buildTags: string[]): void;
    static SetStackTraceLogType(logType: UnityEngine.LogType, stackTraceType: UnityEngine.StackTraceLogType): void;
    static Unload(): void;
    static UnloadLevel(index: number): boolean;
    static UnloadLevel(scenePath: string): boolean;
    static readonly absoluteURL: string;
    static backgroundLoadingPriority: UnityEngine.ThreadPriority;
    static readonly buildGUID: string;
    static readonly cloudProjectId: string;
    static readonly companyName: string;
    static readonly dataPath: string;
    static readonly genuine: boolean;
    static readonly genuineCheckAvailable: boolean;
    static readonly identifier: string;
    static readonly installerName: string;
    static readonly installMode: UnityEngine.ApplicationInstallMode;
    static readonly internetReachability: UnityEngine.NetworkReachability;
    static readonly isConsolePlatform: boolean;
    static readonly isEditor: boolean;
    static readonly isFocused: boolean;
    static readonly isLoadingLevel: boolean;
    static readonly isMobilePlatform: boolean;
    static readonly isPlayer: boolean;
    static readonly isPlaying: boolean;
    static readonly isShowingSplashScreen: boolean;
    static readonly isWebPlayer: boolean;
    static readonly levelCount: number;
    static readonly loadedLevel: number;
    static readonly loadedLevelName: string;
    static readonly persistentDataPath: string;
    static readonly platform: UnityEngine.RuntimePlatform;
    static readonly productName: string;
    static runInBackground: boolean;
    static readonly sandboxType: UnityEngine.ApplicationSandboxType;
    static readonly srcValue: string;
    static stackTraceLogType: UnityEngine.StackTraceLogType;
    static readonly streamedBytes: number;
    static readonly streamingAssetsPath: string;
    static readonly systemLanguage: UnityEngine.SystemLanguage;
    static targetFrameRate: number;
    static readonly temporaryCachePath: string;
    static readonly unityVersion: string;
    static readonly version: string;
    static readonly webSecurityEnabled: boolean;
    static readonly webSecurityHostUrl: string;
  }
}
declare namespace UnityEngine {
  class UserAuthorization extends System.Enum {
    protected constructor();
    static Microphone: UnityEngine.UserAuthorization;
    value__: number;
    static WebCam: UnityEngine.UserAuthorization;
  }
}
declare namespace UnityEngine {
  class ApplicationInstallMode extends System.Enum {
    protected constructor();
    static Adhoc: UnityEngine.ApplicationInstallMode;
    static DeveloperBuild: UnityEngine.ApplicationInstallMode;
    static Editor: UnityEngine.ApplicationInstallMode;
    static Enterprise: UnityEngine.ApplicationInstallMode;
    static Store: UnityEngine.ApplicationInstallMode;
    static Unknown: UnityEngine.ApplicationInstallMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ApplicationSandboxType extends System.Enum {
    protected constructor();
    static NotSandboxed: UnityEngine.ApplicationSandboxType;
    static SandboxBroken: UnityEngine.ApplicationSandboxType;
    static Sandboxed: UnityEngine.ApplicationSandboxType;
    static Unknown: UnityEngine.ApplicationSandboxType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AssetBundleCreateRequest extends UnityEngine.AsyncOperation {
    constructor();
    readonly assetBundle: UnityEngine.AssetBundle;
  }
}
declare namespace UnityEngine {
  class AsyncOperation extends UnityEngine.YieldInstruction {
    constructor();
    allowSceneActivation: boolean;
    readonly isDone: boolean;
    priority: number;
    readonly progress: number;
  }
}
declare namespace UnityEngine {
  class YieldInstruction extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class AssetBundleRequest extends UnityEngine.AsyncOperation {
    constructor();
    readonly allAssets: UnityEngine.Object[];
    readonly asset: UnityEngine.Object;
  }
}
declare namespace UnityEngine {
  class AssetBundle extends UnityEngine.Object {
    constructor();
    AllAssetNames(): string[];
    Contains(name: string): boolean;
    static CreateFromFile(path: string): UnityEngine.AssetBundle;
    static CreateFromMemory(binary: number[]): UnityEngine.AssetBundleCreateRequest;
    static CreateFromMemoryImmediate(binary: number[]): UnityEngine.AssetBundle;
    GetAllAssetNames(): string[];
    static GetAllLoadedAssetBundles(): any;
    GetAllScenePaths(): string[];
    Load(name: string): UnityEngine.Object;
    Load(name: string, type: any): UnityEngine.Object;
    LoadAll(): UnityEngine.Object[];
    LoadAll(type: any): UnityEngine.Object[];
    LoadAllAssets(): UnityEngine.Object[];
    LoadAllAssets(type: any): UnityEngine.Object[];
    LoadAllAssetsAsync(): UnityEngine.AssetBundleRequest;
    LoadAllAssetsAsync(type: any): UnityEngine.AssetBundleRequest;
    LoadAsset(name: string): UnityEngine.Object;
    LoadAsset(name: string, type: any): UnityEngine.Object;
    LoadAssetAsync(name: string): UnityEngine.AssetBundleRequest;
    LoadAssetAsync(name: string, type: any): UnityEngine.AssetBundleRequest;
    LoadAssetWithSubAssets(name: string): UnityEngine.Object[];
    LoadAssetWithSubAssets(name: string, type: any): UnityEngine.Object[];
    LoadAssetWithSubAssetsAsync(name: string): UnityEngine.AssetBundleRequest;
    LoadAssetWithSubAssetsAsync(name: string, type: any): UnityEngine.AssetBundleRequest;
    LoadAsync(name: string, type: any): UnityEngine.AssetBundleRequest;
    static LoadFromFile(path: string): UnityEngine.AssetBundle;
    static LoadFromFile(path: string, crc: number): UnityEngine.AssetBundle;
    static LoadFromFile(path: string, crc: number, offset: number): UnityEngine.AssetBundle;
    static LoadFromFileAsync(path: string): UnityEngine.AssetBundleCreateRequest;
    static LoadFromFileAsync(path: string, crc: number): UnityEngine.AssetBundleCreateRequest;
    static LoadFromFileAsync(path: string, crc: number, offset: number): UnityEngine.AssetBundleCreateRequest;
    static LoadFromMemory(binary: number[]): UnityEngine.AssetBundle;
    static LoadFromMemory(binary: number[], crc: number): UnityEngine.AssetBundle;
    static LoadFromMemoryAsync(binary: number[]): UnityEngine.AssetBundleCreateRequest;
    static LoadFromMemoryAsync(binary: number[], crc: number): UnityEngine.AssetBundleCreateRequest;
    static LoadFromStream(stream: any): UnityEngine.AssetBundle;
    static LoadFromStream(stream: any, crc: number): UnityEngine.AssetBundle;
    static LoadFromStream(stream: any, crc: number, managedReadBufferSize: number): UnityEngine.AssetBundle;
    static LoadFromStreamAsync(stream: any): UnityEngine.AssetBundleCreateRequest;
    static LoadFromStreamAsync(stream: any, crc: number): UnityEngine.AssetBundleCreateRequest;
    static LoadFromStreamAsync(stream: any, crc: number, managedReadBufferSize: number): UnityEngine.AssetBundleCreateRequest;
    Unload(unloadAllLoadedObjects: boolean): void;
    static UnloadAllAssetBundles(unloadAllObjects: boolean): void;
    readonly isStreamedSceneAssetBundle: boolean;
    readonly mainAsset: UnityEngine.Object;
  }
}
declare namespace UnityEngine {
  class AssetBundleManifest extends UnityEngine.Object {
    constructor();
    GetAllAssetBundles(): string[];
    GetAllAssetBundlesWithVariant(): string[];
    GetAllDependencies(assetBundleName: string): string[];
    GetAssetBundleHash(assetBundleName: string): UnityEngine.Hash128;
    GetDirectDependencies(assetBundleName: string): string[];
  }
}
declare namespace UnityEngine {
  class SystemInfo extends System.Object {
    constructor();
    static SupportsRenderTextureFormat(format: UnityEngine.RenderTextureFormat): boolean;
    static SupportsTextureFormat(format: UnityEngine.TextureFormat): boolean;
    static readonly batteryLevel: number;
    static readonly batteryStatus: UnityEngine.BatteryStatus;
    static readonly copyTextureSupport: UnityEngine.Rendering.CopyTextureSupport;
    static readonly deviceModel: string;
    static readonly deviceName: string;
    static readonly deviceType: UnityEngine.DeviceType;
    static readonly deviceUniqueIdentifier: string;
    static readonly graphicsDeviceID: number;
    static readonly graphicsDeviceName: string;
    static readonly graphicsDeviceType: UnityEngine.Rendering.GraphicsDeviceType;
    static readonly graphicsDeviceVendor: string;
    static readonly graphicsDeviceVendorID: number;
    static readonly graphicsDeviceVersion: string;
    static readonly graphicsMemorySize: number;
    static readonly graphicsMultiThreaded: boolean;
    static readonly graphicsPixelFillrate: number;
    static readonly graphicsShaderLevel: number;
    static readonly graphicsUVStartsAtTop: boolean;
    static readonly maxCubemapSize: number;
    static readonly maxTextureSize: number;
    static readonly npotSupport: UnityEngine.NPOTSupport;
    static readonly operatingSystem: string;
    static readonly operatingSystemFamily: UnityEngine.OperatingSystemFamily;
    static readonly processorCount: number;
    static readonly processorFrequency: number;
    static readonly processorType: string;
    static readonly supportedRenderTargetCount: number;
    static readonly supports2DArrayTextures: boolean;
    static readonly supports3DRenderTextures: boolean;
    static readonly supports3DTextures: boolean;
    static readonly supportsAccelerometer: boolean;
    static readonly supportsAudio: boolean;
    static readonly supportsComputeShaders: boolean;
    static readonly supportsCubemapArrayTextures: boolean;
    static readonly supportsGyroscope: boolean;
    static readonly supportsImageEffects: boolean;
    static readonly supportsInstancing: boolean;
    static readonly supportsLocationService: boolean;
    static readonly supportsMotionVectors: boolean;
    static readonly supportsRawShadowDepthSampling: boolean;
    static readonly supportsRenderTextures: boolean;
    static readonly supportsRenderToCubemap: boolean;
    static readonly supportsShadows: boolean;
    static readonly supportsSparseTextures: boolean;
    static readonly supportsStencil: number;
    static readonly supportsVertexPrograms: boolean;
    static readonly supportsVibration: boolean;
    static readonly systemMemorySize: number;
    static readonly usesReversedZBuffer: boolean;
    static unsupportedIdentifier: string;
  }
}
declare namespace UnityEngine {
  class WaitForSeconds extends UnityEngine.YieldInstruction {
    constructor(seconds: number);
  }
}
declare namespace UnityEngine {
  class WaitForFixedUpdate extends UnityEngine.YieldInstruction {
    constructor();
  }
}
declare namespace UnityEngine {
  class WaitForEndOfFrame extends UnityEngine.YieldInstruction {
    constructor();
  }
}
declare namespace UnityEngine {
  class CustomYieldInstruction extends System.Object {
    protected constructor();
    MoveNext(): boolean;
    Reset(): void;
    readonly Current: any;
    readonly keepWaiting: boolean;
  }
}
declare namespace UnityEngine {
  class WaitWhile extends UnityEngine.CustomYieldInstruction {
    constructor(predicate: (() => boolean));
    readonly keepWaiting: boolean;
  }
}
declare namespace UnityEngine {
  class WaitUntil extends UnityEngine.CustomYieldInstruction {
    constructor(predicate: (() => boolean));
    readonly keepWaiting: boolean;
  }
}
declare namespace UnityEngine {
  class Coroutine extends UnityEngine.YieldInstruction {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class FailedToLoadScriptObject extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class BillboardAsset extends UnityEngine.Object {
    constructor();
    GetImageTexCoords(): UnityEngine.Vector4[];
    GetImageTexCoords(imageTexCoords: UnityEngine.Vector4[]): void;
    GetIndices(): number[];
    GetIndices(indices: number[]): void;
    GetVertices(): UnityEngine.Vector2[];
    GetVertices(vertices: UnityEngine.Vector2[]): void;
    SetImageTexCoords(imageTexCoords: UnityEngine.Vector4[]): void;
    SetImageTexCoords(imageTexCoords: UnityEngine.Vector4[]): void;
    SetIndices(indices: number[]): void;
    SetIndices(indices: number[]): void;
    SetVertices(vertices: UnityEngine.Vector2[]): void;
    SetVertices(vertices: UnityEngine.Vector2[]): void;
    bottom: number;
    height: number;
    readonly imageCount: number;
    readonly indexCount: number;
    material: UnityEngine.Material;
    readonly vertexCount: number;
    width: number;
  }
}
declare namespace UnityEngine {
  class BillboardRenderer extends UnityEngine.Renderer {
    constructor();
    billboard: UnityEngine.BillboardAsset;
  }
}
declare namespace UnityEngine {
  class Renderer extends UnityEngine.Component {
    constructor();
    GetClosestReflectionProbes(result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]): void;
    GetPropertyBlock(dest: UnityEngine.MaterialPropertyBlock): void;
    SetPropertyBlock(properties: UnityEngine.MaterialPropertyBlock): void;
    allowOcclusionWhenDynamic: boolean;
    readonly bounds: UnityEngine.Bounds;
    castShadows: boolean;
    enabled: boolean;
    readonly isPartOfStaticBatch: boolean;
    readonly isVisible: boolean;
    lightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    readonly localToWorldMatrix: UnityEngine.Matrix4x4;
    material: UnityEngine.Material;
    materials: UnityEngine.Material[];
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    motionVectors: boolean;
    probeAnchor: UnityEngine.Transform;
    realtimeLightmapIndex: number;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    receiveShadows: boolean;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    sortingLayerID: number;
    sortingLayerName: string;
    sortingOrder: number;
    useLightProbes: boolean;
    readonly worldToLocalMatrix: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine {
  class BootConfigData extends System.Object {
    protected constructor();
    AddKey(key: string): void;
    Append(key: string, value: string): void;
    Set(key: string, value: string): void;
  }
}
declare namespace UnityEngine {
  class CacheIndex extends System.ValueType {
    protected constructor();
    bytesUsed: number;
    expires: number;
    name: string;
  }
}
declare namespace UnityEngine {
  class Cache extends System.ValueType {
    protected constructor();
    ClearCache(): boolean;
    ClearCache(expiration: number): boolean;
    Equals(other: any): boolean;
    GetHashCode(): number;
    expirationDelay: number;
    readonly index: number;
    maximumAvailableStorageSpace: number;
    readonly path: string;
    readonly readOnly: boolean;
    readonly ready: boolean;
    readonly spaceFree: number;
    readonly spaceOccupied: number;
    readonly valid: boolean;
  }
}
declare namespace UnityEngine {
  class Caching extends System.Object {
    constructor();
    static AddCache(cachePath: string): UnityEngine.Cache;
    static ClearAllCachedVersions(assetBundleName: string): boolean;
    static ClearCache(): boolean;
    static ClearCache(expiration: number): boolean;
    static ClearCachedVersion(assetBundleName: string, hash: UnityEngine.Hash128): boolean;
    static ClearOtherCachedVersions(assetBundleName: string, hash: UnityEngine.Hash128): boolean;
    static GetAllCachePaths(cachePaths: string[]): void;
    static GetCacheAt(cacheIndex: number): UnityEngine.Cache;
    static GetCacheByPath(cachePath: string): UnityEngine.Cache;
    static GetCachedVersions(assetBundleName: string, outCachedVersions: UnityEngine.Hash128[]): void;
    static GetVersionFromCache(url: string): number;
    static IsVersionCached(url: string, version: number): boolean;
    static IsVersionCached(url: string, hash: UnityEngine.Hash128): boolean;
    static IsVersionCached(cachedBundle: UnityEngine.CachedAssetBundle): boolean;
    static MarkAsUsed(url: string, version: number): boolean;
    static MarkAsUsed(url: string, hash: UnityEngine.Hash128): boolean;
    static MarkAsUsed(cachedBundle: UnityEngine.CachedAssetBundle): boolean;
    static MoveCacheAfter(src: UnityEngine.Cache, dst: UnityEngine.Cache): void;
    static MoveCacheBefore(src: UnityEngine.Cache, dst: UnityEngine.Cache): void;
    static RemoveCache(cache: UnityEngine.Cache): boolean;
    static ResetNoBackupFlag(url: string, version: number): void;
    static ResetNoBackupFlag(url: string, hash: UnityEngine.Hash128): void;
    static ResetNoBackupFlag(cachedBundle: UnityEngine.CachedAssetBundle): void;
    static SetNoBackupFlag(url: string, version: number): void;
    static SetNoBackupFlag(url: string, hash: UnityEngine.Hash128): void;
    static SetNoBackupFlag(cachedBundle: UnityEngine.CachedAssetBundle): void;
    static readonly cacheCount: number;
    static compressionEnabled: boolean;
    static currentCacheForWriting: UnityEngine.Cache;
    static readonly defaultCache: UnityEngine.Cache;
    static expirationDelay: number;
    static readonly index: UnityEngine.CacheIndex[];
    static maximumAvailableDiskSpace: number;
    static readonly ready: boolean;
    static readonly spaceAvailable: number;
    static readonly spaceFree: number;
    static readonly spaceOccupied: number;
    static readonly spaceUsed: number;
  }
}
declare namespace UnityEngine {
  class Camera extends UnityEngine.Behaviour {
    constructor();
    AddCommandBuffer(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer): void;
    CalculateFrustumCorners(viewport: UnityEngine.Rect, z: number, eye: UnityEngine.Camera.MonoOrStereoscopicEye, outCorners: UnityEngine.Vector3[]): void;
    CalculateObliqueMatrix(clipPlane: UnityEngine.Vector4): UnityEngine.Matrix4x4;
    CopyFrom(other: UnityEngine.Camera): void;
    DoClear(): void;
    static GetAllCameras(cameras: UnityEngine.Camera[]): number;
    GetCommandBuffers(evt: UnityEngine.Rendering.CameraEvent): UnityEngine.Rendering.CommandBuffer[];
    GetScreenHeight(): number;
    GetScreenWidth(): number;
    GetStereoProjectionMatrices(): UnityEngine.Matrix4x4[];
    GetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
    GetStereoViewMatrices(): UnityEngine.Matrix4x4[];
    GetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
    RemoveAllCommandBuffers(): void;
    RemoveCommandBuffer(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer): void;
    RemoveCommandBuffers(evt: UnityEngine.Rendering.CameraEvent): void;
    Render(): void;
    RenderDontRestore(): void;
    RenderToCubemap(cubemap: UnityEngine.Cubemap): boolean;
    RenderToCubemap(cubemap: UnityEngine.Cubemap, faceMask: number): boolean;
    RenderToCubemap(cubemap: UnityEngine.RenderTexture): boolean;
    RenderToCubemap(cubemap: UnityEngine.RenderTexture, faceMask: number): boolean;
    RenderWithShader(shader: UnityEngine.Shader, replacementTag: string): void;
    ResetAspect(): void;
    ResetCullingMatrix(): void;
    ResetFieldOfView(): void;
    ResetProjectionMatrix(): void;
    ResetReplacementShader(): void;
    ResetStereoProjectionMatrices(): void;
    ResetStereoViewMatrices(): void;
    ResetTransparencySortSettings(): void;
    ResetWorldToCameraMatrix(): void;
    ScreenPointToRay(position: UnityEngine.Vector3): UnityEngine.Ray;
    ScreenToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ScreenToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    SetReplacementShader(shader: UnityEngine.Shader, replacementTag: string): void;
    SetStereoProjectionMatrices(leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4): void;
    SetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): void;
    SetStereoViewMatrices(leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4): void;
    SetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): void;
    SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer): void;
    SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer): void;
    static SetupCurrent(cur: UnityEngine.Camera): void;
    ViewportPointToRay(position: UnityEngine.Vector3): UnityEngine.Ray;
    ViewportToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ViewportToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    WorldToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    WorldToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    readonly activeTexture: UnityEngine.RenderTexture;
    readonly actualRenderingPath: UnityEngine.RenderingPath;
    static readonly allCameras: UnityEngine.Camera[];
    static readonly allCamerasCount: number;
    allowHDR: boolean;
    allowMSAA: boolean;
    readonly areVRStereoViewMatricesWithinSingleCullTolerance: boolean;
    aspect: number;
    backgroundColor: UnityEngine.Color;
    readonly cameraToWorldMatrix: UnityEngine.Matrix4x4;
    cameraType: UnityEngine.CameraType;
    clearFlags: UnityEngine.CameraClearFlags;
    clearStencilAfterLightingPass: boolean;
    readonly commandBufferCount: number;
    cullingMask: number;
    cullingMatrix: UnityEngine.Matrix4x4;
    static readonly current: UnityEngine.Camera;
    depth: number;
    depthTextureMode: UnityEngine.DepthTextureMode;
    eventMask: number;
    far: number;
    farClipPlane: number;
    fieldOfView: number;
    forceIntoRenderTexture: boolean;
    fov: number;
    hdr: boolean;
    isOrthoGraphic: boolean;
    layerCullDistances: number[];
    layerCullSpherical: boolean;
    static readonly main: UnityEngine.Camera;
    static readonly mainCamera: UnityEngine.Camera;
    near: number;
    nearClipPlane: number;
    nonJitteredProjectionMatrix: UnityEngine.Matrix4x4;
    opaqueSortMode: UnityEngine.Rendering.OpaqueSortMode;
    orthographic: boolean;
    orthographicSize: number;
    readonly pixelHeight: number;
    pixelRect: UnityEngine.Rect;
    readonly pixelWidth: number;
    readonly previousViewProjectionMatrix: UnityEngine.Matrix4x4;
    projectionMatrix: UnityEngine.Matrix4x4;
    rect: UnityEngine.Rect;
    renderingPath: UnityEngine.RenderingPath;
    scene: UnityEngine.SceneManagement.Scene;
    readonly stereoActiveEye: UnityEngine.Camera.MonoOrStereoscopicEye;
    stereoConvergence: number;
    readonly stereoEnabled: boolean;
    stereoMirrorMode: boolean;
    stereoSeparation: number;
    stereoTargetEye: UnityEngine.StereoTargetEyeMask;
    targetDisplay: number;
    targetTexture: UnityEngine.RenderTexture;
    transparencySortAxis: UnityEngine.Vector3;
    transparencySortMode: UnityEngine.TransparencySortMode;
    useJitteredProjectionMatrixForTransparentRendering: boolean;
    useOcclusionCulling: boolean;
    readonly velocity: UnityEngine.Vector3;
    worldToCameraMatrix: UnityEngine.Matrix4x4;
    static onPostRender: ((cam: UnityEngine.Camera) => void);
    static onPreCull: ((cam: UnityEngine.Camera) => void);
    static onPreRender: ((cam: UnityEngine.Camera) => void);
  }
}
declare namespace UnityEngine.Camera {
  class StereoscopicEye extends System.Enum {
    protected constructor();
    static Left: UnityEngine.Camera.StereoscopicEye;
    static Right: UnityEngine.Camera.StereoscopicEye;
    value__: number;
  }
}
declare namespace UnityEngine.Camera {
  class MonoOrStereoscopicEye extends System.Enum {
    protected constructor();
    static Left: UnityEngine.Camera.MonoOrStereoscopicEye;
    static Mono: UnityEngine.Camera.MonoOrStereoscopicEye;
    static Right: UnityEngine.Camera.MonoOrStereoscopicEye;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ColorUtility extends System.Object {
    constructor();
    static ToHtmlStringRGB(color: UnityEngine.Color): string;
    static ToHtmlStringRGBA(color: UnityEngine.Color): string;
    static TryParseHtmlString(htmlString: string, color: any): boolean;
  }
}
declare namespace UnityEngine {
  class ComputeShader extends UnityEngine.Object {
    constructor();
    Dispatch(kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number): void;
    DispatchIndirect(kernelIndex: number, argsBuffer: UnityEngine.ComputeBuffer): void;
    DispatchIndirect(kernelIndex: number, argsBuffer: UnityEngine.ComputeBuffer, argsOffset: number): void;
    FindKernel(name: string): number;
    GetKernelThreadGroupSizes(kernelIndex: number, x: any, y: any, z: any): void;
    HasKernel(name: string): boolean;
    SetBool(nameID: number, val: boolean): void;
    SetBool(name: string, val: boolean): void;
    SetBuffer(kernelIndex: number, nameID: number, buffer: UnityEngine.ComputeBuffer): void;
    SetBuffer(kernelIndex: number, name: string, buffer: UnityEngine.ComputeBuffer): void;
    SetFloat(nameID: number, val: number): void;
    SetFloat(name: string, val: number): void;
    SetFloats(nameID: number, values: number[]): void;
    SetFloats(name: string, values: number[]): void;
    SetInt(nameID: number, val: number): void;
    SetInt(name: string, val: number): void;
    SetInts(nameID: number, values: number[]): void;
    SetInts(name: string, values: number[]): void;
    SetTexture(kernelIndex: number, nameID: number, texture: UnityEngine.Texture): void;
    SetTexture(kernelIndex: number, name: string, texture: UnityEngine.Texture): void;
    SetTextureFromGlobal(kernelIndex: number, nameID: number, globalTextureNameID: number): void;
    SetTextureFromGlobal(kernelIndex: number, name: string, globalTextureName: string): void;
    SetVector(nameID: number, val: UnityEngine.Vector4): void;
    SetVector(name: string, val: UnityEngine.Vector4): void;
  }
}
declare namespace UnityEngine {
  class ComputeBuffer extends System.Object {
    constructor(count: number, stride: number);
    constructor(count: number, stride: number, type: UnityEngine.ComputeBufferType);
    static CopyCount(src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number): void;
    Dispose(): void;
    GetData(data: any): void;
    GetData(data: any, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
    GetNativeBufferPtr(): any;
    Release(): void;
    SetCounterValue(counterValue: number): void;
    SetData(data: any): void;
    SetData(data: any, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
    readonly count: number;
    readonly stride: number;
  }
}
declare namespace UnityEngine {
  class CrashReport extends System.Object {
    protected constructor();
    Remove(): void;
    static RemoveAll(): void;
    static readonly lastReport: UnityEngine.CrashReport;
    static readonly reports: UnityEngine.CrashReport[];
    text: string;
    time: any;
  }
}
declare namespace UnityEngine {
  class UnhandledExceptionHandler extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class CSSLayoutCallbacks extends System.Object {
    constructor();
    static RegisterWrapper(node: any): void;
    static UnegisterWrapper(node: any): void;
  }
}
declare namespace UnityEngine {
  class BoundingSphere extends System.ValueType {
    protected constructor();
    position: UnityEngine.Vector3;
    radius: number;
  }
}
declare namespace UnityEngine {
  class CullingQueryOptions extends System.Enum {
    protected constructor();
    static IgnoreDistance: UnityEngine.CullingQueryOptions;
    static IgnoreVisibility: UnityEngine.CullingQueryOptions;
    static Normal: UnityEngine.CullingQueryOptions;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CullingGroupEvent extends System.ValueType {
    protected constructor();
    readonly currentDistance: number;
    readonly hasBecomeInvisible: boolean;
    readonly hasBecomeVisible: boolean;
    readonly index: number;
    readonly isVisible: boolean;
    readonly previousDistance: number;
    readonly wasVisible: boolean;
  }
}
declare namespace UnityEngine {
  class CullingGroup extends System.Object {
    constructor();
    Dispose(): void;
    EraseSwapBack(index: number): void;
    GetDistance(index: number): number;
    IsVisible(index: number): boolean;
    QueryIndices(visible: boolean, distanceIndex: number, result: number[], firstIndex: number): number;
    QueryIndices(visible: boolean, result: number[], firstIndex: number): number;
    QueryIndices(distanceIndex: number, result: number[], firstIndex: number): number;
    SetBoundingDistances(distances: number[]): void;
    SetBoundingSphereCount(count: number): void;
    SetBoundingSpheres(array: UnityEngine.BoundingSphere[]): void;
    SetDistanceReferencePoint(transform: UnityEngine.Transform): void;
    SetDistanceReferencePoint(point: UnityEngine.Vector3): void;
    enabled: boolean;
    onStateChanged: ((sphere: UnityEngine.CullingGroupEvent) => void);
    targetCamera: UnityEngine.Camera;
  }
}
declare namespace UnityEngine {
  class CursorMode extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.CursorMode;
    static ForceSoftware: UnityEngine.CursorMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CursorLockMode extends System.Enum {
    protected constructor();
    static Confined: UnityEngine.CursorLockMode;
    static Locked: UnityEngine.CursorLockMode;
    static None: UnityEngine.CursorLockMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Cursor extends System.Object {
    constructor();
    static SetCursor(texture: UnityEngine.Texture2D, hotspot: UnityEngine.Vector2, cursorMode: UnityEngine.CursorMode): void;
    static lockState: UnityEngine.CursorLockMode;
    static visible: boolean;
  }
}
declare namespace UnityEngine {
  class DebugLogHandler extends System.Object {
    constructor();
    LogException(exception: System.Exception, context: UnityEngine.Object): void;
    LogFormat(logType: UnityEngine.LogType, context: UnityEngine.Object, format: string, args: any[]): void;
  }
}
declare namespace UnityEngine {
  class Debug extends System.Object {
    constructor();
    static Assert(condition: boolean): void;
    static Assert(condition: boolean, message: any): void;
    static Assert(condition: boolean, message: any, context: UnityEngine.Object): void;
    static Assert(condition: boolean, message: string): void;
    static Assert(condition: boolean, format: string, args: any[]): void;
    static Assert(condition: boolean, message: string, context: UnityEngine.Object): void;
    static Assert(condition: boolean, context: UnityEngine.Object): void;
    static AssertFormat(condition: boolean, format: string, args: any[]): void;
    static AssertFormat(condition: boolean, context: UnityEngine.Object, format: string, args: any[]): void;
    static Break(): void;
    static ClearDeveloperConsole(): void;
    static DebugBreak(): void;
    static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3): void;
    static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color): void;
    static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color, duration: number): void;
    static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color, duration: number, depthTest: boolean): void;
    static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3): void;
    static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color): void;
    static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color, duration: number): void;
    static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color, duration: number, depthTest: boolean): void;
    static Log(message: any): void;
    static Log(message: any, context: UnityEngine.Object): void;
    static LogAssertion(message: any): void;
    static LogAssertion(message: any, context: UnityEngine.Object): void;
    static LogAssertionFormat(format: string, args: any[]): void;
    static LogAssertionFormat(context: UnityEngine.Object, format: string, args: any[]): void;
    static LogError(message: any): void;
    static LogError(message: any, context: UnityEngine.Object): void;
    static LogErrorFormat(format: string, args: any[]): void;
    static LogErrorFormat(context: UnityEngine.Object, format: string, args: any[]): void;
    static LogException(exception: System.Exception): void;
    static LogException(exception: System.Exception, context: UnityEngine.Object): void;
    static LogFormat(format: string, args: any[]): void;
    static LogFormat(context: UnityEngine.Object, format: string, args: any[]): void;
    static LogWarning(message: any): void;
    static LogWarning(message: any, context: UnityEngine.Object): void;
    static LogWarningFormat(format: string, args: any[]): void;
    static LogWarningFormat(context: UnityEngine.Object, format: string, args: any[]): void;
    static developerConsoleVisible: boolean;
    static readonly isDebugBuild: boolean;
    static readonly logger: UnityEngine.ILogger;
    static readonly unityLogger: UnityEngine.ILogger;
  }
}
declare namespace UnityEngine {
  class Display extends System.Object {
    protected constructor();
    Activate(): void;
    Activate(width: number, height: number, refreshRate: number): void;
    static MultiDisplayLicense(): boolean;
    static RelativeMouseAt(inputMouseCoordinates: UnityEngine.Vector3): UnityEngine.Vector3;
    SetParams(width: number, height: number, x: number, y: number): void;
    SetRenderingResolution(w: number, h: number): void;
    readonly active: boolean;
    readonly colorBuffer: UnityEngine.RenderBuffer;
    readonly depthBuffer: UnityEngine.RenderBuffer;
    static readonly main: UnityEngine.Display;
    readonly renderingHeight: number;
    readonly renderingWidth: number;
    readonly systemHeight: number;
    readonly systemWidth: number;
    static displays: UnityEngine.Display[];
  }
}
declare namespace UnityEngine {
  class DrivenPropertyManager extends System.Object {
    constructor();
    static RegisterProperty(driver: UnityEngine.Object, target: UnityEngine.Object, propertyPath: string): void;
    static UnregisterProperties(driver: UnityEngine.Object): void;
    static UnregisterProperty(driver: UnityEngine.Object, target: UnityEngine.Object, propertyPath: string): void;
  }
}
declare namespace UnityEngine {
  class EventProvider extends System.Object {
    constructor();
    static WriteCustomEvent(value: number, text: string): void;
  }
}
declare namespace UnityEngine {
  class ExposedPropertyResolver extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class FlareLayer extends UnityEngine.Behaviour {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class GameObject extends UnityEngine.Object {
    constructor(name: string);
    constructor();
    constructor(name: string, components: any[]);
    AddComponent(className: string): UnityEngine.Component;
    AddComponent(componentType: any): UnityEngine.Component;
    BroadcastMessage(methodName: string): void;
    BroadcastMessage(methodName: string, parameter: any): void;
    BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
    BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    CompareTag(tag: string): boolean;
    static CreatePrimitive(type: UnityEngine.PrimitiveType): UnityEngine.GameObject;
    static Find(name: string): UnityEngine.GameObject;
    static FindGameObjectsWithTag(tag: string): UnityEngine.GameObject[];
    static FindGameObjectWithTag(tag: string): UnityEngine.GameObject;
    static FindWithTag(tag: string): UnityEngine.GameObject;
    GetComponent(type: string): UnityEngine.Component;
    GetComponent(type: any): UnityEngine.Component;
    GetComponentInChildren(type: any): UnityEngine.Component;
    GetComponentInChildren(type: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInParent(type: any): UnityEngine.Component;
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: UnityEngine.Component[]): void;
    GetComponentsInChildren(type: any): UnityEngine.Component[];
    GetComponentsInChildren(type: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentsInParent(type: any): UnityEngine.Component[];
    GetComponentsInParent(type: any, includeInactive: boolean): UnityEngine.Component[];
    PlayAnimation(animation: UnityEngine.Object): void;
    SampleAnimation(clip: UnityEngine.Object, time: number): void;
    SendMessage(methodName: string): void;
    SendMessage(methodName: string, value: any): void;
    SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    SendMessageUpwards(methodName: string): void;
    SendMessageUpwards(methodName: string, value: any): void;
    SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
    SetActive(value: boolean): void;
    SetActiveRecursively(state: boolean): void;
    StopAnimation(): void;
    active: boolean;
    readonly activeInHierarchy: boolean;
    readonly activeSelf: boolean;
    readonly animation: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly gameObject: UnityEngine.GameObject;
    readonly guiElement: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    isStatic: boolean;
    layer: number;
    readonly light: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    readonly scene: UnityEngine.SceneManagement.Scene;
    tag: string;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine {
  class Gizmos extends System.Object {
    constructor();
    static DrawCube(center: UnityEngine.Vector3, size: UnityEngine.Vector3): void;
    static DrawFrustum(center: UnityEngine.Vector3, fov: number, maxRange: number, minRange: number, aspect: number): void;
    static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture): void;
    static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
    static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material): void;
    static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material): void;
    static DrawIcon(center: UnityEngine.Vector3, name: string): void;
    static DrawIcon(center: UnityEngine.Vector3, name: string, allowScaling: boolean): void;
    static DrawLine(from: UnityEngine.Vector3, to: UnityEngine.Vector3): void;
    static DrawMesh(mesh: UnityEngine.Mesh): void;
    static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3): void;
    static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
    static DrawRay(r: UnityEngine.Ray): void;
    static DrawRay(from: UnityEngine.Vector3, direction: UnityEngine.Vector3): void;
    static DrawSphere(center: UnityEngine.Vector3, radius: number): void;
    static DrawWireCube(center: UnityEngine.Vector3, size: UnityEngine.Vector3): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static DrawWireMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
    static DrawWireSphere(center: UnityEngine.Vector3, radius: number): void;
    static color: UnityEngine.Color;
    static matrix: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine {
  class GradientColorKey extends System.ValueType {
    protected constructor();
    color: UnityEngine.Color;
    time: number;
  }
}
declare namespace UnityEngine {
  class GradientAlphaKey extends System.ValueType {
    protected constructor();
    alpha: number;
    time: number;
  }
}
declare namespace UnityEngine {
  class GradientMode extends System.Enum {
    protected constructor();
    static Blend: UnityEngine.GradientMode;
    static Fixed: UnityEngine.GradientMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Gradient extends System.Object {
    constructor();
    Evaluate(time: number): UnityEngine.Color;
    SetKeys(colorKeys: UnityEngine.GradientColorKey[], alphaKeys: UnityEngine.GradientAlphaKey[]): void;
    alphaKeys: UnityEngine.GradientAlphaKey[];
    colorKeys: UnityEngine.GradientColorKey[];
    mode: UnityEngine.GradientMode;
  }
}
declare namespace UnityEngine {
  class OcclusionArea extends UnityEngine.Component {
    constructor();
    center: UnityEngine.Vector3;
    size: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class OcclusionPortal extends UnityEngine.Component {
    constructor();
    open: boolean;
  }
}
declare namespace UnityEngine {
  class RenderSettings extends UnityEngine.Object {
    constructor();
    static ambientEquatorColor: UnityEngine.Color;
    static ambientGroundColor: UnityEngine.Color;
    static ambientIntensity: number;
    static ambientLight: UnityEngine.Color;
    static ambientMode: UnityEngine.Rendering.AmbientMode;
    static ambientProbe: UnityEngine.Rendering.SphericalHarmonicsL2;
    static ambientSkyboxAmount: number;
    static ambientSkyColor: UnityEngine.Color;
    static customReflection: UnityEngine.Cubemap;
    static defaultReflectionMode: UnityEngine.Rendering.DefaultReflectionMode;
    static defaultReflectionResolution: number;
    static flareFadeSpeed: number;
    static flareStrength: number;
    static fog: boolean;
    static fogColor: UnityEngine.Color;
    static fogDensity: number;
    static fogEndDistance: number;
    static fogMode: UnityEngine.FogMode;
    static fogStartDistance: number;
    static haloStrength: number;
    static reflectionBounces: number;
    static reflectionIntensity: number;
    static skybox: UnityEngine.Material;
    static subtractiveShadowColor: UnityEngine.Color;
    static sun: UnityEngine.Light;
  }
}
declare namespace UnityEngine {
  class QualitySettings extends UnityEngine.Object {
    constructor();
    static DecreaseLevel(): void;
    static DecreaseLevel(applyExpensiveChanges: boolean): void;
    static GetQualityLevel(): number;
    static IncreaseLevel(): void;
    static IncreaseLevel(applyExpensiveChanges: boolean): void;
    static SetQualityLevel(index: number): void;
    static SetQualityLevel(index: number, applyExpensiveChanges: boolean): void;
    static readonly activeColorSpace: UnityEngine.ColorSpace;
    static anisotropicFiltering: UnityEngine.AnisotropicFiltering;
    static antiAliasing: number;
    static asyncUploadBufferSize: number;
    static asyncUploadTimeSlice: number;
    static billboardsFaceCameraPosition: boolean;
    static blendWeights: UnityEngine.BlendWeights;
    static currentLevel: UnityEngine.QualityLevel;
    static readonly desiredColorSpace: UnityEngine.ColorSpace;
    static lodBias: number;
    static masterTextureLimit: number;
    static maximumLODLevel: number;
    static maxQueuedFrames: number;
    static readonly names: string[];
    static particleRaycastBudget: number;
    static pixelLightCount: number;
    static realtimeReflectionProbes: boolean;
    static resolutionScalingFixedDPIFactor: number;
    static shadowCascade2Split: number;
    static shadowCascade4Split: UnityEngine.Vector3;
    static shadowCascades: number;
    static shadowDistance: number;
    static shadowmaskMode: UnityEngine.ShadowmaskMode;
    static shadowNearPlaneOffset: number;
    static shadowProjection: UnityEngine.ShadowProjection;
    static shadowResolution: UnityEngine.ShadowResolution;
    static shadows: UnityEngine.ShadowQuality;
    static softParticles: boolean;
    static softVegetation: boolean;
    static vSyncCount: number;
  }
}
declare namespace UnityEngine {
  class TextureCompressionQuality extends System.Enum {
    protected constructor();
    static Best: UnityEngine.TextureCompressionQuality;
    static Fast: UnityEngine.TextureCompressionQuality;
    static Normal: UnityEngine.TextureCompressionQuality;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Halo extends UnityEngine.Behaviour {
    constructor();
  }
}
declare namespace UnityEngine {
  class MeshFilter extends UnityEngine.Component {
    constructor();
    mesh: UnityEngine.Mesh;
    sharedMesh: UnityEngine.Mesh;
  }
}
declare namespace UnityEngine {
  class SkinnedMeshRenderer extends UnityEngine.Renderer {
    constructor();
    BakeMesh(mesh: UnityEngine.Mesh): void;
    GetBlendShapeWeight(index: number): number;
    SetBlendShapeWeight(index: number, value: number): void;
    bones: UnityEngine.Transform[];
    localBounds: UnityEngine.Bounds;
    quality: UnityEngine.SkinQuality;
    rootBone: UnityEngine.Transform;
    sharedMesh: UnityEngine.Mesh;
    skinnedMotionVectors: boolean;
    updateWhenOffscreen: boolean;
  }
}
declare namespace UnityEngine {
  class Flare extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class LensFlare extends UnityEngine.Behaviour {
    constructor();
    brightness: number;
    color: UnityEngine.Color;
    fadeSpeed: number;
    flare: UnityEngine.Flare;
  }
}
declare namespace UnityEngine {
  class RendererExtensions extends System.Object {
    protected constructor();
    static UpdateGIMaterials(renderer: UnityEngine.Renderer): void;
  }
}
declare namespace UnityEngine {
  class Projector extends UnityEngine.Behaviour {
    constructor();
    aspectRatio: number;
    farClipPlane: number;
    fieldOfView: number;
    ignoreLayers: number;
    isOrthoGraphic: boolean;
    material: UnityEngine.Material;
    nearClipPlane: number;
    orthographic: boolean;
    orthographicSize: number;
    orthoGraphicSize: number;
  }
}
declare namespace UnityEngine {
  class Skybox extends UnityEngine.Behaviour {
    constructor();
    material: UnityEngine.Material;
  }
}
declare namespace UnityEngine {
  class LineTextureMode extends System.Enum {
    protected constructor();
    static DistributePerSegment: UnityEngine.LineTextureMode;
    static RepeatPerSegment: UnityEngine.LineTextureMode;
    static Stretch: UnityEngine.LineTextureMode;
    static Tile: UnityEngine.LineTextureMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LineAlignment extends System.Enum {
    protected constructor();
    static Local: UnityEngine.LineAlignment;
    value__: number;
    static View: UnityEngine.LineAlignment;
  }
}
declare namespace UnityEngine {
  class TrailRenderer extends UnityEngine.Renderer {
    constructor();
    Clear(): void;
    GetPosition(index: number): UnityEngine.Vector3;
    GetPositions(positions: UnityEngine.Vector3[]): number;
    alignment: UnityEngine.LineAlignment;
    autodestruct: boolean;
    colorGradient: UnityEngine.Gradient;
    endColor: UnityEngine.Color;
    endWidth: number;
    generateLightingData: boolean;
    minVertexDistance: number;
    numCapVertices: number;
    numCornerVertices: number;
    readonly numPositions: number;
    readonly positionCount: number;
    startColor: UnityEngine.Color;
    startWidth: number;
    textureMode: UnityEngine.LineTextureMode;
    time: number;
    widthCurve: UnityEngine.AnimationCurve;
    widthMultiplier: number;
  }
}
declare namespace UnityEngine {
  class LineRenderer extends UnityEngine.Renderer {
    constructor();
    GetPosition(index: number): UnityEngine.Vector3;
    GetPositions(positions: UnityEngine.Vector3[]): number;
    SetColors(start: UnityEngine.Color, end: UnityEngine.Color): void;
    SetPosition(index: number, position: UnityEngine.Vector3): void;
    SetPositions(positions: UnityEngine.Vector3[]): void;
    SetVertexCount(count: number): void;
    SetWidth(start: number, end: number): void;
    Simplify(tolerance: number): void;
    alignment: UnityEngine.LineAlignment;
    colorGradient: UnityEngine.Gradient;
    endColor: UnityEngine.Color;
    endWidth: number;
    generateLightingData: boolean;
    loop: boolean;
    numCapVertices: number;
    numCornerVertices: number;
    numPositions: number;
    positionCount: number;
    startColor: UnityEngine.Color;
    startWidth: number;
    textureMode: UnityEngine.LineTextureMode;
    useWorldSpace: boolean;
    widthCurve: UnityEngine.AnimationCurve;
    widthMultiplier: number;
  }
}
declare namespace UnityEngine {
  class MaterialPropertyBlock extends System.Object {
    constructor();
    AddColor(nameID: number, value: UnityEngine.Color): void;
    AddColor(name: string, value: UnityEngine.Color): void;
    AddFloat(nameID: number, value: number): void;
    AddFloat(name: string, value: number): void;
    AddMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
    AddMatrix(name: string, value: UnityEngine.Matrix4x4): void;
    AddTexture(nameID: number, value: UnityEngine.Texture): void;
    AddTexture(name: string, value: UnityEngine.Texture): void;
    AddVector(nameID: number, value: UnityEngine.Vector4): void;
    AddVector(name: string, value: UnityEngine.Vector4): void;
    Clear(): void;
    GetFloat(nameID: number): number;
    GetFloat(name: string): number;
    GetFloatArray(nameID: number): number[];
    GetFloatArray(name: string): number[];
    GetFloatArray(nameID: number, values: number[]): void;
    GetFloatArray(name: string, values: number[]): void;
    GetMatrix(nameID: number): UnityEngine.Matrix4x4;
    GetMatrix(name: string): UnityEngine.Matrix4x4;
    GetMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
    GetMatrixArray(name: string): UnityEngine.Matrix4x4[];
    GetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    GetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    GetTexture(nameID: number): UnityEngine.Texture;
    GetTexture(name: string): UnityEngine.Texture;
    GetVector(nameID: number): UnityEngine.Vector4;
    GetVector(name: string): UnityEngine.Vector4;
    GetVectorArray(nameID: number): UnityEngine.Vector4[];
    GetVectorArray(name: string): UnityEngine.Vector4[];
    GetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    GetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    SetBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
    SetBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
    SetColor(nameID: number, value: UnityEngine.Color): void;
    SetColor(name: string, value: UnityEngine.Color): void;
    SetFloat(nameID: number, value: number): void;
    SetFloat(name: string, value: number): void;
    SetFloatArray(nameID: number, values: number[]): void;
    SetFloatArray(nameID: number, values: number[]): void;
    SetFloatArray(name: string, values: number[]): void;
    SetFloatArray(name: string, values: number[]): void;
    SetMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
    SetMatrix(name: string, value: UnityEngine.Matrix4x4): void;
    SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    SetTexture(nameID: number, value: UnityEngine.Texture): void;
    SetTexture(name: string, value: UnityEngine.Texture): void;
    SetVector(nameID: number, value: UnityEngine.Vector4): void;
    SetVector(name: string, value: UnityEngine.Vector4): void;
    SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    readonly isEmpty: boolean;
  }
}
declare namespace UnityEngine {
  class RenderBufferHelper extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class Graphics extends System.Object {
    constructor();
    static Blit(source: UnityEngine.Texture, mat: UnityEngine.Material): void;
    static Blit(source: UnityEngine.Texture, mat: UnityEngine.Material, pass: number): void;
    static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture): void;
    static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material): void;
    static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, pass: number): void;
    static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
    static BlitMultiTap(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, offsets: UnityEngine.Vector2[]): void;
    static ClearRandomWriteTargets(): void;
    static ConvertTexture(src: UnityEngine.Texture, srcElement: number, dst: UnityEngine.Texture, dstElement: number): boolean;
    static ConvertTexture(src: UnityEngine.Texture, dst: UnityEngine.Texture): boolean;
    static CopyTexture(src: UnityEngine.Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: UnityEngine.Texture, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
    static CopyTexture(src: UnityEngine.Texture, srcElement: number, srcMip: number, dst: UnityEngine.Texture, dstElement: number, dstMip: number): void;
    static CopyTexture(src: UnityEngine.Texture, srcElement: number, dst: UnityEngine.Texture, dstElement: number): void;
    static CopyTexture(src: UnityEngine.Texture, dst: UnityEngine.Texture): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, materialIndex: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform): void;
    static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, useLightProbes: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, materialIndex: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform): void;
    static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, useLightProbes: boolean): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[]): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[]): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number): void;
    static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera): void;
    static DrawMeshNow(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4): void;
    static DrawMeshNow(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, materialIndex: number): void;
    static DrawMeshNow(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static DrawMeshNow(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, materialIndex: number): void;
    static DrawProcedural(topology: UnityEngine.MeshTopology, vertexCount: number): void;
    static DrawProcedural(topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number): void;
    static DrawProceduralIndirect(topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer): void;
    static DrawProceduralIndirect(topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material, pass: number): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material, pass: number): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color, mat: UnityEngine.Material): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color, mat: UnityEngine.Material, pass: number): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material): void;
    static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material, pass: number): void;
    static ExecuteCommandBuffer(buffer: UnityEngine.Rendering.CommandBuffer): void;
    static SetRandomWriteTarget(index: number, uav: UnityEngine.ComputeBuffer): void;
    static SetRandomWriteTarget(index: number, uav: UnityEngine.ComputeBuffer, preserveCounterValue: boolean): void;
    static SetRandomWriteTarget(index: number, uav: UnityEngine.RenderTexture): void;
    static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer): void;
    static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number): void;
    static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace): void;
    static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number): void;
    static SetRenderTarget(colorBuffers: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer): void;
    static SetRenderTarget(setup: UnityEngine.RenderTargetSetup): void;
    static SetRenderTarget(rt: UnityEngine.RenderTexture): void;
    static SetRenderTarget(rt: UnityEngine.RenderTexture, mipLevel: number): void;
    static SetRenderTarget(rt: UnityEngine.RenderTexture, mipLevel: number, face: UnityEngine.CubemapFace): void;
    static SetRenderTarget(rt: UnityEngine.RenderTexture, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number): void;
    static readonly activeColorBuffer: UnityEngine.RenderBuffer;
    static readonly activeColorGamut: UnityEngine.ColorGamut;
    static readonly activeDepthBuffer: UnityEngine.RenderBuffer;
    static activeTier: UnityEngine.Rendering.GraphicsTier;
    static readonly deviceName: string;
    static readonly deviceVendor: string;
    static readonly deviceVersion: string;
  }
}
declare namespace UnityEngine {
  class LightmapData extends System.Object {
    constructor();
    lightmap: UnityEngine.Texture2D;
    lightmapColor: UnityEngine.Texture2D;
    lightmapDir: UnityEngine.Texture2D;
    lightmapFar: UnityEngine.Texture2D;
    lightmapLight: UnityEngine.Texture2D;
    lightmapNear: UnityEngine.Texture2D;
    shadowMask: UnityEngine.Texture2D;
  }
}
declare namespace UnityEngine {
  class LightmapsModeLegacy extends System.Enum {
    protected constructor();
    static Directional: UnityEngine.LightmapsModeLegacy;
    static Dual: UnityEngine.LightmapsModeLegacy;
    static Single: UnityEngine.LightmapsModeLegacy;
    value__: number;
  }
}
declare namespace UnityEngine {
  class MotionVectorGenerationMode extends System.Enum {
    protected constructor();
    static Camera: UnityEngine.MotionVectorGenerationMode;
    static ForceNoMotion: UnityEngine.MotionVectorGenerationMode;
    static Object: UnityEngine.MotionVectorGenerationMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LightProbes extends UnityEngine.Object {
    constructor();
    GetInterpolatedLightProbe(position: UnityEngine.Vector3, renderer: UnityEngine.Renderer, coefficients: number[]): void;
    static GetInterpolatedProbe(position: UnityEngine.Vector3, renderer: UnityEngine.Renderer, probe: any): void;
    bakedProbes: UnityEngine.Rendering.SphericalHarmonicsL2[];
    readonly cellCount: number;
    coefficients: number[];
    readonly count: number;
    readonly positions: UnityEngine.Vector3[];
  }
}
declare namespace UnityEngine {
  class LightmapSettings extends UnityEngine.Object {
    constructor();
    static bakedColorSpace: UnityEngine.ColorSpace;
    static lightmaps: UnityEngine.LightmapData[];
    static lightmapsMode: UnityEngine.LightmapsMode;
    static lightmapsModeLegacy: UnityEngine.LightmapsModeLegacy;
    static lightProbes: UnityEngine.LightProbes;
  }
}
declare namespace UnityEngine {
  class GeometryUtility extends System.Object {
    constructor();
    static CalculateBounds(positions: UnityEngine.Vector3[], transform: UnityEngine.Matrix4x4): UnityEngine.Bounds;
    static CalculateFrustumPlanes(camera: UnityEngine.Camera): UnityEngine.Plane[];
    static CalculateFrustumPlanes(worldToProjectionMatrix: UnityEngine.Matrix4x4): UnityEngine.Plane[];
    static TestPlanesAABB(planes: UnityEngine.Plane[], bounds: UnityEngine.Bounds): boolean;
    static TryCreatePlaneFromPolygon(vertices: UnityEngine.Vector3[], plane: any): boolean;
  }
}
declare namespace UnityEngine {
  class Screen extends System.Object {
    constructor();
    static SetResolution(width: number, height: number, fullscreen: boolean): void;
    static SetResolution(width: number, height: number, fullscreen: boolean, preferredRefreshRate: number): void;
    static autorotateToLandscapeLeft: boolean;
    static autorotateToLandscapeRight: boolean;
    static autorotateToPortrait: boolean;
    static autorotateToPortraitUpsideDown: boolean;
    static readonly currentResolution: UnityEngine.Resolution;
    static readonly dpi: number;
    static fullScreen: boolean;
    static readonly GetResolution: UnityEngine.Resolution[];
    static readonly height: number;
    static lockCursor: boolean;
    static orientation: UnityEngine.ScreenOrientation;
    static readonly resolutions: UnityEngine.Resolution[];
    static showCursor: boolean;
    static sleepTimeout: number;
    static readonly width: number;
  }
}
declare namespace UnityEngine {
  class SleepTimeout extends System.Object {
    constructor();
    static NeverSleep: number;
    static SystemSetting: number;
  }
}
declare namespace UnityEngine {
  class GL extends System.Object {
    constructor();
    static Begin(mode: number): void;
    static Clear(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color): void;
    static Clear(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color, depth: number): void;
    static ClearWithSkybox(clearDepth: boolean, camera: UnityEngine.Camera): void;
    static Color(c: UnityEngine.Color): void;
    static End(): void;
    static Flush(): void;
    static GetGPUProjectionMatrix(proj: UnityEngine.Matrix4x4, renderIntoTexture: boolean): UnityEngine.Matrix4x4;
    static InvalidateState(): void;
    static IssuePluginEvent(eventID: number): void;
    static IssuePluginEvent(callback: any, eventID: number): void;
    static LoadIdentity(): void;
    static LoadOrtho(): void;
    static LoadPixelMatrix(): void;
    static LoadPixelMatrix(left: number, right: number, bottom: number, top: number): void;
    static LoadProjectionMatrix(mat: UnityEngine.Matrix4x4): void;
    static MultiTexCoord(unit: number, v: UnityEngine.Vector3): void;
    static MultiTexCoord2(unit: number, x: number, y: number): void;
    static MultiTexCoord3(unit: number, x: number, y: number, z: number): void;
    static MultMatrix(mat: UnityEngine.Matrix4x4): void;
    static PopMatrix(): void;
    static PushMatrix(): void;
    static RenderTargetBarrier(): void;
    static SetRevertBackfacing(revertBackFaces: boolean): void;
    static TexCoord(v: UnityEngine.Vector3): void;
    static TexCoord2(x: number, y: number): void;
    static TexCoord3(x: number, y: number, z: number): void;
    static Vertex(v: UnityEngine.Vector3): void;
    static Vertex3(x: number, y: number, z: number): void;
    static Viewport(pixelRect: UnityEngine.Rect): void;
    static invertCulling: boolean;
    static modelview: UnityEngine.Matrix4x4;
    static sRGBWrite: boolean;
    static wireframe: boolean;
    static LINE_STRIP: number;
    static LINES: number;
    static QUADS: number;
    static TRIANGLE_STRIP: number;
    static TRIANGLES: number;
  }
}
declare namespace UnityEngine {
  class MeshRenderer extends UnityEngine.Renderer {
    constructor();
    additionalVertexStreams: UnityEngine.Mesh;
  }
}
declare namespace UnityEngine {
  class ImageEffectTransformsToLDR extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class ImageEffectAllowedInSceneView extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class ImageEffectOpaque extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class RectOffset extends System.Object {
    constructor();
    constructor(left: number, right: number, top: number, bottom: number);
    Add(rect: UnityEngine.Rect): UnityEngine.Rect;
    Remove(rect: UnityEngine.Rect): UnityEngine.Rect;
    ToString(): string;
    bottom: number;
    readonly horizontal: number;
    left: number;
    right: number;
    top: number;
    readonly vertical: number;
  }
}
declare namespace UnityEngine {
  class GUIElement extends UnityEngine.Behaviour {
    constructor();
    GetScreenRect(): UnityEngine.Rect;
    GetScreenRect(camera: UnityEngine.Camera): UnityEngine.Rect;
    HitTest(screenPosition: UnityEngine.Vector3): boolean;
    HitTest(screenPosition: UnityEngine.Vector3, camera: UnityEngine.Camera): boolean;
  }
}
declare namespace UnityEngine {
  class GUITexture extends UnityEngine.GUIElement {
    constructor();
    border: UnityEngine.RectOffset;
    color: UnityEngine.Color;
    pixelInset: UnityEngine.Rect;
    texture: UnityEngine.Texture;
  }
}
declare namespace UnityEngine {
  class GUILayer extends UnityEngine.Behaviour {
    constructor();
    HitTest(screenPosition: UnityEngine.Vector3): UnityEngine.GUIElement;
  }
}
declare namespace UnityEngine {
  class TouchScreenKeyboard_InternalConstructorHelperArguments extends System.ValueType {
    protected constructor();
    alert: number;
    autocorrection: number;
    keyboardType: number;
    multiline: number;
    secure: number;
  }
}
declare namespace UnityEngine {
  class FullScreenMovieControlMode extends System.Enum {
    protected constructor();
    static CancelOnInput: UnityEngine.FullScreenMovieControlMode;
    static Full: UnityEngine.FullScreenMovieControlMode;
    static Hidden: UnityEngine.FullScreenMovieControlMode;
    static Minimal: UnityEngine.FullScreenMovieControlMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class FullScreenMovieScalingMode extends System.Enum {
    protected constructor();
    static AspectFill: UnityEngine.FullScreenMovieScalingMode;
    static AspectFit: UnityEngine.FullScreenMovieScalingMode;
    static Fill: UnityEngine.FullScreenMovieScalingMode;
    static None: UnityEngine.FullScreenMovieScalingMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AndroidActivityIndicatorStyle extends System.Enum {
    protected constructor();
    static DontShow: UnityEngine.AndroidActivityIndicatorStyle;
    static InversedLarge: UnityEngine.AndroidActivityIndicatorStyle;
    static InversedSmall: UnityEngine.AndroidActivityIndicatorStyle;
    static Large: UnityEngine.AndroidActivityIndicatorStyle;
    static Small: UnityEngine.AndroidActivityIndicatorStyle;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TizenActivityIndicatorStyle extends System.Enum {
    protected constructor();
    static DontShow: UnityEngine.TizenActivityIndicatorStyle;
    static InversedLarge: UnityEngine.TizenActivityIndicatorStyle;
    static InversedSmall: UnityEngine.TizenActivityIndicatorStyle;
    static Large: UnityEngine.TizenActivityIndicatorStyle;
    static Small: UnityEngine.TizenActivityIndicatorStyle;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Handheld extends System.Object {
    constructor();
    static ClearShaderCache(): void;
    static GetActivityIndicatorStyle(): number;
    static PlayFullScreenMovie(path: string): boolean;
    static PlayFullScreenMovie(path: string, bgColor: UnityEngine.Color): boolean;
    static PlayFullScreenMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.FullScreenMovieControlMode): boolean;
    static PlayFullScreenMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.FullScreenMovieControlMode, scalingMode: UnityEngine.FullScreenMovieScalingMode): boolean;
    static SetActivityIndicatorStyle(style: UnityEngine.AndroidActivityIndicatorStyle): void;
    static SetActivityIndicatorStyle(style: UnityEngine.iOS.ActivityIndicatorStyle): void;
    static SetActivityIndicatorStyle(style: UnityEngine.TizenActivityIndicatorStyle): void;
    static StartActivityIndicator(): void;
    static StopActivityIndicator(): void;
    static Vibrate(): void;
    static use32BitDisplayBuffer: boolean;
  }
}
declare namespace UnityEngine {
  class TouchScreenKeyboard extends System.Object {
    constructor(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string);
    static Open(text: string): UnityEngine.TouchScreenKeyboard;
    static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType): UnityEngine.TouchScreenKeyboard;
    static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean): UnityEngine.TouchScreenKeyboard;
    static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean): UnityEngine.TouchScreenKeyboard;
    static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean): UnityEngine.TouchScreenKeyboard;
    static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean): UnityEngine.TouchScreenKeyboard;
    static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string): UnityEngine.TouchScreenKeyboard;
    active: boolean;
    static readonly area: UnityEngine.Rect;
    readonly canGetSelection: boolean;
    readonly done: boolean;
    static hideInput: boolean;
    static readonly isSupported: boolean;
    readonly selection: UnityEngine.RangeInt;
    readonly status: UnityEngine.TouchScreenKeyboard.Status;
    targetDisplay: number;
    text: string;
    readonly type: UnityEngine.TouchScreenKeyboardType;
    static readonly visible: boolean;
    readonly wasCanceled: boolean;
  }
}
declare namespace UnityEngine.TouchScreenKeyboard {
  class Status extends System.Enum {
    protected constructor();
    static Canceled: UnityEngine.TouchScreenKeyboard.Status;
    static Done: UnityEngine.TouchScreenKeyboard.Status;
    static LostFocus: UnityEngine.TouchScreenKeyboard.Status;
    value__: number;
    static Visible: UnityEngine.TouchScreenKeyboard.Status;
  }
}
declare namespace UnityEngine {
  class TouchPhase extends System.Enum {
    protected constructor();
    static Began: UnityEngine.TouchPhase;
    static Canceled: UnityEngine.TouchPhase;
    static Ended: UnityEngine.TouchPhase;
    static Moved: UnityEngine.TouchPhase;
    static Stationary: UnityEngine.TouchPhase;
    value__: number;
  }
}
declare namespace UnityEngine {
  class IMECompositionMode extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.IMECompositionMode;
    static Off: UnityEngine.IMECompositionMode;
    static On: UnityEngine.IMECompositionMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TouchType extends System.Enum {
    protected constructor();
    static Direct: UnityEngine.TouchType;
    static Indirect: UnityEngine.TouchType;
    static Stylus: UnityEngine.TouchType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Touch extends System.ValueType {
    protected constructor();
    altitudeAngle: number;
    azimuthAngle: number;
    deltaPosition: UnityEngine.Vector2;
    deltaTime: number;
    fingerId: number;
    maximumPossiblePressure: number;
    phase: UnityEngine.TouchPhase;
    position: UnityEngine.Vector2;
    pressure: number;
    radius: number;
    radiusVariance: number;
    rawPosition: UnityEngine.Vector2;
    tapCount: number;
    type: UnityEngine.TouchType;
  }
}
declare namespace UnityEngine {
  class DeviceOrientation extends System.Enum {
    protected constructor();
    static FaceDown: UnityEngine.DeviceOrientation;
    static FaceUp: UnityEngine.DeviceOrientation;
    static LandscapeLeft: UnityEngine.DeviceOrientation;
    static LandscapeRight: UnityEngine.DeviceOrientation;
    static Portrait: UnityEngine.DeviceOrientation;
    static PortraitUpsideDown: UnityEngine.DeviceOrientation;
    static Unknown: UnityEngine.DeviceOrientation;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AccelerationEvent extends System.ValueType {
    protected constructor();
    readonly acceleration: UnityEngine.Vector3;
    readonly deltaTime: number;
  }
}
declare namespace UnityEngine {
  class Gyroscope extends System.Object {
    protected constructor();
    readonly attitude: UnityEngine.Quaternion;
    enabled: boolean;
    readonly gravity: UnityEngine.Vector3;
    readonly rotationRate: UnityEngine.Vector3;
    readonly rotationRateUnbiased: UnityEngine.Vector3;
    updateInterval: number;
    readonly userAcceleration: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class LocationInfo extends System.ValueType {
    protected constructor();
    readonly altitude: number;
    readonly horizontalAccuracy: number;
    readonly latitude: number;
    readonly longitude: number;
    readonly timestamp: number;
    readonly verticalAccuracy: number;
  }
}
declare namespace UnityEngine {
  class LocationServiceStatus extends System.Enum {
    protected constructor();
    static Failed: UnityEngine.LocationServiceStatus;
    static Initializing: UnityEngine.LocationServiceStatus;
    static Running: UnityEngine.LocationServiceStatus;
    static Stopped: UnityEngine.LocationServiceStatus;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LocationService extends System.Object {
    constructor();
    Start(): void;
    Start(desiredAccuracyInMeters: number): void;
    Start(desiredAccuracyInMeters: number, updateDistanceInMeters: number): void;
    Stop(): void;
    readonly isEnabledByUser: boolean;
    readonly lastData: UnityEngine.LocationInfo;
    readonly status: UnityEngine.LocationServiceStatus;
  }
}
declare namespace UnityEngine {
  class Compass extends System.Object {
    constructor();
    enabled: boolean;
    readonly headingAccuracy: number;
    readonly magneticHeading: number;
    readonly rawVector: UnityEngine.Vector3;
    readonly timestamp: number;
    readonly trueHeading: number;
  }
}
declare namespace UnityEngine {
  class Input extends System.Object {
    constructor();
    static GetAccelerationEvent(index: number): UnityEngine.AccelerationEvent;
    static GetAxis(axisName: string): number;
    static GetAxisRaw(axisName: string): number;
    static GetButton(buttonName: string): boolean;
    static GetButtonDown(buttonName: string): boolean;
    static GetButtonUp(buttonName: string): boolean;
    static GetJoystickNames(): string[];
    static GetKey(name: string): boolean;
    static GetKey(key: UnityEngine.KeyCode): boolean;
    static GetKeyDown(name: string): boolean;
    static GetKeyDown(key: UnityEngine.KeyCode): boolean;
    static GetKeyUp(name: string): boolean;
    static GetKeyUp(key: UnityEngine.KeyCode): boolean;
    static GetMouseButton(button: number): boolean;
    static GetMouseButtonDown(button: number): boolean;
    static GetMouseButtonUp(button: number): boolean;
    static GetTouch(index: number): UnityEngine.Touch;
    static IsJoystickPreconfigured(joystickName: string): boolean;
    static ResetInputAxes(): void;
    static readonly acceleration: UnityEngine.Vector3;
    static readonly accelerationEventCount: number;
    static readonly accelerationEvents: UnityEngine.AccelerationEvent[];
    static readonly anyKey: boolean;
    static readonly anyKeyDown: boolean;
    static backButtonLeavesApp: boolean;
    static readonly compass: UnityEngine.Compass;
    static compensateSensors: boolean;
    static compositionCursorPos: UnityEngine.Vector2;
    static readonly compositionString: string;
    static readonly deviceOrientation: UnityEngine.DeviceOrientation;
    static eatKeyPressOnTextFieldFocus: boolean;
    static readonly gyro: UnityEngine.Gyroscope;
    static imeCompositionMode: UnityEngine.IMECompositionMode;
    static readonly imeIsSelected: boolean;
    static readonly inputString: string;
    static readonly isGyroAvailable: boolean;
    static readonly location: UnityEngine.LocationService;
    static readonly mousePosition: UnityEngine.Vector3;
    static readonly mousePresent: boolean;
    static readonly mouseScrollDelta: UnityEngine.Vector2;
    static multiTouchEnabled: boolean;
    static simulateMouseWithTouches: boolean;
    static readonly stylusTouchSupported: boolean;
    static readonly touchCount: number;
    static readonly touches: UnityEngine.Touch[];
    static readonly touchPressureSupported: boolean;
    static readonly touchSupported: boolean;
  }
}
declare namespace UnityEngine {
  class LayerMask extends System.ValueType {
    protected constructor();
    static GetMask(layerNames: string[]): number;
    static LayerToName(layer: number): string;
    static NameToLayer(layerName: string): number;
    value: number;
  }
}
declare namespace UnityEngine {
  class Light extends UnityEngine.Behaviour {
    constructor();
    AddCommandBuffer(evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer): void;
    AddCommandBuffer(evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer, shadowPassMask: UnityEngine.Rendering.ShadowMapPass): void;
    GetCommandBuffers(evt: UnityEngine.Rendering.LightEvent): UnityEngine.Rendering.CommandBuffer[];
    static GetLights(type: UnityEngine.LightType, layer: number): UnityEngine.Light[];
    RemoveAllCommandBuffers(): void;
    RemoveCommandBuffer(evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer): void;
    RemoveCommandBuffers(evt: UnityEngine.Rendering.LightEvent): void;
    alreadyLightmapped: boolean;
    areaSize: UnityEngine.Vector2;
    attenuate: boolean;
    bakedIndex: number;
    bounceIntensity: number;
    color: UnityEngine.Color;
    colorTemperature: number;
    readonly commandBufferCount: number;
    cookie: UnityEngine.Texture;
    cookieSize: number;
    cullingMask: number;
    flare: UnityEngine.Flare;
    intensity: number;
    readonly isBaked: boolean;
    lightmapBakeType: UnityEngine.LightmapBakeType;
    lightmappingMode: UnityEngine.LightmappingMode;
    static pixelLightCount: number;
    range: number;
    renderMode: UnityEngine.LightRenderMode;
    shadowBias: number;
    shadowConstantBias: number;
    shadowCustomResolution: number;
    shadowNearPlane: number;
    shadowNormalBias: number;
    shadowObjectSizeBias: number;
    shadowResolution: UnityEngine.Rendering.LightShadowResolution;
    shadows: UnityEngine.LightShadows;
    shadowSoftness: number;
    shadowSoftnessFade: number;
    shadowStrength: number;
    spotAngle: number;
    type: UnityEngine.LightType;
  }
}
declare namespace UnityEngine {
  class LightProbeGroup extends UnityEngine.Behaviour {
    constructor();
    probePositions: UnityEngine.Vector3[];
  }
}
declare namespace UnityEngine {
  class LightProbeProxyVolume extends UnityEngine.Behaviour {
    constructor();
    Update(): void;
    boundingBoxMode: UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
    readonly boundsGlobal: UnityEngine.Bounds;
    gridResolutionX: number;
    gridResolutionY: number;
    gridResolutionZ: number;
    static readonly isFeatureSupported: boolean;
    originCustom: UnityEngine.Vector3;
    probeDensity: number;
    probePositionMode: UnityEngine.LightProbeProxyVolume.ProbePositionMode;
    refreshMode: UnityEngine.LightProbeProxyVolume.RefreshMode;
    resolutionMode: UnityEngine.LightProbeProxyVolume.ResolutionMode;
    sizeCustom: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.LightProbeProxyVolume {
  class ResolutionMode extends System.Enum {
    protected constructor();
    static Automatic: UnityEngine.LightProbeProxyVolume.ResolutionMode;
    static Custom: UnityEngine.LightProbeProxyVolume.ResolutionMode;
    value__: number;
  }
}
declare namespace UnityEngine.LightProbeProxyVolume {
  class BoundingBoxMode extends System.Enum {
    protected constructor();
    static AutomaticLocal: UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
    static AutomaticWorld: UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
    static Custom: UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
    value__: number;
  }
}
declare namespace UnityEngine.LightProbeProxyVolume {
  class ProbePositionMode extends System.Enum {
    protected constructor();
    static CellCenter: UnityEngine.LightProbeProxyVolume.ProbePositionMode;
    static CellCorner: UnityEngine.LightProbeProxyVolume.ProbePositionMode;
    value__: number;
  }
}
declare namespace UnityEngine.LightProbeProxyVolume {
  class RefreshMode extends System.Enum {
    protected constructor();
    static Automatic: UnityEngine.LightProbeProxyVolume.RefreshMode;
    static EveryFrame: UnityEngine.LightProbeProxyVolume.RefreshMode;
    value__: number;
    static ViaScripting: UnityEngine.LightProbeProxyVolume.RefreshMode;
  }
}
declare namespace UnityEngine {
  class LineUtility extends System.Object {
    constructor();
    static Simplify(points: UnityEngine.Vector2[], tolerance: number, pointsToKeep: number[]): void;
    static Simplify(points: UnityEngine.Vector2[], tolerance: number, simplifiedPoints: UnityEngine.Vector2[]): void;
    static Simplify(points: UnityEngine.Vector3[], tolerance: number, pointsToKeep: number[]): void;
    static Simplify(points: UnityEngine.Vector3[], tolerance: number, simplifiedPoints: UnityEngine.Vector3[]): void;
  }
}
declare namespace UnityEngine {
  class LODFadeMode extends System.Enum {
    protected constructor();
    static CrossFade: UnityEngine.LODFadeMode;
    static None: UnityEngine.LODFadeMode;
    static SpeedTree: UnityEngine.LODFadeMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LOD extends System.ValueType {
    protected constructor();
    fadeTransitionWidth: number;
    renderers: UnityEngine.Renderer[];
    screenRelativeTransitionHeight: number;
  }
}
declare namespace UnityEngine {
  class LODGroup extends UnityEngine.Component {
    constructor();
    ForceLOD(index: number): void;
    GetLODs(): UnityEngine.LOD[];
    RecalculateBounds(): void;
    SetLODs(lods: UnityEngine.LOD[]): void;
    SetLODS(lods: UnityEngine.LOD[]): void;
    animateCrossFading: boolean;
    static crossFadeAnimationDuration: number;
    enabled: boolean;
    fadeMode: UnityEngine.LODFadeMode;
    localReferencePoint: UnityEngine.Vector3;
    readonly lodCount: number;
    size: number;
  }
}
declare namespace UnityEngine {
  class Vector3 extends System.ValueType {
    protected constructor();
    static Angle(from: UnityEngine.Vector3, to: UnityEngine.Vector3): number;
    static AngleBetween(from: UnityEngine.Vector3, to: UnityEngine.Vector3): number;
    static ClampMagnitude(vector: UnityEngine.Vector3, maxLength: number): UnityEngine.Vector3;
    static Cross(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): UnityEngine.Vector3;
    static Distance(a: UnityEngine.Vector3, b: UnityEngine.Vector3): number;
    static Dot(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): number;
    Equals(other: any): boolean;
    static Exclude(excludeThis: UnityEngine.Vector3, fromThat: UnityEngine.Vector3): UnityEngine.Vector3;
    GetHashCode(): number;
    static Lerp(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
    static LerpUnclamped(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
    static Magnitude(vector: UnityEngine.Vector3): number;
    static Max(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): UnityEngine.Vector3;
    static Min(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): UnityEngine.Vector3;
    static MoveTowards(current: UnityEngine.Vector3, target: UnityEngine.Vector3, maxDistanceDelta: number): UnityEngine.Vector3;
    static Normalize(value: UnityEngine.Vector3): UnityEngine.Vector3;
    Normalize(): void;
    static OrthoNormalize(normal: any, tangent: any): void;
    static OrthoNormalize(normal: any, tangent: any, binormal: any): void;
    static Project(vector: UnityEngine.Vector3, onNormal: UnityEngine.Vector3): UnityEngine.Vector3;
    static ProjectOnPlane(vector: UnityEngine.Vector3, planeNormal: UnityEngine.Vector3): UnityEngine.Vector3;
    static Reflect(inDirection: UnityEngine.Vector3, inNormal: UnityEngine.Vector3): UnityEngine.Vector3;
    static RotateTowards(current: UnityEngine.Vector3, target: UnityEngine.Vector3, maxRadiansDelta: number, maxMagnitudeDelta: number): UnityEngine.Vector3;
    static Scale(a: UnityEngine.Vector3, b: UnityEngine.Vector3): UnityEngine.Vector3;
    Scale(scale: UnityEngine.Vector3): void;
    Set(newX: number, newY: number, newZ: number): void;
    static SignedAngle(from: UnityEngine.Vector3, to: UnityEngine.Vector3, axis: UnityEngine.Vector3): number;
    static Slerp(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
    static SlerpUnclamped(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
    static SmoothDamp(current: UnityEngine.Vector3, target: UnityEngine.Vector3, currentVelocity: any, smoothTime: number): UnityEngine.Vector3;
    static SmoothDamp(current: UnityEngine.Vector3, target: UnityEngine.Vector3, currentVelocity: any, smoothTime: number, maxSpeed: number): UnityEngine.Vector3;
    static SmoothDamp(current: UnityEngine.Vector3, target: UnityEngine.Vector3, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): UnityEngine.Vector3;
    static SqrMagnitude(vector: UnityEngine.Vector3): number;
    ToString(): string;
    ToString(format: string): string;
    static readonly back: UnityEngine.Vector3;
    static readonly down: UnityEngine.Vector3;
    static readonly forward: UnityEngine.Vector3;
    static readonly fwd: UnityEngine.Vector3;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    static readonly left: UnityEngine.Vector3;
    readonly magnitude: number;
    static readonly negativeInfinity: UnityEngine.Vector3;
    readonly normalized: UnityEngine.Vector3;
    static readonly one: UnityEngine.Vector3;
    static readonly positiveInfinity: UnityEngine.Vector3;
    static readonly right: UnityEngine.Vector3;
    readonly sqrMagnitude: number;
    static readonly up: UnityEngine.Vector3;
    static readonly zero: UnityEngine.Vector3;
    static kEpsilon: number;
    x: number;
    y: number;
    z: number;
  }
}
declare namespace UnityEngine {
  class Quaternion extends System.ValueType {
    protected constructor();
    static Angle(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion): number;
    static AngleAxis(angle: number, axis: UnityEngine.Vector3): UnityEngine.Quaternion;
    static AxisAngle(axis: UnityEngine.Vector3, angle: number): UnityEngine.Quaternion;
    static Dot(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion): number;
    Equals(other: any): boolean;
    static Euler(x: number, y: number, z: number): UnityEngine.Quaternion;
    static Euler(euler: UnityEngine.Vector3): UnityEngine.Quaternion;
    static EulerAngles(x: number, y: number, z: number): UnityEngine.Quaternion;
    static EulerAngles(euler: UnityEngine.Vector3): UnityEngine.Quaternion;
    static EulerRotation(x: number, y: number, z: number): UnityEngine.Quaternion;
    static EulerRotation(euler: UnityEngine.Vector3): UnityEngine.Quaternion;
    static FromToRotation(fromDirection: UnityEngine.Vector3, toDirection: UnityEngine.Vector3): UnityEngine.Quaternion;
    GetHashCode(): number;
    static Inverse(rotation: UnityEngine.Quaternion): UnityEngine.Quaternion;
    static Lerp(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
    static LerpUnclamped(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
    static LookRotation(forward: UnityEngine.Vector3): UnityEngine.Quaternion;
    static LookRotation(forward: UnityEngine.Vector3, upwards: UnityEngine.Vector3): UnityEngine.Quaternion;
    static RotateTowards(from: UnityEngine.Quaternion, to: UnityEngine.Quaternion, maxDegreesDelta: number): UnityEngine.Quaternion;
    Set(newX: number, newY: number, newZ: number, newW: number): void;
    SetAxisAngle(axis: UnityEngine.Vector3, angle: number): void;
    SetEulerAngles(x: number, y: number, z: number): void;
    SetEulerAngles(euler: UnityEngine.Vector3): void;
    SetEulerRotation(x: number, y: number, z: number): void;
    SetEulerRotation(euler: UnityEngine.Vector3): void;
    SetFromToRotation(fromDirection: UnityEngine.Vector3, toDirection: UnityEngine.Vector3): void;
    SetLookRotation(view: UnityEngine.Vector3): void;
    SetLookRotation(view: UnityEngine.Vector3, up: UnityEngine.Vector3): void;
    static Slerp(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
    static SlerpUnclamped(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
    ToAngleAxis(angle: any, axis: any): void;
    ToAxisAngle(axis: any, angle: any): void;
    ToEuler(): UnityEngine.Vector3;
    ToEulerAngles(): UnityEngine.Vector3;
    static ToEulerAngles(rotation: UnityEngine.Quaternion): UnityEngine.Vector3;
    ToString(): string;
    ToString(format: string): string;
    eulerAngles: UnityEngine.Vector3;
    static readonly identity: UnityEngine.Quaternion;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    static kEpsilon: number;
    w: number;
    x: number;
    y: number;
    z: number;
  }
}
declare namespace UnityEngine {
  class FrustumPlanes extends System.ValueType {
    protected constructor();
    bottom: number;
    left: number;
    right: number;
    top: number;
    zFar: number;
    zNear: number;
  }
}
declare namespace UnityEngine {
  class Matrix4x4 extends System.ValueType {
    protected constructor();
    static Determinant(m: UnityEngine.Matrix4x4): number;
    Equals(other: any): boolean;
    static Frustum(left: number, right: number, bottom: number, top: number, zNear: number, zFar: number): UnityEngine.Matrix4x4;
    static Frustum(frustumPlanes: UnityEngine.FrustumPlanes): UnityEngine.Matrix4x4;
    GetColumn(index: number): UnityEngine.Vector4;
    GetHashCode(): number;
    GetRow(index: number): UnityEngine.Vector4;
    static Inverse(m: UnityEngine.Matrix4x4): UnityEngine.Matrix4x4;
    static LookAt(from: UnityEngine.Vector3, to: UnityEngine.Vector3, up: UnityEngine.Vector3): UnityEngine.Matrix4x4;
    MultiplyPoint(point: UnityEngine.Vector3): UnityEngine.Vector3;
    MultiplyPoint3x4(point: UnityEngine.Vector3): UnityEngine.Vector3;
    MultiplyVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
    static Ortho(left: number, right: number, bottom: number, top: number, zNear: number, zFar: number): UnityEngine.Matrix4x4;
    static Perspective(fov: number, aspect: number, zNear: number, zFar: number): UnityEngine.Matrix4x4;
    static Rotate(q: UnityEngine.Quaternion): UnityEngine.Matrix4x4;
    static Scale(vector: UnityEngine.Vector3): UnityEngine.Matrix4x4;
    SetColumn(index: number, column: UnityEngine.Vector4): void;
    SetRow(index: number, row: UnityEngine.Vector4): void;
    SetTRS(pos: UnityEngine.Vector3, q: UnityEngine.Quaternion, s: UnityEngine.Vector3): void;
    ToString(): string;
    ToString(format: string): string;
    TransformPlane(plane: UnityEngine.Plane): UnityEngine.Plane;
    static Translate(vector: UnityEngine.Vector3): UnityEngine.Matrix4x4;
    static Transpose(m: UnityEngine.Matrix4x4): UnityEngine.Matrix4x4;
    static TRS(pos: UnityEngine.Vector3, q: UnityEngine.Quaternion, s: UnityEngine.Vector3): UnityEngine.Matrix4x4;
    ValidTRS(): boolean;
    readonly decomposeProjection: UnityEngine.FrustumPlanes;
    readonly determinant: number;
    static readonly identity: UnityEngine.Matrix4x4;
    readonly inverse: UnityEngine.Matrix4x4;
    readonly isIdentity: boolean;
    get_Item(row: number, column: number): number;
    set_Item(row: number, column: number, value: number): void;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    readonly lossyScale: UnityEngine.Vector3;
    readonly rotation: UnityEngine.Quaternion;
    readonly transpose: UnityEngine.Matrix4x4;
    static readonly zero: UnityEngine.Matrix4x4;
    m00: number;
    m01: number;
    m02: number;
    m03: number;
    m10: number;
    m11: number;
    m12: number;
    m13: number;
    m20: number;
    m21: number;
    m22: number;
    m23: number;
    m30: number;
    m31: number;
    m32: number;
    m33: number;
  }
}
declare namespace UnityEngine {
  class Bounds extends System.ValueType {
    protected constructor();
    ClosestPoint(point: UnityEngine.Vector3): UnityEngine.Vector3;
    Contains(point: UnityEngine.Vector3): boolean;
    Encapsulate(bounds: UnityEngine.Bounds): void;
    Encapsulate(point: UnityEngine.Vector3): void;
    Equals(other: any): boolean;
    Expand(amount: number): void;
    Expand(amount: UnityEngine.Vector3): void;
    GetHashCode(): number;
    IntersectRay(ray: UnityEngine.Ray): boolean;
    IntersectRay(ray: UnityEngine.Ray, distance: any): boolean;
    Intersects(bounds: UnityEngine.Bounds): boolean;
    SetMinMax(min: UnityEngine.Vector3, max: UnityEngine.Vector3): void;
    SqrDistance(point: UnityEngine.Vector3): number;
    ToString(): string;
    ToString(format: string): string;
    center: UnityEngine.Vector3;
    extents: UnityEngine.Vector3;
    max: UnityEngine.Vector3;
    min: UnityEngine.Vector3;
    size: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class Mathf extends System.ValueType {
    protected constructor();
    static Abs(value: number): number;
    static Abs(f: number): number;
    static Acos(f: number): number;
    static Approximately(a: number, b: number): boolean;
    static Asin(f: number): number;
    static Atan(f: number): number;
    static Atan2(y: number, x: number): number;
    static Ceil(f: number): number;
    static CeilToInt(f: number): number;
    static Clamp(value: number, min: number, max: number): number;
    static Clamp(value: number, min: number, max: number): number;
    static Clamp01(value: number): number;
    static ClosestPowerOfTwo(value: number): number;
    static CorrelatedColorTemperatureToRGB(kelvin: number): UnityEngine.Color;
    static Cos(f: number): number;
    static DeltaAngle(current: number, target: number): number;
    static Exp(power: number): number;
    static FloatToHalf(val: number): number;
    static Floor(f: number): number;
    static FloorToInt(f: number): number;
    static Gamma(value: number, absmax: number, gamma: number): number;
    static GammaToLinearSpace(value: number): number;
    static HalfToFloat(val: number): number;
    static InverseLerp(a: number, b: number, value: number): number;
    static IsPowerOfTwo(value: number): boolean;
    static Lerp(a: number, b: number, t: number): number;
    static LerpAngle(a: number, b: number, t: number): number;
    static LerpUnclamped(a: number, b: number, t: number): number;
    static LinearToGammaSpace(value: number): number;
    static Log(f: number): number;
    static Log(f: number, p: number): number;
    static Log10(f: number): number;
    static Max(a: number, b: number): number;
    static Max(values: number[]): number;
    static Max(a: number, b: number): number;
    static Max(values: number[]): number;
    static Min(a: number, b: number): number;
    static Min(values: number[]): number;
    static Min(a: number, b: number): number;
    static Min(values: number[]): number;
    static MoveTowards(current: number, target: number, maxDelta: number): number;
    static MoveTowardsAngle(current: number, target: number, maxDelta: number): number;
    static NextPowerOfTwo(value: number): number;
    static PerlinNoise(x: number, y: number): number;
    static PingPong(t: number, length: number): number;
    static Pow(f: number, p: number): number;
    static Repeat(t: number, length: number): number;
    static Round(f: number): number;
    static RoundToInt(f: number): number;
    static Sign(f: number): number;
    static Sin(f: number): number;
    static SmoothDamp(current: number, target: number, currentVelocity: any, smoothTime: number): number;
    static SmoothDamp(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number): number;
    static SmoothDamp(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): number;
    static SmoothDampAngle(current: number, target: number, currentVelocity: any, smoothTime: number): number;
    static SmoothDampAngle(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number): number;
    static SmoothDampAngle(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): number;
    static SmoothStep(from: number, to: number, t: number): number;
    static Sqrt(f: number): number;
    static Tan(f: number): number;
    static Deg2Rad: number;
    static Epsilon: number;
    static Infinity: number;
    static NegativeInfinity: number;
    static PI: number;
    static Rad2Deg: number;
  }
}
declare namespace UnityEngine {
  class Keyframe extends System.ValueType {
    protected constructor();
    inTangent: number;
    outTangent: number;
    tangentMode: number;
    time: number;
    value: number;
  }
}
declare namespace UnityEngine {
  class WrapMode extends System.Enum {
    protected constructor();
    static Clamp: UnityEngine.WrapMode;
    static ClampForever: UnityEngine.WrapMode;
    static Default: UnityEngine.WrapMode;
    static Loop: UnityEngine.WrapMode;
    static Once: UnityEngine.WrapMode;
    static PingPong: UnityEngine.WrapMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnimationCurve extends System.Object {
    constructor(keys: UnityEngine.Keyframe[]);
    constructor();
    AddKey(time: number, value: number): number;
    AddKey(key: UnityEngine.Keyframe): number;
    static EaseInOut(timeStart: number, valueStart: number, timeEnd: number, valueEnd: number): UnityEngine.AnimationCurve;
    Evaluate(time: number): number;
    static Linear(timeStart: number, valueStart: number, timeEnd: number, valueEnd: number): UnityEngine.AnimationCurve;
    MoveKey(index: number, key: UnityEngine.Keyframe): number;
    RemoveKey(index: number): void;
    SmoothTangents(index: number, weight: number): void;
    get_Item(index: number): UnityEngine.Keyframe;
    keys: UnityEngine.Keyframe[];
    readonly length: number;
    postWrapMode: UnityEngine.WrapMode;
    preWrapMode: UnityEngine.WrapMode;
  }
}
declare namespace UnityEngine {
  class CombineInstanceHelper extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class StaticBatchingHelper extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class Mesh extends UnityEngine.Object {
    constructor();
    AddBlendShapeFrame(shapeName: string, frameWeight: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]): void;
    Clear(): void;
    Clear(keepVertexLayout: boolean): void;
    ClearBlendShapes(): void;
    CombineMeshes(combine: UnityEngine.CombineInstance[]): void;
    CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean): void;
    CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean, useMatrices: boolean): void;
    CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean, useMatrices: boolean, hasLightmapData: boolean): void;
    GetBindposes(bindposes: UnityEngine.Matrix4x4[]): void;
    GetBlendShapeFrameCount(shapeIndex: number): number;
    GetBlendShapeFrameVertices(shapeIndex: number, frameIndex: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]): void;
    GetBlendShapeFrameWeight(shapeIndex: number, frameIndex: number): number;
    GetBlendShapeIndex(blendShapeName: string): number;
    GetBlendShapeName(shapeIndex: number): string;
    GetBoneWeights(boneWeights: UnityEngine.BoneWeight[]): void;
    GetColors(colors: UnityEngine.Color[]): void;
    GetColors(colors: UnityEngine.Color32[]): void;
    GetIndexCount(submesh: number): number;
    GetIndexStart(submesh: number): number;
    GetIndices(submesh: number): number[];
    GetIndices(indices: number[], submesh: number): void;
    GetNativeIndexBufferPtr(): any;
    GetNativeVertexBufferPtr(index: number): any;
    GetNormals(normals: UnityEngine.Vector3[]): void;
    GetTangents(tangents: UnityEngine.Vector4[]): void;
    GetTopology(submesh: number): UnityEngine.MeshTopology;
    GetTriangles(submesh: number): number[];
    GetTriangles(triangles: number[], submesh: number): void;
    GetUVs(channel: number, uvs: UnityEngine.Vector2[]): void;
    GetUVs(channel: number, uvs: UnityEngine.Vector3[]): void;
    GetUVs(channel: number, uvs: UnityEngine.Vector4[]): void;
    GetVertices(vertices: UnityEngine.Vector3[]): void;
    MarkDynamic(): void;
    Optimize(): void;
    RecalculateBounds(): void;
    RecalculateNormals(): void;
    RecalculateTangents(): void;
    SetColors(inColors: UnityEngine.Color[]): void;
    SetColors(inColors: UnityEngine.Color32[]): void;
    SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number): void;
    SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: boolean): void;
    SetNormals(inNormals: UnityEngine.Vector3[]): void;
    SetTangents(inTangents: UnityEngine.Vector4[]): void;
    SetTriangles(triangles: number[], submesh: number): void;
    SetTriangles(triangles: number[], submesh: number, calculateBounds: boolean): void;
    SetTriangles(triangles: number[], submesh: number): void;
    SetTriangles(triangles: number[], submesh: number, calculateBounds: boolean): void;
    SetUVs(channel: number, uvs: UnityEngine.Vector2[]): void;
    SetUVs(channel: number, uvs: UnityEngine.Vector3[]): void;
    SetUVs(channel: number, uvs: UnityEngine.Vector4[]): void;
    SetVertices(inVertices: UnityEngine.Vector3[]): void;
    UploadMeshData(markNoLogerReadable: boolean): void;
    bindposes: UnityEngine.Matrix4x4[];
    readonly blendShapeCount: number;
    boneWeights: UnityEngine.BoneWeight[];
    bounds: UnityEngine.Bounds;
    colors: UnityEngine.Color[];
    colors32: UnityEngine.Color32[];
    readonly isReadable: boolean;
    normals: UnityEngine.Vector3[];
    subMeshCount: number;
    tangents: UnityEngine.Vector4[];
    triangles: number[];
    uv: UnityEngine.Vector2[];
    uv1: UnityEngine.Vector2[];
    uv2: UnityEngine.Vector2[];
    uv3: UnityEngine.Vector2[];
    uv4: UnityEngine.Vector2[];
    readonly vertexBufferCount: number;
    readonly vertexCount: number;
    vertices: UnityEngine.Vector3[];
  }
}
declare namespace UnityEngine.Mesh {
  class InternalShaderChannel extends System.Enum {
    protected constructor();
    static Color: UnityEngine.Mesh.InternalShaderChannel;
    static Normal: UnityEngine.Mesh.InternalShaderChannel;
    static Tangent: UnityEngine.Mesh.InternalShaderChannel;
    static TexCoord0: UnityEngine.Mesh.InternalShaderChannel;
    static TexCoord1: UnityEngine.Mesh.InternalShaderChannel;
    static TexCoord2: UnityEngine.Mesh.InternalShaderChannel;
    static TexCoord3: UnityEngine.Mesh.InternalShaderChannel;
    value__: number;
    static Vertex: UnityEngine.Mesh.InternalShaderChannel;
  }
}
declare namespace UnityEngine.Mesh {
  class InternalVertexChannelType extends System.Enum {
    protected constructor();
    static Color: UnityEngine.Mesh.InternalVertexChannelType;
    static Float: UnityEngine.Mesh.InternalVertexChannelType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RPCMode extends System.Enum {
    protected constructor();
    static All: UnityEngine.RPCMode;
    static AllBuffered: UnityEngine.RPCMode;
    static Others: UnityEngine.RPCMode;
    static OthersBuffered: UnityEngine.RPCMode;
    static Server: UnityEngine.RPCMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ConnectionTesterStatus extends System.Enum {
    protected constructor();
    static Error: UnityEngine.ConnectionTesterStatus;
    static LimitedNATPunchthroughPortRestricted: UnityEngine.ConnectionTesterStatus;
    static LimitedNATPunchthroughSymmetric: UnityEngine.ConnectionTesterStatus;
    static NATpunchthroughAddressRestrictedCone: UnityEngine.ConnectionTesterStatus;
    static NATpunchthroughFullCone: UnityEngine.ConnectionTesterStatus;
    static PrivateIPHasNATPunchThrough: UnityEngine.ConnectionTesterStatus;
    static PrivateIPNoNATPunchthrough: UnityEngine.ConnectionTesterStatus;
    static PublicIPIsConnectable: UnityEngine.ConnectionTesterStatus;
    static PublicIPNoServerStarted: UnityEngine.ConnectionTesterStatus;
    static PublicIPPortBlocked: UnityEngine.ConnectionTesterStatus;
    static Undetermined: UnityEngine.ConnectionTesterStatus;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NetworkConnectionError extends System.Enum {
    protected constructor();
    static AlreadyConnectedToAnotherServer: UnityEngine.NetworkConnectionError;
    static AlreadyConnectedToServer: UnityEngine.NetworkConnectionError;
    static ConnectionBanned: UnityEngine.NetworkConnectionError;
    static ConnectionFailed: UnityEngine.NetworkConnectionError;
    static CreateSocketOrThreadFailure: UnityEngine.NetworkConnectionError;
    static EmptyConnectTarget: UnityEngine.NetworkConnectionError;
    static IncorrectParameters: UnityEngine.NetworkConnectionError;
    static InternalDirectConnectFailed: UnityEngine.NetworkConnectionError;
    static InvalidPassword: UnityEngine.NetworkConnectionError;
    static NATPunchthroughFailed: UnityEngine.NetworkConnectionError;
    static NATTargetConnectionLost: UnityEngine.NetworkConnectionError;
    static NATTargetNotConnected: UnityEngine.NetworkConnectionError;
    static NoError: UnityEngine.NetworkConnectionError;
    static RSAPublicKeyMismatch: UnityEngine.NetworkConnectionError;
    static TooManyConnectedPlayers: UnityEngine.NetworkConnectionError;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NetworkDisconnection extends System.Enum {
    protected constructor();
    static Disconnected: UnityEngine.NetworkDisconnection;
    static LostConnection: UnityEngine.NetworkDisconnection;
    value__: number;
  }
}
declare namespace UnityEngine {
  class MasterServerEvent extends System.Enum {
    protected constructor();
    static HostListReceived: UnityEngine.MasterServerEvent;
    static RegistrationFailedGameName: UnityEngine.MasterServerEvent;
    static RegistrationFailedGameType: UnityEngine.MasterServerEvent;
    static RegistrationFailedNoServer: UnityEngine.MasterServerEvent;
    static RegistrationSucceeded: UnityEngine.MasterServerEvent;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NetworkStateSynchronization extends System.Enum {
    protected constructor();
    static Off: UnityEngine.NetworkStateSynchronization;
    static ReliableDeltaCompressed: UnityEngine.NetworkStateSynchronization;
    static Unreliable: UnityEngine.NetworkStateSynchronization;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NetworkPeerType extends System.Enum {
    protected constructor();
    static Client: UnityEngine.NetworkPeerType;
    static Connecting: UnityEngine.NetworkPeerType;
    static Disconnected: UnityEngine.NetworkPeerType;
    static Server: UnityEngine.NetworkPeerType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NetworkLogLevel extends System.Enum {
    protected constructor();
    static Full: UnityEngine.NetworkLogLevel;
    static Informational: UnityEngine.NetworkLogLevel;
    static Off: UnityEngine.NetworkLogLevel;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NetworkPlayer extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    readonly externalIP: string;
    readonly externalPort: number;
    readonly guid: string;
    readonly ipAddress: string;
    readonly port: number;
  }
}
declare namespace UnityEngine {
  class NetworkViewID extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    readonly isMine: boolean;
    readonly owner: UnityEngine.NetworkPlayer;
    static readonly unassigned: UnityEngine.NetworkViewID;
  }
}
declare namespace UnityEngine {
  class NetworkView extends UnityEngine.Behaviour {
    constructor();
    static Find(viewID: UnityEngine.NetworkViewID): UnityEngine.NetworkView;
    RPC(name: string, target: UnityEngine.NetworkPlayer, args: any[]): void;
    RPC(name: string, mode: UnityEngine.RPCMode, args: any[]): void;
    SetScope(player: UnityEngine.NetworkPlayer, relevancy: boolean): boolean;
    group: number;
    readonly isMine: boolean;
    observed: UnityEngine.Component;
    readonly owner: UnityEngine.NetworkPlayer;
    stateSynchronization: UnityEngine.NetworkStateSynchronization;
    viewID: UnityEngine.NetworkViewID;
  }
}
declare namespace UnityEngine {
  class Network extends System.Object {
    constructor();
    static AllocateViewID(): UnityEngine.NetworkViewID;
    static CloseConnection(target: UnityEngine.NetworkPlayer, sendDisconnectionNotification: boolean): void;
    static Connect(GUID: string): UnityEngine.NetworkConnectionError;
    static Connect(IP: string, remotePort: number): UnityEngine.NetworkConnectionError;
    static Connect(IP: string, remotePort: number, password: string): UnityEngine.NetworkConnectionError;
    static Connect(GUID: string, password: string): UnityEngine.NetworkConnectionError;
    static Connect(IPs: string[], remotePort: number): UnityEngine.NetworkConnectionError;
    static Connect(IPs: string[], remotePort: number, password: string): UnityEngine.NetworkConnectionError;
    static Connect(hostData: UnityEngine.HostData): UnityEngine.NetworkConnectionError;
    static Connect(hostData: UnityEngine.HostData, password: string): UnityEngine.NetworkConnectionError;
    static Destroy(gameObject: UnityEngine.GameObject): void;
    static Destroy(viewID: UnityEngine.NetworkViewID): void;
    static DestroyPlayerObjects(playerID: UnityEngine.NetworkPlayer): void;
    static Disconnect(): void;
    static Disconnect(timeout: number): void;
    static GetAveragePing(player: UnityEngine.NetworkPlayer): number;
    static GetLastPing(player: UnityEngine.NetworkPlayer): number;
    static HavePublicAddress(): boolean;
    static InitializeSecurity(): void;
    static InitializeServer(connections: number, listenPort: number): UnityEngine.NetworkConnectionError;
    static InitializeServer(connections: number, listenPort: number, useNat: boolean): UnityEngine.NetworkConnectionError;
    static Instantiate(prefab: UnityEngine.Object, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, group: number): UnityEngine.Object;
    static RemoveRPCs(playerID: UnityEngine.NetworkPlayer): void;
    static RemoveRPCs(playerID: UnityEngine.NetworkPlayer, group: number): void;
    static RemoveRPCs(viewID: UnityEngine.NetworkViewID): void;
    static RemoveRPCsInGroup(group: number): void;
    static SetLevelPrefix(prefix: number): void;
    static SetReceivingEnabled(player: UnityEngine.NetworkPlayer, group: number, enabled: boolean): void;
    static SetSendingEnabled(group: number, enabled: boolean): void;
    static SetSendingEnabled(player: UnityEngine.NetworkPlayer, group: number, enabled: boolean): void;
    static TestConnection(): UnityEngine.ConnectionTesterStatus;
    static TestConnection(forceTest: boolean): UnityEngine.ConnectionTesterStatus;
    static TestConnectionNAT(): UnityEngine.ConnectionTesterStatus;
    static TestConnectionNAT(forceTest: boolean): UnityEngine.ConnectionTesterStatus;
    static readonly connections: UnityEngine.NetworkPlayer[];
    static connectionTesterIP: string;
    static connectionTesterPort: number;
    static incomingPassword: string;
    static readonly isClient: boolean;
    static isMessageQueueRunning: boolean;
    static readonly isServer: boolean;
    static logLevel: UnityEngine.NetworkLogLevel;
    static maxConnections: number;
    static minimumAllocatableViewIDs: number;
    static natFacilitatorIP: string;
    static natFacilitatorPort: number;
    static readonly peerType: UnityEngine.NetworkPeerType;
    static readonly player: UnityEngine.NetworkPlayer;
    static proxyIP: string;
    static proxyPassword: string;
    static proxyPort: number;
    static sendRate: number;
    static readonly time: number;
    static useNat: boolean;
    static useProxy: boolean;
  }
}
declare namespace UnityEngine {
  class BitStream extends System.Object {
    constructor();
    Serialize(value: any): void;
    Serialize(value: any): void;
    Serialize(value: any): void;
    Serialize(value: any): void;
    Serialize(value: any): void;
    Serialize(value: any, maxDelta: number): void;
    Serialize(value: any): void;
    Serialize(viewID: any): void;
    Serialize(value: any): void;
    Serialize(value: any, maxDelta: number): void;
    Serialize(value: any): void;
    Serialize(value: any, maxDelta: number): void;
    readonly isReading: boolean;
    readonly isWriting: boolean;
  }
}
declare namespace UnityEngine {
  class RPC extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class HostData extends System.Object {
    constructor();
    comment: string;
    connectedPlayers: number;
    gameName: string;
    gameType: string;
    guid: string;
    ip: string[];
    passwordProtected: boolean;
    playerLimit: number;
    port: number;
    useNat: boolean;
  }
}
declare namespace UnityEngine {
  class MasterServer extends System.Object {
    constructor();
    static ClearHostList(): void;
    static PollHostList(): UnityEngine.HostData[];
    static RegisterHost(gameTypeName: string, gameName: string): void;
    static RegisterHost(gameTypeName: string, gameName: string, comment: string): void;
    static RequestHostList(gameTypeName: string): void;
    static UnregisterHost(): void;
    static dedicatedServer: boolean;
    static ipAddress: string;
    static port: number;
    static updateRate: number;
  }
}
declare namespace UnityEngine {
  class NetworkMessageInfo extends System.ValueType {
    protected constructor();
    readonly networkView: UnityEngine.NetworkView;
    readonly sender: UnityEngine.NetworkPlayer;
    readonly timestamp: number;
  }
}
declare namespace UnityEngine {
  class Ping extends System.Object {
    constructor(address: string);
    DestroyPing(): void;
    readonly ip: string;
    readonly isDone: boolean;
    readonly time: number;
  }
}
declare namespace UnityEngine.Diagnostics {
  class PlayerConnection extends System.Object {
    protected constructor();
    static SendFile(remoteFilePath: string, data: number[]): void;
    static readonly connected: boolean;
  }
}
declare namespace UnityEngine {
  class IPlayerEditorConnectionNative {
    protected constructor();
    DisconnectAll(): void;
    Initialize(): void;
    IsConnected(): boolean;
    RegisterInternal(messageId: any): void;
    SendMessage(messageId: any, data: number[], playerId: number): void;
    UnregisterInternal(messageId: any): void;
  }
}
declare namespace UnityEngine {
  class PlayerConnectionInternal extends System.Object {
    constructor();
    static DisconnectAll(): void;
    static Initialize(): void;
    static IsConnected(): boolean;
    static RegisterInternal(messageId: string): void;
    static SendMessage(messageId: string, data: number[], playerId: number): void;
    static UnregisterInternal(messageId: string): void;
  }
}
declare namespace UnityEngine {
  class PlayerPrefsException extends System.Exception {
    constructor(error: string);
  }
}
declare namespace System {
  class Exception extends System.Object {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
    GetBaseException(): System.Exception;
    GetObjectData(info: any, context: any): void;
    GetType(): any;
    GetType(): any;
    ToString(): string;
    readonly Data: any;
    HelpLink: string;
    readonly HResult: number;
    readonly InnerException: System.Exception;
    readonly Message: string;
    Source: string;
    readonly StackTrace: string;
    readonly TargetSite: any;
  }
}
declare namespace UnityEngine {
  class PlayerPrefs extends System.Object {
    constructor();
    static DeleteAll(): void;
    static DeleteKey(key: string): void;
    static GetFloat(key: string): number;
    static GetFloat(key: string, defaultValue: number): number;
    static GetInt(key: string): number;
    static GetInt(key: string, defaultValue: number): number;
    static GetString(key: string): string;
    static GetString(key: string, defaultValue: string): string;
    static HasKey(key: string): boolean;
    static Save(): void;
    static SetFloat(key: string, value: number): void;
    static SetInt(key: string, value: number): void;
    static SetString(key: string, value: string): void;
  }
}
declare namespace UnityEngine {
  class Random extends System.Object {
    constructor();
    static ColorHSV(): UnityEngine.Color;
    static ColorHSV(hueMin: number, hueMax: number): UnityEngine.Color;
    static ColorHSV(hueMin: number, hueMax: number, saturationMin: number, saturationMax: number): UnityEngine.Color;
    static ColorHSV(hueMin: number, hueMax: number, saturationMin: number, saturationMax: number, valueMin: number, valueMax: number): UnityEngine.Color;
    static ColorHSV(hueMin: number, hueMax: number, saturationMin: number, saturationMax: number, valueMin: number, valueMax: number, alphaMin: number, alphaMax: number): UnityEngine.Color;
    static InitState(seed: number): void;
    static RandomRange(min: number, max: number): number;
    static RandomRange(min: number, max: number): number;
    static Range(min: number, max: number): number;
    static Range(min: number, max: number): number;
    static readonly insideUnitCircle: UnityEngine.Vector2;
    static readonly insideUnitSphere: UnityEngine.Vector3;
    static readonly onUnitSphere: UnityEngine.Vector3;
    static readonly rotation: UnityEngine.Quaternion;
    static readonly rotationUniform: UnityEngine.Quaternion;
    static seed: number;
    static state: UnityEngine.Random.State;
    static readonly value: number;
  }
}
declare namespace UnityEngine.Random {
  class State extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class ReflectionProbe extends UnityEngine.Behaviour {
    constructor();
    static BlendCubemap(src: UnityEngine.Texture, dst: UnityEngine.Texture, blend: number, target: UnityEngine.RenderTexture): boolean;
    IsFinishedRendering(renderId: number): boolean;
    RenderProbe(): number;
    RenderProbe(targetTexture: UnityEngine.RenderTexture): number;
    backgroundColor: UnityEngine.Color;
    bakedTexture: UnityEngine.Texture;
    blendDistance: number;
    readonly bounds: UnityEngine.Bounds;
    boxProjection: boolean;
    center: UnityEngine.Vector3;
    clearFlags: UnityEngine.Rendering.ReflectionProbeClearFlags;
    cullingMask: number;
    customBakedTexture: UnityEngine.Texture;
    static readonly defaultTexture: UnityEngine.Texture;
    static readonly defaultTextureHDRDecodeValues: UnityEngine.Vector4;
    farClipPlane: number;
    hdr: boolean;
    importance: number;
    intensity: number;
    static readonly maxBakedCubemapResolution: number;
    static readonly minBakedCubemapResolution: number;
    mode: UnityEngine.Rendering.ReflectionProbeMode;
    nearClipPlane: number;
    refreshMode: UnityEngine.Rendering.ReflectionProbeRefreshMode;
    resolution: number;
    shadowDistance: number;
    size: UnityEngine.Vector3;
    readonly texture: UnityEngine.Texture;
    readonly textureHDRDecodeValues: UnityEngine.Vector4;
    timeSlicingMode: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
    type: UnityEngine.Rendering.ReflectionProbeType;
  }
}
declare namespace UnityEngine.Rendering {
  class GraphicsSettings extends UnityEngine.Object {
    constructor();
    static GetCustomShader(type: UnityEngine.Rendering.BuiltinShaderType): UnityEngine.Shader;
    static GetShaderMode(type: UnityEngine.Rendering.BuiltinShaderType): UnityEngine.Rendering.BuiltinShaderMode;
    static HasShaderDefine(defineHash: UnityEngine.Rendering.BuiltinShaderDefine): boolean;
    static HasShaderDefine(tier: UnityEngine.Rendering.GraphicsTier, defineHash: UnityEngine.Rendering.BuiltinShaderDefine): boolean;
    static SetCustomShader(type: UnityEngine.Rendering.BuiltinShaderType, shader: UnityEngine.Shader): void;
    static SetShaderMode(type: UnityEngine.Rendering.BuiltinShaderType, mode: UnityEngine.Rendering.BuiltinShaderMode): void;
    static lightsUseColorTemperature: boolean;
    static lightsUseLinearIntensity: boolean;
    static renderPipelineAsset: UnityEngine.Experimental.Rendering.RenderPipelineAsset;
    static transparencySortAxis: UnityEngine.Vector3;
    static transparencySortMode: UnityEngine.TransparencySortMode;
  }
}
declare namespace UnityEngine.Rendering {
  class CommandBuffer extends System.Object {
    constructor();
    BeginSample(name: string): void;
    Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier): void;
    Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material): void;
    Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number): void;
    Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
    Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier): void;
    Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material): void;
    Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number): void;
    Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
    Clear(): void;
    ClearRandomWriteTargets(): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color): void;
    ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color, depth: number): void;
    CopyCounterValue(src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number): void;
    CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
    CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, srcMip: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number, dstMip: number): void;
    CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number): void;
    CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, dst: UnityEngine.Rendering.RenderTargetIdentifier): void;
    DisableShaderKeyword(keyword: string): void;
    DispatchCompute(computeShader: UnityEngine.ComputeShader, kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number): void;
    DispatchCompute(computeShader: UnityEngine.ComputeShader, kernelIndex: number, indirectBuffer: UnityEngine.ComputeBuffer, argsOffset: number): void;
    Dispose(): void;
    DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material): void;
    DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number): void;
    DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number, shaderPass: number): void;
    DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number, shaderPass: number, properties: UnityEngine.MaterialPropertyBlock): void;
    DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[]): void;
    DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[], count: number): void;
    DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock): void;
    DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer): void;
    DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
    DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock): void;
    DrawProcedural(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number): void;
    DrawProcedural(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number): void;
    DrawProcedural(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number, properties: UnityEngine.MaterialPropertyBlock): void;
    DrawProceduralIndirect(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer): void;
    DrawProceduralIndirect(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
    DrawProceduralIndirect(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock): void;
    DrawRenderer(renderer: UnityEngine.Renderer, material: UnityEngine.Material): void;
    DrawRenderer(renderer: UnityEngine.Renderer, material: UnityEngine.Material, submeshIndex: number): void;
    DrawRenderer(renderer: UnityEngine.Renderer, material: UnityEngine.Material, submeshIndex: number, shaderPass: number): void;
    EnableShaderKeyword(keyword: string): void;
    EndSample(name: string): void;
    GetTemporaryRT(nameID: number, width: number, height: number): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean): void;
    GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless): void;
    GetTemporaryRT(nameID: number, desc: UnityEngine.RenderTextureDescriptor): void;
    GetTemporaryRT(nameID: number, desc: UnityEngine.RenderTextureDescriptor, filter: UnityEngine.FilterMode): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number): void;
    GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean): void;
    IssuePluginCustomBlit(callback: any, command: number, source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, commandParam: number, commandFlags: number): void;
    IssuePluginCustomTextureUpdate(callback: any, targetTexture: UnityEngine.Texture, userData: number): void;
    IssuePluginEvent(callback: any, eventID: number): void;
    IssuePluginEventAndData(callback: any, eventID: number, data: any): void;
    Release(): void;
    ReleaseTemporaryRT(nameID: number): void;
    SetComputeBufferParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, buffer: UnityEngine.ComputeBuffer): void;
    SetComputeFloatParam(computeShader: UnityEngine.ComputeShader, name: string, val: number): void;
    SetComputeFloatParams(computeShader: UnityEngine.ComputeShader, name: string, values: number[]): void;
    SetComputeIntParam(computeShader: UnityEngine.ComputeShader, name: string, val: number): void;
    SetComputeIntParams(computeShader: UnityEngine.ComputeShader, name: string, values: number[]): void;
    SetComputeTextureParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetComputeVectorParam(computeShader: UnityEngine.ComputeShader, name: string, val: UnityEngine.Vector4): void;
    SetGlobalBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
    SetGlobalBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
    SetGlobalColor(nameID: number, value: UnityEngine.Color): void;
    SetGlobalColor(name: string, value: UnityEngine.Color): void;
    SetGlobalDepthBias(bias: number, slopeBias: number): void;
    SetGlobalFloat(nameID: number, value: number): void;
    SetGlobalFloat(name: string, value: number): void;
    SetGlobalFloatArray(nameID: number, values: number[]): void;
    SetGlobalFloatArray(nameID: number, values: number[]): void;
    SetGlobalFloatArray(propertyName: string, values: number[]): void;
    SetGlobalFloatArray(propertyName: string, values: number[]): void;
    SetGlobalMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
    SetGlobalMatrix(name: string, value: UnityEngine.Matrix4x4): void;
    SetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    SetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    SetGlobalMatrixArray(propertyName: string, values: UnityEngine.Matrix4x4[]): void;
    SetGlobalMatrixArray(propertyName: string, values: UnityEngine.Matrix4x4[]): void;
    SetGlobalTexture(nameID: number, value: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetGlobalTexture(name: string, value: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetGlobalVector(nameID: number, value: UnityEngine.Vector4): void;
    SetGlobalVector(name: string, value: UnityEngine.Vector4): void;
    SetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    SetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    SetGlobalVectorArray(propertyName: string, values: UnityEngine.Vector4[]): void;
    SetGlobalVectorArray(propertyName: string, values: UnityEngine.Vector4[]): void;
    SetProjectionMatrix(proj: UnityEngine.Matrix4x4): void;
    SetRandomWriteTarget(index: number, buffer: UnityEngine.ComputeBuffer): void;
    SetRandomWriteTarget(index: number, buffer: UnityEngine.ComputeBuffer, preserveCounterValue: boolean): void;
    SetRandomWriteTarget(index: number, rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number): void;
    SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace): void;
    SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number): void;
    SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number): void;
    SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace): void;
    SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number): void;
    SetRenderTarget(colors: UnityEngine.Rendering.RenderTargetIdentifier[], depth: UnityEngine.Rendering.RenderTargetIdentifier): void;
    SetShadowSamplingMode(shadowmap: UnityEngine.Rendering.RenderTargetIdentifier, mode: UnityEngine.Rendering.ShadowSamplingMode): void;
    SetViewMatrix(view: UnityEngine.Matrix4x4): void;
    SetViewport(pixelRect: UnityEngine.Rect): void;
    SetViewProjectionMatrices(view: UnityEngine.Matrix4x4, proj: UnityEngine.Matrix4x4): void;
    name: string;
    readonly sizeInBytes: number;
  }
}
declare namespace UnityEngine {
  class ResourceRequest extends UnityEngine.AsyncOperation {
    constructor();
    readonly asset: UnityEngine.Object;
  }
}
declare namespace UnityEngine {
  class Resources extends System.Object {
    constructor();
    static FindObjectsOfTypeAll(type: any): UnityEngine.Object[];
    static GetBuiltinResource(type: any, path: string): UnityEngine.Object;
    static Load(path: string): UnityEngine.Object;
    static Load(path: string, systemTypeInstance: any): UnityEngine.Object;
    static LoadAll(path: string): UnityEngine.Object[];
    static LoadAll(path: string, systemTypeInstance: any): UnityEngine.Object[];
    static LoadAssetAtPath(assetPath: string, type: any): UnityEngine.Object;
    static LoadAsync(path: string): UnityEngine.ResourceRequest;
    static LoadAsync(path: string, type: any): UnityEngine.ResourceRequest;
    static UnloadAsset(assetToUnload: UnityEngine.Object): void;
    static UnloadUnusedAssets(): UnityEngine.AsyncOperation;
  }
}
declare namespace UnityEngine {
  class RuntimeUndo extends System.Object {
    constructor();
    static RecordObject(objectToUndo: UnityEngine.Object, name: string): void;
    static RecordObjects(objectsToUndo: UnityEngine.Object[], name: string): void;
    static SetTransformParent(transform: UnityEngine.Transform, newParent: UnityEngine.Transform, name: string): void;
  }
}
declare namespace UnityEngine {
  class Security extends System.Object {
    constructor();
    static LoadAndVerifyAssembly(assemblyData: number[]): any;
    static LoadAndVerifyAssembly(assemblyData: number[], authorizationKey: string): any;
    static PrefetchSocketPolicy(ip: string, atPort: number): boolean;
    static PrefetchSocketPolicy(ip: string, atPort: number, timeout: number): boolean;
  }
}
declare namespace UnityEngine {
  class DisableBatchingType extends System.Enum {
    protected constructor();
    static False: UnityEngine.DisableBatchingType;
    static True: UnityEngine.DisableBatchingType;
    value__: number;
    static WhenLODFading: UnityEngine.DisableBatchingType;
  }
}
declare namespace UnityEngine {
  class Shader extends UnityEngine.Object {
    constructor();
    static DisableKeyword(keyword: string): void;
    static EnableKeyword(keyword: string): void;
    static Find(name: string): UnityEngine.Shader;
    static GetGlobalColor(nameID: number): UnityEngine.Color;
    static GetGlobalColor(name: string): UnityEngine.Color;
    static GetGlobalFloat(nameID: number): number;
    static GetGlobalFloat(name: string): number;
    static GetGlobalFloatArray(nameID: number): number[];
    static GetGlobalFloatArray(name: string): number[];
    static GetGlobalFloatArray(nameID: number, values: number[]): void;
    static GetGlobalFloatArray(name: string, values: number[]): void;
    static GetGlobalInt(nameID: number): number;
    static GetGlobalInt(name: string): number;
    static GetGlobalMatrix(nameID: number): UnityEngine.Matrix4x4;
    static GetGlobalMatrix(name: string): UnityEngine.Matrix4x4;
    static GetGlobalMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
    static GetGlobalMatrixArray(name: string): UnityEngine.Matrix4x4[];
    static GetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    static GetGlobalMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    static GetGlobalTexture(nameID: number): UnityEngine.Texture;
    static GetGlobalTexture(name: string): UnityEngine.Texture;
    static GetGlobalVector(nameID: number): UnityEngine.Vector4;
    static GetGlobalVector(name: string): UnityEngine.Vector4;
    static GetGlobalVectorArray(nameID: number): UnityEngine.Vector4[];
    static GetGlobalVectorArray(name: string): UnityEngine.Vector4[];
    static GetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    static GetGlobalVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    static IsKeywordEnabled(keyword: string): boolean;
    static PropertyToID(name: string): number;
    static SetGlobalBuffer(nameID: number, buffer: UnityEngine.ComputeBuffer): void;
    static SetGlobalBuffer(name: string, buffer: UnityEngine.ComputeBuffer): void;
    static SetGlobalColor(nameID: number, value: UnityEngine.Color): void;
    static SetGlobalColor(name: string, value: UnityEngine.Color): void;
    static SetGlobalFloat(nameID: number, value: number): void;
    static SetGlobalFloat(name: string, value: number): void;
    static SetGlobalFloatArray(nameID: number, values: number[]): void;
    static SetGlobalFloatArray(nameID: number, values: number[]): void;
    static SetGlobalFloatArray(name: string, values: number[]): void;
    static SetGlobalFloatArray(name: string, values: number[]): void;
    static SetGlobalInt(nameID: number, value: number): void;
    static SetGlobalInt(name: string, value: number): void;
    static SetGlobalMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
    static SetGlobalMatrix(name: string, value: UnityEngine.Matrix4x4): void;
    static SetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    static SetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    static SetGlobalMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    static SetGlobalMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    static SetGlobalTexGenMode(propertyName: string, mode: UnityEngine.TexGenMode): void;
    static SetGlobalTexture(nameID: number, value: UnityEngine.Texture): void;
    static SetGlobalTexture(name: string, value: UnityEngine.Texture): void;
    static SetGlobalTextureMatrixName(propertyName: string, matrixName: string): void;
    static SetGlobalVector(nameID: number, value: UnityEngine.Vector4): void;
    static SetGlobalVector(name: string, value: UnityEngine.Vector4): void;
    static SetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    static SetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    static SetGlobalVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    static SetGlobalVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    static WarmupAllShaders(): void;
    static globalMaximumLOD: number;
    static globalRenderPipeline: string;
    static globalShaderHardwareTier: UnityEngine.Rendering.ShaderHardwareTier;
    readonly isSupported: boolean;
    maximumLOD: number;
    readonly renderQueue: number;
  }
}
declare namespace UnityEngine {
  class Material extends UnityEngine.Object {
    constructor(contents: string);
    constructor(shader: UnityEngine.Shader);
    constructor(source: UnityEngine.Material);
    CopyPropertiesFromMaterial(mat: UnityEngine.Material): void;
    static Create(scriptContents: string): UnityEngine.Material;
    DisableKeyword(keyword: string): void;
    EnableKeyword(keyword: string): void;
    FindPass(passName: string): number;
    GetColor(nameID: number): UnityEngine.Color;
    GetColor(name: string): UnityEngine.Color;
    GetColorArray(nameID: number): UnityEngine.Color[];
    GetColorArray(name: string): UnityEngine.Color[];
    GetColorArray(nameID: number, values: UnityEngine.Color[]): void;
    GetColorArray(name: string, values: UnityEngine.Color[]): void;
    GetFloat(nameID: number): number;
    GetFloat(name: string): number;
    GetFloatArray(nameID: number): number[];
    GetFloatArray(name: string): number[];
    GetFloatArray(nameID: number, values: number[]): void;
    GetFloatArray(name: string, values: number[]): void;
    GetInt(nameID: number): number;
    GetInt(name: string): number;
    GetMatrix(nameID: number): UnityEngine.Matrix4x4;
    GetMatrix(name: string): UnityEngine.Matrix4x4;
    GetMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
    GetMatrixArray(name: string): UnityEngine.Matrix4x4[];
    GetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    GetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    GetPassName(pass: number): string;
    GetShaderPassEnabled(passName: string): boolean;
    GetTag(tag: string, searchFallbacks: boolean): string;
    GetTag(tag: string, searchFallbacks: boolean, defaultValue: string): string;
    GetTexture(nameID: number): UnityEngine.Texture;
    GetTexture(name: string): UnityEngine.Texture;
    GetTextureOffset(nameID: number): UnityEngine.Vector2;
    GetTextureOffset(name: string): UnityEngine.Vector2;
    GetTextureScale(nameID: number): UnityEngine.Vector2;
    GetTextureScale(name: string): UnityEngine.Vector2;
    GetVector(nameID: number): UnityEngine.Vector4;
    GetVector(name: string): UnityEngine.Vector4;
    GetVectorArray(nameID: number): UnityEngine.Vector4[];
    GetVectorArray(name: string): UnityEngine.Vector4[];
    GetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    GetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    HasProperty(nameID: number): boolean;
    HasProperty(propertyName: string): boolean;
    IsKeywordEnabled(keyword: string): boolean;
    Lerp(start: UnityEngine.Material, end: UnityEngine.Material, t: number): void;
    SetBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
    SetBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
    SetColor(nameID: number, value: UnityEngine.Color): void;
    SetColor(name: string, value: UnityEngine.Color): void;
    SetColorArray(nameID: number, values: UnityEngine.Color[]): void;
    SetColorArray(nameID: number, values: UnityEngine.Color[]): void;
    SetColorArray(name: string, values: UnityEngine.Color[]): void;
    SetColorArray(name: string, values: UnityEngine.Color[]): void;
    SetFloat(nameID: number, value: number): void;
    SetFloat(name: string, value: number): void;
    SetFloatArray(nameID: number, values: number[]): void;
    SetFloatArray(nameID: number, values: number[]): void;
    SetFloatArray(name: string, values: number[]): void;
    SetFloatArray(name: string, values: number[]): void;
    SetInt(nameID: number, value: number): void;
    SetInt(name: string, value: number): void;
    SetMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
    SetMatrix(name: string, value: UnityEngine.Matrix4x4): void;
    SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
    SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
    SetOverrideTag(tag: string, val: string): void;
    SetPass(pass: number): boolean;
    SetShaderPassEnabled(passName: string, enabled: boolean): void;
    SetTexture(nameID: number, value: UnityEngine.Texture): void;
    SetTexture(name: string, value: UnityEngine.Texture): void;
    SetTextureOffset(nameID: number, value: UnityEngine.Vector2): void;
    SetTextureOffset(name: string, value: UnityEngine.Vector2): void;
    SetTextureScale(nameID: number, value: UnityEngine.Vector2): void;
    SetTextureScale(name: string, value: UnityEngine.Vector2): void;
    SetVector(nameID: number, value: UnityEngine.Vector4): void;
    SetVector(name: string, value: UnityEngine.Vector4): void;
    SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
    SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
    color: UnityEngine.Color;
    doubleSidedGI: boolean;
    enableInstancing: boolean;
    globalIlluminationFlags: UnityEngine.MaterialGlobalIlluminationFlags;
    mainTexture: UnityEngine.Texture;
    mainTextureOffset: UnityEngine.Vector2;
    mainTextureScale: UnityEngine.Vector2;
    readonly passCount: number;
    renderQueue: number;
    shader: UnityEngine.Shader;
    shaderKeywords: string[];
  }
}
declare namespace UnityEngine {
  class ShaderVariantCollection extends UnityEngine.Object {
    constructor();
    Add(variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean;
    Clear(): void;
    Contains(variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean;
    Remove(variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean;
    WarmUp(): void;
    readonly isWarmedUp: boolean;
    readonly shaderCount: number;
    readonly variantCount: number;
  }
}
declare namespace UnityEngine.ShaderVariantCollection {
  class ShaderVariant extends System.ValueType {
    protected constructor();
    keywords: string[];
    passType: UnityEngine.Rendering.PassType;
    shader: UnityEngine.Shader;
  }
}
declare namespace UnityEngine {
  class SortingLayer extends System.ValueType {
    protected constructor();
    static GetLayerValueFromID(id: number): number;
    static GetLayerValueFromName(name: string): number;
    static IDToName(id: number): string;
    static IsValid(id: number): boolean;
    static NameToID(name: string): number;
    readonly id: number;
    static readonly layers: UnityEngine.SortingLayer[];
    readonly name: string;
    readonly value: number;
  }
}
declare namespace UnityEngine.Rendering {
  class SphericalHarmonicsL2 extends System.ValueType {
    protected constructor();
    AddAmbientLight(color: UnityEngine.Color): void;
    AddDirectionalLight(direction: UnityEngine.Vector3, color: UnityEngine.Color, intensity: number): void;
    Clear(): void;
    Equals(other: any): boolean;
    Evaluate(directions: UnityEngine.Vector3[], results: UnityEngine.Color[]): void;
    GetHashCode(): number;
    get_Item(rgb: number, coefficient: number): number;
    set_Item(rgb: number, coefficient: number, value: number): void;
  }
}
declare namespace UnityEngine.Rendering {
  class SplashScreen extends System.Object {
    constructor();
    static Begin(): void;
    static Draw(): void;
    static readonly isFinished: boolean;
  }
}
declare namespace UnityEngine {
  class SpriteAlignment extends System.Enum {
    protected constructor();
    static BottomCenter: UnityEngine.SpriteAlignment;
    static BottomLeft: UnityEngine.SpriteAlignment;
    static BottomRight: UnityEngine.SpriteAlignment;
    static Center: UnityEngine.SpriteAlignment;
    static Custom: UnityEngine.SpriteAlignment;
    static LeftCenter: UnityEngine.SpriteAlignment;
    static RightCenter: UnityEngine.SpriteAlignment;
    static TopCenter: UnityEngine.SpriteAlignment;
    static TopLeft: UnityEngine.SpriteAlignment;
    static TopRight: UnityEngine.SpriteAlignment;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpritePackingMode extends System.Enum {
    protected constructor();
    static Rectangle: UnityEngine.SpritePackingMode;
    static Tight: UnityEngine.SpritePackingMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpritePackingRotation extends System.Enum {
    protected constructor();
    static Any: UnityEngine.SpritePackingRotation;
    static None: UnityEngine.SpritePackingRotation;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpriteMeshType extends System.Enum {
    protected constructor();
    static FullRect: UnityEngine.SpriteMeshType;
    static Tight: UnityEngine.SpriteMeshType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpriteDrawMode extends System.Enum {
    protected constructor();
    static Simple: UnityEngine.SpriteDrawMode;
    static Sliced: UnityEngine.SpriteDrawMode;
    static Tiled: UnityEngine.SpriteDrawMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpriteTileMode extends System.Enum {
    protected constructor();
    static Adaptive: UnityEngine.SpriteTileMode;
    static Continuous: UnityEngine.SpriteTileMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpriteMaskInteraction extends System.Enum {
    protected constructor();
    static None: UnityEngine.SpriteMaskInteraction;
    value__: number;
    static VisibleInsideMask: UnityEngine.SpriteMaskInteraction;
    static VisibleOutsideMask: UnityEngine.SpriteMaskInteraction;
  }
}
declare namespace UnityEngine {
  class Sprite extends UnityEngine.Object {
    constructor();
    static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2): UnityEngine.Sprite;
    static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number): UnityEngine.Sprite;
    static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number): UnityEngine.Sprite;
    static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number, meshType: UnityEngine.SpriteMeshType): UnityEngine.Sprite;
    static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number, meshType: UnityEngine.SpriteMeshType, border: UnityEngine.Vector4): UnityEngine.Sprite;
    OverrideGeometry(vertices: UnityEngine.Vector2[], triangles: number[]): void;
    readonly associatedAlphaSplitTexture: UnityEngine.Texture2D;
    readonly border: UnityEngine.Vector4;
    readonly bounds: UnityEngine.Bounds;
    readonly packed: boolean;
    readonly packingMode: UnityEngine.SpritePackingMode;
    readonly packingRotation: UnityEngine.SpritePackingRotation;
    readonly pivot: UnityEngine.Vector2;
    readonly pixelsPerUnit: number;
    readonly rect: UnityEngine.Rect;
    readonly texture: UnityEngine.Texture2D;
    readonly textureRect: UnityEngine.Rect;
    readonly textureRectOffset: UnityEngine.Vector2;
    readonly triangles: number[];
    readonly uv: UnityEngine.Vector2[];
    readonly vertices: UnityEngine.Vector2[];
  }
}
declare namespace UnityEngine {
  class SpriteRenderer extends UnityEngine.Renderer {
    constructor();
    adaptiveModeThreshold: number;
    color: UnityEngine.Color;
    drawMode: UnityEngine.SpriteDrawMode;
    flipX: boolean;
    flipY: boolean;
    maskInteraction: UnityEngine.SpriteMaskInteraction;
    size: UnityEngine.Vector2;
    sprite: UnityEngine.Sprite;
    tileMode: UnityEngine.SpriteTileMode;
  }
}
declare namespace UnityEngine.Sprites {
  class DataUtility extends System.Object {
    constructor();
    static GetInnerUV(sprite: UnityEngine.Sprite): UnityEngine.Vector4;
    static GetMinSize(sprite: UnityEngine.Sprite): UnityEngine.Vector2;
    static GetOuterUV(sprite: UnityEngine.Sprite): UnityEngine.Vector4;
    static GetPadding(sprite: UnityEngine.Sprite): UnityEngine.Vector4;
  }
}
declare namespace UnityEngine {
  class ProceduralProcessorUsage extends System.Enum {
    protected constructor();
    static All: UnityEngine.ProceduralProcessorUsage;
    static Half: UnityEngine.ProceduralProcessorUsage;
    static One: UnityEngine.ProceduralProcessorUsage;
    static Unsupported: UnityEngine.ProceduralProcessorUsage;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ProceduralCacheSize extends System.Enum {
    protected constructor();
    static Heavy: UnityEngine.ProceduralCacheSize;
    static Medium: UnityEngine.ProceduralCacheSize;
    static NoLimit: UnityEngine.ProceduralCacheSize;
    static None: UnityEngine.ProceduralCacheSize;
    static Tiny: UnityEngine.ProceduralCacheSize;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ProceduralLoadingBehavior extends System.Enum {
    protected constructor();
    static BakeAndDiscard: UnityEngine.ProceduralLoadingBehavior;
    static BakeAndKeep: UnityEngine.ProceduralLoadingBehavior;
    static Cache: UnityEngine.ProceduralLoadingBehavior;
    static DoNothing: UnityEngine.ProceduralLoadingBehavior;
    static DoNothingAndCache: UnityEngine.ProceduralLoadingBehavior;
    static Generate: UnityEngine.ProceduralLoadingBehavior;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ProceduralPropertyType extends System.Enum {
    protected constructor();
    static Boolean: UnityEngine.ProceduralPropertyType;
    static Color3: UnityEngine.ProceduralPropertyType;
    static Color4: UnityEngine.ProceduralPropertyType;
    static Enum: UnityEngine.ProceduralPropertyType;
    static Float: UnityEngine.ProceduralPropertyType;
    static String: UnityEngine.ProceduralPropertyType;
    static Texture: UnityEngine.ProceduralPropertyType;
    value__: number;
    static Vector2: UnityEngine.ProceduralPropertyType;
    static Vector3: UnityEngine.ProceduralPropertyType;
    static Vector4: UnityEngine.ProceduralPropertyType;
  }
}
declare namespace UnityEngine {
  class ProceduralOutputType extends System.Enum {
    protected constructor();
    static AmbientOcclusion: UnityEngine.ProceduralOutputType;
    static DetailMask: UnityEngine.ProceduralOutputType;
    static Diffuse: UnityEngine.ProceduralOutputType;
    static Emissive: UnityEngine.ProceduralOutputType;
    static Height: UnityEngine.ProceduralOutputType;
    static Metallic: UnityEngine.ProceduralOutputType;
    static Normal: UnityEngine.ProceduralOutputType;
    static Opacity: UnityEngine.ProceduralOutputType;
    static Roughness: UnityEngine.ProceduralOutputType;
    static Smoothness: UnityEngine.ProceduralOutputType;
    static Specular: UnityEngine.ProceduralOutputType;
    static Unknown: UnityEngine.ProceduralOutputType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ProceduralPropertyDescription extends System.Object {
    constructor();
    componentLabels: string[];
    enumOptions: string[];
    group: string;
    hasRange: boolean;
    label: string;
    maximum: number;
    minimum: number;
    name: string;
    step: number;
    type: UnityEngine.ProceduralPropertyType;
  }
}
declare namespace UnityEngine {
  class ProceduralMaterial extends UnityEngine.Material {
    protected constructor();
    CacheProceduralProperty(inputName: string, value: boolean): void;
    ClearCache(): void;
    FreezeAndReleaseSourceData(): void;
    GetGeneratedTexture(textureName: string): UnityEngine.ProceduralTexture;
    GetGeneratedTextures(): UnityEngine.Texture[];
    GetProceduralBoolean(inputName: string): boolean;
    GetProceduralColor(inputName: string): UnityEngine.Color;
    GetProceduralEnum(inputName: string): number;
    GetProceduralFloat(inputName: string): number;
    GetProceduralPropertyDescriptions(): UnityEngine.ProceduralPropertyDescription[];
    GetProceduralString(inputName: string): string;
    GetProceduralTexture(inputName: string): UnityEngine.Texture2D;
    GetProceduralVector(inputName: string): UnityEngine.Vector4;
    HasProceduralProperty(inputName: string): boolean;
    IsProceduralPropertyCached(inputName: string): boolean;
    IsProceduralPropertyVisible(inputName: string): boolean;
    RebuildTextures(): void;
    RebuildTexturesImmediately(): void;
    SetProceduralBoolean(inputName: string, value: boolean): void;
    SetProceduralColor(inputName: string, value: UnityEngine.Color): void;
    SetProceduralEnum(inputName: string, value: number): void;
    SetProceduralFloat(inputName: string, value: number): void;
    SetProceduralString(inputName: string, value: string): void;
    SetProceduralTexture(inputName: string, value: UnityEngine.Texture2D): void;
    SetProceduralVector(inputName: string, value: UnityEngine.Vector4): void;
    static StopRebuilds(): void;
    animationUpdateRate: number;
    cacheSize: UnityEngine.ProceduralCacheSize;
    readonly isCachedDataAvailable: boolean;
    readonly isFrozen: boolean;
    isLoadTimeGenerated: boolean;
    readonly isProcessing: boolean;
    isReadable: boolean;
    static readonly isSupported: boolean;
    readonly loadingBehavior: UnityEngine.ProceduralLoadingBehavior;
    preset: string;
    static substanceProcessorUsage: UnityEngine.ProceduralProcessorUsage;
  }
}
declare namespace UnityEngine {
  class ProceduralTexture extends UnityEngine.Texture {
    constructor();
    GetPixels32(x: number, y: number, blockWidth: number, blockHeight: number): UnityEngine.Color32[];
    GetProceduralOutputType(): UnityEngine.ProceduralOutputType;
    readonly format: UnityEngine.TextureFormat;
    readonly hasAlpha: boolean;
  }
}
declare namespace UnityEngine {
  class TextAsset extends UnityEngine.Object {
    constructor();
    ToString(): string;
    readonly bytes: number[];
    readonly text: string;
  }
}
declare namespace UnityEngine {
  class Texture2D extends UnityEngine.Texture {
    constructor(width: number, height: number);
    constructor(width: number, height: number, format: UnityEngine.TextureFormat, mipmap: boolean);
    constructor(width: number, height: number, format: UnityEngine.TextureFormat, mipmap: boolean, linear: boolean);
    Apply(): void;
    Apply(updateMipmaps: boolean): void;
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    Compress(highQuality: boolean): void;
    static CreateExternalTexture(width: number, height: number, format: UnityEngine.TextureFormat, mipmap: boolean, linear: boolean, nativeTex: any): UnityEngine.Texture2D;
    static GenerateAtlas(sizes: UnityEngine.Vector2[], padding: number, atlasSize: number, results: UnityEngine.Rect[]): boolean;
    GetPixel(x: number, y: number): UnityEngine.Color;
    GetPixelBilinear(u: number, v: number): UnityEngine.Color;
    GetPixels(): UnityEngine.Color[];
    GetPixels(miplevel: number): UnityEngine.Color[];
    GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): UnityEngine.Color[];
    GetPixels(x: number, y: number, blockWidth: number, blockHeight: number, miplevel: number): UnityEngine.Color[];
    GetPixels32(): UnityEngine.Color32[];
    GetPixels32(miplevel: number): UnityEngine.Color32[];
    GetRawTextureData(): number[];
    LoadRawTextureData(data: number[]): void;
    LoadRawTextureData(data: any, size: number): void;
    PackTextures(textures: UnityEngine.Texture2D[], padding: number): UnityEngine.Rect[];
    PackTextures(textures: UnityEngine.Texture2D[], padding: number, maximumAtlasSize: number): UnityEngine.Rect[];
    PackTextures(textures: UnityEngine.Texture2D[], padding: number, maximumAtlasSize: number, makeNoLongerReadable: boolean): UnityEngine.Rect[];
    ReadPixels(source: UnityEngine.Rect, destX: number, destY: number): void;
    ReadPixels(source: UnityEngine.Rect, destX: number, destY: number, recalculateMipMaps: boolean): void;
    Resize(width: number, height: number): boolean;
    Resize(width: number, height: number, format: UnityEngine.TextureFormat, hasMipMap: boolean): boolean;
    SetPixel(x: number, y: number, color: UnityEngine.Color): void;
    SetPixels(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color[]): void;
    SetPixels(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color[], miplevel: number): void;
    SetPixels(colors: UnityEngine.Color[]): void;
    SetPixels(colors: UnityEngine.Color[], miplevel: number): void;
    SetPixels32(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color32[]): void;
    SetPixels32(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color32[], miplevel: number): void;
    SetPixels32(colors: UnityEngine.Color32[]): void;
    SetPixels32(colors: UnityEngine.Color32[], miplevel: number): void;
    UpdateExternalTexture(nativeTex: any): void;
    alphaIsTransparency: boolean;
    static readonly blackTexture: UnityEngine.Texture2D;
    readonly format: UnityEngine.TextureFormat;
    readonly mipmapCount: number;
    static readonly whiteTexture: UnityEngine.Texture2D;
  }
}
declare namespace UnityEngine.Texture2D {
  class EXRFlags extends System.Enum {
    protected constructor();
    static CompressPIZ: UnityEngine.Texture2D.EXRFlags;
    static CompressRLE: UnityEngine.Texture2D.EXRFlags;
    static CompressZIP: UnityEngine.Texture2D.EXRFlags;
    static None: UnityEngine.Texture2D.EXRFlags;
    static OutputAsFloat: UnityEngine.Texture2D.EXRFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Cubemap extends UnityEngine.Texture {
    constructor(size: number, format: UnityEngine.TextureFormat, mipmap: boolean);
    Apply(): void;
    Apply(updateMipmaps: boolean): void;
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    static CreateExternalTexture(size: number, format: UnityEngine.TextureFormat, mipmap: boolean, nativeTex: any): UnityEngine.Cubemap;
    GetPixel(face: UnityEngine.CubemapFace, x: number, y: number): UnityEngine.Color;
    GetPixels(face: UnityEngine.CubemapFace): UnityEngine.Color[];
    GetPixels(face: UnityEngine.CubemapFace, miplevel: number): UnityEngine.Color[];
    SetPixel(face: UnityEngine.CubemapFace, x: number, y: number, color: UnityEngine.Color): void;
    SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace): void;
    SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, miplevel: number): void;
    SmoothEdges(): void;
    SmoothEdges(smoothRegionWidthInPixels: number): void;
    readonly format: UnityEngine.TextureFormat;
    readonly mipmapCount: number;
  }
}
declare namespace UnityEngine {
  class Texture3D extends UnityEngine.Texture {
    constructor(width: number, height: number, depth: number, format: UnityEngine.TextureFormat, mipmap: boolean);
    Apply(): void;
    Apply(updateMipmaps: boolean): void;
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    GetPixels(): UnityEngine.Color[];
    GetPixels(miplevel: number): UnityEngine.Color[];
    GetPixels32(): UnityEngine.Color32[];
    GetPixels32(miplevel: number): UnityEngine.Color32[];
    SetPixels(colors: UnityEngine.Color[]): void;
    SetPixels(colors: UnityEngine.Color[], miplevel: number): void;
    SetPixels32(colors: UnityEngine.Color32[]): void;
    SetPixels32(colors: UnityEngine.Color32[], miplevel: number): void;
    readonly depth: number;
    readonly format: UnityEngine.TextureFormat;
  }
}
declare namespace UnityEngine {
  class Texture2DArray extends UnityEngine.Texture {
    constructor(width: number, height: number, depth: number, format: UnityEngine.TextureFormat, mipmap: boolean);
    constructor(width: number, height: number, depth: number, format: UnityEngine.TextureFormat, mipmap: boolean, linear: boolean);
    Apply(): void;
    Apply(updateMipmaps: boolean): void;
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    GetPixels(arrayElement: number): UnityEngine.Color[];
    GetPixels(arrayElement: number, miplevel: number): UnityEngine.Color[];
    GetPixels32(arrayElement: number): UnityEngine.Color32[];
    GetPixels32(arrayElement: number, miplevel: number): UnityEngine.Color32[];
    SetPixels(colors: UnityEngine.Color[], arrayElement: number): void;
    SetPixels(colors: UnityEngine.Color[], arrayElement: number, miplevel: number): void;
    SetPixels32(colors: UnityEngine.Color32[], arrayElement: number): void;
    SetPixels32(colors: UnityEngine.Color32[], arrayElement: number, miplevel: number): void;
    readonly depth: number;
    readonly format: UnityEngine.TextureFormat;
  }
}
declare namespace UnityEngine {
  class CubemapArray extends UnityEngine.Texture {
    constructor(faceSize: number, cubemapCount: number, format: UnityEngine.TextureFormat, mipmap: boolean);
    constructor(faceSize: number, cubemapCount: number, format: UnityEngine.TextureFormat, mipmap: boolean, linear: boolean);
    Apply(): void;
    Apply(updateMipmaps: boolean): void;
    Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
    GetPixels(face: UnityEngine.CubemapFace, arrayElement: number): UnityEngine.Color[];
    GetPixels(face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): UnityEngine.Color[];
    GetPixels32(face: UnityEngine.CubemapFace, arrayElement: number): UnityEngine.Color32[];
    GetPixels32(face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): UnityEngine.Color32[];
    SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, arrayElement: number): void;
    SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): void;
    SetPixels32(colors: UnityEngine.Color32[], face: UnityEngine.CubemapFace, arrayElement: number): void;
    SetPixels32(colors: UnityEngine.Color32[], face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): void;
    readonly cubemapCount: number;
    readonly format: UnityEngine.TextureFormat;
  }
}
declare namespace UnityEngine {
  class SparseTexture extends UnityEngine.Texture {
    constructor(width: number, height: number, format: UnityEngine.TextureFormat, mipCount: number);
    constructor(width: number, height: number, format: UnityEngine.TextureFormat, mipCount: number, linear: boolean);
    UnloadTile(tileX: number, tileY: number, miplevel: number): void;
    UpdateTile(tileX: number, tileY: number, miplevel: number, data: UnityEngine.Color32[]): void;
    UpdateTileRaw(tileX: number, tileY: number, miplevel: number, data: number[]): void;
    readonly isCreated: boolean;
    readonly tileHeight: number;
    readonly tileWidth: number;
  }
}
declare namespace UnityEngine {
  class RenderTexture extends UnityEngine.Texture {
    constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite);
    constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat);
    constructor(width: number, height: number, depth: number);
    constructor(desc: UnityEngine.RenderTextureDescriptor);
    constructor(textureToCopy: UnityEngine.RenderTexture);
    Create(): boolean;
    DiscardContents(): void;
    DiscardContents(discardColor: boolean, discardDepth: boolean): void;
    GenerateMips(): void;
    GetNativeDepthBufferPtr(): any;
    static GetTemporary(width: number, height: number): UnityEngine.RenderTexture;
    static GetTemporary(width: number, height: number, depthBuffer: number): UnityEngine.RenderTexture;
    static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat): UnityEngine.RenderTexture;
    static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite): UnityEngine.RenderTexture;
    static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number): UnityEngine.RenderTexture;
    static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless): UnityEngine.RenderTexture;
    static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage): UnityEngine.RenderTexture;
    static GetTemporary(desc: UnityEngine.RenderTextureDescriptor): UnityEngine.RenderTexture;
    GetTexelOffset(): UnityEngine.Vector2;
    IsCreated(): boolean;
    MarkRestoreExpected(): void;
    Release(): void;
    static ReleaseTemporary(temp: UnityEngine.RenderTexture): void;
    SetBorderColor(color: UnityEngine.Color): void;
    SetGlobalShaderProperty(propertyName: string): void;
    static SupportsStencil(rt: UnityEngine.RenderTexture): boolean;
    static active: UnityEngine.RenderTexture;
    antiAliasing: number;
    autoGenerateMips: boolean;
    readonly colorBuffer: UnityEngine.RenderBuffer;
    depth: number;
    readonly depthBuffer: UnityEngine.RenderBuffer;
    descriptor: UnityEngine.RenderTextureDescriptor;
    dimension: UnityEngine.Rendering.TextureDimension;
    static enabled: boolean;
    enableRandomWrite: boolean;
    format: UnityEngine.RenderTextureFormat;
    generateMips: boolean;
    height: number;
    isCubemap: boolean;
    isPowerOfTwo: boolean;
    isVolume: boolean;
    memorylessMode: UnityEngine.RenderTextureMemoryless;
    readonly sRGB: boolean;
    useMipMap: boolean;
    volumeDepth: number;
    vrUsage: UnityEngine.VRTextureUsage;
    width: number;
  }
}
declare namespace UnityEngine {
  class CustomRenderTextureUpdateZone extends System.ValueType {
    protected constructor();
    needSwap: boolean;
    passIndex: number;
    rotation: number;
    updateZoneCenter: UnityEngine.Vector3;
    updateZoneSize: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class CustomRenderTexture extends UnityEngine.RenderTexture {
    constructor(width: number, height: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite);
    constructor(width: number, height: number, format: UnityEngine.RenderTextureFormat);
    constructor(width: number, height: number);
    ClearUpdateZones(): void;
    GetUpdateZones(updateZones: UnityEngine.CustomRenderTextureUpdateZone[]): void;
    Initialize(): void;
    SetUpdateZones(updateZones: UnityEngine.CustomRenderTextureUpdateZone[]): void;
    Update(): void;
    Update(count: number): void;
    cubemapFaceMask: number;
    doubleBuffered: boolean;
    initializationColor: UnityEngine.Color;
    initializationMaterial: UnityEngine.Material;
    initializationMode: UnityEngine.CustomRenderTextureUpdateMode;
    initializationSource: UnityEngine.CustomRenderTextureInitializationSource;
    initializationTexture: UnityEngine.Texture;
    material: UnityEngine.Material;
    shaderPass: number;
    updateMode: UnityEngine.CustomRenderTextureUpdateMode;
    updateZoneSpace: UnityEngine.CustomRenderTextureUpdateZoneSpace;
    wrapUpdateZones: boolean;
  }
}
declare namespace UnityEngine {
  class Time extends System.Object {
    constructor();
    static captureFramerate: number;
    static readonly deltaTime: number;
    static fixedDeltaTime: number;
    static readonly fixedTime: number;
    static readonly fixedUnscaledDeltaTime: number;
    static readonly fixedUnscaledTime: number;
    static readonly frameCount: number;
    static readonly inFixedTimeStep: boolean;
    static maximumDeltaTime: number;
    static maximumParticleDeltaTime: number;
    static readonly realtimeSinceStartup: number;
    static readonly renderedFrameCount: number;
    static readonly smoothDeltaTime: number;
    static readonly time: number;
    static timeScale: number;
    static readonly timeSinceLevelLoad: number;
    static readonly unscaledDeltaTime: number;
    static readonly unscaledTime: number;
  }
}
declare namespace UnityEngine {
  class HideFlags extends System.Enum {
    protected constructor();
    static DontSave: UnityEngine.HideFlags;
    static DontSaveInBuild: UnityEngine.HideFlags;
    static DontSaveInEditor: UnityEngine.HideFlags;
    static DontUnloadUnusedAsset: UnityEngine.HideFlags;
    static HideAndDontSave: UnityEngine.HideFlags;
    static HideInHierarchy: UnityEngine.HideFlags;
    static HideInInspector: UnityEngine.HideFlags;
    static None: UnityEngine.HideFlags;
    static NotEditable: UnityEngine.HideFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Hash128 extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    static Parse(hashString: string): UnityEngine.Hash128;
    ToString(): string;
    readonly isValid: boolean;
  }
}
declare namespace UnityEngine {
  class AudioType extends System.Enum {
    protected constructor();
    static ACC: UnityEngine.AudioType;
    static AIFF: UnityEngine.AudioType;
    static AUDIOQUEUE: UnityEngine.AudioType;
    static IT: UnityEngine.AudioType;
    static MOD: UnityEngine.AudioType;
    static MPEG: UnityEngine.AudioType;
    static OGGVORBIS: UnityEngine.AudioType;
    static S3M: UnityEngine.AudioType;
    static UNKNOWN: UnityEngine.AudioType;
    static VAG: UnityEngine.AudioType;
    value__: number;
    static WAV: UnityEngine.AudioType;
    static XM: UnityEngine.AudioType;
    static XMA: UnityEngine.AudioType;
  }
}
declare namespace UnityEngine {
  class UnityLogWriter extends System.IO.TextWriter {
    constructor();
    static Init(): void;
    Write(value: boolean): void;
    Write(value: any): void;
    Write(buffer: any[]): void;
    Write(buffer: any[], index: number, count: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: any): void;
    Write(s: string): void;
    Write(format: string, arg0: any): void;
    Write(format: string, arg0: any, arg1: any): void;
    Write(format: string, arg0: any, arg1: any, arg2: any): void;
    Write(format: string, arg: any[]): void;
    Write(value: number): void;
    Write(value: number): void;
    static WriteStringToUnityLog(s: string): void;
    readonly Encoding: any;
  }
}
declare namespace System.IO {
  class TextWriter extends System.MarshalByRefObject {
    protected constructor();
    Close(): void;
    Dispose(): void;
    Flush(): void;
    FlushAsync(): any;
    static Synchronized(writer: System.IO.TextWriter): System.IO.TextWriter;
    Write(value: boolean): void;
    Write(value: any): void;
    Write(buffer: any[]): void;
    Write(buffer: any[], index: number, count: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: any): void;
    Write(value: string): void;
    Write(format: string, arg0: any): void;
    Write(format: string, arg0: any, arg1: any): void;
    Write(format: string, arg0: any, arg1: any, arg2: any): void;
    Write(format: string, arg: any[]): void;
    Write(value: number): void;
    Write(value: number): void;
    WriteAsync(value: any): any;
    WriteAsync(buffer: any[]): any;
    WriteAsync(buffer: any[], index: number, count: number): any;
    WriteAsync(value: string): any;
    WriteLine(): void;
    WriteLine(value: boolean): void;
    WriteLine(value: any): void;
    WriteLine(buffer: any[]): void;
    WriteLine(buffer: any[], index: number, count: number): void;
    WriteLine(value: number): void;
    WriteLine(value: number): void;
    WriteLine(value: number): void;
    WriteLine(value: number): void;
    WriteLine(value: number): void;
    WriteLine(value: any): void;
    WriteLine(value: string): void;
    WriteLine(format: string, arg0: any): void;
    WriteLine(format: string, arg0: any, arg1: any): void;
    WriteLine(format: string, arg0: any, arg1: any, arg2: any): void;
    WriteLine(format: string, arg: any[]): void;
    WriteLine(value: number): void;
    WriteLine(value: number): void;
    WriteLineAsync(): any;
    WriteLineAsync(value: any): any;
    WriteLineAsync(buffer: any[]): any;
    WriteLineAsync(buffer: any[], index: number, count: number): any;
    WriteLineAsync(value: string): any;
    readonly Encoding: any;
    readonly FormatProvider: any;
    NewLine: string;
    static Null: System.IO.TextWriter;
  }
}
declare namespace System {
  class MarshalByRefObject extends System.Object {
    protected constructor();
    CreateObjRef(requestedType: any): any;
    GetLifetimeService(): any;
    InitializeLifetimeService(): any;
  }
}
declare namespace UnityEngine {
  class UnityEventQueueSystem extends System.Object {
    constructor();
    static GenerateEventIdForPayload(eventPayloadName: string): string;
    static GetGlobalEventQueue(): any;
  }
}
declare namespace UnityEngine.Playables {
  class PlayState extends System.Enum {
    protected constructor();
    static Paused: UnityEngine.Playables.PlayState;
    static Playing: UnityEngine.Playables.PlayState;
    value__: number;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableHandle extends System.ValueType {
    protected constructor();
    Equals(p: any): boolean;
    GetHashCode(): number;
    static readonly Null: UnityEngine.Playables.PlayableHandle;
  }
}
declare namespace UnityEngine.Playables {
  class Playable extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, inputCount?: number): UnityEngine.Playables.Playable;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Playables.Playable): boolean;
    GetHandle(): UnityEngine.Playables.PlayableHandle;
    GetPlayableType(): any;
    static readonly Null: UnityEngine.Playables.Playable;
  }
}
declare namespace UnityEngine.Playables {
  class DirectorUpdateMode extends System.Enum {
    protected constructor();
    static DSPClock: UnityEngine.Playables.DirectorUpdateMode;
    static GameTime: UnityEngine.Playables.DirectorUpdateMode;
    static Manual: UnityEngine.Playables.DirectorUpdateMode;
    static UnscaledGameTime: UnityEngine.Playables.DirectorUpdateMode;
    value__: number;
  }
}
declare namespace UnityEngine.Playables {
  class DataStreamType extends System.Enum {
    protected constructor();
    static Animation: UnityEngine.Playables.DataStreamType;
    static Audio: UnityEngine.Playables.DataStreamType;
    static None: UnityEngine.Playables.DataStreamType;
    value__: number;
    static Video: UnityEngine.Playables.DataStreamType;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableGraph extends System.ValueType {
    protected constructor();
    static Create(): UnityEngine.Playables.PlayableGraph;
    Destroy(): void;
    Evaluate(): void;
    Evaluate(deltaTime: number): void;
    GetOutput(index: number): UnityEngine.Playables.PlayableOutput;
    GetOutputCount(): number;
    GetPlayableCount(): number;
    GetResolver(): UnityEngine.IExposedPropertyTable;
    GetRootPlayable(index: number): UnityEngine.Playables.Playable;
    GetRootPlayableCount(): number;
    GetTimeUpdateMode(): UnityEngine.Playables.DirectorUpdateMode;
    IsDone(): boolean;
    IsPlaying(): boolean;
    IsValid(): boolean;
    Play(): void;
    SetResolver(value: UnityEngine.IExposedPropertyTable): void;
    SetTimeUpdateMode(value: UnityEngine.Playables.DirectorUpdateMode): void;
    Stop(): void;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableOutputHandle extends System.ValueType {
    protected constructor();
    Equals(p: any): boolean;
    GetHashCode(): number;
    static readonly Null: UnityEngine.Playables.PlayableOutputHandle;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableOutput extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Playables.PlayableOutput): boolean;
    GetHandle(): UnityEngine.Playables.PlayableOutputHandle;
    GetPlayableOutputType(): any;
    static readonly Null: UnityEngine.Playables.PlayableOutput;
  }
}
declare namespace UnityEngine {
  class DynamicGI extends System.Object {
    constructor();
    static SetEmissive(renderer: UnityEngine.Renderer, color: UnityEngine.Color): void;
    static SetEnvironmentData(input: number[]): void;
    static UpdateEnvironment(): void;
    static UpdateMaterials(renderer: UnityEngine.Object): void;
    static UpdateMaterials(renderer: UnityEngine.Object, x: number, y: number, width: number, height: number): void;
    static UpdateMaterials(renderer: UnityEngine.Renderer): void;
    static indirectScale: number;
    static readonly isConverged: boolean;
    static synchronousMode: boolean;
    static updateThreshold: number;
  }
}
declare namespace UnityEngineInternal {
  class LightmapType extends System.Enum {
    protected constructor();
    static DynamicLightmap: UnityEngineInternal.LightmapType;
    static NoLightmap: UnityEngineInternal.LightmapType;
    static StaticLightmap: UnityEngineInternal.LightmapType;
    value__: number;
  }
}
declare namespace UnityEngineInternal {
  class GITextureType extends System.Enum {
    protected constructor();
    static Albedo: UnityEngineInternal.GITextureType;
    static Baked: UnityEngineInternal.GITextureType;
    static BakedAlbedo: UnityEngineInternal.GITextureType;
    static BakedCharting: UnityEngineInternal.GITextureType;
    static BakedDirectional: UnityEngineInternal.GITextureType;
    static BakedEmissive: UnityEngineInternal.GITextureType;
    static BakedShadowMask: UnityEngineInternal.GITextureType;
    static BakedTexelValidity: UnityEngineInternal.GITextureType;
    static Charting: UnityEngineInternal.GITextureType;
    static Directionality: UnityEngineInternal.GITextureType;
    static Emissive: UnityEngineInternal.GITextureType;
    static InputWorkspace: UnityEngineInternal.GITextureType;
    static Irradiance: UnityEngineInternal.GITextureType;
    value__: number;
  }
}
declare namespace UnityEngineInternal {
  class GIDebugVisualisation extends System.Object {
    constructor();
    static CycleSkipInstances(skip: number): void;
    static CycleSkipSystems(skip: number): void;
    static PauseCycleMode(): void;
    static PlayCycleMode(): void;
    static ResetRuntimeInputTextures(): void;
    static StopCycleMode(): void;
    static readonly cycleMode: boolean;
    static readonly pauseCycleMode: boolean;
    static texType: UnityEngineInternal.GITextureType;
  }
}
declare namespace UnityEngine.iOS {
  class CalendarIdentifier extends System.Enum {
    protected constructor();
    static BuddhistCalendar: UnityEngine.iOS.CalendarIdentifier;
    static ChineseCalendar: UnityEngine.iOS.CalendarIdentifier;
    static GregorianCalendar: UnityEngine.iOS.CalendarIdentifier;
    static HebrewCalendar: UnityEngine.iOS.CalendarIdentifier;
    static IndianCalendar: UnityEngine.iOS.CalendarIdentifier;
    static IslamicCalendar: UnityEngine.iOS.CalendarIdentifier;
    static IslamicCivilCalendar: UnityEngine.iOS.CalendarIdentifier;
    static ISO8601Calendar: UnityEngine.iOS.CalendarIdentifier;
    static JapaneseCalendar: UnityEngine.iOS.CalendarIdentifier;
    static PersianCalendar: UnityEngine.iOS.CalendarIdentifier;
    static RepublicOfChinaCalendar: UnityEngine.iOS.CalendarIdentifier;
    value__: number;
  }
}
declare namespace UnityEngine.iOS {
  class CalendarUnit extends System.Enum {
    protected constructor();
    static Day: UnityEngine.iOS.CalendarUnit;
    static Era: UnityEngine.iOS.CalendarUnit;
    static Hour: UnityEngine.iOS.CalendarUnit;
    static Minute: UnityEngine.iOS.CalendarUnit;
    static Month: UnityEngine.iOS.CalendarUnit;
    static Quarter: UnityEngine.iOS.CalendarUnit;
    static Second: UnityEngine.iOS.CalendarUnit;
    value__: number;
    static Week: UnityEngine.iOS.CalendarUnit;
    static Weekday: UnityEngine.iOS.CalendarUnit;
    static WeekdayOrdinal: UnityEngine.iOS.CalendarUnit;
    static Year: UnityEngine.iOS.CalendarUnit;
  }
}
declare namespace UnityEngine.iOS {
  class LocalNotification extends System.Object {
    constructor();
    alertAction: string;
    alertBody: string;
    alertLaunchImage: string;
    applicationIconBadgeNumber: number;
    static readonly defaultSoundName: string;
    fireDate: any;
    hasAction: boolean;
    repeatCalendar: UnityEngine.iOS.CalendarIdentifier;
    repeatInterval: UnityEngine.iOS.CalendarUnit;
    soundName: string;
    timeZone: string;
    userInfo: any;
  }
}
declare namespace UnityEngine.iOS {
  class RemoteNotification extends System.Object {
    protected constructor();
    readonly alertBody: string;
    readonly applicationIconBadgeNumber: number;
    readonly hasAction: boolean;
    readonly soundName: string;
    readonly userInfo: any;
  }
}
declare namespace UnityEngine.iOS {
  class NotificationType extends System.Enum {
    protected constructor();
    static Alert: UnityEngine.iOS.NotificationType;
    static Badge: UnityEngine.iOS.NotificationType;
    static None: UnityEngine.iOS.NotificationType;
    static Sound: UnityEngine.iOS.NotificationType;
    value__: number;
  }
}
declare namespace UnityEngine.iOS {
  class NotificationServices extends System.Object {
    constructor();
    static CancelAllLocalNotifications(): void;
    static CancelLocalNotification(notification: UnityEngine.iOS.LocalNotification): void;
    static ClearLocalNotifications(): void;
    static ClearRemoteNotifications(): void;
    static GetLocalNotification(index: number): UnityEngine.iOS.LocalNotification;
    static GetRemoteNotification(index: number): UnityEngine.iOS.RemoteNotification;
    static PresentLocalNotificationNow(notification: UnityEngine.iOS.LocalNotification): void;
    static RegisterForNotifications(notificationTypes: UnityEngine.iOS.NotificationType): void;
    static RegisterForNotifications(notificationTypes: UnityEngine.iOS.NotificationType, registerForRemote: boolean): void;
    static ScheduleLocalNotification(notification: UnityEngine.iOS.LocalNotification): void;
    static UnregisterForRemoteNotifications(): void;
    static readonly deviceToken: number[];
    static readonly enabledNotificationTypes: UnityEngine.iOS.NotificationType;
    static readonly localNotificationCount: number;
    static readonly localNotifications: UnityEngine.iOS.LocalNotification[];
    static readonly registrationError: string;
    static readonly remoteNotificationCount: number;
    static readonly remoteNotifications: UnityEngine.iOS.RemoteNotification[];
    static readonly scheduledLocalNotifications: UnityEngine.iOS.LocalNotification[];
  }
}
declare namespace UnityEngine.Apple.ReplayKit {
  class ReplayKit extends System.Object {
    protected constructor();
    static Discard(): boolean;
    static HideCameraPreview(): void;
    static Preview(): boolean;
    static ShowCameraPreviewAt(posX: number, posY: number): boolean;
    static StartBroadcasting(callback: ((hasStarted: boolean, errorMessage: string) => void)): void;
    static StartBroadcasting(callback: ((hasStarted: boolean, errorMessage: string) => void), enableMicrophone: boolean): void;
    static StartBroadcasting(callback: ((hasStarted: boolean, errorMessage: string) => void), enableMicrophone: boolean, enableCamera: boolean): void;
    static StartRecording(enableMicrophone?: boolean, enableCamera?: boolean): boolean;
    static StopBroadcasting(): void;
    static StopRecording(): boolean;
    static readonly APIAvailable: boolean;
    static readonly broadcastingAPIAvailable: boolean;
    static readonly broadcastURL: string;
    static cameraEnabled: boolean;
    static readonly isBroadcasting: boolean;
    static readonly isRecording: boolean;
    static readonly lastError: string;
    static microphoneEnabled: boolean;
    static readonly recordingAvailable: boolean;
  }
}
declare namespace UnityEngine.iOS {
  class OnDemandResourcesRequest extends UnityEngine.AsyncOperation {
    protected constructor();
    Dispose(): void;
    GetResourcePath(resourceName: string): string;
    readonly error: string;
    loadingPriority: number;
  }
}
declare namespace UnityEngine.iOS {
  class OnDemandResources extends System.Object {
    protected constructor();
    static PreloadAsync(tags: string[]): UnityEngine.iOS.OnDemandResourcesRequest;
    static readonly enabled: boolean;
  }
}
declare namespace UnityEngine {
  class SamsungTV extends System.Object {
    constructor();
    static SetSystemLanguage(language: UnityEngine.SystemLanguage): void;
    static readonly airMouseConnected: boolean;
    static gamePadMode: UnityEngine.SamsungTV.GamePadMode;
    static gestureMode: UnityEngine.SamsungTV.GestureMode;
    static readonly gestureWorking: boolean;
    static touchPadMode: UnityEngine.SamsungTV.TouchPadMode;
  }
}
declare namespace UnityEngine.SamsungTV {
  class TouchPadMode extends System.Enum {
    protected constructor();
    static Dpad: UnityEngine.SamsungTV.TouchPadMode;
    static Joystick: UnityEngine.SamsungTV.TouchPadMode;
    static Mouse: UnityEngine.SamsungTV.TouchPadMode;
    value__: number;
  }
}
declare namespace UnityEngine.SamsungTV {
  class GestureMode extends System.Enum {
    protected constructor();
    static Joystick: UnityEngine.SamsungTV.GestureMode;
    static Mouse: UnityEngine.SamsungTV.GestureMode;
    static Off: UnityEngine.SamsungTV.GestureMode;
    value__: number;
  }
}
declare namespace UnityEngine.SamsungTV {
  class GamePadMode extends System.Enum {
    protected constructor();
    static Default: UnityEngine.SamsungTV.GamePadMode;
    static Mouse: UnityEngine.SamsungTV.GamePadMode;
    value__: number;
  }
}
declare namespace UnityEngine.SamsungTV {
  class OpenAPI extends System.Object {
    constructor();
    static readonly dUid: string;
    static readonly serverType: UnityEngine.SamsungTV.OpenAPI.OpenAPIServerType;
    static readonly timeOnTV: string;
    static readonly uid: string;
  }
}
declare namespace UnityEngine.SamsungTV.OpenAPI {
  class OpenAPIServerType extends System.Enum {
    protected constructor();
    static Developing: UnityEngine.SamsungTV.OpenAPI.OpenAPIServerType;
    static Development: UnityEngine.SamsungTV.OpenAPI.OpenAPIServerType;
    static Invalid: UnityEngine.SamsungTV.OpenAPI.OpenAPIServerType;
    static Operating: UnityEngine.SamsungTV.OpenAPI.OpenAPIServerType;
    value__: number;
  }
}
declare namespace UnityEngine.SceneManagement {
  class Scene extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetRootGameObjects(): UnityEngine.GameObject[];
    GetRootGameObjects(rootGameObjects: UnityEngine.GameObject[]): void;
    IsValid(): boolean;
    readonly buildIndex: number;
    readonly isDirty: boolean;
    readonly isLoaded: boolean;
    readonly name: string;
    readonly path: string;
    readonly rootCount: number;
  }
}
declare namespace UnityEngine.SceneManagement.Scene {
  class LoadingState extends System.Enum {
    protected constructor();
    static Loaded: UnityEngine.SceneManagement.Scene.LoadingState;
    static Loading: UnityEngine.SceneManagement.Scene.LoadingState;
    static NotLoaded: UnityEngine.SceneManagement.Scene.LoadingState;
    value__: number;
  }
}
declare namespace UnityEngine.SceneManagement {
  class LoadSceneMode extends System.Enum {
    protected constructor();
    static Additive: UnityEngine.SceneManagement.LoadSceneMode;
    static Single: UnityEngine.SceneManagement.LoadSceneMode;
    value__: number;
  }
}
declare namespace UnityEngine.SceneManagement {
  class SceneManager extends System.Object {
    constructor();
    static CreateScene(sceneName: string): UnityEngine.SceneManagement.Scene;
    static GetActiveScene(): UnityEngine.SceneManagement.Scene;
    static GetAllScenes(): UnityEngine.SceneManagement.Scene[];
    static GetSceneAt(index: number): UnityEngine.SceneManagement.Scene;
    static GetSceneByBuildIndex(buildIndex: number): UnityEngine.SceneManagement.Scene;
    static GetSceneByName(name: string): UnityEngine.SceneManagement.Scene;
    static GetSceneByPath(scenePath: string): UnityEngine.SceneManagement.Scene;
    static LoadScene(sceneBuildIndex: number): void;
    static LoadScene(sceneBuildIndex: number, mode: UnityEngine.SceneManagement.LoadSceneMode): void;
    static LoadScene(sceneName: string): void;
    static LoadScene(sceneName: string, mode: UnityEngine.SceneManagement.LoadSceneMode): void;
    static LoadSceneAsync(sceneBuildIndex: number): UnityEngine.AsyncOperation;
    static LoadSceneAsync(sceneBuildIndex: number, mode: UnityEngine.SceneManagement.LoadSceneMode): UnityEngine.AsyncOperation;
    static LoadSceneAsync(sceneName: string): UnityEngine.AsyncOperation;
    static LoadSceneAsync(sceneName: string, mode: UnityEngine.SceneManagement.LoadSceneMode): UnityEngine.AsyncOperation;
    static MergeScenes(sourceScene: UnityEngine.SceneManagement.Scene, destinationScene: UnityEngine.SceneManagement.Scene): void;
    static MoveGameObjectToScene(go: UnityEngine.GameObject, scene: UnityEngine.SceneManagement.Scene): void;
    static SetActiveScene(scene: UnityEngine.SceneManagement.Scene): boolean;
    static UnloadScene(sceneBuildIndex: number): boolean;
    static UnloadScene(sceneName: string): boolean;
    static UnloadScene(scene: UnityEngine.SceneManagement.Scene): boolean;
    static UnloadSceneAsync(sceneBuildIndex: number): UnityEngine.AsyncOperation;
    static UnloadSceneAsync(sceneName: string): UnityEngine.AsyncOperation;
    static UnloadSceneAsync(scene: UnityEngine.SceneManagement.Scene): UnityEngine.AsyncOperation;
    static readonly sceneCount: number;
    static readonly sceneCountInBuildSettings: number;
  }
}
declare namespace UnityEngine.SceneManagement {
  class SceneUtility extends System.Object {
    protected constructor();
    static GetBuildIndexByScenePath(scenePath: string): number;
    static GetScenePathByBuildIndex(buildIndex: number): string;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class ShaderPassName extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class DrawRendererSettings extends System.ValueType {
    protected constructor();
    flags: UnityEngine.Experimental.Rendering.DrawRendererFlags;
    inputFilter: UnityEngine.Experimental.Rendering.InputFilter;
    rendererConfiguration: UnityEngine.Experimental.Rendering.RendererConfiguration;
    shaderPassName: UnityEngine.Experimental.Rendering.ShaderPassName;
    sorting: UnityEngine.Experimental.Rendering.DrawRendererSortSettings;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class ScriptableRenderContext extends System.ValueType {
    protected constructor();
    static BeginRenderPassInternal(_self: any, w: number, h: number, samples: number, colors: UnityEngine.Experimental.Rendering.RenderPassAttachment[], depth: UnityEngine.Experimental.Rendering.RenderPassAttachment): void;
    static BeginSubPassInternal(_self: any, colors: UnityEngine.Experimental.Rendering.RenderPassAttachment[], inputs: UnityEngine.Experimental.Rendering.RenderPassAttachment[], readOnlyDepth: boolean): void;
    DrawRenderers(settings: any): void;
    DrawRenderers(settings: any, stateMap: UnityEngine.Experimental.Rendering.RenderStateMapping[]): void;
    DrawRenderers(settings: any, stateBlock: UnityEngine.Experimental.Rendering.RenderStateBlock): void;
    DrawShadows(settings: any): void;
    DrawSkybox(camera: UnityEngine.Camera): void;
    static EndRenderPassInternal(_self: any): void;
    ExecuteCommandBuffer(commandBuffer: UnityEngine.Rendering.CommandBuffer): void;
    SetupCameraProperties(camera: UnityEngine.Camera): void;
    Submit(): void;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class VisibleLight extends System.ValueType {
    protected constructor();
    readonly light: UnityEngine.Light;
    finalColor: UnityEngine.Color;
    flags: UnityEngine.Experimental.Rendering.VisibleLightFlags;
    lightType: UnityEngine.LightType;
    localToWorld: UnityEngine.Matrix4x4;
    range: number;
    screenRect: UnityEngine.Rect;
    spotAngle: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class VisibleReflectionProbe extends System.ValueType {
    protected constructor();
    readonly probe: UnityEngine.ReflectionProbe;
    readonly texture: UnityEngine.Texture;
    blendDistance: number;
    bounds: UnityEngine.Bounds;
    boxProjection: number;
    center: UnityEngine.Vector3;
    hdr: UnityEngine.Vector4;
    importance: number;
    localToWorld: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class CullResults extends System.ValueType {
    protected constructor();
    ComputeDirectionalShadowMatricesAndCullingPrimitives(activeLightIndex: number, splitIndex: number, splitCount: number, splitRatio: UnityEngine.Vector3, shadowResolution: number, shadowNearPlaneOffset: number, viewMatrix: any, projMatrix: any, shadowSplitData: any): boolean;
    ComputePointShadowMatricesAndCullingPrimitives(activeLightIndex: number, cubemapFace: UnityEngine.CubemapFace, fovBias: number, viewMatrix: any, projMatrix: any, shadowSplitData: any): boolean;
    ComputeSpotShadowMatricesAndCullingPrimitives(activeLightIndex: number, viewMatrix: any, projMatrix: any, shadowSplitData: any): boolean;
    static Cull(camera: UnityEngine.Camera, renderLoop: UnityEngine.Experimental.Rendering.ScriptableRenderContext, results: any): boolean;
    static Cull(parameters: any, renderLoop: UnityEngine.Experimental.Rendering.ScriptableRenderContext): UnityEngine.Experimental.Rendering.CullResults;
    FillLightIndices(computeBuffer: UnityEngine.ComputeBuffer): void;
    static GetCullingParameters(camera: UnityEngine.Camera, cullingParameters: any): boolean;
    GetLightIndicesCount(): number;
    GetShadowCasterBounds(lightIndex: number, outBounds: any): boolean;
    visibleLights: UnityEngine.Experimental.Rendering.VisibleLight[];
    visibleOffscreenVertexLights: UnityEngine.Experimental.Rendering.VisibleLight[];
    visibleReflectionProbes: UnityEngine.Experimental.Rendering.VisibleReflectionProbe[];
  }
}
declare namespace UnityEngine.Tizen {
  class Window extends System.Object {
    constructor();
    static readonly evasGL: any;
    static readonly windowHandle: any;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class PhraseRecognitionSystem extends System.Object {
    protected constructor();
    static Restart(): void;
    static Shutdown(): void;
    static readonly isSupported: boolean;
    static readonly Status: UnityEngine.Windows.Speech.SpeechSystemStatus;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class PhraseRecognizer extends System.Object {
    protected constructor();
    Dispose(): void;
    Start(): void;
    Stop(): void;
    readonly IsRunning: boolean;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class DictationRecognizer extends System.Object {
    constructor();
    constructor(confidenceLevel: UnityEngine.Windows.Speech.ConfidenceLevel);
    constructor(topic: UnityEngine.Windows.Speech.DictationTopicConstraint);
    constructor(minimumConfidence: UnityEngine.Windows.Speech.ConfidenceLevel, topic: UnityEngine.Windows.Speech.DictationTopicConstraint);
    Dispose(): void;
    Start(): void;
    Stop(): void;
    AutoSilenceTimeoutSeconds: number;
    InitialSilenceTimeoutSeconds: number;
    readonly Status: UnityEngine.Windows.Speech.SpeechSystemStatus;
  }
}
declare namespace UnityEngine.Windows {
  class CrashReporting extends System.Object {
    protected constructor();
    static readonly crashReportFolder: string;
  }
}
declare namespace UnityEngine.WSA {
  class WindowActivationState extends System.Enum {
    protected constructor();
    static CodeActivated: UnityEngine.WSA.WindowActivationState;
    static Deactivated: UnityEngine.WSA.WindowActivationState;
    static PointerActivated: UnityEngine.WSA.WindowActivationState;
    value__: number;
  }
}
declare namespace UnityEngine.WSA {
  class Application extends System.Object {
    constructor();
    static InvokeOnAppThread(item: (() => void), waitUntilDone: boolean): void;
    static InvokeOnUIThread(item: (() => void), waitUntilDone: boolean): void;
    static RunningOnAppThread(): boolean;
    static RunningOnUIThread(): boolean;
    static TryInvokeOnAppThread(item: (() => void), waitUntilDone: boolean): boolean;
    static TryInvokeOnUIThread(item: (() => void), waitUntilDone: boolean): boolean;
    static readonly advertisingIdentifier: string;
    static readonly "arguments": string;
  }
}
declare namespace UnityEngine.WSA {
  class Cursor extends System.Object {
    constructor();
    static SetCustomCursor(id: number): void;
  }
}
declare namespace UnityEngine.WSA {
  class Folder extends System.Enum {
    protected constructor();
    static CameraRoll: UnityEngine.WSA.Folder;
    static DocumentsLibrary: UnityEngine.WSA.Folder;
    static HomeGroup: UnityEngine.WSA.Folder;
    static Installation: UnityEngine.WSA.Folder;
    static Local: UnityEngine.WSA.Folder;
    static MediaServerDevices: UnityEngine.WSA.Folder;
    static MusicLibrary: UnityEngine.WSA.Folder;
    static PicturesLibrary: UnityEngine.WSA.Folder;
    static Playlists: UnityEngine.WSA.Folder;
    static RemovableDevices: UnityEngine.WSA.Folder;
    static Roaming: UnityEngine.WSA.Folder;
    static SavedPictures: UnityEngine.WSA.Folder;
    static Temporary: UnityEngine.WSA.Folder;
    value__: number;
    static VideosLibrary: UnityEngine.WSA.Folder;
  }
}
declare namespace UnityEngine.WSA {
  class Launcher extends System.Object {
    constructor();
    static LaunchFile(folder: UnityEngine.WSA.Folder, relativeFilePath: string, showWarning: boolean): void;
    static LaunchFileWithPicker(fileExtension: string): void;
    static LaunchUri(uri: string, showWarning: boolean): void;
  }
}
declare namespace UnityEngine.WSA {
  class TileTemplate extends System.Enum {
    protected constructor();
    static TileSquare150x150Block: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150IconWithBadge: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150Image: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150PeekImageAndText01: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150PeekImageAndText02: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150PeekImageAndText03: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150PeekImageAndText04: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150Text01: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150Text02: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150Text03: UnityEngine.WSA.TileTemplate;
    static TileSquare150x150Text04: UnityEngine.WSA.TileTemplate;
    static TileSquare210x210IconWithBadge: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310BlockAndText01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310BlockAndText02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Image: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageAndText01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageAndText02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageAndTextOverlay01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageAndTextOverlay02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageAndTextOverlay03: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageCollection: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageCollectionAndText01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310ImageCollectionAndText02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310SmallImageAndText01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310SmallImagesAndTextList01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310SmallImagesAndTextList02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310SmallImagesAndTextList03: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310SmallImagesAndTextList04: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310SmallImagesAndTextList05: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text03: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text04: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text05: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text06: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text07: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text08: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310Text09: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310TextList01: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310TextList02: UnityEngine.WSA.TileTemplate;
    static TileSquare310x310TextList03: UnityEngine.WSA.TileTemplate;
    static TileSquare71x71IconWithBadge: UnityEngine.WSA.TileTemplate;
    static TileSquare71x71Image: UnityEngine.WSA.TileTemplate;
    static TileSquare99x99IconWithBadge: UnityEngine.WSA.TileTemplate;
    static TileTall150x310Image: UnityEngine.WSA.TileTemplate;
    static TileWide310x150BlockAndText01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150BlockAndText02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150IconWithBadgeAndText: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Image: UnityEngine.WSA.TileTemplate;
    static TileWide310x150ImageAndText01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150ImageAndText02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150ImageCollection: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImage01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImage02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImage03: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImage04: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImage05: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImage06: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageAndText01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageAndText02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageCollection01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageCollection02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageCollection03: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageCollection04: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageCollection05: UnityEngine.WSA.TileTemplate;
    static TileWide310x150PeekImageCollection06: UnityEngine.WSA.TileTemplate;
    static TileWide310x150SmallImageAndText01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150SmallImageAndText02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150SmallImageAndText03: UnityEngine.WSA.TileTemplate;
    static TileWide310x150SmallImageAndText04: UnityEngine.WSA.TileTemplate;
    static TileWide310x150SmallImageAndText05: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text01: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text02: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text03: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text04: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text05: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text06: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text07: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text08: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text09: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text10: UnityEngine.WSA.TileTemplate;
    static TileWide310x150Text11: UnityEngine.WSA.TileTemplate;
    static TileWide432x210IconWithBadgeAndText: UnityEngine.WSA.TileTemplate;
    value__: number;
  }
}
declare namespace UnityEngine.WSA {
  class ToastTemplate extends System.Enum {
    protected constructor();
    static ToastImageAndText01: UnityEngine.WSA.ToastTemplate;
    static ToastImageAndText02: UnityEngine.WSA.ToastTemplate;
    static ToastImageAndText03: UnityEngine.WSA.ToastTemplate;
    static ToastImageAndText04: UnityEngine.WSA.ToastTemplate;
    static ToastText01: UnityEngine.WSA.ToastTemplate;
    static ToastText02: UnityEngine.WSA.ToastTemplate;
    static ToastText03: UnityEngine.WSA.ToastTemplate;
    static ToastText04: UnityEngine.WSA.ToastTemplate;
    value__: number;
  }
}
declare namespace UnityEngine.WSA {
  class TileForegroundText extends System.Enum {
    protected constructor();
    static Dark: UnityEngine.WSA.TileForegroundText;
    static Default: UnityEngine.WSA.TileForegroundText;
    static Light: UnityEngine.WSA.TileForegroundText;
    value__: number;
  }
}
declare namespace UnityEngine.WSA {
  class SecondaryTileData extends System.ValueType {
    protected constructor();
    backgroundColor: UnityEngine.Color32;
    "arguments": string;
    backgroundColorSet: boolean;
    displayName: string;
    foregroundText: UnityEngine.WSA.TileForegroundText;
    lockScreenBadgeLogo: string;
    lockScreenDisplayBadgeAndTileText: boolean;
    phoneticName: string;
    roamingEnabled: boolean;
    showNameOnSquare150x150Logo: boolean;
    showNameOnSquare310x310Logo: boolean;
    showNameOnWide310x150Logo: boolean;
    square150x150Logo: string;
    square30x30Logo: string;
    square310x310Logo: string;
    square70x70Logo: string;
    tileId: string;
    wide310x150Logo: string;
  }
}
declare namespace UnityEngine.WSA {
  class Tile extends System.Object {
    protected constructor();
    static CreateOrUpdateSecondary(data: UnityEngine.WSA.SecondaryTileData): UnityEngine.WSA.Tile;
    static CreateOrUpdateSecondary(data: UnityEngine.WSA.SecondaryTileData, area: UnityEngine.Rect): UnityEngine.WSA.Tile;
    static CreateOrUpdateSecondary(data: UnityEngine.WSA.SecondaryTileData, pos: UnityEngine.Vector2): UnityEngine.WSA.Tile;
    Delete(): void;
    Delete(area: UnityEngine.Rect): void;
    Delete(pos: UnityEngine.Vector2): void;
    static DeleteSecondary(tileId: string): void;
    static DeleteSecondary(tileId: string, area: UnityEngine.Rect): void;
    static DeleteSecondary(tileId: string, pos: UnityEngine.Vector2): void;
    static Exists(tileId: string): boolean;
    static GetSecondaries(): UnityEngine.WSA.Tile[];
    static GetSecondary(tileId: string): UnityEngine.WSA.Tile;
    static GetTemplate(templ: UnityEngine.WSA.TileTemplate): string;
    PeriodicBadgeUpdate(uri: string, interval: number): void;
    PeriodicUpdate(uri: string, interval: number): void;
    RemoveBadge(): void;
    StopPeriodicBadgeUpdate(): void;
    StopPeriodicUpdate(): void;
    Update(xml: string): void;
    Update(medium: string, wide: string, large: string, text: string): void;
    UpdateBadgeImage(image: string): void;
    UpdateBadgeNumber(number: number): void;
    readonly exists: boolean;
    readonly hasUserConsent: boolean;
    readonly id: string;
    static readonly main: UnityEngine.WSA.Tile;
  }
}
declare namespace UnityEngine.WSA {
  class Toast extends System.Object {
    protected constructor();
    static Create(xml: string): UnityEngine.WSA.Toast;
    static Create(image: string, text: string): UnityEngine.WSA.Toast;
    static GetTemplate(templ: UnityEngine.WSA.ToastTemplate): string;
    Hide(): void;
    Show(): void;
    readonly activated: boolean;
    "arguments": string;
    readonly dismissed: boolean;
    readonly dismissedByUser: boolean;
  }
}
declare namespace UnityEngine.Profiling {
  class Profiler extends System.Object {
    protected constructor();
    static AddFramesFromFile(file: string): void;
    static BeginSample(name: string): void;
    static BeginSample(name: string, targetObject: UnityEngine.Object): void;
    static EndSample(): void;
    static GetMonoHeapSize(): number;
    static GetMonoHeapSizeLong(): number;
    static GetMonoUsedSize(): number;
    static GetMonoUsedSizeLong(): number;
    static GetRuntimeMemorySize(o: UnityEngine.Object): number;
    static GetRuntimeMemorySizeLong(o: UnityEngine.Object): number;
    static GetTempAllocatorSize(): number;
    static GetTotalAllocatedMemory(): number;
    static GetTotalAllocatedMemoryLong(): number;
    static GetTotalReservedMemory(): number;
    static GetTotalReservedMemoryLong(): number;
    static GetTotalUnusedReservedMemory(): number;
    static GetTotalUnusedReservedMemoryLong(): number;
    static SetTempAllocatorRequestedSize(size: number): boolean;
    static enableBinaryLog: boolean;
    static enabled: boolean;
    static logFile: string;
    static maxNumberOfSamplesPerFrame: number;
    static readonly supported: boolean;
    static readonly usedHeapSize: number;
    static readonly usedHeapSizeLong: number;
  }
}
declare namespace UnityEngine.Profiling {
  class Recorder extends System.Object {
    protected constructor();
    static Get(samplerName: string): UnityEngine.Profiling.Recorder;
    readonly elapsedNanoseconds: number;
    enabled: boolean;
    readonly isValid: boolean;
    readonly sampleBlockCount: number;
  }
}
declare namespace UnityEngine.Profiling {
  class Sampler extends System.Object {
    protected constructor();
    static Get(name: string): UnityEngine.Profiling.Sampler;
    static GetNames(names: string[]): number;
    GetRecorder(): UnityEngine.Profiling.Recorder;
    readonly isValid: boolean;
    readonly name: string;
  }
}
declare namespace UnityEngine.Profiling {
  class CustomSampler extends UnityEngine.Profiling.Sampler {
    protected constructor();
    Begin(): void;
    Begin(targetObject: UnityEngine.Object): void;
    static Create(name: string): UnityEngine.Profiling.CustomSampler;
    End(): void;
  }
}
declare namespace UnityEngine {
  class RotationOrder extends System.Enum {
    protected constructor();
    static OrderXYZ: UnityEngine.RotationOrder;
    static OrderXZY: UnityEngine.RotationOrder;
    static OrderYXZ: UnityEngine.RotationOrder;
    static OrderYZX: UnityEngine.RotationOrder;
    static OrderZXY: UnityEngine.RotationOrder;
    static OrderZYX: UnityEngine.RotationOrder;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Transform extends UnityEngine.Component {
    protected constructor();
    DetachChildren(): void;
    Find(name: string): UnityEngine.Transform;
    FindChild(name: string): UnityEngine.Transform;
    GetChild(index: number): UnityEngine.Transform;
    GetChildCount(): number;
    GetEnumerator(): any;
    GetSiblingIndex(): number;
    InverseTransformDirection(x: number, y: number, z: number): UnityEngine.Vector3;
    InverseTransformDirection(direction: UnityEngine.Vector3): UnityEngine.Vector3;
    InverseTransformPoint(x: number, y: number, z: number): UnityEngine.Vector3;
    InverseTransformPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    InverseTransformVector(x: number, y: number, z: number): UnityEngine.Vector3;
    InverseTransformVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
    IsChildOf(parent: UnityEngine.Transform): boolean;
    LookAt(target: UnityEngine.Transform): void;
    LookAt(target: UnityEngine.Transform, worldUp: UnityEngine.Vector3): void;
    LookAt(worldPosition: UnityEngine.Vector3): void;
    LookAt(worldPosition: UnityEngine.Vector3, worldUp: UnityEngine.Vector3): void;
    Rotate(xAngle: number, yAngle: number, zAngle: number): void;
    Rotate(xAngle: number, yAngle: number, zAngle: number, relativeTo: UnityEngine.Space): void;
    Rotate(eulerAngles: UnityEngine.Vector3): void;
    Rotate(axis: UnityEngine.Vector3, angle: number): void;
    Rotate(axis: UnityEngine.Vector3, angle: number, relativeTo: UnityEngine.Space): void;
    Rotate(eulerAngles: UnityEngine.Vector3, relativeTo: UnityEngine.Space): void;
    RotateAround(axis: UnityEngine.Vector3, angle: number): void;
    RotateAround(point: UnityEngine.Vector3, axis: UnityEngine.Vector3, angle: number): void;
    RotateAroundLocal(axis: UnityEngine.Vector3, angle: number): void;
    SetAsFirstSibling(): void;
    SetAsLastSibling(): void;
    SetParent(parent: UnityEngine.Transform): void;
    SetParent(parent: UnityEngine.Transform, worldPositionStays: boolean): void;
    SetPositionAndRotation(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    SetSiblingIndex(index: number): void;
    TransformDirection(x: number, y: number, z: number): UnityEngine.Vector3;
    TransformDirection(direction: UnityEngine.Vector3): UnityEngine.Vector3;
    TransformPoint(x: number, y: number, z: number): UnityEngine.Vector3;
    TransformPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    TransformVector(x: number, y: number, z: number): UnityEngine.Vector3;
    TransformVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
    Translate(x: number, y: number, z: number): void;
    Translate(x: number, y: number, z: number, relativeTo: UnityEngine.Space): void;
    Translate(x: number, y: number, z: number, relativeTo: UnityEngine.Transform): void;
    Translate(translation: UnityEngine.Vector3): void;
    Translate(translation: UnityEngine.Vector3, relativeTo: UnityEngine.Space): void;
    Translate(translation: UnityEngine.Vector3, relativeTo: UnityEngine.Transform): void;
    readonly childCount: number;
    eulerAngles: UnityEngine.Vector3;
    forward: UnityEngine.Vector3;
    hasChanged: boolean;
    hierarchyCapacity: number;
    readonly hierarchyCount: number;
    localEulerAngles: UnityEngine.Vector3;
    localPosition: UnityEngine.Vector3;
    localRotation: UnityEngine.Quaternion;
    localScale: UnityEngine.Vector3;
    readonly localToWorldMatrix: UnityEngine.Matrix4x4;
    readonly lossyScale: UnityEngine.Vector3;
    parent: UnityEngine.Transform;
    position: UnityEngine.Vector3;
    right: UnityEngine.Vector3;
    readonly root: UnityEngine.Transform;
    rotation: UnityEngine.Quaternion;
    up: UnityEngine.Vector3;
    readonly worldToLocalMatrix: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Transform {
  class Enumerator extends System.Object {
    protected constructor();
    MoveNext(): boolean;
    Reset(): void;
    readonly Current: any;
  }
}
declare namespace UnityEngine {
  class DrivenTransformProperties extends System.Enum {
    protected constructor();
    static All: UnityEngine.DrivenTransformProperties;
    static AnchoredPosition: UnityEngine.DrivenTransformProperties;
    static AnchoredPosition3D: UnityEngine.DrivenTransformProperties;
    static AnchoredPositionX: UnityEngine.DrivenTransformProperties;
    static AnchoredPositionY: UnityEngine.DrivenTransformProperties;
    static AnchoredPositionZ: UnityEngine.DrivenTransformProperties;
    static AnchorMax: UnityEngine.DrivenTransformProperties;
    static AnchorMaxX: UnityEngine.DrivenTransformProperties;
    static AnchorMaxY: UnityEngine.DrivenTransformProperties;
    static AnchorMin: UnityEngine.DrivenTransformProperties;
    static AnchorMinX: UnityEngine.DrivenTransformProperties;
    static AnchorMinY: UnityEngine.DrivenTransformProperties;
    static Anchors: UnityEngine.DrivenTransformProperties;
    static None: UnityEngine.DrivenTransformProperties;
    static Pivot: UnityEngine.DrivenTransformProperties;
    static PivotX: UnityEngine.DrivenTransformProperties;
    static PivotY: UnityEngine.DrivenTransformProperties;
    static Rotation: UnityEngine.DrivenTransformProperties;
    static Scale: UnityEngine.DrivenTransformProperties;
    static ScaleX: UnityEngine.DrivenTransformProperties;
    static ScaleY: UnityEngine.DrivenTransformProperties;
    static ScaleZ: UnityEngine.DrivenTransformProperties;
    static SizeDelta: UnityEngine.DrivenTransformProperties;
    static SizeDeltaX: UnityEngine.DrivenTransformProperties;
    static SizeDeltaY: UnityEngine.DrivenTransformProperties;
    value__: number;
  }
}
declare namespace UnityEngine {
  class DrivenRectTransformTracker extends System.ValueType {
    protected constructor();
    Add(driver: UnityEngine.Object, rectTransform: UnityEngine.RectTransform, drivenProperties: UnityEngine.DrivenTransformProperties): void;
    Clear(): void;
    Clear(revertValues: boolean): void;
  }
}
declare namespace UnityEngine {
  class RectTransform extends UnityEngine.Transform {
    constructor();
    GetLocalCorners(fourCornersArray: UnityEngine.Vector3[]): void;
    GetWorldCorners(fourCornersArray: UnityEngine.Vector3[]): void;
    SetInsetAndSizeFromParentEdge(edge: UnityEngine.RectTransform.Edge, inset: number, size: number): void;
    SetSizeWithCurrentAnchors(axis: UnityEngine.RectTransform.Axis, size: number): void;
    anchoredPosition: UnityEngine.Vector2;
    anchoredPosition3D: UnityEngine.Vector3;
    anchorMax: UnityEngine.Vector2;
    anchorMin: UnityEngine.Vector2;
    offsetMax: UnityEngine.Vector2;
    offsetMin: UnityEngine.Vector2;
    pivot: UnityEngine.Vector2;
    readonly rect: UnityEngine.Rect;
    sizeDelta: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.RectTransform {
  class Edge extends System.Enum {
    protected constructor();
    static Bottom: UnityEngine.RectTransform.Edge;
    static Left: UnityEngine.RectTransform.Edge;
    static Right: UnityEngine.RectTransform.Edge;
    static Top: UnityEngine.RectTransform.Edge;
    value__: number;
  }
}
declare namespace UnityEngine.RectTransform {
  class Axis extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.RectTransform.Axis;
    value__: number;
    static Vertical: UnityEngine.RectTransform.Axis;
  }
}
declare namespace UnityEngine.U2D {
  class SpriteAtlasManager extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.U2D {
  class SpriteAtlas extends UnityEngine.Object {
    protected constructor();
    GetSprite(name: string): UnityEngine.Sprite;
    GetSprites(sprites: UnityEngine.Sprite[]): number;
    GetSprites(sprites: UnityEngine.Sprite[], name: string): number;
    readonly isVariant: boolean;
    readonly spriteCount: number;
    readonly tag: string;
  }
}
declare namespace UnityEngine.Rendering {
  class SortingGroup extends UnityEngine.Behaviour {
    constructor();
    sortingLayerID: number;
    sortingLayerName: string;
    sortingOrder: number;
  }
}
declare namespace UnityEngine {
  class AndroidJavaException extends System.Exception {
    protected constructor();
    readonly StackTrace: string;
  }
}
declare namespace UnityEngine {
  class GlobalJavaObjectRef extends System.Object {
    constructor(jobject: any);
    Dispose(): void;
  }
}
declare namespace UnityEngine {
  class AndroidJavaRunnableProxy extends UnityEngine.AndroidJavaProxy {
    constructor(runnable: (() => void));
    run(): void;
  }
}
declare namespace UnityEngine {
  class AndroidJavaProxy extends System.Object {
    constructor(javaInterface: string);
    constructor(javaInterface: UnityEngine.AndroidJavaClass);
    equals(obj: UnityEngine.AndroidJavaObject): boolean;
    hashCode(): number;
    Invoke(methodName: string, args: any[]): UnityEngine.AndroidJavaObject;
    Invoke(methodName: string, javaArgs: UnityEngine.AndroidJavaObject[]): UnityEngine.AndroidJavaObject;
    toString(): string;
    javaInterface: UnityEngine.AndroidJavaClass;
  }
}
declare namespace UnityEngine {
  class AndroidReflection extends System.Object {
    constructor();
    static GetConstructorMember(jclass: any, signature: string): any;
    static GetFieldMember(jclass: any, fieldName: string, signature: string, isStatic: boolean): any;
    static GetMethodMember(jclass: any, methodName: string, signature: string, isStatic: boolean): any;
    static IsAssignableFrom(t: any, from: any): boolean;
    static IsPrimitive(t: any): boolean;
    static NewProxyInstance(delegateHandle: number, interfaze: any): any;
  }
}
declare namespace UnityEngine {
  class _AndroidJNIHelper extends System.Object {
    constructor();
    static Box(obj: any): UnityEngine.AndroidJavaObject;
    static ConvertToJNIArray(array: any): any;
    static CreateJavaProxy(delegateHandle: number, proxy: UnityEngine.AndroidJavaProxy): any;
    static CreateJavaRunnable(jrunnable: (() => void)): any;
    static CreateJNIArgArray(args: any[]): UnityEngine.jvalue[];
    static DeleteJNIArgArray(args: any[], jniArgs: UnityEngine.jvalue[]): void;
    static GetConstructorID(jclass: any, args: any[]): any;
    static GetConstructorID(jclass: any, signature: string): any;
    static GetFieldID(jclass: any, fieldName: string, signature: string, isStatic: boolean): any;
    static GetMethodID(jclass: any, methodName: string, args: any[], isStatic: boolean): any;
    static GetMethodID(jclass: any, methodName: string, signature: string, isStatic: boolean): any;
    static GetSignature(obj: any): string;
    static GetSignature(args: any[]): string;
    static InvokeJavaProxyMethod(proxy: UnityEngine.AndroidJavaProxy, jmethodName: any, jargs: any): any;
    static Unbox(obj: UnityEngine.AndroidJavaObject): any;
    static UnboxArray(obj: UnityEngine.AndroidJavaObject): any;
  }
}
declare namespace UnityEngine {
  class AndroidJNISafe extends System.Object {
    constructor();
    static CallBooleanMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): boolean;
    static CallByteMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallCharMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallDoubleMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallFloatMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallIntMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallLongMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallObjectMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallShortMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticBooleanMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): boolean;
    static CallStaticByteMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticCharMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallStaticDoubleMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticFloatMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticIntMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticLongMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticObjectMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static CallStaticShortMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): number;
    static CallStaticStringMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): string;
    static CallStaticVoidMethod(clazz: any, methodID: any, args: UnityEngine.jvalue[]): void;
    static CallStringMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): string;
    static CallVoidMethod(obj: any, methodID: any, args: UnityEngine.jvalue[]): void;
    static CheckException(): void;
    static DeleteGlobalRef(globalref: any): void;
    static DeleteLocalRef(localref: any): void;
    static FindClass(name: string): any;
    static FromBooleanArray(array: any): boolean[];
    static FromByteArray(array: any): number[];
    static FromCharArray(array: any): any[];
    static FromDoubleArray(array: any): number[];
    static FromFloatArray(array: any): number[];
    static FromIntArray(array: any): number[];
    static FromLongArray(array: any): number[];
    static FromObjectArray(array: any): any[];
    static FromReflectedField(refField: any): any;
    static FromReflectedMethod(refMethod: any): any;
    static FromShortArray(array: any): number[];
    static GetArrayLength(array: any): number;
    static GetBooleanField(obj: any, fieldID: any): boolean;
    static GetByteField(obj: any, fieldID: any): number;
    static GetCharField(obj: any, fieldID: any): any;
    static GetDoubleField(obj: any, fieldID: any): number;
    static GetFieldID(clazz: any, name: string, sig: string): any;
    static GetFloatField(obj: any, fieldID: any): number;
    static GetIntField(obj: any, fieldID: any): number;
    static GetLongField(obj: any, fieldID: any): number;
    static GetMethodID(obj: any, name: string, sig: string): any;
    static GetObjectArrayElement(array: any, index: number): any;
    static GetObjectClass(ptr: any): any;
    static GetObjectField(obj: any, fieldID: any): any;
    static GetShortField(obj: any, fieldID: any): number;
    static GetStaticBooleanField(clazz: any, fieldID: any): boolean;
    static GetStaticByteField(clazz: any, fieldID: any): number;
    static GetStaticCharField(clazz: any, fieldID: any): any;
    static GetStaticDoubleField(clazz: any, fieldID: any): number;
    static GetStaticFieldID(clazz: any, name: string, sig: string): any;
    static GetStaticFloatField(clazz: any, fieldID: any): number;
    static GetStaticIntField(clazz: any, fieldID: any): number;
    static GetStaticLongField(clazz: any, fieldID: any): number;
    static GetStaticMethodID(clazz: any, name: string, sig: string): any;
    static GetStaticObjectField(clazz: any, fieldID: any): any;
    static GetStaticShortField(clazz: any, fieldID: any): number;
    static GetStaticStringField(clazz: any, fieldID: any): string;
    static GetStringField(obj: any, fieldID: any): string;
    static GetStringUTFChars(str: any): string;
    static NewObject(clazz: any, methodID: any, args: UnityEngine.jvalue[]): any;
    static NewStringUTF(bytes: string): any;
    static SetBooleanField(obj: any, fieldID: any, val: boolean): void;
    static SetByteField(obj: any, fieldID: any, val: number): void;
    static SetCharField(obj: any, fieldID: any, val: any): void;
    static SetDoubleField(obj: any, fieldID: any, val: number): void;
    static SetFloatField(obj: any, fieldID: any, val: number): void;
    static SetIntField(obj: any, fieldID: any, val: number): void;
    static SetLongField(obj: any, fieldID: any, val: number): void;
    static SetObjectField(obj: any, fieldID: any, val: any): void;
    static SetShortField(obj: any, fieldID: any, val: number): void;
    static SetStaticBooleanField(clazz: any, fieldID: any, val: boolean): void;
    static SetStaticByteField(clazz: any, fieldID: any, val: number): void;
    static SetStaticCharField(clazz: any, fieldID: any, val: any): void;
    static SetStaticDoubleField(clazz: any, fieldID: any, val: number): void;
    static SetStaticFloatField(clazz: any, fieldID: any, val: number): void;
    static SetStaticIntField(clazz: any, fieldID: any, val: number): void;
    static SetStaticLongField(clazz: any, fieldID: any, val: number): void;
    static SetStaticObjectField(clazz: any, fieldID: any, val: any): void;
    static SetStaticShortField(clazz: any, fieldID: any, val: number): void;
    static SetStaticStringField(clazz: any, fieldID: any, val: string): void;
    static SetStringField(obj: any, fieldID: any, val: string): void;
    static ToBooleanArray(array: boolean[]): any;
    static ToByteArray(array: number[]): any;
    static ToCharArray(array: any[]): any;
    static ToDoubleArray(array: number[]): any;
    static ToFloatArray(array: number[]): any;
    static ToIntArray(array: number[]): any;
    static ToLongArray(array: number[]): any;
    static ToObjectArray(array: any[]): any;
    static ToObjectArray(array: any[], type: any): any;
    static ToShortArray(array: number[]): any;
  }
}
declare namespace UnityEngine {
  class StackTraceLogType extends System.Enum {
    protected constructor();
    static Full: UnityEngine.StackTraceLogType;
    static None: UnityEngine.StackTraceLogType;
    static ScriptOnly: UnityEngine.StackTraceLogType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ArrayUtils extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class AtomicSafetyHandleVersionMask extends System.Enum {
    protected constructor();
    static Read: UnityEngine.AtomicSafetyHandleVersionMask;
    static ReadAndWrite: UnityEngine.AtomicSafetyHandleVersionMask;
    static ReadAndWriteInv: UnityEngine.AtomicSafetyHandleVersionMask;
    static ReadInv: UnityEngine.AtomicSafetyHandleVersionMask;
    value__: number;
    static Write: UnityEngine.AtomicSafetyHandleVersionMask;
    static WriteInv: UnityEngine.AtomicSafetyHandleVersionMask;
  }
}
declare namespace UnityEngine {
  class AtomicSafetyHandle extends System.ValueType {
    protected constructor();
  }
}
declare namespace AOT {
  class MonoPInvokeCallbackAttribute extends System.Attribute {
    constructor(type: any);
  }
}
declare namespace UnityEngine {
  class AttributeHelperEngine extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class DisallowMultipleComponent extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class RequireComponent extends System.Attribute {
    constructor(requiredComponent: any);
    constructor(requiredComponent: any, requiredComponent2: any);
    constructor(requiredComponent: any, requiredComponent2: any, requiredComponent3: any);
    m_Type0: any;
    m_Type1: any;
    m_Type2: any;
  }
}
declare namespace UnityEngine {
  class AddComponentMenu extends System.Attribute {
    constructor(menuName: string);
    constructor(menuName: string, order: number);
    readonly componentMenu: string;
    readonly componentOrder: number;
  }
}
declare namespace UnityEngine {
  class CreateAssetMenuAttribute extends System.Attribute {
    constructor();
    fileName: string;
    menuName: string;
    order: number;
  }
}
declare namespace UnityEngine {
  class ContextMenu extends System.Attribute {
    constructor(itemName: string);
    constructor(itemName: string, isValidateFunction: boolean);
    constructor(itemName: string, isValidateFunction: boolean, priority: number);
    menuItem: string;
    priority: number;
    validate: boolean;
  }
}
declare namespace UnityEngine {
  class ExecuteInEditMode extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class HideInInspector extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class HelpURLAttribute extends System.Attribute {
    constructor(url: string);
    readonly URL: string;
  }
}
declare namespace UnityEngine {
  class DefaultExecutionOrder extends System.Attribute {
    constructor(order: number);
    readonly order: number;
  }
}
declare namespace UnityEngine {
  class IL2CPPStructAlignmentAttribute extends System.Attribute {
    constructor();
    Align: number;
  }
}
declare namespace UnityEngine {
  class NativeClassAttribute extends System.Attribute {
    constructor(qualifiedCppName: string);
    readonly QualifiedNativeName: string;
  }
}
declare namespace UnityEngine {
  class AssemblyIsEditorAssembly extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class WritableAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class RejectDragAndDropMaterial extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Scripting {
  class GeneratedByOldBindingsGeneratorAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class SendMessageOptions extends System.Enum {
    protected constructor();
    static DontRequireReceiver: UnityEngine.SendMessageOptions;
    static RequireReceiver: UnityEngine.SendMessageOptions;
    value__: number;
  }
}
declare namespace UnityEngine {
  class PrimitiveType extends System.Enum {
    protected constructor();
    static Capsule: UnityEngine.PrimitiveType;
    static Cube: UnityEngine.PrimitiveType;
    static Cylinder: UnityEngine.PrimitiveType;
    static Plane: UnityEngine.PrimitiveType;
    static Quad: UnityEngine.PrimitiveType;
    static Sphere: UnityEngine.PrimitiveType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Space extends System.Enum {
    protected constructor();
    static Self: UnityEngine.Space;
    value__: number;
    static World: UnityEngine.Space;
  }
}
declare namespace UnityEngine {
  class RuntimePlatform extends System.Enum {
    protected constructor();
    static Android: UnityEngine.RuntimePlatform;
    static BB10Player: UnityEngine.RuntimePlatform;
    static BlackBerryPlayer: UnityEngine.RuntimePlatform;
    static FlashPlayer: UnityEngine.RuntimePlatform;
    static IPhonePlayer: UnityEngine.RuntimePlatform;
    static LinuxEditor: UnityEngine.RuntimePlatform;
    static LinuxPlayer: UnityEngine.RuntimePlatform;
    static MetroPlayerARM: UnityEngine.RuntimePlatform;
    static MetroPlayerX64: UnityEngine.RuntimePlatform;
    static MetroPlayerX86: UnityEngine.RuntimePlatform;
    static NaCl: UnityEngine.RuntimePlatform;
    static OSXDashboardPlayer: UnityEngine.RuntimePlatform;
    static OSXEditor: UnityEngine.RuntimePlatform;
    static OSXPlayer: UnityEngine.RuntimePlatform;
    static OSXWebPlayer: UnityEngine.RuntimePlatform;
    static PS3: UnityEngine.RuntimePlatform;
    static PS4: UnityEngine.RuntimePlatform;
    static PSM: UnityEngine.RuntimePlatform;
    static PSP2: UnityEngine.RuntimePlatform;
    static SamsungTVPlayer: UnityEngine.RuntimePlatform;
    static Switch: UnityEngine.RuntimePlatform;
    static TizenPlayer: UnityEngine.RuntimePlatform;
    static tvOS: UnityEngine.RuntimePlatform;
    value__: number;
    static WebGLPlayer: UnityEngine.RuntimePlatform;
    static WiiU: UnityEngine.RuntimePlatform;
    static WindowsEditor: UnityEngine.RuntimePlatform;
    static WindowsPlayer: UnityEngine.RuntimePlatform;
    static WindowsWebPlayer: UnityEngine.RuntimePlatform;
    static WP8Player: UnityEngine.RuntimePlatform;
    static WSAPlayerARM: UnityEngine.RuntimePlatform;
    static WSAPlayerX64: UnityEngine.RuntimePlatform;
    static WSAPlayerX86: UnityEngine.RuntimePlatform;
    static XBOX360: UnityEngine.RuntimePlatform;
    static XboxOne: UnityEngine.RuntimePlatform;
  }
}
declare namespace UnityEngine {
  class OperatingSystemFamily extends System.Enum {
    protected constructor();
    static Linux: UnityEngine.OperatingSystemFamily;
    static MacOSX: UnityEngine.OperatingSystemFamily;
    static Other: UnityEngine.OperatingSystemFamily;
    value__: number;
    static Windows: UnityEngine.OperatingSystemFamily;
  }
}
declare namespace UnityEngine {
  class SystemLanguage extends System.Enum {
    protected constructor();
    static Afrikaans: UnityEngine.SystemLanguage;
    static Arabic: UnityEngine.SystemLanguage;
    static Basque: UnityEngine.SystemLanguage;
    static Belarusian: UnityEngine.SystemLanguage;
    static Bulgarian: UnityEngine.SystemLanguage;
    static Catalan: UnityEngine.SystemLanguage;
    static Chinese: UnityEngine.SystemLanguage;
    static ChineseSimplified: UnityEngine.SystemLanguage;
    static ChineseTraditional: UnityEngine.SystemLanguage;
    static Czech: UnityEngine.SystemLanguage;
    static Danish: UnityEngine.SystemLanguage;
    static Dutch: UnityEngine.SystemLanguage;
    static English: UnityEngine.SystemLanguage;
    static Estonian: UnityEngine.SystemLanguage;
    static Faroese: UnityEngine.SystemLanguage;
    static Finnish: UnityEngine.SystemLanguage;
    static French: UnityEngine.SystemLanguage;
    static German: UnityEngine.SystemLanguage;
    static Greek: UnityEngine.SystemLanguage;
    static Hebrew: UnityEngine.SystemLanguage;
    static Hugarian: UnityEngine.SystemLanguage;
    static Hungarian: UnityEngine.SystemLanguage;
    static Icelandic: UnityEngine.SystemLanguage;
    static Indonesian: UnityEngine.SystemLanguage;
    static Italian: UnityEngine.SystemLanguage;
    static Japanese: UnityEngine.SystemLanguage;
    static Korean: UnityEngine.SystemLanguage;
    static Latvian: UnityEngine.SystemLanguage;
    static Lithuanian: UnityEngine.SystemLanguage;
    static Norwegian: UnityEngine.SystemLanguage;
    static Polish: UnityEngine.SystemLanguage;
    static Portuguese: UnityEngine.SystemLanguage;
    static Romanian: UnityEngine.SystemLanguage;
    static Russian: UnityEngine.SystemLanguage;
    static SerboCroatian: UnityEngine.SystemLanguage;
    static Slovak: UnityEngine.SystemLanguage;
    static Slovenian: UnityEngine.SystemLanguage;
    static Spanish: UnityEngine.SystemLanguage;
    static Swedish: UnityEngine.SystemLanguage;
    static Thai: UnityEngine.SystemLanguage;
    static Turkish: UnityEngine.SystemLanguage;
    static Ukrainian: UnityEngine.SystemLanguage;
    static Unknown: UnityEngine.SystemLanguage;
    value__: number;
    static Vietnamese: UnityEngine.SystemLanguage;
  }
}
declare namespace UnityEngine {
  class LogType extends System.Enum {
    protected constructor();
    static Assert: UnityEngine.LogType;
    static Error: UnityEngine.LogType;
    static Exception: UnityEngine.LogType;
    static Log: UnityEngine.LogType;
    value__: number;
    static Warning: UnityEngine.LogType;
  }
}
declare namespace UnityEngine {
  class DeviceType extends System.Enum {
    protected constructor();
    static Console: UnityEngine.DeviceType;
    static Desktop: UnityEngine.DeviceType;
    static Handheld: UnityEngine.DeviceType;
    static Unknown: UnityEngine.DeviceType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class BatteryStatus extends System.Enum {
    protected constructor();
    static Charging: UnityEngine.BatteryStatus;
    static Discharging: UnityEngine.BatteryStatus;
    static Full: UnityEngine.BatteryStatus;
    static NotCharging: UnityEngine.BatteryStatus;
    static Unknown: UnityEngine.BatteryStatus;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ThreadPriority extends System.Enum {
    protected constructor();
    static BelowNormal: UnityEngine.ThreadPriority;
    static High: UnityEngine.ThreadPriority;
    static Low: UnityEngine.ThreadPriority;
    static Normal: UnityEngine.ThreadPriority;
    value__: number;
  }
}
declare namespace UnityEngine {
  class BoundsInt extends System.ValueType {
    protected constructor();
    ClampToBounds(bounds: UnityEngine.BoundsInt): void;
    Contains(position: UnityEngine.Vector3Int): boolean;
    Equals(other: any): boolean;
    GetHashCode(): number;
    SetMinMax(minPosition: UnityEngine.Vector3Int, maxPosition: UnityEngine.Vector3Int): void;
    ToString(): string;
    readonly allPositionsWithin: UnityEngine.BoundsInt.PositionEnumerator;
    readonly center: UnityEngine.Vector3;
    max: UnityEngine.Vector3Int;
    min: UnityEngine.Vector3Int;
    position: UnityEngine.Vector3Int;
    size: UnityEngine.Vector3Int;
    x: number;
    xMax: number;
    xMin: number;
    y: number;
    yMax: number;
    yMin: number;
    z: number;
    zMax: number;
    zMin: number;
  }
}
declare namespace UnityEngine.BoundsInt {
  class PositionEnumerator extends System.ValueType {
    protected constructor();
    GetEnumerator(): UnityEngine.BoundsInt.PositionEnumerator;
    MoveNext(): boolean;
    Reset(): void;
    readonly Current: UnityEngine.Vector3Int;
  }
}
declare namespace UnityEngine {
  class CachedAssetBundle extends System.ValueType {
    protected constructor();
    hash: UnityEngine.Hash128;
    name: string;
  }
}
declare namespace UnityEngine {
  class ClassLibraryInitializer extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class Color extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    static HSVToRGB(H: number, S: number, V: number): UnityEngine.Color;
    static HSVToRGB(H: number, S: number, V: number, hdr: boolean): UnityEngine.Color;
    static Lerp(a: UnityEngine.Color, b: UnityEngine.Color, t: number): UnityEngine.Color;
    static LerpUnclamped(a: UnityEngine.Color, b: UnityEngine.Color, t: number): UnityEngine.Color;
    static RGBToHSV(rgbColor: UnityEngine.Color, H: any, S: any, V: any): void;
    ToString(): string;
    ToString(format: string): string;
    static readonly black: UnityEngine.Color;
    static readonly blue: UnityEngine.Color;
    static readonly clear: UnityEngine.Color;
    static readonly cyan: UnityEngine.Color;
    readonly gamma: UnityEngine.Color;
    static readonly gray: UnityEngine.Color;
    readonly grayscale: number;
    static readonly green: UnityEngine.Color;
    static readonly grey: UnityEngine.Color;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    readonly linear: UnityEngine.Color;
    static readonly magenta: UnityEngine.Color;
    readonly maxColorComponent: number;
    static readonly red: UnityEngine.Color;
    static readonly white: UnityEngine.Color;
    static readonly yellow: UnityEngine.Color;
    a: number;
    b: number;
    g: number;
    r: number;
  }
}
declare namespace UnityEngine {
  class Color32 extends System.ValueType {
    protected constructor();
    static Lerp(a: UnityEngine.Color32, b: UnityEngine.Color32, t: number): UnityEngine.Color32;
    static LerpUnclamped(a: UnityEngine.Color32, b: UnityEngine.Color32, t: number): UnityEngine.Color32;
    ToString(): string;
    ToString(format: string): string;
    a: number;
    b: number;
    g: number;
    r: number;
  }
}
declare namespace UnityEngine {
  class SetupCoroutine extends System.Object {
    constructor();
    static InvokeMember(behaviour: any, name: string, variable: any): any;
    static InvokeMoveNext(enumerator: any, returnValueAddress: any): void;
    static InvokeStatic(klass: any, name: string, variable: any): any;
  }
}
declare namespace UnityEngine {
  class DiagnosticSwitchFlags extends System.Enum {
    protected constructor();
    static CanChangeAfterEngineStart: UnityEngine.DiagnosticSwitchFlags;
    static None: UnityEngine.DiagnosticSwitchFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class DiagnosticSwitch extends System.ValueType {
    protected constructor();
    description: string;
    enumInfo: UnityEngine.EnumInfo;
    flags: UnityEngine.DiagnosticSwitchFlags;
    maxValue: any;
    minValue: any;
    name: string;
    persistentValue: any;
    value: any;
  }
}
declare namespace UnityEngine {
  class EnumInfo extends System.Object {
    constructor();
    annotations: string[];
    isFlags: boolean;
    names: string[];
    values: number[];
  }
}
declare namespace UnityEngine {
  class Resolution extends System.ValueType {
    protected constructor();
    ToString(): string;
    height: number;
    refreshRate: number;
    width: number;
  }
}
declare namespace UnityEngine {
  class RenderBuffer extends System.ValueType {
    protected constructor();
    GetNativeRenderBufferPtr(): any;
  }
}
declare namespace UnityEngine {
  class RenderTargetSetup extends System.ValueType {
    protected constructor();
    color: UnityEngine.RenderBuffer[];
    colorLoad: UnityEngine.Rendering.RenderBufferLoadAction[];
    colorStore: UnityEngine.Rendering.RenderBufferStoreAction[];
    cubemapFace: UnityEngine.CubemapFace;
    depth: UnityEngine.RenderBuffer;
    depthLoad: UnityEngine.Rendering.RenderBufferLoadAction;
    depthSlice: number;
    depthStore: UnityEngine.Rendering.RenderBufferStoreAction;
    mipLevel: number;
  }
}
declare namespace UnityEngine {
  class Internal_DrawMeshMatrixArguments extends System.ValueType {
    protected constructor();
    castShadows: number;
    layer: number;
    matrix: UnityEngine.Matrix4x4;
    receiveShadows: number;
    reflectionProbeAnchorInstanceID: number;
    submeshIndex: number;
    useLightProbes: boolean;
  }
}
declare namespace UnityEngine {
  class Internal_DrawTextureArguments extends System.ValueType {
    protected constructor();
    borderWidths: UnityEngine.Vector4;
    bottomBorder: number;
    color: UnityEngine.Color32;
    cornerRadius: number;
    leftBorder: number;
    mat: UnityEngine.Material;
    pass: number;
    rightBorder: number;
    screenRect: UnityEngine.Rect;
    sourceRect: UnityEngine.Rect;
    texture: UnityEngine.Texture;
    topBorder: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ShaderHardwareTier extends System.Enum {
    protected constructor();
    static Tier1: UnityEngine.Rendering.ShaderHardwareTier;
    static Tier2: UnityEngine.Rendering.ShaderHardwareTier;
    static Tier3: UnityEngine.Rendering.ShaderHardwareTier;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RenderingPath extends System.Enum {
    protected constructor();
    static DeferredLighting: UnityEngine.RenderingPath;
    static DeferredShading: UnityEngine.RenderingPath;
    static Forward: UnityEngine.RenderingPath;
    static UsePlayerSettings: UnityEngine.RenderingPath;
    value__: number;
    static VertexLit: UnityEngine.RenderingPath;
  }
}
declare namespace UnityEngine {
  class TransparencySortMode extends System.Enum {
    protected constructor();
    static CustomAxis: UnityEngine.TransparencySortMode;
    static Default: UnityEngine.TransparencySortMode;
    static Orthographic: UnityEngine.TransparencySortMode;
    static Perspective: UnityEngine.TransparencySortMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class StereoTargetEyeMask extends System.Enum {
    protected constructor();
    static Both: UnityEngine.StereoTargetEyeMask;
    static Left: UnityEngine.StereoTargetEyeMask;
    static None: UnityEngine.StereoTargetEyeMask;
    static Right: UnityEngine.StereoTargetEyeMask;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CameraType extends System.Enum {
    protected constructor();
    static Game: UnityEngine.CameraType;
    static Preview: UnityEngine.CameraType;
    static Reflection: UnityEngine.CameraType;
    static SceneView: UnityEngine.CameraType;
    value__: number;
    static VR: UnityEngine.CameraType;
  }
}
declare namespace UnityEngine {
  class ComputeBufferType extends System.Enum {
    protected constructor();
    static Append: UnityEngine.ComputeBufferType;
    static Counter: UnityEngine.ComputeBufferType;
    static Default: UnityEngine.ComputeBufferType;
    static DrawIndirect: UnityEngine.ComputeBufferType;
    static GPUMemory: UnityEngine.ComputeBufferType;
    static IndirectArguments: UnityEngine.ComputeBufferType;
    static Raw: UnityEngine.ComputeBufferType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LightType extends System.Enum {
    protected constructor();
    static Area: UnityEngine.LightType;
    static Directional: UnityEngine.LightType;
    static Point: UnityEngine.LightType;
    static Spot: UnityEngine.LightType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LightRenderMode extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.LightRenderMode;
    static ForcePixel: UnityEngine.LightRenderMode;
    static ForceVertex: UnityEngine.LightRenderMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LightShadows extends System.Enum {
    protected constructor();
    static Hard: UnityEngine.LightShadows;
    static None: UnityEngine.LightShadows;
    static Soft: UnityEngine.LightShadows;
    value__: number;
  }
}
declare namespace UnityEngine {
  class FogMode extends System.Enum {
    protected constructor();
    static Exponential: UnityEngine.FogMode;
    static ExponentialSquared: UnityEngine.FogMode;
    static Linear: UnityEngine.FogMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LightmapBakeType extends System.Enum {
    protected constructor();
    static Baked: UnityEngine.LightmapBakeType;
    static Mixed: UnityEngine.LightmapBakeType;
    static Realtime: UnityEngine.LightmapBakeType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class QualityLevel extends System.Enum {
    protected constructor();
    static Beautiful: UnityEngine.QualityLevel;
    static Fantastic: UnityEngine.QualityLevel;
    static Fast: UnityEngine.QualityLevel;
    static Fastest: UnityEngine.QualityLevel;
    static Good: UnityEngine.QualityLevel;
    static Simple: UnityEngine.QualityLevel;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ShadowProjection extends System.Enum {
    protected constructor();
    static CloseFit: UnityEngine.ShadowProjection;
    static StableFit: UnityEngine.ShadowProjection;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ShadowQuality extends System.Enum {
    protected constructor();
    static All: UnityEngine.ShadowQuality;
    static Disable: UnityEngine.ShadowQuality;
    static HardOnly: UnityEngine.ShadowQuality;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ShadowResolution extends System.Enum {
    protected constructor();
    static High: UnityEngine.ShadowResolution;
    static Low: UnityEngine.ShadowResolution;
    static Medium: UnityEngine.ShadowResolution;
    value__: number;
    static VeryHigh: UnityEngine.ShadowResolution;
  }
}
declare namespace UnityEngine {
  class ShadowmaskMode extends System.Enum {
    protected constructor();
    static DistanceShadowmask: UnityEngine.ShadowmaskMode;
    static Shadowmask: UnityEngine.ShadowmaskMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CameraClearFlags extends System.Enum {
    protected constructor();
    static Color: UnityEngine.CameraClearFlags;
    static Depth: UnityEngine.CameraClearFlags;
    static Nothing: UnityEngine.CameraClearFlags;
    static Skybox: UnityEngine.CameraClearFlags;
    static SolidColor: UnityEngine.CameraClearFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class DepthTextureMode extends System.Enum {
    protected constructor();
    static Depth: UnityEngine.DepthTextureMode;
    static DepthNormals: UnityEngine.DepthTextureMode;
    static MotionVectors: UnityEngine.DepthTextureMode;
    static None: UnityEngine.DepthTextureMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TexGenMode extends System.Enum {
    protected constructor();
    static CubeNormal: UnityEngine.TexGenMode;
    static CubeReflect: UnityEngine.TexGenMode;
    static EyeLinear: UnityEngine.TexGenMode;
    static None: UnityEngine.TexGenMode;
    static Object: UnityEngine.TexGenMode;
    static SphereMap: UnityEngine.TexGenMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class AnisotropicFiltering extends System.Enum {
    protected constructor();
    static Disable: UnityEngine.AnisotropicFiltering;
    static Enable: UnityEngine.AnisotropicFiltering;
    static ForceEnable: UnityEngine.AnisotropicFiltering;
    value__: number;
  }
}
declare namespace UnityEngine {
  class BlendWeights extends System.Enum {
    protected constructor();
    static FourBones: UnityEngine.BlendWeights;
    static OneBone: UnityEngine.BlendWeights;
    static TwoBones: UnityEngine.BlendWeights;
    value__: number;
  }
}
declare namespace UnityEngine {
  class MeshTopology extends System.Enum {
    protected constructor();
    static Lines: UnityEngine.MeshTopology;
    static LineStrip: UnityEngine.MeshTopology;
    static Points: UnityEngine.MeshTopology;
    static Quads: UnityEngine.MeshTopology;
    static Triangles: UnityEngine.MeshTopology;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SkinQuality extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.SkinQuality;
    static Bone1: UnityEngine.SkinQuality;
    static Bone2: UnityEngine.SkinQuality;
    static Bone4: UnityEngine.SkinQuality;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ColorSpace extends System.Enum {
    protected constructor();
    static Gamma: UnityEngine.ColorSpace;
    static Linear: UnityEngine.ColorSpace;
    static Uninitialized: UnityEngine.ColorSpace;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ColorGamut extends System.Enum {
    protected constructor();
    static DisplayP3: UnityEngine.ColorGamut;
    static DolbyHDR: UnityEngine.ColorGamut;
    static HDR10: UnityEngine.ColorGamut;
    static Rec2020: UnityEngine.ColorGamut;
    static Rec709: UnityEngine.ColorGamut;
    static sRGB: UnityEngine.ColorGamut;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ScreenOrientation extends System.Enum {
    protected constructor();
    static AutoRotation: UnityEngine.ScreenOrientation;
    static Landscape: UnityEngine.ScreenOrientation;
    static LandscapeLeft: UnityEngine.ScreenOrientation;
    static LandscapeRight: UnityEngine.ScreenOrientation;
    static Portrait: UnityEngine.ScreenOrientation;
    static PortraitUpsideDown: UnityEngine.ScreenOrientation;
    static Unknown: UnityEngine.ScreenOrientation;
    value__: number;
  }
}
declare namespace UnityEngine {
  class FilterMode extends System.Enum {
    protected constructor();
    static Bilinear: UnityEngine.FilterMode;
    static Point: UnityEngine.FilterMode;
    static Trilinear: UnityEngine.FilterMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TextureWrapMode extends System.Enum {
    protected constructor();
    static Clamp: UnityEngine.TextureWrapMode;
    static Mirror: UnityEngine.TextureWrapMode;
    static MirrorOnce: UnityEngine.TextureWrapMode;
    static Repeat: UnityEngine.TextureWrapMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NPOTSupport extends System.Enum {
    protected constructor();
    static Full: UnityEngine.NPOTSupport;
    static None: UnityEngine.NPOTSupport;
    static Restricted: UnityEngine.NPOTSupport;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TextureFormat extends System.Enum {
    protected constructor();
    static Alpha8: UnityEngine.TextureFormat;
    static ARGB32: UnityEngine.TextureFormat;
    static ARGB4444: UnityEngine.TextureFormat;
    static ASTC_RGB_10x10: UnityEngine.TextureFormat;
    static ASTC_RGB_12x12: UnityEngine.TextureFormat;
    static ASTC_RGB_4x4: UnityEngine.TextureFormat;
    static ASTC_RGB_5x5: UnityEngine.TextureFormat;
    static ASTC_RGB_6x6: UnityEngine.TextureFormat;
    static ASTC_RGB_8x8: UnityEngine.TextureFormat;
    static ASTC_RGBA_10x10: UnityEngine.TextureFormat;
    static ASTC_RGBA_12x12: UnityEngine.TextureFormat;
    static ASTC_RGBA_4x4: UnityEngine.TextureFormat;
    static ASTC_RGBA_5x5: UnityEngine.TextureFormat;
    static ASTC_RGBA_6x6: UnityEngine.TextureFormat;
    static ASTC_RGBA_8x8: UnityEngine.TextureFormat;
    static ATC_RGB4: UnityEngine.TextureFormat;
    static ATC_RGBA8: UnityEngine.TextureFormat;
    static BC4: UnityEngine.TextureFormat;
    static BC5: UnityEngine.TextureFormat;
    static BC6H: UnityEngine.TextureFormat;
    static BC7: UnityEngine.TextureFormat;
    static BGRA32: UnityEngine.TextureFormat;
    static DXT1: UnityEngine.TextureFormat;
    static DXT1Crunched: UnityEngine.TextureFormat;
    static DXT5: UnityEngine.TextureFormat;
    static DXT5Crunched: UnityEngine.TextureFormat;
    static EAC_R: UnityEngine.TextureFormat;
    static EAC_R_SIGNED: UnityEngine.TextureFormat;
    static EAC_RG: UnityEngine.TextureFormat;
    static EAC_RG_SIGNED: UnityEngine.TextureFormat;
    static ETC_RGB4: UnityEngine.TextureFormat;
    static ETC_RGB4_3DS: UnityEngine.TextureFormat;
    static ETC_RGBA8_3DS: UnityEngine.TextureFormat;
    static ETC2_RGB: UnityEngine.TextureFormat;
    static ETC2_RGBA1: UnityEngine.TextureFormat;
    static ETC2_RGBA8: UnityEngine.TextureFormat;
    static PVRTC_2BPP_RGB: UnityEngine.TextureFormat;
    static PVRTC_2BPP_RGBA: UnityEngine.TextureFormat;
    static PVRTC_4BPP_RGB: UnityEngine.TextureFormat;
    static PVRTC_4BPP_RGBA: UnityEngine.TextureFormat;
    static PVRTC_RGB2: UnityEngine.TextureFormat;
    static PVRTC_RGB4: UnityEngine.TextureFormat;
    static PVRTC_RGBA2: UnityEngine.TextureFormat;
    static PVRTC_RGBA4: UnityEngine.TextureFormat;
    static R16: UnityEngine.TextureFormat;
    static R8: UnityEngine.TextureFormat;
    static RFloat: UnityEngine.TextureFormat;
    static RG16: UnityEngine.TextureFormat;
    static RGB24: UnityEngine.TextureFormat;
    static RGB565: UnityEngine.TextureFormat;
    static RGB9e5Float: UnityEngine.TextureFormat;
    static RGBA32: UnityEngine.TextureFormat;
    static RGBA4444: UnityEngine.TextureFormat;
    static RGBAFloat: UnityEngine.TextureFormat;
    static RGBAHalf: UnityEngine.TextureFormat;
    static RGFloat: UnityEngine.TextureFormat;
    static RGHalf: UnityEngine.TextureFormat;
    static RHalf: UnityEngine.TextureFormat;
    value__: number;
    static YUY2: UnityEngine.TextureFormat;
  }
}
declare namespace UnityEngine {
  class CubemapFace extends System.Enum {
    protected constructor();
    static NegativeX: UnityEngine.CubemapFace;
    static NegativeY: UnityEngine.CubemapFace;
    static NegativeZ: UnityEngine.CubemapFace;
    static PositiveX: UnityEngine.CubemapFace;
    static PositiveY: UnityEngine.CubemapFace;
    static PositiveZ: UnityEngine.CubemapFace;
    static Unknown: UnityEngine.CubemapFace;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RenderTextureFormat extends System.Enum {
    protected constructor();
    static ARGB1555: UnityEngine.RenderTextureFormat;
    static ARGB2101010: UnityEngine.RenderTextureFormat;
    static ARGB32: UnityEngine.RenderTextureFormat;
    static ARGB4444: UnityEngine.RenderTextureFormat;
    static ARGB64: UnityEngine.RenderTextureFormat;
    static ARGBFloat: UnityEngine.RenderTextureFormat;
    static ARGBHalf: UnityEngine.RenderTextureFormat;
    static ARGBInt: UnityEngine.RenderTextureFormat;
    static BGR101010_XR: UnityEngine.RenderTextureFormat;
    static BGRA10101010_XR: UnityEngine.RenderTextureFormat;
    static BGRA32: UnityEngine.RenderTextureFormat;
    static Default: UnityEngine.RenderTextureFormat;
    static DefaultHDR: UnityEngine.RenderTextureFormat;
    static Depth: UnityEngine.RenderTextureFormat;
    static R8: UnityEngine.RenderTextureFormat;
    static RFloat: UnityEngine.RenderTextureFormat;
    static RG16: UnityEngine.RenderTextureFormat;
    static RG32: UnityEngine.RenderTextureFormat;
    static RGB111110Float: UnityEngine.RenderTextureFormat;
    static RGB565: UnityEngine.RenderTextureFormat;
    static RGBAUShort: UnityEngine.RenderTextureFormat;
    static RGFloat: UnityEngine.RenderTextureFormat;
    static RGHalf: UnityEngine.RenderTextureFormat;
    static RGInt: UnityEngine.RenderTextureFormat;
    static RHalf: UnityEngine.RenderTextureFormat;
    static RInt: UnityEngine.RenderTextureFormat;
    static Shadowmap: UnityEngine.RenderTextureFormat;
    value__: number;
  }
}
declare namespace UnityEngine {
  class VRTextureUsage extends System.Enum {
    protected constructor();
    static None: UnityEngine.VRTextureUsage;
    static OneEye: UnityEngine.VRTextureUsage;
    static TwoEyes: UnityEngine.VRTextureUsage;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RenderTextureCreationFlags extends System.Enum {
    protected constructor();
    static AllowVerticalFlip: UnityEngine.RenderTextureCreationFlags;
    static AutoGenerateMips: UnityEngine.RenderTextureCreationFlags;
    static CreatedFromScript: UnityEngine.RenderTextureCreationFlags;
    static EnableRandomWrite: UnityEngine.RenderTextureCreationFlags;
    static EyeTexture: UnityEngine.RenderTextureCreationFlags;
    static MipMap: UnityEngine.RenderTextureCreationFlags;
    static SRGB: UnityEngine.RenderTextureCreationFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RenderTextureReadWrite extends System.Enum {
    protected constructor();
    static Default: UnityEngine.RenderTextureReadWrite;
    static Linear: UnityEngine.RenderTextureReadWrite;
    static sRGB: UnityEngine.RenderTextureReadWrite;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RenderTextureMemoryless extends System.Enum {
    protected constructor();
    static Color: UnityEngine.RenderTextureMemoryless;
    static Depth: UnityEngine.RenderTextureMemoryless;
    static MSAA: UnityEngine.RenderTextureMemoryless;
    static None: UnityEngine.RenderTextureMemoryless;
    value__: number;
  }
}
declare namespace UnityEngine {
  class LightmapsMode extends System.Enum {
    protected constructor();
    static CombinedDirectional: UnityEngine.LightmapsMode;
    static Directional: UnityEngine.LightmapsMode;
    static Dual: UnityEngine.LightmapsMode;
    static NonDirectional: UnityEngine.LightmapsMode;
    static SeparateDirectional: UnityEngine.LightmapsMode;
    static Single: UnityEngine.LightmapsMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class MaterialGlobalIlluminationFlags extends System.Enum {
    protected constructor();
    static AnyEmissive: UnityEngine.MaterialGlobalIlluminationFlags;
    static BakedEmissive: UnityEngine.MaterialGlobalIlluminationFlags;
    static EmissiveIsBlack: UnityEngine.MaterialGlobalIlluminationFlags;
    static None: UnityEngine.MaterialGlobalIlluminationFlags;
    static RealtimeEmissive: UnityEngine.MaterialGlobalIlluminationFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CustomRenderTextureInitializationSource extends System.Enum {
    protected constructor();
    static Material: UnityEngine.CustomRenderTextureInitializationSource;
    static TextureAndColor: UnityEngine.CustomRenderTextureInitializationSource;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CustomRenderTextureUpdateMode extends System.Enum {
    protected constructor();
    static OnDemand: UnityEngine.CustomRenderTextureUpdateMode;
    static OnLoad: UnityEngine.CustomRenderTextureUpdateMode;
    static Realtime: UnityEngine.CustomRenderTextureUpdateMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CustomRenderTextureUpdateZoneSpace extends System.Enum {
    protected constructor();
    static Normalized: UnityEngine.CustomRenderTextureUpdateZoneSpace;
    static Pixel: UnityEngine.CustomRenderTextureUpdateZoneSpace;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class OpaqueSortMode extends System.Enum {
    protected constructor();
    static Default: UnityEngine.Rendering.OpaqueSortMode;
    static FrontToBack: UnityEngine.Rendering.OpaqueSortMode;
    static NoDistanceSort: UnityEngine.Rendering.OpaqueSortMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class RenderQueue extends System.Enum {
    protected constructor();
    static AlphaTest: UnityEngine.Rendering.RenderQueue;
    static Background: UnityEngine.Rendering.RenderQueue;
    static Geometry: UnityEngine.Rendering.RenderQueue;
    static GeometryLast: UnityEngine.Rendering.RenderQueue;
    static Overlay: UnityEngine.Rendering.RenderQueue;
    static Transparent: UnityEngine.Rendering.RenderQueue;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class RenderBufferLoadAction extends System.Enum {
    protected constructor();
    static Clear: UnityEngine.Rendering.RenderBufferLoadAction;
    static DontCare: UnityEngine.Rendering.RenderBufferLoadAction;
    static Load: UnityEngine.Rendering.RenderBufferLoadAction;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class RenderBufferStoreAction extends System.Enum {
    protected constructor();
    static DontCare: UnityEngine.Rendering.RenderBufferStoreAction;
    static Resolve: UnityEngine.Rendering.RenderBufferStoreAction;
    static Store: UnityEngine.Rendering.RenderBufferStoreAction;
    static StoreAndResolve: UnityEngine.Rendering.RenderBufferStoreAction;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class BlendMode extends System.Enum {
    protected constructor();
    static DstAlpha: UnityEngine.Rendering.BlendMode;
    static DstColor: UnityEngine.Rendering.BlendMode;
    static One: UnityEngine.Rendering.BlendMode;
    static OneMinusDstAlpha: UnityEngine.Rendering.BlendMode;
    static OneMinusDstColor: UnityEngine.Rendering.BlendMode;
    static OneMinusSrcAlpha: UnityEngine.Rendering.BlendMode;
    static OneMinusSrcColor: UnityEngine.Rendering.BlendMode;
    static SrcAlpha: UnityEngine.Rendering.BlendMode;
    static SrcAlphaSaturate: UnityEngine.Rendering.BlendMode;
    static SrcColor: UnityEngine.Rendering.BlendMode;
    value__: number;
    static Zero: UnityEngine.Rendering.BlendMode;
  }
}
declare namespace UnityEngine.Rendering {
  class BlendOp extends System.Enum {
    protected constructor();
    static Add: UnityEngine.Rendering.BlendOp;
    static ColorBurn: UnityEngine.Rendering.BlendOp;
    static ColorDodge: UnityEngine.Rendering.BlendOp;
    static Darken: UnityEngine.Rendering.BlendOp;
    static Difference: UnityEngine.Rendering.BlendOp;
    static Exclusion: UnityEngine.Rendering.BlendOp;
    static HardLight: UnityEngine.Rendering.BlendOp;
    static HSLColor: UnityEngine.Rendering.BlendOp;
    static HSLHue: UnityEngine.Rendering.BlendOp;
    static HSLLuminosity: UnityEngine.Rendering.BlendOp;
    static HSLSaturation: UnityEngine.Rendering.BlendOp;
    static Lighten: UnityEngine.Rendering.BlendOp;
    static LogicalAnd: UnityEngine.Rendering.BlendOp;
    static LogicalAndInverted: UnityEngine.Rendering.BlendOp;
    static LogicalAndReverse: UnityEngine.Rendering.BlendOp;
    static LogicalClear: UnityEngine.Rendering.BlendOp;
    static LogicalCopy: UnityEngine.Rendering.BlendOp;
    static LogicalCopyInverted: UnityEngine.Rendering.BlendOp;
    static LogicalEquivalence: UnityEngine.Rendering.BlendOp;
    static LogicalInvert: UnityEngine.Rendering.BlendOp;
    static LogicalNand: UnityEngine.Rendering.BlendOp;
    static LogicalNoop: UnityEngine.Rendering.BlendOp;
    static LogicalNor: UnityEngine.Rendering.BlendOp;
    static LogicalOr: UnityEngine.Rendering.BlendOp;
    static LogicalOrInverted: UnityEngine.Rendering.BlendOp;
    static LogicalOrReverse: UnityEngine.Rendering.BlendOp;
    static LogicalSet: UnityEngine.Rendering.BlendOp;
    static LogicalXor: UnityEngine.Rendering.BlendOp;
    static Max: UnityEngine.Rendering.BlendOp;
    static Min: UnityEngine.Rendering.BlendOp;
    static Multiply: UnityEngine.Rendering.BlendOp;
    static Overlay: UnityEngine.Rendering.BlendOp;
    static ReverseSubtract: UnityEngine.Rendering.BlendOp;
    static Screen: UnityEngine.Rendering.BlendOp;
    static SoftLight: UnityEngine.Rendering.BlendOp;
    static Subtract: UnityEngine.Rendering.BlendOp;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class CompareFunction extends System.Enum {
    protected constructor();
    static Always: UnityEngine.Rendering.CompareFunction;
    static Disabled: UnityEngine.Rendering.CompareFunction;
    static Equal: UnityEngine.Rendering.CompareFunction;
    static Greater: UnityEngine.Rendering.CompareFunction;
    static GreaterEqual: UnityEngine.Rendering.CompareFunction;
    static Less: UnityEngine.Rendering.CompareFunction;
    static LessEqual: UnityEngine.Rendering.CompareFunction;
    static Never: UnityEngine.Rendering.CompareFunction;
    static NotEqual: UnityEngine.Rendering.CompareFunction;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class CullMode extends System.Enum {
    protected constructor();
    static Back: UnityEngine.Rendering.CullMode;
    static Front: UnityEngine.Rendering.CullMode;
    static Off: UnityEngine.Rendering.CullMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ColorWriteMask extends System.Enum {
    protected constructor();
    static All: UnityEngine.Rendering.ColorWriteMask;
    static Alpha: UnityEngine.Rendering.ColorWriteMask;
    static Blue: UnityEngine.Rendering.ColorWriteMask;
    static Green: UnityEngine.Rendering.ColorWriteMask;
    static Red: UnityEngine.Rendering.ColorWriteMask;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class StencilOp extends System.Enum {
    protected constructor();
    static DecrementSaturate: UnityEngine.Rendering.StencilOp;
    static DecrementWrap: UnityEngine.Rendering.StencilOp;
    static IncrementSaturate: UnityEngine.Rendering.StencilOp;
    static IncrementWrap: UnityEngine.Rendering.StencilOp;
    static Invert: UnityEngine.Rendering.StencilOp;
    static Keep: UnityEngine.Rendering.StencilOp;
    static Replace: UnityEngine.Rendering.StencilOp;
    value__: number;
    static Zero: UnityEngine.Rendering.StencilOp;
  }
}
declare namespace UnityEngine.Rendering {
  class AmbientMode extends System.Enum {
    protected constructor();
    static Custom: UnityEngine.Rendering.AmbientMode;
    static Flat: UnityEngine.Rendering.AmbientMode;
    static Skybox: UnityEngine.Rendering.AmbientMode;
    static Trilight: UnityEngine.Rendering.AmbientMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class DefaultReflectionMode extends System.Enum {
    protected constructor();
    static Custom: UnityEngine.Rendering.DefaultReflectionMode;
    static Skybox: UnityEngine.Rendering.DefaultReflectionMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionCubemapCompression extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.Rendering.ReflectionCubemapCompression;
    static Compressed: UnityEngine.Rendering.ReflectionCubemapCompression;
    static Uncompressed: UnityEngine.Rendering.ReflectionCubemapCompression;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class CameraEvent extends System.Enum {
    protected constructor();
    static AfterDepthNormalsTexture: UnityEngine.Rendering.CameraEvent;
    static AfterDepthTexture: UnityEngine.Rendering.CameraEvent;
    static AfterEverything: UnityEngine.Rendering.CameraEvent;
    static AfterFinalPass: UnityEngine.Rendering.CameraEvent;
    static AfterForwardAlpha: UnityEngine.Rendering.CameraEvent;
    static AfterForwardOpaque: UnityEngine.Rendering.CameraEvent;
    static AfterGBuffer: UnityEngine.Rendering.CameraEvent;
    static AfterHaloAndLensFlares: UnityEngine.Rendering.CameraEvent;
    static AfterImageEffects: UnityEngine.Rendering.CameraEvent;
    static AfterImageEffectsOpaque: UnityEngine.Rendering.CameraEvent;
    static AfterLighting: UnityEngine.Rendering.CameraEvent;
    static AfterReflections: UnityEngine.Rendering.CameraEvent;
    static AfterSkybox: UnityEngine.Rendering.CameraEvent;
    static BeforeDepthNormalsTexture: UnityEngine.Rendering.CameraEvent;
    static BeforeDepthTexture: UnityEngine.Rendering.CameraEvent;
    static BeforeFinalPass: UnityEngine.Rendering.CameraEvent;
    static BeforeForwardAlpha: UnityEngine.Rendering.CameraEvent;
    static BeforeForwardOpaque: UnityEngine.Rendering.CameraEvent;
    static BeforeGBuffer: UnityEngine.Rendering.CameraEvent;
    static BeforeHaloAndLensFlares: UnityEngine.Rendering.CameraEvent;
    static BeforeImageEffects: UnityEngine.Rendering.CameraEvent;
    static BeforeImageEffectsOpaque: UnityEngine.Rendering.CameraEvent;
    static BeforeLighting: UnityEngine.Rendering.CameraEvent;
    static BeforeReflections: UnityEngine.Rendering.CameraEvent;
    static BeforeSkybox: UnityEngine.Rendering.CameraEvent;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class LightEvent extends System.Enum {
    protected constructor();
    static AfterScreenspaceMask: UnityEngine.Rendering.LightEvent;
    static AfterShadowMap: UnityEngine.Rendering.LightEvent;
    static AfterShadowMapPass: UnityEngine.Rendering.LightEvent;
    static BeforeScreenspaceMask: UnityEngine.Rendering.LightEvent;
    static BeforeShadowMap: UnityEngine.Rendering.LightEvent;
    static BeforeShadowMapPass: UnityEngine.Rendering.LightEvent;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ShadowMapPass extends System.Enum {
    protected constructor();
    static All: UnityEngine.Rendering.ShadowMapPass;
    static Directional: UnityEngine.Rendering.ShadowMapPass;
    static DirectionalCascade0: UnityEngine.Rendering.ShadowMapPass;
    static DirectionalCascade1: UnityEngine.Rendering.ShadowMapPass;
    static DirectionalCascade2: UnityEngine.Rendering.ShadowMapPass;
    static DirectionalCascade3: UnityEngine.Rendering.ShadowMapPass;
    static Pointlight: UnityEngine.Rendering.ShadowMapPass;
    static PointlightNegativeX: UnityEngine.Rendering.ShadowMapPass;
    static PointlightNegativeY: UnityEngine.Rendering.ShadowMapPass;
    static PointlightNegativeZ: UnityEngine.Rendering.ShadowMapPass;
    static PointlightPositiveX: UnityEngine.Rendering.ShadowMapPass;
    static PointlightPositiveY: UnityEngine.Rendering.ShadowMapPass;
    static PointlightPositiveZ: UnityEngine.Rendering.ShadowMapPass;
    static Spotlight: UnityEngine.Rendering.ShadowMapPass;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class BuiltinRenderTextureType extends System.Enum {
    protected constructor();
    static BindableTexture: UnityEngine.Rendering.BuiltinRenderTextureType;
    static BufferPtr: UnityEngine.Rendering.BuiltinRenderTextureType;
    static CameraTarget: UnityEngine.Rendering.BuiltinRenderTextureType;
    static CurrentActive: UnityEngine.Rendering.BuiltinRenderTextureType;
    static Depth: UnityEngine.Rendering.BuiltinRenderTextureType;
    static DepthNormals: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer0: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer1: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer2: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer3: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer4: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer5: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer6: UnityEngine.Rendering.BuiltinRenderTextureType;
    static GBuffer7: UnityEngine.Rendering.BuiltinRenderTextureType;
    static MotionVectors: UnityEngine.Rendering.BuiltinRenderTextureType;
    static None: UnityEngine.Rendering.BuiltinRenderTextureType;
    static PrepassLight: UnityEngine.Rendering.BuiltinRenderTextureType;
    static PrepassLightSpec: UnityEngine.Rendering.BuiltinRenderTextureType;
    static PrepassNormalsSpec: UnityEngine.Rendering.BuiltinRenderTextureType;
    static PropertyName: UnityEngine.Rendering.BuiltinRenderTextureType;
    static Reflections: UnityEngine.Rendering.BuiltinRenderTextureType;
    static ResolvedDepth: UnityEngine.Rendering.BuiltinRenderTextureType;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class PassType extends System.Enum {
    protected constructor();
    static Deferred: UnityEngine.Rendering.PassType;
    static ForwardAdd: UnityEngine.Rendering.PassType;
    static ForwardBase: UnityEngine.Rendering.PassType;
    static LightPrePassBase: UnityEngine.Rendering.PassType;
    static LightPrePassFinal: UnityEngine.Rendering.PassType;
    static Meta: UnityEngine.Rendering.PassType;
    static MotionVectors: UnityEngine.Rendering.PassType;
    static Normal: UnityEngine.Rendering.PassType;
    static ShadowCaster: UnityEngine.Rendering.PassType;
    value__: number;
    static Vertex: UnityEngine.Rendering.PassType;
    static VertexLM: UnityEngine.Rendering.PassType;
    static VertexLMRGBM: UnityEngine.Rendering.PassType;
  }
}
declare namespace UnityEngine.Rendering {
  class ShadowCastingMode extends System.Enum {
    protected constructor();
    static Off: UnityEngine.Rendering.ShadowCastingMode;
    static On: UnityEngine.Rendering.ShadowCastingMode;
    static ShadowsOnly: UnityEngine.Rendering.ShadowCastingMode;
    static TwoSided: UnityEngine.Rendering.ShadowCastingMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class LightShadowResolution extends System.Enum {
    protected constructor();
    static FromQualitySettings: UnityEngine.Rendering.LightShadowResolution;
    static High: UnityEngine.Rendering.LightShadowResolution;
    static Low: UnityEngine.Rendering.LightShadowResolution;
    static Medium: UnityEngine.Rendering.LightShadowResolution;
    value__: number;
    static VeryHigh: UnityEngine.Rendering.LightShadowResolution;
  }
}
declare namespace UnityEngine.Rendering {
  class GraphicsDeviceType extends System.Enum {
    protected constructor();
    static Direct3D11: UnityEngine.Rendering.GraphicsDeviceType;
    static Direct3D12: UnityEngine.Rendering.GraphicsDeviceType;
    static Direct3D9: UnityEngine.Rendering.GraphicsDeviceType;
    static Metal: UnityEngine.Rendering.GraphicsDeviceType;
    static N3DS: UnityEngine.Rendering.GraphicsDeviceType;
    static Null: UnityEngine.Rendering.GraphicsDeviceType;
    static OpenGL2: UnityEngine.Rendering.GraphicsDeviceType;
    static OpenGLCore: UnityEngine.Rendering.GraphicsDeviceType;
    static OpenGLES2: UnityEngine.Rendering.GraphicsDeviceType;
    static OpenGLES3: UnityEngine.Rendering.GraphicsDeviceType;
    static PlayStation3: UnityEngine.Rendering.GraphicsDeviceType;
    static PlayStation4: UnityEngine.Rendering.GraphicsDeviceType;
    static PlayStationMobile: UnityEngine.Rendering.GraphicsDeviceType;
    static PlayStationVita: UnityEngine.Rendering.GraphicsDeviceType;
    value__: number;
    static Vulkan: UnityEngine.Rendering.GraphicsDeviceType;
    static Xbox360: UnityEngine.Rendering.GraphicsDeviceType;
    static XboxOne: UnityEngine.Rendering.GraphicsDeviceType;
  }
}
declare namespace UnityEngine.Rendering {
  class GraphicsTier extends System.Enum {
    protected constructor();
    static Tier1: UnityEngine.Rendering.GraphicsTier;
    static Tier2: UnityEngine.Rendering.GraphicsTier;
    static Tier3: UnityEngine.Rendering.GraphicsTier;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class RenderTargetIdentifier extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    Equals(rhs: UnityEngine.Rendering.RenderTargetIdentifier): boolean;
    GetHashCode(): number;
    ToString(): string;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeUsage extends System.Enum {
    protected constructor();
    static BlendProbes: UnityEngine.Rendering.ReflectionProbeUsage;
    static BlendProbesAndSkybox: UnityEngine.Rendering.ReflectionProbeUsage;
    static Off: UnityEngine.Rendering.ReflectionProbeUsage;
    static Simple: UnityEngine.Rendering.ReflectionProbeUsage;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeType extends System.Enum {
    protected constructor();
    static Card: UnityEngine.Rendering.ReflectionProbeType;
    static Cube: UnityEngine.Rendering.ReflectionProbeType;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeClearFlags extends System.Enum {
    protected constructor();
    static Skybox: UnityEngine.Rendering.ReflectionProbeClearFlags;
    static SolidColor: UnityEngine.Rendering.ReflectionProbeClearFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeMode extends System.Enum {
    protected constructor();
    static Baked: UnityEngine.Rendering.ReflectionProbeMode;
    static Custom: UnityEngine.Rendering.ReflectionProbeMode;
    static Realtime: UnityEngine.Rendering.ReflectionProbeMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeBlendInfo extends System.ValueType {
    protected constructor();
    probe: UnityEngine.ReflectionProbe;
    weight: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeRefreshMode extends System.Enum {
    protected constructor();
    static EveryFrame: UnityEngine.Rendering.ReflectionProbeRefreshMode;
    static OnAwake: UnityEngine.Rendering.ReflectionProbeRefreshMode;
    value__: number;
    static ViaScripting: UnityEngine.Rendering.ReflectionProbeRefreshMode;
  }
}
declare namespace UnityEngine.Rendering {
  class ReflectionProbeTimeSlicingMode extends System.Enum {
    protected constructor();
    static AllFacesAtOnce: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
    static IndividualFaces: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
    static NoTimeSlicing: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class ShadowSamplingMode extends System.Enum {
    protected constructor();
    static CompareDepths: UnityEngine.Rendering.ShadowSamplingMode;
    static None: UnityEngine.Rendering.ShadowSamplingMode;
    static RawDepth: UnityEngine.Rendering.ShadowSamplingMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class LightProbeUsage extends System.Enum {
    protected constructor();
    static BlendProbes: UnityEngine.Rendering.LightProbeUsage;
    static Off: UnityEngine.Rendering.LightProbeUsage;
    static UseProxyVolume: UnityEngine.Rendering.LightProbeUsage;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class BuiltinShaderType extends System.Enum {
    protected constructor();
    static DeferredReflections: UnityEngine.Rendering.BuiltinShaderType;
    static DeferredShading: UnityEngine.Rendering.BuiltinShaderType;
    static DepthNormals: UnityEngine.Rendering.BuiltinShaderType;
    static LegacyDeferredLighting: UnityEngine.Rendering.BuiltinShaderType;
    static LensFlare: UnityEngine.Rendering.BuiltinShaderType;
    static LightHalo: UnityEngine.Rendering.BuiltinShaderType;
    static MotionVectors: UnityEngine.Rendering.BuiltinShaderType;
    static ScreenSpaceShadows: UnityEngine.Rendering.BuiltinShaderType;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class BuiltinShaderMode extends System.Enum {
    protected constructor();
    static Disabled: UnityEngine.Rendering.BuiltinShaderMode;
    static UseBuiltin: UnityEngine.Rendering.BuiltinShaderMode;
    static UseCustom: UnityEngine.Rendering.BuiltinShaderMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class BuiltinShaderDefine extends System.Enum {
    protected constructor();
    static SHADER_API_DESKTOP: UnityEngine.Rendering.BuiltinShaderDefine;
    static SHADER_API_MOBILE: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_COLORSPACE_GAMMA: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_ENABLE_DETAIL_NORMALMAP: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_ENABLE_REFLECTION_BUFFERS: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_FRAMEBUFFER_FETCH_AVAILABLE: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_HARDWARE_TIER1: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_HARDWARE_TIER2: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_HARDWARE_TIER3: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_METAL_SHADOWS_USE_POINT_FILTERING: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_NO_CUBEMAP_ARRAY: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_NO_DXT5nm: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_NO_FULL_STANDARD_SHADER: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_NO_RGBM: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_NO_SCREENSPACE_SHADOWS: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_PBS_USE_BRDF1: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_PBS_USE_BRDF2: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_PBS_USE_BRDF3: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_SPECCUBE_BLENDING: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_SPECCUBE_BOX_PROJECTION: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS: UnityEngine.Rendering.BuiltinShaderDefine;
    static UNITY_USE_NATIVE_HDR: UnityEngine.Rendering.BuiltinShaderDefine;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class TextureDimension extends System.Enum {
    protected constructor();
    static Any: UnityEngine.Rendering.TextureDimension;
    static Cube: UnityEngine.Rendering.TextureDimension;
    static CubeArray: UnityEngine.Rendering.TextureDimension;
    static None: UnityEngine.Rendering.TextureDimension;
    static Tex2D: UnityEngine.Rendering.TextureDimension;
    static Tex2DArray: UnityEngine.Rendering.TextureDimension;
    static Tex3D: UnityEngine.Rendering.TextureDimension;
    static Unknown: UnityEngine.Rendering.TextureDimension;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class CopyTextureSupport extends System.Enum {
    protected constructor();
    static Basic: UnityEngine.Rendering.CopyTextureSupport;
    static Copy3D: UnityEngine.Rendering.CopyTextureSupport;
    static DifferentTypes: UnityEngine.Rendering.CopyTextureSupport;
    static None: UnityEngine.Rendering.CopyTextureSupport;
    static RTToTexture: UnityEngine.Rendering.CopyTextureSupport;
    static TextureToRT: UnityEngine.Rendering.CopyTextureSupport;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class CameraHDRMode extends System.Enum {
    protected constructor();
    static FP16: UnityEngine.Rendering.CameraHDRMode;
    static R11G11B10: UnityEngine.Rendering.CameraHDRMode;
    value__: number;
  }
}
declare namespace UnityEngine.Rendering {
  class RealtimeGICPUUsage extends System.Enum {
    protected constructor();
    static High: UnityEngine.Rendering.RealtimeGICPUUsage;
    static Low: UnityEngine.Rendering.RealtimeGICPUUsage;
    static Medium: UnityEngine.Rendering.RealtimeGICPUUsage;
    static Unlimited: UnityEngine.Rendering.RealtimeGICPUUsage;
    value__: number;
  }
}
declare namespace UnityEngine {
  class GUIStateObjects extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class IExposedPropertyTable {
    protected constructor();
    ClearReferenceValue(id: UnityEngine.PropertyName): void;
    GetReferenceValue(id: UnityEngine.PropertyName, idValid: any): UnityEngine.Object;
    SetReferenceValue(id: UnityEngine.PropertyName, value: UnityEngine.Object): void;
  }
}
declare namespace JetBrains.Annotations {
  class CanBeNullAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class NotNullAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class StringFormatMethodAttribute extends System.Attribute {
    constructor(formatParameterName: string);
    readonly FormatParameterName: string;
  }
}
declare namespace JetBrains.Annotations {
  class InvokerParameterNameAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class NotifyPropertyChangedInvocatorAttribute extends System.Attribute {
    constructor();
    constructor(parameterName: string);
    readonly ParameterName: string;
  }
}
declare namespace JetBrains.Annotations {
  class ContractAnnotationAttribute extends System.Attribute {
    constructor(contract: string);
    constructor(contract: string, forceFullStates: boolean);
    readonly Contract: string;
    readonly ForceFullStates: boolean;
  }
}
declare namespace JetBrains.Annotations {
  class LocalizationRequiredAttribute extends System.Attribute {
    constructor();
    constructor(required: boolean);
    readonly Required: boolean;
  }
}
declare namespace JetBrains.Annotations {
  class CannotApplyEqualityOperatorAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class BaseTypeRequiredAttribute extends System.Attribute {
    constructor(baseType: any);
    readonly BaseType: any;
  }
}
declare namespace JetBrains.Annotations {
  class UsedImplicitlyAttribute extends System.Attribute {
    constructor();
    constructor(useKindFlags: JetBrains.Annotations.ImplicitUseKindFlags);
    constructor(targetFlags: JetBrains.Annotations.ImplicitUseTargetFlags);
    constructor(useKindFlags: JetBrains.Annotations.ImplicitUseKindFlags, targetFlags: JetBrains.Annotations.ImplicitUseTargetFlags);
    readonly TargetFlags: JetBrains.Annotations.ImplicitUseTargetFlags;
    readonly UseKindFlags: JetBrains.Annotations.ImplicitUseKindFlags;
  }
}
declare namespace JetBrains.Annotations {
  class MeansImplicitUseAttribute extends System.Attribute {
    constructor();
    constructor(useKindFlags: JetBrains.Annotations.ImplicitUseKindFlags);
    constructor(targetFlags: JetBrains.Annotations.ImplicitUseTargetFlags);
    constructor(useKindFlags: JetBrains.Annotations.ImplicitUseKindFlags, targetFlags: JetBrains.Annotations.ImplicitUseTargetFlags);
    readonly TargetFlags: JetBrains.Annotations.ImplicitUseTargetFlags;
    readonly UseKindFlags: JetBrains.Annotations.ImplicitUseKindFlags;
  }
}
declare namespace JetBrains.Annotations {
  class ImplicitUseKindFlags extends System.Enum {
    protected constructor();
    static Access: JetBrains.Annotations.ImplicitUseKindFlags;
    static Assign: JetBrains.Annotations.ImplicitUseKindFlags;
    static Default: JetBrains.Annotations.ImplicitUseKindFlags;
    static InstantiatedNoFixedConstructorSignature: JetBrains.Annotations.ImplicitUseKindFlags;
    static InstantiatedWithFixedConstructorSignature: JetBrains.Annotations.ImplicitUseKindFlags;
    value__: number;
  }
}
declare namespace JetBrains.Annotations {
  class ImplicitUseTargetFlags extends System.Enum {
    protected constructor();
    static Default: JetBrains.Annotations.ImplicitUseTargetFlags;
    static Itself: JetBrains.Annotations.ImplicitUseTargetFlags;
    static Members: JetBrains.Annotations.ImplicitUseTargetFlags;
    value__: number;
    static WithMembers: JetBrains.Annotations.ImplicitUseTargetFlags;
  }
}
declare namespace JetBrains.Annotations {
  class PublicAPIAttribute extends System.Attribute {
    constructor();
    constructor(comment: string);
    readonly Comment: string;
  }
}
declare namespace JetBrains.Annotations {
  class InstantHandleAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class PureAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class PathReferenceAttribute extends System.Attribute {
    constructor();
    constructor(basePath: string);
    readonly BasePath: string;
  }
}
declare namespace JetBrains.Annotations {
  class NoEnumerationAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class AssertionMethodAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace JetBrains.Annotations {
  class LinqTunnelAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class KeyCode extends System.Enum {
    protected constructor();
    static A: UnityEngine.KeyCode;
    static Alpha0: UnityEngine.KeyCode;
    static Alpha1: UnityEngine.KeyCode;
    static Alpha2: UnityEngine.KeyCode;
    static Alpha3: UnityEngine.KeyCode;
    static Alpha4: UnityEngine.KeyCode;
    static Alpha5: UnityEngine.KeyCode;
    static Alpha6: UnityEngine.KeyCode;
    static Alpha7: UnityEngine.KeyCode;
    static Alpha8: UnityEngine.KeyCode;
    static Alpha9: UnityEngine.KeyCode;
    static AltGr: UnityEngine.KeyCode;
    static Ampersand: UnityEngine.KeyCode;
    static Asterisk: UnityEngine.KeyCode;
    static At: UnityEngine.KeyCode;
    static B: UnityEngine.KeyCode;
    static BackQuote: UnityEngine.KeyCode;
    static Backslash: UnityEngine.KeyCode;
    static Backspace: UnityEngine.KeyCode;
    static Break: UnityEngine.KeyCode;
    static C: UnityEngine.KeyCode;
    static CapsLock: UnityEngine.KeyCode;
    static Caret: UnityEngine.KeyCode;
    static Clear: UnityEngine.KeyCode;
    static Colon: UnityEngine.KeyCode;
    static Comma: UnityEngine.KeyCode;
    static D: UnityEngine.KeyCode;
    static Delete: UnityEngine.KeyCode;
    static Dollar: UnityEngine.KeyCode;
    static DoubleQuote: UnityEngine.KeyCode;
    static DownArrow: UnityEngine.KeyCode;
    static E: UnityEngine.KeyCode;
    static End: UnityEngine.KeyCode;
    static Equals: UnityEngine.KeyCode;
    static Escape: UnityEngine.KeyCode;
    static Exclaim: UnityEngine.KeyCode;
    static F: UnityEngine.KeyCode;
    static F1: UnityEngine.KeyCode;
    static F10: UnityEngine.KeyCode;
    static F11: UnityEngine.KeyCode;
    static F12: UnityEngine.KeyCode;
    static F13: UnityEngine.KeyCode;
    static F14: UnityEngine.KeyCode;
    static F15: UnityEngine.KeyCode;
    static F2: UnityEngine.KeyCode;
    static F3: UnityEngine.KeyCode;
    static F4: UnityEngine.KeyCode;
    static F5: UnityEngine.KeyCode;
    static F6: UnityEngine.KeyCode;
    static F7: UnityEngine.KeyCode;
    static F8: UnityEngine.KeyCode;
    static F9: UnityEngine.KeyCode;
    static G: UnityEngine.KeyCode;
    static Greater: UnityEngine.KeyCode;
    static H: UnityEngine.KeyCode;
    static Hash: UnityEngine.KeyCode;
    static Help: UnityEngine.KeyCode;
    static Home: UnityEngine.KeyCode;
    static I: UnityEngine.KeyCode;
    static Insert: UnityEngine.KeyCode;
    static J: UnityEngine.KeyCode;
    static Joystick1Button0: UnityEngine.KeyCode;
    static Joystick1Button1: UnityEngine.KeyCode;
    static Joystick1Button10: UnityEngine.KeyCode;
    static Joystick1Button11: UnityEngine.KeyCode;
    static Joystick1Button12: UnityEngine.KeyCode;
    static Joystick1Button13: UnityEngine.KeyCode;
    static Joystick1Button14: UnityEngine.KeyCode;
    static Joystick1Button15: UnityEngine.KeyCode;
    static Joystick1Button16: UnityEngine.KeyCode;
    static Joystick1Button17: UnityEngine.KeyCode;
    static Joystick1Button18: UnityEngine.KeyCode;
    static Joystick1Button19: UnityEngine.KeyCode;
    static Joystick1Button2: UnityEngine.KeyCode;
    static Joystick1Button3: UnityEngine.KeyCode;
    static Joystick1Button4: UnityEngine.KeyCode;
    static Joystick1Button5: UnityEngine.KeyCode;
    static Joystick1Button6: UnityEngine.KeyCode;
    static Joystick1Button7: UnityEngine.KeyCode;
    static Joystick1Button8: UnityEngine.KeyCode;
    static Joystick1Button9: UnityEngine.KeyCode;
    static Joystick2Button0: UnityEngine.KeyCode;
    static Joystick2Button1: UnityEngine.KeyCode;
    static Joystick2Button10: UnityEngine.KeyCode;
    static Joystick2Button11: UnityEngine.KeyCode;
    static Joystick2Button12: UnityEngine.KeyCode;
    static Joystick2Button13: UnityEngine.KeyCode;
    static Joystick2Button14: UnityEngine.KeyCode;
    static Joystick2Button15: UnityEngine.KeyCode;
    static Joystick2Button16: UnityEngine.KeyCode;
    static Joystick2Button17: UnityEngine.KeyCode;
    static Joystick2Button18: UnityEngine.KeyCode;
    static Joystick2Button19: UnityEngine.KeyCode;
    static Joystick2Button2: UnityEngine.KeyCode;
    static Joystick2Button3: UnityEngine.KeyCode;
    static Joystick2Button4: UnityEngine.KeyCode;
    static Joystick2Button5: UnityEngine.KeyCode;
    static Joystick2Button6: UnityEngine.KeyCode;
    static Joystick2Button7: UnityEngine.KeyCode;
    static Joystick2Button8: UnityEngine.KeyCode;
    static Joystick2Button9: UnityEngine.KeyCode;
    static Joystick3Button0: UnityEngine.KeyCode;
    static Joystick3Button1: UnityEngine.KeyCode;
    static Joystick3Button10: UnityEngine.KeyCode;
    static Joystick3Button11: UnityEngine.KeyCode;
    static Joystick3Button12: UnityEngine.KeyCode;
    static Joystick3Button13: UnityEngine.KeyCode;
    static Joystick3Button14: UnityEngine.KeyCode;
    static Joystick3Button15: UnityEngine.KeyCode;
    static Joystick3Button16: UnityEngine.KeyCode;
    static Joystick3Button17: UnityEngine.KeyCode;
    static Joystick3Button18: UnityEngine.KeyCode;
    static Joystick3Button19: UnityEngine.KeyCode;
    static Joystick3Button2: UnityEngine.KeyCode;
    static Joystick3Button3: UnityEngine.KeyCode;
    static Joystick3Button4: UnityEngine.KeyCode;
    static Joystick3Button5: UnityEngine.KeyCode;
    static Joystick3Button6: UnityEngine.KeyCode;
    static Joystick3Button7: UnityEngine.KeyCode;
    static Joystick3Button8: UnityEngine.KeyCode;
    static Joystick3Button9: UnityEngine.KeyCode;
    static Joystick4Button0: UnityEngine.KeyCode;
    static Joystick4Button1: UnityEngine.KeyCode;
    static Joystick4Button10: UnityEngine.KeyCode;
    static Joystick4Button11: UnityEngine.KeyCode;
    static Joystick4Button12: UnityEngine.KeyCode;
    static Joystick4Button13: UnityEngine.KeyCode;
    static Joystick4Button14: UnityEngine.KeyCode;
    static Joystick4Button15: UnityEngine.KeyCode;
    static Joystick4Button16: UnityEngine.KeyCode;
    static Joystick4Button17: UnityEngine.KeyCode;
    static Joystick4Button18: UnityEngine.KeyCode;
    static Joystick4Button19: UnityEngine.KeyCode;
    static Joystick4Button2: UnityEngine.KeyCode;
    static Joystick4Button3: UnityEngine.KeyCode;
    static Joystick4Button4: UnityEngine.KeyCode;
    static Joystick4Button5: UnityEngine.KeyCode;
    static Joystick4Button6: UnityEngine.KeyCode;
    static Joystick4Button7: UnityEngine.KeyCode;
    static Joystick4Button8: UnityEngine.KeyCode;
    static Joystick4Button9: UnityEngine.KeyCode;
    static Joystick5Button0: UnityEngine.KeyCode;
    static Joystick5Button1: UnityEngine.KeyCode;
    static Joystick5Button10: UnityEngine.KeyCode;
    static Joystick5Button11: UnityEngine.KeyCode;
    static Joystick5Button12: UnityEngine.KeyCode;
    static Joystick5Button13: UnityEngine.KeyCode;
    static Joystick5Button14: UnityEngine.KeyCode;
    static Joystick5Button15: UnityEngine.KeyCode;
    static Joystick5Button16: UnityEngine.KeyCode;
    static Joystick5Button17: UnityEngine.KeyCode;
    static Joystick5Button18: UnityEngine.KeyCode;
    static Joystick5Button19: UnityEngine.KeyCode;
    static Joystick5Button2: UnityEngine.KeyCode;
    static Joystick5Button3: UnityEngine.KeyCode;
    static Joystick5Button4: UnityEngine.KeyCode;
    static Joystick5Button5: UnityEngine.KeyCode;
    static Joystick5Button6: UnityEngine.KeyCode;
    static Joystick5Button7: UnityEngine.KeyCode;
    static Joystick5Button8: UnityEngine.KeyCode;
    static Joystick5Button9: UnityEngine.KeyCode;
    static Joystick6Button0: UnityEngine.KeyCode;
    static Joystick6Button1: UnityEngine.KeyCode;
    static Joystick6Button10: UnityEngine.KeyCode;
    static Joystick6Button11: UnityEngine.KeyCode;
    static Joystick6Button12: UnityEngine.KeyCode;
    static Joystick6Button13: UnityEngine.KeyCode;
    static Joystick6Button14: UnityEngine.KeyCode;
    static Joystick6Button15: UnityEngine.KeyCode;
    static Joystick6Button16: UnityEngine.KeyCode;
    static Joystick6Button17: UnityEngine.KeyCode;
    static Joystick6Button18: UnityEngine.KeyCode;
    static Joystick6Button19: UnityEngine.KeyCode;
    static Joystick6Button2: UnityEngine.KeyCode;
    static Joystick6Button3: UnityEngine.KeyCode;
    static Joystick6Button4: UnityEngine.KeyCode;
    static Joystick6Button5: UnityEngine.KeyCode;
    static Joystick6Button6: UnityEngine.KeyCode;
    static Joystick6Button7: UnityEngine.KeyCode;
    static Joystick6Button8: UnityEngine.KeyCode;
    static Joystick6Button9: UnityEngine.KeyCode;
    static Joystick7Button0: UnityEngine.KeyCode;
    static Joystick7Button1: UnityEngine.KeyCode;
    static Joystick7Button10: UnityEngine.KeyCode;
    static Joystick7Button11: UnityEngine.KeyCode;
    static Joystick7Button12: UnityEngine.KeyCode;
    static Joystick7Button13: UnityEngine.KeyCode;
    static Joystick7Button14: UnityEngine.KeyCode;
    static Joystick7Button15: UnityEngine.KeyCode;
    static Joystick7Button16: UnityEngine.KeyCode;
    static Joystick7Button17: UnityEngine.KeyCode;
    static Joystick7Button18: UnityEngine.KeyCode;
    static Joystick7Button19: UnityEngine.KeyCode;
    static Joystick7Button2: UnityEngine.KeyCode;
    static Joystick7Button3: UnityEngine.KeyCode;
    static Joystick7Button4: UnityEngine.KeyCode;
    static Joystick7Button5: UnityEngine.KeyCode;
    static Joystick7Button6: UnityEngine.KeyCode;
    static Joystick7Button7: UnityEngine.KeyCode;
    static Joystick7Button8: UnityEngine.KeyCode;
    static Joystick7Button9: UnityEngine.KeyCode;
    static Joystick8Button0: UnityEngine.KeyCode;
    static Joystick8Button1: UnityEngine.KeyCode;
    static Joystick8Button10: UnityEngine.KeyCode;
    static Joystick8Button11: UnityEngine.KeyCode;
    static Joystick8Button12: UnityEngine.KeyCode;
    static Joystick8Button13: UnityEngine.KeyCode;
    static Joystick8Button14: UnityEngine.KeyCode;
    static Joystick8Button15: UnityEngine.KeyCode;
    static Joystick8Button16: UnityEngine.KeyCode;
    static Joystick8Button17: UnityEngine.KeyCode;
    static Joystick8Button18: UnityEngine.KeyCode;
    static Joystick8Button19: UnityEngine.KeyCode;
    static Joystick8Button2: UnityEngine.KeyCode;
    static Joystick8Button3: UnityEngine.KeyCode;
    static Joystick8Button4: UnityEngine.KeyCode;
    static Joystick8Button5: UnityEngine.KeyCode;
    static Joystick8Button6: UnityEngine.KeyCode;
    static Joystick8Button7: UnityEngine.KeyCode;
    static Joystick8Button8: UnityEngine.KeyCode;
    static Joystick8Button9: UnityEngine.KeyCode;
    static JoystickButton0: UnityEngine.KeyCode;
    static JoystickButton1: UnityEngine.KeyCode;
    static JoystickButton10: UnityEngine.KeyCode;
    static JoystickButton11: UnityEngine.KeyCode;
    static JoystickButton12: UnityEngine.KeyCode;
    static JoystickButton13: UnityEngine.KeyCode;
    static JoystickButton14: UnityEngine.KeyCode;
    static JoystickButton15: UnityEngine.KeyCode;
    static JoystickButton16: UnityEngine.KeyCode;
    static JoystickButton17: UnityEngine.KeyCode;
    static JoystickButton18: UnityEngine.KeyCode;
    static JoystickButton19: UnityEngine.KeyCode;
    static JoystickButton2: UnityEngine.KeyCode;
    static JoystickButton3: UnityEngine.KeyCode;
    static JoystickButton4: UnityEngine.KeyCode;
    static JoystickButton5: UnityEngine.KeyCode;
    static JoystickButton6: UnityEngine.KeyCode;
    static JoystickButton7: UnityEngine.KeyCode;
    static JoystickButton8: UnityEngine.KeyCode;
    static JoystickButton9: UnityEngine.KeyCode;
    static K: UnityEngine.KeyCode;
    static Keypad0: UnityEngine.KeyCode;
    static Keypad1: UnityEngine.KeyCode;
    static Keypad2: UnityEngine.KeyCode;
    static Keypad3: UnityEngine.KeyCode;
    static Keypad4: UnityEngine.KeyCode;
    static Keypad5: UnityEngine.KeyCode;
    static Keypad6: UnityEngine.KeyCode;
    static Keypad7: UnityEngine.KeyCode;
    static Keypad8: UnityEngine.KeyCode;
    static Keypad9: UnityEngine.KeyCode;
    static KeypadDivide: UnityEngine.KeyCode;
    static KeypadEnter: UnityEngine.KeyCode;
    static KeypadEquals: UnityEngine.KeyCode;
    static KeypadMinus: UnityEngine.KeyCode;
    static KeypadMultiply: UnityEngine.KeyCode;
    static KeypadPeriod: UnityEngine.KeyCode;
    static KeypadPlus: UnityEngine.KeyCode;
    static L: UnityEngine.KeyCode;
    static LeftAlt: UnityEngine.KeyCode;
    static LeftApple: UnityEngine.KeyCode;
    static LeftArrow: UnityEngine.KeyCode;
    static LeftBracket: UnityEngine.KeyCode;
    static LeftCommand: UnityEngine.KeyCode;
    static LeftControl: UnityEngine.KeyCode;
    static LeftParen: UnityEngine.KeyCode;
    static LeftShift: UnityEngine.KeyCode;
    static LeftWindows: UnityEngine.KeyCode;
    static Less: UnityEngine.KeyCode;
    static M: UnityEngine.KeyCode;
    static Menu: UnityEngine.KeyCode;
    static Minus: UnityEngine.KeyCode;
    static Mouse0: UnityEngine.KeyCode;
    static Mouse1: UnityEngine.KeyCode;
    static Mouse2: UnityEngine.KeyCode;
    static Mouse3: UnityEngine.KeyCode;
    static Mouse4: UnityEngine.KeyCode;
    static Mouse5: UnityEngine.KeyCode;
    static Mouse6: UnityEngine.KeyCode;
    static N: UnityEngine.KeyCode;
    static None: UnityEngine.KeyCode;
    static Numlock: UnityEngine.KeyCode;
    static O: UnityEngine.KeyCode;
    static P: UnityEngine.KeyCode;
    static PageDown: UnityEngine.KeyCode;
    static PageUp: UnityEngine.KeyCode;
    static Pause: UnityEngine.KeyCode;
    static Period: UnityEngine.KeyCode;
    static Plus: UnityEngine.KeyCode;
    static Print: UnityEngine.KeyCode;
    static Q: UnityEngine.KeyCode;
    static Question: UnityEngine.KeyCode;
    static Quote: UnityEngine.KeyCode;
    static R: UnityEngine.KeyCode;
    static Return: UnityEngine.KeyCode;
    static RightAlt: UnityEngine.KeyCode;
    static RightApple: UnityEngine.KeyCode;
    static RightArrow: UnityEngine.KeyCode;
    static RightBracket: UnityEngine.KeyCode;
    static RightCommand: UnityEngine.KeyCode;
    static RightControl: UnityEngine.KeyCode;
    static RightParen: UnityEngine.KeyCode;
    static RightShift: UnityEngine.KeyCode;
    static RightWindows: UnityEngine.KeyCode;
    static S: UnityEngine.KeyCode;
    static ScrollLock: UnityEngine.KeyCode;
    static Semicolon: UnityEngine.KeyCode;
    static Slash: UnityEngine.KeyCode;
    static Space: UnityEngine.KeyCode;
    static SysReq: UnityEngine.KeyCode;
    static T: UnityEngine.KeyCode;
    static Tab: UnityEngine.KeyCode;
    static U: UnityEngine.KeyCode;
    static Underscore: UnityEngine.KeyCode;
    static UpArrow: UnityEngine.KeyCode;
    static V: UnityEngine.KeyCode;
    value__: number;
    static W: UnityEngine.KeyCode;
    static X: UnityEngine.KeyCode;
    static Y: UnityEngine.KeyCode;
    static Z: UnityEngine.KeyCode;
  }
}
declare namespace UnityEngine {
  class LightmappingMode extends System.Enum {
    protected constructor();
    static Baked: UnityEngine.LightmappingMode;
    static Mixed: UnityEngine.LightmappingMode;
    static Realtime: UnityEngine.LightmappingMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ManagedStreamHelpers extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngineInternal {
  class MathfInternal extends System.ValueType {
    protected constructor();
    static FloatMinDenormal: number;
    static FloatMinNormal: number;
    static IsFlushToZeroEnabled: boolean;
  }
}
declare namespace UnityEngine {
  class BoneWeight extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    boneIndex0: number;
    boneIndex1: number;
    boneIndex2: number;
    boneIndex3: number;
    weight0: number;
    weight1: number;
    weight2: number;
    weight3: number;
  }
}
declare namespace UnityEngine {
  class CombineInstance extends System.ValueType {
    protected constructor();
    lightmapScaleOffset: UnityEngine.Vector4;
    mesh: UnityEngine.Mesh;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    subMeshIndex: number;
    transform: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngineInternal {
  class ScriptingUtils extends System.Object {
    constructor();
    static CreateDelegate(type: any, methodInfo: any): any;
  }
}
declare namespace UnityEngine {
  class SendMouseEvents extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.SendMouseEvents {
  class HitInfo extends System.ValueType {
    protected constructor();
    static Compare(lhs: UnityEngine.SendMouseEvents.HitInfo, rhs: UnityEngine.SendMouseEvents.HitInfo): boolean;
    SendMessage(name: string): void;
    camera: UnityEngine.Camera;
    target: UnityEngine.GameObject;
  }
}
declare namespace UnityEngine {
  class Plane extends System.ValueType {
    protected constructor();
    ClosestPointOnPlane(point: UnityEngine.Vector3): UnityEngine.Vector3;
    Flip(): void;
    GetDistanceToPoint(point: UnityEngine.Vector3): number;
    GetSide(point: UnityEngine.Vector3): boolean;
    Raycast(ray: UnityEngine.Ray, enter: any): boolean;
    SameSide(inPt0: UnityEngine.Vector3, inPt1: UnityEngine.Vector3): boolean;
    Set3Points(a: UnityEngine.Vector3, b: UnityEngine.Vector3, c: UnityEngine.Vector3): void;
    SetNormalAndPosition(inNormal: UnityEngine.Vector3, inPoint: UnityEngine.Vector3): void;
    ToString(): string;
    ToString(format: string): string;
    static Translate(plane: UnityEngine.Plane, translation: UnityEngine.Vector3): UnityEngine.Plane;
    Translate(translation: UnityEngine.Vector3): void;
    distance: number;
    readonly flipped: UnityEngine.Plane;
    normal: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class Pose extends System.ValueType {
    protected constructor();
    GetTransformedBy(lhs: UnityEngine.Pose): UnityEngine.Pose;
    GetTransformedBy(lhs: UnityEngine.Transform): UnityEngine.Pose;
    ToString(): string;
    ToString(format: string): string;
    readonly forward: UnityEngine.Vector3;
    static readonly identity: UnityEngine.Pose;
    readonly right: UnityEngine.Vector3;
    readonly up: UnityEngine.Vector3;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
  }
}
declare namespace UnityEngine {
  class PropertyAttribute extends System.Attribute {
    protected constructor();
    order: number;
  }
}
declare namespace UnityEngine {
  class ContextMenuItemAttribute extends UnityEngine.PropertyAttribute {
    constructor(name: string, function_: string);
    "function": string;
    name: string;
  }
}
declare namespace UnityEngine {
  class TooltipAttribute extends UnityEngine.PropertyAttribute {
    constructor(tooltip: string);
    tooltip: string;
  }
}
declare namespace UnityEngine {
  class SpaceAttribute extends UnityEngine.PropertyAttribute {
    constructor();
    constructor(height: number);
    height: number;
  }
}
declare namespace UnityEngine {
  class HeaderAttribute extends UnityEngine.PropertyAttribute {
    constructor(header: string);
    header: string;
  }
}
declare namespace UnityEngine {
  class RangeAttribute extends UnityEngine.PropertyAttribute {
    constructor(min: number, max: number);
    max: number;
    min: number;
  }
}
declare namespace UnityEngine {
  class MultilineAttribute extends UnityEngine.PropertyAttribute {
    constructor();
    constructor(lines: number);
    lines: number;
  }
}
declare namespace UnityEngine {
  class TextAreaAttribute extends UnityEngine.PropertyAttribute {
    constructor();
    constructor(minLines: number, maxLines: number);
    maxLines: number;
    minLines: number;
  }
}
declare namespace UnityEngine {
  class ColorUsageAttribute extends UnityEngine.PropertyAttribute {
    constructor(showAlpha: boolean);
    constructor(showAlpha: boolean, hdr: boolean, minBrightness: number, maxBrightness: number, minExposureValue: number, maxExposureValue: number);
    hdr: boolean;
    maxBrightness: number;
    maxExposureValue: number;
    minBrightness: number;
    minExposureValue: number;
    showAlpha: boolean;
  }
}
declare namespace UnityEngine {
  class DelayedAttribute extends UnityEngine.PropertyAttribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class PropertyNameUtils extends System.Object {
    constructor();
    static ConflictCountForID(id: number): number;
    static PropertyNameFromString(name: string): UnityEngine.PropertyName;
    static StringFromPropertyName(propertyName: UnityEngine.PropertyName): string;
  }
}
declare namespace UnityEngine {
  class PropertyName extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    static IsNullOrEmpty(prop: UnityEngine.PropertyName): boolean;
    ToString(): string;
  }
}
declare namespace UnityEngine {
  class RangeInt extends System.ValueType {
    protected constructor();
    readonly end: number;
    length: number;
    start: number;
  }
}
declare namespace UnityEngine {
  class Ray extends System.ValueType {
    protected constructor();
    GetPoint(distance: number): UnityEngine.Vector3;
    ToString(): string;
    ToString(format: string): string;
    direction: UnityEngine.Vector3;
    origin: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class Ray2D extends System.ValueType {
    protected constructor();
    GetPoint(distance: number): UnityEngine.Vector2;
    ToString(): string;
    ToString(format: string): string;
    direction: UnityEngine.Vector2;
    origin: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class Rect extends System.ValueType {
    protected constructor();
    Contains(point: UnityEngine.Vector2): boolean;
    Contains(point: UnityEngine.Vector3): boolean;
    Contains(point: UnityEngine.Vector3, allowInverse: boolean): boolean;
    Equals(other: any): boolean;
    GetHashCode(): number;
    static MinMaxRect(xmin: number, ymin: number, xmax: number, ymax: number): UnityEngine.Rect;
    static NormalizedToPoint(rectangle: UnityEngine.Rect, normalizedRectCoordinates: UnityEngine.Vector2): UnityEngine.Vector2;
    Overlaps(other: UnityEngine.Rect): boolean;
    Overlaps(other: UnityEngine.Rect, allowInverse: boolean): boolean;
    static PointToNormalized(rectangle: UnityEngine.Rect, point: UnityEngine.Vector2): UnityEngine.Vector2;
    Set(x: number, y: number, width: number, height: number): void;
    ToString(): string;
    ToString(format: string): string;
    readonly bottom: number;
    center: UnityEngine.Vector2;
    height: number;
    readonly left: number;
    max: UnityEngine.Vector2;
    min: UnityEngine.Vector2;
    position: UnityEngine.Vector2;
    readonly right: number;
    size: UnityEngine.Vector2;
    readonly top: number;
    width: number;
    x: number;
    xMax: number;
    xMin: number;
    y: number;
    yMax: number;
    yMin: number;
    static readonly zero: UnityEngine.Rect;
  }
}
declare namespace UnityEngine {
  class RectInt extends System.ValueType {
    protected constructor();
    ClampToBounds(bounds: UnityEngine.RectInt): void;
    Contains(position: UnityEngine.Vector2Int): boolean;
    SetMinMax(minPosition: UnityEngine.Vector2Int, maxPosition: UnityEngine.Vector2Int): void;
    ToString(): string;
    readonly allPositionsWithin: UnityEngine.RectInt.PositionEnumerator;
    readonly center: UnityEngine.Vector2;
    height: number;
    max: UnityEngine.Vector2Int;
    min: UnityEngine.Vector2Int;
    position: UnityEngine.Vector2Int;
    size: UnityEngine.Vector2Int;
    width: number;
    x: number;
    xMax: number;
    xMin: number;
    y: number;
    yMax: number;
    yMin: number;
  }
}
declare namespace UnityEngine.RectInt {
  class PositionEnumerator extends System.ValueType {
    protected constructor();
    GetEnumerator(): UnityEngine.RectInt.PositionEnumerator;
    MoveNext(): boolean;
    Reset(): void;
    readonly Current: UnityEngine.Vector2Int;
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeLoadType extends System.Enum {
    protected constructor();
    static AfterSceneLoad: UnityEngine.RuntimeInitializeLoadType;
    static BeforeSceneLoad: UnityEngine.RuntimeInitializeLoadType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeOnLoadMethodAttribute extends UnityEngine.Scripting.PreserveAttribute {
    constructor();
    constructor(loadType: UnityEngine.RuntimeInitializeLoadType);
    readonly loadType: UnityEngine.RuntimeInitializeLoadType;
  }
}
declare namespace UnityEngine.Scripting {
  class PreserveAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class ScrollWaitDefinitions extends System.Object {
    protected constructor();
    static firstWait: number;
    static regularWait: number;
  }
}
declare namespace UnityEngine {
  class Types extends System.Object {
    protected constructor();
    GetType(): any;
    static GetType(typeName: string, assemblyName: string): any;
  }
}
declare namespace UnityEngine {
  class SelectionBaseAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class SerializePrivateVariables extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class SerializeField extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class PreferBinarySerialization extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class ISerializationCallbackReceiver {
    protected constructor();
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
  }
}
declare namespace UnityEngine {
  class StackTraceUtility extends System.Object {
    constructor();
    static ExtractStackTrace(): string;
    static ExtractStringFromException(exception: any): string;
  }
}
declare namespace UnityEngine {
  class UnityException extends System.SystemException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
  }
}
declare namespace System {
  class SystemException extends System.Exception {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
  }
}
declare namespace UnityEngine {
  class MissingComponentException extends System.SystemException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
  }
}
declare namespace UnityEngine {
  class UnassignedReferenceException extends System.SystemException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
  }
}
declare namespace UnityEngine {
  class MissingReferenceException extends System.SystemException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
  }
}
declare namespace UnityEngine {
  class SystemClock extends System.Object {
    constructor();
    static ToUnixTimeMilliseconds(date: any): number;
    static ToUnixTimeSeconds(date: any): number;
    static readonly now: any;
  }
}
declare namespace UnityEngine {
  class RenderTextureDescriptor extends System.ValueType {
    protected constructor();
    autoGenerateMips: boolean;
    colorFormat: UnityEngine.RenderTextureFormat;
    depthBufferBits: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    enableRandomWrite: boolean;
    readonly flags: UnityEngine.RenderTextureCreationFlags;
    height: number;
    memoryless: UnityEngine.RenderTextureMemoryless;
    msaaSamples: number;
    shadowSamplingMode: UnityEngine.Rendering.ShadowSamplingMode;
    sRGB: boolean;
    useMipMap: boolean;
    volumeDepth: number;
    vrUsage: UnityEngine.VRTextureUsage;
    width: number;
  }
}
declare namespace UnityEngine {
  class TouchScreenKeyboardType extends System.Enum {
    protected constructor();
    static ASCIICapable: UnityEngine.TouchScreenKeyboardType;
    static Default: UnityEngine.TouchScreenKeyboardType;
    static EmailAddress: UnityEngine.TouchScreenKeyboardType;
    static NamePhonePad: UnityEngine.TouchScreenKeyboardType;
    static NintendoNetworkAccount: UnityEngine.TouchScreenKeyboardType;
    static NumberPad: UnityEngine.TouchScreenKeyboardType;
    static NumbersAndPunctuation: UnityEngine.TouchScreenKeyboardType;
    static PhonePad: UnityEngine.TouchScreenKeyboardType;
    static Search: UnityEngine.TouchScreenKeyboardType;
    static Social: UnityEngine.TouchScreenKeyboardType;
    static URL: UnityEngine.TouchScreenKeyboardType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class UnityAPICompatibilityVersionAttribute extends System.Attribute {
    constructor(version: string);
    readonly version: string;
  }
}
declare namespace UnityEngine.Events {
  class PersistentListenerMode extends System.Enum {
    protected constructor();
    static Bool: UnityEngine.Events.PersistentListenerMode;
    static EventDefined: UnityEngine.Events.PersistentListenerMode;
    static Float: UnityEngine.Events.PersistentListenerMode;
    static Int: UnityEngine.Events.PersistentListenerMode;
    static Object: UnityEngine.Events.PersistentListenerMode;
    static String: UnityEngine.Events.PersistentListenerMode;
    value__: number;
    static Void: UnityEngine.Events.PersistentListenerMode;
  }
}
declare namespace UnityEngine.Events {
  class ArgumentCache extends System.Object {
    constructor();
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    boolArgument: boolean;
    floatArgument: number;
    intArgument: number;
    stringArgument: string;
    unityObjectArgument: UnityEngine.Object;
    readonly unityObjectArgumentAssemblyTypeName: string;
  }
}
declare namespace UnityEngine.Events {
  class BaseInvokableCall extends System.Object {
    protected constructor();
    Find(targetObj: any, method: any): boolean;
    Invoke(args: any[]): void;
  }
}
declare namespace UnityEngine.Events {
  class InvokableCall extends UnityEngine.Events.BaseInvokableCall {
    constructor(target: any, theFunction: any);
    constructor(action: (() => void));
    Find(targetObj: any, method: any): boolean;
    Invoke(): void;
    Invoke(args: any[]): void;
  }
}
declare namespace UnityEngine.Events {
  class UnityEventCallState extends System.Enum {
    protected constructor();
    static EditorAndRuntime: UnityEngine.Events.UnityEventCallState;
    static Off: UnityEngine.Events.UnityEventCallState;
    static RuntimeOnly: UnityEngine.Events.UnityEventCallState;
    value__: number;
  }
}
declare namespace UnityEngine.Events {
  class PersistentCall extends System.Object {
    constructor();
    GetRuntimeCall(theEvent: UnityEngine.Events.UnityEventBase): UnityEngine.Events.BaseInvokableCall;
    IsValid(): boolean;
    RegisterPersistentListener(ttarget: UnityEngine.Object, mmethodName: string): void;
    UnregisterPersistentListener(): void;
    readonly "arguments": UnityEngine.Events.ArgumentCache;
    callState: UnityEngine.Events.UnityEventCallState;
    readonly methodName: string;
    mode: UnityEngine.Events.PersistentListenerMode;
    readonly target: UnityEngine.Object;
  }
}
declare namespace UnityEngine.Events {
  class PersistentCallGroup extends System.Object {
    constructor();
    AddListener(): void;
    AddListener(call: UnityEngine.Events.PersistentCall): void;
    Clear(): void;
    GetListener(index: number): UnityEngine.Events.PersistentCall;
    GetListeners(): any;
    Initialize(invokableList: UnityEngine.Events.InvokableCallList, unityEventBase: UnityEngine.Events.UnityEventBase): void;
    RegisterBoolPersistentListener(index: number, targetObj: UnityEngine.Object, argument: boolean, methodName: string): void;
    RegisterEventPersistentListener(index: number, targetObj: UnityEngine.Object, methodName: string): void;
    RegisterFloatPersistentListener(index: number, targetObj: UnityEngine.Object, argument: number, methodName: string): void;
    RegisterIntPersistentListener(index: number, targetObj: UnityEngine.Object, argument: number, methodName: string): void;
    RegisterObjectPersistentListener(index: number, targetObj: UnityEngine.Object, argument: UnityEngine.Object, methodName: string): void;
    RegisterStringPersistentListener(index: number, targetObj: UnityEngine.Object, argument: string, methodName: string): void;
    RegisterVoidPersistentListener(index: number, targetObj: UnityEngine.Object, methodName: string): void;
    RemoveListener(index: number): void;
    RemoveListeners(target: UnityEngine.Object, methodName: string): void;
    UnregisterPersistentListener(index: number): void;
    readonly Count: number;
  }
}
declare namespace UnityEngine.Events {
  class InvokableCallList extends System.Object {
    constructor();
    AddListener(call: UnityEngine.Events.BaseInvokableCall): void;
    AddPersistentInvokableCall(call: UnityEngine.Events.BaseInvokableCall): void;
    Clear(): void;
    ClearPersistent(): void;
    PrepareInvoke(): UnityEngine.Events.BaseInvokableCall[];
    RemoveListener(targetObj: any, method: any): void;
    readonly Count: number;
  }
}
declare namespace UnityEngine.Events {
  class UnityEventBase extends System.Object {
    protected constructor();
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    static GetValidMethodInfo(obj: any, functionName: string, argumentTypes: any[]): any;
    RemoveAllListeners(): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events {
  class UnityEvent extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: (() => void)): void;
    Invoke(): void;
    RemoveListener(call: (() => void)): void;
  }
}
declare namespace UnityEngine {
  class UnityString extends System.Object {
    constructor();
    static Format(fmt: string, args: any[]): string;
  }
}
declare namespace UnityEngine {
  class UnitySynchronizationContext extends System.Threading.SynchronizationContext {
    constructor();
    Post(callback: ((state: any) => void), state: any): void;
    Send(callback: ((state: any) => void), state: any): void;
  }
}
declare namespace System.Threading {
  class SynchronizationContext extends System.Object {
    constructor();
    CreateCopy(): System.Threading.SynchronizationContext;
    IsWaitNotificationRequired(): boolean;
    OperationCompleted(): void;
    OperationStarted(): void;
    Post(d: ((state: any) => void), state: any): void;
    Send(d: ((state: any) => void), state: any): void;
    static SetSynchronizationContext(syncContext: System.Threading.SynchronizationContext): void;
    Wait(waitHandles: any[], waitAll: boolean, millisecondsTimeout: number): number;
    static readonly Current: System.Threading.SynchronizationContext;
  }
}
declare namespace UnityEngine.UnitySynchronizationContext {
  class WorkRequest extends System.ValueType {
    protected constructor();
    Invoke(): void;
  }
}
declare namespace UnityEngine {
  class Vector2 extends System.ValueType {
    protected constructor();
    static Angle(from: UnityEngine.Vector2, to: UnityEngine.Vector2): number;
    static ClampMagnitude(vector: UnityEngine.Vector2, maxLength: number): UnityEngine.Vector2;
    static Distance(a: UnityEngine.Vector2, b: UnityEngine.Vector2): number;
    static Dot(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): number;
    Equals(other: any): boolean;
    GetHashCode(): number;
    static Lerp(a: UnityEngine.Vector2, b: UnityEngine.Vector2, t: number): UnityEngine.Vector2;
    static LerpUnclamped(a: UnityEngine.Vector2, b: UnityEngine.Vector2, t: number): UnityEngine.Vector2;
    static Max(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): UnityEngine.Vector2;
    static Min(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): UnityEngine.Vector2;
    static MoveTowards(current: UnityEngine.Vector2, target: UnityEngine.Vector2, maxDistanceDelta: number): UnityEngine.Vector2;
    Normalize(): void;
    static Reflect(inDirection: UnityEngine.Vector2, inNormal: UnityEngine.Vector2): UnityEngine.Vector2;
    static Scale(a: UnityEngine.Vector2, b: UnityEngine.Vector2): UnityEngine.Vector2;
    Scale(scale: UnityEngine.Vector2): void;
    Set(newX: number, newY: number): void;
    static SignedAngle(from: UnityEngine.Vector2, to: UnityEngine.Vector2): number;
    static SmoothDamp(current: UnityEngine.Vector2, target: UnityEngine.Vector2, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): UnityEngine.Vector2;
    SqrMagnitude(): number;
    static SqrMagnitude(a: UnityEngine.Vector2): number;
    ToString(): string;
    ToString(format: string): string;
    static readonly down: UnityEngine.Vector2;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    static readonly left: UnityEngine.Vector2;
    readonly magnitude: number;
    static readonly negativeInfinity: UnityEngine.Vector2;
    readonly normalized: UnityEngine.Vector2;
    static readonly one: UnityEngine.Vector2;
    static readonly positiveInfinity: UnityEngine.Vector2;
    static readonly right: UnityEngine.Vector2;
    readonly sqrMagnitude: number;
    static readonly up: UnityEngine.Vector2;
    static readonly zero: UnityEngine.Vector2;
    static kEpsilon: number;
    x: number;
    y: number;
  }
}
declare namespace UnityEngine {
  class Vector2Int extends System.ValueType {
    protected constructor();
    static CeilToInt(v: UnityEngine.Vector2): UnityEngine.Vector2Int;
    Clamp(min: UnityEngine.Vector2Int, max: UnityEngine.Vector2Int): void;
    static Distance(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): number;
    Equals(other: any): boolean;
    static FloorToInt(v: UnityEngine.Vector2): UnityEngine.Vector2Int;
    GetHashCode(): number;
    static Max(lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
    static Min(lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
    static RoundToInt(v: UnityEngine.Vector2): UnityEngine.Vector2Int;
    static Scale(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
    Scale(scale: UnityEngine.Vector2Int): void;
    Set(x: number, y: number): void;
    ToString(): string;
    static readonly down: UnityEngine.Vector2Int;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    static readonly left: UnityEngine.Vector2Int;
    readonly magnitude: number;
    static readonly one: UnityEngine.Vector2Int;
    static readonly right: UnityEngine.Vector2Int;
    readonly sqrMagnitude: number;
    static readonly up: UnityEngine.Vector2Int;
    x: number;
    y: number;
    static readonly zero: UnityEngine.Vector2Int;
  }
}
declare namespace UnityEngine {
  class Vector3Int extends System.ValueType {
    protected constructor();
    static CeilToInt(v: UnityEngine.Vector3): UnityEngine.Vector3Int;
    Clamp(min: UnityEngine.Vector3Int, max: UnityEngine.Vector3Int): void;
    static Distance(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): number;
    Equals(other: any): boolean;
    static FloorToInt(v: UnityEngine.Vector3): UnityEngine.Vector3Int;
    GetHashCode(): number;
    static Max(lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
    static Min(lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
    static RoundToInt(v: UnityEngine.Vector3): UnityEngine.Vector3Int;
    static Scale(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
    Scale(scale: UnityEngine.Vector3Int): void;
    Set(x: number, y: number, z: number): void;
    ToString(): string;
    ToString(format: string): string;
    static readonly down: UnityEngine.Vector3Int;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    static readonly left: UnityEngine.Vector3Int;
    readonly magnitude: number;
    static readonly one: UnityEngine.Vector3Int;
    static readonly right: UnityEngine.Vector3Int;
    readonly sqrMagnitude: number;
    static readonly up: UnityEngine.Vector3Int;
    x: number;
    y: number;
    z: number;
    static readonly zero: UnityEngine.Vector3Int;
  }
}
declare namespace UnityEngine {
  class Vector4 extends System.ValueType {
    protected constructor();
    static Distance(a: UnityEngine.Vector4, b: UnityEngine.Vector4): number;
    static Dot(a: UnityEngine.Vector4, b: UnityEngine.Vector4): number;
    Equals(other: any): boolean;
    GetHashCode(): number;
    static Lerp(a: UnityEngine.Vector4, b: UnityEngine.Vector4, t: number): UnityEngine.Vector4;
    static LerpUnclamped(a: UnityEngine.Vector4, b: UnityEngine.Vector4, t: number): UnityEngine.Vector4;
    static Magnitude(a: UnityEngine.Vector4): number;
    static Max(lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4): UnityEngine.Vector4;
    static Min(lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4): UnityEngine.Vector4;
    static MoveTowards(current: UnityEngine.Vector4, target: UnityEngine.Vector4, maxDistanceDelta: number): UnityEngine.Vector4;
    static Normalize(a: UnityEngine.Vector4): UnityEngine.Vector4;
    Normalize(): void;
    static Project(a: UnityEngine.Vector4, b: UnityEngine.Vector4): UnityEngine.Vector4;
    static Scale(a: UnityEngine.Vector4, b: UnityEngine.Vector4): UnityEngine.Vector4;
    Scale(scale: UnityEngine.Vector4): void;
    Set(newX: number, newY: number, newZ: number, newW: number): void;
    SqrMagnitude(): number;
    static SqrMagnitude(a: UnityEngine.Vector4): number;
    ToString(): string;
    ToString(format: string): string;
    get_Item(index: number): number;
    set_Item(index: number, value: number): void;
    readonly magnitude: number;
    static readonly negativeInfinity: UnityEngine.Vector4;
    readonly normalized: UnityEngine.Vector4;
    static readonly one: UnityEngine.Vector4;
    static readonly positiveInfinity: UnityEngine.Vector4;
    readonly sqrMagnitude: number;
    static readonly zero: UnityEngine.Vector4;
    static kEpsilon: number;
    w: number;
    x: number;
    y: number;
    z: number;
  }
}
declare namespace UnityEngine {
  class WaitForSecondsRealtime extends UnityEngine.CustomYieldInstruction {
    constructor(time: number);
    readonly keepWaiting: boolean;
  }
}
declare namespace UnityEngine.Assertions {
  class Assert extends System.Object {
    protected constructor();
    static AreApproximatelyEqual(expected: number, actual: number): void;
    static AreApproximatelyEqual(expected: number, actual: number, tolerance: number): void;
    static AreApproximatelyEqual(expected: number, actual: number, tolerance: number, message: string): void;
    static AreApproximatelyEqual(expected: number, actual: number, message: string): void;
    static AreEqual(expected: UnityEngine.Object, actual: UnityEngine.Object, message: string): void;
    static AreNotApproximatelyEqual(expected: number, actual: number): void;
    static AreNotApproximatelyEqual(expected: number, actual: number, tolerance: number): void;
    static AreNotApproximatelyEqual(expected: number, actual: number, tolerance: number, message: string): void;
    static AreNotApproximatelyEqual(expected: number, actual: number, message: string): void;
    static AreNotEqual(expected: UnityEngine.Object, actual: UnityEngine.Object, message: string): void;
    Equals(obj: any): boolean;
    static Equals(obj1: any, obj2: any): boolean;
    static IsFalse(condition: boolean): void;
    static IsFalse(condition: boolean, message: string): void;
    static IsNotNull(value: UnityEngine.Object, message: string): void;
    static IsNull(value: UnityEngine.Object, message: string): void;
    static IsTrue(condition: boolean): void;
    static IsTrue(condition: boolean, message: string): void;
    static ReferenceEquals(obj1: any, obj2: any): boolean;
    static raiseExceptions: boolean;
  }
}
declare namespace UnityEngine.Assertions {
  class AssertionException extends System.Exception {
    constructor(message: string, userMessage: string);
    readonly Message: string;
  }
}
declare namespace UnityEngine.Assertions {
  class AssertionMessageUtil extends System.Object {
    constructor();
    static BooleanFailureMessage(expected: boolean): string;
    static GetEqualityMessage(actual: any, expected: any, expectEqual: boolean): string;
    static GetMessage(failureMessage: string): string;
    static GetMessage(failureMessage: string, expected: string): string;
    static NullFailureMessage(value: any, expectNull: boolean): string;
  }
}
declare namespace UnityEngine.Assertions.Comparers {
  class FloatComparer extends System.Object {
    constructor();
    constructor(relative: boolean);
    constructor(error: number);
    constructor(error: number, relative: boolean);
    static AreEqual(expected: number, actual: number, error: number): boolean;
    static AreEqualRelative(expected: number, actual: number, error: number): boolean;
    Equals(a: number, b: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetHashCode(obj: number): number;
    static kEpsilon: number;
    static s_ComparerWithDefaultTolerance: UnityEngine.Assertions.Comparers.FloatComparer;
  }
}
declare namespace UnityEngine.Assertions.Must {
  class MustExtensions extends System.Object {
    protected constructor();
    static MustBeApproximatelyEqual(actual: number, expected: number): void;
    static MustBeApproximatelyEqual(actual: number, expected: number, tolerance: number): void;
    static MustBeApproximatelyEqual(actual: number, expected: number, tolerance: number, message: string): void;
    static MustBeApproximatelyEqual(actual: number, expected: number, message: string): void;
    static MustBeFalse(value: boolean): void;
    static MustBeFalse(value: boolean, message: string): void;
    static MustBeTrue(value: boolean): void;
    static MustBeTrue(value: boolean, message: string): void;
    static MustNotBeApproximatelyEqual(actual: number, expected: number): void;
    static MustNotBeApproximatelyEqual(actual: number, expected: number, tolerance: number): void;
    static MustNotBeApproximatelyEqual(actual: number, expected: number, tolerance: number, message: string): void;
    static MustNotBeApproximatelyEqual(actual: number, expected: number, message: string): void;
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsAttribute {
    protected constructor();
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsNameProviderAttribute {
    protected constructor();
    Name: string;
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsHeaderProviderAttribute {
    protected constructor();
    Header: string;
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsIsThreadSafeProviderAttribute {
    protected constructor();
    IsThreadSafe: boolean;
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsIsFreeFunctionProviderAttribute {
    protected constructor();
    HasExplicitThis: boolean;
    IsFreeFunction: boolean;
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsThrowsProviderAttribute {
    protected constructor();
    ThrowsException: boolean;
  }
}
declare namespace UnityEngine.Bindings {
  class IBindingsGenerateMarshallingTypeAttribute {
    protected constructor();
    CodegenOptions: UnityEngine.Bindings.CodegenOptions;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeConditionalAttribute extends System.Attribute {
    constructor();
    constructor(condition: string);
    constructor(enabled: boolean);
    constructor(condition: string, enabled: boolean);
    Condition: string;
    Enabled: boolean;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeHeaderAttribute extends System.Attribute {
    constructor();
    constructor(header: string);
    Header: string;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeNameAttribute extends System.Attribute {
    constructor();
    constructor(name: string);
    Name: string;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeMethodAttribute extends System.Attribute {
    constructor();
    constructor(name: string);
    constructor(name: string, isFreeFunction: boolean);
    constructor(name: string, isFreeFunction: boolean, isThreadSafe: boolean);
    constructor(name: string, isFreeFunction: boolean, isThreadSafe: boolean, throws_: boolean);
    HasExplicitThis: boolean;
    IsFreeFunction: boolean;
    IsThreadSafe: boolean;
    Name: string;
    ThrowsException: boolean;
  }
}
declare namespace UnityEngine.Bindings {
  class TargetType extends System.Enum {
    protected constructor();
    static Field: UnityEngine.Bindings.TargetType;
    static Function: UnityEngine.Bindings.TargetType;
    value__: number;
  }
}
declare namespace UnityEngine.Bindings {
  class NativePropertyAttribute extends UnityEngine.Bindings.NativeMethodAttribute {
    constructor();
    constructor(name: string);
    constructor(name: string, targetType: UnityEngine.Bindings.TargetType);
    constructor(name: string, isFree: boolean, targetType: UnityEngine.Bindings.TargetType);
    constructor(name: string, isFree: boolean, targetType: UnityEngine.Bindings.TargetType, isThreadSafe: boolean);
    TargetType: UnityEngine.Bindings.TargetType;
  }
}
declare namespace UnityEngine.Bindings {
  class CodegenOptions extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.Bindings.CodegenOptions;
    static Custom: UnityEngine.Bindings.CodegenOptions;
    static Force: UnityEngine.Bindings.CodegenOptions;
    value__: number;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeAsStructAttribute extends System.Attribute {
    constructor(name: string);
    StructName: string;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeTypeAttribute extends System.Attribute {
    constructor();
    constructor(codegenOptions: UnityEngine.Bindings.CodegenOptions);
    constructor(header: string);
    constructor(header: string, codegenOptions: UnityEngine.Bindings.CodegenOptions);
    constructor(codegenOptions: UnityEngine.Bindings.CodegenOptions, intermediateStructName: string);
    CodegenOptions: UnityEngine.Bindings.CodegenOptions;
    Header: string;
    IntermediateScriptingStructName: string;
  }
}
declare namespace UnityEngine.Bindings {
  class NotNullAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Bindings {
  class UnmarshalledAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Bindings {
  class FreeFunctionAttribute extends UnityEngine.Bindings.NativeMethodAttribute {
    constructor();
    constructor(name: string);
    constructor(name: string, isThreadSafe: boolean);
  }
}
declare namespace UnityEngine.Bindings {
  class ThreadSafeAttribute extends UnityEngine.Bindings.NativeMethodAttribute {
    constructor();
  }
}
declare namespace UnityEngine.Bindings {
  class StaticAccessorType extends System.Enum {
    protected constructor();
    static Arrow: UnityEngine.Bindings.StaticAccessorType;
    static Dot: UnityEngine.Bindings.StaticAccessorType;
    static DoubleColon: UnityEngine.Bindings.StaticAccessorType;
    value__: number;
  }
}
declare namespace UnityEngine.Bindings {
  class StaticAccessorAttribute extends System.Attribute {
    constructor();
    constructor(type: UnityEngine.Bindings.StaticAccessorType);
    constructor(name: string, type: UnityEngine.Bindings.StaticAccessorType);
    Name: string;
    Type: UnityEngine.Bindings.StaticAccessorType;
  }
}
declare namespace UnityEngine.Bindings {
  class NativeThrowsAttribute extends System.Attribute {
    constructor();
    constructor(throwsException: boolean);
    ThrowsException: boolean;
  }
}
declare namespace UnityEngine.Bindings {
  class IgnoreAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class ThreadAndSerializationSafeAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class ReadOnlyAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class ReadWriteAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class WriteOnlyAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class DeallocateOnJobCompletionAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class NativeContainerAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class NativeContainerSupportsAtomicWriteAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class NativeContainerSupportsMinMaxWriteRestrictionAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Collections {
  class Allocator extends System.Enum {
    protected constructor();
    static Invalid: UnityEngine.Collections.Allocator;
    static None: UnityEngine.Collections.Allocator;
    static Persistent: UnityEngine.Collections.Allocator;
    static Temp: UnityEngine.Collections.Allocator;
    static TempJob: UnityEngine.Collections.Allocator;
    value__: number;
  }
}
declare namespace UnityEngine.Playables {
  class FrameData extends System.ValueType {
    protected constructor();
    readonly deltaTime: number;
    readonly effectiveSpeed: number;
    readonly effectiveWeight: number;
    readonly evaluationType: UnityEngine.Playables.FrameData.EvaluationType;
    readonly frameId: number;
    readonly seekOccurred: boolean;
    readonly timeHeld: boolean;
    readonly timeLooped: boolean;
    readonly weight: number;
  }
}
declare namespace UnityEngine.Playables.FrameData {
  class Flags extends System.Enum {
    protected constructor();
    static Evaluate: UnityEngine.Playables.FrameData.Flags;
    static Hold: UnityEngine.Playables.FrameData.Flags;
    static Loop: UnityEngine.Playables.FrameData.Flags;
    static SeekOccured: UnityEngine.Playables.FrameData.Flags;
    value__: number;
  }
}
declare namespace UnityEngine.Playables.FrameData {
  class EvaluationType extends System.Enum {
    protected constructor();
    static Evaluate: UnityEngine.Playables.FrameData.EvaluationType;
    static Playback: UnityEngine.Playables.FrameData.EvaluationType;
    value__: number;
  }
}
declare namespace UnityEngine.Playables {
  class IPlayable {
    protected constructor();
    GetHandle(): UnityEngine.Playables.PlayableHandle;
  }
}
declare namespace UnityEngine.Playables {
  class IPlayableBehaviour {
    protected constructor();
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnGraphStart(playable: UnityEngine.Playables.Playable): void;
    OnGraphStop(playable: UnityEngine.Playables.Playable): void;
    OnPlayableCreate(playable: UnityEngine.Playables.Playable): void;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    ProcessFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: any): void;
  }
}
declare namespace UnityEngine.Playables {
  class IPlayableOutput {
    protected constructor();
    GetHandle(): UnityEngine.Playables.PlayableOutputHandle;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableBinding extends System.ValueType {
    protected constructor();
    sourceBindingType: any;
    sourceObject: UnityEngine.Object;
    streamName: string;
    streamType: UnityEngine.Playables.DataStreamType;
    static DefaultDuration: number;
    static None: UnityEngine.Playables.PlayableBinding[];
  }
}
declare namespace UnityEngine.Playables {
  class IPlayableAsset {
    protected constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, owner: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    readonly duration: number;
    readonly outputs: any;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableAsset extends UnityEngine.ScriptableObject {
    protected constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, owner: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    readonly duration: number;
    readonly outputs: any;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableBehaviour extends System.Object {
    constructor();
    Clone(): any;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnGraphStart(playable: UnityEngine.Playables.Playable): void;
    OnGraphStop(playable: UnityEngine.Playables.Playable): void;
    OnPlayableCreate(playable: UnityEngine.Playables.Playable): void;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    ProcessFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: any): void;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Playables {
  class PlayableOutputExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Playables {
  class ScriptPlayableOutput extends System.ValueType {
    protected constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, name: string): UnityEngine.Playables.ScriptPlayableOutput;
    GetHandle(): UnityEngine.Playables.PlayableOutputHandle;
    static readonly Null: UnityEngine.Playables.ScriptPlayableOutput;
  }
}
declare namespace UnityEngine.Internal {
  class DefaultValueAttribute extends System.Attribute {
    constructor(value: string);
    Equals(obj: any): boolean;
    GetHashCode(): number;
    readonly Value: any;
  }
}
declare namespace UnityEngine.Internal {
  class ExcludeFromDocsAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class iPhoneScreenOrientation extends System.Enum {
    protected constructor();
    static AutoRotation: UnityEngine.iPhoneScreenOrientation;
    static Landscape: UnityEngine.iPhoneScreenOrientation;
    static LandscapeLeft: UnityEngine.iPhoneScreenOrientation;
    static LandscapeRight: UnityEngine.iPhoneScreenOrientation;
    static Portrait: UnityEngine.iPhoneScreenOrientation;
    static PortraitUpsideDown: UnityEngine.iPhoneScreenOrientation;
    static Unknown: UnityEngine.iPhoneScreenOrientation;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneNetworkReachability extends System.Enum {
    protected constructor();
    static NotReachable: UnityEngine.iPhoneNetworkReachability;
    static ReachableViaCarrierDataNetwork: UnityEngine.iPhoneNetworkReachability;
    static ReachableViaWiFiNetwork: UnityEngine.iPhoneNetworkReachability;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneGeneration extends System.Enum {
    protected constructor();
    static iPad1Gen: UnityEngine.iPhoneGeneration;
    static iPad2Gen: UnityEngine.iPhoneGeneration;
    static iPad3Gen: UnityEngine.iPhoneGeneration;
    static iPad4Gen: UnityEngine.iPhoneGeneration;
    static iPadMini1Gen: UnityEngine.iPhoneGeneration;
    static iPadUnknown: UnityEngine.iPhoneGeneration;
    static iPhone: UnityEngine.iPhoneGeneration;
    static iPhone3G: UnityEngine.iPhoneGeneration;
    static iPhone3GS: UnityEngine.iPhoneGeneration;
    static iPhone4: UnityEngine.iPhoneGeneration;
    static iPhone4S: UnityEngine.iPhoneGeneration;
    static iPhone5: UnityEngine.iPhoneGeneration;
    static iPhone5C: UnityEngine.iPhoneGeneration;
    static iPhone5S: UnityEngine.iPhoneGeneration;
    static iPhoneUnknown: UnityEngine.iPhoneGeneration;
    static iPodTouch1Gen: UnityEngine.iPhoneGeneration;
    static iPodTouch2Gen: UnityEngine.iPhoneGeneration;
    static iPodTouch3Gen: UnityEngine.iPhoneGeneration;
    static iPodTouch4Gen: UnityEngine.iPhoneGeneration;
    static iPodTouch5Gen: UnityEngine.iPhoneGeneration;
    static iPodTouchUnknown: UnityEngine.iPhoneGeneration;
    static Unknown: UnityEngine.iPhoneGeneration;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneSettings extends System.Object {
    constructor();
    static StartLocationServiceUpdates(): void;
    static StartLocationServiceUpdates(desiredAccuracyInMeters: number): void;
    static StartLocationServiceUpdates(desiredAccuracyInMeters: number, updateDistanceInMeters: number): void;
    static StopLocationServiceUpdates(): void;
    static readonly generation: UnityEngine.iPhoneGeneration;
    static readonly internetReachability: UnityEngine.iPhoneNetworkReachability;
    static readonly locationServiceEnabledByUser: boolean;
    static readonly locationServiceStatus: UnityEngine.LocationServiceStatus;
    static readonly model: string;
    static readonly name: string;
    static readonly screenCanDarken: boolean;
    static readonly screenOrientation: UnityEngine.iPhoneScreenOrientation;
    static readonly systemName: string;
    static readonly systemVersion: string;
    static readonly uniqueIdentifier: string;
    static readonly verticalOrientation: boolean;
  }
}
declare namespace UnityEngine {
  class iPhoneTouchPhase extends System.Enum {
    protected constructor();
    static Began: UnityEngine.iPhoneTouchPhase;
    static Canceled: UnityEngine.iPhoneTouchPhase;
    static Ended: UnityEngine.iPhoneTouchPhase;
    static Moved: UnityEngine.iPhoneTouchPhase;
    static Stationary: UnityEngine.iPhoneTouchPhase;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneTouch extends System.ValueType {
    protected constructor();
    readonly deltaPosition: UnityEngine.Vector2;
    readonly deltaTime: number;
    readonly fingerId: number;
    readonly phase: UnityEngine.iPhoneTouchPhase;
    readonly position: UnityEngine.Vector2;
    readonly positionDelta: UnityEngine.Vector2;
    readonly tapCount: number;
    readonly timeDelta: number;
  }
}
declare namespace UnityEngine {
  class iPhoneMovieControlMode extends System.Enum {
    protected constructor();
    static CancelOnTouch: UnityEngine.iPhoneMovieControlMode;
    static Full: UnityEngine.iPhoneMovieControlMode;
    static Hidden: UnityEngine.iPhoneMovieControlMode;
    static Minimal: UnityEngine.iPhoneMovieControlMode;
    value__: number;
    static VolumeOnly: UnityEngine.iPhoneMovieControlMode;
  }
}
declare namespace UnityEngine {
  class iPhoneMovieScalingMode extends System.Enum {
    protected constructor();
    static AspectFill: UnityEngine.iPhoneMovieScalingMode;
    static AspectFit: UnityEngine.iPhoneMovieScalingMode;
    static Fill: UnityEngine.iPhoneMovieScalingMode;
    static None: UnityEngine.iPhoneMovieScalingMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneUtils extends System.Object {
    constructor();
    static PlayMovie(path: string, bgColor: UnityEngine.Color): void;
    static PlayMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode): void;
    static PlayMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode, scalingMode: UnityEngine.iPhoneMovieScalingMode): void;
    static PlayMovieURL(url: string, bgColor: UnityEngine.Color): void;
    static PlayMovieURL(url: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode): void;
    static PlayMovieURL(url: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode, scalingMode: UnityEngine.iPhoneMovieScalingMode): void;
    static Vibrate(): void;
    static readonly isApplicationGenuine: boolean;
    static readonly isApplicationGenuineAvailable: boolean;
  }
}
declare namespace UnityEngine {
  class iPhoneKeyboardType extends System.Enum {
    protected constructor();
    static ASCIICapable: UnityEngine.iPhoneKeyboardType;
    static Default: UnityEngine.iPhoneKeyboardType;
    static EmailAddress: UnityEngine.iPhoneKeyboardType;
    static NamePhonePad: UnityEngine.iPhoneKeyboardType;
    static NumberPad: UnityEngine.iPhoneKeyboardType;
    static NumbersAndPunctuation: UnityEngine.iPhoneKeyboardType;
    static PhonePad: UnityEngine.iPhoneKeyboardType;
    static URL: UnityEngine.iPhoneKeyboardType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneKeyboard extends System.Object {
    constructor();
    active: boolean;
    static readonly area: UnityEngine.Rect;
    readonly done: boolean;
    static hideInput: boolean;
    text: string;
    static readonly visible: boolean;
  }
}
declare namespace UnityEngine {
  class iPhoneAccelerationEvent extends System.ValueType {
    protected constructor();
    readonly acceleration: UnityEngine.Vector3;
    readonly deltaTime: number;
    readonly timeDelta: number;
  }
}
declare namespace UnityEngine {
  class iPhoneOrientation extends System.Enum {
    protected constructor();
    static FaceDown: UnityEngine.iPhoneOrientation;
    static FaceUp: UnityEngine.iPhoneOrientation;
    static LandscapeLeft: UnityEngine.iPhoneOrientation;
    static LandscapeRight: UnityEngine.iPhoneOrientation;
    static Portrait: UnityEngine.iPhoneOrientation;
    static PortraitUpsideDown: UnityEngine.iPhoneOrientation;
    static Unknown: UnityEngine.iPhoneOrientation;
    value__: number;
  }
}
declare namespace UnityEngine {
  class iPhoneInput extends System.Object {
    constructor();
    static GetAccelerationEvent(index: number): UnityEngine.iPhoneAccelerationEvent;
    static GetTouch(index: number): UnityEngine.iPhoneTouch;
    static readonly acceleration: UnityEngine.Vector3;
    static readonly accelerationEventCount: number;
    static readonly accelerationEvents: UnityEngine.iPhoneAccelerationEvent[];
    static readonly lastLocation: UnityEngine.LocationInfo;
    static multiTouchEnabled: boolean;
    static readonly orientation: UnityEngine.iPhoneOrientation;
    static readonly touchCount: number;
    static readonly touches: UnityEngine.iPhoneTouch[];
  }
}
declare namespace UnityEngine {
  class iPhone extends System.Object {
    constructor();
    static ResetNoBackupFlag(path: string): void;
    static SetNoBackupFlag(path: string): void;
    static readonly advertisingIdentifier: string;
    static readonly advertisingTrackingEnabled: boolean;
    static readonly generation: UnityEngine.iPhoneGeneration;
    static readonly vendorIdentifier: string;
  }
}
declare namespace UnityEngine {
  class iOSActivityIndicatorStyle extends System.Enum {
    protected constructor();
    static DontShow: UnityEngine.iOSActivityIndicatorStyle;
    static Gray: UnityEngine.iOSActivityIndicatorStyle;
    value__: number;
    static White: UnityEngine.iOSActivityIndicatorStyle;
    static WhiteLarge: UnityEngine.iOSActivityIndicatorStyle;
  }
}
declare namespace UnityEngine {
  class CalendarIdentifier extends System.Enum {
    protected constructor();
    static BuddhistCalendar: UnityEngine.CalendarIdentifier;
    static ChineseCalendar: UnityEngine.CalendarIdentifier;
    static GregorianCalendar: UnityEngine.CalendarIdentifier;
    static HebrewCalendar: UnityEngine.CalendarIdentifier;
    static IndianCalendar: UnityEngine.CalendarIdentifier;
    static IslamicCalendar: UnityEngine.CalendarIdentifier;
    static IslamicCivilCalendar: UnityEngine.CalendarIdentifier;
    static ISO8601Calendar: UnityEngine.CalendarIdentifier;
    static JapaneseCalendar: UnityEngine.CalendarIdentifier;
    static PersianCalendar: UnityEngine.CalendarIdentifier;
    static RepublicOfChinaCalendar: UnityEngine.CalendarIdentifier;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CalendarUnit extends System.Enum {
    protected constructor();
    static Day: UnityEngine.CalendarUnit;
    static Era: UnityEngine.CalendarUnit;
    static Hour: UnityEngine.CalendarUnit;
    static Minute: UnityEngine.CalendarUnit;
    static Month: UnityEngine.CalendarUnit;
    static Quarter: UnityEngine.CalendarUnit;
    static Second: UnityEngine.CalendarUnit;
    value__: number;
    static Week: UnityEngine.CalendarUnit;
    static Weekday: UnityEngine.CalendarUnit;
    static WeekdayOrdinal: UnityEngine.CalendarUnit;
    static Year: UnityEngine.CalendarUnit;
  }
}
declare namespace UnityEngine {
  class LocalNotification extends System.Object {
    constructor();
    alertAction: string;
    alertBody: string;
    alertLaunchImage: string;
    applicationIconBadgeNumber: number;
    static readonly defaultSoundName: string;
    fireDate: any;
    hasAction: boolean;
    repeatCalendar: UnityEngine.CalendarIdentifier;
    repeatInterval: UnityEngine.CalendarUnit;
    soundName: string;
    timeZone: string;
    userInfo: any;
  }
}
declare namespace UnityEngine {
  class RemoteNotification extends System.Object {
    constructor();
    readonly alertBody: string;
    readonly applicationIconBadgeNumber: number;
    readonly hasAction: boolean;
    readonly soundName: string;
    readonly userInfo: any;
  }
}
declare namespace UnityEngine {
  class RemoteNotificationType extends System.Enum {
    protected constructor();
    static Alert: UnityEngine.RemoteNotificationType;
    static Badge: UnityEngine.RemoteNotificationType;
    static None: UnityEngine.RemoteNotificationType;
    static Sound: UnityEngine.RemoteNotificationType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class NotificationServices extends System.Object {
    constructor();
    static RegisterForRemoteNotificationTypes(notificationTypes: UnityEngine.RemoteNotificationType): void;
  }
}
declare namespace UnityEngine {
  class ADBannerView extends System.Object {
    constructor(type: UnityEngine.ADBannerView.Type, layout: UnityEngine.ADBannerView.Layout);
    static IsAvailable(type: UnityEngine.ADBannerView.Type): boolean;
    layout: UnityEngine.ADBannerView.Layout;
    readonly loaded: boolean;
    position: UnityEngine.Vector2;
    readonly size: UnityEngine.Vector2;
    visible: boolean;
  }
}
declare namespace UnityEngine.ADBannerView {
  class Layout extends System.Enum {
    protected constructor();
    static Bottom: UnityEngine.ADBannerView.Layout;
    static BottomCenter: UnityEngine.ADBannerView.Layout;
    static BottomLeft: UnityEngine.ADBannerView.Layout;
    static BottomRight: UnityEngine.ADBannerView.Layout;
    static Center: UnityEngine.ADBannerView.Layout;
    static CenterLeft: UnityEngine.ADBannerView.Layout;
    static CenterRight: UnityEngine.ADBannerView.Layout;
    static Manual: UnityEngine.ADBannerView.Layout;
    static Top: UnityEngine.ADBannerView.Layout;
    static TopCenter: UnityEngine.ADBannerView.Layout;
    static TopLeft: UnityEngine.ADBannerView.Layout;
    static TopRight: UnityEngine.ADBannerView.Layout;
    value__: number;
  }
}
declare namespace UnityEngine.ADBannerView {
  class Type extends System.Enum {
    protected constructor();
    static Banner: UnityEngine.ADBannerView.Type;
    static MediumRect: UnityEngine.ADBannerView.Type;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ADInterstitialAd extends System.Object {
    constructor(autoReload: boolean);
    constructor();
    ReloadAd(): void;
    Show(): void;
    static readonly isAvailable: boolean;
    readonly loaded: boolean;
  }
}
declare namespace UnityEngine.iOS {
  class ADBannerView extends System.Object {
    constructor(type: UnityEngine.iOS.ADBannerView.Type, layout: UnityEngine.iOS.ADBannerView.Layout);
    static IsAvailable(type: UnityEngine.iOS.ADBannerView.Type): boolean;
    layout: UnityEngine.iOS.ADBannerView.Layout;
    readonly loaded: boolean;
    position: UnityEngine.Vector2;
    readonly size: UnityEngine.Vector2;
    visible: boolean;
  }
}
declare namespace UnityEngine.iOS.ADBannerView {
  class Layout extends System.Enum {
    protected constructor();
    static Bottom: UnityEngine.iOS.ADBannerView.Layout;
    static BottomCenter: UnityEngine.iOS.ADBannerView.Layout;
    static BottomLeft: UnityEngine.iOS.ADBannerView.Layout;
    static BottomRight: UnityEngine.iOS.ADBannerView.Layout;
    static Center: UnityEngine.iOS.ADBannerView.Layout;
    static CenterLeft: UnityEngine.iOS.ADBannerView.Layout;
    static CenterRight: UnityEngine.iOS.ADBannerView.Layout;
    static Manual: UnityEngine.iOS.ADBannerView.Layout;
    static Top: UnityEngine.iOS.ADBannerView.Layout;
    static TopCenter: UnityEngine.iOS.ADBannerView.Layout;
    static TopLeft: UnityEngine.iOS.ADBannerView.Layout;
    static TopRight: UnityEngine.iOS.ADBannerView.Layout;
    value__: number;
  }
}
declare namespace UnityEngine.iOS.ADBannerView {
  class Type extends System.Enum {
    protected constructor();
    static Banner: UnityEngine.iOS.ADBannerView.Type;
    static MediumRect: UnityEngine.iOS.ADBannerView.Type;
    value__: number;
  }
}
declare namespace UnityEngine.iOS {
  class ADInterstitialAd extends System.Object {
    constructor(autoReload: boolean);
    constructor();
    ReloadAd(): void;
    Show(): void;
    static readonly isAvailable: boolean;
    readonly loaded: boolean;
  }
}
declare namespace UnityEngine.iOS {
  class DeviceGeneration extends System.Enum {
    protected constructor();
    static iPad1Gen: UnityEngine.iOS.DeviceGeneration;
    static iPad2Gen: UnityEngine.iOS.DeviceGeneration;
    static iPad3Gen: UnityEngine.iOS.DeviceGeneration;
    static iPad4Gen: UnityEngine.iOS.DeviceGeneration;
    static iPad5Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadAir1: UnityEngine.iOS.DeviceGeneration;
    static iPadAir2: UnityEngine.iOS.DeviceGeneration;
    static iPadMini1Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadMini2Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadMini3Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadMini4Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadPro10Inch1Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadPro10Inch2Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadPro1Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadPro2Gen: UnityEngine.iOS.DeviceGeneration;
    static iPadUnknown: UnityEngine.iOS.DeviceGeneration;
    static iPhone: UnityEngine.iOS.DeviceGeneration;
    static iPhone3G: UnityEngine.iOS.DeviceGeneration;
    static iPhone3GS: UnityEngine.iOS.DeviceGeneration;
    static iPhone4: UnityEngine.iOS.DeviceGeneration;
    static iPhone4S: UnityEngine.iOS.DeviceGeneration;
    static iPhone5: UnityEngine.iOS.DeviceGeneration;
    static iPhone5C: UnityEngine.iOS.DeviceGeneration;
    static iPhone5S: UnityEngine.iOS.DeviceGeneration;
    static iPhone6: UnityEngine.iOS.DeviceGeneration;
    static iPhone6Plus: UnityEngine.iOS.DeviceGeneration;
    static iPhone6S: UnityEngine.iOS.DeviceGeneration;
    static iPhone6SPlus: UnityEngine.iOS.DeviceGeneration;
    static iPhone7: UnityEngine.iOS.DeviceGeneration;
    static iPhone7Plus: UnityEngine.iOS.DeviceGeneration;
    static iPhoneSE1Gen: UnityEngine.iOS.DeviceGeneration;
    static iPhoneUnknown: UnityEngine.iOS.DeviceGeneration;
    static iPodTouch1Gen: UnityEngine.iOS.DeviceGeneration;
    static iPodTouch2Gen: UnityEngine.iOS.DeviceGeneration;
    static iPodTouch3Gen: UnityEngine.iOS.DeviceGeneration;
    static iPodTouch4Gen: UnityEngine.iOS.DeviceGeneration;
    static iPodTouch5Gen: UnityEngine.iOS.DeviceGeneration;
    static iPodTouch6Gen: UnityEngine.iOS.DeviceGeneration;
    static iPodTouchUnknown: UnityEngine.iOS.DeviceGeneration;
    static Unknown: UnityEngine.iOS.DeviceGeneration;
    value__: number;
  }
}
declare namespace UnityEngine.iOS {
  class ActivityIndicatorStyle extends System.Enum {
    protected constructor();
    static DontShow: UnityEngine.iOS.ActivityIndicatorStyle;
    static Gray: UnityEngine.iOS.ActivityIndicatorStyle;
    value__: number;
    static White: UnityEngine.iOS.ActivityIndicatorStyle;
    static WhiteLarge: UnityEngine.iOS.ActivityIndicatorStyle;
  }
}
declare namespace UnityEngine.iOS {
  class Device extends System.Object {
    constructor();
    static ResetNoBackupFlag(path: string): void;
    static SetNoBackupFlag(path: string): void;
    static readonly advertisingIdentifier: string;
    static readonly advertisingTrackingEnabled: boolean;
    static readonly generation: UnityEngine.iOS.DeviceGeneration;
    static readonly systemVersion: string;
    static readonly vendorIdentifier: string;
  }
}
declare namespace UnityEngine.Apple.TV {
  class Remote extends System.Object {
    constructor();
    static allowExitToHome: boolean;
    static allowRemoteRotation: boolean;
    static reportAbsoluteDpadValues: boolean;
    static touchesEnabled: boolean;
  }
}
declare namespace UnityEngine {
  class ILogger {
    protected constructor();
    IsLogTypeAllowed(logType: UnityEngine.LogType): boolean;
    Log(message: any): void;
    Log(tag: string, message: any): void;
    Log(tag: string, message: any, context: UnityEngine.Object): void;
    Log(logType: UnityEngine.LogType, message: any): void;
    Log(logType: UnityEngine.LogType, message: any, context: UnityEngine.Object): void;
    Log(logType: UnityEngine.LogType, tag: string, message: any): void;
    Log(logType: UnityEngine.LogType, tag: string, message: any, context: UnityEngine.Object): void;
    LogError(tag: string, message: any): void;
    LogError(tag: string, message: any, context: UnityEngine.Object): void;
    LogException(exception: System.Exception): void;
    LogFormat(logType: UnityEngine.LogType, format: string, args: any[]): void;
    LogWarning(tag: string, message: any): void;
    LogWarning(tag: string, message: any, context: UnityEngine.Object): void;
    filterLogType: UnityEngine.LogType;
    logEnabled: boolean;
    logHandler: UnityEngine.ILogHandler;
  }
}
declare namespace UnityEngine {
  class ILogHandler {
    protected constructor();
    LogException(exception: System.Exception, context: UnityEngine.Object): void;
    LogFormat(logType: UnityEngine.LogType, context: UnityEngine.Object, format: string, args: any[]): void;
  }
}
declare namespace UnityEngine {
  class Logger extends System.Object {
    constructor(logHandler: UnityEngine.ILogHandler);
    IsLogTypeAllowed(logType: UnityEngine.LogType): boolean;
    Log(message: any): void;
    Log(tag: string, message: any): void;
    Log(tag: string, message: any, context: UnityEngine.Object): void;
    Log(logType: UnityEngine.LogType, message: any): void;
    Log(logType: UnityEngine.LogType, message: any, context: UnityEngine.Object): void;
    Log(logType: UnityEngine.LogType, tag: string, message: any): void;
    Log(logType: UnityEngine.LogType, tag: string, message: any, context: UnityEngine.Object): void;
    LogError(tag: string, message: any): void;
    LogError(tag: string, message: any, context: UnityEngine.Object): void;
    LogException(exception: System.Exception): void;
    LogException(exception: System.Exception, context: UnityEngine.Object): void;
    LogFormat(logType: UnityEngine.LogType, format: string, args: any[]): void;
    LogFormat(logType: UnityEngine.LogType, context: UnityEngine.Object, format: string, args: any[]): void;
    LogWarning(tag: string, message: any): void;
    LogWarning(tag: string, message: any, context: UnityEngine.Object): void;
    filterLogType: UnityEngine.LogType;
    logEnabled: boolean;
    logHandler: UnityEngine.ILogHandler;
  }
}
declare namespace UnityEngine.Collections {
  class NativeLeakDetectionMode extends System.Enum {
    protected constructor();
    static Disabled: UnityEngine.Collections.NativeLeakDetectionMode;
    static Enabled: UnityEngine.Collections.NativeLeakDetectionMode;
    value__: number;
  }
}
declare namespace UnityEngine.Collections {
  class NativeLeakDetection extends System.Object {
    protected constructor();
    static Mode: UnityEngine.Collections.NativeLeakDetectionMode;
  }
}
declare namespace UnityEngine.Collections {
  class DisposeSentinel extends System.Object {
    constructor();
    static Clear(sentinel: any): void;
    static Create(ptr: any, label: UnityEngine.Collections.Allocator, callSiteStackDepth: number, deallocateDelegate?: ((buffer: any, allocator: UnityEngine.Collections.Allocator) => void)): UnityEngine.Collections.DisposeSentinel;
  }
}
declare namespace UnityEngine.Networking.PlayerConnection {
  class MessageEventArgs extends System.Object {
    constructor();
    data: number[];
    playerId: number;
  }
}
declare namespace UnityEngine.Networking.PlayerConnection {
  class IEditorPlayerConnection {
    protected constructor();
    DisconnectAll(): void;
    Register(messageId: any, callback: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    RegisterConnection(callback: ((arg0: number) => void)): void;
    RegisterDisconnection(callback: ((arg0: number) => void)): void;
    Send(messageId: any, data: number[]): void;
    Unregister(messageId: any, callback: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
  }
}
declare namespace UnityEngine.Networking.PlayerConnection {
  class PlayerConnection extends UnityEngine.ScriptableObject {
    constructor();
    DisconnectAll(): void;
    OnEnable(): void;
    Register(messageId: any, callback: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    RegisterConnection(callback: ((arg0: number) => void)): void;
    RegisterDisconnection(callback: ((arg0: number) => void)): void;
    Send(messageId: any, data: number[]): void;
    Unregister(messageId: any, callback: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    static readonly instance: UnityEngine.Networking.PlayerConnection.PlayerConnection;
    readonly isConnected: boolean;
  }
}
declare namespace UnityEngine.Networking.PlayerConnection {
  class PlayerEditorConnectionEvents extends System.Object {
    constructor();
    AddAndCreate(messageId: any): UnityEngine.Events.UnityEvent`1[[UnityEngine.Networking.PlayerConnection.MessageEventArgs, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]];
    InvokeMessageIdSubscribers(messageId: any, data: number[], playerId: number): void;
    UnregisterManagedCallback(messageId: any, callback: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    connectionEvent: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.ConnectionChangeEvent;
    disconnectionEvent: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.ConnectionChangeEvent;
    messageTypeSubscribers: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageTypeSubscribers[];
  }
}
declare namespace UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents {
  class MessageEvent {
    constructor();
    AddListener(call: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[UnityEngine.Networking.PlayerConnection.MessageEventArgs, UnityEngine.CoreModule, Version=0.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
    Invoke(arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs): void;
    RemoveListener(call: ((arg0: UnityEngine.Networking.PlayerConnection.MessageEventArgs) => void)): void;
  }
}
declare namespace UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents {
  class ConnectionChangeEvent {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: number): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: number) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=4.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Invoke(arg0: number): void;
    RemoveListener(call: ((arg0: number) => void)): void;
  }
}
declare namespace UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents {
  class MessageTypeSubscribers extends System.Object {
    constructor();
    MessageTypeId: any;
    messageCallback: UnityEngine.Networking.PlayerConnection.PlayerEditorConnectionEvents.MessageEvent;
    subscriberCount: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class BlendState extends System.ValueType {
    protected constructor();
    alphaToMask: boolean;
    blendState0: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState1: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState2: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState3: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState4: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState5: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState6: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    blendState7: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    static readonly Default: UnityEngine.Experimental.Rendering.BlendState;
    separateMRTBlendStates: boolean;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class CoreCameraValues extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class CameraProperties extends System.ValueType {
    protected constructor();
    GetCameraCullingPlane(index: number): UnityEngine.Plane;
    GetShadowCullingPlane(index: number): UnityEngine.Plane;
    SetCameraCullingPlane(index: number, plane: UnityEngine.Plane): void;
    SetShadowCullingPlane(index: number, plane: UnityEngine.Plane): void;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class ScriptableCullingParameters extends System.ValueType {
    protected constructor();
    GetCullingPlane(index: number): UnityEngine.Plane;
    GetLayerCullDistance(layerIndex: number): number;
    SetCullingPlane(index: number, plane: UnityEngine.Plane): void;
    SetLayerCullDistance(layerIndex: number, distance: number): void;
    cameraProperties: UnityEngine.Experimental.Rendering.CameraProperties;
    cullingFlags: number;
    cullingMask: number;
    cullingMatrix: UnityEngine.Matrix4x4;
    cullingPlaneCount: number;
    isOrthographic: number;
    layerCull: number;
    lodParameters: UnityEngine.Experimental.Rendering.LODParameters;
    position: UnityEngine.Vector3;
    reflectionProbeSortOptions: UnityEngine.Experimental.Rendering.ReflectionProbeSortOptions;
    sceneMask: number;
    shadowDistance: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class DepthState extends System.ValueType {
    protected constructor();
    compareFunction: UnityEngine.Rendering.CompareFunction;
    static readonly Default: UnityEngine.Experimental.Rendering.DepthState;
    writeEnabled: boolean;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class DrawRendererFlags extends System.Enum {
    protected constructor();
    static EnableDynamicBatching: UnityEngine.Experimental.Rendering.DrawRendererFlags;
    static EnableInstancing: UnityEngine.Experimental.Rendering.DrawRendererFlags;
    static None: UnityEngine.Experimental.Rendering.DrawRendererFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class DrawRendererSortSettings extends System.ValueType {
    protected constructor();
    sortOrthographic: boolean;
    cameraPosition: UnityEngine.Vector3;
    flags: UnityEngine.Experimental.Rendering.SortFlags;
    worldToCameraMatrix: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class DrawShadowsSettings extends System.ValueType {
    protected constructor();
    lightIndex: number;
    splitData: UnityEngine.Experimental.Rendering.ShadowSplitData;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class InputFilter extends System.ValueType {
    protected constructor();
    static Default(): UnityEngine.Experimental.Rendering.InputFilter;
    SetQueuesOpaque(): void;
    SetQueuesTransparent(): void;
    layerMask: number;
    renderQueueMax: number;
    renderQueueMin: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class IRenderPipeline {
    protected constructor();
    Render(renderContext: UnityEngine.Experimental.Rendering.ScriptableRenderContext, cameras: UnityEngine.Camera[]): void;
    readonly disposed: boolean;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class IRenderPipelineAsset {
    protected constructor();
    CreatePipeline(): UnityEngine.Experimental.Rendering.IRenderPipeline;
    DestroyCreatedInstances(): void;
    GetTerrainBrushPassIndex(): number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class LODParameters extends System.ValueType {
    protected constructor();
    cameraPixelHeight: number;
    cameraPosition: UnityEngine.Vector3;
    fieldOfView: number;
    isOrthographic: boolean;
    orthoSize: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RasterState extends System.ValueType {
    protected constructor();
    cullingMode: UnityEngine.Rendering.CullMode;
    depthClip: boolean;
    offsetFactor: number;
    offsetUnits: number;
    static Default: UnityEngine.Experimental.Rendering.RasterState;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class ReflectionProbeSortOptions extends System.Enum {
    protected constructor();
    static Importance: UnityEngine.Experimental.Rendering.ReflectionProbeSortOptions;
    static ImportanceThenSize: UnityEngine.Experimental.Rendering.ReflectionProbeSortOptions;
    static None: UnityEngine.Experimental.Rendering.ReflectionProbeSortOptions;
    static Size: UnityEngine.Experimental.Rendering.ReflectionProbeSortOptions;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RendererConfiguration extends System.Enum {
    protected constructor();
    static None: UnityEngine.Experimental.Rendering.RendererConfiguration;
    static PerObjectLightmaps: UnityEngine.Experimental.Rendering.RendererConfiguration;
    static PerObjectLightProbe: UnityEngine.Experimental.Rendering.RendererConfiguration;
    static PerObjectLightProbeProxyVolume: UnityEngine.Experimental.Rendering.RendererConfiguration;
    static PerObjectMotionVectors: UnityEngine.Experimental.Rendering.RendererConfiguration;
    static PerObjectReflectionProbes: UnityEngine.Experimental.Rendering.RendererConfiguration;
    static ProvideLightIndices: UnityEngine.Experimental.Rendering.RendererConfiguration;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderPipeline extends System.Object {
    protected constructor();
    Dispose(): void;
    Render(renderContext: UnityEngine.Experimental.Rendering.ScriptableRenderContext, cameras: UnityEngine.Camera[]): void;
    readonly disposed: boolean;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderPipelineAsset extends UnityEngine.ScriptableObject {
    protected constructor();
    CreatePipeline(): UnityEngine.Experimental.Rendering.IRenderPipeline;
    DestroyCreatedInstances(): void;
    GetDefault2DMaterial(): UnityEngine.Material;
    GetDefaultLineMaterial(): UnityEngine.Material;
    GetDefaultMaterial(): UnityEngine.Material;
    GetDefaultParticleMaterial(): UnityEngine.Material;
    GetDefaultShader(): UnityEngine.Shader;
    GetDefaultTerrainMaterial(): UnityEngine.Material;
    GetDefaultUIETC1SupportedMaterial(): UnityEngine.Material;
    GetDefaultUIMaterial(): UnityEngine.Material;
    GetDefaultUIOverdrawMaterial(): UnityEngine.Material;
    GetTerrainBrushPassIndex(): number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderPipelineManager extends System.Object {
    protected constructor();
    static readonly currentPipeline: UnityEngine.Experimental.Rendering.IRenderPipeline;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderStateBlock extends System.ValueType {
    protected constructor();
    blendState: UnityEngine.Experimental.Rendering.BlendState;
    depthState: UnityEngine.Experimental.Rendering.DepthState;
    mask: UnityEngine.Experimental.Rendering.RenderStateMask;
    rasterState: UnityEngine.Experimental.Rendering.RasterState;
    stencilReference: number;
    stencilState: UnityEngine.Experimental.Rendering.StencilState;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderStateMapping extends System.ValueType {
    protected constructor();
    renderType: string;
    stateBlock: UnityEngine.Experimental.Rendering.RenderStateBlock;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderStateMask extends System.Enum {
    protected constructor();
    static Blend: UnityEngine.Experimental.Rendering.RenderStateMask;
    static Depth: UnityEngine.Experimental.Rendering.RenderStateMask;
    static Everything: UnityEngine.Experimental.Rendering.RenderStateMask;
    static Nothing: UnityEngine.Experimental.Rendering.RenderStateMask;
    static Raster: UnityEngine.Experimental.Rendering.RenderStateMask;
    static Stencil: UnityEngine.Experimental.Rendering.RenderStateMask;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderTargetBlendState extends System.ValueType {
    protected constructor();
    alphaBlendOperation: UnityEngine.Rendering.BlendOp;
    colorBlendOperation: UnityEngine.Rendering.BlendOp;
    static readonly Default: UnityEngine.Experimental.Rendering.RenderTargetBlendState;
    destinationAlphaBlendMode: UnityEngine.Rendering.BlendMode;
    destinationColorBlendMode: UnityEngine.Rendering.BlendMode;
    sourceAlphaBlendMode: UnityEngine.Rendering.BlendMode;
    sourceColorBlendMode: UnityEngine.Rendering.BlendMode;
    writeMask: UnityEngine.Rendering.ColorWriteMask;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class ShadowSplitData extends System.ValueType {
    protected constructor();
    GetCullingPlane(index: number): UnityEngine.Plane;
    SetCullingPlane(index: number, plane: UnityEngine.Plane): void;
    cullingPlaneCount: number;
    cullingSphere: UnityEngine.Vector4;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class SortFlags extends System.Enum {
    protected constructor();
    static BackToFront: UnityEngine.Experimental.Rendering.SortFlags;
    static CanvasOrder: UnityEngine.Experimental.Rendering.SortFlags;
    static CommonOpaque: UnityEngine.Experimental.Rendering.SortFlags;
    static CommonTransparent: UnityEngine.Experimental.Rendering.SortFlags;
    static None: UnityEngine.Experimental.Rendering.SortFlags;
    static OptimizeStateChanges: UnityEngine.Experimental.Rendering.SortFlags;
    static QuantizedFrontToBack: UnityEngine.Experimental.Rendering.SortFlags;
    static RenderQueue: UnityEngine.Experimental.Rendering.SortFlags;
    static SortingLayer: UnityEngine.Experimental.Rendering.SortFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class StencilState extends System.ValueType {
    protected constructor();
    compareFunctionBack: UnityEngine.Rendering.CompareFunction;
    compareFunctionFront: UnityEngine.Rendering.CompareFunction;
    static readonly Default: UnityEngine.Experimental.Rendering.StencilState;
    enabled: boolean;
    failOperationBack: UnityEngine.Rendering.StencilOp;
    failOperationFront: UnityEngine.Rendering.StencilOp;
    passOperationBack: UnityEngine.Rendering.StencilOp;
    passOperationFront: UnityEngine.Rendering.StencilOp;
    readMask: number;
    writeMask: number;
    zFailOperationBack: UnityEngine.Rendering.StencilOp;
    zFailOperationFront: UnityEngine.Rendering.StencilOp;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class VisibleLightFlags extends System.Enum {
    protected constructor();
    static IntersectsFarPlane: UnityEngine.Experimental.Rendering.VisibleLightFlags;
    static IntersectsNearPlane: UnityEngine.Experimental.Rendering.VisibleLightFlags;
    static None: UnityEngine.Experimental.Rendering.VisibleLightFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderPass extends System.Object {
    constructor(ctx: UnityEngine.Experimental.Rendering.ScriptableRenderContext, w: number, h: number, samples: number, colors: UnityEngine.Experimental.Rendering.RenderPassAttachment[], depth?: UnityEngine.Experimental.Rendering.RenderPassAttachment);
    Dispose(): void;
    readonly colorAttachments: UnityEngine.Experimental.Rendering.RenderPassAttachment[];
    readonly context: UnityEngine.Experimental.Rendering.ScriptableRenderContext;
    readonly depthAttachment: UnityEngine.Experimental.Rendering.RenderPassAttachment;
    readonly height: number;
    readonly sampleCount: number;
    readonly width: number;
  }
}
declare namespace UnityEngine.Experimental.Rendering.RenderPass {
  class SubPass extends System.Object {
    constructor(renderPass: UnityEngine.Experimental.Rendering.RenderPass, colors: UnityEngine.Experimental.Rendering.RenderPassAttachment[], inputs: UnityEngine.Experimental.Rendering.RenderPassAttachment[], readOnlyDepth?: boolean);
    Dispose(): void;
  }
}
declare namespace UnityEngine.Experimental.Rendering {
  class RenderPassAttachment extends UnityEngine.Object {
    constructor(fmt: UnityEngine.RenderTextureFormat);
    BindResolveSurface(tgt: UnityEngine.Rendering.RenderTargetIdentifier): void;
    BindSurface(tgt: UnityEngine.Rendering.RenderTargetIdentifier, loadExistingContents: boolean, storeResults: boolean): void;
    Clear(clearCol: UnityEngine.Color, clearDep?: number, clearStenc?: number): void;
    static Internal_CreateAttachment(self: UnityEngine.Experimental.Rendering.RenderPassAttachment): void;
    readonly clearColor: UnityEngine.Color;
    readonly clearDepth: number;
    readonly clearStencil: number;
    readonly format: UnityEngine.RenderTextureFormat;
    readonly loadAction: UnityEngine.Rendering.RenderBufferLoadAction;
    readonly storeAction: UnityEngine.Rendering.RenderBufferStoreAction;
  }
}
declare namespace UnityEngine.Scripting {
  class UsedByNativeCodeAttribute extends System.Attribute {
    constructor();
    constructor(name: string);
    Name: string;
  }
}
declare namespace UnityEngine.Scripting {
  class RequiredByNativeCodeAttribute extends System.Attribute {
    constructor();
    constructor(name: string);
    constructor(optional: boolean);
    constructor(name: string, optional: boolean);
    Name: string;
    Optional: boolean;
  }
}
declare namespace UnityEngine.Scripting {
  class GenerateManagedProxyAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine {
  class ScriptingRuntime extends System.Object {
    constructor();
    static GetAllUserAssemblies(): string[];
  }
}
declare namespace UnityEngine.Scripting.APIUpdating {
  class MovedFromAttribute extends System.Attribute {
    constructor(sourceNamespace: string);
    constructor(sourceNamespace: string, isInDifferentAssembly: boolean);
    readonly IsInDifferentAssembly: boolean;
    readonly Namespace: string;
  }
}
declare namespace UnityEngine.Serialization {
  class FormerlySerializedAsAttribute extends System.Attribute {
    constructor(oldName: string);
    readonly oldName: string;
  }
}
declare namespace UnityEngine.Serialization {
  class UnitySurrogateSelector extends System.Object {
    constructor();
    ChainSelector(selector: any): void;
    GetNextSelector(): any;
    GetSurrogate(type: any, context: any, selector: any): any;
  }
}
declare namespace UnityEngine.Serialization {
  class ListSerializationSurrogate extends System.Object {
    constructor();
    GetObjectData(obj: any, info: any, context: any): void;
    SetObjectData(obj: any, info: any, context: any, selector: any): any;
    static Default: any;
  }
}
declare namespace UnityEngine {
  class StaticBatchingUtility extends System.Object {
    constructor();
    static Combine(staticBatchRoot: UnityEngine.GameObject): void;
    static Combine(gos: UnityEngine.GameObject[], staticBatchRoot: UnityEngine.GameObject): void;
  }
}
declare namespace UnityEngine {
  class InternalStaticBatchingUtility extends System.Object {
    constructor();
    static Combine(staticBatchRoot: UnityEngine.GameObject, combineOnlyStatic: boolean, isEditorPostprocessScene: boolean): void;
    static CombineGameObjects(gos: UnityEngine.GameObject[], staticBatchRoot: UnityEngine.GameObject, isEditorPostprocessScene: boolean): void;
    static CombineRoot(staticBatchRoot: UnityEngine.GameObject): void;
  }
}
declare namespace UnityEngine.InternalStaticBatchingUtility {
  class SortGO extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class MeshSubsetCombineUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.MeshSubsetCombineUtility {
  class MeshInstance extends System.ValueType {
    protected constructor();
    additionalVertexStreamsMeshInstanceID: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    meshInstanceID: number;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    rendererInstanceID: number;
    transform: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.MeshSubsetCombineUtility {
  class SubMeshInstance extends System.ValueType {
    protected constructor();
    gameObjectInstanceID: number;
    meshInstanceID: number;
    subMeshIndex: number;
    transform: UnityEngine.Matrix4x4;
    vertexOffset: number;
  }
}
declare namespace UnityEngine.MeshSubsetCombineUtility {
  class MeshContainer extends System.ValueType {
    protected constructor();
    gameObject: UnityEngine.GameObject;
    instance: UnityEngine.MeshSubsetCombineUtility.MeshInstance;
    subMeshInstances: UnityEngine.MeshSubsetCombineUtility.SubMeshInstance[];
  }
}
declare namespace UnityEngineInternal {
  class APIUpdaterRuntimeServices extends System.Object {
    constructor();
    static AddComponent(go: UnityEngine.GameObject, sourceInfo: string, name: string): UnityEngine.Component;
  }
}
declare namespace UnityEngineInternal {
  class TypeInferenceRules extends System.Enum {
    protected constructor();
    static ArrayOfTypeReferencedByFirstArgument: UnityEngineInternal.TypeInferenceRules;
    static TypeOfFirstArgument: UnityEngineInternal.TypeInferenceRules;
    static TypeReferencedByFirstArgument: UnityEngineInternal.TypeInferenceRules;
    static TypeReferencedBySecondArgument: UnityEngineInternal.TypeInferenceRules;
    value__: number;
  }
}
declare namespace UnityEngineInternal {
  class TypeInferenceRuleAttribute extends System.Attribute {
    constructor(rule: UnityEngineInternal.TypeInferenceRules);
    constructor(rule: string);
    ToString(): string;
  }
}
declare namespace UnityEngineInternal {
  class GenericStack extends System.Collections.Stack {
    constructor();
  }
}
declare namespace System.Collections {
  class Stack extends System.Object {
    constructor();
    constructor(initialCapacity: number);
    constructor(col: any);
    Clear(): void;
    Clone(): any;
    Contains(obj: any): boolean;
    CopyTo(array: any, index: number): void;
    GetEnumerator(): any;
    Peek(): any;
    Pop(): any;
    Push(obj: any): void;
    static Synchronized(stack: System.Collections.Stack): System.Collections.Stack;
    ToArray(): any[];
    readonly Count: number;
    readonly IsSynchronized: boolean;
    readonly SyncRoot: any;
  }
}
declare namespace UnityEngine {
  class UnsafeUtility extends System.Object {
    protected constructor();
    static Free(memory: any, label: UnityEngine.Collections.Allocator): void;
    static LogError(msg: string, filename: string, linenumber: number): void;
    static Malloc(size: number, alignment: number, label: UnityEngine.Collections.Allocator): any;
    static MemCpy(destination: any, source: any, size: number): void;
    static SizeOfStruct(type: any): number;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class ConfidenceLevel extends System.Enum {
    protected constructor();
    static High: UnityEngine.Windows.Speech.ConfidenceLevel;
    static Low: UnityEngine.Windows.Speech.ConfidenceLevel;
    static Medium: UnityEngine.Windows.Speech.ConfidenceLevel;
    static Rejected: UnityEngine.Windows.Speech.ConfidenceLevel;
    value__: number;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class SpeechSystemStatus extends System.Enum {
    protected constructor();
    static Failed: UnityEngine.Windows.Speech.SpeechSystemStatus;
    static Running: UnityEngine.Windows.Speech.SpeechSystemStatus;
    static Stopped: UnityEngine.Windows.Speech.SpeechSystemStatus;
    value__: number;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class SpeechError extends System.Enum {
    protected constructor();
    static AudioQualityFailure: UnityEngine.Windows.Speech.SpeechError;
    static GrammarCompilationFailure: UnityEngine.Windows.Speech.SpeechError;
    static GrammarLanguageMismatch: UnityEngine.Windows.Speech.SpeechError;
    static MicrophoneUnavailable: UnityEngine.Windows.Speech.SpeechError;
    static NetworkFailure: UnityEngine.Windows.Speech.SpeechError;
    static NoError: UnityEngine.Windows.Speech.SpeechError;
    static PauseLimitExceeded: UnityEngine.Windows.Speech.SpeechError;
    static TimeoutExceeded: UnityEngine.Windows.Speech.SpeechError;
    static TopicLanguageNotSupported: UnityEngine.Windows.Speech.SpeechError;
    static UnknownError: UnityEngine.Windows.Speech.SpeechError;
    value__: number;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class DictationTopicConstraint extends System.Enum {
    protected constructor();
    static Dictation: UnityEngine.Windows.Speech.DictationTopicConstraint;
    static Form: UnityEngine.Windows.Speech.DictationTopicConstraint;
    value__: number;
    static WebSearch: UnityEngine.Windows.Speech.DictationTopicConstraint;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class DictationCompletionCause extends System.Enum {
    protected constructor();
    static AudioQualityFailure: UnityEngine.Windows.Speech.DictationCompletionCause;
    static Canceled: UnityEngine.Windows.Speech.DictationCompletionCause;
    static Complete: UnityEngine.Windows.Speech.DictationCompletionCause;
    static MicrophoneUnavailable: UnityEngine.Windows.Speech.DictationCompletionCause;
    static NetworkFailure: UnityEngine.Windows.Speech.DictationCompletionCause;
    static PauseLimitExceeded: UnityEngine.Windows.Speech.DictationCompletionCause;
    static TimeoutExceeded: UnityEngine.Windows.Speech.DictationCompletionCause;
    static UnknownError: UnityEngine.Windows.Speech.DictationCompletionCause;
    value__: number;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class SemanticMeaning extends System.ValueType {
    protected constructor();
    key: string;
    values: string[];
  }
}
declare namespace UnityEngine.Windows.Speech {
  class PhraseRecognizedEventArgs extends System.ValueType {
    protected constructor();
    confidence: UnityEngine.Windows.Speech.ConfidenceLevel;
    phraseDuration: any;
    phraseStartTime: any;
    semanticMeanings: UnityEngine.Windows.Speech.SemanticMeaning[];
    text: string;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class KeywordRecognizer extends UnityEngine.Windows.Speech.PhraseRecognizer {
    constructor(keywords: string[]);
    constructor(keywords: string[], minimumConfidence: UnityEngine.Windows.Speech.ConfidenceLevel);
    readonly Keywords: any;
  }
}
declare namespace UnityEngine.Windows.Speech {
  class GrammarRecognizer extends UnityEngine.Windows.Speech.PhraseRecognizer {
    constructor(grammarFilePath: string);
    constructor(grammarFilePath: string, minimumConfidence: UnityEngine.Windows.Speech.ConfidenceLevel);
    readonly GrammarFilePath: string;
  }
}
declare namespace UnityEngineInternal {
  class NetFxCoreExtensions extends System.Object {
    protected constructor();
    static CreateDelegate(self: any, delegateType: any, target: any): any;
    static GetMethodInfo(self: any): any;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSAlign extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.CSSLayout.CSSAlign;
    static Center: UnityEngine.CSSLayout.CSSAlign;
    static FlexEnd: UnityEngine.CSSLayout.CSSAlign;
    static FlexStart: UnityEngine.CSSLayout.CSSAlign;
    static Stretch: UnityEngine.CSSLayout.CSSAlign;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSConstants extends System.Object {
    protected constructor();
    static IsUndefined(value: number): boolean;
    static Undefined: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSDimension extends System.Enum {
    protected constructor();
    static Height: UnityEngine.CSSLayout.CSSDimension;
    value__: number;
    static Width: UnityEngine.CSSLayout.CSSDimension;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSDirection extends System.Enum {
    protected constructor();
    static Inherit: UnityEngine.CSSLayout.CSSDirection;
    static LeftToRight: UnityEngine.CSSLayout.CSSDirection;
    static LTR: UnityEngine.CSSLayout.CSSDirection;
    static RightToLeft: UnityEngine.CSSLayout.CSSDirection;
    static RTL: UnityEngine.CSSLayout.CSSDirection;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSEdge extends System.Enum {
    protected constructor();
    static All: UnityEngine.CSSLayout.CSSEdge;
    static Bottom: UnityEngine.CSSLayout.CSSEdge;
    static End: UnityEngine.CSSLayout.CSSEdge;
    static Horizontal: UnityEngine.CSSLayout.CSSEdge;
    static Left: UnityEngine.CSSLayout.CSSEdge;
    static Right: UnityEngine.CSSLayout.CSSEdge;
    static Start: UnityEngine.CSSLayout.CSSEdge;
    static Top: UnityEngine.CSSLayout.CSSEdge;
    value__: number;
    static Vertical: UnityEngine.CSSLayout.CSSEdge;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSExperimentalFeature extends System.Enum {
    protected constructor();
    static Rounding: UnityEngine.CSSLayout.CSSExperimentalFeature;
    value__: number;
    static WebFlexBasis: UnityEngine.CSSLayout.CSSExperimentalFeature;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSFlexDirection extends System.Enum {
    protected constructor();
    static Column: UnityEngine.CSSLayout.CSSFlexDirection;
    static ColumnReverse: UnityEngine.CSSLayout.CSSFlexDirection;
    static Row: UnityEngine.CSSLayout.CSSFlexDirection;
    static RowReverse: UnityEngine.CSSLayout.CSSFlexDirection;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSJustify extends System.Enum {
    protected constructor();
    static Center: UnityEngine.CSSLayout.CSSJustify;
    static FlexEnd: UnityEngine.CSSLayout.CSSJustify;
    static FlexStart: UnityEngine.CSSLayout.CSSJustify;
    static SpaceAround: UnityEngine.CSSLayout.CSSJustify;
    static SpaceBetween: UnityEngine.CSSLayout.CSSJustify;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSLogger extends System.Object {
    protected constructor();
    static Initialize(): void;
    static Logger: ((level: UnityEngine.CSSLayout.CSSLogLevel, message: string) => void);
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSLogLevel extends System.Enum {
    protected constructor();
    static Debug: UnityEngine.CSSLayout.CSSLogLevel;
    static Error: UnityEngine.CSSLayout.CSSLogLevel;
    static Info: UnityEngine.CSSLayout.CSSLogLevel;
    value__: number;
    static Verbose: UnityEngine.CSSLayout.CSSLogLevel;
    static Warn: UnityEngine.CSSLayout.CSSLogLevel;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSMeasureMode extends System.Enum {
    protected constructor();
    static AtMost: UnityEngine.CSSLayout.CSSMeasureMode;
    static Exactly: UnityEngine.CSSLayout.CSSMeasureMode;
    static Undefined: UnityEngine.CSSLayout.CSSMeasureMode;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSNode extends System.Object {
    constructor();
    CalculateLayout(): void;
    Clear(): void;
    CopyStyle(srcNode: UnityEngine.CSSLayout.CSSNode): void;
    GetBorder(edge: UnityEngine.CSSLayout.CSSEdge): number;
    GetEnumerator(): any;
    static GetInstanceCount(): number;
    GetMargin(edge: UnityEngine.CSSLayout.CSSEdge): number;
    GetPadding(edge: UnityEngine.CSSLayout.CSSEdge): number;
    GetPosition(edge: UnityEngine.CSSLayout.CSSEdge): number;
    IndexOf(node: UnityEngine.CSSLayout.CSSNode): number;
    Insert(index: number, node: UnityEngine.CSSLayout.CSSNode): void;
    static IsExperimentalFeatureEnabled(feature: UnityEngine.CSSLayout.CSSExperimentalFeature): boolean;
    MarkDirty(): void;
    MarkHasNewLayout(): void;
    MarkLayoutSeen(): void;
    Print(): string;
    Print(options: UnityEngine.CSSLayout.CSSPrintOptions): string;
    RemoveAt(index: number): void;
    Reset(): void;
    SetBorder(edge: UnityEngine.CSSLayout.CSSEdge, border: number): void;
    static SetExperimentalFeatureEnabled(feature: UnityEngine.CSSLayout.CSSExperimentalFeature, enabled: boolean): void;
    SetMargin(edge: UnityEngine.CSSLayout.CSSEdge, value: number): void;
    SetMeasureFunction(measureFunction: ((node: UnityEngine.CSSLayout.CSSNode, width: number, widthMode: UnityEngine.CSSLayout.CSSMeasureMode, height: number, heightMode: UnityEngine.CSSLayout.CSSMeasureMode) => number)): void;
    SetPadding(edge: UnityEngine.CSSLayout.CSSEdge, padding: number): void;
    SetPosition(edge: UnityEngine.CSSLayout.CSSEdge, position: number): void;
    ValuesEqual(f1: number, f2: number): boolean;
    AlignContent: UnityEngine.CSSLayout.CSSAlign;
    AlignItems: UnityEngine.CSSLayout.CSSAlign;
    AlignSelf: UnityEngine.CSSLayout.CSSAlign;
    AspectRatio: number;
    readonly Count: number;
    Data: any;
    FlexBasis: number;
    FlexDirection: UnityEngine.CSSLayout.CSSFlexDirection;
    FlexGrow: number;
    FlexShrink: number;
    readonly HasNewLayout: boolean;
    Height: number;
    readonly IsDirty: boolean;
    readonly IsMeasureDefined: boolean;
    get_Item(index: number): UnityEngine.CSSLayout.CSSNode;
    JustifyContent: UnityEngine.CSSLayout.CSSJustify;
    readonly LayoutDirection: UnityEngine.CSSLayout.CSSDirection;
    readonly LayoutHeight: number;
    readonly LayoutWidth: number;
    readonly LayoutX: number;
    readonly LayoutY: number;
    MaxHeight: number;
    MaxWidth: number;
    MinHeight: number;
    MinWidth: number;
    Overflow: UnityEngine.CSSLayout.CSSOverflow;
    readonly Parent: UnityEngine.CSSLayout.CSSNode;
    PositionType: UnityEngine.CSSLayout.CSSPositionType;
    StyleDirection: UnityEngine.CSSLayout.CSSDirection;
    Width: number;
    Wrap: UnityEngine.CSSLayout.CSSWrap;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSOverflow extends System.Enum {
    protected constructor();
    static Hidden: UnityEngine.CSSLayout.CSSOverflow;
    static Scroll: UnityEngine.CSSLayout.CSSOverflow;
    value__: number;
    static Visible: UnityEngine.CSSLayout.CSSOverflow;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSPositionType extends System.Enum {
    protected constructor();
    static Absolute: UnityEngine.CSSLayout.CSSPositionType;
    static Relative: UnityEngine.CSSLayout.CSSPositionType;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSPrintOptions extends System.Enum {
    protected constructor();
    static Children: UnityEngine.CSSLayout.CSSPrintOptions;
    static Layout: UnityEngine.CSSLayout.CSSPrintOptions;
    static Style: UnityEngine.CSSLayout.CSSPrintOptions;
    value__: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSSize extends System.ValueType {
    protected constructor();
    height: number;
    width: number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class CSSWrap extends System.Enum {
    protected constructor();
    static NoWrap: UnityEngine.CSSLayout.CSSWrap;
    value__: number;
    static Wrap: UnityEngine.CSSLayout.CSSWrap;
  }
}
declare namespace UnityEngine.CSSLayout {
  class MeasureOutput extends System.Object {
    constructor();
    static GetHeight(measureOutput: number): number;
    static GetWidth(measureOutput: number): number;
    static Make(width: number, height: number): number;
    static Make(width: number, height: number): number;
  }
}
declare namespace UnityEngine.CSSLayout {
  class Native extends System.Object {
    protected constructor();
    static CSSLayoutIsExperimentalFeatureEnabled(feature: UnityEngine.CSSLayout.CSSExperimentalFeature): boolean;
    static CSSLayoutSetExperimentalFeatureEnabled(feature: UnityEngine.CSSLayout.CSSExperimentalFeature, enabled: boolean): void;
    static CSSNodeCalculateLayout(node: any, availableWidth: number, availableHeight: number, parentDirection: UnityEngine.CSSLayout.CSSDirection): void;
    static CSSNodeChildCount(node: any): number;
    static CSSNodeCopyStyle(dstNode: any, srcNode: any): void;
    static CSSNodeFree(cssNode: any): void;
    static CSSNodeGetChild(node: any, index: number): any;
    static CSSNodeGetContext(node: any): any;
    static CSSNodeGetHasNewLayout(node: any): boolean;
    static CSSNodeGetInstanceCount(): number;
    static CSSNodeGetMeasureFunc(node: any): ((node: any, width: number, widthMode: UnityEngine.CSSLayout.CSSMeasureMode, height: number, heightMode: UnityEngine.CSSLayout.CSSMeasureMode) => UnityEngine.CSSLayout.CSSSize);
    static CSSNodeInit(cssNode: any): void;
    static CSSNodeInsertChild(node: any, child: any, index: number): void;
    static CSSNodeIsDirty(node: any): boolean;
    static CSSNodeLayoutGetBottom(node: any): number;
    static CSSNodeLayoutGetDirection(node: any): UnityEngine.CSSLayout.CSSDirection;
    static CSSNodeLayoutGetHeight(node: any): number;
    static CSSNodeLayoutGetLeft(node: any): number;
    static CSSNodeLayoutGetRight(node: any): number;
    static CSSNodeLayoutGetTop(node: any): number;
    static CSSNodeLayoutGetWidth(node: any): number;
    static CSSNodeMarkDirty(node: any): void;
    static CSSNodeMeasureInvoke(node: any, width: number, widthMode: UnityEngine.CSSLayout.CSSMeasureMode, height: number, heightMode: UnityEngine.CSSLayout.CSSMeasureMode, returnValueAddress: any): void;
    static CSSNodeNew(): any;
    static CSSNodePrint(node: any, options: UnityEngine.CSSLayout.CSSPrintOptions): void;
    static CSSNodeRemoveChild(node: any, child: any): void;
    static CSSNodeReset(cssNode: any): void;
    static CSSNodeSetContext(node: any, context: any): void;
    static CSSNodeSetHasNewLayout(node: any, hasNewLayout: boolean): void;
    static CSSNodeSetMeasureFunc(node: any, measureFunc: ((node: any, width: number, widthMode: UnityEngine.CSSLayout.CSSMeasureMode, height: number, heightMode: UnityEngine.CSSLayout.CSSMeasureMode) => UnityEngine.CSSLayout.CSSSize)): void;
    static CSSNodeStyleGetAlignContent(node: any): UnityEngine.CSSLayout.CSSAlign;
    static CSSNodeStyleGetAlignItems(node: any): UnityEngine.CSSLayout.CSSAlign;
    static CSSNodeStyleGetAlignSelf(node: any): UnityEngine.CSSLayout.CSSAlign;
    static CSSNodeStyleGetAspectRatio(node: any): number;
    static CSSNodeStyleGetBorder(node: any, edge: UnityEngine.CSSLayout.CSSEdge): number;
    static CSSNodeStyleGetDirection(node: any): UnityEngine.CSSLayout.CSSDirection;
    static CSSNodeStyleGetFlexBasis(node: any): number;
    static CSSNodeStyleGetFlexDirection(node: any): UnityEngine.CSSLayout.CSSFlexDirection;
    static CSSNodeStyleGetFlexGrow(node: any): number;
    static CSSNodeStyleGetFlexShrink(node: any): number;
    static CSSNodeStyleGetFlexWrap(node: any): UnityEngine.CSSLayout.CSSWrap;
    static CSSNodeStyleGetHeight(node: any): number;
    static CSSNodeStyleGetJustifyContent(node: any): UnityEngine.CSSLayout.CSSJustify;
    static CSSNodeStyleGetMargin(node: any, edge: UnityEngine.CSSLayout.CSSEdge): number;
    static CSSNodeStyleGetMaxHeight(node: any): number;
    static CSSNodeStyleGetMaxWidth(node: any): number;
    static CSSNodeStyleGetMinHeight(node: any): number;
    static CSSNodeStyleGetMinWidth(node: any): number;
    static CSSNodeStyleGetOverflow(node: any): UnityEngine.CSSLayout.CSSOverflow;
    static CSSNodeStyleGetPadding(node: any, edge: UnityEngine.CSSLayout.CSSEdge): number;
    static CSSNodeStyleGetPosition(node: any, edge: UnityEngine.CSSLayout.CSSEdge): number;
    static CSSNodeStyleGetPositionType(node: any): UnityEngine.CSSLayout.CSSPositionType;
    static CSSNodeStyleGetWidth(node: any): number;
    static CSSNodeStyleSetAlignContent(node: any, alignContent: UnityEngine.CSSLayout.CSSAlign): void;
    static CSSNodeStyleSetAlignItems(node: any, alignItems: UnityEngine.CSSLayout.CSSAlign): void;
    static CSSNodeStyleSetAlignSelf(node: any, alignSelf: UnityEngine.CSSLayout.CSSAlign): void;
    static CSSNodeStyleSetAspectRatio(node: any, aspectRatio: number): void;
    static CSSNodeStyleSetBorder(node: any, edge: UnityEngine.CSSLayout.CSSEdge, border: number): void;
    static CSSNodeStyleSetDirection(node: any, direction: UnityEngine.CSSLayout.CSSDirection): void;
    static CSSNodeStyleSetFlex(node: any, flex: number): void;
    static CSSNodeStyleSetFlexBasis(node: any, flexBasis: number): void;
    static CSSNodeStyleSetFlexDirection(node: any, flexDirection: UnityEngine.CSSLayout.CSSFlexDirection): void;
    static CSSNodeStyleSetFlexGrow(node: any, flexGrow: number): void;
    static CSSNodeStyleSetFlexShrink(node: any, flexShrink: number): void;
    static CSSNodeStyleSetFlexWrap(node: any, flexWrap: UnityEngine.CSSLayout.CSSWrap): void;
    static CSSNodeStyleSetHeight(node: any, height: number): void;
    static CSSNodeStyleSetJustifyContent(node: any, justifyContent: UnityEngine.CSSLayout.CSSJustify): void;
    static CSSNodeStyleSetMargin(node: any, edge: UnityEngine.CSSLayout.CSSEdge, margin: number): void;
    static CSSNodeStyleSetMaxHeight(node: any, maxHeight: number): void;
    static CSSNodeStyleSetMaxWidth(node: any, maxWidth: number): void;
    static CSSNodeStyleSetMinHeight(node: any, minHeight: number): void;
    static CSSNodeStyleSetMinWidth(node: any, minWidth: number): void;
    static CSSNodeStyleSetOverflow(node: any, flexWrap: UnityEngine.CSSLayout.CSSOverflow): void;
    static CSSNodeStyleSetPadding(node: any, edge: UnityEngine.CSSLayout.CSSEdge, padding: number): void;
    static CSSNodeStyleSetPosition(node: any, edge: UnityEngine.CSSLayout.CSSEdge, position: number): void;
    static CSSNodeStyleSetPositionType(node: any, positionType: UnityEngine.CSSLayout.CSSPositionType): void;
    static CSSNodeStyleSetWidth(node: any, width: number): void;
    static CSSValueIsUndefined(value: number): boolean;
  }
}
declare namespace UnityEngine.CrashReportHandler {
  class CrashReportHandler extends System.Object {
    protected constructor();
    static enableCaptureExceptions: boolean;
  }
}
declare namespace UnityEngine.Playables {
  class DirectorWrapMode extends System.Enum {
    protected constructor();
    static Hold: UnityEngine.Playables.DirectorWrapMode;
    static Loop: UnityEngine.Playables.DirectorWrapMode;
    static None: UnityEngine.Playables.DirectorWrapMode;
    value__: number;
  }
}
declare namespace UnityEngine.Playables {
  class PlayableDirector extends UnityEngine.Behaviour {
    constructor();
    ClearReferenceValue(id: UnityEngine.PropertyName): void;
    DeferredEvaluate(): void;
    Evaluate(): void;
    GetGenericBinding(key: UnityEngine.Object): UnityEngine.Object;
    GetReferenceValue(id: UnityEngine.PropertyName, idValid: any): UnityEngine.Object;
    Pause(): void;
    Play(): void;
    Play(asset: UnityEngine.Playables.PlayableAsset): void;
    Play(asset: UnityEngine.Playables.PlayableAsset, mode: UnityEngine.Playables.DirectorWrapMode): void;
    Resume(): void;
    SetGenericBinding(key: UnityEngine.Object, value: UnityEngine.Object): void;
    SetReferenceValue(id: UnityEngine.PropertyName, value: UnityEngine.Object): void;
    Stop(): void;
    readonly duration: number;
    extrapolationMode: UnityEngine.Playables.DirectorWrapMode;
    initialTime: number;
    playableAsset: UnityEngine.Playables.PlayableAsset;
    readonly playableGraph: UnityEngine.Playables.PlayableGraph;
    readonly state: UnityEngine.Playables.PlayState;
    time: number;
    timeUpdateMode: UnityEngine.Playables.DirectorUpdateMode;
  }
}
declare namespace UnityEngine.SocialPlatforms.GameCenter {
  class GameCenterPlatform extends System.Object {
    constructor();
    CreateAchievement(): UnityEngine.SocialPlatforms.IAchievement;
    CreateLeaderboard(): UnityEngine.SocialPlatforms.ILeaderboard;
    GetLoading(board: UnityEngine.SocialPlatforms.ILeaderboard): boolean;
    LoadAchievementDescriptions(callback: ((obj: UnityEngine.SocialPlatforms.IAchievementDescription[]) => void)): void;
    LoadAchievements(callback: ((obj: UnityEngine.SocialPlatforms.IAchievement[]) => void)): void;
    LoadScores(category: string, callback: ((obj: UnityEngine.SocialPlatforms.IScore[]) => void)): void;
    LoadScores(board: UnityEngine.SocialPlatforms.ILeaderboard, callback: ((obj: boolean) => void)): void;
    LoadUsers(userIds: string[], callback: ((obj: UnityEngine.SocialPlatforms.IUserProfile[]) => void)): void;
    ReportProgress(id: string, progress: number, callback: ((obj: boolean) => void)): void;
    ReportScore(score: number, board: string, callback: ((obj: boolean) => void)): void;
    static ResetAllAchievements(callback: ((obj: boolean) => void)): void;
    ShowAchievementsUI(): void;
    static ShowDefaultAchievementCompletionBanner(value: boolean): void;
    ShowLeaderboardUI(): void;
    static ShowLeaderboardUI(leaderboardID: string, timeScope: UnityEngine.SocialPlatforms.TimeScope): void;
    readonly localUser: UnityEngine.SocialPlatforms.ILocalUser;
  }
}
declare namespace UnityEngine.SocialPlatforms.GameCenter {
  class GcLeaderboard extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.SocialPlatforms.GameCenter {
  class GcUserProfileData extends System.ValueType {
    protected constructor();
    AddToArray(array: any, number: number): void;
    ToUserProfile(): UnityEngine.SocialPlatforms.Impl.UserProfile;
    image: UnityEngine.Texture2D;
    isFriend: number;
    userID: string;
    userName: string;
  }
}
declare namespace UnityEngine.SocialPlatforms.GameCenter {
  class GcAchievementDescriptionData extends System.ValueType {
    protected constructor();
    ToAchievementDescription(): UnityEngine.SocialPlatforms.Impl.AchievementDescription;
    m_AchievedDescription: string;
    m_Hidden: number;
    m_Identifier: string;
    m_Image: UnityEngine.Texture2D;
    m_Points: number;
    m_Title: string;
    m_UnachievedDescription: string;
  }
}
declare namespace UnityEngine.SocialPlatforms.GameCenter {
  class GcAchievementData extends System.ValueType {
    protected constructor();
    ToAchievement(): UnityEngine.SocialPlatforms.Impl.Achievement;
    m_Completed: number;
    m_Hidden: number;
    m_Identifier: string;
    m_LastReportedDate: number;
    m_PercentCompleted: number;
  }
}
declare namespace UnityEngine.SocialPlatforms.GameCenter {
  class GcScoreData extends System.ValueType {
    protected constructor();
    ToScore(): UnityEngine.SocialPlatforms.Impl.Score;
    m_Category: string;
    m_Date: number;
    m_FormattedValue: string;
    m_PlayerID: string;
    m_Rank: number;
    m_ValueHigh: number;
    m_ValueLow: number;
  }
}
declare namespace UnityEngine.SocialPlatforms.Impl {
  class LocalUser extends UnityEngine.SocialPlatforms.Impl.UserProfile {
    constructor();
    Authenticate(callback: ((obj: boolean) => void)): void;
    Authenticate(callback: ((arg1: boolean, arg2: string) => void)): void;
    LoadFriends(callback: ((obj: boolean) => void)): void;
    SetAuthenticated(value: boolean): void;
    SetFriends(friends: UnityEngine.SocialPlatforms.IUserProfile[]): void;
    SetUnderage(value: boolean): void;
    readonly authenticated: boolean;
    readonly friends: UnityEngine.SocialPlatforms.IUserProfile[];
    readonly underage: boolean;
  }
}
declare namespace UnityEngine.SocialPlatforms.Impl {
  class UserProfile extends System.Object {
    constructor();
    constructor(name: string, id: string, friend: boolean);
    constructor(name: string, id: string, friend: boolean, state: UnityEngine.SocialPlatforms.UserState, image: UnityEngine.Texture2D);
    SetImage(image: UnityEngine.Texture2D): void;
    SetIsFriend(value: boolean): void;
    SetState(state: UnityEngine.SocialPlatforms.UserState): void;
    SetUserID(id: string): void;
    SetUserName(name: string): void;
    ToString(): string;
    readonly id: string;
    readonly image: UnityEngine.Texture2D;
    readonly isFriend: boolean;
    readonly state: UnityEngine.SocialPlatforms.UserState;
    readonly userName: string;
  }
}
declare namespace UnityEngine.SocialPlatforms.Impl {
  class Achievement extends System.Object {
    constructor(id: string, percentCompleted: number, completed: boolean, hidden: boolean, lastReportedDate: any);
    constructor(id: string, percent: number);
    constructor();
    ReportProgress(callback: ((obj: boolean) => void)): void;
    SetCompleted(value: boolean): void;
    SetHidden(value: boolean): void;
    SetLastReportedDate(date: any): void;
    ToString(): string;
    readonly completed: boolean;
    readonly hidden: boolean;
    id: string;
    readonly lastReportedDate: any;
    percentCompleted: number;
  }
}
declare namespace UnityEngine.SocialPlatforms.Impl {
  class AchievementDescription extends System.Object {
    constructor(id: string, title: string, image: UnityEngine.Texture2D, achievedDescription: string, unachievedDescription: string, hidden: boolean, points: number);
    SetImage(image: UnityEngine.Texture2D): void;
    ToString(): string;
    readonly achievedDescription: string;
    readonly hidden: boolean;
    id: string;
    readonly image: UnityEngine.Texture2D;
    readonly points: number;
    readonly title: string;
    readonly unachievedDescription: string;
  }
}
declare namespace UnityEngine.SocialPlatforms.Impl {
  class Score extends System.Object {
    constructor();
    constructor(leaderboardID: string, value: number);
    constructor(leaderboardID: string, value: number, userID: string, date: any, formattedValue: string, rank: number);
    ReportScore(callback: ((obj: boolean) => void)): void;
    SetDate(date: any): void;
    SetFormattedValue(value: string): void;
    SetRank(rank: number): void;
    SetUserID(userID: string): void;
    ToString(): string;
    readonly date: any;
    readonly formattedValue: string;
    leaderboardID: string;
    readonly rank: number;
    readonly userID: string;
    value: number;
  }
}
declare namespace UnityEngine.SocialPlatforms.Impl {
  class Leaderboard extends System.Object {
    constructor();
    GetUserFilter(): string[];
    LoadScores(callback: ((obj: boolean) => void)): void;
    SetLocalUserScore(score: UnityEngine.SocialPlatforms.IScore): void;
    SetMaxRange(maxRange: number): void;
    SetScores(scores: UnityEngine.SocialPlatforms.IScore[]): void;
    SetTitle(title: string): void;
    SetUserFilter(userIDs: string[]): void;
    ToString(): string;
    id: string;
    readonly loading: boolean;
    readonly localUserScore: UnityEngine.SocialPlatforms.IScore;
    readonly maxRange: number;
    range: UnityEngine.SocialPlatforms.Range;
    readonly scores: UnityEngine.SocialPlatforms.IScore[];
    timeScope: UnityEngine.SocialPlatforms.TimeScope;
    readonly title: string;
    userScope: UnityEngine.SocialPlatforms.UserScope;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class Local extends System.Object {
    constructor();
    CreateAchievement(): UnityEngine.SocialPlatforms.IAchievement;
    CreateLeaderboard(): UnityEngine.SocialPlatforms.ILeaderboard;
    LoadAchievementDescriptions(callback: ((obj: UnityEngine.SocialPlatforms.IAchievementDescription[]) => void)): void;
    LoadAchievements(callback: ((obj: UnityEngine.SocialPlatforms.IAchievement[]) => void)): void;
    LoadScores(leaderboardID: string, callback: ((obj: UnityEngine.SocialPlatforms.IScore[]) => void)): void;
    LoadUsers(userIDs: string[], callback: ((obj: UnityEngine.SocialPlatforms.IUserProfile[]) => void)): void;
    ReportProgress(id: string, progress: number, callback: ((obj: boolean) => void)): void;
    ReportScore(score: number, board: string, callback: ((obj: boolean) => void)): void;
    ShowAchievementsUI(): void;
    ShowLeaderboardUI(): void;
    readonly localUser: UnityEngine.SocialPlatforms.ILocalUser;
  }
}
declare namespace UnityEngine {
  class Social extends System.Object {
    protected constructor();
    static CreateAchievement(): UnityEngine.SocialPlatforms.IAchievement;
    static CreateLeaderboard(): UnityEngine.SocialPlatforms.ILeaderboard;
    static LoadAchievementDescriptions(callback: ((obj: UnityEngine.SocialPlatforms.IAchievementDescription[]) => void)): void;
    static LoadAchievements(callback: ((obj: UnityEngine.SocialPlatforms.IAchievement[]) => void)): void;
    static LoadScores(leaderboardID: string, callback: ((obj: UnityEngine.SocialPlatforms.IScore[]) => void)): void;
    static LoadUsers(userIDs: string[], callback: ((obj: UnityEngine.SocialPlatforms.IUserProfile[]) => void)): void;
    static ReportProgress(achievementID: string, progress: number, callback: ((obj: boolean) => void)): void;
    static ReportScore(score: number, board: string, callback: ((obj: boolean) => void)): void;
    static ShowAchievementsUI(): void;
    static ShowLeaderboardUI(): void;
    static Active: UnityEngine.SocialPlatforms.ISocialPlatform;
    static readonly localUser: UnityEngine.SocialPlatforms.ILocalUser;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class ActivePlatform extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class ISocialPlatform {
    protected constructor();
    Authenticate(user: UnityEngine.SocialPlatforms.ILocalUser, callback: ((obj: boolean) => void)): void;
    Authenticate(user: UnityEngine.SocialPlatforms.ILocalUser, callback: ((arg1: boolean, arg2: string) => void)): void;
    CreateAchievement(): UnityEngine.SocialPlatforms.IAchievement;
    CreateLeaderboard(): UnityEngine.SocialPlatforms.ILeaderboard;
    GetLoading(board: UnityEngine.SocialPlatforms.ILeaderboard): boolean;
    LoadAchievementDescriptions(callback: ((obj: UnityEngine.SocialPlatforms.IAchievementDescription[]) => void)): void;
    LoadAchievements(callback: ((obj: UnityEngine.SocialPlatforms.IAchievement[]) => void)): void;
    LoadFriends(user: UnityEngine.SocialPlatforms.ILocalUser, callback: ((obj: boolean) => void)): void;
    LoadScores(leaderboardID: string, callback: ((obj: UnityEngine.SocialPlatforms.IScore[]) => void)): void;
    LoadScores(board: UnityEngine.SocialPlatforms.ILeaderboard, callback: ((obj: boolean) => void)): void;
    LoadUsers(userIDs: string[], callback: ((obj: UnityEngine.SocialPlatforms.IUserProfile[]) => void)): void;
    ReportProgress(achievementID: string, progress: number, callback: ((obj: boolean) => void)): void;
    ReportScore(score: number, board: string, callback: ((obj: boolean) => void)): void;
    ShowAchievementsUI(): void;
    ShowLeaderboardUI(): void;
    readonly localUser: UnityEngine.SocialPlatforms.ILocalUser;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class ILocalUser {
    protected constructor();
    Authenticate(callback: ((obj: boolean) => void)): void;
    Authenticate(callback: ((arg1: boolean, arg2: string) => void)): void;
    LoadFriends(callback: ((obj: boolean) => void)): void;
    readonly authenticated: boolean;
    readonly friends: UnityEngine.SocialPlatforms.IUserProfile[];
    readonly underage: boolean;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class UserState extends System.Enum {
    protected constructor();
    static Offline: UnityEngine.SocialPlatforms.UserState;
    static Online: UnityEngine.SocialPlatforms.UserState;
    static OnlineAndAway: UnityEngine.SocialPlatforms.UserState;
    static OnlineAndBusy: UnityEngine.SocialPlatforms.UserState;
    static Playing: UnityEngine.SocialPlatforms.UserState;
    value__: number;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class IUserProfile {
    protected constructor();
    readonly id: string;
    readonly image: UnityEngine.Texture2D;
    readonly isFriend: boolean;
    readonly state: UnityEngine.SocialPlatforms.UserState;
    readonly userName: string;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class IAchievement {
    protected constructor();
    ReportProgress(callback: ((obj: boolean) => void)): void;
    readonly completed: boolean;
    readonly hidden: boolean;
    id: string;
    readonly lastReportedDate: any;
    percentCompleted: number;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class IAchievementDescription {
    protected constructor();
    readonly achievedDescription: string;
    readonly hidden: boolean;
    id: string;
    readonly image: UnityEngine.Texture2D;
    readonly points: number;
    readonly title: string;
    readonly unachievedDescription: string;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class IScore {
    protected constructor();
    ReportScore(callback: ((obj: boolean) => void)): void;
    readonly date: any;
    readonly formattedValue: string;
    leaderboardID: string;
    readonly rank: number;
    readonly userID: string;
    value: number;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class UserScope extends System.Enum {
    protected constructor();
    static FriendsOnly: UnityEngine.SocialPlatforms.UserScope;
    static Global: UnityEngine.SocialPlatforms.UserScope;
    value__: number;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class TimeScope extends System.Enum {
    protected constructor();
    static AllTime: UnityEngine.SocialPlatforms.TimeScope;
    static Today: UnityEngine.SocialPlatforms.TimeScope;
    value__: number;
    static Week: UnityEngine.SocialPlatforms.TimeScope;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class Range extends System.ValueType {
    protected constructor();
    count: number;
    from: number;
  }
}
declare namespace UnityEngine.SocialPlatforms {
  class ILeaderboard {
    protected constructor();
    LoadScores(callback: ((obj: boolean) => void)): void;
    SetUserFilter(userIDs: string[]): void;
    id: string;
    readonly loading: boolean;
    readonly localUserScore: UnityEngine.SocialPlatforms.IScore;
    readonly maxRange: number;
    range: UnityEngine.SocialPlatforms.Range;
    readonly scores: UnityEngine.SocialPlatforms.IScore[];
    timeScope: UnityEngine.SocialPlatforms.TimeScope;
    readonly title: string;
    userScope: UnityEngine.SocialPlatforms.UserScope;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioQuality extends System.Enum {
    protected constructor();
    static High: UnityEngine.Experimental.Audio.Google.GvrAudioQuality;
    static Low: UnityEngine.Experimental.Audio.Google.GvrAudioQuality;
    static Stereo: UnityEngine.Experimental.Audio.Google.GvrAudioQuality;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudio extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.Audio.Google.GvrAudio {
  class SpatializerData extends System.Enum {
    protected constructor();
    static ChannelSet: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    static DistanceAttenuation: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    static Gain: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    static Id: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    static MinDistance: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    static NumChannels: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    static Type: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
    value__: number;
    static ZeroOutput: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerData;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google.GvrAudio {
  class SpatializerType extends System.Enum {
    protected constructor();
    static Soundfield: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerType;
    static Source: UnityEngine.Experimental.Audio.Google.GvrAudio.SpatializerType;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google.GvrAudio {
  class RoomProperties extends System.ValueType {
    protected constructor();
    dimensionsX: number;
    dimensionsY: number;
    dimensionsZ: number;
    materialBack: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    materialBottom: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    materialFront: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    materialLeft: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    materialRight: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    materialTop: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    positionX: number;
    positionY: number;
    positionZ: number;
    reflectionScalar: number;
    reverbBrightness: number;
    reverbGain: number;
    reverbTime: number;
    rotationW: number;
    rotationX: number;
    rotationY: number;
    rotationZ: number;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioListenerExtensionMethods extends System.Object {
    protected constructor();
    static GetGlobalGainDb(listener: UnityEngine.AudioListener): number;
    static GetOcclusionMask(listener: UnityEngine.AudioListener): UnityEngine.LayerMask;
    static GetQuality(listener: UnityEngine.AudioListener): UnityEngine.Experimental.Audio.Google.GvrAudioQuality;
    static SetGlobalGainDb(listener: UnityEngine.AudioListener, globalGainDb: number): void;
    static SetOcclusionMask(listener: UnityEngine.AudioListener, occlusionMask: UnityEngine.LayerMask): void;
    static SetQuality(listener: UnityEngine.AudioListener, quality: UnityEngine.Experimental.Audio.Google.GvrAudioQuality): void;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioListenerExtension extends UnityEngine.AudioListenerExtension {
    constructor();
    ExtensionUpdate(): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    WriteExtensionProperty(propertyName: UnityEngine.PropertyName, propertyValue: number): void;
    globalGainDb: number;
    occlusionMask: UnityEngine.LayerMask;
    quality: UnityEngine.Experimental.Audio.Google.GvrAudioQuality;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioRoom extends UnityEngine.MonoBehaviour {
    constructor();
    backWall: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    ceiling: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    floor: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    frontWall: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    leftWall: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    reflectivity: number;
    reverbBrightness: number;
    reverbGainDb: number;
    reverbTime: number;
    rightWall: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    size: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google.GvrAudioRoom {
  class SurfaceMaterial extends System.Enum {
    protected constructor();
    static AcousticCeilingTiles: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static BrickBare: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static BrickPainted: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static ConcreteBlockCoarse: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static ConcreteBlockPainted: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static CurtainHeavy: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static FiberglassInsulation: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static GlassThick: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static GlassThin: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static Grass: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static LinoleumOnConcrete: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static Marble: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static Metal: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static ParquetOnConcrete: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static PlasterRough: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static PlasterSmooth: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static PlywoodPanel: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static PolishedConcreteOrTile: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static Sheetrock: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static Transparent: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    value__: number;
    static WaterOrIceSurface: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static WoodCeiling: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
    static WoodPanel: UnityEngine.Experimental.Audio.Google.GvrAudioRoom.SurfaceMaterial;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioSoundfieldExtension extends UnityEngine.AudioSourceExtension {
    constructor();
    ExtensionUpdate(): void;
    Play(): void;
    Stop(): void;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioSourceExtensionMethods extends System.Object {
    protected constructor();
    static GetBypassRoomEffects(source: UnityEngine.AudioSource): boolean;
    static GetDirectivityAlpha(source: UnityEngine.AudioSource): number;
    static GetDirectivitySharpness(source: UnityEngine.AudioSource): number;
    static GetGainDb(source: UnityEngine.AudioSource): number;
    static GetHrtfEnabled(source: UnityEngine.AudioSource): boolean;
    static GetListenerDirectivityAlpha(source: UnityEngine.AudioSource): number;
    static GetListenerDirectivitySharpness(source: UnityEngine.AudioSource): number;
    static GetOcclusionEnabled(source: UnityEngine.AudioSource): boolean;
    static SetBypassRoomEffects(source: UnityEngine.AudioSource, bypassRoomEffects: boolean): void;
    static SetDirectivityAlpha(source: UnityEngine.AudioSource, directivityAlpha: number): void;
    static SetDirectivitySharpness(source: UnityEngine.AudioSource, directivitySharpness: number): void;
    static SetGainDb(source: UnityEngine.AudioSource, gainDb: number): void;
    static SetHrtfEnabled(source: UnityEngine.AudioSource, hrtfEnabled: boolean): void;
    static SetListenerDirectivityAlpha(source: UnityEngine.AudioSource, listenerDirectivityAlpha: number): void;
    static SetListenerDirectivitySharpness(source: UnityEngine.AudioSource, listenerDirectivitySharpness: number): void;
    static SetOcclusionEnabled(source: UnityEngine.AudioSource, occlusionEnabled: boolean): void;
  }
}
declare namespace UnityEngine.Experimental.Audio.Google {
  class GvrAudioSourceExtension extends UnityEngine.AudioSourceExtension {
    constructor();
    ExtensionUpdate(): void;
    OnEnable(): void;
    Play(): void;
    Stop(): void;
    WriteExtensionProperty(propertyName: UnityEngine.PropertyName, propertyValue: number): void;
    bypassRoomEffects: boolean;
    directivityAlpha: number;
    directivitySharpness: number;
    gainDb: number;
    hrtfEnabled: boolean;
    listenerDirectivityAlpha: number;
    listenerDirectivitySharpness: number;
    occlusionEnabled: boolean;
  }
}
declare namespace UnityEngine {
  class GridLayout extends UnityEngine.Behaviour {
    constructor();
    CellToLocal(cellPosition: UnityEngine.Vector3Int): UnityEngine.Vector3;
    CellToLocalInterpolated(cellPosition: UnityEngine.Vector3): UnityEngine.Vector3;
    CellToWorld(cellPosition: UnityEngine.Vector3Int): UnityEngine.Vector3;
    GetBoundsLocal(cellPosition: UnityEngine.Vector3Int): UnityEngine.Bounds;
    GetLayoutCellCenter(): UnityEngine.Vector3;
    LocalToCell(localPosition: UnityEngine.Vector3): UnityEngine.Vector3Int;
    LocalToCellInterpolated(localPosition: UnityEngine.Vector3): UnityEngine.Vector3;
    LocalToWorld(localPosition: UnityEngine.Vector3): UnityEngine.Vector3;
    WorldToCell(worldPosition: UnityEngine.Vector3): UnityEngine.Vector3Int;
    WorldToLocal(worldPosition: UnityEngine.Vector3): UnityEngine.Vector3;
    readonly cellGap: UnityEngine.Vector3;
    readonly cellLayout: UnityEngine.GridLayout.CellLayout;
    readonly cellSize: UnityEngine.Vector3;
    readonly cellSwizzle: UnityEngine.GridLayout.CellSwizzle;
  }
}
declare namespace UnityEngine.GridLayout {
  class CellLayout extends System.Enum {
    protected constructor();
    static Rectangle: UnityEngine.GridLayout.CellLayout;
    value__: number;
  }
}
declare namespace UnityEngine.GridLayout {
  class CellSwizzle extends System.Enum {
    protected constructor();
    value__: number;
    static XYZ: UnityEngine.GridLayout.CellSwizzle;
    static XZY: UnityEngine.GridLayout.CellSwizzle;
    static YXZ: UnityEngine.GridLayout.CellSwizzle;
    static YZX: UnityEngine.GridLayout.CellSwizzle;
    static ZXY: UnityEngine.GridLayout.CellSwizzle;
    static ZYX: UnityEngine.GridLayout.CellSwizzle;
  }
}
declare namespace UnityEngine {
  class Grid extends UnityEngine.GridLayout {
    constructor();
    GetCellCenterLocal(position: UnityEngine.Vector3Int): UnityEngine.Vector3;
    GetCellCenterWorld(position: UnityEngine.Vector3Int): UnityEngine.Vector3;
    static InverseSwizzle(swizzle: UnityEngine.GridLayout.CellSwizzle, position: UnityEngine.Vector3): UnityEngine.Vector3;
    static Swizzle(swizzle: UnityEngine.GridLayout.CellSwizzle, position: UnityEngine.Vector3): UnityEngine.Vector3;
    cellGap: UnityEngine.Vector3;
    cellLayout: UnityEngine.GridLayout.CellLayout;
    cellSize: UnityEngine.Vector3;
    cellSwizzle: UnityEngine.GridLayout.CellSwizzle;
  }
}
declare namespace UnityEngine.Audio {
  class AudioSpatializerMicrosoft extends UnityEngine.MonoBehaviour {
    constructor();
    roomSize: UnityEngine.Audio.AudioSpatializerMicrosoft.RoomSize;
  }
}
declare namespace UnityEngine.Audio.AudioSpatializerMicrosoft {
  class RoomSize extends System.Enum {
    protected constructor();
    static Large: UnityEngine.Audio.AudioSpatializerMicrosoft.RoomSize;
    static Medium: UnityEngine.Audio.AudioSpatializerMicrosoft.RoomSize;
    static Outdoors: UnityEngine.Audio.AudioSpatializerMicrosoft.RoomSize;
    static Small: UnityEngine.Audio.AudioSpatializerMicrosoft.RoomSize;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingBase extends UnityEngine.MonoBehaviour {
    protected constructor();
    static GetLODFromTPCM(trianglesPerCubicMeter: number): UnityEngine.XR.WSA.SpatialMappingBase.LODType;
    readonly bakePhysics: boolean;
    freezeUpdates: boolean;
    halfBoxExtents: UnityEngine.Vector3;
    lodType: UnityEngine.XR.WSA.SpatialMappingBase.LODType;
    numUpdatesBeforeRemoval: number;
    secondsBetweenUpdates: number;
    sphereRadius: number;
    surfaceParent: UnityEngine.GameObject;
    volumeType: UnityEngine.XR.WSA.SpatialMappingBase.VolumeType;
  }
}
declare namespace UnityEngine.XR.WSA.SpatialMappingBase {
  class VolumeType extends System.Enum {
    protected constructor();
    static AxisAlignedBox: UnityEngine.XR.WSA.SpatialMappingBase.VolumeType;
    static Sphere: UnityEngine.XR.WSA.SpatialMappingBase.VolumeType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.SpatialMappingBase {
  class LODType extends System.Enum {
    protected constructor();
    static High: UnityEngine.XR.WSA.SpatialMappingBase.LODType;
    static Low: UnityEngine.XR.WSA.SpatialMappingBase.LODType;
    static Medium: UnityEngine.XR.WSA.SpatialMappingBase.LODType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.SpatialMappingBase {
  class Surface extends System.Object {
    constructor();
    awaitingBake: boolean;
    gameObject: UnityEngine.GameObject;
    meshCollider: UnityEngine.MeshCollider;
    meshFilter: UnityEngine.MeshFilter;
    meshRenderer: UnityEngine.MeshRenderer;
    remainingUpdatesToLive: number;
    surfaceData: UnityEngine.XR.WSA.SurfaceData;
    surfaceId: UnityEngine.XR.WSA.SurfaceId;
    updateTime: any;
    worldAnchor: UnityEngine.XR.WSA.WorldAnchor;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingCollider extends UnityEngine.XR.WSA.SpatialMappingBase {
    constructor();
    enableCollisions: boolean;
    layer: number;
    material: UnityEngine.PhysicMaterial;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingContext extends System.Object {
    protected constructor();
    ComponentHasDataRequests(): void;
    DeregisterComponent(smComponent: UnityEngine.XR.WSA.SpatialMappingBase): void;
    OnSurfaceDataReady(sd: UnityEngine.XR.WSA.SurfaceData, outputWritten: boolean, elapsedBakeTimeSeconds: number): void;
    RegisterComponent(smComponent: UnityEngine.XR.WSA.SpatialMappingBase, onDataReady: ((requester: UnityEngine.XR.WSA.SpatialMappingBase, bakedData: UnityEngine.XR.WSA.SurfaceData, outputWritten: boolean, elapsedBakeTimeSeconds: number) => void), getHighestPri: ((dataRequest: any) => boolean), observer: UnityEngine.XR.WSA.SurfaceObserver): void;
    static readonly Instance: UnityEngine.XR.WSA.SpatialMappingContext;
  }
}
declare namespace UnityEngine.XR.WSA.SpatialMappingContext {
  class SMComponentRecord extends System.ValueType {
    protected constructor();
    Clear(): void;
    IsClear(): boolean;
    m_Component: UnityEngine.XR.WSA.SpatialMappingBase;
    m_GetHighestPri: ((dataRequest: any) => boolean);
    m_OnDataReady: ((requester: UnityEngine.XR.WSA.SpatialMappingBase, bakedData: UnityEngine.XR.WSA.SurfaceData, outputWritten: boolean, elapsedBakeTimeSeconds: number) => void);
    m_SurfaceObserver: UnityEngine.XR.WSA.SurfaceObserver;
  }
}
declare namespace UnityEngine.XR.WSA.SpatialMappingContext {
  class SMBakeRequest extends System.ValueType {
    protected constructor();
    Clear(): void;
    IsClear(): boolean;
    m_RequestData: UnityEngine.XR.WSA.SurfaceData;
    m_Requester: UnityEngine.XR.WSA.SpatialMappingContext.SMComponentRecord;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingRenderer extends UnityEngine.XR.WSA.SpatialMappingBase {
    constructor();
    occlusionMaterial: UnityEngine.Material;
    renderState: UnityEngine.XR.WSA.SpatialMappingRenderer.RenderState;
    visualMaterial: UnityEngine.Material;
  }
}
declare namespace UnityEngine.XR.WSA.SpatialMappingRenderer {
  class RenderState extends System.Enum {
    protected constructor();
    static None: UnityEngine.XR.WSA.SpatialMappingRenderer.RenderState;
    static Occlusion: UnityEngine.XR.WSA.SpatialMappingRenderer.RenderState;
    value__: number;
    static Visualization: UnityEngine.XR.WSA.SpatialMappingRenderer.RenderState;
  }
}
declare namespace UnityEngine.EventSystems {
  class HoloLensInput extends UnityEngine.EventSystems.BaseInput {
    constructor();
    AllowDrag(): boolean;
    GetMouseButton(button: number): boolean;
    GetMouseButtonDown(button: number): boolean;
    GetMouseButtonUp(button: number): boolean;
    UpdateInput(): void;
    readonly mousePosition: UnityEngine.Vector2;
    readonly mousePresent: boolean;
    readonly mouseScrollDelta: UnityEngine.Vector2;
    readonly touchCount: number;
    readonly touchSupported: boolean;
  }
}
declare namespace UnityEngine.EventSystems {
  class BaseInput extends UnityEngine.EventSystems.UIBehaviour {
    constructor();
    GetAxisRaw(axisName: string): number;
    GetButtonDown(buttonName: string): boolean;
    GetMouseButton(button: number): boolean;
    GetMouseButtonDown(button: number): boolean;
    GetMouseButtonUp(button: number): boolean;
    GetTouch(index: number): UnityEngine.Touch;
    compositionCursorPos: UnityEngine.Vector2;
    readonly compositionString: string;
    imeCompositionMode: UnityEngine.IMECompositionMode;
    readonly mousePosition: UnityEngine.Vector2;
    readonly mousePresent: boolean;
    readonly mouseScrollDelta: UnityEngine.Vector2;
    readonly touchCount: number;
    readonly touchSupported: boolean;
  }
}
declare namespace UnityEngine.EventSystems {
  class UIBehaviour extends UnityEngine.MonoBehaviour {
    protected constructor();
    IsActive(): boolean;
    IsDestroyed(): boolean;
  }
}
declare namespace UnityEngine.EventSystems.HoloLensInput {
  class MouseEmulationMode extends System.Enum {
    protected constructor();
    static Inactive: UnityEngine.EventSystems.HoloLensInput.MouseEmulationMode;
    static Navigation: UnityEngine.EventSystems.HoloLensInput.MouseEmulationMode;
    static Tap: UnityEngine.EventSystems.HoloLensInput.MouseEmulationMode;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class HoloLensInputModule extends UnityEngine.EventSystems.StandaloneInputModule {
    protected constructor();
    ActivateModule(): void;
    HoloLensInput_GestureNotifier(): void;
    HoloLensInput_GetEventSystem(): UnityEngine.EventSystems.EventSystem;
    HoloLensInput_GetScreenOffsetScalar(): number;
    HoloLensInput_GetTimeToPressOnTap(): number;
    IsModuleSupported(): boolean;
    ShouldActivateModule(): boolean;
    UpdateModule(): void;
    normalizedNavigationToScreenOffsetScalar: number;
    timeToPressOnTap: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class StandaloneInputModule extends UnityEngine.EventSystems.PointerInputModule {
    protected constructor();
    ActivateModule(): void;
    DeactivateModule(): void;
    IsModuleSupported(): boolean;
    Process(): void;
    ShouldActivateModule(): boolean;
    UpdateModule(): void;
    allowActivationOnMobileDevice: boolean;
    cancelButton: string;
    forceModuleActive: boolean;
    horizontalAxis: string;
    inputActionsPerSecond: number;
    readonly inputMode: UnityEngine.EventSystems.StandaloneInputModule.InputMode;
    repeatDelay: number;
    submitButton: string;
    verticalAxis: string;
  }
}
declare namespace UnityEngine.EventSystems {
  class PointerInputModule extends UnityEngine.EventSystems.BaseInputModule {
    protected constructor();
    IsPointerOverGameObject(pointerId: number): boolean;
    ToString(): string;
    static kFakeTouchesId: number;
    static kMouseLeftId: number;
    static kMouseMiddleId: number;
    static kMouseRightId: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class BaseInputModule extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    ActivateModule(): void;
    DeactivateModule(): void;
    IsModuleSupported(): boolean;
    IsPointerOverGameObject(pointerId: number): boolean;
    Process(): void;
    ShouldActivateModule(): boolean;
    UpdateModule(): void;
    readonly input: UnityEngine.EventSystems.BaseInput;
  }
}
declare namespace UnityEngine {
  class ImageConversion extends System.Object {
    protected constructor();
    static EncodeToEXR(tex: UnityEngine.Texture2D): number[];
    static EncodeToEXR(tex: UnityEngine.Texture2D, flags: UnityEngine.Texture2D.EXRFlags): number[];
    static EncodeToJPG(tex: UnityEngine.Texture2D): number[];
    static EncodeToJPG(tex: UnityEngine.Texture2D, quality: number): number[];
    static EncodeToPNG(tex: UnityEngine.Texture2D): number[];
    static LoadImage(tex: UnityEngine.Texture2D, data: number[]): boolean;
    static LoadImage(tex: UnityEngine.Texture2D, data: number[], markNonReadable: boolean): boolean;
  }
}
declare namespace UnityEngine {
  class Event extends System.Object {
    constructor();
    constructor(displayIndex: number);
    constructor(other: UnityEngine.Event);
    Equals(obj: any): boolean;
    static GetEventCount(): number;
    GetHashCode(): number;
    GetTypeForControl(controlID: number): UnityEngine.EventType;
    static KeyboardEvent(key: string): UnityEngine.Event;
    static PopEvent(outEvent: UnityEngine.Event): boolean;
    ToString(): string;
    Use(): void;
    alt: boolean;
    button: number;
    capsLock: boolean;
    character: any;
    clickCount: number;
    command: boolean;
    commandName: string;
    control: boolean;
    static current: UnityEngine.Event;
    delta: UnityEngine.Vector2;
    displayIndex: number;
    readonly functionKey: boolean;
    readonly isKey: boolean;
    readonly isMouse: boolean;
    readonly isScrollWheel: boolean;
    keyCode: UnityEngine.KeyCode;
    modifiers: UnityEngine.EventModifiers;
    mousePosition: UnityEngine.Vector2;
    mouseRay: UnityEngine.Ray;
    numeric: boolean;
    pressure: number;
    readonly rawType: UnityEngine.EventType;
    shift: boolean;
    type: UnityEngine.EventType;
  }
}
declare namespace UnityEngine {
  class GUI extends System.Object {
    constructor();
    static BeginClip(position: UnityEngine.Rect): void;
    static BeginClip(position: UnityEngine.Rect, scrollOffset: UnityEngine.Vector2, renderOffset: UnityEngine.Vector2, resetOffset: boolean): void;
    static BeginGroup(position: UnityEngine.Rect): void;
    static BeginGroup(position: UnityEngine.Rect, text: string): void;
    static BeginGroup(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
    static BeginGroup(position: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
    static BeginGroup(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
    static BeginGroup(position: UnityEngine.Rect, style: UnityEngine.GUIStyle): void;
    static BeginGroup(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
    static BeginGroup(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
    static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect): UnityEngine.Vector2;
    static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean): UnityEngine.Vector2;
    static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle): UnityEngine.Vector2;
    static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle): UnityEngine.Vector2;
    static Box(position: UnityEngine.Rect, text: string): void;
    static Box(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
    static Box(position: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
    static Box(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
    static Box(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
    static Box(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
    static BringWindowToBack(windowID: number): void;
    static BringWindowToFront(windowID: number): void;
    static Button(position: UnityEngine.Rect, text: string): boolean;
    static Button(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): boolean;
    static Button(position: UnityEngine.Rect, content: UnityEngine.GUIContent): boolean;
    static Button(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
    static Button(position: UnityEngine.Rect, image: UnityEngine.Texture): boolean;
    static Button(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): boolean;
    static DragWindow(): void;
    static DragWindow(position: UnityEngine.Rect): void;
    static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
    static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode): void;
    static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean): void;
    static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number): void;
    static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidth: number, cornerRadius: number): void;
    static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidths: UnityEngine.Vector4, cornerRadius: number): void;
    static DrawTextureWithTexCoords(position: UnityEngine.Rect, image: UnityEngine.Texture, texCoords: UnityEngine.Rect): void;
    static DrawTextureWithTexCoords(position: UnityEngine.Rect, image: UnityEngine.Texture, texCoords: UnityEngine.Rect, alphaBlend: boolean): void;
    static EndClip(): void;
    static EndGroup(): void;
    static EndScrollView(): void;
    static EndScrollView(handleScrollWheel: boolean): void;
    static FocusControl(name: string): void;
    static FocusWindow(windowID: number): void;
    static GetNameOfFocusedControl(): string;
    static HorizontalScrollbar(position: UnityEngine.Rect, value: number, size: number, leftValue: number, rightValue: number): number;
    static HorizontalScrollbar(position: UnityEngine.Rect, value: number, size: number, leftValue: number, rightValue: number, style: UnityEngine.GUIStyle): number;
    static HorizontalSlider(position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number): number;
    static HorizontalSlider(position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle): number;
    static Label(position: UnityEngine.Rect, text: string): void;
    static Label(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
    static Label(position: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
    static Label(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
    static Label(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
    static Label(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
    static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), text: string): UnityEngine.Rect;
    static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), text: string, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), content: UnityEngine.GUIContent): UnityEngine.Rect;
    static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), image: UnityEngine.Texture): UnityEngine.Rect;
    static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), image: UnityEngine.Texture, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static PasswordField(position: UnityEngine.Rect, password: string, maskChar: any): string;
    static PasswordField(position: UnityEngine.Rect, password: string, maskChar: any, maxLength: number): string;
    static PasswordField(position: UnityEngine.Rect, password: string, maskChar: any, maxLength: number, style: UnityEngine.GUIStyle): string;
    static PasswordField(position: UnityEngine.Rect, password: string, maskChar: any, style: UnityEngine.GUIStyle): string;
    static RepeatButton(position: UnityEngine.Rect, text: string): boolean;
    static RepeatButton(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): boolean;
    static RepeatButton(position: UnityEngine.Rect, content: UnityEngine.GUIContent): boolean;
    static RepeatButton(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
    static RepeatButton(position: UnityEngine.Rect, image: UnityEngine.Texture): boolean;
    static RepeatButton(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): boolean;
    static ScrollTo(position: UnityEngine.Rect): void;
    static ScrollTowards(position: UnityEngine.Rect, maxDelta: number): boolean;
    static SelectionGrid(position: UnityEngine.Rect, selected: number, texts: string[], xCount: number): number;
    static SelectionGrid(position: UnityEngine.Rect, selected: number, texts: string[], xCount: number, style: UnityEngine.GUIStyle): number;
    static SelectionGrid(position: UnityEngine.Rect, selected: number, content: UnityEngine.GUIContent[], xCount: number): number;
    static SelectionGrid(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle): number;
    static SelectionGrid(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], xCount: number): number;
    static SelectionGrid(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], xCount: number, style: UnityEngine.GUIStyle): number;
    static SetNextControlName(name: string): void;
    static Slider(position: UnityEngine.Rect, value: number, size: number, start: number, end: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, horiz: boolean, id: number): number;
    static TextArea(position: UnityEngine.Rect, text: string): string;
    static TextArea(position: UnityEngine.Rect, text: string, maxLength: number): string;
    static TextArea(position: UnityEngine.Rect, text: string, maxLength: number, style: UnityEngine.GUIStyle): string;
    static TextArea(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): string;
    static TextField(position: UnityEngine.Rect, text: string): string;
    static TextField(position: UnityEngine.Rect, text: string, maxLength: number): string;
    static TextField(position: UnityEngine.Rect, text: string, maxLength: number, style: UnityEngine.GUIStyle): string;
    static TextField(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): string;
    static Toggle(position: UnityEngine.Rect, value: boolean, text: string): boolean;
    static Toggle(position: UnityEngine.Rect, value: boolean, text: string, style: UnityEngine.GUIStyle): boolean;
    static Toggle(position: UnityEngine.Rect, value: boolean, content: UnityEngine.GUIContent): boolean;
    static Toggle(position: UnityEngine.Rect, value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
    static Toggle(position: UnityEngine.Rect, value: boolean, image: UnityEngine.Texture): boolean;
    static Toggle(position: UnityEngine.Rect, value: boolean, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): boolean;
    static Toggle(position: UnityEngine.Rect, id: number, value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
    static Toolbar(position: UnityEngine.Rect, selected: number, texts: string[]): number;
    static Toolbar(position: UnityEngine.Rect, selected: number, texts: string[], style: UnityEngine.GUIStyle): number;
    static Toolbar(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[]): number;
    static Toolbar(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle): number;
    static Toolbar(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize): number;
    static Toolbar(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[]): number;
    static Toolbar(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle): number;
    static UnfocusWindow(): void;
    static VerticalScrollbar(position: UnityEngine.Rect, value: number, size: number, topValue: number, bottomValue: number): number;
    static VerticalScrollbar(position: UnityEngine.Rect, value: number, size: number, topValue: number, bottomValue: number, style: UnityEngine.GUIStyle): number;
    static VerticalSlider(position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number): number;
    static VerticalSlider(position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle): number;
    static Window(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), text: string): UnityEngine.Rect;
    static Window(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), text: string, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static Window(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), content: UnityEngine.GUIContent): UnityEngine.Rect;
    static Window(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), title: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static Window(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), image: UnityEngine.Texture): UnityEngine.Rect;
    static Window(id: number, clientRect: UnityEngine.Rect, func: ((id: number) => void), image: UnityEngine.Texture, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static backgroundColor: UnityEngine.Color;
    static changed: boolean;
    static color: UnityEngine.Color;
    static contentColor: UnityEngine.Color;
    static depth: number;
    static enabled: boolean;
    static matrix: UnityEngine.Matrix4x4;
    static skin: UnityEngine.GUISkin;
    static tooltip: string;
  }
}
declare namespace UnityEngine.GUI {
  class ToolbarButtonSize extends System.Enum {
    protected constructor();
    static FitToContents: UnityEngine.GUI.ToolbarButtonSize;
    static Fixed: UnityEngine.GUI.ToolbarButtonSize;
    value__: number;
  }
}
declare namespace UnityEngine.GUI {
  class Scope extends System.Object {
    protected constructor();
    Dispose(): void;
  }
}
declare namespace UnityEngine.GUI {
  class GroupScope extends UnityEngine.GUI.Scope {
    constructor(position: UnityEngine.Rect);
    constructor(position: UnityEngine.Rect, text: string);
    constructor(position: UnityEngine.Rect, image: UnityEngine.Texture);
    constructor(position: UnityEngine.Rect, content: UnityEngine.GUIContent);
    constructor(position: UnityEngine.Rect, style: UnityEngine.GUIStyle);
    constructor(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle);
    constructor(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle);
  }
}
declare namespace UnityEngine.GUI {
  class ScrollViewScope extends UnityEngine.GUI.Scope {
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect);
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean);
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle);
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle);
    handleScrollWheel: boolean;
    readonly scrollPosition: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.GUI {
  class ClipScope extends UnityEngine.GUI.Scope {
    constructor(position: UnityEngine.Rect);
  }
}
declare namespace UnityEngine {
  class GUIDebugger extends System.Object {
    constructor();
    static LogBeginProperty(targetTypeAssemblyQualifiedName: string, path: string, position: UnityEngine.Rect): void;
    static LogEndProperty(): void;
    static LogLayoutEndGroup(): void;
    static LogLayoutEntry(rect: UnityEngine.Rect, margins: UnityEngine.RectOffset, style: UnityEngine.GUIStyle): void;
    static LogLayoutGroupEntry(rect: UnityEngine.Rect, margins: UnityEngine.RectOffset, style: UnityEngine.GUIStyle, isVertical: boolean): void;
  }
}
declare namespace UnityEngine {
  class GUILayoutUtility extends System.Object {
    constructor();
    static BeginGroup(GroupName: string): void;
    static EndGroup(groupName: string): void;
    static GetAspectRect(aspect: number): UnityEngine.Rect;
    static GetAspectRect(aspect: number, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static GetAspectRect(aspect: number, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static GetAspectRect(aspect: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static GetLastRect(): UnityEngine.Rect;
    static GetRect(width: number, height: number): UnityEngine.Rect;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number): UnityEngine.Rect;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static GetRect(width: number, height: number, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static GetRect(width: number, height: number, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static GetRect(width: number, height: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static GetRect(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): UnityEngine.Rect;
    static GetRect(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
  }
}
declare namespace UnityEngine.GUILayoutUtility {
  class LayoutCache extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class GUISettings extends System.Object {
    constructor();
    cursorColor: UnityEngine.Color;
    cursorFlashSpeed: number;
    doubleClickSelectsWord: boolean;
    selectionColor: UnityEngine.Color;
    tripleClickSelectsLine: boolean;
  }
}
declare namespace UnityEngine {
  class GUIStyleState extends System.Object {
    constructor();
    background: UnityEngine.Texture2D;
    scaledBackgrounds: UnityEngine.Texture2D[];
    textColor: UnityEngine.Color;
  }
}
declare namespace UnityEngine {
  class Internal_DrawArguments extends System.ValueType {
    protected constructor();
    hasKeyboardFocus: number;
    isActive: number;
    isHover: number;
    on: number;
    position: UnityEngine.Rect;
    target: any;
  }
}
declare namespace UnityEngine {
  class Internal_DrawWithTextSelectionArguments extends System.ValueType {
    protected constructor();
    cursorColor: UnityEngine.Color;
    drawSelectionAsComposition: number;
    firstPos: number;
    hasKeyboardFocus: number;
    isActive: number;
    isHover: number;
    lastPos: number;
    on: number;
    position: UnityEngine.Rect;
    selectionColor: UnityEngine.Color;
    target: any;
  }
}
declare namespace UnityEngine {
  class GUIStyle extends System.Object {
    constructor();
    constructor(other: UnityEngine.GUIStyle);
    CalcHeight(content: UnityEngine.GUIContent, width: number): number;
    CalcMinMaxWidth(content: UnityEngine.GUIContent, minWidth: any, maxWidth: any): void;
    CalcScreenSize(contentSize: UnityEngine.Vector2): UnityEngine.Vector2;
    CalcSize(content: UnityEngine.GUIContent): UnityEngine.Vector2;
    Draw(position: UnityEngine.Rect, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
    Draw(position: UnityEngine.Rect, text: string, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
    Draw(position: UnityEngine.Rect, content: UnityEngine.GUIContent, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
    Draw(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number): void;
    Draw(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, on: boolean): void;
    Draw(position: UnityEngine.Rect, image: UnityEngine.Texture, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
    DrawCursor(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, Character: number): void;
    DrawWithTextSelection(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, firstSelectedCharacter: number, lastSelectedCharacter: number): void;
    GetCursorPixelPosition(position: UnityEngine.Rect, content: UnityEngine.GUIContent, cursorStringIndex: number): UnityEngine.Vector2;
    GetCursorStringIndex(position: UnityEngine.Rect, content: UnityEngine.GUIContent, cursorPixelPosition: UnityEngine.Vector2): number;
    ToString(): string;
    active: UnityEngine.GUIStyleState;
    alignment: UnityEngine.TextAnchor;
    border: UnityEngine.RectOffset;
    clipOffset: UnityEngine.Vector2;
    clipping: UnityEngine.TextClipping;
    contentOffset: UnityEngine.Vector2;
    fixedHeight: number;
    fixedWidth: number;
    focused: UnityEngine.GUIStyleState;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    hover: UnityEngine.GUIStyleState;
    imagePosition: UnityEngine.ImagePosition;
    readonly isHeightDependantOnWidth: boolean;
    readonly lineHeight: number;
    margin: UnityEngine.RectOffset;
    name: string;
    static readonly none: UnityEngine.GUIStyle;
    normal: UnityEngine.GUIStyleState;
    onActive: UnityEngine.GUIStyleState;
    onFocused: UnityEngine.GUIStyleState;
    onHover: UnityEngine.GUIStyleState;
    onNormal: UnityEngine.GUIStyleState;
    overflow: UnityEngine.RectOffset;
    padding: UnityEngine.RectOffset;
    richText: boolean;
    stretchHeight: boolean;
    stretchWidth: boolean;
    wordWrap: boolean;
  }
}
declare namespace UnityEngine {
  class GUIUtility extends System.Object {
    constructor();
    static ExitGUI(): void;
    static GetControlID(hint: number, focus: UnityEngine.FocusType): number;
    static GetControlID(hint: number, focus: UnityEngine.FocusType, position: UnityEngine.Rect): number;
    static GetControlID(focus: UnityEngine.FocusType): number;
    static GetControlID(focus: UnityEngine.FocusType, position: UnityEngine.Rect): number;
    static GetControlID(contents: UnityEngine.GUIContent, focus: UnityEngine.FocusType): number;
    static GetControlID(contents: UnityEngine.GUIContent, focus: UnityEngine.FocusType, position: UnityEngine.Rect): number;
    static GetStateObject(t: any, controlID: number): any;
    static GUIToScreenPoint(guiPoint: UnityEngine.Vector2): UnityEngine.Vector2;
    static QueryStateObject(t: any, controlID: number): any;
    static RotateAroundPivot(angle: number, pivotPoint: UnityEngine.Vector2): void;
    static ScaleAroundPivot(scale: UnityEngine.Vector2, pivotPoint: UnityEngine.Vector2): void;
    static ScreenToGUIPoint(screenPoint: UnityEngine.Vector2): UnityEngine.Vector2;
    static ScreenToGUIRect(screenRect: UnityEngine.Rect): UnityEngine.Rect;
    static readonly hasModalWindow: boolean;
    static hotControl: number;
    static keyboardControl: number;
    static systemCopyBuffer: string;
  }
}
declare namespace UnityEngine {
  class GUIClip extends System.Object {
    constructor();
    static Clip(absoluteRect: UnityEngine.Rect): UnityEngine.Rect;
    static Clip(absolutePos: UnityEngine.Vector2): UnityEngine.Vector2;
    static GetAbsoluteMousePosition(): UnityEngine.Vector2;
    static Unclip(rect: UnityEngine.Rect): UnityEngine.Rect;
    static Unclip(pos: UnityEngine.Vector2): UnityEngine.Vector2;
    static readonly enabled: boolean;
    static readonly topmostRect: UnityEngine.Rect;
    static readonly visibleRect: UnityEngine.Rect;
  }
}
declare namespace UnityEngine {
  class StylePainter extends System.Object {
    constructor();
    constructor(pos: UnityEngine.Vector2);
    ComputeTextHeight(painterParams: UnityEngine.TextStylePainterParameters): number;
    ComputeTextHeight_Internal(text: string, width: number, wordWrap: boolean, font: UnityEngine.Font, fontSize: number, fontStyle: UnityEngine.FontStyle, anchor: UnityEngine.TextAnchor, richText: boolean): number;
    ComputeTextWidth(painterParams: UnityEngine.TextStylePainterParameters): number;
    ComputeTextWidth_Internal(text: string, width: number, wordWrap: boolean, font: UnityEngine.Font, fontSize: number, fontStyle: UnityEngine.FontStyle, anchor: UnityEngine.TextAnchor, richText: boolean): number;
    DrawRect(painterParams: UnityEngine.RectStylePainterParameters): void;
    DrawText(painterParams: UnityEngine.TextStylePainterParameters): void;
    DrawTexture(painterParams: UnityEngine.TextureStylePainterParameters): void;
    GetCursorPosition(painterParams: UnityEngine.CursorPositionStylePainterParameters): UnityEngine.Vector2;
    GetCursorPosition_Internal(text: string, font: UnityEngine.Font, fontSize: number, fontStyle: UnityEngine.FontStyle, anchor: UnityEngine.TextAnchor, wordWrapWidth: number, richText: boolean, screenRect: UnityEngine.Rect, cursorPosition: number): UnityEngine.Vector2;
    currentWorldClip: UnityEngine.Rect;
    mousePosition: UnityEngine.Vector2;
    opacity: number;
    repaintEvent: UnityEngine.Event;
  }
}
declare namespace UnityEngine {
  class EventType extends System.Enum {
    protected constructor();
    static ContextClick: UnityEngine.EventType;
    static DragExited: UnityEngine.EventType;
    static dragPerform: UnityEngine.EventType;
    static DragPerform: UnityEngine.EventType;
    static dragUpdated: UnityEngine.EventType;
    static DragUpdated: UnityEngine.EventType;
    static ExecuteCommand: UnityEngine.EventType;
    static ignore: UnityEngine.EventType;
    static Ignore: UnityEngine.EventType;
    static keyDown: UnityEngine.EventType;
    static KeyDown: UnityEngine.EventType;
    static keyUp: UnityEngine.EventType;
    static KeyUp: UnityEngine.EventType;
    static layout: UnityEngine.EventType;
    static Layout: UnityEngine.EventType;
    static mouseDown: UnityEngine.EventType;
    static MouseDown: UnityEngine.EventType;
    static mouseDrag: UnityEngine.EventType;
    static MouseDrag: UnityEngine.EventType;
    static MouseEnterWindow: UnityEngine.EventType;
    static MouseLeaveWindow: UnityEngine.EventType;
    static mouseMove: UnityEngine.EventType;
    static MouseMove: UnityEngine.EventType;
    static mouseUp: UnityEngine.EventType;
    static MouseUp: UnityEngine.EventType;
    static repaint: UnityEngine.EventType;
    static Repaint: UnityEngine.EventType;
    static scrollWheel: UnityEngine.EventType;
    static ScrollWheel: UnityEngine.EventType;
    static used: UnityEngine.EventType;
    static Used: UnityEngine.EventType;
    static ValidateCommand: UnityEngine.EventType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class EventModifiers extends System.Enum {
    protected constructor();
    static Alt: UnityEngine.EventModifiers;
    static CapsLock: UnityEngine.EventModifiers;
    static Command: UnityEngine.EventModifiers;
    static Control: UnityEngine.EventModifiers;
    static FunctionKey: UnityEngine.EventModifiers;
    static None: UnityEngine.EventModifiers;
    static Numeric: UnityEngine.EventModifiers;
    static Shift: UnityEngine.EventModifiers;
    value__: number;
  }
}
declare namespace UnityEngine {
  class EventInterests extends System.ValueType {
    protected constructor();
    WantsEvent(type: UnityEngine.EventType): boolean;
    wantsMouseEnterLeaveWindow: boolean;
    wantsMouseMove: boolean;
  }
}
declare namespace UnityEngine {
  class GUIContent extends System.Object {
    constructor();
    constructor(text: string);
    constructor(image: UnityEngine.Texture);
    constructor(text: string, image: UnityEngine.Texture);
    constructor(text: string, tooltip: string);
    constructor(image: UnityEngine.Texture, tooltip: string);
    constructor(text: string, image: UnityEngine.Texture, tooltip: string);
    constructor(src: UnityEngine.GUIContent);
    image: UnityEngine.Texture;
    text: string;
    tooltip: string;
    static none: UnityEngine.GUIContent;
  }
}
declare namespace UnityEngine {
  class ScaleMode extends System.Enum {
    protected constructor();
    static ScaleAndCrop: UnityEngine.ScaleMode;
    static ScaleToFit: UnityEngine.ScaleMode;
    static StretchToFill: UnityEngine.ScaleMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class FocusType extends System.Enum {
    protected constructor();
    static Keyboard: UnityEngine.FocusType;
    static Native: UnityEngine.FocusType;
    static Passive: UnityEngine.FocusType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class GUILayout extends System.Object {
    constructor();
    static BeginArea(screenRect: UnityEngine.Rect): void;
    static BeginArea(screenRect: UnityEngine.Rect, text: string): void;
    static BeginArea(screenRect: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
    static BeginArea(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
    static BeginArea(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
    static BeginArea(screenRect: UnityEngine.Rect, style: UnityEngine.GUIStyle): void;
    static BeginArea(screenRect: UnityEngine.Rect, image: UnityEngine.Texture): void;
    static BeginArea(screenRect: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
    static BeginHorizontal(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginHorizontal(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginHorizontal(options: UnityEngine.GUILayoutOption[]): void;
    static BeginHorizontal(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginHorizontal(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, background: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle): UnityEngine.Vector2;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
    static BeginScrollView(scrollPosition: UnityEngine.Vector2, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
    static BeginVertical(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginVertical(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginVertical(options: UnityEngine.GUILayoutOption[]): void;
    static BeginVertical(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static BeginVertical(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static Box(text: string, options: UnityEngine.GUILayoutOption[]): void;
    static Box(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static Box(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): void;
    static Box(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static Box(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): void;
    static Box(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static Button(text: string, options: UnityEngine.GUILayoutOption[]): boolean;
    static Button(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static Button(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): boolean;
    static Button(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static Button(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): boolean;
    static Button(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static EndArea(): void;
    static EndHorizontal(): void;
    static EndScrollView(): void;
    static EndVertical(): void;
    static ExpandHeight(expand: boolean): UnityEngine.GUILayoutOption;
    static ExpandWidth(expand: boolean): UnityEngine.GUILayoutOption;
    static FlexibleSpace(): void;
    static Height(height: number): UnityEngine.GUILayoutOption;
    static HorizontalScrollbar(value: number, size: number, leftValue: number, rightValue: number, options: UnityEngine.GUILayoutOption[]): number;
    static HorizontalScrollbar(value: number, size: number, leftValue: number, rightValue: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static HorizontalSlider(value: number, leftValue: number, rightValue: number, options: UnityEngine.GUILayoutOption[]): number;
    static HorizontalSlider(value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static Label(text: string, options: UnityEngine.GUILayoutOption[]): void;
    static Label(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static Label(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): void;
    static Label(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static Label(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): void;
    static Label(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
    static MaxHeight(maxHeight: number): UnityEngine.GUILayoutOption;
    static MaxWidth(maxWidth: number): UnityEngine.GUILayoutOption;
    static MinHeight(minHeight: number): UnityEngine.GUILayoutOption;
    static MinWidth(minWidth: number): UnityEngine.GUILayoutOption;
    static PasswordField(password: string, maskChar: any, maxLength: number, options: UnityEngine.GUILayoutOption[]): string;
    static PasswordField(password: string, maskChar: any, maxLength: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
    static PasswordField(password: string, maskChar: any, options: UnityEngine.GUILayoutOption[]): string;
    static PasswordField(password: string, maskChar: any, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
    static RepeatButton(text: string, options: UnityEngine.GUILayoutOption[]): boolean;
    static RepeatButton(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static RepeatButton(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): boolean;
    static RepeatButton(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static RepeatButton(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): boolean;
    static RepeatButton(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static SelectionGrid(selected: number, texts: string[], xCount: number, options: UnityEngine.GUILayoutOption[]): number;
    static SelectionGrid(selected: number, texts: string[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static SelectionGrid(selected: number, content: UnityEngine.GUIContent[], xCount: number, options: UnityEngine.GUILayoutOption[]): number;
    static SelectionGrid(selected: number, contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static SelectionGrid(selected: number, images: UnityEngine.Texture[], xCount: number, options: UnityEngine.GUILayoutOption[]): number;
    static SelectionGrid(selected: number, images: UnityEngine.Texture[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static Space(pixels: number): void;
    static TextArea(text: string, maxLength: number, options: UnityEngine.GUILayoutOption[]): string;
    static TextArea(text: string, maxLength: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
    static TextArea(text: string, options: UnityEngine.GUILayoutOption[]): string;
    static TextArea(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
    static TextField(text: string, maxLength: number, options: UnityEngine.GUILayoutOption[]): string;
    static TextField(text: string, maxLength: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
    static TextField(text: string, options: UnityEngine.GUILayoutOption[]): string;
    static TextField(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
    static Toggle(value: boolean, text: string, options: UnityEngine.GUILayoutOption[]): boolean;
    static Toggle(value: boolean, text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static Toggle(value: boolean, content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): boolean;
    static Toggle(value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static Toggle(value: boolean, image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): boolean;
    static Toggle(value: boolean, image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
    static Toolbar(selected: number, texts: string[], options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, texts: string[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize, options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, texts: string[], style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, contents: UnityEngine.GUIContent[], options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize, options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, images: UnityEngine.Texture[], options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize, options: UnityEngine.GUILayoutOption[]): number;
    static Toolbar(selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static VerticalScrollbar(value: number, size: number, topValue: number, bottomValue: number, options: UnityEngine.GUILayoutOption[]): number;
    static VerticalScrollbar(value: number, size: number, topValue: number, bottomValue: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static VerticalSlider(value: number, leftValue: number, rightValue: number, options: UnityEngine.GUILayoutOption[]): number;
    static VerticalSlider(value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
    static Width(width: number): UnityEngine.GUILayoutOption;
    static Window(id: number, screenRect: UnityEngine.Rect, func: ((id: number) => void), text: string, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static Window(id: number, screenRect: UnityEngine.Rect, func: ((id: number) => void), text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static Window(id: number, screenRect: UnityEngine.Rect, func: ((id: number) => void), content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static Window(id: number, screenRect: UnityEngine.Rect, func: ((id: number) => void), content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static Window(id: number, screenRect: UnityEngine.Rect, func: ((id: number) => void), image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
    static Window(id: number, screenRect: UnityEngine.Rect, func: ((id: number) => void), image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
  }
}
declare namespace UnityEngine.GUILayout {
  class LayoutedWindow extends System.Object {
    protected constructor();
    DoWindow(windowID: number): void;
  }
}
declare namespace UnityEngine.GUILayout {
  class HorizontalScope extends UnityEngine.GUI.Scope {
    constructor(options: UnityEngine.GUILayoutOption[]);
    constructor(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
  }
}
declare namespace UnityEngine.GUILayout {
  class VerticalScope extends UnityEngine.GUI.Scope {
    constructor(options: UnityEngine.GUILayoutOption[]);
    constructor(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
  }
}
declare namespace UnityEngine.GUILayout {
  class AreaScope extends UnityEngine.GUI.Scope {
    constructor(screenRect: UnityEngine.Rect);
    constructor(screenRect: UnityEngine.Rect, text: string);
    constructor(screenRect: UnityEngine.Rect, image: UnityEngine.Texture);
    constructor(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent);
    constructor(screenRect: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle);
    constructor(screenRect: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle);
    constructor(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle);
  }
}
declare namespace UnityEngine.GUILayout {
  class ScrollViewScope extends UnityEngine.GUI.Scope {
    constructor(scrollPosition: UnityEngine.Vector2, options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, background: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    handleScrollWheel: boolean;
    readonly scrollPosition: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class GUILayoutOption extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.GUILayoutOption {
  class Type extends System.Enum {
    protected constructor();
    static alignEnd: UnityEngine.GUILayoutOption.Type;
    static alignJustify: UnityEngine.GUILayoutOption.Type;
    static alignMiddle: UnityEngine.GUILayoutOption.Type;
    static alignStart: UnityEngine.GUILayoutOption.Type;
    static equalSize: UnityEngine.GUILayoutOption.Type;
    static fixedHeight: UnityEngine.GUILayoutOption.Type;
    static fixedWidth: UnityEngine.GUILayoutOption.Type;
    static maxHeight: UnityEngine.GUILayoutOption.Type;
    static maxWidth: UnityEngine.GUILayoutOption.Type;
    static minHeight: UnityEngine.GUILayoutOption.Type;
    static minWidth: UnityEngine.GUILayoutOption.Type;
    static spacing: UnityEngine.GUILayoutOption.Type;
    static stretchHeight: UnityEngine.GUILayoutOption.Type;
    static stretchWidth: UnityEngine.GUILayoutOption.Type;
    value__: number;
  }
}
declare namespace UnityEngine {
  class GUILayoutGroup extends UnityEngine.GUILayoutEntry {
    constructor();
    constructor(_style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    Add(e: UnityEngine.GUILayoutEntry): void;
    ApplyOptions(options: UnityEngine.GUILayoutOption[]): void;
    CalcHeight(): void;
    CalcWidth(): void;
    GetLast(): UnityEngine.Rect;
    GetNext(): UnityEngine.GUILayoutEntry;
    PeekNext(): UnityEngine.Rect;
    ResetCursor(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ToString(): string;
    readonly margin: UnityEngine.RectOffset;
    entries: UnityEngine.GUILayoutEntry[];
    isVertical: boolean;
    isWindow: boolean;
    resetCoords: boolean;
    sameSize: boolean;
    spacing: number;
    windowID: number;
  }
}
declare namespace UnityEngine {
  class GUILayoutEntry extends System.Object {
    constructor(_minWidth: number, _maxWidth: number, _minHeight: number, _maxHeight: number, _style: UnityEngine.GUIStyle);
    constructor(_minWidth: number, _maxWidth: number, _minHeight: number, _maxHeight: number, _style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
    ApplyOptions(options: UnityEngine.GUILayoutOption[]): void;
    CalcHeight(): void;
    CalcWidth(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ToString(): string;
    readonly margin: UnityEngine.RectOffset;
    style: UnityEngine.GUIStyle;
    maxHeight: number;
    maxWidth: number;
    minHeight: number;
    minWidth: number;
    rect: UnityEngine.Rect;
    stretchHeight: number;
    stretchWidth: number;
  }
}
declare namespace UnityEngine {
  class GUIScrollGroup extends UnityEngine.GUILayoutGroup {
    constructor();
    CalcHeight(): void;
    CalcWidth(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    allowHorizontalScroll: boolean;
    allowVerticalScroll: boolean;
    calcMaxHeight: number;
    calcMaxWidth: number;
    calcMinHeight: number;
    calcMinWidth: number;
    clientHeight: number;
    clientWidth: number;
    horizontalScrollbar: UnityEngine.GUIStyle;
    needsHorizontalScrollbar: boolean;
    needsVerticalScrollbar: boolean;
    verticalScrollbar: UnityEngine.GUIStyle;
  }
}
declare namespace UnityEngine {
  class GUIAspectSizer extends UnityEngine.GUILayoutEntry {
    constructor(aspect: number, options: UnityEngine.GUILayoutOption[]);
    CalcHeight(): void;
  }
}
declare namespace UnityEngine {
  class GUIGridSizer extends UnityEngine.GUILayoutEntry {
    protected constructor();
    static GetRect(contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
  }
}
declare namespace UnityEngine {
  class GUIWordWrapSizer extends UnityEngine.GUILayoutEntry {
    constructor(style: UnityEngine.GUIStyle, content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]);
    CalcHeight(): void;
    CalcWidth(): void;
  }
}
declare namespace UnityEngine {
  class PlatformSelection extends System.Enum {
    protected constructor();
    static Mac: UnityEngine.PlatformSelection;
    static Native: UnityEngine.PlatformSelection;
    value__: number;
    static Windows: UnityEngine.PlatformSelection;
  }
}
declare namespace UnityEngine {
  class GUISkin extends UnityEngine.ScriptableObject {
    constructor();
    FindStyle(styleName: string): UnityEngine.GUIStyle;
    GetEnumerator(): any;
    GetStyle(styleName: string): UnityEngine.GUIStyle;
    box: UnityEngine.GUIStyle;
    button: UnityEngine.GUIStyle;
    customStyles: UnityEngine.GUIStyle[];
    font: UnityEngine.Font;
    horizontalScrollbar: UnityEngine.GUIStyle;
    horizontalScrollbarLeftButton: UnityEngine.GUIStyle;
    horizontalScrollbarRightButton: UnityEngine.GUIStyle;
    horizontalScrollbarThumb: UnityEngine.GUIStyle;
    horizontalSlider: UnityEngine.GUIStyle;
    horizontalSliderThumb: UnityEngine.GUIStyle;
    label: UnityEngine.GUIStyle;
    scrollView: UnityEngine.GUIStyle;
    readonly settings: UnityEngine.GUISettings;
    textArea: UnityEngine.GUIStyle;
    textField: UnityEngine.GUIStyle;
    toggle: UnityEngine.GUIStyle;
    verticalScrollbar: UnityEngine.GUIStyle;
    verticalScrollbarDownButton: UnityEngine.GUIStyle;
    verticalScrollbarThumb: UnityEngine.GUIStyle;
    verticalScrollbarUpButton: UnityEngine.GUIStyle;
    verticalSlider: UnityEngine.GUIStyle;
    verticalSliderThumb: UnityEngine.GUIStyle;
    window: UnityEngine.GUIStyle;
  }
}
declare namespace UnityEngine {
  class ImagePosition extends System.Enum {
    protected constructor();
    static ImageAbove: UnityEngine.ImagePosition;
    static ImageLeft: UnityEngine.ImagePosition;
    static ImageOnly: UnityEngine.ImagePosition;
    static TextOnly: UnityEngine.ImagePosition;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TextClipping extends System.Enum {
    protected constructor();
    static Clip: UnityEngine.TextClipping;
    static Overflow: UnityEngine.TextClipping;
    value__: number;
  }
}
declare namespace UnityEngine {
  class GUITargetAttribute extends System.Attribute {
    constructor();
    constructor(displayIndex: number);
    constructor(displayIndex: number, displayIndex1: number);
    constructor(displayIndex: number, displayIndex1: number, displayIndexList: number[]);
  }
}
declare namespace UnityEngine {
  class ExitGUIException extends System.Exception {
    constructor();
  }
}
declare namespace UnityEngine {
  class ScrollViewState extends System.Object {
    constructor();
    ScrollTo(pos: UnityEngine.Rect): void;
    ScrollTowards(pos: UnityEngine.Rect, maxDelta: number): boolean;
    apply: boolean;
    position: UnityEngine.Rect;
    scrollPosition: UnityEngine.Vector2;
    viewRect: UnityEngine.Rect;
    visibleRect: UnityEngine.Rect;
  }
}
declare namespace UnityEngine {
  class SliderState extends System.Object {
    constructor();
    dragStartPos: number;
    dragStartValue: number;
    isDragging: boolean;
  }
}
declare namespace UnityEngine {
  class SliderHandler extends System.ValueType {
    protected constructor();
    Handle(): number;
  }
}
declare namespace UnityEngine {
  class TextureStylePainterParameters extends System.ValueType {
    protected constructor();
    borderBottomWidth: number;
    borderLeftWidth: number;
    borderRadius: number;
    borderRightWidth: number;
    borderTopWidth: number;
    color: UnityEngine.Color;
    layout: UnityEngine.Rect;
    scaleMode: UnityEngine.ScaleMode;
    sliceBottom: number;
    sliceLeft: number;
    sliceRight: number;
    sliceTop: number;
    texture: UnityEngine.Texture;
  }
}
declare namespace UnityEngine {
  class RectStylePainterParameters extends System.ValueType {
    protected constructor();
    borderBottomWidth: number;
    borderLeftWidth: number;
    borderRadius: number;
    borderRightWidth: number;
    borderTopWidth: number;
    color: UnityEngine.Color;
    layout: UnityEngine.Rect;
  }
}
declare namespace UnityEngine {
  class TextStylePainterParameters extends System.ValueType {
    protected constructor();
    anchor: UnityEngine.TextAnchor;
    clipping: UnityEngine.TextClipping;
    font: UnityEngine.Font;
    fontColor: UnityEngine.Color;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    layout: UnityEngine.Rect;
    richText: boolean;
    text: string;
    wordWrap: boolean;
    wordWrapWidth: number;
  }
}
declare namespace UnityEngine {
  class CursorPositionStylePainterParameters extends System.ValueType {
    protected constructor();
    anchor: UnityEngine.TextAnchor;
    cursorIndex: number;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    layout: UnityEngine.Rect;
    richText: boolean;
    text: string;
    wordWrapWidth: number;
  }
}
declare namespace UnityEngine {
  class IStylePainter {
    protected constructor();
    ComputeTextHeight(painterParams: UnityEngine.TextStylePainterParameters): number;
    ComputeTextWidth(painterParams: UnityEngine.TextStylePainterParameters): number;
    DrawRect(painterParams: UnityEngine.RectStylePainterParameters): void;
    DrawText(painterParams: UnityEngine.TextStylePainterParameters): void;
    DrawTexture(painterParams: UnityEngine.TextureStylePainterParameters): void;
    GetCursorPosition(painterParams: UnityEngine.CursorPositionStylePainterParameters): UnityEngine.Vector2;
    currentWorldClip: UnityEngine.Rect;
    mousePosition: UnityEngine.Vector2;
    opacity: number;
    repaintEvent: UnityEngine.Event;
  }
}
declare namespace UnityEngine {
  class TextEditor extends System.Object {
    constructor();
    Backspace(): boolean;
    CanPaste(): boolean;
    Copy(): void;
    Cut(): boolean;
    DblClickSnap(snapping: UnityEngine.TextEditor.DblClickSnapping): void;
    Delete(): boolean;
    DeleteLineBack(): boolean;
    DeleteSelection(): boolean;
    DeleteWordBack(): boolean;
    DeleteWordForward(): boolean;
    DetectFocusChange(): void;
    DrawCursor(newText: string): void;
    ExpandSelectGraphicalLineEnd(): void;
    ExpandSelectGraphicalLineStart(): void;
    FindStartOfNextWord(p: number): number;
    HandleKeyEvent(e: UnityEngine.Event): boolean;
    Insert(c: any): void;
    IsOverSelection(cursorPosition: UnityEngine.Vector2): boolean;
    MouseDragSelectsWholeWords(on: boolean): void;
    MoveAltCursorToPosition(cursorPosition: UnityEngine.Vector2): void;
    MoveCursorToPosition(cursorPosition: UnityEngine.Vector2): void;
    MoveDown(): void;
    MoveGraphicalLineEnd(): void;
    MoveGraphicalLineStart(): void;
    MoveLeft(): void;
    MoveLineEnd(): void;
    MoveLineStart(): void;
    MoveParagraphBackward(): void;
    MoveParagraphForward(): void;
    MoveRight(): void;
    MoveSelectionToAltCursor(): void;
    MoveTextEnd(): void;
    MoveTextStart(): void;
    MoveToEndOfPreviousWord(): void;
    MoveToStartOfNextWord(): void;
    MoveUp(): void;
    MoveWordLeft(): void;
    MoveWordRight(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    Paste(): boolean;
    ReplaceSelection(replace: string): void;
    SaveBackup(): void;
    SelectAll(): void;
    SelectCurrentParagraph(): void;
    SelectCurrentWord(): void;
    SelectDown(): void;
    SelectGraphicalLineEnd(): void;
    SelectGraphicalLineStart(): void;
    SelectLeft(): void;
    SelectNone(): void;
    SelectParagraphBackward(): void;
    SelectParagraphForward(): void;
    SelectRight(): void;
    SelectTextEnd(): void;
    SelectTextStart(): void;
    SelectToEndOfPreviousWord(): void;
    SelectToPosition(cursorPosition: UnityEngine.Vector2): void;
    SelectToStartOfNextWord(): void;
    SelectUp(): void;
    SelectWordLeft(): void;
    SelectWordRight(): void;
    Undo(): void;
    UpdateScrollOffsetIfNeeded(evt: UnityEngine.Event): void;
    altCursorPosition: number;
    content: UnityEngine.GUIContent;
    cursorIndex: number;
    doubleClickSnapping: UnityEngine.TextEditor.DblClickSnapping;
    readonly hasSelection: boolean;
    position: UnityEngine.Rect;
    readonly SelectedText: string;
    selectIndex: number;
    text: string;
    controlID: number;
    graphicalCursorPos: UnityEngine.Vector2;
    graphicalSelectCursorPos: UnityEngine.Vector2;
    hasHorizontalCursorPos: boolean;
    isPasswordField: boolean;
    keyboardOnScreen: UnityEngine.TouchScreenKeyboard;
    multiline: boolean;
    scrollOffset: UnityEngine.Vector2;
    style: UnityEngine.GUIStyle;
  }
}
declare namespace UnityEngine.TextEditor {
  class DblClickSnapping extends System.Enum {
    protected constructor();
    static PARAGRAPHS: UnityEngine.TextEditor.DblClickSnapping;
    value__: number;
    static WORDS: UnityEngine.TextEditor.DblClickSnapping;
  }
}
declare namespace UnityEngine.TextEditor {
  class CharacterType extends System.Enum {
    protected constructor();
    static LetterLike: UnityEngine.TextEditor.CharacterType;
    static Symbol: UnityEngine.TextEditor.CharacterType;
    static Symbol2: UnityEngine.TextEditor.CharacterType;
    value__: number;
    static WhiteSpace: UnityEngine.TextEditor.CharacterType;
  }
}
declare namespace UnityEngine.TextEditor {
  class TextEditOp extends System.Enum {
    protected constructor();
    static Backspace: UnityEngine.TextEditor.TextEditOp;
    static Copy: UnityEngine.TextEditor.TextEditOp;
    static Cut: UnityEngine.TextEditor.TextEditOp;
    static Delete: UnityEngine.TextEditor.TextEditOp;
    static DeleteLineBack: UnityEngine.TextEditor.TextEditOp;
    static DeleteWordBack: UnityEngine.TextEditor.TextEditOp;
    static DeleteWordForward: UnityEngine.TextEditor.TextEditOp;
    static ExpandSelectGraphicalLineEnd: UnityEngine.TextEditor.TextEditOp;
    static ExpandSelectGraphicalLineStart: UnityEngine.TextEditor.TextEditOp;
    static MoveDown: UnityEngine.TextEditor.TextEditOp;
    static MoveGraphicalLineEnd: UnityEngine.TextEditor.TextEditOp;
    static MoveGraphicalLineStart: UnityEngine.TextEditor.TextEditOp;
    static MoveLeft: UnityEngine.TextEditor.TextEditOp;
    static MoveLineEnd: UnityEngine.TextEditor.TextEditOp;
    static MoveLineStart: UnityEngine.TextEditor.TextEditOp;
    static MovePageDown: UnityEngine.TextEditor.TextEditOp;
    static MovePageUp: UnityEngine.TextEditor.TextEditOp;
    static MoveParagraphBackward: UnityEngine.TextEditor.TextEditOp;
    static MoveParagraphForward: UnityEngine.TextEditor.TextEditOp;
    static MoveRight: UnityEngine.TextEditor.TextEditOp;
    static MoveTextEnd: UnityEngine.TextEditor.TextEditOp;
    static MoveTextStart: UnityEngine.TextEditor.TextEditOp;
    static MoveToEndOfPreviousWord: UnityEngine.TextEditor.TextEditOp;
    static MoveToStartOfNextWord: UnityEngine.TextEditor.TextEditOp;
    static MoveUp: UnityEngine.TextEditor.TextEditOp;
    static MoveWordLeft: UnityEngine.TextEditor.TextEditOp;
    static MoveWordRight: UnityEngine.TextEditor.TextEditOp;
    static Paste: UnityEngine.TextEditor.TextEditOp;
    static ScrollEnd: UnityEngine.TextEditor.TextEditOp;
    static ScrollPageDown: UnityEngine.TextEditor.TextEditOp;
    static ScrollPageUp: UnityEngine.TextEditor.TextEditOp;
    static ScrollStart: UnityEngine.TextEditor.TextEditOp;
    static SelectAll: UnityEngine.TextEditor.TextEditOp;
    static SelectDown: UnityEngine.TextEditor.TextEditOp;
    static SelectGraphicalLineEnd: UnityEngine.TextEditor.TextEditOp;
    static SelectGraphicalLineStart: UnityEngine.TextEditor.TextEditOp;
    static SelectLeft: UnityEngine.TextEditor.TextEditOp;
    static SelectNone: UnityEngine.TextEditor.TextEditOp;
    static SelectPageDown: UnityEngine.TextEditor.TextEditOp;
    static SelectPageUp: UnityEngine.TextEditor.TextEditOp;
    static SelectParagraphBackward: UnityEngine.TextEditor.TextEditOp;
    static SelectParagraphForward: UnityEngine.TextEditor.TextEditOp;
    static SelectRight: UnityEngine.TextEditor.TextEditOp;
    static SelectTextEnd: UnityEngine.TextEditor.TextEditOp;
    static SelectTextStart: UnityEngine.TextEditor.TextEditOp;
    static SelectToEndOfPreviousWord: UnityEngine.TextEditor.TextEditOp;
    static SelectToStartOfNextWord: UnityEngine.TextEditor.TextEditOp;
    static SelectUp: UnityEngine.TextEditor.TextEditOp;
    static SelectWordLeft: UnityEngine.TextEditor.TextEditOp;
    static SelectWordRight: UnityEngine.TextEditor.TextEditOp;
    value__: number;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeInputSystem extends System.Object {
    constructor();
    static GetControlConfiguration(deviceId: number, controlIndex: number): string;
    static GetDeviceConfiguration(deviceId: number): string;
    static ReportInputDeviceDisconnect(nativeDeviceId: number): void;
    static ReportInputDeviceReconnect(nativeDeviceId: number): void;
    static ReportNewInputDevice(descriptor: string): number;
    static SendEvents(): void;
    static SendInput(inputEvent: any): void;
    static SendOutput(deviceId: number, type: number, sizeInBytes: number, data: any): boolean;
    static SetPollingFrequency(hertz: number): void;
    static Update(updateType: UnityEngineInternal.Input.NativeInputUpdateType): void;
    static readonly zeroEventTime: number;
    static onDeviceDiscovered: ((deviceInfo: UnityEngineInternal.Input.NativeInputDeviceInfo) => void);
    static onEvents: ((eventCount: number, eventData: any) => void);
    static onUpdate: ((updateType: UnityEngineInternal.Input.NativeInputUpdateType) => void);
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeInputEventType extends System.Enum {
    protected constructor();
    static Click: UnityEngineInternal.Input.NativeInputEventType;
    static DeviceConnected: UnityEngineInternal.Input.NativeInputEventType;
    static DeviceDisconnected: UnityEngineInternal.Input.NativeInputEventType;
    static Generic: UnityEngineInternal.Input.NativeInputEventType;
    static KeyDown: UnityEngineInternal.Input.NativeInputEventType;
    static KeyUp: UnityEngineInternal.Input.NativeInputEventType;
    static PointerCancelled: UnityEngineInternal.Input.NativeInputEventType;
    static PointerDown: UnityEngineInternal.Input.NativeInputEventType;
    static PointerMove: UnityEngineInternal.Input.NativeInputEventType;
    static PointerUp: UnityEngineInternal.Input.NativeInputEventType;
    static Text: UnityEngineInternal.Input.NativeInputEventType;
    static Tracking: UnityEngineInternal.Input.NativeInputEventType;
    value__: number;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeInputEvent extends System.ValueType {
    protected constructor();
    deviceId: number;
    sizeInBytes: number;
    time: number;
    type: UnityEngineInternal.Input.NativeInputEventType;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeGenericEvent extends System.ValueType {
    protected constructor();
    static Value(deviceId: number, time: number, controlIndex: number, rawValue: number, scaledValue: number): UnityEngineInternal.Input.NativeGenericEvent;
    baseEvent: UnityEngineInternal.Input.NativeInputEvent;
    controlIndex: number;
    rawValue: number;
    scaledValue: number;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeKeyEvent extends System.ValueType {
    protected constructor();
    static Down(deviceId: number, time: number, key: UnityEngine.KeyCode): UnityEngineInternal.Input.NativeKeyEvent;
    static Up(deviceId: number, time: number, key: UnityEngine.KeyCode): UnityEngineInternal.Input.NativeKeyEvent;
    baseEvent: UnityEngineInternal.Input.NativeInputEvent;
    key: UnityEngine.KeyCode;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativePointerEvent extends System.ValueType {
    protected constructor();
    static Cancelled(deviceId: number, time: number, pointerId: number, position: UnityEngine.Vector3, delta?: UnityEngine.Vector3, pressure?: number, twist?: number, tilt?: UnityEngine.Vector2, radius?: UnityEngine.Vector3, displayIndex?: number): UnityEngineInternal.Input.NativePointerEvent;
    static Down(deviceId: number, time: number, pointerId: number, position: UnityEngine.Vector3, delta?: UnityEngine.Vector3, pressure?: number, twist?: number, tilt?: UnityEngine.Vector2, radius?: UnityEngine.Vector3, displayIndex?: number): UnityEngineInternal.Input.NativePointerEvent;
    static Move(deviceId: number, time: number, pointerId: number, position: UnityEngine.Vector3, delta?: UnityEngine.Vector3, pressure?: number, twist?: number, tilt?: UnityEngine.Vector2, radius?: UnityEngine.Vector3, displayIndex?: number): UnityEngineInternal.Input.NativePointerEvent;
    static Up(deviceId: number, time: number, pointerId: number, position: UnityEngine.Vector3, delta?: UnityEngine.Vector3, pressure?: number, twist?: number, tilt?: UnityEngine.Vector2, radius?: UnityEngine.Vector3, displayIndex?: number): UnityEngineInternal.Input.NativePointerEvent;
    baseEvent: UnityEngineInternal.Input.NativeInputEvent;
    delta: UnityEngine.Vector3;
    displayIndex: number;
    pointerId: number;
    position: UnityEngine.Vector3;
    pressure: number;
    radius: UnityEngine.Vector3;
    tilt: UnityEngine.Vector2;
    twist: number;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeClickEvent extends System.ValueType {
    protected constructor();
    static Press(deviceId: number, time: number, controlIndex: number, clickCount: number): UnityEngineInternal.Input.NativeClickEvent;
    static Release(deviceId: number, time: number, controlIndex: number, clickCount: number): UnityEngineInternal.Input.NativeClickEvent;
    baseEvent: UnityEngineInternal.Input.NativeInputEvent;
    clickCount: number;
    controlIndex: number;
    isPressed: boolean;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeTextEvent extends System.ValueType {
    protected constructor();
    static Character(deviceId: number, time: number, utf32: number): UnityEngineInternal.Input.NativeTextEvent;
    baseEvent: UnityEngineInternal.Input.NativeInputEvent;
    utf32Character: number;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeTrackingEvent extends System.ValueType {
    protected constructor();
    static Create(deviceId: number, time: number, nodeId: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngineInternal.Input.NativeTrackingEvent;
    acceleration: UnityEngine.Vector3;
    angularAcceleration: UnityEngine.Vector3;
    angularVelocity: UnityEngine.Vector3;
    availableFields: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
    baseEvent: UnityEngineInternal.Input.NativeInputEvent;
    localPosition: UnityEngine.Vector3;
    localRotation: UnityEngine.Quaternion;
    nodeId: number;
    velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngineInternal.Input.NativeTrackingEvent {
  class Flags extends System.Enum {
    protected constructor();
    static AccelerationAvailable: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
    static AngularAccelerationAvailable: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
    static AngularVelocityAvailable: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
    static OrientationAvailable: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
    static PositionAvailable: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
    value__: number;
    static VelocityAvailable: UnityEngineInternal.Input.NativeTrackingEvent.Flags;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeInputDeviceInfo extends System.ValueType {
    protected constructor();
    deviceDescriptor: string;
    deviceId: number;
  }
}
declare namespace UnityEngineInternal.Input {
  class NativeInputUpdateType extends System.Enum {
    protected constructor();
    static BeginBeforeRender: UnityEngineInternal.Input.NativeInputUpdateType;
    static BeginDynamic: UnityEngineInternal.Input.NativeInputUpdateType;
    static BeginEditor: UnityEngineInternal.Input.NativeInputUpdateType;
    static BeginFixed: UnityEngineInternal.Input.NativeInputUpdateType;
    static EndBeforeRender: UnityEngineInternal.Input.NativeInputUpdateType;
    static EndDynamic: UnityEngineInternal.Input.NativeInputUpdateType;
    static EndEditor: UnityEngineInternal.Input.NativeInputUpdateType;
    static EndFixed: UnityEngineInternal.Input.NativeInputUpdateType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class JsonUtility extends System.Object {
    protected constructor();
    static FromJson(json: string, type: any): any;
    static FromJsonOverwrite(json: string, objectToOverwrite: any): void;
    static ToJson(obj: any): string;
    static ToJson(obj: any, prettyPrint: boolean): string;
  }
}
declare namespace UnityEngine.Networking {
  class ChannelBuffer extends System.Object {
    constructor(conn: UnityEngine.Networking.NetworkConnection, bufferSize: number, cid: number, isReliable: boolean, isSequenced: boolean);
    CheckInternalBuffer(): void;
    Dispose(): void;
    Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendInternalBuffer(): boolean;
    SendWriter(writer: UnityEngine.Networking.NetworkWriter): boolean;
    SetOption(option: UnityEngine.Networking.ChannelOption, value: number): boolean;
    readonly lastBufferedPerSecond: number;
    readonly numBufferedMsgsOut: number;
    readonly numBufferedPerSecond: number;
    readonly numBytesIn: number;
    readonly numBytesOut: number;
    readonly numMsgsIn: number;
    readonly numMsgsOut: number;
    static MaxBufferedPackets: number;
    maxDelay: number;
    static MaxPendingPacketCount: number;
  }
}
declare namespace UnityEngine.Networking {
  class ChannelPacket extends System.ValueType {
    protected constructor();
    HasSpace(numBytes: number): boolean;
    IsEmpty(): boolean;
    Reset(): void;
    SendToTransport(conn: UnityEngine.Networking.NetworkConnection, channelId: number): boolean;
    Write(bytes: number[], numBytes: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class ClientScene extends System.Object {
    constructor();
    static AddPlayer(playerControllerId: number): boolean;
    static AddPlayer(readyConn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): boolean;
    static AddPlayer(readyConn: UnityEngine.Networking.NetworkConnection, playerControllerId: number, extraMessage: UnityEngine.Networking.MessageBase): boolean;
    static ClearSpawners(): void;
    static ConnectLocalServer(): UnityEngine.Networking.NetworkClient;
    static DestroyAllClientObjects(): void;
    static FindLocalObject(netId: UnityEngine.Networking.NetworkInstanceId): UnityEngine.GameObject;
    static Ready(conn: UnityEngine.Networking.NetworkConnection): boolean;
    static RegisterPrefab(prefab: UnityEngine.GameObject): void;
    static RegisterPrefab(prefab: UnityEngine.GameObject, newAssetId: UnityEngine.Networking.NetworkHash128): void;
    static RegisterPrefab(prefab: UnityEngine.GameObject, spawnHandler: ((position: UnityEngine.Vector3, assetId: UnityEngine.Networking.NetworkHash128) => UnityEngine.GameObject), unspawnHandler: ((spawned: UnityEngine.GameObject) => void)): void;
    static RegisterSpawnHandler(assetId: UnityEngine.Networking.NetworkHash128, spawnHandler: ((position: UnityEngine.Vector3, assetId: UnityEngine.Networking.NetworkHash128) => UnityEngine.GameObject), unspawnHandler: ((spawned: UnityEngine.GameObject) => void)): void;
    static RemovePlayer(playerControllerId: number): boolean;
    static SendReconnectMessage(extraMessage: UnityEngine.Networking.MessageBase): boolean;
    static SetLocalObject(netId: UnityEngine.Networking.NetworkInstanceId, obj: UnityEngine.GameObject): void;
    static SetReconnectId(newReconnectId: number, peers: UnityEngine.Networking.NetworkSystem.PeerInfoMessage[]): void;
    static UnregisterPrefab(prefab: UnityEngine.GameObject): void;
    static UnregisterSpawnHandler(assetId: UnityEngine.Networking.NetworkHash128): void;
    static readonly localPlayers: UnityEngine.Networking.PlayerController[];
    static readonly objects: any;
    static readonly prefabs: any;
    static readonly ready: boolean;
    static readonly readyConnection: UnityEngine.Networking.NetworkConnection;
    static readonly reconnectId: number;
    static readonly spawnableObjects: any;
    static ReconnectIdHost: number;
    static ReconnectIdInvalid: number;
  }
}
declare namespace UnityEngine.Networking.ClientScene {
  class PendingOwner extends System.ValueType {
    protected constructor();
    netId: UnityEngine.Networking.NetworkInstanceId;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking {
  class ConnectionArray extends System.Object {
    constructor();
    Add(connId: number, conn: UnityEngine.Networking.NetworkConnection): number;
    AddLocal(conn: UnityEngine.Networking.NetworkConnection): number;
    ContainsPlayer(player: UnityEngine.GameObject, conn: any): boolean;
    Get(connId: number): UnityEngine.Networking.NetworkConnection;
    GetUnsafe(connId: number): UnityEngine.Networking.NetworkConnection;
    Remove(connId: number): void;
    readonly Count: number;
    readonly LocalIndex: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkSettingsAttribute extends System.Attribute {
    constructor();
    channel: number;
    sendInterval: number;
  }
}
declare namespace UnityEngine.Networking {
  class SyncVarAttribute extends System.Attribute {
    constructor();
    hook: string;
  }
}
declare namespace UnityEngine.Networking {
  class CommandAttribute extends System.Attribute {
    constructor();
    channel: number;
  }
}
declare namespace UnityEngine.Networking {
  class ClientRpcAttribute extends System.Attribute {
    constructor();
    channel: number;
  }
}
declare namespace UnityEngine.Networking {
  class TargetRpcAttribute extends System.Attribute {
    constructor();
    channel: number;
  }
}
declare namespace UnityEngine.Networking {
  class SyncEventAttribute extends System.Attribute {
    constructor();
    channel: number;
  }
}
declare namespace UnityEngine.Networking {
  class ServerAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Networking {
  class ServerCallbackAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Networking {
  class ClientAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Networking {
  class ClientCallbackAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Networking {
  class DotNetCompatibility extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Networking {
  class LocalClient extends UnityEngine.Networking.NetworkClient {
    constructor();
    Disconnect(): void;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkClient extends System.Object {
    constructor();
    constructor(conn: UnityEngine.Networking.NetworkConnection);
    Configure(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
    Configure(topology: UnityEngine.Networking.HostTopology): boolean;
    Connect(secureTunnelEndPoint: any): void;
    Connect(serverIp: string, serverPort: number): void;
    Connect(matchInfo: UnityEngine.Networking.Match.MatchInfo): void;
    ConnectWithSimulator(serverIp: string, serverPort: number, latency: number, packetLoss: number): void;
    Disconnect(): void;
    GetConnectionStats(): any;
    GetRTT(): number;
    GetStatsIn(numMsgs: any, numBytes: any): void;
    GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
    static GetTotalConnectionStats(): any;
    ReconnectToNewHost(secureTunnelEndPoint: any): boolean;
    ReconnectToNewHost(serverIp: string, serverPort: number): boolean;
    RegisterHandler(msgType: number, handler: ((netMsg: UnityEngine.Networking.NetworkMessage) => void)): void;
    RegisterHandlerSafe(msgType: number, handler: ((netMsg: UnityEngine.Networking.NetworkMessage) => void)): void;
    ResetConnectionStats(): void;
    Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendByChannel(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
    SendBytes(data: number[], numBytes: number, channelId: number): boolean;
    SendUnreliable(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendWriter(writer: UnityEngine.Networking.NetworkWriter, channelId: number): boolean;
    SetMaxDelay(seconds: number): void;
    Shutdown(): void;
    static ShutdownAll(): void;
    UnregisterHandler(msgType: number): void;
    static readonly active: boolean;
    static readonly allClients: UnityEngine.Networking.NetworkClient[];
    readonly connection: UnityEngine.Networking.NetworkConnection;
    readonly handlers: any;
    hostPort: number;
    readonly hostTopology: UnityEngine.Networking.HostTopology;
    readonly isConnected: boolean;
    readonly networkConnectionClass: any;
    readonly numChannels: number;
    readonly peers: UnityEngine.Networking.NetworkSystem.PeerInfoMessage[];
    readonly serverIp: string;
    readonly serverPort: number;
  }
}
declare namespace UnityEngine.Networking.LocalClient {
  class InternalMsg extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEngine.Networking {
  class ULocalConnectionToClient extends UnityEngine.Networking.NetworkConnection {
    constructor(localClient: UnityEngine.Networking.LocalClient);
    GetStatsIn(numMsgs: any, numBytes: any): void;
    GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
    Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendByChannel(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
    SendBytes(bytes: number[], numBytes: number, channelId: number): boolean;
    SendUnreliable(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendWriter(writer: UnityEngine.Networking.NetworkWriter, channelId: number): boolean;
    readonly localClient: UnityEngine.Networking.LocalClient;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkConnection extends System.Object {
    constructor();
    CheckHandler(msgType: number): boolean;
    Disconnect(): void;
    Dispose(): void;
    FlushChannels(): void;
    GetStatsIn(numMsgs: any, numBytes: any): void;
    GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
    Initialize(networkAddress: string, networkHostId: number, networkConnectionId: number, hostTopology: UnityEngine.Networking.HostTopology): void;
    InvokeHandler(msgType: number, reader: UnityEngine.Networking.NetworkReader, channelId: number): boolean;
    InvokeHandler(netMsg: UnityEngine.Networking.NetworkMessage): boolean;
    InvokeHandlerNoData(msgType: number): boolean;
    RegisterHandler(msgType: number, handler: ((netMsg: UnityEngine.Networking.NetworkMessage) => void)): void;
    ResetStats(): void;
    Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendByChannel(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
    SendBytes(bytes: number[], numBytes: number, channelId: number): boolean;
    SendUnreliable(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendWriter(writer: UnityEngine.Networking.NetworkWriter, channelId: number): boolean;
    SetChannelOption(channelId: number, option: UnityEngine.Networking.ChannelOption, value: number): boolean;
    SetMaxDelay(seconds: number): void;
    ToString(): string;
    TransportReceive(bytes: number[], numBytes: number, channelId: number): void;
    TransportRecieve(bytes: number[], numBytes: number, channelId: number): void;
    TransportSend(bytes: number[], numBytes: number, channelId: number, error: any): boolean;
    UnregisterHandler(msgType: number): void;
    readonly clientOwnedObjects: any;
    readonly isConnected: boolean;
    readonly lastError: UnityEngine.Networking.NetworkError;
    readonly playerControllers: UnityEngine.Networking.PlayerController[];
    address: string;
    connectionId: number;
    hostId: number;
    isReady: boolean;
    lastMessageTime: number;
    logNetworkMessages: boolean;
  }
}
declare namespace UnityEngine.Networking {
  class ULocalConnectionToServer extends UnityEngine.Networking.NetworkConnection {
    constructor(localServer: UnityEngine.Networking.NetworkServer);
    GetStatsIn(numMsgs: any, numBytes: any): void;
    GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
    Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendByChannel(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
    SendBytes(bytes: number[], numBytes: number, channelId: number): boolean;
    SendUnreliable(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    SendWriter(writer: UnityEngine.Networking.NetworkWriter, channelId: number): boolean;
  }
}
declare namespace UnityEngine.Networking {
  class LogFilter extends System.Object {
    constructor();
    static currentLogLevel: number;
    static readonly logDebug: boolean;
    static readonly logError: boolean;
    static readonly logFatal: boolean;
    static readonly logInfo: boolean;
    static readonly logWarn: boolean;
    static current: UnityEngine.Networking.LogFilter.FilterLevel;
    static Debug: number;
    static Error: number;
    static Fatal: number;
    static Info: number;
    static Warn: number;
  }
}
declare namespace UnityEngine.Networking.LogFilter {
  class FilterLevel extends System.Enum {
    protected constructor();
    static Debug: UnityEngine.Networking.LogFilter.FilterLevel;
    static Developer: UnityEngine.Networking.LogFilter.FilterLevel;
    static Error: UnityEngine.Networking.LogFilter.FilterLevel;
    static Fatal: UnityEngine.Networking.LogFilter.FilterLevel;
    static Info: UnityEngine.Networking.LogFilter.FilterLevel;
    static SetInScripting: UnityEngine.Networking.LogFilter.FilterLevel;
    value__: number;
    static Warn: UnityEngine.Networking.LogFilter.FilterLevel;
  }
}
declare namespace UnityEngine.Networking {
  class MessageBase extends System.Object {
    protected constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class StringMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    constructor(v: string);
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    value: string;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class IntegerMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    constructor(v: number);
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    value: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class EmptyMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ErrorMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    errorCode: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ReadyMessage extends UnityEngine.Networking.NetworkSystem.EmptyMessage {
    constructor();
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class NotReadyMessage extends UnityEngine.Networking.NetworkSystem.EmptyMessage {
    constructor();
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class AddPlayerMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    msgData: number[];
    msgSize: number;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class RemovePlayerMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class PeerAuthorityMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    authorityState: boolean;
    connectionId: number;
    netId: UnityEngine.Networking.NetworkInstanceId;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class PeerInfoPlayer extends System.ValueType {
    protected constructor();
    netId: UnityEngine.Networking.NetworkInstanceId;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class PeerInfoMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    ToString(): string;
    address: string;
    connectionId: number;
    isHost: boolean;
    isYou: boolean;
    playerIds: UnityEngine.Networking.NetworkSystem.PeerInfoPlayer[];
    port: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class PeerListMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    oldServerConnectionId: number;
    peers: UnityEngine.Networking.NetworkSystem.PeerInfoMessage[];
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ReconnectMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    msgData: number[];
    msgSize: number;
    netId: UnityEngine.Networking.NetworkInstanceId;
    oldConnectionId: number;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ObjectSpawnMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    assetId: UnityEngine.Networking.NetworkHash128;
    netId: UnityEngine.Networking.NetworkInstanceId;
    payload: number[];
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ObjectSpawnSceneMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    netId: UnityEngine.Networking.NetworkInstanceId;
    payload: number[];
    position: UnityEngine.Vector3;
    sceneId: UnityEngine.Networking.NetworkSceneId;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ObjectSpawnFinishedMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    state: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ObjectDestroyMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    netId: UnityEngine.Networking.NetworkInstanceId;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class OwnerMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    netId: UnityEngine.Networking.NetworkInstanceId;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class ClientAuthorityMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    authority: boolean;
    netId: UnityEngine.Networking.NetworkInstanceId;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class OverrideTransformMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    netId: UnityEngine.Networking.NetworkInstanceId;
    payload: number[];
    teleport: boolean;
    time: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class AnimationMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    netId: UnityEngine.Networking.NetworkInstanceId;
    normalizedTime: number;
    parameters: number[];
    stateHash: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class AnimationParametersMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    netId: UnityEngine.Networking.NetworkInstanceId;
    parameters: number[];
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class AnimationTriggerMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    hash: number;
    netId: UnityEngine.Networking.NetworkInstanceId;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class LobbyReadyToBeginMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    readyState: boolean;
    slotId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class CRCMessageEntry extends System.ValueType {
    protected constructor();
    channel: number;
    name: string;
  }
}
declare namespace UnityEngine.Networking.NetworkSystem {
  class CRCMessage extends UnityEngine.Networking.MessageBase {
    constructor();
    Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
    Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
    scripts: UnityEngine.Networking.NetworkSystem.CRCMessageEntry[];
  }
}
declare namespace UnityEngine.Networking {
  class NetworkAnimator extends UnityEngine.Networking.NetworkBehaviour {
    constructor();
    GetParameterAutoSend(index: number): boolean;
    OnDeserialize(reader: UnityEngine.Networking.NetworkReader, initialState: boolean): void;
    OnSerialize(writer: UnityEngine.Networking.NetworkWriter, forceAll: boolean): boolean;
    SetParameterAutoSend(index: number, value: boolean): void;
    SetTrigger(hash: number): void;
    SetTrigger(triggerName: string): void;
    animator: UnityEngine.Animator;
    param0: string;
    param1: string;
    param2: string;
    param3: string;
    param4: string;
    param5: string;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkBehaviour extends UnityEngine.MonoBehaviour {
    constructor();
    ClearAllDirtyBits(): void;
    GetNetworkChannel(): number;
    GetNetworkSendInterval(): number;
    InvokeCommand(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
    InvokeRPC(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
    InvokeSyncEvent(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
    InvokeSyncList(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
    OnCheckObserver(conn: UnityEngine.Networking.NetworkConnection): boolean;
    OnDeserialize(reader: UnityEngine.Networking.NetworkReader, initialState: boolean): void;
    OnNetworkDestroy(): void;
    OnRebuildObservers(observers: any, initialize: boolean): boolean;
    OnSerialize(writer: UnityEngine.Networking.NetworkWriter, initialState: boolean): boolean;
    OnSetLocalVisibility(vis: boolean): void;
    OnStartAuthority(): void;
    OnStartClient(): void;
    OnStartLocalPlayer(): void;
    OnStartServer(): void;
    OnStopAuthority(): void;
    PreStartClient(): void;
    SetDirtyBit(dirtyBit: number): void;
    readonly connectionToClient: UnityEngine.Networking.NetworkConnection;
    readonly connectionToServer: UnityEngine.Networking.NetworkConnection;
    readonly hasAuthority: boolean;
    readonly isClient: boolean;
    readonly isLocalPlayer: boolean;
    readonly isServer: boolean;
    readonly localPlayerAuthority: boolean;
    readonly netId: UnityEngine.Networking.NetworkInstanceId;
    readonly playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkBehaviour {
  class UNetInvokeType extends System.Enum {
    protected constructor();
    static ClientRpc: UnityEngine.Networking.NetworkBehaviour.UNetInvokeType;
    static Command: UnityEngine.Networking.NetworkBehaviour.UNetInvokeType;
    static SyncEvent: UnityEngine.Networking.NetworkBehaviour.UNetInvokeType;
    static SyncList: UnityEngine.Networking.NetworkBehaviour.UNetInvokeType;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.NetworkBehaviour {
  class Invoker extends System.Object {
    constructor();
    DebugString(): string;
    invokeClass: any;
    invokeFunction: ((obj: UnityEngine.Networking.NetworkBehaviour, reader: UnityEngine.Networking.NetworkReader) => void);
    invokeType: UnityEngine.Networking.NetworkBehaviour.UNetInvokeType;
  }
}
declare namespace UnityEngine.Networking {
  class NetBuffer extends System.Object {
    constructor();
    constructor(buffer: number[]);
    FinishMessage(): void;
    ReadByte(): number;
    ReadBytes(buffer: number[], count: number): void;
    Replace(buffer: number[]): void;
    SeekZero(): void;
    ToString(): string;
    WriteByte(value: number): void;
    WriteByte2(value0: number, value1: number): void;
    WriteByte4(value0: number, value1: number, value2: number, value3: number): void;
    WriteByte8(value0: number, value1: number, value2: number, value3: number, value4: number, value5: number, value6: number, value7: number): void;
    WriteBytes(buffer: number[], count: number): void;
    WriteBytesAtOffset(buffer: number[], targetOffset: number, count: number): void;
    readonly Length: number;
    readonly Position: number;
  }
}
declare namespace UnityEngine.Networking {
  class UIntFloat extends System.ValueType {
    protected constructor();
    doubleValue: number;
    floatValue: number;
    intValue: number;
    longValue: number;
  }
}
declare namespace UnityEngine.Networking {
  class UIntDecimal extends System.ValueType {
    protected constructor();
    decimalValue: number;
    longValue1: number;
    longValue2: number;
  }
}
declare namespace UnityEngine.Networking {
  class FloatConversion extends System.Object {
    constructor();
    static ToDecimal(value1: number, value2: number): number;
    static ToDouble(value: number): number;
    static ToSingle(value: number): number;
  }
}
declare namespace UnityEngine.Networking.NetworkClient {
  class ConnectState extends System.Enum {
    protected constructor();
    static Connected: UnityEngine.Networking.NetworkClient.ConnectState;
    static Connecting: UnityEngine.Networking.NetworkClient.ConnectState;
    static Disconnected: UnityEngine.Networking.NetworkClient.ConnectState;
    static Failed: UnityEngine.Networking.NetworkClient.ConnectState;
    static None: UnityEngine.Networking.NetworkClient.ConnectState;
    static Resolved: UnityEngine.Networking.NetworkClient.ConnectState;
    static Resolving: UnityEngine.Networking.NetworkClient.ConnectState;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.NetworkConnection {
  class PacketStat extends System.Object {
    constructor();
    constructor(s: UnityEngine.Networking.NetworkConnection.PacketStat);
    ToString(): string;
    bytes: number;
    count: number;
    msgType: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkCRC extends System.Object {
    constructor();
    static RegisterBehaviour(name: string, channel: number): void;
    static ReinitializeScriptCRCs(callingAssembly: any): void;
    static scriptCRCCheck: boolean;
    readonly scripts: any;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkBroadcastResult extends System.ValueType {
    protected constructor();
    broadcastData: number[];
    serverAddress: string;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkDiscovery extends UnityEngine.MonoBehaviour {
    constructor();
    Initialize(): boolean;
    OnReceivedBroadcast(fromAddress: string, data: string): void;
    StartAsClient(): boolean;
    StartAsServer(): boolean;
    StopBroadcast(): void;
    broadcastData: string;
    broadcastInterval: number;
    broadcastKey: number;
    broadcastPort: number;
    readonly broadcastsReceived: any;
    broadcastSubVersion: number;
    broadcastVersion: number;
    hostId: number;
    isClient: boolean;
    isServer: boolean;
    offsetX: number;
    offsetY: number;
    running: boolean;
    showGUI: boolean;
    useNetworkManager: boolean;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkHash128 extends System.ValueType {
    protected constructor();
    IsValid(): boolean;
    static Parse(text: string): UnityEngine.Networking.NetworkHash128;
    Reset(): void;
    ToString(): string;
    i0: number;
    i1: number;
    i10: number;
    i11: number;
    i12: number;
    i13: number;
    i14: number;
    i15: number;
    i2: number;
    i3: number;
    i4: number;
    i5: number;
    i6: number;
    i7: number;
    i8: number;
    i9: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkIdentity extends UnityEngine.MonoBehaviour {
    constructor();
    AssignClientAuthority(conn: UnityEngine.Networking.NetworkConnection): boolean;
    ForceSceneId(newSceneId: number): void;
    RebuildObservers(initialize: boolean): void;
    RemoveClientAuthority(conn: UnityEngine.Networking.NetworkConnection): boolean;
    readonly assetId: UnityEngine.Networking.NetworkHash128;
    readonly clientAuthorityOwner: UnityEngine.Networking.NetworkConnection;
    readonly connectionToClient: UnityEngine.Networking.NetworkConnection;
    readonly connectionToServer: UnityEngine.Networking.NetworkConnection;
    readonly hasAuthority: boolean;
    readonly isClient: boolean;
    readonly isLocalPlayer: boolean;
    readonly isServer: boolean;
    localPlayerAuthority: boolean;
    readonly netId: UnityEngine.Networking.NetworkInstanceId;
    readonly observers: any;
    readonly playerControllerId: number;
    readonly sceneId: UnityEngine.Networking.NetworkSceneId;
    serverOnly: boolean;
    static clientAuthorityCallback: ((conn: UnityEngine.Networking.NetworkConnection, uv: UnityEngine.Networking.NetworkIdentity, authorityState: boolean) => void);
  }
}
declare namespace UnityEngine.Networking {
  class NetworkInstanceId extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    IsEmpty(): boolean;
    ToString(): string;
    readonly Value: number;
    static Invalid: UnityEngine.Networking.NetworkInstanceId;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkLobbyManager extends UnityEngine.Networking.NetworkManager {
    constructor();
    CheckReadyToBegin(): void;
    OnClientConnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnClientDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnClientSceneChanged(conn: UnityEngine.Networking.NetworkConnection): void;
    OnLobbyClientAddPlayerFailed(): void;
    OnLobbyClientConnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnLobbyClientDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnLobbyClientEnter(): void;
    OnLobbyClientExit(): void;
    OnLobbyClientSceneChanged(conn: UnityEngine.Networking.NetworkConnection): void;
    OnLobbyServerConnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnLobbyServerCreateGamePlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): UnityEngine.GameObject;
    OnLobbyServerCreateLobbyPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): UnityEngine.GameObject;
    OnLobbyServerDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnLobbyServerPlayerRemoved(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): void;
    OnLobbyServerPlayersReady(): void;
    OnLobbyServerSceneChanged(sceneName: string): void;
    OnLobbyServerSceneLoadedForPlayer(lobbyPlayer: UnityEngine.GameObject, gamePlayer: UnityEngine.GameObject): boolean;
    OnLobbyStartClient(lobbyClient: UnityEngine.Networking.NetworkClient): void;
    OnLobbyStartHost(): void;
    OnLobbyStartServer(): void;
    OnLobbyStopClient(): void;
    OnLobbyStopHost(): void;
    OnServerAddPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): void;
    OnServerAddPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number, extraMessageReader: UnityEngine.Networking.NetworkReader): void;
    OnServerConnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnServerDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnServerRemovePlayer(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.Networking.PlayerController): void;
    OnServerSceneChanged(sceneName: string): void;
    OnStartClient(lobbyClient: UnityEngine.Networking.NetworkClient): void;
    OnStartHost(): void;
    OnStartServer(): void;
    OnStopClient(): void;
    OnStopHost(): void;
    SendReturnToLobby(): boolean;
    ServerChangeScene(sceneName: string): void;
    ServerReturnToLobby(): void;
    TryToAddPlayer(): void;
    gamePlayerPrefab: UnityEngine.GameObject;
    lobbyPlayerPrefab: UnityEngine.Networking.NetworkLobbyPlayer;
    lobbyScene: string;
    maxPlayers: number;
    maxPlayersPerConnection: number;
    minPlayers: number;
    playScene: string;
    showLobbyGUI: boolean;
    lobbySlots: UnityEngine.Networking.NetworkLobbyPlayer[];
  }
}
declare namespace UnityEngine.Networking {
  class NetworkManager extends UnityEngine.MonoBehaviour {
    constructor();
    GetStartPosition(): UnityEngine.Transform;
    IsClientConnected(): boolean;
    OnClientConnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnClientDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnClientError(conn: UnityEngine.Networking.NetworkConnection, errorCode: number): void;
    OnClientNotReady(conn: UnityEngine.Networking.NetworkConnection): void;
    OnClientSceneChanged(conn: UnityEngine.Networking.NetworkConnection): void;
    OnDestroyMatch(success: boolean, extendedInfo: string): void;
    OnDropConnection(success: boolean, extendedInfo: string): void;
    OnMatchCreate(success: boolean, extendedInfo: string, matchInfo: UnityEngine.Networking.Match.MatchInfo): void;
    OnMatchJoined(success: boolean, extendedInfo: string, matchInfo: UnityEngine.Networking.Match.MatchInfo): void;
    OnMatchList(success: boolean, extendedInfo: string, matchList: UnityEngine.Networking.Match.MatchInfoSnapshot[]): void;
    OnServerAddPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): void;
    OnServerAddPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number, extraMessageReader: UnityEngine.Networking.NetworkReader): void;
    OnServerConnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnServerDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
    OnServerError(conn: UnityEngine.Networking.NetworkConnection, errorCode: number): void;
    OnServerReady(conn: UnityEngine.Networking.NetworkConnection): void;
    OnServerRemovePlayer(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.Networking.PlayerController): void;
    OnServerSceneChanged(sceneName: string): void;
    OnSetMatchAttributes(success: boolean, extendedInfo: string): void;
    OnStartClient(client: UnityEngine.Networking.NetworkClient): void;
    OnStartHost(): void;
    OnStartServer(): void;
    OnStopClient(): void;
    OnStopHost(): void;
    OnStopServer(): void;
    static RegisterStartPosition(start: UnityEngine.Transform): void;
    ServerChangeScene(newSceneName: string): void;
    SetMatchHost(newHost: string, port: number, https: boolean): void;
    SetupMigrationManager(man: UnityEngine.Networking.NetworkMigrationManager): void;
    static Shutdown(): void;
    StartClient(): UnityEngine.Networking.NetworkClient;
    StartClient(matchInfo: UnityEngine.Networking.Match.MatchInfo): UnityEngine.Networking.NetworkClient;
    StartClient(info: UnityEngine.Networking.Match.MatchInfo, config: UnityEngine.Networking.ConnectionConfig): UnityEngine.Networking.NetworkClient;
    StartClient(info: UnityEngine.Networking.Match.MatchInfo, config: UnityEngine.Networking.ConnectionConfig, hostPort: number): UnityEngine.Networking.NetworkClient;
    StartHost(): UnityEngine.Networking.NetworkClient;
    StartHost(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): UnityEngine.Networking.NetworkClient;
    StartHost(info: UnityEngine.Networking.Match.MatchInfo): UnityEngine.Networking.NetworkClient;
    StartMatchMaker(): void;
    StartServer(): boolean;
    StartServer(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
    StartServer(info: UnityEngine.Networking.Match.MatchInfo): boolean;
    StopClient(): void;
    StopHost(): void;
    StopMatchMaker(): void;
    StopServer(): void;
    static UnRegisterStartPosition(start: UnityEngine.Transform): void;
    UseExternalClient(externalClient: UnityEngine.Networking.NetworkClient): void;
    autoCreatePlayer: boolean;
    readonly channels: UnityEngine.Networking.QosType[];
    clientLoadedScene: boolean;
    readonly connectionConfig: UnityEngine.Networking.ConnectionConfig;
    customConfig: boolean;
    dontDestroyOnLoad: boolean;
    readonly globalConfig: UnityEngine.Networking.GlobalConfig;
    logLevel: UnityEngine.Networking.LogFilter.FilterLevel;
    matchHost: string;
    matchPort: number;
    maxConnections: number;
    maxDelay: number;
    readonly migrationManager: UnityEngine.Networking.NetworkMigrationManager;
    networkAddress: string;
    networkPort: number;
    readonly numPlayers: number;
    offlineScene: string;
    onlineScene: string;
    packetLossPercentage: number;
    playerPrefab: UnityEngine.GameObject;
    playerSpawnMethod: UnityEngine.Networking.PlayerSpawnMethod;
    runInBackground: boolean;
    scriptCRCCheck: boolean;
    secureTunnelEndpoint: any;
    sendPeerInfo: boolean;
    serverBindAddress: string;
    serverBindToIP: boolean;
    simulatedLatency: number;
    readonly spawnPrefabs: UnityEngine.GameObject[];
    readonly startPositions: UnityEngine.Transform[];
    useSimulator: boolean;
    useWebSockets: boolean;
    client: UnityEngine.Networking.NetworkClient;
    isNetworkActive: boolean;
    matches: UnityEngine.Networking.Match.MatchInfoSnapshot[];
    matchInfo: UnityEngine.Networking.Match.MatchInfo;
    matchMaker: UnityEngine.Networking.Match.NetworkMatch;
    matchName: string;
    matchSize: number;
    static networkSceneName: string;
    static singleton: UnityEngine.Networking.NetworkManager;
  }
}
declare namespace UnityEngine.Networking.NetworkLobbyManager {
  class PendingPlayer extends System.ValueType {
    protected constructor();
    conn: UnityEngine.Networking.NetworkConnection;
    lobbyPlayer: UnityEngine.GameObject;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkLobbyPlayer extends UnityEngine.Networking.NetworkBehaviour {
    constructor();
    OnClientEnterLobby(): void;
    OnClientExitLobby(): void;
    OnClientReady(readyState: boolean): void;
    OnDeserialize(reader: UnityEngine.Networking.NetworkReader, initialState: boolean): void;
    OnSerialize(writer: UnityEngine.Networking.NetworkWriter, initialState: boolean): boolean;
    OnStartClient(): void;
    RemovePlayer(): void;
    SendNotReadyToBeginMessage(): void;
    SendReadyToBeginMessage(): void;
    SendSceneLoadedMessage(): void;
    readyToBegin: boolean;
    slot: number;
    ShowLobbyGUI: boolean;
  }
}
declare namespace UnityEngine.Networking {
  class PlayerSpawnMethod extends System.Enum {
    protected constructor();
    static Random: UnityEngine.Networking.PlayerSpawnMethod;
    static RoundRobin: UnityEngine.Networking.PlayerSpawnMethod;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkManagerHUD extends UnityEngine.MonoBehaviour {
    constructor();
    manager: UnityEngine.Networking.NetworkManager;
    offsetX: number;
    offsetY: number;
    showGUI: boolean;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkMessageHandlers extends System.Object {
    constructor();
    RegisterHandler(msgType: number, handler: ((netMsg: UnityEngine.Networking.NetworkMessage) => void)): void;
    UnregisterHandler(msgType: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkMigrationManager extends UnityEngine.MonoBehaviour {
    constructor();
    BecomeNewHost(port: number): boolean;
    DisablePlayerObjects(): void;
    FindNewHost(newHostInfo: any, youAreNewHost: any): boolean;
    Initialize(newClient: UnityEngine.Networking.NetworkClient, newMatchInfo: UnityEngine.Networking.Match.MatchInfo): void;
    LostHostOnClient(conn: UnityEngine.Networking.NetworkConnection): boolean;
    LostHostOnHost(): void;
    ReconnectObjectForConnection(newConnection: UnityEngine.Networking.NetworkConnection, oldObject: UnityEngine.GameObject, oldConnectionId: number): boolean;
    ReconnectPlayerForConnection(newConnection: UnityEngine.Networking.NetworkConnection, oldPlayer: UnityEngine.GameObject, oldConnectionId: number, playerControllerId: number): boolean;
    Reset(reconnectId: number): void;
    SendPeerInfo(): void;
    readonly client: UnityEngine.Networking.NetworkClient;
    readonly disconnectedFromHost: boolean;
    hostMigration: boolean;
    readonly hostWasShutdown: boolean;
    readonly matchInfo: UnityEngine.Networking.Match.MatchInfo;
    newHostAddress: string;
    offsetX: number;
    offsetY: number;
    readonly oldServerConnectionId: number;
    readonly peers: UnityEngine.Networking.NetworkSystem.PeerInfoMessage[];
    readonly pendingPlayers: any;
    showGUI: boolean;
    waitingReconnectToNewHost: boolean;
    waitingToBecomeNewHost: boolean;
  }
}
declare namespace UnityEngine.Networking.NetworkMigrationManager {
  class SceneChangeOption extends System.Enum {
    protected constructor();
    static StayInOnlineScene: UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption;
    static SwitchToOfflineScene: UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.NetworkMigrationManager {
  class PendingPlayerInfo extends System.ValueType {
    protected constructor();
    netId: UnityEngine.Networking.NetworkInstanceId;
    obj: UnityEngine.GameObject;
    playerControllerId: number;
  }
}
declare namespace UnityEngine.Networking.NetworkMigrationManager {
  class ConnectionPendingPlayers extends System.ValueType {
    protected constructor();
    players: UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo[];
  }
}
declare namespace UnityEngine.Networking {
  class NetworkProximityChecker extends UnityEngine.Networking.NetworkBehaviour {
    constructor();
    OnCheckObserver(newObserver: UnityEngine.Networking.NetworkConnection): boolean;
    OnRebuildObservers(observers: any, initial: boolean): boolean;
    OnSetLocalVisibility(vis: boolean): void;
    checkMethod: UnityEngine.Networking.NetworkProximityChecker.CheckMethod;
    forceHidden: boolean;
    visRange: number;
    visUpdateInterval: number;
  }
}
declare namespace UnityEngine.Networking.NetworkProximityChecker {
  class CheckMethod extends System.Enum {
    protected constructor();
    static Physics2D: UnityEngine.Networking.NetworkProximityChecker.CheckMethod;
    static Physics3D: UnityEngine.Networking.NetworkProximityChecker.CheckMethod;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkReader extends System.Object {
    constructor();
    constructor(writer: UnityEngine.Networking.NetworkWriter);
    constructor(buffer: number[]);
    ReadBoolean(): boolean;
    ReadByte(): number;
    ReadBytes(count: number): number[];
    ReadBytesAndSize(): number[];
    ReadChar(): any;
    ReadColor(): UnityEngine.Color;
    ReadColor32(): UnityEngine.Color32;
    ReadDecimal(): number;
    ReadDouble(): number;
    ReadGameObject(): UnityEngine.GameObject;
    ReadInt16(): number;
    ReadInt32(): number;
    ReadInt64(): number;
    ReadMatrix4x4(): UnityEngine.Matrix4x4;
    ReadNetworkHash128(): UnityEngine.Networking.NetworkHash128;
    ReadNetworkId(): UnityEngine.Networking.NetworkInstanceId;
    ReadNetworkIdentity(): UnityEngine.Networking.NetworkIdentity;
    ReadPackedUInt32(): number;
    ReadPackedUInt64(): number;
    ReadPlane(): UnityEngine.Plane;
    ReadQuaternion(): UnityEngine.Quaternion;
    ReadRay(): UnityEngine.Ray;
    ReadRect(): UnityEngine.Rect;
    ReadSByte(): number;
    ReadSceneId(): UnityEngine.Networking.NetworkSceneId;
    ReadSingle(): number;
    ReadString(): string;
    ReadTransform(): UnityEngine.Transform;
    ReadUInt16(): number;
    ReadUInt32(): number;
    ReadUInt64(): number;
    ReadVector2(): UnityEngine.Vector2;
    ReadVector3(): UnityEngine.Vector3;
    ReadVector4(): UnityEngine.Vector4;
    SeekZero(): void;
    ToString(): string;
    readonly Length: number;
    readonly Position: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkScene extends System.Object {
    constructor();
    static UnregisterSpawnHandler(assetId: UnityEngine.Networking.NetworkHash128): void;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkSceneId extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    IsEmpty(): boolean;
    ToString(): string;
    readonly Value: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkServer extends System.Object {
    protected constructor();
    static AddExternalConnection(conn: UnityEngine.Networking.NetworkConnection): boolean;
    static AddPlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number): boolean;
    static AddPlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number, assetId: UnityEngine.Networking.NetworkHash128): boolean;
    static BecomeHost(oldClient: UnityEngine.Networking.NetworkClient, port: number, matchInfo: UnityEngine.Networking.Match.MatchInfo, oldConnectionId: number, peers: UnityEngine.Networking.NetworkSystem.PeerInfoMessage[]): UnityEngine.Networking.NetworkClient;
    static ClearHandlers(): void;
    static ClearLocalObjects(): void;
    static ClearSpawners(): void;
    static Configure(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
    static Configure(topology: UnityEngine.Networking.HostTopology): boolean;
    static Destroy(obj: UnityEngine.GameObject): void;
    static DestroyPlayersForConnection(conn: UnityEngine.Networking.NetworkConnection): void;
    static DisconnectAll(): void;
    static FindLocalObject(netId: UnityEngine.Networking.NetworkInstanceId): UnityEngine.GameObject;
    static GetConnectionStats(): any;
    static GetStatsIn(numMsgs: any, numBytes: any): void;
    static GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
    static Listen(serverPort: number): boolean;
    static Listen(ipAddress: string, serverPort: number): boolean;
    static Listen(matchInfo: UnityEngine.Networking.Match.MatchInfo, listenPort: number): boolean;
    static ListenRelay(relayIp: string, relayPort: number, netGuid: UnityEngine.Networking.Types.NetworkID, sourceId: UnityEngine.Networking.Types.SourceID, nodeId: UnityEngine.Networking.Types.NodeID): void;
    static RegisterHandler(msgType: number, handler: ((netMsg: UnityEngine.Networking.NetworkMessage) => void)): void;
    static RemoveExternalConnection(connectionId: number): void;
    static ReplacePlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number): boolean;
    static ReplacePlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number, assetId: UnityEngine.Networking.NetworkHash128): boolean;
    static Reset(): void;
    static ResetConnectionStats(): void;
    static SendByChannelToAll(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
    static SendByChannelToReady(contextObj: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
    static SendBytesToPlayer(player: UnityEngine.GameObject, buffer: number[], numBytes: number, channelId: number): void;
    static SendBytesToReady(contextObj: UnityEngine.GameObject, buffer: number[], numBytes: number, channelId: number): void;
    SendNetworkInfo(targetConnection: UnityEngine.Networking.NetworkConnection): void;
    static SendToAll(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    static SendToClient(connectionId: number, msgType: number, msg: UnityEngine.Networking.MessageBase): void;
    static SendToClientOfPlayer(player: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase): void;
    static SendToReady(contextObj: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    static SendUnreliableToAll(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    static SendUnreliableToReady(contextObj: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
    static SendWriterToReady(contextObj: UnityEngine.GameObject, writer: UnityEngine.Networking.NetworkWriter, channelId: number): void;
    static SetAllClientsNotReady(): void;
    static SetClientNotReady(conn: UnityEngine.Networking.NetworkConnection): void;
    static SetClientReady(conn: UnityEngine.Networking.NetworkConnection): void;
    static Shutdown(): void;
    static Spawn(obj: UnityEngine.GameObject): void;
    static Spawn(obj: UnityEngine.GameObject, assetId: UnityEngine.Networking.NetworkHash128): void;
    static SpawnObjects(): boolean;
    static SpawnWithClientAuthority(obj: UnityEngine.GameObject, player: UnityEngine.GameObject): boolean;
    static SpawnWithClientAuthority(obj: UnityEngine.GameObject, conn: UnityEngine.Networking.NetworkConnection): boolean;
    static SpawnWithClientAuthority(obj: UnityEngine.GameObject, assetId: UnityEngine.Networking.NetworkHash128, conn: UnityEngine.Networking.NetworkConnection): boolean;
    static UnregisterHandler(msgType: number): void;
    static UnSpawn(obj: UnityEngine.GameObject): void;
    static readonly active: boolean;
    static readonly connections: any;
    static dontListen: boolean;
    static readonly handlers: any;
    static readonly hostTopology: UnityEngine.Networking.HostTopology;
    static readonly listenPort: number;
    static readonly localClientActive: boolean;
    static readonly localConnections: UnityEngine.Networking.NetworkConnection[];
    static maxDelay: number;
    static readonly networkConnectionClass: any;
    static readonly numChannels: number;
    static readonly objects: any;
    static sendPeerInfo: boolean;
    static readonly serverHostId: number;
    static useWebSockets: boolean;
  }
}
declare namespace UnityEngine.Networking.NetworkServer {
  class ServerSimpleWrapper extends UnityEngine.Networking.NetworkServerSimple {
    constructor(server: UnityEngine.Networking.NetworkServer);
    OnConnected(conn: UnityEngine.Networking.NetworkConnection): void;
    OnConnectError(connectionId: number, error: number): void;
    OnData(conn: UnityEngine.Networking.NetworkConnection, receivedSize: number, channelId: number): void;
    OnDataError(conn: UnityEngine.Networking.NetworkConnection, error: number): void;
    OnDisconnected(conn: UnityEngine.Networking.NetworkConnection): void;
    OnDisconnectError(conn: UnityEngine.Networking.NetworkConnection, error: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkServerSimple extends System.Object {
    constructor();
    ClearHandlers(): void;
    Configure(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
    Configure(topology: UnityEngine.Networking.HostTopology): boolean;
    Disconnect(connectionId: number): void;
    DisconnectAllConnections(): void;
    FindConnection(connectionId: number): UnityEngine.Networking.NetworkConnection;
    Initialize(): void;
    Listen(serverListenPort: number): boolean;
    Listen(serverListenPort: number, topology: UnityEngine.Networking.HostTopology): boolean;
    Listen(ipAddress: string, serverListenPort: number): boolean;
    ListenRelay(relayIp: string, relayPort: number, netGuid: UnityEngine.Networking.Types.NetworkID, sourceId: UnityEngine.Networking.Types.SourceID, nodeId: UnityEngine.Networking.Types.NodeID): void;
    OnConnected(conn: UnityEngine.Networking.NetworkConnection): void;
    OnConnectError(connectionId: number, error: number): void;
    OnData(conn: UnityEngine.Networking.NetworkConnection, receivedSize: number, channelId: number): void;
    OnDataError(conn: UnityEngine.Networking.NetworkConnection, error: number): void;
    OnDisconnected(conn: UnityEngine.Networking.NetworkConnection): void;
    OnDisconnectError(conn: UnityEngine.Networking.NetworkConnection, error: number): void;
    RegisterHandler(msgType: number, handler: ((netMsg: UnityEngine.Networking.NetworkMessage) => void)): void;
    RemoveConnectionAtIndex(connectionId: number): boolean;
    SendBytesTo(connectionId: number, bytes: number[], numBytes: number, channelId: number): void;
    SendWriterTo(connectionId: number, writer: UnityEngine.Networking.NetworkWriter, channelId: number): void;
    SetConnectionAtIndex(conn: UnityEngine.Networking.NetworkConnection): boolean;
    Stop(): void;
    UnregisterHandler(msgType: number): void;
    Update(): void;
    UpdateConnections(): void;
    readonly connections: any;
    readonly handlers: any;
    readonly hostTopology: UnityEngine.Networking.HostTopology;
    listenPort: number;
    readonly messageBuffer: number[];
    readonly messageReader: UnityEngine.Networking.NetworkReader;
    readonly networkConnectionClass: any;
    serverHostId: number;
    useWebSockets: boolean;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkStartPosition extends UnityEngine.MonoBehaviour {
    constructor();
    Awake(): void;
    OnDestroy(): void;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkTransformChild extends UnityEngine.Networking.NetworkBehaviour {
    constructor();
    GetNetworkChannel(): number;
    GetNetworkSendInterval(): number;
    OnDeserialize(reader: UnityEngine.Networking.NetworkReader, initialState: boolean): void;
    OnSerialize(writer: UnityEngine.Networking.NetworkWriter, initialState: boolean): boolean;
    readonly childIndex: number;
    clientMoveCallback3D: ((position: any, velocity: any, rotation: any) => boolean);
    interpolateMovement: number;
    interpolateRotation: number;
    readonly lastSyncTime: number;
    movementThreshold: number;
    rotationSyncCompression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
    sendInterval: number;
    syncRotationAxis: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    target: UnityEngine.Transform;
    readonly targetSyncPosition: UnityEngine.Vector3;
    readonly targetSyncRotation3D: UnityEngine.Quaternion;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkTransform extends UnityEngine.Networking.NetworkBehaviour {
    constructor();
    GetNetworkChannel(): number;
    GetNetworkSendInterval(): number;
    static HandleTransform(netMsg: UnityEngine.Networking.NetworkMessage): void;
    OnDeserialize(reader: UnityEngine.Networking.NetworkReader, initialState: boolean): void;
    OnSerialize(writer: UnityEngine.Networking.NetworkWriter, initialState: boolean): boolean;
    OnStartAuthority(): void;
    OnStartServer(): void;
    static SerializeRotation2D(writer: UnityEngine.Networking.NetworkWriter, rot: number, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
    static SerializeRotation3D(writer: UnityEngine.Networking.NetworkWriter, rot: UnityEngine.Quaternion, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
    static SerializeSpin2D(writer: UnityEngine.Networking.NetworkWriter, angularVelocity: number, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
    static SerializeSpin3D(writer: UnityEngine.Networking.NetworkWriter, angularVelocity: UnityEngine.Vector3, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
    static SerializeVelocity2D(writer: UnityEngine.Networking.NetworkWriter, velocity: UnityEngine.Vector2, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
    static SerializeVelocity3D(writer: UnityEngine.Networking.NetworkWriter, velocity: UnityEngine.Vector3, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
    static UnserializeRotation2D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): number;
    static UnserializeRotation3D(reader: UnityEngine.Networking.NetworkReader, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Quaternion;
    static UnserializeSpin2D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): number;
    static UnserializeSpin3D(reader: UnityEngine.Networking.NetworkReader, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Vector3;
    static UnserializeVelocity2D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Vector3;
    static UnserializeVelocity3D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Vector3;
    readonly characterContoller: UnityEngine.CharacterController;
    clientMoveCallback2D: ((position: any, velocity: any, rotation: any) => boolean);
    clientMoveCallback3D: ((position: any, velocity: any, rotation: any) => boolean);
    grounded: boolean;
    interpolateMovement: number;
    interpolateRotation: number;
    readonly lastSyncTime: number;
    movementTheshold: number;
    readonly rigidbody2D: UnityEngine.Rigidbody2D;
    readonly rigidbody3D: UnityEngine.Rigidbody;
    rotationSyncCompression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
    sendInterval: number;
    snapThreshold: number;
    syncRotationAxis: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    syncSpin: boolean;
    readonly targetSyncPosition: UnityEngine.Vector3;
    readonly targetSyncRotation2D: number;
    readonly targetSyncRotation3D: UnityEngine.Quaternion;
    readonly targetSyncVelocity: UnityEngine.Vector3;
    transformSyncMode: UnityEngine.Networking.NetworkTransform.TransformSyncMode;
    velocityThreshold: number;
  }
}
declare namespace UnityEngine.Networking.NetworkTransform {
  class TransformSyncMode extends System.Enum {
    protected constructor();
    static SyncCharacterController: UnityEngine.Networking.NetworkTransform.TransformSyncMode;
    static SyncNone: UnityEngine.Networking.NetworkTransform.TransformSyncMode;
    static SyncRigidbody2D: UnityEngine.Networking.NetworkTransform.TransformSyncMode;
    static SyncRigidbody3D: UnityEngine.Networking.NetworkTransform.TransformSyncMode;
    static SyncTransform: UnityEngine.Networking.NetworkTransform.TransformSyncMode;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.NetworkTransform {
  class AxisSyncMode extends System.Enum {
    protected constructor();
    static AxisX: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static AxisXY: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static AxisXYZ: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static AxisXZ: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static AxisY: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static AxisYZ: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static AxisZ: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    static None: UnityEngine.Networking.NetworkTransform.AxisSyncMode;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.NetworkTransform {
  class CompressionSyncMode extends System.Enum {
    protected constructor();
    static High: UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
    static Low: UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
    static None: UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkTransformVisualizer extends UnityEngine.Networking.NetworkBehaviour {
    constructor();
    OnStartClient(): void;
    OnStartLocalPlayer(): void;
    visualizerPrefab: UnityEngine.GameObject;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkWriter extends System.Object {
    constructor();
    constructor(buffer: number[]);
    AsArray(): number[];
    FinishMessage(): void;
    SeekZero(): void;
    StartMessage(msgType: number): void;
    ToArray(): number[];
    Write(value: boolean): void;
    Write(value: number): void;
    Write(buffer: number[], count: number): void;
    Write(buffer: number[], offset: number, count: number): void;
    Write(value: any): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: string): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: number): void;
    Write(value: UnityEngine.Color): void;
    Write(value: UnityEngine.Color32): void;
    Write(value: UnityEngine.GameObject): void;
    Write(value: UnityEngine.Matrix4x4): void;
    Write(msg: UnityEngine.Networking.MessageBase): void;
    Write(value: UnityEngine.Networking.NetworkHash128): void;
    Write(value: UnityEngine.Networking.NetworkIdentity): void;
    Write(value: UnityEngine.Networking.NetworkInstanceId): void;
    Write(value: UnityEngine.Networking.NetworkSceneId): void;
    Write(value: UnityEngine.Plane): void;
    Write(value: UnityEngine.Quaternion): void;
    Write(value: UnityEngine.Ray): void;
    Write(value: UnityEngine.Rect): void;
    Write(value: UnityEngine.Transform): void;
    Write(value: UnityEngine.Vector2): void;
    Write(value: UnityEngine.Vector3): void;
    Write(value: UnityEngine.Vector4): void;
    WriteBytesAndSize(buffer: number[], count: number): void;
    WriteBytesFull(buffer: number[]): void;
    WritePackedUInt32(value: number): void;
    WritePackedUInt64(value: number): void;
    readonly Position: number;
  }
}
declare namespace UnityEngine.Networking {
  class PlayerController extends System.Object {
    constructor();
    ToString(): string;
    readonly IsValid: boolean;
    gameObject: UnityEngine.GameObject;
    static MaxPlayersPerClient: number;
    playerControllerId: number;
    unetView: UnityEngine.Networking.NetworkIdentity;
  }
}
declare namespace UnityEngine.Networking {
  class SyncListString {
    constructor();
    Add(item: string): void;
    Clear(): void;
    Contains(item: string): boolean;
    CopyTo(array: string[], index: number): void;
    Dirty(index: number): void;
    Equals(obj: any): boolean;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetType(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: string): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: string): void;
    static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListString;
    static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListString): void;
    Remove(item: string): boolean;
    RemoveAt(index: number): void;
    ToString(): string;
    static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListString): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): string;
    set_Item(i: number, value: string): void;
  }
}
declare namespace UnityEngine.Networking.SyncList`1[[System.String, mscorlib, Version=4.0.0 {
  class SyncList`1 extends System.Object {
    protected constructor();
    Add(item: string): void;
    Clear(): void;
    Contains(item: string): boolean;
    CopyTo(array: string[], index: number): void;
    Dirty(index: number): void;
    GetEnumerator(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: string): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: string): void;
    Remove(item: string): boolean;
    RemoveAt(index: number): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): string;
    set_Item(i: number, value: string): void;
  }
}
declare namespace UnityEngine.Networking {
  class SyncListFloat {
    constructor();
    Add(item: number): void;
    Clear(): void;
    Contains(item: number): boolean;
    CopyTo(array: number[], index: number): void;
    Dirty(index: number): void;
    Equals(obj: any): boolean;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetType(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: number): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: number): void;
    static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListFloat;
    static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListFloat): void;
    Remove(item: number): boolean;
    RemoveAt(index: number): void;
    ToString(): string;
    static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListFloat): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): number;
    set_Item(i: number, value: number): void;
  }
}
declare namespace UnityEngine.Networking.SyncList`1[[System.Single, mscorlib, Version=4.0.0 {
  class SyncList`1 extends System.Object {
    protected constructor();
    Add(item: number): void;
    Clear(): void;
    Contains(item: number): boolean;
    CopyTo(array: number[], index: number): void;
    Dirty(index: number): void;
    GetEnumerator(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: number): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: number): void;
    Remove(item: number): boolean;
    RemoveAt(index: number): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): number;
    set_Item(i: number, value: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class SyncListInt {
    constructor();
    Add(item: number): void;
    Clear(): void;
    Contains(item: number): boolean;
    CopyTo(array: number[], index: number): void;
    Dirty(index: number): void;
    Equals(obj: any): boolean;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetType(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: number): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: number): void;
    static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListInt;
    static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListInt): void;
    Remove(item: number): boolean;
    RemoveAt(index: number): void;
    ToString(): string;
    static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListInt): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): number;
    set_Item(i: number, value: number): void;
  }
}
declare namespace UnityEngine.Networking.SyncList`1[[System.Int32, mscorlib, Version=4.0.0 {
  class SyncList`1 extends System.Object {
    protected constructor();
    Add(item: number): void;
    Clear(): void;
    Contains(item: number): boolean;
    CopyTo(array: number[], index: number): void;
    Dirty(index: number): void;
    GetEnumerator(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: number): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: number): void;
    Remove(item: number): boolean;
    RemoveAt(index: number): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): number;
    set_Item(i: number, value: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class SyncListUInt {
    constructor();
    Add(item: number): void;
    Clear(): void;
    Contains(item: number): boolean;
    CopyTo(array: number[], index: number): void;
    Dirty(index: number): void;
    Equals(obj: any): boolean;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetType(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: number): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: number): void;
    static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListUInt;
    static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListUInt): void;
    Remove(item: number): boolean;
    RemoveAt(index: number): void;
    ToString(): string;
    static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListUInt): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): number;
    set_Item(i: number, value: number): void;
  }
}
declare namespace UnityEngine.Networking.SyncList`1[[System.UInt32, mscorlib, Version=4.0.0 {
  class SyncList`1 extends System.Object {
    protected constructor();
    Add(item: number): void;
    Clear(): void;
    Contains(item: number): boolean;
    CopyTo(array: number[], index: number): void;
    Dirty(index: number): void;
    GetEnumerator(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: number): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: number): void;
    Remove(item: number): boolean;
    RemoveAt(index: number): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): number;
    set_Item(i: number, value: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class SyncListBool {
    constructor();
    Add(item: boolean): void;
    Clear(): void;
    Contains(item: boolean): boolean;
    CopyTo(array: boolean[], index: number): void;
    Dirty(index: number): void;
    Equals(obj: any): boolean;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetType(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: boolean): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: boolean): void;
    static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListBool;
    static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListBool): void;
    Remove(item: boolean): boolean;
    RemoveAt(index: number): void;
    ToString(): string;
    static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListBool): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): boolean;
    set_Item(i: number, value: boolean): void;
  }
}
declare namespace UnityEngine.Networking.SyncList`1[[System.Boolean, mscorlib, Version=4.0.0 {
  class SyncList`1 extends System.Object {
    protected constructor();
    Add(item: boolean): void;
    Clear(): void;
    Contains(item: boolean): boolean;
    CopyTo(array: boolean[], index: number): void;
    Dirty(index: number): void;
    GetEnumerator(): any;
    HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
    IndexOf(item: boolean): number;
    InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
    Insert(index: number, item: boolean): void;
    Remove(item: boolean): boolean;
    RemoveAt(index: number): void;
    Callback: ((op: any, itemIndex: number) => void);
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(i: number): boolean;
    set_Item(i: number, value: boolean): void;
  }
}
declare namespace UnityEngine.Networking {
  class MsgType extends System.Object {
    constructor();
    static MsgTypeToString(value: number): string;
    static AddPlayer: number;
    static Animation: number;
    static AnimationParameters: number;
    static AnimationTrigger: number;
    static Command: number;
    static Connect: number;
    static CRC: number;
    static Disconnect: number;
    static Error: number;
    static Fragment: number;
    static Highest: number;
    static InternalHighest: number;
    static LobbyAddPlayerFailed: number;
    static LobbyReadyToBegin: number;
    static LobbyReturnToLobby: number;
    static LobbySceneLoaded: number;
    static LocalChildTransform: number;
    static LocalClientAuthority: number;
    static LocalPlayerTransform: number;
    static NetworkInfo: number;
    static NotReady: number;
    static ObjectDestroy: number;
    static ObjectHide: number;
    static ObjectSpawn: number;
    static ObjectSpawnScene: number;
    static Owner: number;
    static PeerClientAuthority: number;
    static Ready: number;
    static ReconnectPlayer: number;
    static RemovePlayer: number;
    static Rpc: number;
    static Scene: number;
    static SpawnFinished: number;
    static SyncEvent: number;
    static SyncList: number;
    static UpdateVars: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkMessage extends System.Object {
    constructor();
    static Dump(payload: number[], sz: number): string;
    channelId: number;
    conn: UnityEngine.Networking.NetworkConnection;
    static MaxMessageSize: number;
    msgType: number;
    reader: UnityEngine.Networking.NetworkReader;
  }
}
declare namespace UnityEngine.Networking {
  class Version extends System.Enum {
    protected constructor();
    static Current: UnityEngine.Networking.Version;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class Channels extends System.Object {
    constructor();
    static DefaultReliable: number;
    static DefaultUnreliable: number;
  }
}
declare namespace UnityEngine.Networking {
  class ChannelOption extends System.Enum {
    protected constructor();
    static AllowFragmentation: UnityEngine.Networking.ChannelOption;
    static MaxPacketSize: UnityEngine.Networking.ChannelOption;
    static MaxPendingBuffers: UnityEngine.Networking.ChannelOption;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Particle extends System.ValueType {
    protected constructor();
    angularVelocity: number;
    color: UnityEngine.Color;
    energy: number;
    position: UnityEngine.Vector3;
    rotation: number;
    size: number;
    startEnergy: number;
    velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class InternalEmitParticleArguments extends System.ValueType {
    protected constructor();
    angularVelocity: number;
    color: UnityEngine.Color;
    energy: number;
    pos: UnityEngine.Vector3;
    rotation: number;
    size: number;
    velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class ParticleEmitter extends UnityEngine.Component {
    protected constructor();
    ClearParticles(): void;
    Emit(): void;
    Emit(count: number): void;
    Emit(pos: UnityEngine.Vector3, velocity: UnityEngine.Vector3, size: number, energy: number, color: UnityEngine.Color): void;
    Emit(pos: UnityEngine.Vector3, velocity: UnityEngine.Vector3, size: number, energy: number, color: UnityEngine.Color, rotation: number, angularVelocity: number): void;
    Simulate(deltaTime: number): void;
    angularVelocity: number;
    emit: boolean;
    emitterVelocityScale: number;
    enabled: boolean;
    localVelocity: UnityEngine.Vector3;
    maxEmission: number;
    maxEnergy: number;
    maxSize: number;
    minEmission: number;
    minEnergy: number;
    minSize: number;
    readonly particleCount: number;
    particles: UnityEngine.Particle[];
    rndAngularVelocity: number;
    rndRotation: boolean;
    rndVelocity: UnityEngine.Vector3;
    useWorldSpace: boolean;
    worldVelocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class EllipsoidParticleEmitter extends UnityEngine.ParticleEmitter {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class MeshParticleEmitter extends UnityEngine.ParticleEmitter {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class ParticleAnimator extends UnityEngine.Component {
    constructor();
    autodestruct: boolean;
    colorAnimation: UnityEngine.Color[];
    damping: number;
    doesAnimateColor: boolean;
    force: UnityEngine.Vector3;
    localRotationAxis: UnityEngine.Vector3;
    rndForce: UnityEngine.Vector3;
    sizeGrow: number;
    worldRotationAxis: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class ParticleRenderMode extends System.Enum {
    protected constructor();
    static Billboard: UnityEngine.ParticleRenderMode;
    static HorizontalBillboard: UnityEngine.ParticleRenderMode;
    static SortedBillboard: UnityEngine.ParticleRenderMode;
    static Stretch: UnityEngine.ParticleRenderMode;
    value__: number;
    static VerticalBillboard: UnityEngine.ParticleRenderMode;
  }
}
declare namespace UnityEngine {
  class ParticleRenderer extends UnityEngine.Renderer {
    constructor();
    animatedTextureCount: number;
    cameraVelocityScale: number;
    heightCurve: UnityEngine.AnimationCurve;
    lengthScale: number;
    maxParticleSize: number;
    maxPartileSize: number;
    particleRenderMode: UnityEngine.ParticleRenderMode;
    rotationCurve: UnityEngine.AnimationCurve;
    uvAnimationCycles: number;
    uvAnimationXTile: number;
    uvAnimationYTile: number;
    uvTiles: UnityEngine.Rect[];
    velocityScale: number;
    widthCurve: UnityEngine.AnimationCurve;
  }
}
declare namespace UnityEngine {
  class ParticleSystemRenderMode extends System.Enum {
    protected constructor();
    static Billboard: UnityEngine.ParticleSystemRenderMode;
    static HorizontalBillboard: UnityEngine.ParticleSystemRenderMode;
    static Mesh: UnityEngine.ParticleSystemRenderMode;
    static None: UnityEngine.ParticleSystemRenderMode;
    static Stretch: UnityEngine.ParticleSystemRenderMode;
    value__: number;
    static VerticalBillboard: UnityEngine.ParticleSystemRenderMode;
  }
}
declare namespace UnityEngine {
  class ParticleSystemSortMode extends System.Enum {
    protected constructor();
    static Distance: UnityEngine.ParticleSystemSortMode;
    static None: UnityEngine.ParticleSystemSortMode;
    static OldestInFront: UnityEngine.ParticleSystemSortMode;
    value__: number;
    static YoungestInFront: UnityEngine.ParticleSystemSortMode;
  }
}
declare namespace UnityEngine {
  class ParticleSystemCollisionQuality extends System.Enum {
    protected constructor();
    static High: UnityEngine.ParticleSystemCollisionQuality;
    static Low: UnityEngine.ParticleSystemCollisionQuality;
    static Medium: UnityEngine.ParticleSystemCollisionQuality;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemRenderSpace extends System.Enum {
    protected constructor();
    static Facing: UnityEngine.ParticleSystemRenderSpace;
    static Local: UnityEngine.ParticleSystemRenderSpace;
    value__: number;
    static Velocity: UnityEngine.ParticleSystemRenderSpace;
    static View: UnityEngine.ParticleSystemRenderSpace;
    static World: UnityEngine.ParticleSystemRenderSpace;
  }
}
declare namespace UnityEngine {
  class ParticleSystemEmissionType extends System.Enum {
    protected constructor();
    static Distance: UnityEngine.ParticleSystemEmissionType;
    static Time: UnityEngine.ParticleSystemEmissionType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemCurveMode extends System.Enum {
    protected constructor();
    static Constant: UnityEngine.ParticleSystemCurveMode;
    static Curve: UnityEngine.ParticleSystemCurveMode;
    static TwoConstants: UnityEngine.ParticleSystemCurveMode;
    static TwoCurves: UnityEngine.ParticleSystemCurveMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemGradientMode extends System.Enum {
    protected constructor();
    static Color: UnityEngine.ParticleSystemGradientMode;
    static Gradient: UnityEngine.ParticleSystemGradientMode;
    static RandomColor: UnityEngine.ParticleSystemGradientMode;
    static TwoColors: UnityEngine.ParticleSystemGradientMode;
    static TwoGradients: UnityEngine.ParticleSystemGradientMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemShapeType extends System.Enum {
    protected constructor();
    static Box: UnityEngine.ParticleSystemShapeType;
    static BoxEdge: UnityEngine.ParticleSystemShapeType;
    static BoxShell: UnityEngine.ParticleSystemShapeType;
    static Circle: UnityEngine.ParticleSystemShapeType;
    static CircleEdge: UnityEngine.ParticleSystemShapeType;
    static Cone: UnityEngine.ParticleSystemShapeType;
    static ConeShell: UnityEngine.ParticleSystemShapeType;
    static ConeVolume: UnityEngine.ParticleSystemShapeType;
    static ConeVolumeShell: UnityEngine.ParticleSystemShapeType;
    static Donut: UnityEngine.ParticleSystemShapeType;
    static Hemisphere: UnityEngine.ParticleSystemShapeType;
    static HemisphereShell: UnityEngine.ParticleSystemShapeType;
    static Mesh: UnityEngine.ParticleSystemShapeType;
    static MeshRenderer: UnityEngine.ParticleSystemShapeType;
    static SingleSidedEdge: UnityEngine.ParticleSystemShapeType;
    static SkinnedMeshRenderer: UnityEngine.ParticleSystemShapeType;
    static Sphere: UnityEngine.ParticleSystemShapeType;
    static SphereShell: UnityEngine.ParticleSystemShapeType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemMeshShapeType extends System.Enum {
    protected constructor();
    static Edge: UnityEngine.ParticleSystemMeshShapeType;
    static Triangle: UnityEngine.ParticleSystemMeshShapeType;
    value__: number;
    static Vertex: UnityEngine.ParticleSystemMeshShapeType;
  }
}
declare namespace UnityEngine {
  class ParticleSystemAnimationMode extends System.Enum {
    protected constructor();
    static Grid: UnityEngine.ParticleSystemAnimationMode;
    static Sprites: UnityEngine.ParticleSystemAnimationMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemAnimationType extends System.Enum {
    protected constructor();
    static SingleRow: UnityEngine.ParticleSystemAnimationType;
    value__: number;
    static WholeSheet: UnityEngine.ParticleSystemAnimationType;
  }
}
declare namespace UnityEngine {
  class ParticleSystemCollisionType extends System.Enum {
    protected constructor();
    static Planes: UnityEngine.ParticleSystemCollisionType;
    value__: number;
    static World: UnityEngine.ParticleSystemCollisionType;
  }
}
declare namespace UnityEngine {
  class ParticleSystemCollisionMode extends System.Enum {
    protected constructor();
    static Collision2D: UnityEngine.ParticleSystemCollisionMode;
    static Collision3D: UnityEngine.ParticleSystemCollisionMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemOverlapAction extends System.Enum {
    protected constructor();
    static Callback: UnityEngine.ParticleSystemOverlapAction;
    static Ignore: UnityEngine.ParticleSystemOverlapAction;
    static Kill: UnityEngine.ParticleSystemOverlapAction;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemSimulationSpace extends System.Enum {
    protected constructor();
    static Custom: UnityEngine.ParticleSystemSimulationSpace;
    static Local: UnityEngine.ParticleSystemSimulationSpace;
    value__: number;
    static World: UnityEngine.ParticleSystemSimulationSpace;
  }
}
declare namespace UnityEngine {
  class ParticleSystemStopBehavior extends System.Enum {
    protected constructor();
    static StopEmitting: UnityEngine.ParticleSystemStopBehavior;
    static StopEmittingAndClear: UnityEngine.ParticleSystemStopBehavior;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemScalingMode extends System.Enum {
    protected constructor();
    static Hierarchy: UnityEngine.ParticleSystemScalingMode;
    static Local: UnityEngine.ParticleSystemScalingMode;
    static Shape: UnityEngine.ParticleSystemScalingMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemStopAction extends System.Enum {
    protected constructor();
    static Destroy: UnityEngine.ParticleSystemStopAction;
    static Disable: UnityEngine.ParticleSystemStopAction;
    static None: UnityEngine.ParticleSystemStopAction;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemEmitterVelocityMode extends System.Enum {
    protected constructor();
    static Rigidbody: UnityEngine.ParticleSystemEmitterVelocityMode;
    static Transform: UnityEngine.ParticleSystemEmitterVelocityMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemInheritVelocityMode extends System.Enum {
    protected constructor();
    static Current: UnityEngine.ParticleSystemInheritVelocityMode;
    static Initial: UnityEngine.ParticleSystemInheritVelocityMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemTriggerEventType extends System.Enum {
    protected constructor();
    static Enter: UnityEngine.ParticleSystemTriggerEventType;
    static Exit: UnityEngine.ParticleSystemTriggerEventType;
    static Inside: UnityEngine.ParticleSystemTriggerEventType;
    static Outside: UnityEngine.ParticleSystemTriggerEventType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemVertexStreams extends System.Enum {
    protected constructor();
    static All: UnityEngine.ParticleSystemVertexStreams;
    static CenterAndVertexID: UnityEngine.ParticleSystemVertexStreams;
    static Color: UnityEngine.ParticleSystemVertexStreams;
    static Custom1: UnityEngine.ParticleSystemVertexStreams;
    static Custom2: UnityEngine.ParticleSystemVertexStreams;
    static Lifetime: UnityEngine.ParticleSystemVertexStreams;
    static None: UnityEngine.ParticleSystemVertexStreams;
    static Normal: UnityEngine.ParticleSystemVertexStreams;
    static Position: UnityEngine.ParticleSystemVertexStreams;
    static Random: UnityEngine.ParticleSystemVertexStreams;
    static Rotation: UnityEngine.ParticleSystemVertexStreams;
    static Size: UnityEngine.ParticleSystemVertexStreams;
    static Tangent: UnityEngine.ParticleSystemVertexStreams;
    static UV: UnityEngine.ParticleSystemVertexStreams;
    static UV2BlendAndFrame: UnityEngine.ParticleSystemVertexStreams;
    value__: number;
    static Velocity: UnityEngine.ParticleSystemVertexStreams;
  }
}
declare namespace UnityEngine {
  class ParticleSystemVertexStream extends System.Enum {
    protected constructor();
    static AgePercent: UnityEngine.ParticleSystemVertexStream;
    static AnimBlend: UnityEngine.ParticleSystemVertexStream;
    static AnimFrame: UnityEngine.ParticleSystemVertexStream;
    static Center: UnityEngine.ParticleSystemVertexStream;
    static Color: UnityEngine.ParticleSystemVertexStream;
    static Custom1X: UnityEngine.ParticleSystemVertexStream;
    static Custom1XY: UnityEngine.ParticleSystemVertexStream;
    static Custom1XYZ: UnityEngine.ParticleSystemVertexStream;
    static Custom1XYZW: UnityEngine.ParticleSystemVertexStream;
    static Custom2X: UnityEngine.ParticleSystemVertexStream;
    static Custom2XY: UnityEngine.ParticleSystemVertexStream;
    static Custom2XYZ: UnityEngine.ParticleSystemVertexStream;
    static Custom2XYZW: UnityEngine.ParticleSystemVertexStream;
    static InvStartLifetime: UnityEngine.ParticleSystemVertexStream;
    static NoiseImpulseX: UnityEngine.ParticleSystemVertexStream;
    static NoiseImpulseXY: UnityEngine.ParticleSystemVertexStream;
    static NoiseImpulseXYZ: UnityEngine.ParticleSystemVertexStream;
    static NoiseSumX: UnityEngine.ParticleSystemVertexStream;
    static NoiseSumXY: UnityEngine.ParticleSystemVertexStream;
    static NoiseSumXYZ: UnityEngine.ParticleSystemVertexStream;
    static Normal: UnityEngine.ParticleSystemVertexStream;
    static Position: UnityEngine.ParticleSystemVertexStream;
    static Rotation: UnityEngine.ParticleSystemVertexStream;
    static Rotation3D: UnityEngine.ParticleSystemVertexStream;
    static RotationSpeed: UnityEngine.ParticleSystemVertexStream;
    static RotationSpeed3D: UnityEngine.ParticleSystemVertexStream;
    static SizeX: UnityEngine.ParticleSystemVertexStream;
    static SizeXY: UnityEngine.ParticleSystemVertexStream;
    static SizeXYZ: UnityEngine.ParticleSystemVertexStream;
    static Speed: UnityEngine.ParticleSystemVertexStream;
    static StableRandomX: UnityEngine.ParticleSystemVertexStream;
    static StableRandomXY: UnityEngine.ParticleSystemVertexStream;
    static StableRandomXYZ: UnityEngine.ParticleSystemVertexStream;
    static StableRandomXYZW: UnityEngine.ParticleSystemVertexStream;
    static Tangent: UnityEngine.ParticleSystemVertexStream;
    static UV: UnityEngine.ParticleSystemVertexStream;
    static UV2: UnityEngine.ParticleSystemVertexStream;
    static UV3: UnityEngine.ParticleSystemVertexStream;
    static UV4: UnityEngine.ParticleSystemVertexStream;
    value__: number;
    static VaryingRandomX: UnityEngine.ParticleSystemVertexStream;
    static VaryingRandomXY: UnityEngine.ParticleSystemVertexStream;
    static VaryingRandomXYZ: UnityEngine.ParticleSystemVertexStream;
    static VaryingRandomXYZW: UnityEngine.ParticleSystemVertexStream;
    static Velocity: UnityEngine.ParticleSystemVertexStream;
    static VertexID: UnityEngine.ParticleSystemVertexStream;
  }
}
declare namespace UnityEngine {
  class ParticleSystemCustomData extends System.Enum {
    protected constructor();
    static Custom1: UnityEngine.ParticleSystemCustomData;
    static Custom2: UnityEngine.ParticleSystemCustomData;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemCustomDataMode extends System.Enum {
    protected constructor();
    static Color: UnityEngine.ParticleSystemCustomDataMode;
    static Disabled: UnityEngine.ParticleSystemCustomDataMode;
    value__: number;
    static Vector: UnityEngine.ParticleSystemCustomDataMode;
  }
}
declare namespace UnityEngine {
  class ParticleSystemNoiseQuality extends System.Enum {
    protected constructor();
    static High: UnityEngine.ParticleSystemNoiseQuality;
    static Low: UnityEngine.ParticleSystemNoiseQuality;
    static Medium: UnityEngine.ParticleSystemNoiseQuality;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemSubEmitterType extends System.Enum {
    protected constructor();
    static Birth: UnityEngine.ParticleSystemSubEmitterType;
    static Collision: UnityEngine.ParticleSystemSubEmitterType;
    static Death: UnityEngine.ParticleSystemSubEmitterType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemSubEmitterProperties extends System.Enum {
    protected constructor();
    static InheritColor: UnityEngine.ParticleSystemSubEmitterProperties;
    static InheritEverything: UnityEngine.ParticleSystemSubEmitterProperties;
    static InheritLifetime: UnityEngine.ParticleSystemSubEmitterProperties;
    static InheritNothing: UnityEngine.ParticleSystemSubEmitterProperties;
    static InheritRotation: UnityEngine.ParticleSystemSubEmitterProperties;
    static InheritSize: UnityEngine.ParticleSystemSubEmitterProperties;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemTrailTextureMode extends System.Enum {
    protected constructor();
    static DistributePerSegment: UnityEngine.ParticleSystemTrailTextureMode;
    static RepeatPerSegment: UnityEngine.ParticleSystemTrailTextureMode;
    static Stretch: UnityEngine.ParticleSystemTrailTextureMode;
    static Tile: UnityEngine.ParticleSystemTrailTextureMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystemShapeMultiModeValue extends System.Enum {
    protected constructor();
    static BurstSpread: UnityEngine.ParticleSystemShapeMultiModeValue;
    static Loop: UnityEngine.ParticleSystemShapeMultiModeValue;
    static PingPong: UnityEngine.ParticleSystemShapeMultiModeValue;
    static Random: UnityEngine.ParticleSystemShapeMultiModeValue;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ParticleSystem extends UnityEngine.Component {
    constructor();
    Clear(): void;
    Clear(withChildren: boolean): void;
    Emit(emitParams: UnityEngine.ParticleSystem.EmitParams, count: number): void;
    Emit(count: number): void;
    Emit(particle: UnityEngine.ParticleSystem.Particle): void;
    Emit(position: UnityEngine.Vector3, velocity: UnityEngine.Vector3, size: number, lifetime: number, color: UnityEngine.Color32): void;
    GetCustomParticleData(customData: UnityEngine.Vector4[], streamIndex: UnityEngine.ParticleSystemCustomData): number;
    GetParticles(particles: UnityEngine.ParticleSystem.Particle[]): number;
    IsAlive(): boolean;
    IsAlive(withChildren: boolean): boolean;
    Pause(): void;
    Pause(withChildren: boolean): void;
    Play(): void;
    Play(withChildren: boolean): void;
    SetCustomParticleData(customData: UnityEngine.Vector4[], streamIndex: UnityEngine.ParticleSystemCustomData): void;
    SetParticles(particles: UnityEngine.ParticleSystem.Particle[], size: number): void;
    Simulate(t: number): void;
    Simulate(t: number, withChildren: boolean): void;
    Simulate(t: number, withChildren: boolean, restart: boolean): void;
    Simulate(t: number, withChildren: boolean, restart: boolean, fixedTimeStep: boolean): void;
    Stop(): void;
    Stop(withChildren: boolean): void;
    Stop(withChildren: boolean, stopBehavior: UnityEngine.ParticleSystemStopBehavior): void;
    readonly collision: UnityEngine.ParticleSystem.CollisionModule;
    readonly colorBySpeed: UnityEngine.ParticleSystem.ColorBySpeedModule;
    readonly colorOverLifetime: UnityEngine.ParticleSystem.ColorOverLifetimeModule;
    readonly customData: UnityEngine.ParticleSystem.CustomDataModule;
    readonly duration: number;
    readonly emission: UnityEngine.ParticleSystem.EmissionModule;
    emissionRate: number;
    enableEmission: boolean;
    readonly externalForces: UnityEngine.ParticleSystem.ExternalForcesModule;
    readonly forceOverLifetime: UnityEngine.ParticleSystem.ForceOverLifetimeModule;
    gravityModifier: number;
    readonly inheritVelocity: UnityEngine.ParticleSystem.InheritVelocityModule;
    readonly isEmitting: boolean;
    readonly isPaused: boolean;
    readonly isPlaying: boolean;
    readonly isStopped: boolean;
    readonly lights: UnityEngine.ParticleSystem.LightsModule;
    readonly limitVelocityOverLifetime: UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule;
    loop: boolean;
    readonly main: UnityEngine.ParticleSystem.MainModule;
    maxParticles: number;
    readonly noise: UnityEngine.ParticleSystem.NoiseModule;
    readonly particleCount: number;
    playbackSpeed: number;
    playOnAwake: boolean;
    randomSeed: number;
    readonly rotationBySpeed: UnityEngine.ParticleSystem.RotationBySpeedModule;
    readonly rotationOverLifetime: UnityEngine.ParticleSystem.RotationOverLifetimeModule;
    readonly safeCollisionEventSize: number;
    scalingMode: UnityEngine.ParticleSystemScalingMode;
    readonly shape: UnityEngine.ParticleSystem.ShapeModule;
    simulationSpace: UnityEngine.ParticleSystemSimulationSpace;
    readonly sizeBySpeed: UnityEngine.ParticleSystem.SizeBySpeedModule;
    readonly sizeOverLifetime: UnityEngine.ParticleSystem.SizeOverLifetimeModule;
    startColor: UnityEngine.Color;
    startDelay: number;
    startLifetime: number;
    startRotation: number;
    startRotation3D: UnityEngine.Vector3;
    startSize: number;
    startSpeed: number;
    readonly subEmitters: UnityEngine.ParticleSystem.SubEmittersModule;
    readonly textureSheetAnimation: UnityEngine.ParticleSystem.TextureSheetAnimationModule;
    time: number;
    readonly trails: UnityEngine.ParticleSystem.TrailModule;
    readonly trigger: UnityEngine.ParticleSystem.TriggerModule;
    useAutoRandomSeed: boolean;
    readonly velocityOverLifetime: UnityEngine.ParticleSystem.VelocityOverLifetimeModule;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class Burst extends System.ValueType {
    protected constructor();
    count: UnityEngine.ParticleSystem.MinMaxCurve;
    cycleCount: number;
    maxCount: number;
    minCount: number;
    repeatInterval: number;
    time: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class MinMaxCurve extends System.ValueType {
    protected constructor();
    Evaluate(time: number): number;
    Evaluate(time: number, lerpFactor: number): number;
    constant: number;
    constantMax: number;
    constantMin: number;
    curve: UnityEngine.AnimationCurve;
    curveMax: UnityEngine.AnimationCurve;
    curveMin: UnityEngine.AnimationCurve;
    curveMultiplier: number;
    curveScalar: number;
    mode: UnityEngine.ParticleSystemCurveMode;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class MinMaxGradient extends System.ValueType {
    protected constructor();
    Evaluate(time: number): UnityEngine.Color;
    Evaluate(time: number, lerpFactor: number): UnityEngine.Color;
    color: UnityEngine.Color;
    colorMax: UnityEngine.Color;
    colorMin: UnityEngine.Color;
    gradient: UnityEngine.Gradient;
    gradientMax: UnityEngine.Gradient;
    gradientMin: UnityEngine.Gradient;
    mode: UnityEngine.ParticleSystemGradientMode;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class MainModule extends System.ValueType {
    protected constructor();
    customSimulationSpace: UnityEngine.Transform;
    duration: number;
    emitterVelocityMode: UnityEngine.ParticleSystemEmitterVelocityMode;
    gravityModifier: UnityEngine.ParticleSystem.MinMaxCurve;
    gravityModifierMultiplier: number;
    loop: boolean;
    maxParticles: number;
    playOnAwake: boolean;
    prewarm: boolean;
    randomizeRotationDirection: number;
    scalingMode: UnityEngine.ParticleSystemScalingMode;
    simulationSpace: UnityEngine.ParticleSystemSimulationSpace;
    simulationSpeed: number;
    startColor: UnityEngine.ParticleSystem.MinMaxGradient;
    startDelay: UnityEngine.ParticleSystem.MinMaxCurve;
    startDelayMultiplier: number;
    startLifetime: UnityEngine.ParticleSystem.MinMaxCurve;
    startLifetimeMultiplier: number;
    startRotation: UnityEngine.ParticleSystem.MinMaxCurve;
    startRotation3D: boolean;
    startRotationMultiplier: number;
    startRotationX: UnityEngine.ParticleSystem.MinMaxCurve;
    startRotationXMultiplier: number;
    startRotationY: UnityEngine.ParticleSystem.MinMaxCurve;
    startRotationYMultiplier: number;
    startRotationZ: UnityEngine.ParticleSystem.MinMaxCurve;
    startRotationZMultiplier: number;
    startSize: UnityEngine.ParticleSystem.MinMaxCurve;
    startSize3D: boolean;
    startSizeMultiplier: number;
    startSizeX: UnityEngine.ParticleSystem.MinMaxCurve;
    startSizeXMultiplier: number;
    startSizeY: UnityEngine.ParticleSystem.MinMaxCurve;
    startSizeYMultiplier: number;
    startSizeZ: UnityEngine.ParticleSystem.MinMaxCurve;
    startSizeZMultiplier: number;
    startSpeed: UnityEngine.ParticleSystem.MinMaxCurve;
    startSpeedMultiplier: number;
    stopAction: UnityEngine.ParticleSystemStopAction;
    useUnscaledTime: boolean;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class EmissionModule extends System.ValueType {
    protected constructor();
    GetBurst(index: number): UnityEngine.ParticleSystem.Burst;
    GetBursts(bursts: UnityEngine.ParticleSystem.Burst[]): number;
    SetBurst(index: number, burst: UnityEngine.ParticleSystem.Burst): void;
    SetBursts(bursts: UnityEngine.ParticleSystem.Burst[]): void;
    SetBursts(bursts: UnityEngine.ParticleSystem.Burst[], size: number): void;
    burstCount: number;
    enabled: boolean;
    rate: UnityEngine.ParticleSystem.MinMaxCurve;
    rateMultiplier: number;
    rateOverDistance: UnityEngine.ParticleSystem.MinMaxCurve;
    rateOverDistanceMultiplier: number;
    rateOverTime: UnityEngine.ParticleSystem.MinMaxCurve;
    rateOverTimeMultiplier: number;
    type: UnityEngine.ParticleSystemEmissionType;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class ShapeModule extends System.ValueType {
    protected constructor();
    alignToDirection: boolean;
    angle: number;
    arc: number;
    arcMode: UnityEngine.ParticleSystemShapeMultiModeValue;
    arcSpeed: UnityEngine.ParticleSystem.MinMaxCurve;
    arcSpeedMultiplier: number;
    arcSpread: number;
    box: UnityEngine.Vector3;
    boxThickness: UnityEngine.Vector3;
    donutRadius: number;
    enabled: boolean;
    length: number;
    mesh: UnityEngine.Mesh;
    meshMaterialIndex: number;
    meshRenderer: UnityEngine.MeshRenderer;
    meshScale: number;
    meshShapeType: UnityEngine.ParticleSystemMeshShapeType;
    normalOffset: number;
    position: UnityEngine.Vector3;
    radius: number;
    radiusMode: UnityEngine.ParticleSystemShapeMultiModeValue;
    radiusSpeed: UnityEngine.ParticleSystem.MinMaxCurve;
    radiusSpeedMultiplier: number;
    radiusSpread: number;
    radiusThickness: number;
    randomDirection: boolean;
    randomDirectionAmount: number;
    randomPositionAmount: number;
    rotation: UnityEngine.Vector3;
    scale: UnityEngine.Vector3;
    shapeType: UnityEngine.ParticleSystemShapeType;
    skinnedMeshRenderer: UnityEngine.SkinnedMeshRenderer;
    sphericalDirectionAmount: number;
    useMeshColors: boolean;
    useMeshMaterialIndex: boolean;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class VelocityOverLifetimeModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    space: UnityEngine.ParticleSystemSimulationSpace;
    x: UnityEngine.ParticleSystem.MinMaxCurve;
    xMultiplier: number;
    y: UnityEngine.ParticleSystem.MinMaxCurve;
    yMultiplier: number;
    z: UnityEngine.ParticleSystem.MinMaxCurve;
    zMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class LimitVelocityOverLifetimeModule extends System.ValueType {
    protected constructor();
    dampen: number;
    drag: UnityEngine.ParticleSystem.MinMaxCurve;
    dragMultiplier: number;
    enabled: boolean;
    limit: UnityEngine.ParticleSystem.MinMaxCurve;
    limitMultiplier: number;
    limitX: UnityEngine.ParticleSystem.MinMaxCurve;
    limitXMultiplier: number;
    limitY: UnityEngine.ParticleSystem.MinMaxCurve;
    limitYMultiplier: number;
    limitZ: UnityEngine.ParticleSystem.MinMaxCurve;
    limitZMultiplier: number;
    multiplyDragByParticleSize: boolean;
    multiplyDragByParticleVelocity: boolean;
    separateAxes: boolean;
    space: UnityEngine.ParticleSystemSimulationSpace;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class InheritVelocityModule extends System.ValueType {
    protected constructor();
    curve: UnityEngine.ParticleSystem.MinMaxCurve;
    curveMultiplier: number;
    enabled: boolean;
    mode: UnityEngine.ParticleSystemInheritVelocityMode;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class ForceOverLifetimeModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    randomized: boolean;
    space: UnityEngine.ParticleSystemSimulationSpace;
    x: UnityEngine.ParticleSystem.MinMaxCurve;
    xMultiplier: number;
    y: UnityEngine.ParticleSystem.MinMaxCurve;
    yMultiplier: number;
    z: UnityEngine.ParticleSystem.MinMaxCurve;
    zMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class ColorOverLifetimeModule extends System.ValueType {
    protected constructor();
    color: UnityEngine.ParticleSystem.MinMaxGradient;
    enabled: boolean;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class ColorBySpeedModule extends System.ValueType {
    protected constructor();
    color: UnityEngine.ParticleSystem.MinMaxGradient;
    enabled: boolean;
    range: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class SizeOverLifetimeModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    separateAxes: boolean;
    size: UnityEngine.ParticleSystem.MinMaxCurve;
    sizeMultiplier: number;
    x: UnityEngine.ParticleSystem.MinMaxCurve;
    xMultiplier: number;
    y: UnityEngine.ParticleSystem.MinMaxCurve;
    yMultiplier: number;
    z: UnityEngine.ParticleSystem.MinMaxCurve;
    zMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class SizeBySpeedModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    range: UnityEngine.Vector2;
    separateAxes: boolean;
    size: UnityEngine.ParticleSystem.MinMaxCurve;
    sizeMultiplier: number;
    x: UnityEngine.ParticleSystem.MinMaxCurve;
    xMultiplier: number;
    y: UnityEngine.ParticleSystem.MinMaxCurve;
    yMultiplier: number;
    z: UnityEngine.ParticleSystem.MinMaxCurve;
    zMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class RotationOverLifetimeModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    separateAxes: boolean;
    x: UnityEngine.ParticleSystem.MinMaxCurve;
    xMultiplier: number;
    y: UnityEngine.ParticleSystem.MinMaxCurve;
    yMultiplier: number;
    z: UnityEngine.ParticleSystem.MinMaxCurve;
    zMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class RotationBySpeedModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    range: UnityEngine.Vector2;
    separateAxes: boolean;
    x: UnityEngine.ParticleSystem.MinMaxCurve;
    xMultiplier: number;
    y: UnityEngine.ParticleSystem.MinMaxCurve;
    yMultiplier: number;
    z: UnityEngine.ParticleSystem.MinMaxCurve;
    zMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class ExternalForcesModule extends System.ValueType {
    protected constructor();
    enabled: boolean;
    multiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class NoiseModule extends System.ValueType {
    protected constructor();
    damping: boolean;
    enabled: boolean;
    frequency: number;
    octaveCount: number;
    octaveMultiplier: number;
    octaveScale: number;
    positionAmount: UnityEngine.ParticleSystem.MinMaxCurve;
    quality: UnityEngine.ParticleSystemNoiseQuality;
    remap: UnityEngine.ParticleSystem.MinMaxCurve;
    remapEnabled: boolean;
    remapMultiplier: number;
    remapX: UnityEngine.ParticleSystem.MinMaxCurve;
    remapXMultiplier: number;
    remapY: UnityEngine.ParticleSystem.MinMaxCurve;
    remapYMultiplier: number;
    remapZ: UnityEngine.ParticleSystem.MinMaxCurve;
    remapZMultiplier: number;
    rotationAmount: UnityEngine.ParticleSystem.MinMaxCurve;
    scrollSpeed: UnityEngine.ParticleSystem.MinMaxCurve;
    scrollSpeedMultiplier: number;
    separateAxes: boolean;
    sizeAmount: UnityEngine.ParticleSystem.MinMaxCurve;
    strength: UnityEngine.ParticleSystem.MinMaxCurve;
    strengthMultiplier: number;
    strengthX: UnityEngine.ParticleSystem.MinMaxCurve;
    strengthXMultiplier: number;
    strengthY: UnityEngine.ParticleSystem.MinMaxCurve;
    strengthYMultiplier: number;
    strengthZ: UnityEngine.ParticleSystem.MinMaxCurve;
    strengthZMultiplier: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class CollisionModule extends System.ValueType {
    protected constructor();
    GetPlane(index: number): UnityEngine.Transform;
    SetPlane(index: number, transform: UnityEngine.Transform): void;
    bounce: UnityEngine.ParticleSystem.MinMaxCurve;
    bounceMultiplier: number;
    colliderForce: number;
    collidesWith: UnityEngine.LayerMask;
    dampen: UnityEngine.ParticleSystem.MinMaxCurve;
    dampenMultiplier: number;
    enabled: boolean;
    enableDynamicColliders: boolean;
    enableInteriorCollisions: boolean;
    lifetimeLoss: UnityEngine.ParticleSystem.MinMaxCurve;
    lifetimeLossMultiplier: number;
    maxCollisionShapes: number;
    maxKillSpeed: number;
    readonly maxPlaneCount: number;
    minKillSpeed: number;
    mode: UnityEngine.ParticleSystemCollisionMode;
    multiplyColliderForceByCollisionAngle: boolean;
    multiplyColliderForceByParticleSize: boolean;
    multiplyColliderForceByParticleSpeed: boolean;
    quality: UnityEngine.ParticleSystemCollisionQuality;
    radiusScale: number;
    sendCollisionMessages: boolean;
    type: UnityEngine.ParticleSystemCollisionType;
    voxelSize: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class TriggerModule extends System.ValueType {
    protected constructor();
    GetCollider(index: number): UnityEngine.Component;
    SetCollider(index: number, collider: UnityEngine.Component): void;
    enabled: boolean;
    enter: UnityEngine.ParticleSystemOverlapAction;
    exit: UnityEngine.ParticleSystemOverlapAction;
    inside: UnityEngine.ParticleSystemOverlapAction;
    readonly maxColliderCount: number;
    outside: UnityEngine.ParticleSystemOverlapAction;
    radiusScale: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class SubEmittersModule extends System.ValueType {
    protected constructor();
    AddSubEmitter(subEmitter: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemSubEmitterType, properties: UnityEngine.ParticleSystemSubEmitterProperties): void;
    GetSubEmitterProperties(index: number): UnityEngine.ParticleSystemSubEmitterProperties;
    GetSubEmitterSystem(index: number): UnityEngine.ParticleSystem;
    GetSubEmitterType(index: number): UnityEngine.ParticleSystemSubEmitterType;
    RemoveSubEmitter(index: number): void;
    SetSubEmitterProperties(index: number, properties: UnityEngine.ParticleSystemSubEmitterProperties): void;
    SetSubEmitterSystem(index: number, subEmitter: UnityEngine.ParticleSystem): void;
    SetSubEmitterType(index: number, type: UnityEngine.ParticleSystemSubEmitterType): void;
    birth0: UnityEngine.ParticleSystem;
    birth1: UnityEngine.ParticleSystem;
    collision0: UnityEngine.ParticleSystem;
    collision1: UnityEngine.ParticleSystem;
    death0: UnityEngine.ParticleSystem;
    death1: UnityEngine.ParticleSystem;
    enabled: boolean;
    readonly subEmittersCount: number;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class TextureSheetAnimationModule extends System.ValueType {
    protected constructor();
    AddSprite(sprite: UnityEngine.Sprite): void;
    GetSprite(index: number): UnityEngine.Sprite;
    RemoveSprite(index: number): void;
    SetSprite(index: number, sprite: UnityEngine.Sprite): void;
    animation: UnityEngine.ParticleSystemAnimationType;
    cycleCount: number;
    enabled: boolean;
    flipU: number;
    flipV: number;
    frameOverTime: UnityEngine.ParticleSystem.MinMaxCurve;
    frameOverTimeMultiplier: number;
    mode: UnityEngine.ParticleSystemAnimationMode;
    numTilesX: number;
    numTilesY: number;
    rowIndex: number;
    readonly spriteCount: number;
    startFrame: UnityEngine.ParticleSystem.MinMaxCurve;
    startFrameMultiplier: number;
    useRandomRow: boolean;
    uvChannelMask: UnityEngine.Rendering.UVChannelFlags;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class LightsModule extends System.ValueType {
    protected constructor();
    alphaAffectsIntensity: boolean;
    enabled: boolean;
    intensity: UnityEngine.ParticleSystem.MinMaxCurve;
    intensityMultiplier: number;
    light: UnityEngine.Light;
    maxLights: number;
    range: UnityEngine.ParticleSystem.MinMaxCurve;
    rangeMultiplier: number;
    ratio: number;
    sizeAffectsRange: boolean;
    useParticleColor: boolean;
    useRandomDistribution: boolean;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class TrailModule extends System.ValueType {
    protected constructor();
    colorOverLifetime: UnityEngine.ParticleSystem.MinMaxGradient;
    colorOverTrail: UnityEngine.ParticleSystem.MinMaxGradient;
    dieWithParticles: boolean;
    enabled: boolean;
    generateLightingData: boolean;
    inheritParticleColor: boolean;
    lifetime: UnityEngine.ParticleSystem.MinMaxCurve;
    lifetimeMultiplier: number;
    minVertexDistance: number;
    ratio: number;
    sizeAffectsLifetime: boolean;
    sizeAffectsWidth: boolean;
    textureMode: UnityEngine.ParticleSystemTrailTextureMode;
    widthOverTrail: UnityEngine.ParticleSystem.MinMaxCurve;
    widthOverTrailMultiplier: number;
    worldSpace: boolean;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class CustomDataModule extends System.ValueType {
    protected constructor();
    GetColor(stream: UnityEngine.ParticleSystemCustomData): UnityEngine.ParticleSystem.MinMaxGradient;
    GetMode(stream: UnityEngine.ParticleSystemCustomData): UnityEngine.ParticleSystemCustomDataMode;
    GetVector(stream: UnityEngine.ParticleSystemCustomData, component: number): UnityEngine.ParticleSystem.MinMaxCurve;
    GetVectorComponentCount(stream: UnityEngine.ParticleSystemCustomData): number;
    SetColor(stream: UnityEngine.ParticleSystemCustomData, gradient: UnityEngine.ParticleSystem.MinMaxGradient): void;
    SetMode(stream: UnityEngine.ParticleSystemCustomData, mode: UnityEngine.ParticleSystemCustomDataMode): void;
    SetVector(stream: UnityEngine.ParticleSystemCustomData, component: number, curve: UnityEngine.ParticleSystem.MinMaxCurve): void;
    SetVectorComponentCount(stream: UnityEngine.ParticleSystemCustomData, count: number): void;
    enabled: boolean;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class Particle extends System.ValueType {
    protected constructor();
    GetCurrentColor(system: UnityEngine.ParticleSystem): UnityEngine.Color32;
    GetCurrentSize(system: UnityEngine.ParticleSystem): number;
    GetCurrentSize3D(system: UnityEngine.ParticleSystem): UnityEngine.Vector3;
    angularVelocity: number;
    angularVelocity3D: UnityEngine.Vector3;
    axisOfRotation: UnityEngine.Vector3;
    color: UnityEngine.Color32;
    lifetime: number;
    position: UnityEngine.Vector3;
    randomSeed: number;
    randomValue: number;
    remainingLifetime: number;
    rotation: number;
    rotation3D: UnityEngine.Vector3;
    size: number;
    startColor: UnityEngine.Color32;
    startLifetime: number;
    startSize: number;
    startSize3D: UnityEngine.Vector3;
    velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class EmitParams extends System.ValueType {
    protected constructor();
    ResetAngularVelocity(): void;
    ResetAxisOfRotation(): void;
    ResetPosition(): void;
    ResetRandomSeed(): void;
    ResetRotation(): void;
    ResetStartColor(): void;
    ResetStartLifetime(): void;
    ResetStartSize(): void;
    ResetVelocity(): void;
    angularVelocity: number;
    angularVelocity3D: UnityEngine.Vector3;
    applyShapeToPosition: boolean;
    axisOfRotation: UnityEngine.Vector3;
    position: UnityEngine.Vector3;
    randomSeed: number;
    rotation: number;
    rotation3D: UnityEngine.Vector3;
    startColor: UnityEngine.Color32;
    startLifetime: number;
    startSize: number;
    startSize3D: UnityEngine.Vector3;
    velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.ParticleSystem {
  class CollisionEvent extends System.ValueType {
    protected constructor();
    readonly collider: UnityEngine.Component;
    readonly intersection: UnityEngine.Vector3;
    readonly normal: UnityEngine.Vector3;
    readonly velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class ParticleSystemRenderer extends UnityEngine.Renderer {
    constructor();
    AreVertexStreamsEnabled(streams: UnityEngine.ParticleSystemVertexStreams): boolean;
    DisableVertexStreams(streams: UnityEngine.ParticleSystemVertexStreams): void;
    EnableVertexStreams(streams: UnityEngine.ParticleSystemVertexStreams): void;
    GetActiveVertexStreams(streams: UnityEngine.ParticleSystemVertexStream[]): void;
    GetEnabledVertexStreams(streams: UnityEngine.ParticleSystemVertexStreams): UnityEngine.ParticleSystemVertexStreams;
    GetMeshes(meshes: UnityEngine.Mesh[]): number;
    SetActiveVertexStreams(streams: UnityEngine.ParticleSystemVertexStream[]): void;
    SetMeshes(meshes: UnityEngine.Mesh[]): void;
    SetMeshes(meshes: UnityEngine.Mesh[], size: number): void;
    readonly activeVertexStreamsCount: number;
    alignment: UnityEngine.ParticleSystemRenderSpace;
    cameraVelocityScale: number;
    lengthScale: number;
    maskInteraction: UnityEngine.SpriteMaskInteraction;
    maxParticleSize: number;
    mesh: UnityEngine.Mesh;
    readonly meshCount: number;
    minParticleSize: number;
    normalDirection: number;
    pivot: UnityEngine.Vector3;
    renderMode: UnityEngine.ParticleSystemRenderMode;
    sortingFudge: number;
    sortMode: UnityEngine.ParticleSystemSortMode;
    trailMaterial: UnityEngine.Material;
    velocityScale: number;
  }
}
declare namespace UnityEngine {
  class WorldParticleCollider extends UnityEngine.Component {
    constructor();
  }
}
declare namespace UnityEngine {
  class ParticleCollisionEvent extends System.ValueType {
    protected constructor();
    readonly collider: UnityEngine.Component;
    readonly colliderComponent: UnityEngine.Component;
    readonly intersection: UnityEngine.Vector3;
    readonly normal: UnityEngine.Vector3;
    readonly velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class ParticleSystemExtensionsImpl extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class ParticlePhysicsExtensions extends System.Object {
    protected constructor();
    static GetCollisionEvents(ps: UnityEngine.ParticleSystem, go: UnityEngine.GameObject, collisionEvents: UnityEngine.ParticleCollisionEvent[]): number;
    static GetCollisionEvents(ps: UnityEngine.ParticleSystem, go: UnityEngine.GameObject, collisionEvents: UnityEngine.ParticleCollisionEvent[]): number;
    static GetSafeCollisionEventSize(ps: UnityEngine.ParticleSystem): number;
    static GetSafeTriggerParticlesSize(ps: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemTriggerEventType): number;
    static GetTriggerParticles(ps: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemTriggerEventType, particles: UnityEngine.ParticleSystem.Particle[]): number;
    static SetTriggerParticles(ps: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemTriggerEventType, particles: UnityEngine.ParticleSystem.Particle[]): void;
    static SetTriggerParticles(ps: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemTriggerEventType, particles: UnityEngine.ParticleSystem.Particle[], offset: number, count: number): void;
  }
}
declare namespace UnityEngine.Rendering {
  class UVChannelFlags extends System.Enum {
    protected constructor();
    static UV0: UnityEngine.Rendering.UVChannelFlags;
    static UV1: UnityEngine.Rendering.UVChannelFlags;
    static UV2: UnityEngine.Rendering.UVChannelFlags;
    static UV3: UnityEngine.Rendering.UVChannelFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Analytics {
  class PerformanceReporting extends System.Object {
    protected constructor();
    static enabled: boolean;
  }
}
declare namespace UnityEngine {
  class Physics2D extends System.Object {
    constructor();
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static Distance(colliderA: UnityEngine.Collider2D, colliderB: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D;
    static GetContacts(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
    static GetContacts(collider: UnityEngine.Collider2D, colliders: UnityEngine.Collider2D[]): number;
    static GetContacts(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
    static GetContacts(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
    static GetContacts(collider: UnityEngine.Collider2D, contacts: UnityEngine.ContactPoint2D[]): number;
    static GetContacts(rigidbody: UnityEngine.Rigidbody2D, colliders: UnityEngine.Collider2D[]): number;
    static GetContacts(rigidbody: UnityEngine.Rigidbody2D, contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
    static GetContacts(rigidbody: UnityEngine.Rigidbody2D, contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
    static GetContacts(rigidbody: UnityEngine.Rigidbody2D, contacts: UnityEngine.ContactPoint2D[]): number;
    static GetIgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): boolean;
    static GetIgnoreLayerCollision(layer1: number, layer2: number): boolean;
    static GetLayerCollisionMask(layer: number): number;
    static GetRayIntersection(ray: UnityEngine.Ray): UnityEngine.RaycastHit2D;
    static GetRayIntersection(ray: UnityEngine.Ray, distance: number): UnityEngine.RaycastHit2D;
    static GetRayIntersection(ray: UnityEngine.Ray, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static GetRayIntersectionAll(ray: UnityEngine.Ray): UnityEngine.RaycastHit2D[];
    static GetRayIntersectionAll(ray: UnityEngine.Ray, distance: number): UnityEngine.RaycastHit2D[];
    static GetRayIntersectionAll(ray: UnityEngine.Ray, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[]): number;
    static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static IgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): void;
    static IgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, ignore: boolean): void;
    static IgnoreLayerCollision(layer1: number, layer2: number): void;
    static IgnoreLayerCollision(layer1: number, layer2: number, ignore: boolean): void;
    static IsTouching(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): boolean;
    static IsTouching(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
    static IsTouching(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
    static IsTouchingLayers(collider: UnityEngine.Collider2D): boolean;
    static IsTouchingLayers(collider: UnityEngine.Collider2D, layerMask: number): boolean;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number): UnityEngine.RaycastHit2D;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number): UnityEngine.RaycastHit2D[];
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number): number;
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number, minDepth: number): number;
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2): UnityEngine.Collider2D;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2): UnityEngine.Collider2D[];
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D[];
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[]): number;
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number): UnityEngine.Collider2D;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number): UnityEngine.Collider2D;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number): UnityEngine.Collider2D[];
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number): UnityEngine.Collider2D[];
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[]): number;
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number): UnityEngine.Collider2D;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number): UnityEngine.Collider2D;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number): UnityEngine.Collider2D[];
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number): UnityEngine.Collider2D[];
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[]): number;
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number): UnityEngine.Collider2D;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number): UnityEngine.Collider2D;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number): UnityEngine.Collider2D[];
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number): UnityEngine.Collider2D[];
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[]): number;
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapCollider(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    static OverlapPoint(point: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    static OverlapPoint(point: UnityEngine.Vector2): UnityEngine.Collider2D;
    static OverlapPoint(point: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D;
    static OverlapPoint(point: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapPoint(point: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapPointAll(point: UnityEngine.Vector2): UnityEngine.Collider2D[];
    static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D[];
    static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[]): number;
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static SetLayerCollisionMask(layer: number, layerMask: number): void;
    static Simulate(step: number): boolean;
    static SyncTransforms(): void;
    static alwaysShowColliders: boolean;
    static angularSleepTolerance: number;
    static autoSimulation: boolean;
    static autoSyncTransforms: boolean;
    static baumgarteScale: number;
    static baumgarteTOIScale: number;
    static callbacksOnDisable: boolean;
    static changeStopsCallbacks: boolean;
    static colliderAABBColor: UnityEngine.Color;
    static colliderAsleepColor: UnityEngine.Color;
    static colliderAwakeColor: UnityEngine.Color;
    static colliderContactColor: UnityEngine.Color;
    static contactArrowScale: number;
    static defaultContactOffset: number;
    static deleteStopsCallbacks: boolean;
    static gravity: UnityEngine.Vector2;
    static linearSleepTolerance: number;
    static maxAngularCorrection: number;
    static maxLinearCorrection: number;
    static maxRotationSpeed: number;
    static maxTranslationSpeed: number;
    static minPenetrationForPenalty: number;
    static positionIterations: number;
    static queriesHitTriggers: boolean;
    static queriesStartInColliders: boolean;
    static raycastsHitTriggers: boolean;
    static raycastsStartInColliders: boolean;
    static showColliderAABB: boolean;
    static showColliderContacts: boolean;
    static showColliderSleep: boolean;
    static timeToSleep: number;
    static velocityIterations: number;
    static velocityThreshold: number;
    static AllLayers: number;
    static DefaultRaycastLayers: number;
    static IgnoreRaycastLayer: number;
  }
}
declare namespace UnityEngine {
  class RigidbodyInterpolation2D extends System.Enum {
    protected constructor();
    static Extrapolate: UnityEngine.RigidbodyInterpolation2D;
    static Interpolate: UnityEngine.RigidbodyInterpolation2D;
    static None: UnityEngine.RigidbodyInterpolation2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RigidbodySleepMode2D extends System.Enum {
    protected constructor();
    static NeverSleep: UnityEngine.RigidbodySleepMode2D;
    static StartAsleep: UnityEngine.RigidbodySleepMode2D;
    static StartAwake: UnityEngine.RigidbodySleepMode2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class CollisionDetectionMode2D extends System.Enum {
    protected constructor();
    static Continuous: UnityEngine.CollisionDetectionMode2D;
    static Discrete: UnityEngine.CollisionDetectionMode2D;
    static None: UnityEngine.CollisionDetectionMode2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ForceMode2D extends System.Enum {
    protected constructor();
    static Force: UnityEngine.ForceMode2D;
    static Impulse: UnityEngine.ForceMode2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ColliderErrorState2D extends System.Enum {
    protected constructor();
    static None: UnityEngine.ColliderErrorState2D;
    static NoShapes: UnityEngine.ColliderErrorState2D;
    static RemovedShapes: UnityEngine.ColliderErrorState2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RigidbodyConstraints2D extends System.Enum {
    protected constructor();
    static FreezeAll: UnityEngine.RigidbodyConstraints2D;
    static FreezePosition: UnityEngine.RigidbodyConstraints2D;
    static FreezePositionX: UnityEngine.RigidbodyConstraints2D;
    static FreezePositionY: UnityEngine.RigidbodyConstraints2D;
    static FreezeRotation: UnityEngine.RigidbodyConstraints2D;
    static None: UnityEngine.RigidbodyConstraints2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RigidbodyType2D extends System.Enum {
    protected constructor();
    static Dynamic: UnityEngine.RigidbodyType2D;
    static Kinematic: UnityEngine.RigidbodyType2D;
    static Static: UnityEngine.RigidbodyType2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ContactFilter2D extends System.ValueType {
    protected constructor();
    ClearDepth(): void;
    ClearLayerMask(): void;
    ClearNormalAngle(): void;
    IsFilteringDepth(obj: UnityEngine.GameObject): boolean;
    IsFilteringLayerMask(obj: UnityEngine.GameObject): boolean;
    IsFilteringNormalAngle(angle: number): boolean;
    IsFilteringNormalAngle(normal: UnityEngine.Vector2): boolean;
    IsFilteringTrigger(collider: UnityEngine.Collider2D): boolean;
    NoFilter(): UnityEngine.ContactFilter2D;
    SetDepth(minDepth: number, maxDepth: number): void;
    SetLayerMask(layerMask: UnityEngine.LayerMask): void;
    SetNormalAngle(minNormalAngle: number, maxNormalAngle: number): void;
    readonly isFiltering: boolean;
    layerMask: UnityEngine.LayerMask;
    maxDepth: number;
    maxNormalAngle: number;
    minDepth: number;
    minNormalAngle: number;
    static NormalAngleUpperLimit: number;
    useDepth: boolean;
    useLayerMask: boolean;
    useNormalAngle: boolean;
    useOutsideDepth: boolean;
    useOutsideNormalAngle: boolean;
    useTriggers: boolean;
  }
}
declare namespace UnityEngine {
  class Rigidbody2D extends UnityEngine.Component {
    constructor();
    AddForce(force: UnityEngine.Vector2): void;
    AddForce(force: UnityEngine.Vector2, mode: UnityEngine.ForceMode2D): void;
    AddForceAtPosition(force: UnityEngine.Vector2, position: UnityEngine.Vector2): void;
    AddForceAtPosition(force: UnityEngine.Vector2, position: UnityEngine.Vector2, mode: UnityEngine.ForceMode2D): void;
    AddRelativeForce(relativeForce: UnityEngine.Vector2): void;
    AddRelativeForce(relativeForce: UnityEngine.Vector2, mode: UnityEngine.ForceMode2D): void;
    AddTorque(torque: number): void;
    AddTorque(torque: number, mode: UnityEngine.ForceMode2D): void;
    Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    Distance(collider: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D;
    GetAttachedColliders(results: UnityEngine.Collider2D[]): number;
    GetContacts(colliders: UnityEngine.Collider2D[]): number;
    GetContacts(contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
    GetContacts(contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
    GetContacts(contacts: UnityEngine.ContactPoint2D[]): number;
    GetPoint(point: UnityEngine.Vector2): UnityEngine.Vector2;
    GetPointVelocity(point: UnityEngine.Vector2): UnityEngine.Vector2;
    GetRelativePoint(relativePoint: UnityEngine.Vector2): UnityEngine.Vector2;
    GetRelativePointVelocity(relativePoint: UnityEngine.Vector2): UnityEngine.Vector2;
    GetRelativeVector(relativeVector: UnityEngine.Vector2): UnityEngine.Vector2;
    GetVector(vector: UnityEngine.Vector2): UnityEngine.Vector2;
    IsAwake(): boolean;
    IsSleeping(): boolean;
    IsTouching(collider: UnityEngine.Collider2D): boolean;
    IsTouching(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
    IsTouching(contactFilter: UnityEngine.ContactFilter2D): boolean;
    IsTouchingLayers(): boolean;
    IsTouchingLayers(layerMask: number): boolean;
    MovePosition(position: UnityEngine.Vector2): void;
    MoveRotation(angle: number): void;
    OverlapCollider(contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    OverlapPoint(point: UnityEngine.Vector2): boolean;
    Sleep(): void;
    WakeUp(): void;
    angularDrag: number;
    angularVelocity: number;
    readonly attachedColliderCount: number;
    bodyType: UnityEngine.RigidbodyType2D;
    centerOfMass: UnityEngine.Vector2;
    collisionDetectionMode: UnityEngine.CollisionDetectionMode2D;
    constraints: UnityEngine.RigidbodyConstraints2D;
    drag: number;
    fixedAngle: boolean;
    freezeRotation: boolean;
    gravityScale: number;
    inertia: number;
    interpolation: UnityEngine.RigidbodyInterpolation2D;
    isKinematic: boolean;
    mass: number;
    position: UnityEngine.Vector2;
    rotation: number;
    sharedMaterial: UnityEngine.PhysicsMaterial2D;
    simulated: boolean;
    sleepMode: UnityEngine.RigidbodySleepMode2D;
    useAutoMass: boolean;
    useFullKinematicContacts: boolean;
    velocity: UnityEngine.Vector2;
    readonly worldCenterOfMass: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class Collider2D extends UnityEngine.Behaviour {
    constructor();
    Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number, ignoreSiblingColliders: boolean): number;
    Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, ignoreSiblingColliders: boolean): number;
    Distance(collider: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D;
    GetContacts(colliders: UnityEngine.Collider2D[]): number;
    GetContacts(contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
    GetContacts(contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
    GetContacts(contacts: UnityEngine.ContactPoint2D[]): number;
    IsTouching(collider: UnityEngine.Collider2D): boolean;
    IsTouching(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
    IsTouching(contactFilter: UnityEngine.ContactFilter2D): boolean;
    IsTouchingLayers(): boolean;
    IsTouchingLayers(layerMask: number): boolean;
    OverlapCollider(contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
    OverlapPoint(point: UnityEngine.Vector2): boolean;
    Raycast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
    Raycast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
    Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    readonly attachedRigidbody: UnityEngine.Rigidbody2D;
    readonly bounciness: number;
    readonly bounds: UnityEngine.Bounds;
    readonly composite: UnityEngine.CompositeCollider2D;
    density: number;
    readonly friction: number;
    isTrigger: boolean;
    offset: UnityEngine.Vector2;
    readonly shapeCount: number;
    sharedMaterial: UnityEngine.PhysicsMaterial2D;
    usedByComposite: boolean;
    usedByEffector: boolean;
  }
}
declare namespace UnityEngine {
  class CircleCollider2D extends UnityEngine.Collider2D {
    constructor();
    center: UnityEngine.Vector2;
    radius: number;
  }
}
declare namespace UnityEngine {
  class BoxCollider2D extends UnityEngine.Collider2D {
    constructor();
    autoTiling: boolean;
    center: UnityEngine.Vector2;
    edgeRadius: number;
    size: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class EdgeCollider2D extends UnityEngine.Collider2D {
    constructor();
    Reset(): void;
    readonly edgeCount: number;
    edgeRadius: number;
    readonly pointCount: number;
    points: UnityEngine.Vector2[];
  }
}
declare namespace UnityEngine {
  class CapsuleDirection2D extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.CapsuleDirection2D;
    value__: number;
    static Vertical: UnityEngine.CapsuleDirection2D;
  }
}
declare namespace UnityEngine {
  class CapsuleCollider2D extends UnityEngine.Collider2D {
    constructor();
    direction: UnityEngine.CapsuleDirection2D;
    size: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class CompositeCollider2D extends UnityEngine.Collider2D {
    constructor();
    GenerateGeometry(): void;
    GetPath(index: number, points: UnityEngine.Vector2[]): number;
    GetPathPointCount(index: number): number;
    edgeRadius: number;
    generationType: UnityEngine.CompositeCollider2D.GenerationType;
    geometryType: UnityEngine.CompositeCollider2D.GeometryType;
    readonly pathCount: number;
    readonly pointCount: number;
    vertexDistance: number;
  }
}
declare namespace UnityEngine.CompositeCollider2D {
  class GeometryType extends System.Enum {
    protected constructor();
    static Outlines: UnityEngine.CompositeCollider2D.GeometryType;
    static Polygons: UnityEngine.CompositeCollider2D.GeometryType;
    value__: number;
  }
}
declare namespace UnityEngine.CompositeCollider2D {
  class GenerationType extends System.Enum {
    protected constructor();
    static Manual: UnityEngine.CompositeCollider2D.GenerationType;
    static Synchronous: UnityEngine.CompositeCollider2D.GenerationType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class PolygonCollider2D extends UnityEngine.Collider2D {
    constructor();
    CreatePrimitive(sides: number): void;
    CreatePrimitive(sides: number, scale: UnityEngine.Vector2): void;
    CreatePrimitive(sides: number, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
    GetPath(index: number): UnityEngine.Vector2[];
    GetTotalPointCount(): number;
    SetPath(index: number, points: UnityEngine.Vector2[]): void;
    autoTiling: boolean;
    pathCount: number;
    points: UnityEngine.Vector2[];
  }
}
declare namespace UnityEngine {
  class ColliderDistance2D extends System.ValueType {
    protected constructor();
    distance: number;
    readonly isOverlapped: boolean;
    isValid: boolean;
    readonly normal: UnityEngine.Vector2;
    pointA: UnityEngine.Vector2;
    pointB: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class ContactPoint2D extends System.ValueType {
    protected constructor();
    readonly collider: UnityEngine.Collider2D;
    readonly enabled: boolean;
    readonly normal: UnityEngine.Vector2;
    readonly normalImpulse: number;
    readonly otherCollider: UnityEngine.Collider2D;
    readonly otherRigidbody: UnityEngine.Rigidbody2D;
    readonly point: UnityEngine.Vector2;
    readonly relativeVelocity: UnityEngine.Vector2;
    readonly rigidbody: UnityEngine.Rigidbody2D;
    readonly separation: number;
    readonly tangentImpulse: number;
  }
}
declare namespace UnityEngine {
  class Collision2D extends System.Object {
    constructor();
    GetContacts(contacts: UnityEngine.ContactPoint2D[]): number;
    readonly collider: UnityEngine.Collider2D;
    readonly contacts: UnityEngine.ContactPoint2D[];
    readonly enabled: boolean;
    readonly gameObject: UnityEngine.GameObject;
    readonly otherCollider: UnityEngine.Collider2D;
    readonly otherRigidbody: UnityEngine.Rigidbody2D;
    readonly relativeVelocity: UnityEngine.Vector2;
    readonly rigidbody: UnityEngine.Rigidbody2D;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine {
  class JointLimitState2D extends System.Enum {
    protected constructor();
    static EqualLimits: UnityEngine.JointLimitState2D;
    static Inactive: UnityEngine.JointLimitState2D;
    static LowerLimit: UnityEngine.JointLimitState2D;
    static UpperLimit: UnityEngine.JointLimitState2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class JointAngleLimits2D extends System.ValueType {
    protected constructor();
    max: number;
    min: number;
  }
}
declare namespace UnityEngine {
  class JointTranslationLimits2D extends System.ValueType {
    protected constructor();
    max: number;
    min: number;
  }
}
declare namespace UnityEngine {
  class JointMotor2D extends System.ValueType {
    protected constructor();
    maxMotorTorque: number;
    motorSpeed: number;
  }
}
declare namespace UnityEngine {
  class JointSuspension2D extends System.ValueType {
    protected constructor();
    angle: number;
    dampingRatio: number;
    frequency: number;
  }
}
declare namespace UnityEngine {
  class Joint2D extends UnityEngine.Behaviour {
    constructor();
    GetReactionForce(timeStep: number): UnityEngine.Vector2;
    GetReactionTorque(timeStep: number): number;
    readonly attachedRigidbody: UnityEngine.Rigidbody2D;
    breakForce: number;
    breakTorque: number;
    collideConnected: boolean;
    connectedBody: UnityEngine.Rigidbody2D;
    enableCollision: boolean;
    readonly reactionForce: UnityEngine.Vector2;
    readonly reactionTorque: number;
  }
}
declare namespace UnityEngine {
  class AnchoredJoint2D extends UnityEngine.Joint2D {
    constructor();
    anchor: UnityEngine.Vector2;
    autoConfigureConnectedAnchor: boolean;
    connectedAnchor: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class SpringJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    autoConfigureDistance: boolean;
    dampingRatio: number;
    distance: number;
    frequency: number;
  }
}
declare namespace UnityEngine {
  class DistanceJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    autoConfigureDistance: boolean;
    distance: number;
    maxDistanceOnly: boolean;
  }
}
declare namespace UnityEngine {
  class FrictionJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    maxForce: number;
    maxTorque: number;
  }
}
declare namespace UnityEngine {
  class HingeJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    GetMotorTorque(timeStep: number): number;
    readonly jointAngle: number;
    readonly jointSpeed: number;
    limits: UnityEngine.JointAngleLimits2D;
    readonly limitState: UnityEngine.JointLimitState2D;
    motor: UnityEngine.JointMotor2D;
    readonly referenceAngle: number;
    useLimits: boolean;
    useMotor: boolean;
  }
}
declare namespace UnityEngine {
  class RelativeJoint2D extends UnityEngine.Joint2D {
    constructor();
    angularOffset: number;
    autoConfigureOffset: boolean;
    correctionScale: number;
    linearOffset: UnityEngine.Vector2;
    maxForce: number;
    maxTorque: number;
    readonly target: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class SliderJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    GetMotorForce(timeStep: number): number;
    angle: number;
    autoConfigureAngle: boolean;
    readonly jointSpeed: number;
    readonly jointTranslation: number;
    limits: UnityEngine.JointTranslationLimits2D;
    readonly limitState: UnityEngine.JointLimitState2D;
    motor: UnityEngine.JointMotor2D;
    readonly referenceAngle: number;
    useLimits: boolean;
    useMotor: boolean;
  }
}
declare namespace UnityEngine {
  class TargetJoint2D extends UnityEngine.Joint2D {
    constructor();
    anchor: UnityEngine.Vector2;
    autoConfigureTarget: boolean;
    dampingRatio: number;
    frequency: number;
    maxForce: number;
    target: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class FixedJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    dampingRatio: number;
    frequency: number;
    readonly referenceAngle: number;
  }
}
declare namespace UnityEngine {
  class WheelJoint2D extends UnityEngine.AnchoredJoint2D {
    constructor();
    GetMotorTorque(timeStep: number): number;
    readonly jointAngle: number;
    readonly jointLinearSpeed: number;
    readonly jointSpeed: number;
    readonly jointTranslation: number;
    motor: UnityEngine.JointMotor2D;
    suspension: UnityEngine.JointSuspension2D;
    useMotor: boolean;
  }
}
declare namespace UnityEngine {
  class PhysicsMaterial2D extends UnityEngine.Object {
    constructor();
    constructor(name: string);
    bounciness: number;
    friction: number;
  }
}
declare namespace UnityEngine {
  class PhysicsUpdateBehaviour2D extends UnityEngine.Behaviour {
    constructor();
  }
}
declare namespace UnityEngine {
  class ConstantForce2D extends UnityEngine.PhysicsUpdateBehaviour2D {
    constructor();
    force: UnityEngine.Vector2;
    relativeForce: UnityEngine.Vector2;
    torque: number;
  }
}
declare namespace UnityEngine {
  class EffectorSelection2D extends System.Enum {
    protected constructor();
    static Collider: UnityEngine.EffectorSelection2D;
    static Rigidbody: UnityEngine.EffectorSelection2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class EffectorForceMode2D extends System.Enum {
    protected constructor();
    static Constant: UnityEngine.EffectorForceMode2D;
    static InverseLinear: UnityEngine.EffectorForceMode2D;
    static InverseSquared: UnityEngine.EffectorForceMode2D;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Effector2D extends UnityEngine.Behaviour {
    constructor();
    colliderMask: number;
    useColliderMask: boolean;
  }
}
declare namespace UnityEngine {
  class AreaEffector2D extends UnityEngine.Effector2D {
    constructor();
    angularDrag: number;
    drag: number;
    forceAngle: number;
    forceDirection: number;
    forceMagnitude: number;
    forceTarget: UnityEngine.EffectorSelection2D;
    forceVariation: number;
    useGlobalAngle: boolean;
  }
}
declare namespace UnityEngine {
  class BuoyancyEffector2D extends UnityEngine.Effector2D {
    constructor();
    angularDrag: number;
    density: number;
    flowAngle: number;
    flowMagnitude: number;
    flowVariation: number;
    linearDrag: number;
    surfaceLevel: number;
  }
}
declare namespace UnityEngine {
  class PointEffector2D extends UnityEngine.Effector2D {
    constructor();
    angularDrag: number;
    distanceScale: number;
    drag: number;
    forceMagnitude: number;
    forceMode: UnityEngine.EffectorForceMode2D;
    forceSource: UnityEngine.EffectorSelection2D;
    forceTarget: UnityEngine.EffectorSelection2D;
    forceVariation: number;
  }
}
declare namespace UnityEngine {
  class PlatformEffector2D extends UnityEngine.Effector2D {
    constructor();
    oneWay: boolean;
    rotationalOffset: number;
    sideAngleVariance: number;
    sideArc: number;
    sideBounce: boolean;
    sideFriction: boolean;
    surfaceArc: number;
    useOneWay: boolean;
    useOneWayGrouping: boolean;
    useSideBounce: boolean;
    useSideFriction: boolean;
  }
}
declare namespace UnityEngine {
  class SurfaceEffector2D extends UnityEngine.Effector2D {
    constructor();
    forceScale: number;
    speed: number;
    speedVariation: number;
    useBounce: boolean;
    useContactForce: boolean;
    useFriction: boolean;
  }
}
declare namespace UnityEngine {
  class RaycastHit2D extends System.ValueType {
    protected constructor();
    CompareTo(other: UnityEngine.RaycastHit2D): number;
    centroid: UnityEngine.Vector2;
    readonly collider: UnityEngine.Collider2D;
    distance: number;
    fraction: number;
    normal: UnityEngine.Vector2;
    point: UnityEngine.Vector2;
    readonly rigidbody: UnityEngine.Rigidbody2D;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine {
  class Physics extends System.Object {
    constructor();
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion, maxDistance: number): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number): boolean;
    static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
    static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): UnityEngine.RaycastHit[];
    static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number): UnityEngine.RaycastHit[];
    static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layermask: number): UnityEngine.RaycastHit[];
    static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
    static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion): number;
    static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion, maxDistance: number): number;
    static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion, maxDistance: number, layermask: number): number;
    static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion, maxDistance: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number): boolean;
    static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
    static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
    static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layermask: number): UnityEngine.RaycastHit[];
    static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
    static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number): number;
    static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layermask: number): number;
    static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3): boolean;
    static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): boolean;
    static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layermask: number): boolean;
    static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static CheckCapsule(start: UnityEngine.Vector3, end: UnityEngine.Vector3, radius: number): boolean;
    static CheckCapsule(start: UnityEngine.Vector3, end: UnityEngine.Vector3, radius: number, layermask: number): boolean;
    static CheckCapsule(start: UnityEngine.Vector3, end: UnityEngine.Vector3, radius: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static CheckSphere(position: UnityEngine.Vector3, radius: number): boolean;
    static CheckSphere(position: UnityEngine.Vector3, radius: number, layerMask: number): boolean;
    static CheckSphere(position: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static ClosestPoint(point: UnityEngine.Vector3, collider: UnityEngine.Collider, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngine.Vector3;
    static ComputePenetration(colliderA: UnityEngine.Collider, positionA: UnityEngine.Vector3, rotationA: UnityEngine.Quaternion, colliderB: UnityEngine.Collider, positionB: UnityEngine.Vector3, rotationB: UnityEngine.Quaternion, direction: any, distance: any): boolean;
    static GetIgnoreLayerCollision(layer1: number, layer2: number): boolean;
    static IgnoreCollision(collider1: UnityEngine.Collider, collider2: UnityEngine.Collider): void;
    static IgnoreCollision(collider1: UnityEngine.Collider, collider2: UnityEngine.Collider, ignore: boolean): void;
    static IgnoreLayerCollision(layer1: number, layer2: number): void;
    static IgnoreLayerCollision(layer1: number, layer2: number, ignore: boolean): void;
    static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3): boolean;
    static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, layerMask: number): boolean;
    static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, hitInfo: any): boolean;
    static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, hitInfo: any, layerMask: number): boolean;
    static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, hitInfo: any, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3): UnityEngine.Collider[];
    static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): UnityEngine.Collider[];
    static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layerMask: number): UnityEngine.Collider[];
    static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.Collider[];
    static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[]): number;
    static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[], orientation: UnityEngine.Quaternion): number;
    static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[], orientation: UnityEngine.Quaternion, layerMask: number): number;
    static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[], orientation: UnityEngine.Quaternion, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static OverlapCapsule(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number): UnityEngine.Collider[];
    static OverlapCapsule(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, layerMask: number): UnityEngine.Collider[];
    static OverlapCapsule(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.Collider[];
    static OverlapCapsuleNonAlloc(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[]): number;
    static OverlapCapsuleNonAlloc(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number): number;
    static OverlapCapsuleNonAlloc(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static OverlapSphere(position: UnityEngine.Vector3, radius: number): UnityEngine.Collider[];
    static OverlapSphere(position: UnityEngine.Vector3, radius: number, layerMask: number): UnityEngine.Collider[];
    static OverlapSphere(position: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.Collider[];
    static OverlapSphereNonAlloc(position: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[]): number;
    static OverlapSphereNonAlloc(position: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number): number;
    static OverlapSphereNonAlloc(position: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static Raycast(ray: UnityEngine.Ray): boolean;
    static Raycast(ray: UnityEngine.Ray, maxDistance: number): boolean;
    static Raycast(ray: UnityEngine.Ray, maxDistance: number, layerMask: number): boolean;
    static Raycast(ray: UnityEngine.Ray, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static Raycast(ray: UnityEngine.Ray, hitInfo: any): boolean;
    static Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number): boolean;
    static Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number, layerMask: number): boolean;
    static Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number): boolean;
    static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static RaycastAll(ray: UnityEngine.Ray): UnityEngine.RaycastHit[];
    static RaycastAll(ray: UnityEngine.Ray, maxDistance: number): UnityEngine.RaycastHit[];
    static RaycastAll(ray: UnityEngine.Ray, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
    static RaycastAll(ray: UnityEngine.Ray, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
    static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
    static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layermask: number): UnityEngine.RaycastHit[];
    static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[]): number;
    static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[], maxDistance: number): number;
    static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
    static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layermask: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static Simulate(step: number): void;
    static SphereCast(ray: UnityEngine.Ray, radius: number): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, maxDistance: number): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any, maxDistance: number): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any, maxDistance: number, layerMask: number): boolean;
    static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any): boolean;
    static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
    static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number): boolean;
    static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    static SphereCastAll(ray: UnityEngine.Ray, radius: number): UnityEngine.RaycastHit[];
    static SphereCastAll(ray: UnityEngine.Ray, radius: number, maxDistance: number): UnityEngine.RaycastHit[];
    static SphereCastAll(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
    static SphereCastAll(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
    static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
    static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
    static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[]): number;
    static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[], maxDistance: number): number;
    static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
    static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
    static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number): number;
    static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
    static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
    static SyncTransforms(): void;
    static autoSimulation: boolean;
    static autoSyncTransforms: boolean;
    static bounceThreshold: number;
    static bounceTreshold: number;
    static defaultContactOffset: number;
    static defaultSolverIterations: number;
    static defaultSolverVelocityIterations: number;
    static gravity: UnityEngine.Vector3;
    static maxAngularVelocity: number;
    static minPenetrationForPenalty: number;
    static penetrationPenaltyForce: number;
    static queriesHitBackfaces: boolean;
    static queriesHitTriggers: boolean;
    static sleepAngularVelocity: number;
    static sleepThreshold: number;
    static sleepVelocity: number;
    static solverIterationCount: number;
    static solverVelocityIterationCount: number;
    static AllLayers: number;
    static DefaultRaycastLayers: number;
    static IgnoreRaycastLayer: number;
    static kAllLayers: number;
    static kDefaultRaycastLayers: number;
    static kIgnoreRaycastLayer: number;
  }
}
declare namespace UnityEngine {
  class ContactPoint extends System.ValueType {
    protected constructor();
    readonly normal: UnityEngine.Vector3;
    readonly otherCollider: UnityEngine.Collider;
    readonly point: UnityEngine.Vector3;
    readonly separation: number;
    readonly thisCollider: UnityEngine.Collider;
  }
}
declare namespace UnityEngine {
  class Rigidbody extends UnityEngine.Component {
    constructor();
    AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number): void;
    AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number, upwardsModifier: number): void;
    AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number, upwardsModifier: number, mode: UnityEngine.ForceMode): void;
    AddForce(x: number, y: number, z: number): void;
    AddForce(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
    AddForce(force: UnityEngine.Vector3): void;
    AddForce(force: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
    AddForceAtPosition(force: UnityEngine.Vector3, position: UnityEngine.Vector3): void;
    AddForceAtPosition(force: UnityEngine.Vector3, position: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
    AddRelativeForce(x: number, y: number, z: number): void;
    AddRelativeForce(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
    AddRelativeForce(force: UnityEngine.Vector3): void;
    AddRelativeForce(force: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
    AddRelativeTorque(x: number, y: number, z: number): void;
    AddRelativeTorque(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
    AddRelativeTorque(torque: UnityEngine.Vector3): void;
    AddRelativeTorque(torque: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
    AddTorque(x: number, y: number, z: number): void;
    AddTorque(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
    AddTorque(torque: UnityEngine.Vector3): void;
    AddTorque(torque: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
    ClosestPointOnBounds(position: UnityEngine.Vector3): UnityEngine.Vector3;
    GetPointVelocity(worldPoint: UnityEngine.Vector3): UnityEngine.Vector3;
    GetRelativePointVelocity(relativePoint: UnityEngine.Vector3): UnityEngine.Vector3;
    IsSleeping(): boolean;
    MovePosition(position: UnityEngine.Vector3): void;
    MoveRotation(rot: UnityEngine.Quaternion): void;
    ResetCenterOfMass(): void;
    ResetInertiaTensor(): void;
    SetDensity(density: number): void;
    SetMaxAngularVelocity(a: number): void;
    Sleep(): void;
    SweepTest(direction: UnityEngine.Vector3, hitInfo: any): boolean;
    SweepTest(direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
    SweepTest(direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
    SweepTestAll(direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
    SweepTestAll(direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
    SweepTestAll(direction: UnityEngine.Vector3, maxDistance: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
    WakeUp(): void;
    angularDrag: number;
    angularVelocity: UnityEngine.Vector3;
    centerOfMass: UnityEngine.Vector3;
    collisionDetectionMode: UnityEngine.CollisionDetectionMode;
    constraints: UnityEngine.RigidbodyConstraints;
    detectCollisions: boolean;
    drag: number;
    freezeRotation: boolean;
    inertiaTensor: UnityEngine.Vector3;
    inertiaTensorRotation: UnityEngine.Quaternion;
    interpolation: UnityEngine.RigidbodyInterpolation;
    isKinematic: boolean;
    mass: number;
    maxAngularVelocity: number;
    maxDepenetrationVelocity: number;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    sleepAngularVelocity: number;
    sleepThreshold: number;
    sleepVelocity: number;
    solverIterationCount: number;
    solverIterations: number;
    solverVelocityIterationCount: number;
    solverVelocityIterations: number;
    useConeFriction: boolean;
    useGravity: boolean;
    velocity: UnityEngine.Vector3;
    readonly worldCenterOfMass: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class Joint extends UnityEngine.Component {
    constructor();
    anchor: UnityEngine.Vector3;
    autoConfigureConnectedAnchor: boolean;
    axis: UnityEngine.Vector3;
    breakForce: number;
    breakTorque: number;
    connectedAnchor: UnityEngine.Vector3;
    connectedBody: UnityEngine.Rigidbody;
    connectedMassScale: number;
    readonly currentForce: UnityEngine.Vector3;
    readonly currentTorque: UnityEngine.Vector3;
    enableCollision: boolean;
    enablePreprocessing: boolean;
    massScale: number;
  }
}
declare namespace UnityEngine {
  class HingeJoint extends UnityEngine.Joint {
    constructor();
    readonly angle: number;
    limits: UnityEngine.JointLimits;
    motor: UnityEngine.JointMotor;
    spring: UnityEngine.JointSpring;
    useLimits: boolean;
    useMotor: boolean;
    useSpring: boolean;
    readonly velocity: number;
  }
}
declare namespace UnityEngine {
  class SpringJoint extends UnityEngine.Joint {
    constructor();
    damper: number;
    maxDistance: number;
    minDistance: number;
    spring: number;
    tolerance: number;
  }
}
declare namespace UnityEngine {
  class FixedJoint extends UnityEngine.Joint {
    constructor();
  }
}
declare namespace UnityEngine {
  class CharacterJoint extends UnityEngine.Joint {
    constructor();
    enableProjection: boolean;
    highTwistLimit: UnityEngine.SoftJointLimit;
    lowTwistLimit: UnityEngine.SoftJointLimit;
    projectionAngle: number;
    projectionDistance: number;
    swing1Limit: UnityEngine.SoftJointLimit;
    swing2Limit: UnityEngine.SoftJointLimit;
    swingAxis: UnityEngine.Vector3;
    swingLimitSpring: UnityEngine.SoftJointLimitSpring;
    twistLimitSpring: UnityEngine.SoftJointLimitSpring;
    rotationDrive: UnityEngine.JointDrive;
    targetAngularVelocity: UnityEngine.Vector3;
    targetRotation: UnityEngine.Quaternion;
  }
}
declare namespace UnityEngine {
  class ConfigurableJointMotion extends System.Enum {
    protected constructor();
    static Free: UnityEngine.ConfigurableJointMotion;
    static Limited: UnityEngine.ConfigurableJointMotion;
    static Locked: UnityEngine.ConfigurableJointMotion;
    value__: number;
  }
}
declare namespace UnityEngine {
  class RotationDriveMode extends System.Enum {
    protected constructor();
    static Slerp: UnityEngine.RotationDriveMode;
    value__: number;
    static XYAndZ: UnityEngine.RotationDriveMode;
  }
}
declare namespace UnityEngine {
  class ConfigurableJoint extends UnityEngine.Joint {
    constructor();
    angularXDrive: UnityEngine.JointDrive;
    angularXLimitSpring: UnityEngine.SoftJointLimitSpring;
    angularXMotion: UnityEngine.ConfigurableJointMotion;
    angularYLimit: UnityEngine.SoftJointLimit;
    angularYMotion: UnityEngine.ConfigurableJointMotion;
    angularYZDrive: UnityEngine.JointDrive;
    angularYZLimitSpring: UnityEngine.SoftJointLimitSpring;
    angularZLimit: UnityEngine.SoftJointLimit;
    angularZMotion: UnityEngine.ConfigurableJointMotion;
    configuredInWorldSpace: boolean;
    highAngularXLimit: UnityEngine.SoftJointLimit;
    linearLimit: UnityEngine.SoftJointLimit;
    linearLimitSpring: UnityEngine.SoftJointLimitSpring;
    lowAngularXLimit: UnityEngine.SoftJointLimit;
    projectionAngle: number;
    projectionDistance: number;
    projectionMode: UnityEngine.JointProjectionMode;
    rotationDriveMode: UnityEngine.RotationDriveMode;
    secondaryAxis: UnityEngine.Vector3;
    slerpDrive: UnityEngine.JointDrive;
    swapBodies: boolean;
    targetAngularVelocity: UnityEngine.Vector3;
    targetPosition: UnityEngine.Vector3;
    targetRotation: UnityEngine.Quaternion;
    targetVelocity: UnityEngine.Vector3;
    xDrive: UnityEngine.JointDrive;
    xMotion: UnityEngine.ConfigurableJointMotion;
    yDrive: UnityEngine.JointDrive;
    yMotion: UnityEngine.ConfigurableJointMotion;
    zDrive: UnityEngine.JointDrive;
    zMotion: UnityEngine.ConfigurableJointMotion;
  }
}
declare namespace UnityEngine {
  class ConstantForce extends UnityEngine.Behaviour {
    constructor();
    force: UnityEngine.Vector3;
    relativeForce: UnityEngine.Vector3;
    relativeTorque: UnityEngine.Vector3;
    torque: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class CollisionDetectionMode extends System.Enum {
    protected constructor();
    static Continuous: UnityEngine.CollisionDetectionMode;
    static ContinuousDynamic: UnityEngine.CollisionDetectionMode;
    static Discrete: UnityEngine.CollisionDetectionMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Collider extends UnityEngine.Component {
    constructor();
    ClosestPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ClosestPointOnBounds(position: UnityEngine.Vector3): UnityEngine.Vector3;
    Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number): boolean;
    readonly attachedRigidbody: UnityEngine.Rigidbody;
    readonly bounds: UnityEngine.Bounds;
    contactOffset: number;
    enabled: boolean;
    isTrigger: boolean;
    material: UnityEngine.PhysicMaterial;
    sharedMaterial: UnityEngine.PhysicMaterial;
  }
}
declare namespace UnityEngine {
  class BoxCollider extends UnityEngine.Collider {
    constructor();
    center: UnityEngine.Vector3;
    extents: UnityEngine.Vector3;
    size: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class SphereCollider extends UnityEngine.Collider {
    constructor();
    center: UnityEngine.Vector3;
    radius: number;
  }
}
declare namespace UnityEngine {
  class MeshCollider extends UnityEngine.Collider {
    constructor();
    convex: boolean;
    inflateMesh: boolean;
    sharedMesh: UnityEngine.Mesh;
    skinWidth: number;
    smoothSphereCollisions: boolean;
  }
}
declare namespace UnityEngine {
  class CapsuleCollider extends UnityEngine.Collider {
    constructor();
    center: UnityEngine.Vector3;
    direction: number;
    height: number;
    radius: number;
  }
}
declare namespace UnityEngine {
  class RaycastHit extends System.ValueType {
    protected constructor();
    barycentricCoordinate: UnityEngine.Vector3;
    readonly collider: UnityEngine.Collider;
    distance: number;
    readonly lightmapCoord: UnityEngine.Vector2;
    normal: UnityEngine.Vector3;
    point: UnityEngine.Vector3;
    readonly rigidbody: UnityEngine.Rigidbody;
    readonly textureCoord: UnityEngine.Vector2;
    readonly textureCoord1: UnityEngine.Vector2;
    readonly textureCoord2: UnityEngine.Vector2;
    readonly transform: UnityEngine.Transform;
    readonly triangleIndex: number;
  }
}
declare namespace UnityEngine {
  class PhysicMaterial extends UnityEngine.Object {
    constructor();
    constructor(name: string);
    bounceCombine: UnityEngine.PhysicMaterialCombine;
    bounciness: number;
    bouncyness: number;
    dynamicFriction: number;
    dynamicFriction2: number;
    frictionCombine: UnityEngine.PhysicMaterialCombine;
    frictionDirection: UnityEngine.Vector3;
    frictionDirection2: UnityEngine.Vector3;
    staticFriction: number;
    staticFriction2: number;
  }
}
declare namespace UnityEngine {
  class CharacterController extends UnityEngine.Collider {
    constructor();
    Move(motion: UnityEngine.Vector3): UnityEngine.CollisionFlags;
    SimpleMove(speed: UnityEngine.Vector3): boolean;
    center: UnityEngine.Vector3;
    readonly collisionFlags: UnityEngine.CollisionFlags;
    detectCollisions: boolean;
    enableOverlapRecovery: boolean;
    height: number;
    readonly isGrounded: boolean;
    minMoveDistance: number;
    radius: number;
    skinWidth: number;
    slopeLimit: number;
    stepOffset: number;
    readonly velocity: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine {
  class RigidbodyConstraints extends System.Enum {
    protected constructor();
    static FreezeAll: UnityEngine.RigidbodyConstraints;
    static FreezePosition: UnityEngine.RigidbodyConstraints;
    static FreezePositionX: UnityEngine.RigidbodyConstraints;
    static FreezePositionY: UnityEngine.RigidbodyConstraints;
    static FreezePositionZ: UnityEngine.RigidbodyConstraints;
    static FreezeRotation: UnityEngine.RigidbodyConstraints;
    static FreezeRotationX: UnityEngine.RigidbodyConstraints;
    static FreezeRotationY: UnityEngine.RigidbodyConstraints;
    static FreezeRotationZ: UnityEngine.RigidbodyConstraints;
    static None: UnityEngine.RigidbodyConstraints;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ForceMode extends System.Enum {
    protected constructor();
    static Acceleration: UnityEngine.ForceMode;
    static Force: UnityEngine.ForceMode;
    static Impulse: UnityEngine.ForceMode;
    value__: number;
    static VelocityChange: UnityEngine.ForceMode;
  }
}
declare namespace UnityEngine {
  class JointDriveMode extends System.Enum {
    protected constructor();
    static None: UnityEngine.JointDriveMode;
    static Position: UnityEngine.JointDriveMode;
    static PositionAndVelocity: UnityEngine.JointDriveMode;
    value__: number;
    static Velocity: UnityEngine.JointDriveMode;
  }
}
declare namespace UnityEngine {
  class JointProjectionMode extends System.Enum {
    protected constructor();
    static None: UnityEngine.JointProjectionMode;
    static PositionAndRotation: UnityEngine.JointProjectionMode;
    static PositionOnly: UnityEngine.JointProjectionMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class WheelFrictionCurve extends System.ValueType {
    protected constructor();
    asymptoteSlip: number;
    asymptoteValue: number;
    extremumSlip: number;
    extremumValue: number;
    stiffness: number;
  }
}
declare namespace UnityEngine {
  class SoftJointLimit extends System.ValueType {
    protected constructor();
    bounciness: number;
    bouncyness: number;
    contactDistance: number;
    damper: number;
    limit: number;
    spring: number;
  }
}
declare namespace UnityEngine {
  class SoftJointLimitSpring extends System.ValueType {
    protected constructor();
    damper: number;
    spring: number;
  }
}
declare namespace UnityEngine {
  class JointDrive extends System.ValueType {
    protected constructor();
    maximumForce: number;
    mode: UnityEngine.JointDriveMode;
    positionDamper: number;
    positionSpring: number;
  }
}
declare namespace UnityEngine {
  class RigidbodyInterpolation extends System.Enum {
    protected constructor();
    static Extrapolate: UnityEngine.RigidbodyInterpolation;
    static Interpolate: UnityEngine.RigidbodyInterpolation;
    static None: UnityEngine.RigidbodyInterpolation;
    value__: number;
  }
}
declare namespace UnityEngine {
  class JointMotor extends System.ValueType {
    protected constructor();
    force: number;
    freeSpin: boolean;
    targetVelocity: number;
  }
}
declare namespace UnityEngine {
  class JointSpring extends System.ValueType {
    protected constructor();
    damper: number;
    spring: number;
    targetPosition: number;
  }
}
declare namespace UnityEngine {
  class JointLimits extends System.ValueType {
    protected constructor();
    bounceMinVelocity: number;
    bounciness: number;
    contactDistance: number;
    max: number;
    min: number;
    maxBounce: number;
    minBounce: number;
  }
}
declare namespace UnityEngine {
  class ControllerColliderHit extends System.Object {
    constructor();
    readonly collider: UnityEngine.Collider;
    readonly controller: UnityEngine.CharacterController;
    readonly gameObject: UnityEngine.GameObject;
    readonly moveDirection: UnityEngine.Vector3;
    readonly moveLength: number;
    readonly normal: UnityEngine.Vector3;
    readonly point: UnityEngine.Vector3;
    readonly rigidbody: UnityEngine.Rigidbody;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine {
  class PhysicMaterialCombine extends System.Enum {
    protected constructor();
    static Average: UnityEngine.PhysicMaterialCombine;
    static Maximum: UnityEngine.PhysicMaterialCombine;
    static Minimum: UnityEngine.PhysicMaterialCombine;
    static Multiply: UnityEngine.PhysicMaterialCombine;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Collision extends System.Object {
    constructor();
    GetEnumerator(): any;
    readonly collider: UnityEngine.Collider;
    readonly contacts: UnityEngine.ContactPoint[];
    readonly frictionForceSum: UnityEngine.Vector3;
    readonly gameObject: UnityEngine.GameObject;
    readonly impactForceSum: UnityEngine.Vector3;
    readonly impulse: UnityEngine.Vector3;
    readonly other: UnityEngine.Component;
    readonly relativeVelocity: UnityEngine.Vector3;
    readonly rigidbody: UnityEngine.Rigidbody;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine {
  class CollisionFlags extends System.Enum {
    protected constructor();
    static Above: UnityEngine.CollisionFlags;
    static Below: UnityEngine.CollisionFlags;
    static CollidedAbove: UnityEngine.CollisionFlags;
    static CollidedBelow: UnityEngine.CollisionFlags;
    static CollidedSides: UnityEngine.CollisionFlags;
    static None: UnityEngine.CollisionFlags;
    static Sides: UnityEngine.CollisionFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class QueryTriggerInteraction extends System.Enum {
    protected constructor();
    static Collide: UnityEngine.QueryTriggerInteraction;
    static Ignore: UnityEngine.QueryTriggerInteraction;
    static UseGlobal: UnityEngine.QueryTriggerInteraction;
    value__: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class AnalyticsReporter extends System.Object {
    constructor(analytics: UnityEngine.Purchasing.IUnityAnalytics);
    OnPurchaseFailed(product: UnityEngine.Purchasing.Product, reason: UnityEngine.Purchasing.PurchaseFailureReason): void;
    OnPurchaseSucceeded(product: UnityEngine.Purchasing.Product): void;
  }
}
declare namespace UnityEngine.Purchasing {
  class IDs extends System.Object {
    constructor();
    Add(id: string, stores: any[]): void;
    Add(id: string, stores: string[]): void;
    GetEnumerator(): any;
  }
}
declare namespace UnityEngine.Purchasing {
  class ConfigurationBuilder extends System.Object {
    protected constructor();
    AddProduct(id: string, type: UnityEngine.Purchasing.ProductType): UnityEngine.Purchasing.ConfigurationBuilder;
    AddProduct(id: string, type: UnityEngine.Purchasing.ProductType, storeIDs: UnityEngine.Purchasing.IDs): UnityEngine.Purchasing.ConfigurationBuilder;
    AddProduct(id: string, type: UnityEngine.Purchasing.ProductType, storeIDs: UnityEngine.Purchasing.IDs, payouts: any): UnityEngine.Purchasing.ConfigurationBuilder;
    AddProduct(id: string, type: UnityEngine.Purchasing.ProductType, storeIDs: UnityEngine.Purchasing.IDs, payout: UnityEngine.Purchasing.PayoutDefinition): UnityEngine.Purchasing.ConfigurationBuilder;
    AddProducts(products: any): UnityEngine.Purchasing.ConfigurationBuilder;
    static Instance(first: UnityEngine.Purchasing.Extension.IPurchasingModule, rest: UnityEngine.Purchasing.Extension.IPurchasingModule[]): UnityEngine.Purchasing.ConfigurationBuilder;
    readonly products: any;
    useCatalogProvider: boolean;
    useCloudCatalog: boolean;
  }
}
declare namespace UnityEngine.Purchasing {
  class IExtensionProvider {
    protected constructor();
  }
}
declare namespace UnityEngine.Purchasing {
  class IInternalStoreListener {
    protected constructor();
    OnInitialized(controller: UnityEngine.Purchasing.IStoreController): void;
    OnInitializeFailed(error: UnityEngine.Purchasing.InitializationFailureReason): void;
    OnPurchaseFailed(i: UnityEngine.Purchasing.Product, p: UnityEngine.Purchasing.PurchaseFailureReason): void;
    ProcessPurchase(e: UnityEngine.Purchasing.PurchaseEventArgs): UnityEngine.Purchasing.PurchaseProcessingResult;
  }
}
declare namespace UnityEngine.Purchasing {
  class InitializationFailureReason extends System.Enum {
    protected constructor();
    static AppNotKnown: UnityEngine.Purchasing.InitializationFailureReason;
    static NoProductsAvailable: UnityEngine.Purchasing.InitializationFailureReason;
    static PurchasingUnavailable: UnityEngine.Purchasing.InitializationFailureReason;
    value__: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class IStoreController {
    protected constructor();
    ConfirmPendingPurchase(product: UnityEngine.Purchasing.Product): void;
    FetchAdditionalProducts(products: any, successCallback: (() => void), failCallback: ((obj: UnityEngine.Purchasing.InitializationFailureReason) => void)): void;
    InitiatePurchase(productId: string): void;
    InitiatePurchase(productId: string, payload: string): void;
    InitiatePurchase(product: UnityEngine.Purchasing.Product): void;
    InitiatePurchase(product: UnityEngine.Purchasing.Product, payload: string): void;
    readonly products: UnityEngine.Purchasing.ProductCollection;
  }
}
declare namespace UnityEngine.Purchasing {
  class IStoreListener {
    protected constructor();
    OnInitialized(controller: UnityEngine.Purchasing.IStoreController, extensions: UnityEngine.Purchasing.IExtensionProvider): void;
    OnInitializeFailed(error: UnityEngine.Purchasing.InitializationFailureReason): void;
    OnPurchaseFailed(i: UnityEngine.Purchasing.Product, p: UnityEngine.Purchasing.PurchaseFailureReason): void;
    ProcessPurchase(e: UnityEngine.Purchasing.PurchaseEventArgs): UnityEngine.Purchasing.PurchaseProcessingResult;
  }
}
declare namespace UnityEngine.Purchasing {
  class IUnityAnalytics {
    protected constructor();
    CustomEvent(name: string, data: any): void;
    Transaction(productId: string, price: number, currency: string, receipt: string, signature: string): void;
  }
}
declare namespace UnityEngine.Purchasing {
  class PayoutDefinition extends System.Object {
    constructor();
    constructor(typeString: string, subtype: string, quantity: number);
    constructor(typeString: string, subtype: string, quantity: number, data: string);
    constructor(subtype: string, quantity: number);
    constructor(subtype: string, quantity: number, data: string);
    constructor(type: UnityEngine.Purchasing.PayoutType, subtype: string, quantity: number);
    constructor(type: UnityEngine.Purchasing.PayoutType, subtype: string, quantity: number, data: string);
    readonly data: string;
    readonly quantity: number;
    readonly subtype: string;
    readonly type: UnityEngine.Purchasing.PayoutType;
    readonly typeString: string;
    static MaxDataLength: number;
    static MaxSubtypeLength: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class PayoutType extends System.Enum {
    protected constructor();
    static Currency: UnityEngine.Purchasing.PayoutType;
    static Item: UnityEngine.Purchasing.PayoutType;
    static Other: UnityEngine.Purchasing.PayoutType;
    static Resource: UnityEngine.Purchasing.PayoutType;
    value__: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class Product extends System.Object {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    readonly availableToPurchase: boolean;
    readonly definition: UnityEngine.Purchasing.ProductDefinition;
    readonly hasReceipt: boolean;
    readonly metadata: UnityEngine.Purchasing.ProductMetadata;
    readonly receipt: string;
    readonly transactionID: string;
  }
}
declare namespace UnityEngine.Purchasing {
  class ProductCollection extends System.Object {
    protected constructor();
    WithID(id: string): UnityEngine.Purchasing.Product;
    WithStoreSpecificID(id: string): UnityEngine.Purchasing.Product;
    readonly all: UnityEngine.Purchasing.Product[];
    readonly set: any;
  }
}
declare namespace UnityEngine.Purchasing {
  class ProductDefinition extends System.Object {
    constructor(id: string, storeSpecificId: string, type: UnityEngine.Purchasing.ProductType);
    constructor(id: string, storeSpecificId: string, type: UnityEngine.Purchasing.ProductType, enabled: boolean);
    constructor(id: string, storeSpecificId: string, type: UnityEngine.Purchasing.ProductType, enabled: boolean, payout: UnityEngine.Purchasing.PayoutDefinition);
    constructor(id: string, storeSpecificId: string, type: UnityEngine.Purchasing.ProductType, enabled: boolean, payouts: any);
    constructor(id: string, type: UnityEngine.Purchasing.ProductType);
    Equals(obj: any): boolean;
    GetHashCode(): number;
    readonly enabled: boolean;
    readonly id: string;
    readonly payout: UnityEngine.Purchasing.PayoutDefinition;
    readonly payouts: any;
    readonly storeSpecificId: string;
    readonly type: UnityEngine.Purchasing.ProductType;
  }
}
declare namespace UnityEngine.Purchasing {
  class ProductMetadata extends System.Object {
    constructor(priceString: string, title: string, description: string, currencyCode: string, localizedPrice: number);
    constructor();
    readonly isoCurrencyCode: string;
    readonly localizedDescription: string;
    readonly localizedPrice: number;
    readonly localizedPriceString: string;
    readonly localizedTitle: string;
  }
}
declare namespace UnityEngine.Purchasing {
  class ProductType extends System.Enum {
    protected constructor();
    static Consumable: UnityEngine.Purchasing.ProductType;
    static NonConsumable: UnityEngine.Purchasing.ProductType;
    static Subscription: UnityEngine.Purchasing.ProductType;
    value__: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class PurchaseEventArgs extends System.Object {
    protected constructor();
    readonly purchasedProduct: UnityEngine.Purchasing.Product;
  }
}
declare namespace UnityEngine.Purchasing {
  class PurchaseFailedEventArgs extends System.Object {
    protected constructor();
    readonly message: string;
    readonly purchasedProduct: UnityEngine.Purchasing.Product;
    readonly reason: UnityEngine.Purchasing.PurchaseFailureReason;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class PurchaseFailureDescription extends System.Object {
    constructor(productId: string, reason: UnityEngine.Purchasing.PurchaseFailureReason, message: string);
    readonly message: string;
    readonly productId: string;
    readonly reason: UnityEngine.Purchasing.PurchaseFailureReason;
  }
}
declare namespace UnityEngine.Purchasing {
  class PurchaseFailureReason extends System.Enum {
    protected constructor();
    static DuplicateTransaction: UnityEngine.Purchasing.PurchaseFailureReason;
    static ExistingPurchasePending: UnityEngine.Purchasing.PurchaseFailureReason;
    static PaymentDeclined: UnityEngine.Purchasing.PurchaseFailureReason;
    static ProductUnavailable: UnityEngine.Purchasing.PurchaseFailureReason;
    static PurchasingUnavailable: UnityEngine.Purchasing.PurchaseFailureReason;
    static SignatureInvalid: UnityEngine.Purchasing.PurchaseFailureReason;
    static Unknown: UnityEngine.Purchasing.PurchaseFailureReason;
    static UserCancelled: UnityEngine.Purchasing.PurchaseFailureReason;
    value__: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class PurchaseProcessingResult extends System.Enum {
    protected constructor();
    static Complete: UnityEngine.Purchasing.PurchaseProcessingResult;
    static Pending: UnityEngine.Purchasing.PurchaseProcessingResult;
    value__: number;
  }
}
declare namespace UnityEngine.Purchasing {
  class PurchasingFactory extends System.Object {
    constructor(first: UnityEngine.Purchasing.Extension.IPurchasingModule, remainingModules: UnityEngine.Purchasing.Extension.IPurchasingModule[]);
    RegisterStore(name: string, s: UnityEngine.Purchasing.Extension.IStore): void;
    SetCatalogProvider(provider: UnityEngine.Purchasing.Extension.ICatalogProvider): void;
    SetCatalogProviderFunction(func: ((obj: ((obj: any) => void)) => void)): void;
    service: UnityEngine.Purchasing.Extension.IStore;
    readonly storeName: string;
  }
}
declare namespace UnityEngine.Purchasing {
  class PurchasingManager extends System.Object {
    protected constructor();
    ConfirmPendingPurchase(product: UnityEngine.Purchasing.Product): void;
    FetchAdditionalProducts(products: any, successCallback: (() => void), failCallback: ((obj: UnityEngine.Purchasing.InitializationFailureReason) => void)): void;
    Initialize(listener: UnityEngine.Purchasing.IInternalStoreListener, products: any): void;
    InitiatePurchase(productId: string): void;
    InitiatePurchase(purchasableId: string, developerPayload: string): void;
    InitiatePurchase(product: UnityEngine.Purchasing.Product): void;
    InitiatePurchase(product: UnityEngine.Purchasing.Product, developerPayload: string): void;
    OnProductsRetrieved(products: UnityEngine.Purchasing.Extension.ProductDescription[]): void;
    OnPurchaseFailed(description: UnityEngine.Purchasing.Extension.PurchaseFailureDescription): void;
    OnPurchaseSucceeded(id: string, receipt: string, transactionId: string): void;
    OnSetupFailed(reason: UnityEngine.Purchasing.InitializationFailureReason): void;
    readonly products: UnityEngine.Purchasing.ProductCollection;
    useTransactionLog: boolean;
  }
}
declare namespace UnityEngine.Purchasing {
  class SimpleCatalogProvider extends System.Object {
    protected constructor();
    FetchProducts(callback: ((obj: any) => void)): void;
  }
}
declare namespace UnityEngine.Purchasing {
  class StoreListenerProxy extends System.Object {
    constructor(forwardTo: UnityEngine.Purchasing.IStoreListener, analytics: UnityEngine.Purchasing.AnalyticsReporter, extensions: UnityEngine.Purchasing.IExtensionProvider);
    OnInitialized(controller: UnityEngine.Purchasing.IStoreController): void;
    OnInitializeFailed(error: UnityEngine.Purchasing.InitializationFailureReason): void;
    OnPurchaseFailed(i: UnityEngine.Purchasing.Product, p: UnityEngine.Purchasing.PurchaseFailureReason): void;
    ProcessPurchase(e: UnityEngine.Purchasing.PurchaseEventArgs): UnityEngine.Purchasing.PurchaseProcessingResult;
  }
}
declare namespace UnityEngine.Purchasing {
  class TransactionLog extends System.Object {
    constructor(logger: UnityEngine.ILogger, persistentDataPath: string);
    Clear(): void;
    HasRecordOf(transactionID: string): boolean;
    Record(transactionID: string): void;
  }
}
declare namespace UnityEngine.Purchasing {
  class UnityAnalytics extends System.Object {
    constructor();
    CustomEvent(name: string, data: any): void;
    Transaction(productId: string, price: number, currency: string, receipt: string, signature: string): void;
  }
}
declare namespace UnityEngine.Purchasing {
  class UnityPurchasing extends System.Object {
    protected constructor();
    static ClearTransactionLog(): void;
    static Initialize(listener: UnityEngine.Purchasing.IStoreListener, builder: UnityEngine.Purchasing.ConfigurationBuilder): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class AbstractPurchasingModule extends System.Object {
    protected constructor();
    Configure(): void;
    Configure(binder: UnityEngine.Purchasing.Extension.IPurchasingBinder): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class AbstractStore extends System.Object {
    protected constructor();
    FinishTransaction(product: UnityEngine.Purchasing.ProductDefinition, transactionId: string): void;
    Initialize(callback: UnityEngine.Purchasing.Extension.IStoreCallback): void;
    Purchase(product: UnityEngine.Purchasing.ProductDefinition, developerPayload: string): void;
    RetrieveProducts(products: any): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class ICatalogProvider {
    protected constructor();
    FetchProducts(callback: ((obj: any) => void)): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class IPurchasingBinder {
    protected constructor();
    RegisterStore(name: string, a: UnityEngine.Purchasing.Extension.IStore): void;
    SetCatalogProvider(provider: UnityEngine.Purchasing.Extension.ICatalogProvider): void;
    SetCatalogProviderFunction(func: ((obj: ((obj: any) => void)) => void)): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class IPurchasingModule {
    protected constructor();
    Configure(binder: UnityEngine.Purchasing.Extension.IPurchasingBinder): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class IStore {
    protected constructor();
    FinishTransaction(product: UnityEngine.Purchasing.ProductDefinition, transactionId: string): void;
    Initialize(callback: UnityEngine.Purchasing.Extension.IStoreCallback): void;
    Purchase(product: UnityEngine.Purchasing.ProductDefinition, developerPayload: string): void;
    RetrieveProducts(products: any): void;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class IStoreCallback {
    protected constructor();
    OnProductsRetrieved(products: UnityEngine.Purchasing.Extension.ProductDescription[]): void;
    OnPurchaseFailed(desc: UnityEngine.Purchasing.Extension.PurchaseFailureDescription): void;
    OnPurchaseSucceeded(storeSpecificId: string, receipt: string, transactionIdentifier: string): void;
    OnSetupFailed(reason: UnityEngine.Purchasing.InitializationFailureReason): void;
    readonly products: UnityEngine.Purchasing.ProductCollection;
    useTransactionLog: boolean;
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class IStoreConfiguration {
    protected constructor();
  }
}
declare namespace UnityEngine.Purchasing {
  class IStoreExtension {
    protected constructor();
  }
}
declare namespace UnityEngine.Purchasing.Extension {
  class ProductDescription extends System.Object {
    constructor(id: string, metadata: UnityEngine.Purchasing.ProductMetadata, receipt: string, transactionId: string);
    constructor(id: string, metadata: UnityEngine.Purchasing.ProductMetadata, receipt: string, transactionId: string, type: UnityEngine.Purchasing.ProductType);
    constructor(id: string, metadata: UnityEngine.Purchasing.ProductMetadata);
    readonly metadata: UnityEngine.Purchasing.ProductMetadata;
    readonly receipt: string;
    readonly storeSpecificId: string;
    transactionId: string;
    type: UnityEngine.Purchasing.ProductType;
  }
}
declare namespace UnityEngine {
  class ScreenCapture extends System.Object {
    protected constructor();
    static CaptureScreenshot(filename: string): void;
    static CaptureScreenshot(filename: string, superSize: number): void;
  }
}
declare namespace UnityEngine.SpatialTracking {
  class TrackedPoseDriverDataDescription extends System.Object {
    constructor();
    static DeviceData: UnityEngine.SpatialTracking.TrackedPoseDriverDataDescription.PoseData[];
  }
}
declare namespace UnityEngine.SpatialTracking.TrackedPoseDriverDataDescription {
  class PoseData extends System.ValueType {
    protected constructor();
    PoseNames: string[];
    Poses: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose[];
  }
}
declare namespace UnityEngine.SpatialTracking {
  class TrackedPoseDriver extends UnityEngine.MonoBehaviour {
    constructor();
    SetPoseSource(deviceType: UnityEngine.SpatialTracking.TrackedPoseDriver.DeviceType, pose: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose): boolean;
    readonly deviceType: UnityEngine.SpatialTracking.TrackedPoseDriver.DeviceType;
    originPose: UnityEngine.Pose;
    readonly poseSource: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    trackingType: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackingType;
    updateType: UnityEngine.SpatialTracking.TrackedPoseDriver.UpdateType;
    UseRelativeTransform: boolean;
  }
}
declare namespace UnityEngine.SpatialTracking.TrackedPoseDriver {
  class DeviceType extends System.Enum {
    protected constructor();
    static GenericXRController: UnityEngine.SpatialTracking.TrackedPoseDriver.DeviceType;
    static GenericXRDevice: UnityEngine.SpatialTracking.TrackedPoseDriver.DeviceType;
    static GenericXRRemote: UnityEngine.SpatialTracking.TrackedPoseDriver.DeviceType;
    value__: number;
  }
}
declare namespace UnityEngine.SpatialTracking.TrackedPoseDriver {
  class TrackedPose extends System.Enum {
    protected constructor();
    static Center: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static ColorCamera: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static DepthCamera: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static Device: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static FisheyeCamera: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static Head: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static LeftEye: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static LeftPose: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static RemotePose: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static RightEye: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    static RightPose: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackedPose;
    value__: number;
  }
}
declare namespace UnityEngine.SpatialTracking.TrackedPoseDriver {
  class TrackingType extends System.Enum {
    protected constructor();
    static PositionOnly: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackingType;
    static RotationAndPosition: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackingType;
    static RotationOnly: UnityEngine.SpatialTracking.TrackedPoseDriver.TrackingType;
    value__: number;
  }
}
declare namespace UnityEngine.SpatialTracking.TrackedPoseDriver {
  class UpdateType extends System.Enum {
    protected constructor();
    static BeforeRender: UnityEngine.SpatialTracking.TrackedPoseDriver.UpdateType;
    static Update: UnityEngine.SpatialTracking.TrackedPoseDriver.UpdateType;
    static UpdateAndBeforeRender: UnityEngine.SpatialTracking.TrackedPoseDriver.UpdateType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class SpriteMask extends UnityEngine.Renderer {
    constructor();
    alphaCutoff: number;
    backSortingLayerID: number;
    backSortingOrder: number;
    frontSortingLayerID: number;
    frontSortingOrder: number;
    isCustomRangeActive: boolean;
    sprite: UnityEngine.Sprite;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleComplexSelector extends System.Object {
    constructor();
    readonly isSimple: boolean;
    readonly rule: UnityEngine.StyleSheets.StyleRule;
    readonly selectors: UnityEngine.StyleSheets.StyleSelector[];
    readonly specificity: number;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleProperty extends System.Object {
    constructor();
    readonly name: string;
    readonly values: UnityEngine.StyleSheets.StyleValueHandle[];
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleRule extends System.Object {
    constructor();
    readonly properties: UnityEngine.StyleSheets.StyleProperty[];
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleSelector extends System.Object {
    constructor();
    ToString(): string;
    readonly parts: UnityEngine.StyleSheets.StyleSelectorPart[];
    readonly previousRelationship: UnityEngine.StyleSheets.StyleSelectorRelationship;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleSelectorPart extends System.ValueType {
    protected constructor();
    static CreateClass(className: string): UnityEngine.StyleSheets.StyleSelectorPart;
    static CreateId(Id: string): UnityEngine.StyleSheets.StyleSelectorPart;
    static CreatePredicate(predicate: any): UnityEngine.StyleSheets.StyleSelectorPart;
    static CreateType(t: any): UnityEngine.StyleSheets.StyleSelectorPart;
    static CreateWildCard(): UnityEngine.StyleSheets.StyleSelectorPart;
    ToString(): string;
    readonly type: UnityEngine.StyleSheets.StyleSelectorType;
    readonly value: string;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleSelectorRelationship extends System.Enum {
    protected constructor();
    static Child: UnityEngine.StyleSheets.StyleSelectorRelationship;
    static Descendent: UnityEngine.StyleSheets.StyleSelectorRelationship;
    static None: UnityEngine.StyleSheets.StyleSelectorRelationship;
    value__: number;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleSelectorType extends System.Enum {
    protected constructor();
    static Class: UnityEngine.StyleSheets.StyleSelectorType;
    static ID: UnityEngine.StyleSheets.StyleSelectorType;
    static Predicate: UnityEngine.StyleSheets.StyleSelectorType;
    static PseudoClass: UnityEngine.StyleSheets.StyleSelectorType;
    static RecursivePseudoClass: UnityEngine.StyleSheets.StyleSelectorType;
    static Type: UnityEngine.StyleSheets.StyleSelectorType;
    static Unknown: UnityEngine.StyleSheets.StyleSelectorType;
    value__: number;
    static Wildcard: UnityEngine.StyleSheets.StyleSelectorType;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleSheet extends UnityEngine.ScriptableObject {
    constructor();
    ReadColor(handle: UnityEngine.StyleSheets.StyleValueHandle): UnityEngine.Color;
    ReadEnum(handle: UnityEngine.StyleSheets.StyleValueHandle): string;
    ReadFloat(handle: UnityEngine.StyleSheets.StyleValueHandle): number;
    ReadKeyword(handle: UnityEngine.StyleSheets.StyleValueHandle): UnityEngine.StyleSheets.StyleValueKeyword;
    ReadResourcePath(handle: UnityEngine.StyleSheets.StyleValueHandle): string;
    ReadString(handle: UnityEngine.StyleSheets.StyleValueHandle): string;
    readonly complexSelectors: UnityEngine.StyleSheets.StyleComplexSelector[];
    readonly rules: UnityEngine.StyleSheets.StyleRule[];
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleValueHandle extends System.ValueType {
    protected constructor();
    readonly valueType: UnityEngine.StyleSheets.StyleValueType;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleValueKeyword extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.StyleSheets.StyleValueKeyword;
    static False: UnityEngine.StyleSheets.StyleValueKeyword;
    static Inherit: UnityEngine.StyleSheets.StyleValueKeyword;
    static None: UnityEngine.StyleSheets.StyleValueKeyword;
    static True: UnityEngine.StyleSheets.StyleValueKeyword;
    static Unset: UnityEngine.StyleSheets.StyleValueKeyword;
    value__: number;
  }
}
declare namespace UnityEngine.StyleSheets {
  class StyleValueType extends System.Enum {
    protected constructor();
    static Color: UnityEngine.StyleSheets.StyleValueType;
    static Enum: UnityEngine.StyleSheets.StyleValueType;
    static Float: UnityEngine.StyleSheets.StyleValueType;
    static Keyword: UnityEngine.StyleSheets.StyleValueType;
    static ResourcePath: UnityEngine.StyleSheets.StyleValueType;
    static String: UnityEngine.StyleSheets.StyleValueType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TreePrototype extends System.Object {
    constructor();
    bendFactor: number;
    prefab: UnityEngine.GameObject;
  }
}
declare namespace UnityEngine {
  class DetailRenderMode extends System.Enum {
    protected constructor();
    static Grass: UnityEngine.DetailRenderMode;
    static GrassBillboard: UnityEngine.DetailRenderMode;
    value__: number;
    static VertexLit: UnityEngine.DetailRenderMode;
  }
}
declare namespace UnityEngine {
  class DetailPrototype extends System.Object {
    constructor();
    bendFactor: number;
    dryColor: UnityEngine.Color;
    healthyColor: UnityEngine.Color;
    maxHeight: number;
    maxWidth: number;
    minHeight: number;
    minWidth: number;
    noiseSpread: number;
    prototype: UnityEngine.GameObject;
    prototypeTexture: UnityEngine.Texture2D;
    renderMode: UnityEngine.DetailRenderMode;
    usePrototypeMesh: boolean;
  }
}
declare namespace UnityEngine {
  class SplatPrototype extends System.Object {
    constructor();
    metallic: number;
    normalMap: UnityEngine.Texture2D;
    smoothness: number;
    specular: UnityEngine.Color;
    texture: UnityEngine.Texture2D;
    tileOffset: UnityEngine.Vector2;
    tileSize: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class TreeInstance extends System.ValueType {
    protected constructor();
    color: UnityEngine.Color32;
    heightScale: number;
    lightmapColor: UnityEngine.Color32;
    position: UnityEngine.Vector3;
    prototypeIndex: number;
    rotation: number;
    widthScale: number;
  }
}
declare namespace UnityEngine {
  class TerrainData extends UnityEngine.Object {
    constructor();
    GetAlphamaps(x: number, y: number, width: number, height: number): number[];
    GetDetailLayer(xBase: number, yBase: number, width: number, height: number, layer: number): number[];
    GetHeight(x: number, y: number): number;
    GetHeights(xBase: number, yBase: number, width: number, height: number): number[];
    GetInterpolatedHeight(x: number, y: number): number;
    GetInterpolatedNormal(x: number, y: number): UnityEngine.Vector3;
    GetSteepness(x: number, y: number): number;
    GetSupportedLayers(xBase: number, yBase: number, totalWidth: number, totalHeight: number): number[];
    GetTreeInstance(index: number): UnityEngine.TreeInstance;
    RefreshPrototypes(): void;
    SetAlphamaps(x: number, y: number, map: number[]): void;
    SetDetailLayer(xBase: number, yBase: number, layer: number, details: number[]): void;
    SetDetailResolution(detailResolution: number, resolutionPerPatch: number): void;
    SetHeights(xBase: number, yBase: number, heights: number[]): void;
    SetHeightsDelayLOD(xBase: number, yBase: number, heights: number[]): void;
    SetTreeInstance(index: number, instance: UnityEngine.TreeInstance): void;
    readonly alphamapHeight: number;
    readonly alphamapLayers: number;
    alphamapResolution: number;
    readonly alphamapTextures: UnityEngine.Texture2D[];
    readonly alphamapWidth: number;
    baseMapResolution: number;
    readonly bounds: UnityEngine.Bounds;
    readonly detailHeight: number;
    detailPrototypes: UnityEngine.DetailPrototype[];
    readonly detailResolution: number;
    readonly detailWidth: number;
    readonly heightmapHeight: number;
    heightmapResolution: number;
    readonly heightmapScale: UnityEngine.Vector3;
    readonly heightmapWidth: number;
    size: UnityEngine.Vector3;
    splatPrototypes: UnityEngine.SplatPrototype[];
    thickness: number;
    readonly treeInstanceCount: number;
    treeInstances: UnityEngine.TreeInstance[];
    treePrototypes: UnityEngine.TreePrototype[];
    wavingGrassAmount: number;
    wavingGrassSpeed: number;
    wavingGrassStrength: number;
    wavingGrassTint: UnityEngine.Color;
  }
}
declare namespace UnityEngine {
  class TerrainChangedFlags extends System.Enum {
    protected constructor();
    static DelayedHeightmapUpdate: UnityEngine.TerrainChangedFlags;
    static FlushEverythingImmediately: UnityEngine.TerrainChangedFlags;
    static Heightmap: UnityEngine.TerrainChangedFlags;
    static RemoveDirtyDetailsImmediately: UnityEngine.TerrainChangedFlags;
    static TreeInstances: UnityEngine.TerrainChangedFlags;
    value__: number;
    static WillBeDestroyed: UnityEngine.TerrainChangedFlags;
  }
}
declare namespace UnityEngine {
  class TerrainRenderFlags extends System.Enum {
    protected constructor();
    static all: UnityEngine.TerrainRenderFlags;
    static details: UnityEngine.TerrainRenderFlags;
    static heightmap: UnityEngine.TerrainRenderFlags;
    static trees: UnityEngine.TerrainRenderFlags;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Terrain extends UnityEngine.Behaviour {
    constructor();
    AddTreeInstance(instance: UnityEngine.TreeInstance): void;
    ApplyDelayedHeightmapModification(): void;
    static CreateTerrainGameObject(assignTerrain: UnityEngine.TerrainData): UnityEngine.GameObject;
    Flush(): void;
    GetClosestReflectionProbes(result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]): void;
    GetPosition(): UnityEngine.Vector3;
    GetSplatMaterialPropertyBlock(dest: UnityEngine.MaterialPropertyBlock): void;
    SampleHeight(worldPosition: UnityEngine.Vector3): number;
    SetNeighbors(left: UnityEngine.Terrain, top: UnityEngine.Terrain, right: UnityEngine.Terrain, bottom: UnityEngine.Terrain): void;
    SetSplatMaterialPropertyBlock(properties: UnityEngine.MaterialPropertyBlock): void;
    static readonly activeTerrain: UnityEngine.Terrain;
    static readonly activeTerrains: UnityEngine.Terrain[];
    bakeLightProbesForTrees: boolean;
    basemapDistance: number;
    castShadows: boolean;
    collectDetailPatches: boolean;
    detailObjectDensity: number;
    detailObjectDistance: number;
    drawHeightmap: boolean;
    drawTreesAndFoliage: boolean;
    editorRenderFlags: UnityEngine.TerrainRenderFlags;
    freeUnusedRenderingResources: boolean;
    heightmapMaximumLOD: number;
    heightmapPixelError: number;
    legacyShininess: number;
    legacySpecular: UnityEngine.Color;
    lightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    materialTemplate: UnityEngine.Material;
    materialType: UnityEngine.Terrain.MaterialType;
    patchBoundsMultiplier: UnityEngine.Vector3;
    realtimeLightmapIndex: number;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    splatmapDistance: number;
    terrainData: UnityEngine.TerrainData;
    treeBillboardDistance: number;
    treeCrossFadeLength: number;
    treeDistance: number;
    treeLODBiasMultiplier: number;
    treeMaximumFullLODCount: number;
  }
}
declare namespace UnityEngine.Terrain {
  class MaterialType extends System.Enum {
    protected constructor();
    static BuiltInLegacyDiffuse: UnityEngine.Terrain.MaterialType;
    static BuiltInLegacySpecular: UnityEngine.Terrain.MaterialType;
    static BuiltInStandard: UnityEngine.Terrain.MaterialType;
    static Custom: UnityEngine.Terrain.MaterialType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TerrainExtensions extends System.Object {
    protected constructor();
    static UpdateGIMaterials(terrain: UnityEngine.Terrain): void;
    static UpdateGIMaterials(terrain: UnityEngine.Terrain, x: number, y: number, width: number, height: number): void;
  }
}
declare namespace UnityEngine {
  class Tree extends UnityEngine.Component {
    constructor();
    data: UnityEngine.ScriptableObject;
    readonly hasSpeedTreeWind: boolean;
  }
}
declare namespace UnityEngine {
  class SpeedTreeWindAsset extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class TerrainCollider extends UnityEngine.Collider {
    constructor();
    terrainData: UnityEngine.TerrainData;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class InvalidSignatureException extends NUnit.Framework.ResultStateException {
    constructor(message: string);
    readonly ResultState: any;
  }
}
declare namespace NUnit.Framework {
  class ResultStateException extends System.Exception {
    constructor(message: string);
    constructor(message: string, inner: System.Exception);
    readonly ResultState: any;
  }
}
declare namespace UnityEngine.TestTools {
  class LogAssert extends System.Object {
    protected constructor();
    static Expect(type: UnityEngine.LogType, message: string): void;
    static Expect(type: UnityEngine.LogType, message: any): void;
    static NoUnexpectedReceived(): void;
    static ignoreFailingMessages: boolean;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class UnexpectedLogMessageException extends NUnit.Framework.ResultStateException {
    constructor(log: UnityEngine.TestTools.Logging.LogMatch);
    readonly ResultState: any;
    readonly StackTrace: string;
    LogEvent: UnityEngine.TestTools.Logging.LogMatch;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class UnhandledLogMessageException extends NUnit.Framework.ResultStateException {
    constructor(log: UnityEngine.TestTools.Logging.LogEvent);
    readonly ResultState: any;
    readonly StackTrace: string;
    LogEvent: UnityEngine.TestTools.Logging.LogEvent;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class UnityTestTimeoutException extends NUnit.Framework.ResultStateException {
    constructor(timeout: number);
    readonly ResultState: any;
    readonly StackTrace: string;
  }
}
declare namespace UnityEngine.TestTools.Logging {
  class ILogScope {
    protected constructor();
    readonly LogEvents: UnityEngine.TestTools.Logging.LogEvent[];
  }
}
declare namespace UnityEngine.TestTools.Logging {
  class LogEvent extends System.Object {
    constructor();
    ToString(): string;
    IsHandled: boolean;
    LogType: UnityEngine.LogType;
    Message: string;
    StackTrace: string;
  }
}
declare namespace UnityEngine.TestTools.Logging {
  class LogMatch extends System.Object {
    constructor();
    Matches(log: UnityEngine.TestTools.Logging.LogEvent): boolean;
    ToString(): string;
    LogType: any;
    Message: string;
    MessageRegex: any;
  }
}
declare namespace UnityEngine.TestTools.Logging {
  class LogScope extends System.Object {
    constructor();
    AddLog(message: string, stacktrace: string, type: UnityEngine.LogType): void;
    Dispose(): void;
    readonly AllLogs: UnityEngine.TestTools.Logging.LogEvent[];
    readonly ExpectedLogs: any;
    readonly FailingLogs: UnityEngine.TestTools.Logging.LogEvent[];
    IgnoreFailingMessages: boolean;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class ActionDelegator extends UnityEngine.TestTools.NUnitExtensions.BaseDelegator {
    constructor();
    Delegate(action: (() => void)): any;
    Delegate(action: (() => any)): any;
    Execute(logScope: UnityEngine.TestTools.Logging.LogScope): void;
    HasAction(): boolean;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class BaseDelegator extends System.Object {
    protected constructor();
    Abort(): void;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class ConstructDelegator extends UnityEngine.TestTools.NUnitExtensions.BaseDelegator {
    constructor(stateSerializer: UnityEngine.TestTools.NUnitExtensions.IStateSerializer);
    Delegate(type: any, arguments_: any[]): any;
    DestroyCurrentTestObjectIfExists(): void;
    Execute(logScope: UnityEngine.TestTools.Logging.LogScope): void;
    HasAction(): boolean;
  }
}
declare namespace UnityEngine.TestRunner.NUnitExtensions {
  class ITestExtensions extends System.Object {
    protected constructor();
    static GetAllCategoriesFromTest(test: any): string[];
    static GetChildIndex(test: any): number;
    static HasCategory(test: any, categoryFilter: string[]): boolean;
    static HasChildIndex(test: any): boolean;
    static ParseForNameDuplicates(test: any): void;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class IStateSerializer {
    protected constructor();
    CanRestoreFromJson(requestedType: any): boolean;
    CanRestoreFromScriptableObject(requestedType: any): boolean;
    RestoreClassFromJson(instance: any): void;
    RestoreScriptableObjectInstance(): UnityEngine.ScriptableObject;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class TestDelegator extends UnityEngine.TestTools.NUnitExtensions.BaseDelegator {
    constructor();
    DelegateTest(testMethod: any, contex: any): any;
    Dispose(): void;
    GetCurrentTestContext(): any;
    GetTestEnumerator(): any;
    HasTest(): boolean;
    RegisterResult(result: any): void;
    RegisterResultException(exception: System.Exception): void;
    ExecutedTests: UnityEngine.TestTools.TestRunner.TestResultSerializer[];
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class TestListenerWrapper extends System.Object {
    constructor(testStartedEvent: UnityEngine.TestTools.TestRunner.TestStartedEvent, testFinishedEvent: UnityEngine.TestTools.TestRunner.TestFinishedEvent);
    TestFinished(result: any): void;
    TestOutput(output: any): void;
    TestStarted(test: any): void;
    DelegateCalls: boolean;
    Delegator: UnityEngine.TestTools.NUnitExtensions.ActionDelegator;
    TestResultReplacements: UnityEngine.TestTools.TestRunner.TestResultSerializer[];
    m_ActionDelegator: UnityEngine.TestTools.NUnitExtensions.ActionDelegator;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class TestResultSerializer extends System.Object {
    constructor();
    IsPassed(): boolean;
    static MakeFromTestResult(result: any): UnityEngine.TestTools.TestRunner.TestResultSerializer;
    RestoreTestResult(result: any): void;
    fullName: string;
    id: string;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class UnityTestAssemblyBuilder extends NUnit.Framework.Api.DefaultTestAssemblyBuilder {
    constructor();
    Build(assembly: any, options: any): any;
    Build(assemblies: any[], options: any): any;
    Build(assemblyName: string, options: any): any;
    static GetNUnitTestBuilder(testPlatform: UnityEngine.TestTools.TestPlatform): UnityEngine.TestTools.NUnitExtensions.UnityTestAssemblyBuilder;
    static GetNUnitTestBuilderSettings(testPlatform: UnityEngine.TestTools.TestPlatform): any;
  }
}
declare namespace NUnit.Framework.Api {
  class DefaultTestAssemblyBuilder extends System.Object {
    constructor();
    Build(assembly: any, options: any): any;
    Build(assemblyName: string, options: any): any;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class UnityTestAssemblyRunner extends NUnit.Framework.Api.NUnitTestAssemblyRunner {
    constructor(builder: UnityEngine.TestTools.NUnitExtensions.UnityTestAssemblyBuilder);
    Load(assembly: any, settings: any): any;
    Load(assemblies: any[], settings: any): any;
    Load(assemblyName: string, settings: any): any;
  }
}
declare namespace NUnit.Framework.Api {
  class NUnitTestAssemblyRunner extends System.Object {
    constructor(builder: any);
    CountTestCases(filter: any): number;
    Load(assembly: any, settings: any): any;
    Load(assemblyName: string, settings: any): any;
    Run(listener: any, filter: any): any;
    RunAsync(listener: any, filter: any): void;
    StopRun(force: boolean): void;
    WaitForCompletion(timeout: number): boolean;
    readonly IsTestComplete: boolean;
    readonly IsTestLoaded: boolean;
    readonly IsTestRunning: boolean;
    readonly LoadedTest: any;
    readonly Result: any;
  }
}
declare namespace UnityEngine.TestTools {
  class UnityCombinatorialStrategy extends NUnit.Framework.Internal.Builders.CombinatorialStrategy {
    constructor();
    GetTestCases(sources: any[]): any;
    GetTestCases(sources: any[]): any;
  }
}
declare namespace NUnit.Framework.Internal.Builders {
  class CombinatorialStrategy extends System.Object {
    constructor();
    GetTestCases(sources: any[]): any;
  }
}
declare namespace UnityEngine.TestTools {
  class UnityPlatformAttribute extends NUnit.Framework.NUnitAttribute {
    constructor();
    constructor(include: UnityEngine.RuntimePlatform[]);
    ApplyToTest(test: any): void;
    exclude: UnityEngine.RuntimePlatform[];
    include: UnityEngine.RuntimePlatform[];
  }
}
declare namespace NUnit.Framework {
  class NUnitAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.TestTools {
  class UnityTestAttribute extends NUnit.Framework.CombiningStrategyAttribute {
    constructor();
    Wrap(command: NUnit.Framework.Internal.Commands.TestCommand): NUnit.Framework.Internal.Commands.TestCommand;
  }
}
declare namespace NUnit.Framework {
  class CombiningStrategyAttribute extends NUnit.Framework.NUnitAttribute {
    protected constructor();
    ApplyToTest(test: any): void;
    BuildFrom(method: any, suite: any): any;
  }
}
declare namespace UnityEngine.TestTools.NUnitExtensions {
  class DelegatedTestMethodCommand extends NUnit.Framework.Internal.Commands.TestCommand {
    constructor(testMethod: any);
    Execute(context: any): any;
  }
}
declare namespace NUnit.Framework.Internal.Commands {
  class TestCommand extends System.Object {
    constructor(test: any);
    Execute(context: any): any;
    readonly Test: any;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class PlaymodeTestsController extends UnityEngine.MonoBehaviour {
    constructor();
    Cleanup(): void;
    Run(): any;
    Start(): any;
    static TryCleanup(): void;
    settings: UnityEngine.TestTools.TestRunner.PlaymodeTestsControllerSettings;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class PlaymodeTestsControllerSettings extends System.Object {
    constructor();
    static CreateRunnerSettings(filter: UnityEngine.TestTools.TestRunner.GUI.TestRunnerFilter): UnityEngine.TestTools.TestRunner.PlaymodeTestsControllerSettings;
    bootstrapScene: string;
    filter: UnityEngine.TestTools.TestRunner.GUI.TestRunnerFilter;
    isBatchModeRun: boolean;
    originalScene: string;
    resultFilePath: string;
    sceneBased: boolean;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class TestEnumeratorWrapper extends System.Object {
    constructor(testMethod: any);
    GetEnumerator(context: any): any;
  }
}
declare namespace UnityEngine.TestTools {
  class TestPlatform extends System.Enum {
    protected constructor();
    static All: UnityEngine.TestTools.TestPlatform;
    static EditMode: UnityEngine.TestTools.TestPlatform;
    static PlayMode: UnityEngine.TestTools.TestPlatform;
    value__: number;
  }
}
declare namespace UnityEngine.TestTools {
  class TestPlatformEnumExtensions extends System.Object {
    protected constructor();
    static IsFlagIncluded(flags: UnityEngine.TestTools.TestPlatform, flag: UnityEngine.TestTools.TestPlatform): boolean;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.GUI {
  class TestRunnerFilter extends System.Object {
    constructor();
    BuildNUnitFilter(): any;
    BuildNUnitFilter(testsToSkip: UnityEngine.TestTools.TestRunner.TestResultSerializer[]): any;
    ClearResults(newResultList: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult[]): void;
    categories: string[];
    static empty: UnityEngine.TestTools.TestRunner.GUI.TestRunnerFilter;
    groupNames: string[];
    testNames: string[];
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class TestRunnerListener {
    protected constructor();
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(result: any): void;
    TestStarted(test: any): void;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class TestFinishedEvent {
    constructor();
    AddListener(call: ((arg0: any) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: any): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: any) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[NUnit.Framework.Interfaces.ITestResult, nunit.framework, Version=3.5.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: any) => void)): void;
    Invoke(arg0: any): void;
    RemoveListener(call: ((arg0: any) => void)): void;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class TestStartedEvent {
    constructor();
    AddListener(call: ((arg0: any) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: any): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: any) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[NUnit.Framework.Interfaces.ITest, nunit.framework, Version=3.5.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: any) => void)): void;
    Invoke(arg0: any): void;
    RemoveListener(call: ((arg0: any) => void)): void;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class RunFinishedEvent {
    constructor();
    AddListener(call: ((arg0: any) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: any): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: any) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.TestTools.TestRunner {
  class RunStartedEvent {
    constructor();
    AddListener(call: ((arg0: any) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: any): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: any) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.GUI {
  class TestRunnerResult extends System.Object {
    protected constructor();
    Clear(): void;
    static GetId(test: any): string;
    SetResultChangedCallback(resultUpdated: ((obj: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult) => void)): void;
    ToString(): string;
    Update(result: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult): void;
    description: string;
    duration: number;
    fullName: string;
    id: string;
    ignoredOrSkipped: boolean;
    isSuite: boolean;
    messages: string;
    name: string;
    notOutdated: boolean;
    notRunnable: boolean;
    output: string;
    resultStatus: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult.ResultStatus;
    stacktrace: string;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult {
  class ResultStatus extends System.Enum {
    protected constructor();
    static Failed: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult.ResultStatus;
    static Inconclusive: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult.ResultStatus;
    static NotRun: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult.ResultStatus;
    static Passed: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult.ResultStatus;
    static Skipped: UnityEngine.TestTools.TestRunner.GUI.TestRunnerResult.ResultStatus;
    value__: number;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.Callbacks {
  class PlayModeRunnerCallback extends UnityEngine.MonoBehaviour {
    constructor();
    OnGUI(): void;
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(result: any): void;
    TestStarted(test: any): void;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.Callbacks {
  class RemoteTestResultSender extends UnityEngine.MonoBehaviour {
    constructor();
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    SendDataRoutine(): any;
    Start(): void;
    TestFinished(test: any): void;
    TestStarted(test: any): void;
    isBatchModeRun: boolean;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.Callbacks.RemoteTestResultSender {
  class QueueData extends System.Object {
    constructor();
    data: number[];
    id: any;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.Callbacks {
  class TestResultRenderer extends System.Object {
    constructor(testResults: any);
    Draw(): void;
    ShowResults(): void;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.Callbacks.TestResultRenderer {
  class Styles extends System.Object {
    protected constructor();
    static FailedLabelStyle: UnityEngine.GUIStyle;
    static FailedMessagesStyle: UnityEngine.GUIStyle;
    static SucceedLabelStyle: UnityEngine.GUIStyle;
  }
}
declare namespace UnityEngine.TestTools.TestRunner.Callbacks {
  class TestResultWriter extends System.Object {
    constructor();
    WriteResultToFile(result: any, filePath: string): void;
    WriteResultToStream(result: any, streamWriter: any, settings?: any): void;
  }
}
declare namespace UnityEngine.TestTools {
  class EnterPlayMode extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.TestTools {
  class ExitPlayMode extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.TestTools {
  class RecompileScripts extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.TestRunner.TestLaunchers {
  class PlayerConnectionMessageIds extends System.Object {
    protected constructor();
    static readonly runFinishedMessageId: any;
    static readonly runInformationMessageId: any;
    static readonly testResultMessageId: any;
  }
}
declare namespace UnityEngine.TestTools.Utils {
  class CoroutineRunner extends System.Object {
    constructor(playmodeTestsController: UnityEngine.MonoBehaviour, logCollector: UnityEngine.TestTools.Logging.LogScope);
    GetDefaultTimeout(): number;
    HandleEnumerableTest(testEnumerator: any, timeout: number): any;
    HasFailedWithTimeout(): boolean;
  }
}
declare namespace UnityEngine.TestTools {
  class IPrebuildSetup {
    protected constructor();
    Setup(): void;
  }
}
declare namespace UnityEngine.TestTools.Utils {
  class ITestAssemblyProvider {
    protected constructor();
    GetTestsWithNUnit(): any;
    GetUserAssemblies(): any[];
  }
}
declare namespace UnityEngine.TestTools.Utils {
  class PlayerTestAssemblyProvider extends System.Object {
    constructor();
    GetTestsWithNUnit(): any;
    GetUserAssemblies(): any[];
  }
}
declare namespace UnityEngine.TestTools {
  class PrebuildSetupAttribute extends System.Attribute {
    constructor(setupClass: any);
    constructor(setupClass: string);
  }
}
declare namespace UnityEngine.TestTools.Utils {
  class StackTraceFilter extends System.Object {
    protected constructor();
    static Filter(inputStackTrace: string): string;
  }
}
declare namespace UnityEngine.TestTools.Utils {
  class TestAssemblyProviderHelper extends System.Object {
    constructor();
    static DefaultUserEditorAssemblies: string[];
  }
}
declare namespace UnityEngine.TestTools {
  class IMonoBehaviourTest {
    protected constructor();
    readonly IsTestFinished: boolean;
  }
}
declare namespace UnityEngine {
  class TextAlignment extends System.Enum {
    protected constructor();
    static Center: UnityEngine.TextAlignment;
    static Left: UnityEngine.TextAlignment;
    static Right: UnityEngine.TextAlignment;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TextAnchor extends System.Enum {
    protected constructor();
    static LowerCenter: UnityEngine.TextAnchor;
    static LowerLeft: UnityEngine.TextAnchor;
    static LowerRight: UnityEngine.TextAnchor;
    static MiddleCenter: UnityEngine.TextAnchor;
    static MiddleLeft: UnityEngine.TextAnchor;
    static MiddleRight: UnityEngine.TextAnchor;
    static UpperCenter: UnityEngine.TextAnchor;
    static UpperLeft: UnityEngine.TextAnchor;
    static UpperRight: UnityEngine.TextAnchor;
    value__: number;
  }
}
declare namespace UnityEngine {
  class HorizontalWrapMode extends System.Enum {
    protected constructor();
    static Overflow: UnityEngine.HorizontalWrapMode;
    value__: number;
    static Wrap: UnityEngine.HorizontalWrapMode;
  }
}
declare namespace UnityEngine {
  class VerticalWrapMode extends System.Enum {
    protected constructor();
    static Overflow: UnityEngine.VerticalWrapMode;
    static Truncate: UnityEngine.VerticalWrapMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class GUIText extends UnityEngine.GUIElement {
    constructor();
    alignment: UnityEngine.TextAlignment;
    anchor: UnityEngine.TextAnchor;
    color: UnityEngine.Color;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    lineSpacing: number;
    material: UnityEngine.Material;
    pixelOffset: UnityEngine.Vector2;
    richText: boolean;
    tabSize: number;
    text: string;
  }
}
declare namespace UnityEngine {
  class TextMesh extends UnityEngine.Component {
    constructor();
    alignment: UnityEngine.TextAlignment;
    anchor: UnityEngine.TextAnchor;
    characterSize: number;
    color: UnityEngine.Color;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    lineSpacing: number;
    offsetZ: number;
    richText: boolean;
    tabSize: number;
    text: string;
  }
}
declare namespace UnityEngine {
  class CharacterInfo extends System.ValueType {
    protected constructor();
    advance: number;
    bearing: number;
    glyphHeight: number;
    glyphWidth: number;
    maxX: number;
    maxY: number;
    minX: number;
    minY: number;
    uvBottomLeft: UnityEngine.Vector2;
    uvBottomRight: UnityEngine.Vector2;
    uvTopLeft: UnityEngine.Vector2;
    uvTopRight: UnityEngine.Vector2;
    flipped: boolean;
    index: number;
    size: number;
    style: UnityEngine.FontStyle;
    uv: UnityEngine.Rect;
    vert: UnityEngine.Rect;
    width: number;
  }
}
declare namespace UnityEngine {
  class Font extends UnityEngine.Object {
    constructor();
    constructor(name: string);
    static CreateDynamicFontFromOSFont(fontname: string, size: number): UnityEngine.Font;
    static CreateDynamicFontFromOSFont(fontnames: string[], size: number): UnityEngine.Font;
    GetCharacterInfo(ch: any, info: any): boolean;
    GetCharacterInfo(ch: any, info: any, size: number): boolean;
    GetCharacterInfo(ch: any, info: any, size: number, style: UnityEngine.FontStyle): boolean;
    static GetMaxVertsForString(str: string): number;
    static GetOSInstalledFontNames(): string[];
    HasCharacter(c: any): boolean;
    RequestCharactersInTexture(characters: string): void;
    RequestCharactersInTexture(characters: string, size: number): void;
    RequestCharactersInTexture(characters: string, size: number, style: UnityEngine.FontStyle): void;
    readonly ascent: number;
    characterInfo: UnityEngine.CharacterInfo[];
    readonly dynamic: boolean;
    fontNames: string[];
    readonly fontSize: number;
    readonly lineHeight: number;
    material: UnityEngine.Material;
    textureRebuildCallback: (() => void);
  }
}
declare namespace UnityEngine {
  class UICharInfo extends System.ValueType {
    protected constructor();
    charWidth: number;
    cursorPos: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class UILineInfo extends System.ValueType {
    protected constructor();
    height: number;
    leading: number;
    startCharIdx: number;
    topY: number;
  }
}
declare namespace UnityEngine {
  class UIVertex extends System.ValueType {
    protected constructor();
    color: UnityEngine.Color32;
    normal: UnityEngine.Vector3;
    position: UnityEngine.Vector3;
    static simpleVert: UnityEngine.UIVertex;
    tangent: UnityEngine.Vector4;
    uv0: UnityEngine.Vector2;
    uv1: UnityEngine.Vector2;
    uv2: UnityEngine.Vector2;
    uv3: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine {
  class TextGenerator extends System.Object {
    constructor();
    constructor(initialCapacity: number);
    GetCharacters(characters: UnityEngine.UICharInfo[]): void;
    GetCharactersArray(): UnityEngine.UICharInfo[];
    GetLines(lines: UnityEngine.UILineInfo[]): void;
    GetLinesArray(): UnityEngine.UILineInfo[];
    GetPreferredHeight(str: string, settings: UnityEngine.TextGenerationSettings): number;
    GetPreferredWidth(str: string, settings: UnityEngine.TextGenerationSettings): number;
    GetVertices(vertices: UnityEngine.UIVertex[]): void;
    GetVerticesArray(): UnityEngine.UIVertex[];
    Invalidate(): void;
    Populate(str: string, settings: UnityEngine.TextGenerationSettings): boolean;
    PopulateWithErrors(str: string, settings: UnityEngine.TextGenerationSettings, context: UnityEngine.GameObject): boolean;
    readonly characterCount: number;
    readonly characterCountVisible: number;
    readonly characters: UnityEngine.UICharInfo[];
    readonly fontSizeUsedForBestFit: number;
    readonly lineCount: number;
    readonly lines: UnityEngine.UILineInfo[];
    readonly rectExtents: UnityEngine.Rect;
    readonly vertexCount: number;
    readonly verts: UnityEngine.UIVertex[];
  }
}
declare namespace UnityEngine {
  class FontStyle extends System.Enum {
    protected constructor();
    static Bold: UnityEngine.FontStyle;
    static BoldAndItalic: UnityEngine.FontStyle;
    static Italic: UnityEngine.FontStyle;
    static Normal: UnityEngine.FontStyle;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TextGenerationError extends System.Enum {
    protected constructor();
    static CustomSizeOnNonDynamicFont: UnityEngine.TextGenerationError;
    static CustomStyleOnNonDynamicFont: UnityEngine.TextGenerationError;
    static NoFont: UnityEngine.TextGenerationError;
    static None: UnityEngine.TextGenerationError;
    value__: number;
  }
}
declare namespace UnityEngine {
  class TextGenerationSettings extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.TextGenerationSettings): boolean;
    alignByGeometry: boolean;
    color: UnityEngine.Color;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    generateOutOfBounds: boolean;
    generationExtents: UnityEngine.Vector2;
    horizontalOverflow: UnityEngine.HorizontalWrapMode;
    lineSpacing: number;
    pivot: UnityEngine.Vector2;
    resizeTextForBestFit: boolean;
    resizeTextMaxSize: number;
    resizeTextMinSize: number;
    richText: boolean;
    scaleFactor: number;
    textAnchor: UnityEngine.TextAnchor;
    updateBounds: boolean;
    verticalOverflow: UnityEngine.VerticalWrapMode;
  }
}
declare namespace UnityEngine.Tilemaps {
  class TileFlags extends System.Enum {
    protected constructor();
    static InstantiateGameObjectRuntimeOnly: UnityEngine.Tilemaps.TileFlags;
    static LockAll: UnityEngine.Tilemaps.TileFlags;
    static LockColor: UnityEngine.Tilemaps.TileFlags;
    static LockTransform: UnityEngine.Tilemaps.TileFlags;
    static None: UnityEngine.Tilemaps.TileFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Tilemaps {
  class Tilemap extends UnityEngine.GridLayout {
    constructor();
    AddTileFlags(position: UnityEngine.Vector3Int, flags: UnityEngine.Tilemaps.TileFlags): void;
    BoxFill(position: UnityEngine.Vector3Int, tile: UnityEngine.Object, startX: number, startY: number, endX: number, endY: number): void;
    ClearAllEditorPreviewTiles(): void;
    ClearAllTiles(): void;
    CompressBounds(): void;
    ContainsTile(tileAsset: UnityEngine.Tilemaps.TileBase): boolean;
    EditorPreviewFloodFill(position: UnityEngine.Vector3Int, tile: UnityEngine.Tilemaps.TileBase): void;
    FloodFill(position: UnityEngine.Vector3Int, tile: UnityEngine.Object): void;
    GetCellCenterLocal(position: UnityEngine.Vector3Int): UnityEngine.Vector3;
    GetCellCenterWorld(position: UnityEngine.Vector3Int): UnityEngine.Vector3;
    GetColliderType(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.Tile.ColliderType;
    GetColor(position: UnityEngine.Vector3Int): UnityEngine.Color;
    GetEditorPreviewColor(position: UnityEngine.Vector3Int): UnityEngine.Color;
    GetEditorPreviewSprite(position: UnityEngine.Vector3Int): UnityEngine.Sprite;
    GetEditorPreviewTile(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.TileBase;
    GetEditorPreviewTileFlags(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.TileFlags;
    GetEditorPreviewTransformMatrix(position: UnityEngine.Vector3Int): UnityEngine.Matrix4x4;
    GetInstantiatedObject(position: UnityEngine.Vector3Int): UnityEngine.GameObject;
    GetSprite(position: UnityEngine.Vector3Int): UnityEngine.Sprite;
    GetTile(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.TileBase;
    GetTileFlags(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.TileFlags;
    GetTilesBlock(bounds: UnityEngine.BoundsInt): UnityEngine.Tilemaps.TileBase[];
    GetTransformMatrix(position: UnityEngine.Vector3Int): UnityEngine.Matrix4x4;
    GetUsedTilesCount(): number;
    GetUsedTilesNonAlloc(usedTiles: UnityEngine.Tilemaps.TileBase[]): number;
    HasEditorPreviewTile(position: UnityEngine.Vector3Int): boolean;
    HasTile(position: UnityEngine.Vector3Int): boolean;
    RefreshAllTiles(): void;
    RefreshTile(position: UnityEngine.Vector3Int): void;
    RemoveTileFlags(position: UnityEngine.Vector3Int, flags: UnityEngine.Tilemaps.TileFlags): void;
    ResizeBounds(): void;
    SetColliderType(position: UnityEngine.Vector3Int, colliderType: UnityEngine.Tilemaps.Tile.ColliderType): void;
    SetColor(position: UnityEngine.Vector3Int, color: UnityEngine.Color): void;
    SetEditorPreviewColor(position: UnityEngine.Vector3Int, color: UnityEngine.Color): void;
    SetEditorPreviewTile(position: UnityEngine.Vector3Int, tile: UnityEngine.Tilemaps.TileBase): void;
    SetEditorPreviewTransformMatrix(position: UnityEngine.Vector3Int, transform: UnityEngine.Matrix4x4): void;
    SetTile(position: UnityEngine.Vector3Int, tile: UnityEngine.Tilemaps.TileBase): void;
    SetTileFlags(position: UnityEngine.Vector3Int, flags: UnityEngine.Tilemaps.TileFlags): void;
    SetTiles(positionArray: UnityEngine.Vector3Int[], tileArray: UnityEngine.Tilemaps.TileBase[]): void;
    SetTilesBlock(position: UnityEngine.BoundsInt, tileArray: UnityEngine.Tilemaps.TileBase[]): void;
    SetTransformMatrix(position: UnityEngine.Vector3Int, transform: UnityEngine.Matrix4x4): void;
    SwapTile(changeTile: UnityEngine.Tilemaps.TileBase, newTile: UnityEngine.Tilemaps.TileBase): void;
    animationFrameRate: number;
    readonly cellBounds: UnityEngine.BoundsInt;
    color: UnityEngine.Color;
    readonly editorPreviewOrigin: UnityEngine.Vector3Int;
    readonly editorPreviewSize: UnityEngine.Vector3Int;
    readonly layoutGrid: UnityEngine.Grid;
    readonly localBounds: UnityEngine.Bounds;
    orientation: UnityEngine.Tilemaps.Tilemap.Orientation;
    orientationMatrix: UnityEngine.Matrix4x4;
    origin: UnityEngine.Vector3Int;
    size: UnityEngine.Vector3Int;
    tileAnchor: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.Tilemaps.Tilemap {
  class Orientation extends System.Enum {
    protected constructor();
    static Custom: UnityEngine.Tilemaps.Tilemap.Orientation;
    value__: number;
    static XY: UnityEngine.Tilemaps.Tilemap.Orientation;
    static XZ: UnityEngine.Tilemaps.Tilemap.Orientation;
    static YX: UnityEngine.Tilemaps.Tilemap.Orientation;
    static YZ: UnityEngine.Tilemaps.Tilemap.Orientation;
    static ZX: UnityEngine.Tilemaps.Tilemap.Orientation;
    static ZY: UnityEngine.Tilemaps.Tilemap.Orientation;
  }
}
declare namespace UnityEngine.Tilemaps {
  class TilemapRenderer extends UnityEngine.Renderer {
    constructor();
    chunkSize: UnityEngine.Vector3Int;
    maskInteraction: UnityEngine.SpriteMaskInteraction;
    maxChunkCount: number;
    maxFrameAge: number;
    sortOrder: UnityEngine.Tilemaps.TilemapRenderer.SortOrder;
  }
}
declare namespace UnityEngine.Tilemaps.TilemapRenderer {
  class SortOrder extends System.Enum {
    protected constructor();
    static BottomLeft: UnityEngine.Tilemaps.TilemapRenderer.SortOrder;
    static BottomRight: UnityEngine.Tilemaps.TilemapRenderer.SortOrder;
    static TopLeft: UnityEngine.Tilemaps.TilemapRenderer.SortOrder;
    static TopRight: UnityEngine.Tilemaps.TilemapRenderer.SortOrder;
    value__: number;
  }
}
declare namespace UnityEngine.Tilemaps {
  class TileData extends System.ValueType {
    protected constructor();
    colliderType: UnityEngine.Tilemaps.Tile.ColliderType;
    color: UnityEngine.Color;
    flags: UnityEngine.Tilemaps.TileFlags;
    gameObject: UnityEngine.GameObject;
    sprite: UnityEngine.Sprite;
    transform: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Tilemaps {
  class TileAnimationData extends System.ValueType {
    protected constructor();
    animatedSprites: UnityEngine.Sprite[];
    animationSpeed: number;
    animationStartTime: number;
  }
}
declare namespace UnityEngine.Tilemaps {
  class TilemapCollider2D extends UnityEngine.Collider2D {
    constructor();
  }
}
declare namespace UnityEngine {
  class CustomGridBrushAttribute extends System.Attribute {
    constructor();
    constructor(hideAssetInstances: boolean, hideDefaultInstance: boolean, defaultBrush: boolean, defaultName: string);
    readonly defaultBrush: boolean;
    readonly defaultName: string;
    readonly hideAssetInstances: boolean;
    readonly hideDefaultInstance: boolean;
  }
}
declare namespace UnityEngine {
  class GridBrushBase extends UnityEngine.ScriptableObject {
    protected constructor();
    BoxErase(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
    BoxFill(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
    Erase(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.Vector3Int): void;
    Flip(flip: UnityEngine.GridBrushBase.FlipAxis, layout: UnityEngine.GridLayout.CellLayout): void;
    FloodFill(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.Vector3Int): void;
    Move(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, from: UnityEngine.BoundsInt, to: UnityEngine.BoundsInt): void;
    MoveEnd(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
    MoveStart(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
    Paint(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.Vector3Int): void;
    Pick(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt, pivot: UnityEngine.Vector3Int): void;
    Rotate(direction: UnityEngine.GridBrushBase.RotationDirection, layout: UnityEngine.GridLayout.CellLayout): void;
    Select(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
  }
}
declare namespace UnityEngine.GridBrushBase {
  class Tool extends System.Enum {
    protected constructor();
    static Box: UnityEngine.GridBrushBase.Tool;
    static Erase: UnityEngine.GridBrushBase.Tool;
    static FloodFill: UnityEngine.GridBrushBase.Tool;
    static Move: UnityEngine.GridBrushBase.Tool;
    static Paint: UnityEngine.GridBrushBase.Tool;
    static Pick: UnityEngine.GridBrushBase.Tool;
    static Select: UnityEngine.GridBrushBase.Tool;
    value__: number;
  }
}
declare namespace UnityEngine.GridBrushBase {
  class RotationDirection extends System.Enum {
    protected constructor();
    static Clockwise: UnityEngine.GridBrushBase.RotationDirection;
    static CounterClockwise: UnityEngine.GridBrushBase.RotationDirection;
    value__: number;
  }
}
declare namespace UnityEngine.GridBrushBase {
  class FlipAxis extends System.Enum {
    protected constructor();
    value__: number;
    static X: UnityEngine.GridBrushBase.FlipAxis;
    static Y: UnityEngine.GridBrushBase.FlipAxis;
  }
}
declare namespace UnityEngine.Tilemaps {
  class ITilemap extends System.Object {
    protected constructor();
    GetColor(position: UnityEngine.Vector3Int): UnityEngine.Color;
    GetSprite(position: UnityEngine.Vector3Int): UnityEngine.Sprite;
    GetTile(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.TileBase;
    GetTileFlags(position: UnityEngine.Vector3Int): UnityEngine.Tilemaps.TileFlags;
    GetTransformMatrix(position: UnityEngine.Vector3Int): UnityEngine.Matrix4x4;
    RefreshTile(position: UnityEngine.Vector3Int): void;
    readonly cellBounds: UnityEngine.BoundsInt;
    readonly localBounds: UnityEngine.Bounds;
    readonly origin: UnityEngine.Vector3Int;
    readonly size: UnityEngine.Vector3Int;
  }
}
declare namespace UnityEngine.Tilemaps {
  class Tile extends UnityEngine.Tilemaps.TileBase {
    constructor();
    GetTileData(position: UnityEngine.Vector3Int, tilemap: UnityEngine.Tilemaps.ITilemap, tileData: any): void;
    colliderType: UnityEngine.Tilemaps.Tile.ColliderType;
    color: UnityEngine.Color;
    flags: UnityEngine.Tilemaps.TileFlags;
    gameObject: UnityEngine.GameObject;
    sprite: UnityEngine.Sprite;
    transform: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Tilemaps {
  class TileBase extends UnityEngine.ScriptableObject {
    protected constructor();
    GetTileAnimationData(position: UnityEngine.Vector3Int, tilemap: UnityEngine.Tilemaps.ITilemap, tileAnimationData: any): boolean;
    GetTileData(position: UnityEngine.Vector3Int, tilemap: UnityEngine.Tilemaps.ITilemap, tileData: any): void;
    RefreshTile(position: UnityEngine.Vector3Int, tilemap: UnityEngine.Tilemaps.ITilemap): void;
    StartUp(position: UnityEngine.Vector3Int, tilemap: UnityEngine.Tilemaps.ITilemap, go: UnityEngine.GameObject): boolean;
  }
}
declare namespace UnityEngine.Tilemaps.Tile {
  class ColliderType extends System.Enum {
    protected constructor();
    static Grid: UnityEngine.Tilemaps.Tile.ColliderType;
    static None: UnityEngine.Tilemaps.Tile.ColliderType;
    static Sprite: UnityEngine.Tilemaps.Tile.ColliderType;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class ClipCaps extends System.Enum {
    protected constructor();
    static All: UnityEngine.Timeline.ClipCaps;
    static Blending: UnityEngine.Timeline.ClipCaps;
    static ClipIn: UnityEngine.Timeline.ClipCaps;
    static Extrapolation: UnityEngine.Timeline.ClipCaps;
    static Looping: UnityEngine.Timeline.ClipCaps;
    static None: UnityEngine.Timeline.ClipCaps;
    static SpeedMultiplier: UnityEngine.Timeline.ClipCaps;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class TimelineClipCapsExtensions extends System.Object {
    protected constructor();
    static HasAll(caps: UnityEngine.Timeline.ClipCaps, flags: UnityEngine.Timeline.ClipCaps): boolean;
    static HasAny(caps: UnityEngine.Timeline.ClipCaps, flags: UnityEngine.Timeline.ClipCaps): boolean;
    static SupportsBlending(clip: UnityEngine.Timeline.TimelineClip): boolean;
    static SupportsClipIn(clip: UnityEngine.Timeline.TimelineClip): boolean;
    static SupportsExtrapolation(clip: UnityEngine.Timeline.TimelineClip): boolean;
    static SupportsLooping(clip: UnityEngine.Timeline.TimelineClip): boolean;
    static SupportsSpeedMultiplier(clip: UnityEngine.Timeline.TimelineClip): boolean;
  }
}
declare namespace UnityEngine.Timeline {
  class DiscreteTime extends System.ValueType {
    protected constructor();
    CompareTo(obj: any): number;
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.Timeline.DiscreteTime): boolean;
    GetHashCode(): number;
    static GetNearestTick(time: number): number;
    GetTick(): number;
    static Max(lhs: UnityEngine.Timeline.DiscreteTime, rhs: UnityEngine.Timeline.DiscreteTime): UnityEngine.Timeline.DiscreteTime;
    static Min(lhs: UnityEngine.Timeline.DiscreteTime, rhs: UnityEngine.Timeline.DiscreteTime): UnityEngine.Timeline.DiscreteTime;
    OneTickAfter(): UnityEngine.Timeline.DiscreteTime;
    OneTickBefore(): UnityEngine.Timeline.DiscreteTime;
    static SnapToNearestTick(time: number): number;
    static SnapToNearestTick(time: number): number;
    ToString(): string;
    static readonly tickValue: number;
    static kMaxTime: UnityEngine.Timeline.DiscreteTime;
  }
}
declare namespace UnityEngine.Timeline {
  class GroupTrack extends UnityEngine.Timeline.TrackAsset {
    constructor();
    readonly outputs: any;
  }
}
declare namespace UnityEngine.Timeline {
  class TrackAsset extends UnityEngine.Playables.PlayableAsset {
    protected constructor();
    CreateDefaultClip(): UnityEngine.Timeline.TimelineClip;
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    CreateTrackMixer(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject, inputCount: number): UnityEngine.Playables.Playable;
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
    GetChildTracks(): any;
    GetClips(): any;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    OnEnable(): void;
    readonly duration: number;
    readonly end: number;
    readonly isEmpty: boolean;
    readonly isSubTrack: boolean;
    muted: boolean;
    readonly outputs: any;
    readonly parent: UnityEngine.Playables.PlayableAsset;
    readonly start: number;
    readonly timelineAsset: UnityEngine.Timeline.TimelineAsset;
  }
}
declare namespace UnityEngine.Timeline {
  class Placeholder extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.Timeline {
  class TimelineAsset extends UnityEngine.Playables.PlayableAsset {
    constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    CreateTrack(type: any, parent: UnityEngine.Timeline.TrackAsset, name: string): UnityEngine.Timeline.TrackAsset;
    DeleteClip(clip: UnityEngine.Timeline.TimelineClip): boolean;
    DeleteTrack(track: UnityEngine.Timeline.TrackAsset): boolean;
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
    GetOutputTrack(index: number): UnityEngine.Timeline.TrackAsset;
    GetOutputTracks(): any;
    GetRootTrack(index: number): UnityEngine.Timeline.TrackAsset;
    GetRootTracks(): any;
    OnEnable(): void;
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
    readonly duration: number;
    durationMode: UnityEngine.Timeline.TimelineAsset.DurationMode;
    readonly editorSettings: UnityEngine.Timeline.TimelineAsset.EditorSettings;
    fixedDuration: number;
    readonly outputs: any;
    readonly outputTrackCount: number;
    readonly rootTrackCount: number;
  }
}
declare namespace UnityEngine.Timeline.TimelineAsset {
  class MediaType extends System.Enum {
    protected constructor();
    static Animation: UnityEngine.Timeline.TimelineAsset.MediaType;
    static Audio: UnityEngine.Timeline.TimelineAsset.MediaType;
    static Group: UnityEngine.Timeline.TimelineAsset.MediaType;
    static Hybrid: UnityEngine.Timeline.TimelineAsset.MediaType;
    static Script: UnityEngine.Timeline.TimelineAsset.MediaType;
    value__: number;
    static Video: UnityEngine.Timeline.TimelineAsset.MediaType;
  }
}
declare namespace UnityEngine.Timeline.TimelineAsset {
  class DurationMode extends System.Enum {
    protected constructor();
    static BasedOnClips: UnityEngine.Timeline.TimelineAsset.DurationMode;
    static FixedLength: UnityEngine.Timeline.TimelineAsset.DurationMode;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline.TimelineAsset {
  class EditorSettings extends System.Object {
    constructor();
    fps: number;
  }
}
declare namespace UnityEngine.Timeline {
  class TrackClipTypeAttribute extends System.Attribute {
    constructor(clipClass: any);
    inspectedType: any;
  }
}
declare namespace UnityEngine.Timeline {
  class TrackMediaType extends System.Attribute {
    constructor(mt: UnityEngine.Timeline.TimelineAsset.MediaType);
    m_MediaType: UnityEngine.Timeline.TimelineAsset.MediaType;
  }
}
declare namespace UnityEngine.Timeline {
  class NotKeyableAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Timeline {
  class TrackBindingTypeAttribute extends System.Attribute {
    constructor(type: any);
    type: any;
  }
}
declare namespace UnityEngine.Timeline {
  class SupportsChildTracksAttribute extends System.Attribute {
    constructor(childType?: any, levels?: number);
    childType: any;
    levels: number;
  }
}
declare namespace UnityEngine.Timeline {
  class IgnoreOnPlayableTrackAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEngine.Timeline {
  class TimeFieldAttribute extends UnityEngine.PropertyAttribute {
    constructor();
  }
}
declare namespace UnityEngine.Timeline {
  class ITimelineClipAsset {
    protected constructor();
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
  }
}
declare namespace UnityEngine.Timeline {
  class ITimelineItem {
    protected constructor();
    Hash(): number;
    readonly parentTrack: UnityEngine.Timeline.TrackAsset;
    readonly start: number;
  }
}
declare namespace UnityEngine.Timeline {
  class TimelineClip extends System.Object {
    protected constructor();
    EvaluateMixIn(localTime: number): number;
    EvaluateMixOut(localTime: number): number;
    IsExtrapolatedTime(sequenceTime: number): boolean;
    IsPostExtrapolatedTime(sequenceTime: number): boolean;
    IsPreExtrapolatedTime(sequenceTime: number): boolean;
    ToLocalTime(time: number): number;
    ToLocalTimeUnbound(time: number): number;
    readonly animationClip: UnityEngine.AnimationClip;
    asset: UnityEngine.Object;
    blendInCurveMode: UnityEngine.Timeline.TimelineClip.BlendCurveMode;
    blendInDuration: number;
    blendOutCurveMode: UnityEngine.Timeline.TimelineClip.BlendCurveMode;
    blendOutDuration: number;
    readonly clipAssetDuration: number;
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
    clipIn: number;
    readonly curves: UnityEngine.AnimationClip;
    displayName: string;
    duration: number;
    easeInDuration: number;
    easeOutDuration: number;
    readonly eastOutTime: number;
    readonly end: number;
    readonly exposedParameters: string[];
    readonly extrapolatedDuration: number;
    readonly extrapolatedStart: number;
    readonly hasBlendIn: boolean;
    readonly hasBlendOut: boolean;
    readonly hasPostExtrapolation: boolean;
    readonly hasPreExtrapolation: boolean;
    mixInCurve: UnityEngine.AnimationCurve;
    readonly mixInDuration: number;
    readonly mixInPercentage: number;
    mixOutCurve: UnityEngine.AnimationCurve;
    readonly mixOutDuration: number;
    readonly mixOutPercentage: number;
    readonly mixOutTime: number;
    parentTrack: UnityEngine.Timeline.TrackAsset;
    readonly postExtrapolationMode: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    readonly preExtrapolationMode: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    readonly recordable: boolean;
    start: number;
    timeScale: number;
    underlyingAsset: UnityEngine.Object;
    static kDefaultClipCaps: UnityEngine.Timeline.ClipCaps;
    static kDefaultClipDurationInSeconds: number;
    static kTimeScaleMax: number;
    static kTimeScaleMin: number;
  }
}
declare namespace UnityEngine.Timeline.TimelineClip {
  class ClipExtrapolation extends System.Enum {
    protected constructor();
    static Continue: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    static Hold: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    static Loop: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    static None: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    static PingPong: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline.TimelineClip {
  class BlendCurveMode extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.Timeline.TimelineClip.BlendCurveMode;
    static Manual: UnityEngine.Timeline.TimelineClip.BlendCurveMode;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class TimelineMarker extends System.Object {
    constructor(key: string, time: number, parentTrack: UnityEngine.Timeline.TrackAsset);
    readonly key: string;
    readonly parentTrack: UnityEngine.Timeline.TrackAsset;
    selected: boolean;
    time: number;
  }
}
declare namespace UnityEngine.Timeline {
  class ITimelineEvaluateCallback {
    protected constructor();
    Evaluate(): void;
  }
}
declare namespace UnityEngine.Timeline {
  class IntervalTreeRebalancer extends System.Object {
    constructor(tree: any);
    Rebalance(): boolean;
  }
}
declare namespace UnityEngine.Timeline {
  class TimelinePlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    Compile(graph: UnityEngine.Playables.PlayableGraph, timelinePlayable: UnityEngine.Playables.Playable, tracks: any, go: UnityEngine.GameObject, autoRebalance: boolean, createOutputs: boolean): void;
    static Create(graph: UnityEngine.Playables.PlayableGraph, tracks: any, go: UnityEngine.GameObject, autoRebalance: boolean, createOutputs: boolean): any;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
  }
}
declare namespace UnityEngine.Timeline.TimelinePlayable {
  class ConnectionCache extends System.ValueType {
    protected constructor();
    evalWeight: number;
    parent: UnityEngine.Playables.Playable;
    playable: UnityEngine.Playables.Playable;
    port: number;
  }
}
declare namespace UnityEngine.Timeline {
  class ActivationMixerPlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, inputCount: number): any;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    ProcessFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: any): void;
    boundGameObject: UnityEngine.GameObject;
    postPlaybackState: UnityEngine.Timeline.ActivationTrack.PostPlaybackState;
  }
}
declare namespace UnityEngine.Timeline {
  class ActivationPlayableAsset extends UnityEngine.Playables.PlayableAsset {
    constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
  }
}
declare namespace UnityEngine.Timeline {
  class ActivationTrack extends UnityEngine.Timeline.TrackAsset {
    constructor();
    CreateTrackMixer(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject, inputCount: number): UnityEngine.Playables.Playable;
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
    postPlaybackState: UnityEngine.Timeline.ActivationTrack.PostPlaybackState;
  }
}
declare namespace UnityEngine.Timeline.ActivationTrack {
  class PostPlaybackState extends System.Enum {
    protected constructor();
    static Active: UnityEngine.Timeline.ActivationTrack.PostPlaybackState;
    static Inactive: UnityEngine.Timeline.ActivationTrack.PostPlaybackState;
    static LeaveAsIs: UnityEngine.Timeline.ActivationTrack.PostPlaybackState;
    static Revert: UnityEngine.Timeline.ActivationTrack.PostPlaybackState;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class AnimationDefaultTrack extends System.Object {
    protected constructor();
    static AddDefaultHumanoidTrack(graph: UnityEngine.Playables.PlayableGraph, rootPlayable: UnityEngine.Playables.Playable, animator: UnityEngine.Animator): void;
    static GetAnimator(asset: UnityEngine.Timeline.TrackAsset, director: UnityEngine.Playables.PlayableDirector): UnityEngine.Animator;
    static readonly defaultHumanoidClip: UnityEngine.AnimationClip;
  }
}
declare namespace UnityEngine.Timeline {
  class AnimationOutputWeightProcessor extends System.Object {
    constructor(output: UnityEngine.Animations.AnimationPlayableOutput);
    Evaluate(): void;
  }
}
declare namespace UnityEngine.Timeline.AnimationOutputWeightProcessor {
  class WeightInfo extends System.ValueType {
    protected constructor();
    mixer: UnityEngine.Playables.Playable;
    modulate: boolean;
    parentMixer: UnityEngine.Playables.Playable;
    port: number;
  }
}
declare namespace UnityEngine.Timeline {
  class AnimationPlayableAsset extends UnityEngine.Playables.PlayableAsset {
    constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
    LiveLink(): void;
    ResetOffsets(): void;
    clip: UnityEngine.AnimationClip;
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
    readonly duration: number;
    matchTargetFields: UnityEngine.Timeline.MatchTargetFields;
    readonly outputs: any;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    useTrackMatchFields: boolean;
  }
}
declare namespace UnityEngine.Timeline {
  class MatchTargetFields extends System.Enum {
    protected constructor();
    static PositionX: UnityEngine.Timeline.MatchTargetFields;
    static PositionY: UnityEngine.Timeline.MatchTargetFields;
    static PositionZ: UnityEngine.Timeline.MatchTargetFields;
    static RotationX: UnityEngine.Timeline.MatchTargetFields;
    static RotationY: UnityEngine.Timeline.MatchTargetFields;
    static RotationZ: UnityEngine.Timeline.MatchTargetFields;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class MatchTargetFieldConstants extends System.Object {
    protected constructor();
    static HasAny(me: UnityEngine.Timeline.MatchTargetFields, fields: UnityEngine.Timeline.MatchTargetFields): boolean;
    static Toggle(me: UnityEngine.Timeline.MatchTargetFields, flag: UnityEngine.Timeline.MatchTargetFields): UnityEngine.Timeline.MatchTargetFields;
    static All: UnityEngine.Timeline.MatchTargetFields;
    static None: UnityEngine.Timeline.MatchTargetFields;
    static Position: UnityEngine.Timeline.MatchTargetFields;
    static Rotation: UnityEngine.Timeline.MatchTargetFields;
  }
}
declare namespace UnityEngine.Timeline {
  class AnimationTrack extends UnityEngine.Timeline.TrackAsset {
    constructor();
    CreateClip(clip: UnityEngine.AnimationClip): UnityEngine.Timeline.TimelineClip;
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
    applyAvatarMask: boolean;
    applyOffsets: boolean;
    avatarMask: UnityEngine.AvatarMask;
    readonly inClipMode: boolean;
    matchTargetFields: UnityEngine.Timeline.MatchTargetFields;
    openClipOffsetPosition: UnityEngine.Vector3;
    openClipOffsetRotation: UnityEngine.Quaternion;
    openClipPostExtrapolation: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    openClipPreExtrapolation: UnityEngine.Timeline.TimelineClip.ClipExtrapolation;
    readonly outputs: any;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
  }
}
declare namespace UnityEngine.Timeline {
  class TrackColorAttribute extends System.Attribute {
    constructor(r: number, g: number, b: number);
    readonly color: UnityEngine.Color;
  }
}
declare namespace UnityEngine.Timeline {
  class AudioPlayableAsset extends UnityEngine.Playables.PlayableAsset {
    constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    clip: UnityEngine.AudioClip;
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
    readonly duration: number;
    readonly outputs: any;
  }
}
declare namespace UnityEngine.Timeline {
  class AudioTrack extends UnityEngine.Timeline.TrackAsset {
    constructor();
    CreateClip(clip: UnityEngine.AudioClip): UnityEngine.Timeline.TimelineClip;
    readonly outputs: any;
  }
}
declare namespace UnityEngine.Timeline {
  class ControlPlayableAsset extends UnityEngine.Playables.PlayableAsset {
    constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, go: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
    OnEnable(): void;
    readonly clipCaps: UnityEngine.Timeline.ClipCaps;
    readonly duration: number;
    active: boolean;
    particleRandomSeed: number;
    postPlayback: UnityEngine.Timeline.ActivationControlPlayable.PostPlaybackState;
    prefabGameObject: UnityEngine.GameObject;
    searchHierarchy: boolean;
    sourceGameObject: any;
    updateDirector: boolean;
    updateITimeControl: boolean;
    updateParticle: boolean;
  }
}
declare namespace UnityEngine.Timeline {
  class ControlTrack extends UnityEngine.Timeline.TrackAsset {
    constructor();
  }
}
declare namespace UnityEngine {
  class IInterval {
    protected constructor();
    intervalBit: number;
    readonly intervalEnd: number;
    readonly intervalStart: number;
  }
}
declare namespace UnityEngine.Timeline {
  class RuntimeClip extends UnityEngine.Timeline.RuntimeClipBase {
    constructor(clip: UnityEngine.Timeline.TimelineClip, clipPlayable: UnityEngine.Playables.Playable, parentMixer: UnityEngine.Playables.Playable);
    EvaluateAt(localTime: number, frameData: UnityEngine.Playables.FrameData): void;
    SetDuration(duration: number): void;
    SetTime(time: number): void;
    readonly clip: UnityEngine.Timeline.TimelineClip;
    readonly duration: number;
    readonly mixer: UnityEngine.Playables.Playable;
    readonly playable: UnityEngine.Playables.Playable;
    readonly start: number;
  }
}
declare namespace UnityEngine.Timeline {
  class RuntimeClipBase extends UnityEngine.Timeline.RuntimeElement {
    protected constructor();
    readonly duration: number;
    readonly intervalEnd: number;
    readonly intervalStart: number;
    readonly start: number;
  }
}
declare namespace UnityEngine.Timeline {
  class RuntimeElement extends System.Object {
    protected constructor();
    EvaluateAt(localTime: number, frameData: UnityEngine.Playables.FrameData): void;
    intervalBit: number;
    readonly intervalEnd: number;
    readonly intervalStart: number;
  }
}
declare namespace UnityEngine.Timeline {
  class ScheduleRuntimeClip extends UnityEngine.Timeline.RuntimeClipBase {
    constructor(clip: UnityEngine.Timeline.TimelineClip, clipPlayable: UnityEngine.Playables.Playable, parentMixer: UnityEngine.Playables.Playable, startDelay?: number, finishTail?: number);
    EvaluateAt(localTime: number, frameData: UnityEngine.Playables.FrameData): void;
    SetTime(time: number): void;
    readonly clip: UnityEngine.Timeline.TimelineClip;
    readonly duration: number;
    readonly mixer: UnityEngine.Playables.Playable;
    readonly playable: UnityEngine.Playables.Playable;
    readonly start: number;
  }
}
declare namespace UnityEngine.Timeline {
  class TrackAssetExtensions extends System.Object {
    protected constructor();
    static GetGroup(asset: UnityEngine.Timeline.TrackAsset): UnityEngine.Timeline.GroupTrack;
    static SetGroup(asset: UnityEngine.Timeline.TrackAsset, group: UnityEngine.Timeline.GroupTrack): void;
  }
}
declare namespace UnityEngine.Timeline {
  class ActivationControlPlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, gameObject: UnityEngine.GameObject, postPlaybackState: UnityEngine.Timeline.ActivationControlPlayable.PostPlaybackState): any;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnGraphStart(playable: UnityEngine.Playables.Playable): void;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    ProcessFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, userData: any): void;
    gameObject: UnityEngine.GameObject;
    postPlayback: UnityEngine.Timeline.ActivationControlPlayable.PostPlaybackState;
  }
}
declare namespace UnityEngine.Timeline.ActivationControlPlayable {
  class PostPlaybackState extends System.Enum {
    protected constructor();
    static Active: UnityEngine.Timeline.ActivationControlPlayable.PostPlaybackState;
    static Inactive: UnityEngine.Timeline.ActivationControlPlayable.PostPlaybackState;
    static Revert: UnityEngine.Timeline.ActivationControlPlayable.PostPlaybackState;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline.ActivationControlPlayable {
  class InitialState extends System.Enum {
    protected constructor();
    static Active: UnityEngine.Timeline.ActivationControlPlayable.InitialState;
    static Inactive: UnityEngine.Timeline.ActivationControlPlayable.InitialState;
    static Unset: UnityEngine.Timeline.ActivationControlPlayable.InitialState;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class BasicPlayableBehaviour extends UnityEngine.ScriptableObject {
    constructor();
    CreatePlayable(graph: UnityEngine.Playables.PlayableGraph, owner: UnityEngine.GameObject): UnityEngine.Playables.Playable;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnGraphStart(playable: UnityEngine.Playables.Playable): void;
    OnGraphStop(playable: UnityEngine.Playables.Playable): void;
    OnPlayableCreate(playable: UnityEngine.Playables.Playable): void;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    ProcessFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: any): void;
    readonly duration: number;
    readonly outputs: any;
  }
}
declare namespace UnityEngine.Timeline {
  class DirectorControlPlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, director: UnityEngine.Playables.PlayableDirector): any;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    director: UnityEngine.Playables.PlayableDirector;
  }
}
declare namespace UnityEngine.Timeline {
  class EventPlayable extends UnityEngine.Playables.PlayableBehaviour {
    protected constructor();
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    OnTrigger(): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    ProcessFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: any): void;
    triggerTime: number;
  }
}
declare namespace UnityEngine.Timeline {
  class ITimeControl {
    protected constructor();
    OnControlTimeStart(): void;
    OnControlTimeStop(): void;
    SetTime(time: number): void;
  }
}
declare namespace UnityEngine.Timeline {
  class ParticleControlPlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, component: UnityEngine.ParticleSystem, randomSeed: number): any;
    Initialize(particleSystem: UnityEngine.ParticleSystem, randomSeed: number): void;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, data: UnityEngine.Playables.FrameData): void;
    readonly particleSystem: UnityEngine.ParticleSystem;
  }
}
declare namespace UnityEngine.Timeline {
  class PrefabControlPlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, prefabGameObject: UnityEngine.GameObject, parentTransform: UnityEngine.Transform): any;
    Initialize(prefabGameObject: UnityEngine.GameObject, parentTransform: UnityEngine.Transform): UnityEngine.GameObject;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnPlayableDestroy(playable: UnityEngine.Playables.Playable): void;
    readonly prefabInstance: UnityEngine.GameObject;
  }
}
declare namespace UnityEngine.Timeline {
  class TimeControlPlayable extends UnityEngine.Playables.PlayableBehaviour {
    constructor();
    static Create(graph: UnityEngine.Playables.PlayableGraph, timeControl: UnityEngine.Timeline.ITimeControl): any;
    Initialize(timeControl: UnityEngine.Timeline.ITimeControl): void;
    OnBehaviourPause(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    OnBehaviourPlay(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
    PrepareFrame(playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData): void;
  }
}
declare namespace UnityEngine.Timeline {
  class PlayableTrack extends UnityEngine.Timeline.TrackAsset {
    constructor();
  }
}
declare namespace UnityEngine.Timeline {
  class Extrapolation extends System.Object {
    protected constructor();
    static kMinExtrapolationTime: number;
  }
}
declare namespace UnityEngine.Timeline {
  class HashUtility extends System.Object {
    protected constructor();
    static CombineHash(h1: number, h2: number): number;
    static CombineHash(h1: number, h2: number, h3: number): number;
    static CombineHash(h1: number, h2: number, h3: number, h4: number): number;
    static CombineHash(h1: number, h2: number, h3: number, h4: number, h5: number): number;
    static CombineHash(h1: number, h2: number, h3: number, h4: number, h5: number, h6: number): number;
    static CombineHash(h1: number, h2: number, h3: number, h4: number, h5: number, h6: number, h7: number): number;
    static CombineHash(hashes: number[]): number;
  }
}
declare namespace UnityEngine.Timeline {
  class IPropertyCollector {
    protected constructor();
    AddFromClip(clip: UnityEngine.AnimationClip): void;
    AddFromClip(obj: UnityEngine.GameObject, clip: UnityEngine.AnimationClip): void;
    AddFromComponent(obj: UnityEngine.GameObject, component: UnityEngine.Component): void;
    AddFromName(name: string): void;
    AddFromName(obj: UnityEngine.GameObject, name: string): void;
    AddObjectProperties(obj: UnityEngine.Object, clip: UnityEngine.AnimationClip): void;
    PopActiveGameObject(): void;
    PushActiveGameObject(gameObject: UnityEngine.GameObject): void;
  }
}
declare namespace UnityEngine.Timeline {
  class IPropertyPreview {
    protected constructor();
    GatherProperties(director: UnityEngine.Playables.PlayableDirector, driver: UnityEngine.Timeline.IPropertyCollector): void;
  }
}
declare namespace UnityEngine.Timeline {
  class ITimelineMarkerContainer {
    protected constructor();
    CreateMarker(key: string, time: number): UnityEngine.Timeline.TimelineMarker;
    GetMarkers(): UnityEngine.Timeline.TimelineMarker[];
    RemoveMarker(marker: UnityEngine.Timeline.TimelineMarker): void;
  }
}
declare namespace UnityEngine.Timeline {
  class TimelineCreateUtilities extends System.Object {
    protected constructor();
    static GenerateUniqueActorName(timeline: UnityEngine.Timeline.TimelineAsset, prefix: string): string;
    static SaveAssetIntoObject(childAsset: UnityEngine.Object, masterAsset: UnityEngine.Object): void;
  }
}
declare namespace UnityEngine.Timeline {
  class TimelineUndo extends System.Object {
    protected constructor();
    static PushDestroyUndo(timeline: UnityEngine.Timeline.TimelineAsset, thingToDirty: UnityEngine.Object, objectToDestroy: UnityEngine.Object, operation: string): void;
    static PushUndo(thingToDirty: UnityEngine.Object, operation: string): void;
  }
}
declare namespace UnityEngine.Timeline {
  class TimeUtility extends System.Object {
    protected constructor();
    static FromFrames(frames: number, frameRate: number): number;
    static FromFrames(frames: number, frameRate: number): number;
    static OnFrameBoundary(time: number, frameRate: number): boolean;
    static OnFrameBoundary(time: number, frameRate: number, epsilon: number): boolean;
    static ParseTimeCode(timeCode: string, frameRate: number, defaultValue: number): number;
    static TimeAsFrames(timeValue: number, frameRate: number, format?: string): string;
    static TimeAsTimeCode(timeValue: number, frameRate: number, format?: string): string;
    static ToExactFrames(time: number, frameRate: number): number;
    static ToFrames(time: number, frameRate: number): number;
    static kFrameRateEpsilon: number;
    static kTimeEpsilon: number;
  }
}
declare namespace UnityEngine.Timeline {
  class WeightUtility extends System.Object {
    protected constructor();
    static NormalizeMixer(mixer: UnityEngine.Playables.Playable): number;
  }
}
declare namespace UnityEngine.EventSystems {
  class EventHandle extends System.Enum {
    protected constructor();
    static Unused: UnityEngine.EventSystems.EventHandle;
    static Used: UnityEngine.EventSystems.EventHandle;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class IEventSystemHandler {
    protected constructor();
  }
}
declare namespace UnityEngine.EventSystems {
  class IPointerEnterHandler {
    protected constructor();
    OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IPointerExitHandler {
    protected constructor();
    OnPointerExit(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IPointerDownHandler {
    protected constructor();
    OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IPointerUpHandler {
    protected constructor();
    OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IPointerClickHandler {
    protected constructor();
    OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IBeginDragHandler {
    protected constructor();
    OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IInitializePotentialDragHandler {
    protected constructor();
    OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IDragHandler {
    protected constructor();
    OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IEndDragHandler {
    protected constructor();
    OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IDropHandler {
    protected constructor();
    OnDrop(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IScrollHandler {
    protected constructor();
    OnScroll(eventData: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IUpdateSelectedHandler {
    protected constructor();
    OnUpdateSelected(eventData: UnityEngine.EventSystems.BaseEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class ISelectHandler {
    protected constructor();
    OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IDeselectHandler {
    protected constructor();
    OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class IMoveHandler {
    protected constructor();
    OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class ISubmitHandler {
    protected constructor();
    OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class ICancelHandler {
    protected constructor();
    OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class EventSystem extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    IsPointerOverGameObject(): boolean;
    IsPointerOverGameObject(pointerId: number): boolean;
    RaycastAll(eventData: UnityEngine.EventSystems.PointerEventData, raycastResults: UnityEngine.EventSystems.RaycastResult[]): void;
    SetSelectedGameObject(selected: UnityEngine.GameObject): void;
    SetSelectedGameObject(selected: UnityEngine.GameObject, pointer: UnityEngine.EventSystems.BaseEventData): void;
    ToString(): string;
    UpdateModules(): void;
    readonly alreadySelecting: boolean;
    static current: UnityEngine.EventSystems.EventSystem;
    readonly currentInputModule: UnityEngine.EventSystems.BaseInputModule;
    readonly currentSelectedGameObject: UnityEngine.GameObject;
    firstSelectedGameObject: UnityEngine.GameObject;
    readonly isFocused: boolean;
    readonly lastSelectedGameObject: UnityEngine.GameObject;
    pixelDragThreshold: number;
    sendNavigationEvents: boolean;
  }
}
declare namespace UnityEngine.EventSystems {
  class EventTrigger extends UnityEngine.MonoBehaviour {
    protected constructor();
    OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnDrop(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
    OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerExit(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnScroll(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnUpdateSelected(eventData: UnityEngine.EventSystems.BaseEventData): void;
    triggers: UnityEngine.EventSystems.EventTrigger.Entry[];
    delegates: UnityEngine.EventSystems.EventTrigger.Entry[];
  }
}
declare namespace UnityEngine.EventSystems.EventTrigger {
  class TriggerEvent {
    constructor();
    AddListener(call: ((arg0: UnityEngine.EventSystems.BaseEventData) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: UnityEngine.EventSystems.BaseEventData): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: UnityEngine.EventSystems.BaseEventData) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[UnityEngine.EventSystems.BaseEventData, UnityEngine.UI, Version=1.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: UnityEngine.EventSystems.BaseEventData) => void)): void;
    Invoke(arg0: UnityEngine.EventSystems.BaseEventData): void;
    RemoveListener(call: ((arg0: UnityEngine.EventSystems.BaseEventData) => void)): void;
  }
}
declare namespace UnityEngine.EventSystems.EventTrigger {
  class Entry extends System.Object {
    constructor();
    callback: UnityEngine.EventSystems.EventTrigger.TriggerEvent;
    eventID: UnityEngine.EventSystems.EventTriggerType;
  }
}
declare namespace UnityEngine.EventSystems {
  class EventTriggerType extends System.Enum {
    protected constructor();
    static BeginDrag: UnityEngine.EventSystems.EventTriggerType;
    static Cancel: UnityEngine.EventSystems.EventTriggerType;
    static Deselect: UnityEngine.EventSystems.EventTriggerType;
    static Drag: UnityEngine.EventSystems.EventTriggerType;
    static Drop: UnityEngine.EventSystems.EventTriggerType;
    static EndDrag: UnityEngine.EventSystems.EventTriggerType;
    static InitializePotentialDrag: UnityEngine.EventSystems.EventTriggerType;
    static Move: UnityEngine.EventSystems.EventTriggerType;
    static PointerClick: UnityEngine.EventSystems.EventTriggerType;
    static PointerDown: UnityEngine.EventSystems.EventTriggerType;
    static PointerEnter: UnityEngine.EventSystems.EventTriggerType;
    static PointerExit: UnityEngine.EventSystems.EventTriggerType;
    static PointerUp: UnityEngine.EventSystems.EventTriggerType;
    static Scroll: UnityEngine.EventSystems.EventTriggerType;
    static Select: UnityEngine.EventSystems.EventTriggerType;
    static Submit: UnityEngine.EventSystems.EventTriggerType;
    static UpdateSelected: UnityEngine.EventSystems.EventTriggerType;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class ExecuteEvents extends System.Object {
    protected constructor();
    static readonly beginDragHandler: ((handler: UnityEngine.EventSystems.IBeginDragHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly cancelHandler: ((handler: UnityEngine.EventSystems.ICancelHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly deselectHandler: ((handler: UnityEngine.EventSystems.IDeselectHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly dragHandler: ((handler: UnityEngine.EventSystems.IDragHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly dropHandler: ((handler: UnityEngine.EventSystems.IDropHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly endDragHandler: ((handler: UnityEngine.EventSystems.IEndDragHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly initializePotentialDrag: ((handler: UnityEngine.EventSystems.IInitializePotentialDragHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly moveHandler: ((handler: UnityEngine.EventSystems.IMoveHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly pointerClickHandler: ((handler: UnityEngine.EventSystems.IPointerClickHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly pointerDownHandler: ((handler: UnityEngine.EventSystems.IPointerDownHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly pointerEnterHandler: ((handler: UnityEngine.EventSystems.IPointerEnterHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly pointerExitHandler: ((handler: UnityEngine.EventSystems.IPointerExitHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly pointerUpHandler: ((handler: UnityEngine.EventSystems.IPointerUpHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly scrollHandler: ((handler: UnityEngine.EventSystems.IScrollHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly selectHandler: ((handler: UnityEngine.EventSystems.ISelectHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly submitHandler: ((handler: UnityEngine.EventSystems.ISubmitHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
    static readonly updateSelectedHandler: ((handler: UnityEngine.EventSystems.IUpdateSelectedHandler, eventData: UnityEngine.EventSystems.BaseEventData) => void);
  }
}
declare namespace UnityEngine.EventSystems {
  class MoveDirection extends System.Enum {
    protected constructor();
    static Down: UnityEngine.EventSystems.MoveDirection;
    static Left: UnityEngine.EventSystems.MoveDirection;
    static None: UnityEngine.EventSystems.MoveDirection;
    static Right: UnityEngine.EventSystems.MoveDirection;
    static Up: UnityEngine.EventSystems.MoveDirection;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class RaycasterManager extends System.Object {
    protected constructor();
    static AddRaycaster(baseRaycaster: UnityEngine.EventSystems.BaseRaycaster): void;
    static GetRaycasters(): UnityEngine.EventSystems.BaseRaycaster[];
    static RemoveRaycasters(baseRaycaster: UnityEngine.EventSystems.BaseRaycaster): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class RaycastResult extends System.ValueType {
    protected constructor();
    Clear(): void;
    ToString(): string;
    gameObject: UnityEngine.GameObject;
    readonly isValid: boolean;
    depth: number;
    distance: number;
    index: number;
    module: UnityEngine.EventSystems.BaseRaycaster;
    screenPosition: UnityEngine.Vector2;
    sortingLayer: number;
    sortingOrder: number;
    worldNormal: UnityEngine.Vector3;
    worldPosition: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.EventSystems {
  class AxisEventData extends UnityEngine.EventSystems.BaseEventData {
    constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
    moveDir: UnityEngine.EventSystems.MoveDirection;
    moveVector: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.EventSystems {
  class BaseEventData extends UnityEngine.EventSystems.AbstractEventData {
    constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
    readonly currentInputModule: UnityEngine.EventSystems.BaseInputModule;
    selectedObject: UnityEngine.GameObject;
  }
}
declare namespace UnityEngine.EventSystems {
  class AbstractEventData extends System.Object {
    protected constructor();
    Reset(): void;
    Use(): void;
    readonly used: boolean;
  }
}
declare namespace UnityEngine.EventSystems {
  class PointerEventData extends UnityEngine.EventSystems.BaseEventData {
    constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
    IsPointerMoving(): boolean;
    IsScrolling(): boolean;
    ToString(): string;
    button: UnityEngine.EventSystems.PointerEventData.InputButton;
    clickCount: number;
    clickTime: number;
    delta: UnityEngine.Vector2;
    dragging: boolean;
    eligibleForClick: boolean;
    readonly enterEventCamera: UnityEngine.Camera;
    readonly lastPress: UnityEngine.GameObject;
    pointerCurrentRaycast: UnityEngine.EventSystems.RaycastResult;
    pointerDrag: UnityEngine.GameObject;
    pointerEnter: UnityEngine.GameObject;
    pointerId: number;
    pointerPress: UnityEngine.GameObject;
    pointerPressRaycast: UnityEngine.EventSystems.RaycastResult;
    position: UnityEngine.Vector2;
    readonly pressEventCamera: UnityEngine.Camera;
    pressPosition: UnityEngine.Vector2;
    rawPointerPress: UnityEngine.GameObject;
    scrollDelta: UnityEngine.Vector2;
    useDragThreshold: boolean;
    worldNormal: UnityEngine.Vector3;
    worldPosition: UnityEngine.Vector3;
    hovered: UnityEngine.GameObject[];
  }
}
declare namespace UnityEngine.EventSystems.PointerEventData {
  class InputButton extends System.Enum {
    protected constructor();
    static Left: UnityEngine.EventSystems.PointerEventData.InputButton;
    static Middle: UnityEngine.EventSystems.PointerEventData.InputButton;
    static Right: UnityEngine.EventSystems.PointerEventData.InputButton;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems.PointerEventData {
  class FramePressState extends System.Enum {
    protected constructor();
    static NotChanged: UnityEngine.EventSystems.PointerEventData.FramePressState;
    static Pressed: UnityEngine.EventSystems.PointerEventData.FramePressState;
    static PressedAndReleased: UnityEngine.EventSystems.PointerEventData.FramePressState;
    static Released: UnityEngine.EventSystems.PointerEventData.FramePressState;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems.PointerInputModule {
  class ButtonState extends System.Object {
    constructor();
    button: UnityEngine.EventSystems.PointerEventData.InputButton;
    eventData: UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData;
  }
}
declare namespace UnityEngine.EventSystems.PointerInputModule {
  class MouseState extends System.Object {
    constructor();
    AnyPressesThisFrame(): boolean;
    AnyReleasesThisFrame(): boolean;
    GetButtonState(button: UnityEngine.EventSystems.PointerEventData.InputButton): UnityEngine.EventSystems.PointerInputModule.ButtonState;
    SetButtonState(button: UnityEngine.EventSystems.PointerEventData.InputButton, stateForMouseButton: UnityEngine.EventSystems.PointerEventData.FramePressState, data: UnityEngine.EventSystems.PointerEventData): void;
  }
}
declare namespace UnityEngine.EventSystems.PointerInputModule {
  class MouseButtonEventData extends System.Object {
    constructor();
    PressedThisFrame(): boolean;
    ReleasedThisFrame(): boolean;
    buttonData: UnityEngine.EventSystems.PointerEventData;
    buttonState: UnityEngine.EventSystems.PointerEventData.FramePressState;
  }
}
declare namespace UnityEngine.EventSystems.StandaloneInputModule {
  class InputMode extends System.Enum {
    protected constructor();
    static Buttons: UnityEngine.EventSystems.StandaloneInputModule.InputMode;
    static Mouse: UnityEngine.EventSystems.StandaloneInputModule.InputMode;
    value__: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class TouchInputModule extends UnityEngine.EventSystems.PointerInputModule {
    protected constructor();
    DeactivateModule(): void;
    IsModuleSupported(): boolean;
    Process(): void;
    ShouldActivateModule(): boolean;
    ToString(): string;
    UpdateModule(): void;
    allowActivationOnStandalone: boolean;
    forceModuleActive: boolean;
  }
}
declare namespace UnityEngine.EventSystems {
  class BaseRaycaster extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    Raycast(eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]): void;
    ToString(): string;
    readonly eventCamera: UnityEngine.Camera;
    readonly priority: number;
    readonly renderOrderPriority: number;
    readonly sortOrderPriority: number;
  }
}
declare namespace UnityEngine.EventSystems {
  class Physics2DRaycaster extends UnityEngine.EventSystems.PhysicsRaycaster {
    protected constructor();
    Raycast(eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]): void;
  }
}
declare namespace UnityEngine.EventSystems {
  class PhysicsRaycaster extends UnityEngine.EventSystems.BaseRaycaster {
    protected constructor();
    Raycast(eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]): void;
    readonly depth: number;
    readonly eventCamera: UnityEngine.Camera;
    eventMask: UnityEngine.LayerMask;
    readonly finalEventMask: number;
    maxRayIntersections: number;
  }
}
declare namespace UnityEngine.UI.CoroutineTween {
  class ITweenValue {
    protected constructor();
    TweenValue(floatPercentage: number): void;
    ValidTarget(): boolean;
    readonly duration: number;
    readonly ignoreTimeScale: boolean;
  }
}
declare namespace UnityEngine.UI.CoroutineTween {
  class ColorTween extends System.ValueType {
    protected constructor();
    AddOnChangedCallback(callback: ((arg0: UnityEngine.Color) => void)): void;
    GetDuration(): number;
    GetIgnoreTimescale(): boolean;
    TweenValue(floatPercentage: number): void;
    ValidTarget(): boolean;
    duration: number;
    ignoreTimeScale: boolean;
    startColor: UnityEngine.Color;
    targetColor: UnityEngine.Color;
    tweenMode: UnityEngine.UI.CoroutineTween.ColorTween.ColorTweenMode;
  }
}
declare namespace UnityEngine.UI.CoroutineTween.ColorTween {
  class ColorTweenMode extends System.Enum {
    protected constructor();
    static All: UnityEngine.UI.CoroutineTween.ColorTween.ColorTweenMode;
    static Alpha: UnityEngine.UI.CoroutineTween.ColorTween.ColorTweenMode;
    static RGB: UnityEngine.UI.CoroutineTween.ColorTween.ColorTweenMode;
    value__: number;
  }
}
declare namespace UnityEngine.UI.CoroutineTween.ColorTween {
  class ColorTweenCallback {
    constructor();
    AddListener(call: ((arg0: UnityEngine.Color) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: UnityEngine.Color): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: UnityEngine.Color) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[UnityEngine.Color, UnityEngine.CoreModule, Version=0.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: UnityEngine.Color) => void)): void;
    Invoke(arg0: UnityEngine.Color): void;
    RemoveListener(call: ((arg0: UnityEngine.Color) => void)): void;
  }
}
declare namespace UnityEngine.UI.CoroutineTween {
  class FloatTween extends System.ValueType {
    protected constructor();
    AddOnChangedCallback(callback: ((arg0: number) => void)): void;
    GetDuration(): number;
    GetIgnoreTimescale(): boolean;
    TweenValue(floatPercentage: number): void;
    ValidTarget(): boolean;
    duration: number;
    ignoreTimeScale: boolean;
    startValue: number;
    targetValue: number;
  }
}
declare namespace UnityEngine.UI.CoroutineTween.FloatTween {
  class FloatTweenCallback {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: number): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: number) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=4.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Invoke(arg0: number): void;
    RemoveListener(call: ((arg0: number) => void)): void;
  }
}
declare namespace UnityEngine.UI {
  class AnimationTriggers extends System.Object {
    constructor();
    disabledTrigger: string;
    highlightedTrigger: string;
    normalTrigger: string;
    pressedTrigger: string;
  }
}
declare namespace UnityEngine.UI {
  class Button extends UnityEngine.UI.Selectable {
    protected constructor();
    OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
    onClick: UnityEngine.UI.Button.ButtonClickedEvent;
  }
}
declare namespace UnityEngine.UI {
  class Selectable extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    FindSelectable(dir: UnityEngine.Vector3): UnityEngine.UI.Selectable;
    FindSelectableOnDown(): UnityEngine.UI.Selectable;
    FindSelectableOnLeft(): UnityEngine.UI.Selectable;
    FindSelectableOnRight(): UnityEngine.UI.Selectable;
    FindSelectableOnUp(): UnityEngine.UI.Selectable;
    IsInteractable(): boolean;
    OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
    OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerExit(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
    Select(): void;
    static readonly allSelectables: UnityEngine.UI.Selectable[];
    animationTriggers: UnityEngine.UI.AnimationTriggers;
    readonly animator: UnityEngine.Animator;
    colors: UnityEngine.UI.ColorBlock;
    image: UnityEngine.UI.Image;
    interactable: boolean;
    navigation: UnityEngine.UI.Navigation;
    spriteState: UnityEngine.UI.SpriteState;
    targetGraphic: UnityEngine.UI.Graphic;
    transition: UnityEngine.UI.Selectable.Transition;
  }
}
declare namespace UnityEngine.UI.Button {
  class ButtonClickedEvent extends UnityEngine.Events.UnityEvent {
    constructor();
  }
}
declare namespace UnityEngine.UI {
  class CanvasUpdate extends System.Enum {
    protected constructor();
    static LatePreRender: UnityEngine.UI.CanvasUpdate;
    static Layout: UnityEngine.UI.CanvasUpdate;
    static MaxUpdateValue: UnityEngine.UI.CanvasUpdate;
    static PostLayout: UnityEngine.UI.CanvasUpdate;
    static Prelayout: UnityEngine.UI.CanvasUpdate;
    static PreRender: UnityEngine.UI.CanvasUpdate;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class ICanvasElement {
    protected constructor();
    GraphicUpdateComplete(): void;
    IsDestroyed(): boolean;
    LayoutComplete(): void;
    Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine.UI {
  class CanvasUpdateRegistry extends System.Object {
    protected constructor();
    static IsRebuildingGraphics(): boolean;
    static IsRebuildingLayout(): boolean;
    static RegisterCanvasElementForGraphicRebuild(element: UnityEngine.UI.ICanvasElement): void;
    static RegisterCanvasElementForLayoutRebuild(element: UnityEngine.UI.ICanvasElement): void;
    static TryRegisterCanvasElementForGraphicRebuild(element: UnityEngine.UI.ICanvasElement): boolean;
    static TryRegisterCanvasElementForLayoutRebuild(element: UnityEngine.UI.ICanvasElement): boolean;
    static UnRegisterCanvasElementForRebuild(element: UnityEngine.UI.ICanvasElement): void;
    static readonly instance: UnityEngine.UI.CanvasUpdateRegistry;
  }
}
declare namespace UnityEngine.UI {
  class ColorBlock extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.UI.ColorBlock): boolean;
    GetHashCode(): number;
    colorMultiplier: number;
    static readonly defaultColorBlock: UnityEngine.UI.ColorBlock;
    disabledColor: UnityEngine.Color;
    fadeDuration: number;
    highlightedColor: UnityEngine.Color;
    normalColor: UnityEngine.Color;
    pressedColor: UnityEngine.Color;
  }
}
declare namespace UnityEngine.UI {
  class DefaultControls extends System.Object {
    protected constructor();
    static CreateButton(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateDropdown(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateImage(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateInputField(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreatePanel(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateRawImage(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateScrollbar(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateScrollView(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateSlider(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateText(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
    static CreateToggle(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
  }
}
declare namespace UnityEngine.UI.DefaultControls {
  class Resources extends System.ValueType {
    protected constructor();
    background: UnityEngine.Sprite;
    checkmark: UnityEngine.Sprite;
    dropdown: UnityEngine.Sprite;
    inputField: UnityEngine.Sprite;
    knob: UnityEngine.Sprite;
    mask: UnityEngine.Sprite;
    standard: UnityEngine.Sprite;
  }
}
declare namespace UnityEngine.UI {
  class Dropdown extends UnityEngine.UI.Selectable {
    protected constructor();
    AddOptions(options: string[]): void;
    AddOptions(options: UnityEngine.Sprite[]): void;
    AddOptions(options: UnityEngine.UI.Dropdown.OptionData[]): void;
    ClearOptions(): void;
    Hide(): void;
    OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
    RefreshShownValue(): void;
    Show(): void;
    captionImage: UnityEngine.UI.Image;
    captionText: UnityEngine.UI.Text;
    itemImage: UnityEngine.UI.Image;
    itemText: UnityEngine.UI.Text;
    onValueChanged: UnityEngine.UI.Dropdown.DropdownEvent;
    options: UnityEngine.UI.Dropdown.OptionData[];
    template: UnityEngine.RectTransform;
    value: number;
  }
}
declare namespace UnityEngine.UI.Dropdown {
  class DropdownItem extends UnityEngine.MonoBehaviour {
    constructor();
    OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
    image: UnityEngine.UI.Image;
    rectTransform: UnityEngine.RectTransform;
    text: UnityEngine.UI.Text;
    toggle: UnityEngine.UI.Toggle;
  }
}
declare namespace UnityEngine.UI.Dropdown {
  class OptionData extends System.Object {
    constructor();
    constructor(text: string);
    constructor(image: UnityEngine.Sprite);
    constructor(text: string, image: UnityEngine.Sprite);
    image: UnityEngine.Sprite;
    text: string;
  }
}
declare namespace UnityEngine.UI.Dropdown {
  class OptionDataList extends System.Object {
    constructor();
    options: UnityEngine.UI.Dropdown.OptionData[];
  }
}
declare namespace UnityEngine.UI.Dropdown {
  class DropdownEvent {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: number): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: number) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.UI {
  class FontData extends System.Object {
    constructor();
    alignByGeometry: boolean;
    alignment: UnityEngine.TextAnchor;
    bestFit: boolean;
    static readonly defaultFontData: UnityEngine.UI.FontData;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    horizontalOverflow: UnityEngine.HorizontalWrapMode;
    lineSpacing: number;
    maxSize: number;
    minSize: number;
    richText: boolean;
    verticalOverflow: UnityEngine.VerticalWrapMode;
  }
}
declare namespace UnityEngine.UI {
  class FontUpdateTracker extends System.Object {
    protected constructor();
    static TrackText(t: UnityEngine.UI.Text): void;
    static UntrackText(t: UnityEngine.UI.Text): void;
  }
}
declare namespace UnityEngine.UI {
  class Graphic extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    CrossFadeAlpha(alpha: number, duration: number, ignoreTimeScale: boolean): void;
    CrossFadeColor(targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean): void;
    CrossFadeColor(targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean): void;
    GetPixelAdjustedRect(): UnityEngine.Rect;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnRebuildRequested(): void;
    PixelAdjustPoint(point: UnityEngine.Vector2): UnityEngine.Vector2;
    Raycast(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
    Rebuild(update: UnityEngine.UI.CanvasUpdate): void;
    RegisterDirtyLayoutCallback(action: (() => void)): void;
    RegisterDirtyMaterialCallback(action: (() => void)): void;
    RegisterDirtyVerticesCallback(action: (() => void)): void;
    SetAllDirty(): void;
    SetLayoutDirty(): void;
    SetMaterialDirty(): void;
    SetNativeSize(): void;
    SetVerticesDirty(): void;
    UnregisterDirtyLayoutCallback(action: (() => void)): void;
    UnregisterDirtyMaterialCallback(action: (() => void)): void;
    UnregisterDirtyVerticesCallback(action: (() => void)): void;
    readonly canvas: UnityEngine.Canvas;
    readonly canvasRenderer: UnityEngine.CanvasRenderer;
    color: UnityEngine.Color;
    static readonly defaultGraphicMaterial: UnityEngine.Material;
    readonly defaultMaterial: UnityEngine.Material;
    readonly depth: number;
    readonly mainTexture: UnityEngine.Texture;
    material: UnityEngine.Material;
    readonly materialForRendering: UnityEngine.Material;
    raycastTarget: boolean;
    readonly rectTransform: UnityEngine.RectTransform;
  }
}
declare namespace UnityEngine.UI {
  class GraphicRaycaster extends UnityEngine.EventSystems.BaseRaycaster {
    protected constructor();
    Raycast(eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]): void;
    blockingObjects: UnityEngine.UI.GraphicRaycaster.BlockingObjects;
    readonly eventCamera: UnityEngine.Camera;
    ignoreReversedGraphics: boolean;
    readonly renderOrderPriority: number;
    readonly sortOrderPriority: number;
  }
}
declare namespace UnityEngine.UI.GraphicRaycaster {
  class BlockingObjects extends System.Enum {
    protected constructor();
    static All: UnityEngine.UI.GraphicRaycaster.BlockingObjects;
    static None: UnityEngine.UI.GraphicRaycaster.BlockingObjects;
    static ThreeD: UnityEngine.UI.GraphicRaycaster.BlockingObjects;
    static TwoD: UnityEngine.UI.GraphicRaycaster.BlockingObjects;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class GraphicRebuildTracker extends System.Object {
    protected constructor();
    static TrackGraphic(g: UnityEngine.UI.Graphic): void;
    static UnTrackGraphic(g: UnityEngine.UI.Graphic): void;
  }
}
declare namespace UnityEngine.UI {
  class GraphicRegistry extends System.Object {
    protected constructor();
    static GetGraphicsForCanvas(canvas: UnityEngine.Canvas): UnityEngine.UI.Graphic[];
    static RegisterGraphicForCanvas(c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic): void;
    static UnregisterGraphicForCanvas(c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic): void;
    static readonly instance: UnityEngine.UI.GraphicRegistry;
  }
}
declare namespace UnityEngine.UI {
  class IGraphicEnabledDisabled {
    protected constructor();
    OnSiblingGraphicEnabledDisabled(): void;
  }
}
declare namespace UnityEngine.UI {
  class Image extends UnityEngine.UI.MaskableGraphic {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    IsRaycastLocationValid(screenPoint: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    SetNativeSize(): void;
    alphaHitTestMinimumThreshold: number;
    static readonly defaultETC1GraphicMaterial: UnityEngine.Material;
    eventAlphaThreshold: number;
    fillAmount: number;
    fillCenter: boolean;
    fillClockwise: boolean;
    fillMethod: UnityEngine.UI.Image.FillMethod;
    fillOrigin: number;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    readonly hasBorder: boolean;
    readonly layoutPriority: number;
    readonly mainTexture: UnityEngine.Texture;
    material: UnityEngine.Material;
    readonly minHeight: number;
    readonly minWidth: number;
    overrideSprite: UnityEngine.Sprite;
    readonly pixelsPerUnit: number;
    readonly preferredHeight: number;
    readonly preferredWidth: number;
    preserveAspect: boolean;
    sprite: UnityEngine.Sprite;
    type: UnityEngine.UI.Image.Type;
  }
}
declare namespace UnityEngine.UI {
  class MaskableGraphic extends UnityEngine.UI.Graphic {
    protected constructor();
    Cull(clipRect: UnityEngine.Rect, validRect: boolean): void;
    GetModifiedMaterial(baseMaterial: UnityEngine.Material): UnityEngine.Material;
    ParentMaskStateChanged(): void;
    RecalculateClipping(): void;
    RecalculateMasking(): void;
    SetClipRect(clipRect: UnityEngine.Rect, validRect: boolean): void;
    maskable: boolean;
    onCullStateChanged: UnityEngine.UI.MaskableGraphic.CullStateChangedEvent;
  }
}
declare namespace UnityEngine.UI.Image {
  class Type extends System.Enum {
    protected constructor();
    static Filled: UnityEngine.UI.Image.Type;
    static Simple: UnityEngine.UI.Image.Type;
    static Sliced: UnityEngine.UI.Image.Type;
    static Tiled: UnityEngine.UI.Image.Type;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Image {
  class FillMethod extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.UI.Image.FillMethod;
    static Radial180: UnityEngine.UI.Image.FillMethod;
    static Radial360: UnityEngine.UI.Image.FillMethod;
    static Radial90: UnityEngine.UI.Image.FillMethod;
    value__: number;
    static Vertical: UnityEngine.UI.Image.FillMethod;
  }
}
declare namespace UnityEngine.UI.Image {
  class OriginHorizontal extends System.Enum {
    protected constructor();
    static Left: UnityEngine.UI.Image.OriginHorizontal;
    static Right: UnityEngine.UI.Image.OriginHorizontal;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Image {
  class OriginVertical extends System.Enum {
    protected constructor();
    static Bottom: UnityEngine.UI.Image.OriginVertical;
    static Top: UnityEngine.UI.Image.OriginVertical;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Image {
  class Origin90 extends System.Enum {
    protected constructor();
    static BottomLeft: UnityEngine.UI.Image.Origin90;
    static BottomRight: UnityEngine.UI.Image.Origin90;
    static TopLeft: UnityEngine.UI.Image.Origin90;
    static TopRight: UnityEngine.UI.Image.Origin90;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Image {
  class Origin180 extends System.Enum {
    protected constructor();
    static Bottom: UnityEngine.UI.Image.Origin180;
    static Left: UnityEngine.UI.Image.Origin180;
    static Right: UnityEngine.UI.Image.Origin180;
    static Top: UnityEngine.UI.Image.Origin180;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Image {
  class Origin360 extends System.Enum {
    protected constructor();
    static Bottom: UnityEngine.UI.Image.Origin360;
    static Left: UnityEngine.UI.Image.Origin360;
    static Right: UnityEngine.UI.Image.Origin360;
    static Top: UnityEngine.UI.Image.Origin360;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class IMask {
    protected constructor();
    Enabled(): boolean;
    readonly rectTransform: UnityEngine.RectTransform;
  }
}
declare namespace UnityEngine.UI {
  class IMaskable {
    protected constructor();
    RecalculateMasking(): void;
  }
}
declare namespace UnityEngine.UI {
  class InputField extends UnityEngine.UI.Selectable {
    protected constructor();
    ActivateInputField(): void;
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    DeactivateInputField(): void;
    ForceLabelUpdate(): void;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    MoveTextEnd(shift: boolean): void;
    MoveTextStart(shift: boolean): void;
    OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
    OnUpdateSelected(eventData: UnityEngine.EventSystems.BaseEventData): void;
    ProcessEvent(e: UnityEngine.Event): void;
    Rebuild(update: UnityEngine.UI.CanvasUpdate): void;
    ScreenToLocal(screen: UnityEngine.Vector2): UnityEngine.Vector2;
    asteriskChar: any;
    caretBlinkRate: number;
    caretColor: UnityEngine.Color;
    caretPosition: number;
    readonly caretSelectPosition: number;
    caretWidth: number;
    characterLimit: number;
    characterValidation: UnityEngine.UI.InputField.CharacterValidation;
    contentType: UnityEngine.UI.InputField.ContentType;
    customCaretColor: boolean;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    inputType: UnityEngine.UI.InputField.InputType;
    readonly isFocused: boolean;
    keyboardType: UnityEngine.TouchScreenKeyboardType;
    readonly layoutPriority: number;
    lineType: UnityEngine.UI.InputField.LineType;
    readonly minHeight: number;
    readonly minWidth: number;
    readonly multiLine: boolean;
    onEndEdit: UnityEngine.UI.InputField.SubmitEvent;
    onValidateInput: ((text: string, charIndex: number, addedChar: any) => any);
    onValueChange: UnityEngine.UI.InputField.OnChangeEvent;
    onValueChanged: UnityEngine.UI.InputField.OnChangeEvent;
    placeholder: UnityEngine.UI.Graphic;
    readonly preferredHeight: number;
    readonly preferredWidth: number;
    readOnly: boolean;
    selectionAnchorPosition: number;
    selectionColor: UnityEngine.Color;
    selectionFocusPosition: number;
    shouldHideMobileInput: boolean;
    text: string;
    textComponent: UnityEngine.UI.Text;
    readonly wasCanceled: boolean;
  }
}
declare namespace UnityEngine.UI.InputField {
  class ContentType extends System.Enum {
    protected constructor();
    static Alphanumeric: UnityEngine.UI.InputField.ContentType;
    static Autocorrected: UnityEngine.UI.InputField.ContentType;
    static Custom: UnityEngine.UI.InputField.ContentType;
    static DecimalNumber: UnityEngine.UI.InputField.ContentType;
    static EmailAddress: UnityEngine.UI.InputField.ContentType;
    static IntegerNumber: UnityEngine.UI.InputField.ContentType;
    static Name: UnityEngine.UI.InputField.ContentType;
    static Password: UnityEngine.UI.InputField.ContentType;
    static Pin: UnityEngine.UI.InputField.ContentType;
    static Standard: UnityEngine.UI.InputField.ContentType;
    value__: number;
  }
}
declare namespace UnityEngine.UI.InputField {
  class InputType extends System.Enum {
    protected constructor();
    static AutoCorrect: UnityEngine.UI.InputField.InputType;
    static Password: UnityEngine.UI.InputField.InputType;
    static Standard: UnityEngine.UI.InputField.InputType;
    value__: number;
  }
}
declare namespace UnityEngine.UI.InputField {
  class CharacterValidation extends System.Enum {
    protected constructor();
    static Alphanumeric: UnityEngine.UI.InputField.CharacterValidation;
    static Decimal: UnityEngine.UI.InputField.CharacterValidation;
    static EmailAddress: UnityEngine.UI.InputField.CharacterValidation;
    static Integer: UnityEngine.UI.InputField.CharacterValidation;
    static Name: UnityEngine.UI.InputField.CharacterValidation;
    static None: UnityEngine.UI.InputField.CharacterValidation;
    value__: number;
  }
}
declare namespace UnityEngine.UI.InputField {
  class LineType extends System.Enum {
    protected constructor();
    static MultiLineNewline: UnityEngine.UI.InputField.LineType;
    static MultiLineSubmit: UnityEngine.UI.InputField.LineType;
    static SingleLine: UnityEngine.UI.InputField.LineType;
    value__: number;
  }
}
declare namespace UnityEngine.UI.InputField {
  class SubmitEvent {
    constructor();
    AddListener(call: ((arg0: string) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: string): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: string) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=4.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: string) => void)): void;
    Invoke(arg0: string): void;
    RemoveListener(call: ((arg0: string) => void)): void;
  }
}
declare namespace UnityEngine.UI.InputField {
  class OnChangeEvent {
    constructor();
    AddListener(call: ((arg0: string) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: string): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: string) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.UI.InputField {
  class EditState extends System.Enum {
    protected constructor();
    static Continue: UnityEngine.UI.InputField.EditState;
    static Finish: UnityEngine.UI.InputField.EditState;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class Mask extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    GetModifiedMaterial(baseMaterial: UnityEngine.Material): UnityEngine.Material;
    IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
    MaskEnabled(): boolean;
    OnSiblingGraphicEnabledDisabled(): void;
    readonly graphic: UnityEngine.UI.Graphic;
    readonly rectTransform: UnityEngine.RectTransform;
    showMaskGraphic: boolean;
  }
}
declare namespace UnityEngine.UI.MaskableGraphic {
  class CullStateChangedEvent {
    constructor();
    AddListener(call: ((arg0: boolean) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: boolean): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: boolean) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[System.Boolean, mscorlib, Version=4.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: boolean) => void)): void;
    Invoke(arg0: boolean): void;
    RemoveListener(call: ((arg0: boolean) => void)): void;
  }
}
declare namespace UnityEngine.UI {
  class MaskUtilities extends System.Object {
    constructor();
    static FindRootSortOverrideCanvas(start: UnityEngine.Transform): UnityEngine.Transform;
    static GetRectMaskForClippable(clippable: UnityEngine.UI.IClippable): UnityEngine.UI.RectMask2D;
    static GetRectMasksForClip(clipper: UnityEngine.UI.RectMask2D, masks: UnityEngine.UI.RectMask2D[]): void;
    static GetStencilDepth(transform: UnityEngine.Transform, stopAfter: UnityEngine.Transform): number;
    static IsDescendantOrSelf(father: UnityEngine.Transform, child: UnityEngine.Transform): boolean;
    static Notify2DMaskStateChanged(mask: UnityEngine.Component): void;
    static NotifyStencilStateChanged(mask: UnityEngine.Component): void;
  }
}
declare namespace UnityEngine.UI {
  class Misc extends System.Object {
    protected constructor();
    static Destroy(obj: UnityEngine.Object): void;
    static DestroyImmediate(obj: UnityEngine.Object): void;
  }
}
declare namespace UnityEngine.UI {
  class Navigation extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.UI.Navigation): boolean;
    static readonly defaultNavigation: UnityEngine.UI.Navigation;
    mode: UnityEngine.UI.Navigation.Mode;
    selectOnDown: UnityEngine.UI.Selectable;
    selectOnLeft: UnityEngine.UI.Selectable;
    selectOnRight: UnityEngine.UI.Selectable;
    selectOnUp: UnityEngine.UI.Selectable;
  }
}
declare namespace UnityEngine.UI.Navigation {
  class Mode extends System.Enum {
    protected constructor();
    static Automatic: UnityEngine.UI.Navigation.Mode;
    static Explicit: UnityEngine.UI.Navigation.Mode;
    static Horizontal: UnityEngine.UI.Navigation.Mode;
    static None: UnityEngine.UI.Navigation.Mode;
    value__: number;
    static Vertical: UnityEngine.UI.Navigation.Mode;
  }
}
declare namespace UnityEngine.UI {
  class RawImage extends UnityEngine.UI.MaskableGraphic {
    protected constructor();
    SetNativeSize(): void;
    readonly mainTexture: UnityEngine.Texture;
    texture: UnityEngine.Texture;
    uvRect: UnityEngine.Rect;
  }
}
declare namespace UnityEngine.UI {
  class RectMask2D extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    AddClippable(clippable: UnityEngine.UI.IClippable): void;
    IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
    PerformClipping(): void;
    RemoveClippable(clippable: UnityEngine.UI.IClippable): void;
    readonly canvasRect: UnityEngine.Rect;
    readonly rectTransform: UnityEngine.RectTransform;
  }
}
declare namespace UnityEngine.UI {
  class Scrollbar extends UnityEngine.UI.Selectable {
    protected constructor();
    FindSelectableOnDown(): UnityEngine.UI.Selectable;
    FindSelectableOnLeft(): UnityEngine.UI.Selectable;
    FindSelectableOnRight(): UnityEngine.UI.Selectable;
    FindSelectableOnUp(): UnityEngine.UI.Selectable;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
    OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
    Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
    SetDirection(direction: UnityEngine.UI.Scrollbar.Direction, includeRectLayouts: boolean): void;
    direction: UnityEngine.UI.Scrollbar.Direction;
    handleRect: UnityEngine.RectTransform;
    numberOfSteps: number;
    onValueChanged: UnityEngine.UI.Scrollbar.ScrollEvent;
    size: number;
    value: number;
  }
}
declare namespace UnityEngine.UI.Scrollbar {
  class Direction extends System.Enum {
    protected constructor();
    static BottomToTop: UnityEngine.UI.Scrollbar.Direction;
    static LeftToRight: UnityEngine.UI.Scrollbar.Direction;
    static RightToLeft: UnityEngine.UI.Scrollbar.Direction;
    static TopToBottom: UnityEngine.UI.Scrollbar.Direction;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Scrollbar {
  class ScrollEvent {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: number): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: number) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.UI.Scrollbar {
  class Axis extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.UI.Scrollbar.Axis;
    value__: number;
    static Vertical: UnityEngine.UI.Scrollbar.Axis;
  }
}
declare namespace UnityEngine.UI {
  class ScrollRect extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    GraphicUpdateComplete(): void;
    IsActive(): boolean;
    LayoutComplete(): void;
    OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnScroll(data: UnityEngine.EventSystems.PointerEventData): void;
    Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
    StopMovement(): void;
    content: UnityEngine.RectTransform;
    decelerationRate: number;
    elasticity: number;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    horizontal: boolean;
    horizontalNormalizedPosition: number;
    horizontalScrollbar: UnityEngine.UI.Scrollbar;
    horizontalScrollbarSpacing: number;
    horizontalScrollbarVisibility: UnityEngine.UI.ScrollRect.ScrollbarVisibility;
    inertia: boolean;
    readonly layoutPriority: number;
    readonly minHeight: number;
    readonly minWidth: number;
    movementType: UnityEngine.UI.ScrollRect.MovementType;
    normalizedPosition: UnityEngine.Vector2;
    onValueChanged: UnityEngine.UI.ScrollRect.ScrollRectEvent;
    readonly preferredHeight: number;
    readonly preferredWidth: number;
    scrollSensitivity: number;
    velocity: UnityEngine.Vector2;
    vertical: boolean;
    verticalNormalizedPosition: number;
    verticalScrollbar: UnityEngine.UI.Scrollbar;
    verticalScrollbarSpacing: number;
    verticalScrollbarVisibility: UnityEngine.UI.ScrollRect.ScrollbarVisibility;
    viewport: UnityEngine.RectTransform;
  }
}
declare namespace UnityEngine.UI.ScrollRect {
  class MovementType extends System.Enum {
    protected constructor();
    static Clamped: UnityEngine.UI.ScrollRect.MovementType;
    static Elastic: UnityEngine.UI.ScrollRect.MovementType;
    static Unrestricted: UnityEngine.UI.ScrollRect.MovementType;
    value__: number;
  }
}
declare namespace UnityEngine.UI.ScrollRect {
  class ScrollbarVisibility extends System.Enum {
    protected constructor();
    static AutoHide: UnityEngine.UI.ScrollRect.ScrollbarVisibility;
    static AutoHideAndExpandViewport: UnityEngine.UI.ScrollRect.ScrollbarVisibility;
    static Permanent: UnityEngine.UI.ScrollRect.ScrollbarVisibility;
    value__: number;
  }
}
declare namespace UnityEngine.UI.ScrollRect {
  class ScrollRectEvent {
    constructor();
    AddListener(call: ((arg0: UnityEngine.Vector2) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: UnityEngine.Vector2): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: UnityEngine.Vector2) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine.CoreModule, Version=0.0.0 {
  class UnityEvent`1 extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: UnityEngine.Vector2) => void)): void;
    Invoke(arg0: UnityEngine.Vector2): void;
    RemoveListener(call: ((arg0: UnityEngine.Vector2) => void)): void;
  }
}
declare namespace UnityEngine.UI.Selectable {
  class Transition extends System.Enum {
    protected constructor();
    static Animation: UnityEngine.UI.Selectable.Transition;
    static ColorTint: UnityEngine.UI.Selectable.Transition;
    static None: UnityEngine.UI.Selectable.Transition;
    static SpriteSwap: UnityEngine.UI.Selectable.Transition;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Selectable {
  class SelectionState extends System.Enum {
    protected constructor();
    static Disabled: UnityEngine.UI.Selectable.SelectionState;
    static Highlighted: UnityEngine.UI.Selectable.SelectionState;
    static Normal: UnityEngine.UI.Selectable.SelectionState;
    static Pressed: UnityEngine.UI.Selectable.SelectionState;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class SetPropertyUtility extends System.Object {
    protected constructor();
    static SetColor(currentValue: any, newValue: UnityEngine.Color): boolean;
  }
}
declare namespace UnityEngine.UI {
  class Slider extends UnityEngine.UI.Selectable {
    protected constructor();
    FindSelectableOnDown(): UnityEngine.UI.Selectable;
    FindSelectableOnLeft(): UnityEngine.UI.Selectable;
    FindSelectableOnRight(): UnityEngine.UI.Selectable;
    FindSelectableOnUp(): UnityEngine.UI.Selectable;
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
    OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
    Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
    SetDirection(direction: UnityEngine.UI.Slider.Direction, includeRectLayouts: boolean): void;
    direction: UnityEngine.UI.Slider.Direction;
    fillRect: UnityEngine.RectTransform;
    handleRect: UnityEngine.RectTransform;
    maxValue: number;
    minValue: number;
    normalizedValue: number;
    onValueChanged: UnityEngine.UI.Slider.SliderEvent;
    value: number;
    wholeNumbers: boolean;
  }
}
declare namespace UnityEngine.UI.Slider {
  class Direction extends System.Enum {
    protected constructor();
    static BottomToTop: UnityEngine.UI.Slider.Direction;
    static LeftToRight: UnityEngine.UI.Slider.Direction;
    static RightToLeft: UnityEngine.UI.Slider.Direction;
    static TopToBottom: UnityEngine.UI.Slider.Direction;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Slider {
  class SliderEvent {
    constructor();
    AddListener(call: ((arg0: number) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: number): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: number) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.UI.Slider {
  class Axis extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.UI.Slider.Axis;
    value__: number;
    static Vertical: UnityEngine.UI.Slider.Axis;
  }
}
declare namespace UnityEngine.UI {
  class SpriteState extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    Equals(other: UnityEngine.UI.SpriteState): boolean;
    disabledSprite: UnityEngine.Sprite;
    highlightedSprite: UnityEngine.Sprite;
    pressedSprite: UnityEngine.Sprite;
  }
}
declare namespace UnityEngine.UI {
  class StencilMaterial extends System.Object {
    protected constructor();
    static Add(baseMat: UnityEngine.Material, stencilID: number): UnityEngine.Material;
    static Add(baseMat: UnityEngine.Material, stencilID: number, operation: UnityEngine.Rendering.StencilOp, compareFunction: UnityEngine.Rendering.CompareFunction, colorWriteMask: UnityEngine.Rendering.ColorWriteMask): UnityEngine.Material;
    static Add(baseMat: UnityEngine.Material, stencilID: number, operation: UnityEngine.Rendering.StencilOp, compareFunction: UnityEngine.Rendering.CompareFunction, colorWriteMask: UnityEngine.Rendering.ColorWriteMask, readMask: number, writeMask: number): UnityEngine.Material;
    static ClearAll(): void;
    static Remove(customMat: UnityEngine.Material): void;
  }
}
declare namespace UnityEngine.UI.StencilMaterial {
  class MatEntry extends System.Object {
    constructor();
    baseMat: UnityEngine.Material;
    colorMask: UnityEngine.Rendering.ColorWriteMask;
    compareFunction: UnityEngine.Rendering.CompareFunction;
    count: number;
    customMat: UnityEngine.Material;
    operation: UnityEngine.Rendering.StencilOp;
    readMask: number;
    stencilId: number;
    useAlphaClip: boolean;
    writeMask: number;
  }
}
declare namespace UnityEngine.UI {
  class Text extends UnityEngine.UI.MaskableGraphic {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    FontTextureChanged(): void;
    GetGenerationSettings(extents: UnityEngine.Vector2): UnityEngine.TextGenerationSettings;
    static GetTextAnchorPivot(anchor: UnityEngine.TextAnchor): UnityEngine.Vector2;
    OnRebuildRequested(): void;
    alignByGeometry: boolean;
    alignment: UnityEngine.TextAnchor;
    readonly cachedTextGenerator: UnityEngine.TextGenerator;
    readonly cachedTextGeneratorForLayout: UnityEngine.TextGenerator;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    horizontalOverflow: UnityEngine.HorizontalWrapMode;
    readonly layoutPriority: number;
    lineSpacing: number;
    readonly mainTexture: UnityEngine.Texture;
    readonly minHeight: number;
    readonly minWidth: number;
    readonly pixelsPerUnit: number;
    readonly preferredHeight: number;
    readonly preferredWidth: number;
    resizeTextForBestFit: boolean;
    resizeTextMaxSize: number;
    resizeTextMinSize: number;
    supportRichText: boolean;
    text: string;
    verticalOverflow: UnityEngine.VerticalWrapMode;
  }
}
declare namespace UnityEngine.UI {
  class Toggle extends UnityEngine.UI.Selectable {
    protected constructor();
    GraphicUpdateComplete(): void;
    LayoutComplete(): void;
    OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
    OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
    Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
    group: UnityEngine.UI.ToggleGroup;
    isOn: boolean;
    graphic: UnityEngine.UI.Graphic;
    onValueChanged: UnityEngine.UI.Toggle.ToggleEvent;
    toggleTransition: UnityEngine.UI.Toggle.ToggleTransition;
  }
}
declare namespace UnityEngine.UI.Toggle {
  class ToggleTransition extends System.Enum {
    protected constructor();
    static Fade: UnityEngine.UI.Toggle.ToggleTransition;
    static None: UnityEngine.UI.Toggle.ToggleTransition;
    value__: number;
  }
}
declare namespace UnityEngine.UI.Toggle {
  class ToggleEvent {
    constructor();
    AddListener(call: ((arg0: boolean) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: boolean): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: boolean) => void)): void;
    SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.UI {
  class ToggleGroup extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    ActiveToggles(): any;
    AnyTogglesOn(): boolean;
    NotifyToggleOn(toggle: UnityEngine.UI.Toggle): void;
    RegisterToggle(toggle: UnityEngine.UI.Toggle): void;
    SetAllTogglesOff(): void;
    UnregisterToggle(toggle: UnityEngine.UI.Toggle): void;
    allowSwitchOff: boolean;
  }
}
declare namespace UnityEngine.UI {
  class ClipperRegistry extends System.Object {
    protected constructor();
    Cull(): void;
    static Register(c: UnityEngine.UI.IClipper): void;
    static Unregister(c: UnityEngine.UI.IClipper): void;
    static readonly instance: UnityEngine.UI.ClipperRegistry;
  }
}
declare namespace UnityEngine.UI {
  class Clipping extends System.Object {
    protected constructor();
    static FindCullAndClipWorldRect(rectMaskParents: UnityEngine.UI.RectMask2D[], validRect: any): UnityEngine.Rect;
  }
}
declare namespace UnityEngine.UI {
  class IClipper {
    protected constructor();
    PerformClipping(): void;
  }
}
declare namespace UnityEngine.UI {
  class IClippable {
    protected constructor();
    Cull(clipRect: UnityEngine.Rect, validRect: boolean): void;
    RecalculateClipping(): void;
    SetClipRect(value: UnityEngine.Rect, validRect: boolean): void;
    readonly gameObject: UnityEngine.GameObject;
    readonly rectTransform: UnityEngine.RectTransform;
  }
}
declare namespace UnityEngine.UI {
  class RectangularVertexClipper extends System.Object {
    constructor();
    GetCanvasRect(t: UnityEngine.RectTransform, c: UnityEngine.Canvas): UnityEngine.Rect;
  }
}
declare namespace UnityEngine.UI {
  class AspectRatioFitter extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
    aspectMode: UnityEngine.UI.AspectRatioFitter.AspectMode;
    aspectRatio: number;
  }
}
declare namespace UnityEngine.UI.AspectRatioFitter {
  class AspectMode extends System.Enum {
    protected constructor();
    static EnvelopeParent: UnityEngine.UI.AspectRatioFitter.AspectMode;
    static FitInParent: UnityEngine.UI.AspectRatioFitter.AspectMode;
    static HeightControlsWidth: UnityEngine.UI.AspectRatioFitter.AspectMode;
    static None: UnityEngine.UI.AspectRatioFitter.AspectMode;
    value__: number;
    static WidthControlsHeight: UnityEngine.UI.AspectRatioFitter.AspectMode;
  }
}
declare namespace UnityEngine.UI {
  class CanvasScaler extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    defaultSpriteDPI: number;
    dynamicPixelsPerUnit: number;
    fallbackScreenDPI: number;
    matchWidthOrHeight: number;
    physicalUnit: UnityEngine.UI.CanvasScaler.Unit;
    referencePixelsPerUnit: number;
    referenceResolution: UnityEngine.Vector2;
    scaleFactor: number;
    screenMatchMode: UnityEngine.UI.CanvasScaler.ScreenMatchMode;
    uiScaleMode: UnityEngine.UI.CanvasScaler.ScaleMode;
  }
}
declare namespace UnityEngine.UI.CanvasScaler {
  class ScaleMode extends System.Enum {
    protected constructor();
    static ConstantPhysicalSize: UnityEngine.UI.CanvasScaler.ScaleMode;
    static ConstantPixelSize: UnityEngine.UI.CanvasScaler.ScaleMode;
    static ScaleWithScreenSize: UnityEngine.UI.CanvasScaler.ScaleMode;
    value__: number;
  }
}
declare namespace UnityEngine.UI.CanvasScaler {
  class ScreenMatchMode extends System.Enum {
    protected constructor();
    static Expand: UnityEngine.UI.CanvasScaler.ScreenMatchMode;
    static MatchWidthOrHeight: UnityEngine.UI.CanvasScaler.ScreenMatchMode;
    static Shrink: UnityEngine.UI.CanvasScaler.ScreenMatchMode;
    value__: number;
  }
}
declare namespace UnityEngine.UI.CanvasScaler {
  class Unit extends System.Enum {
    protected constructor();
    static Centimeters: UnityEngine.UI.CanvasScaler.Unit;
    static Inches: UnityEngine.UI.CanvasScaler.Unit;
    static Millimeters: UnityEngine.UI.CanvasScaler.Unit;
    static Picas: UnityEngine.UI.CanvasScaler.Unit;
    static Points: UnityEngine.UI.CanvasScaler.Unit;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class ContentSizeFitter extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
    horizontalFit: UnityEngine.UI.ContentSizeFitter.FitMode;
    verticalFit: UnityEngine.UI.ContentSizeFitter.FitMode;
  }
}
declare namespace UnityEngine.UI.ContentSizeFitter {
  class FitMode extends System.Enum {
    protected constructor();
    static MinSize: UnityEngine.UI.ContentSizeFitter.FitMode;
    static PreferredSize: UnityEngine.UI.ContentSizeFitter.FitMode;
    static Unconstrained: UnityEngine.UI.ContentSizeFitter.FitMode;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class GridLayoutGroup extends UnityEngine.UI.LayoutGroup {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
    cellSize: UnityEngine.Vector2;
    constraint: UnityEngine.UI.GridLayoutGroup.Constraint;
    constraintCount: number;
    spacing: UnityEngine.Vector2;
    startAxis: UnityEngine.UI.GridLayoutGroup.Axis;
    startCorner: UnityEngine.UI.GridLayoutGroup.Corner;
  }
}
declare namespace UnityEngine.UI {
  class LayoutGroup extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
    childAlignment: UnityEngine.TextAnchor;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    readonly layoutPriority: number;
    readonly minHeight: number;
    readonly minWidth: number;
    padding: UnityEngine.RectOffset;
    readonly preferredHeight: number;
    readonly preferredWidth: number;
  }
}
declare namespace UnityEngine.UI.GridLayoutGroup {
  class Corner extends System.Enum {
    protected constructor();
    static LowerLeft: UnityEngine.UI.GridLayoutGroup.Corner;
    static LowerRight: UnityEngine.UI.GridLayoutGroup.Corner;
    static UpperLeft: UnityEngine.UI.GridLayoutGroup.Corner;
    static UpperRight: UnityEngine.UI.GridLayoutGroup.Corner;
    value__: number;
  }
}
declare namespace UnityEngine.UI.GridLayoutGroup {
  class Axis extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.UI.GridLayoutGroup.Axis;
    value__: number;
    static Vertical: UnityEngine.UI.GridLayoutGroup.Axis;
  }
}
declare namespace UnityEngine.UI.GridLayoutGroup {
  class Constraint extends System.Enum {
    protected constructor();
    static FixedColumnCount: UnityEngine.UI.GridLayoutGroup.Constraint;
    static FixedRowCount: UnityEngine.UI.GridLayoutGroup.Constraint;
    static Flexible: UnityEngine.UI.GridLayoutGroup.Constraint;
    value__: number;
  }
}
declare namespace UnityEngine.UI {
  class HorizontalLayoutGroup extends UnityEngine.UI.HorizontalOrVerticalLayoutGroup {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
  }
}
declare namespace UnityEngine.UI {
  class HorizontalOrVerticalLayoutGroup extends UnityEngine.UI.LayoutGroup {
    protected constructor();
    childControlHeight: boolean;
    childControlWidth: boolean;
    childForceExpandHeight: boolean;
    childForceExpandWidth: boolean;
    spacing: number;
  }
}
declare namespace UnityEngine.UI {
  class ILayoutElement {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    readonly flexibleHeight: number;
    readonly flexibleWidth: number;
    readonly layoutPriority: number;
    readonly minHeight: number;
    readonly minWidth: number;
    readonly preferredHeight: number;
    readonly preferredWidth: number;
  }
}
declare namespace UnityEngine.UI {
  class ILayoutController {
    protected constructor();
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
  }
}
declare namespace UnityEngine.UI {
  class ILayoutGroup {
    protected constructor();
  }
}
declare namespace UnityEngine.UI {
  class ILayoutSelfController {
    protected constructor();
  }
}
declare namespace UnityEngine.UI {
  class ILayoutIgnorer {
    protected constructor();
    readonly ignoreLayout: boolean;
  }
}
declare namespace UnityEngine.UI {
  class LayoutElement extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    flexibleHeight: number;
    flexibleWidth: number;
    ignoreLayout: boolean;
    layoutPriority: number;
    minHeight: number;
    minWidth: number;
    preferredHeight: number;
    preferredWidth: number;
  }
}
declare namespace UnityEngine.UI {
  class LayoutRebuilder extends System.Object {
    constructor();
    Equals(obj: any): boolean;
    static ForceRebuildLayoutImmediate(layoutRoot: UnityEngine.RectTransform): void;
    GetHashCode(): number;
    GraphicUpdateComplete(): void;
    IsDestroyed(): boolean;
    LayoutComplete(): void;
    static MarkLayoutForRebuild(rect: UnityEngine.RectTransform): void;
    Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
    ToString(): string;
    readonly transform: UnityEngine.Transform;
  }
}
declare namespace UnityEngine.UI {
  class LayoutUtility extends System.Object {
    protected constructor();
    static GetFlexibleHeight(rect: UnityEngine.RectTransform): number;
    static GetFlexibleSize(rect: UnityEngine.RectTransform, axis: number): number;
    static GetFlexibleWidth(rect: UnityEngine.RectTransform): number;
    static GetLayoutProperty(rect: UnityEngine.RectTransform, property: ((arg: UnityEngine.UI.ILayoutElement) => number), defaultValue: number): number;
    static GetLayoutProperty(rect: UnityEngine.RectTransform, property: ((arg: UnityEngine.UI.ILayoutElement) => number), defaultValue: number, source: any): number;
    static GetMinHeight(rect: UnityEngine.RectTransform): number;
    static GetMinSize(rect: UnityEngine.RectTransform, axis: number): number;
    static GetMinWidth(rect: UnityEngine.RectTransform): number;
    static GetPreferredHeight(rect: UnityEngine.RectTransform): number;
    static GetPreferredSize(rect: UnityEngine.RectTransform, axis: number): number;
    static GetPreferredWidth(rect: UnityEngine.RectTransform): number;
  }
}
declare namespace UnityEngine.UI {
  class VerticalLayoutGroup extends UnityEngine.UI.HorizontalOrVerticalLayoutGroup {
    protected constructor();
    CalculateLayoutInputHorizontal(): void;
    CalculateLayoutInputVertical(): void;
    SetLayoutHorizontal(): void;
    SetLayoutVertical(): void;
  }
}
declare namespace UnityEngine.UI {
  class IMaterialModifier {
    protected constructor();
    GetModifiedMaterial(baseMaterial: UnityEngine.Material): UnityEngine.Material;
  }
}
declare namespace UnityEngine.UI {
  class ReflectionMethodsCache extends System.Object {
    constructor();
    static readonly Singleton: UnityEngine.UI.ReflectionMethodsCache;
    getRaycastNonAlloc: ((r: UnityEngine.Ray, results: UnityEngine.RaycastHit[], f: number, i: number) => number);
    getRayIntersectionAll: ((r: UnityEngine.Ray, f: number, i: number) => UnityEngine.RaycastHit2D[]);
    getRayIntersectionAllNonAlloc: ((r: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], f: number, i: number) => number);
    raycast2D: ((p1: UnityEngine.Vector2, p2: UnityEngine.Vector2, f: number, i: number) => UnityEngine.RaycastHit2D);
    raycast3D: ((r: UnityEngine.Ray, hit: any, f: number, i: number) => boolean);
    raycast3DAll: ((r: UnityEngine.Ray, f: number, i: number) => UnityEngine.RaycastHit[]);
  }
}
declare namespace UnityEngine.UI {
  class VertexHelper extends System.Object {
    constructor();
    constructor(m: UnityEngine.Mesh);
    AddTriangle(idx0: number, idx1: number, idx2: number): void;
    AddUIVertexQuad(verts: UnityEngine.UIVertex[]): void;
    AddUIVertexStream(verts: UnityEngine.UIVertex[], indices: number[]): void;
    AddUIVertexTriangleStream(verts: UnityEngine.UIVertex[]): void;
    AddVert(v: UnityEngine.UIVertex): void;
    AddVert(position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector2): void;
    AddVert(position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector2, uv1: UnityEngine.Vector2, normal: UnityEngine.Vector3, tangent: UnityEngine.Vector4): void;
    Clear(): void;
    Dispose(): void;
    FillMesh(mesh: UnityEngine.Mesh): void;
    GetUIVertexStream(stream: UnityEngine.UIVertex[]): void;
    PopulateUIVertex(vertex: any, i: number): void;
    SetUIVertex(vertex: UnityEngine.UIVertex, i: number): void;
    readonly currentIndexCount: number;
    readonly currentVertCount: number;
  }
}
declare namespace UnityEngine.UI {
  class BaseVertexEffect extends System.Object {
    protected constructor();
    ModifyVertices(vertices: UnityEngine.UIVertex[]): void;
  }
}
declare namespace UnityEngine.UI {
  class BaseMeshEffect extends UnityEngine.EventSystems.UIBehaviour {
    protected constructor();
    ModifyMesh(mesh: UnityEngine.Mesh): void;
    ModifyMesh(vh: UnityEngine.UI.VertexHelper): void;
  }
}
declare namespace UnityEngine.UI {
  class IVertexModifier {
    protected constructor();
    ModifyVertices(verts: UnityEngine.UIVertex[]): void;
  }
}
declare namespace UnityEngine.UI {
  class IMeshModifier {
    protected constructor();
    ModifyMesh(mesh: UnityEngine.Mesh): void;
    ModifyMesh(verts: UnityEngine.UI.VertexHelper): void;
  }
}
declare namespace UnityEngine.UI {
  class Outline extends UnityEngine.UI.Shadow {
    protected constructor();
    ModifyMesh(mesh: UnityEngine.Mesh): void;
    ModifyMesh(vh: UnityEngine.UI.VertexHelper): void;
  }
}
declare namespace UnityEngine.UI {
  class Shadow extends UnityEngine.UI.BaseMeshEffect {
    protected constructor();
    ModifyMesh(mesh: UnityEngine.Mesh): void;
    ModifyMesh(vh: UnityEngine.UI.VertexHelper): void;
    effectColor: UnityEngine.Color;
    effectDistance: UnityEngine.Vector2;
    useGraphicAlpha: boolean;
  }
}
declare namespace UnityEngine.UI {
  class PositionAsUV1 extends UnityEngine.UI.BaseMeshEffect {
    protected constructor();
    ModifyMesh(mesh: UnityEngine.Mesh): void;
    ModifyMesh(vh: UnityEngine.UI.VertexHelper): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Button extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor(clickEvent: (() => void));
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualElement extends UnityEngine.Experimental.UIElements.CallbackEventHandler {
    constructor();
    AddManipulator(manipulator: UnityEngine.Experimental.UIElements.IManipulator): void;
    AddToClassList(className: string): void;
    ClassListContains(cls: string): boolean;
    ClearClassList(): void;
    ClearDirty(type: UnityEngine.Experimental.UIElements.ChangeType): void;
    ContainsPoint(localPoint: UnityEngine.Vector2): boolean;
    ContainsPointToLocal(point: UnityEngine.Vector2): boolean;
    Dirty(type: UnityEngine.Experimental.UIElements.ChangeType): void;
    DoRepaint(): void;
    InsertManipulator(index: number, manipulator: UnityEngine.Experimental.UIElements.IManipulator): void;
    IsDirty(type: UnityEngine.Experimental.UIElements.ChangeType): boolean;
    OnStyleResolved(style: UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle): void;
    OnStylesResolved(style: UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyles): void;
    Overlaps(rectangle: UnityEngine.Rect): boolean;
    RemoveFromClassList(className: string): void;
    RemoveManipulator(manipulator: UnityEngine.Experimental.UIElements.IManipulator): void;
    ResetPositionProperties(): void;
    SetSize(size: UnityEngine.Vector2): void;
    ToString(): string;
    alignSelf: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    backgroundColor: UnityEngine.Color;
    backgroundImage: UnityEngine.Texture2D;
    backgroundSize: UnityEngine.ScaleMode;
    borderBottom: number;
    borderBottomWidth: number;
    borderColor: UnityEngine.Color;
    borderLeft: number;
    borderLeftWidth: number;
    borderRadius: number;
    borderRight: number;
    borderRightWidth: number;
    borderTop: number;
    borderTopWidth: number;
    readonly contentRect: UnityEngine.Rect;
    enabled: boolean;
    flex: number;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    readonly globalBound: UnityEngine.Rect;
    readonly globalTransform: UnityEngine.Matrix4x4;
    height: number;
    layout: UnityEngine.Rect;
    readonly localBound: UnityEngine.Rect;
    marginBottom: number;
    marginLeft: number;
    marginRight: number;
    marginTop: number;
    maxHeight: number;
    maxWidth: number;
    minHeight: number;
    minWidth: number;
    name: string;
    overflow: UnityEngine.Experimental.UIElements.StyleEnums.Overflow;
    paddingBottom: number;
    paddingLeft: number;
    paddingRight: number;
    paddingTop: number;
    readonly panel: UnityEngine.Experimental.UIElements.IPanel;
    parent: UnityEngine.Experimental.UIElements.VisualContainer;
    pickingMode: UnityEngine.Experimental.UIElements.PickingMode;
    position: UnityEngine.Rect;
    positionBottom: number;
    positionLeft: number;
    positionRight: number;
    positionTop: number;
    positionType: UnityEngine.Experimental.UIElements.StyleEnums.PositionType;
    readonly style: UnityEngine.Experimental.UIElements.IStyle;
    text: string;
    textAlignment: UnityEngine.TextAnchor;
    textClipping: UnityEngine.TextClipping;
    textColor: UnityEngine.Color;
    transform: UnityEngine.Matrix4x4;
    usePixelCaching: boolean;
    visible: boolean;
    width: number;
    wordWrap: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class CallbackEventHandler extends System.Object {
    protected constructor();
    HandleEvent(evt: UnityEngine.Experimental.UIElements.EventBase): void;
    OnLostCapture(): void;
    OnLostKeyboardFocus(): void;
    readonly panel: UnityEngine.Experimental.UIElements.IPanel;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ClampedDragger extends UnityEngine.Experimental.UIElements.Clickable {
    constructor(slider: UnityEngine.Experimental.UIElements.Slider, clickHandler: (() => void), dragHandler: (() => void));
    readonly delta: UnityEngine.Vector2;
    dragDirection: UnityEngine.Experimental.UIElements.ClampedDragger.DragDirection;
    readonly startMousePosition: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Clickable extends UnityEngine.Experimental.UIElements.MouseManipulator {
    constructor(handler: (() => void), delay: number, interval: number);
    constructor(handler: (() => void));
    readonly lastMousePosition: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseManipulator extends UnityEngine.Experimental.UIElements.Manipulator {
    constructor();
    readonly activators: UnityEngine.Experimental.UIElements.ManipulatorActivationFilter[];
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Manipulator extends System.Object {
    protected constructor();
    target: UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements.ClampedDragger {
  class DragDirection extends System.Enum {
    protected constructor();
    static Free: UnityEngine.Experimental.UIElements.ClampedDragger.DragDirection;
    static HighToLow: UnityEngine.Experimental.UIElements.ClampedDragger.DragDirection;
    static LowToHigh: UnityEngine.Experimental.UIElements.ClampedDragger.DragDirection;
    static None: UnityEngine.Experimental.UIElements.ClampedDragger.DragDirection;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseEventArgs extends System.ValueType {
    protected constructor();
    readonly clickCount: number;
    readonly mousePosition: UnityEngine.Vector2;
    readonly shift: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class KeyboardEventArgs extends System.ValueType {
    protected constructor();
    ToEvent(): UnityEngine.Event;
    readonly alt: boolean;
    readonly character: any;
    readonly keyCode: UnityEngine.KeyCode;
    readonly shift: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventPropagation extends System.Enum {
    protected constructor();
    static Continue: UnityEngine.Experimental.UIElements.EventPropagation;
    static Stop: UnityEngine.Experimental.UIElements.EventPropagation;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class PropagationPhase extends System.Enum {
    protected constructor();
    static AtTarget: UnityEngine.Experimental.UIElements.PropagationPhase;
    static BubbleUp: UnityEngine.Experimental.UIElements.PropagationPhase;
    static Capture: UnityEngine.Experimental.UIElements.PropagationPhase;
    static DefaultAction: UnityEngine.Experimental.UIElements.PropagationPhase;
    static None: UnityEngine.Experimental.UIElements.PropagationPhase;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IDispatcher {
    protected constructor();
    ReleaseCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    RemoveCapture(): void;
    TakeCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    readonly capture: UnityEngine.Experimental.UIElements.IEventHandler;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventDispatcher extends System.Object {
    constructor();
    DispatchEvent(evt: UnityEngine.Experimental.UIElements.EventBase, panel: UnityEngine.Experimental.UIElements.BaseVisualElementPanel): void;
    ReleaseCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    RemoveCapture(): void;
    TakeCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    capture: UnityEngine.Experimental.UIElements.IEventHandler;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IDataWatchHandle {
    protected constructor();
    readonly disposed: boolean;
    readonly watched: UnityEngine.Object;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IDataWatchService {
    protected constructor();
    AddWatch(watcher: UnityEngine.Experimental.UIElements.VisualElement, watched: UnityEngine.Object, OnDataChanged: (() => void)): UnityEngine.Experimental.UIElements.IDataWatchHandle;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Image extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor();
    image: UnityEngine.Texture;
    scaleMode: UnityEngine.ScaleMode;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IMGUIContainer extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor(onGUIHandler: (() => void));
    HandleEvent(evt: UnityEngine.Experimental.UIElements.EventBase): void;
    OnLostKeyboardFocus(): void;
    contextType: UnityEngine.Experimental.UIElements.ContextType;
    executionContext: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.IMGUIContainer {
  class GUIGlobals extends System.ValueType {
    protected constructor();
    backgroundColor: UnityEngine.Color;
    changed: boolean;
    color: UnityEngine.Color;
    contentColor: UnityEngine.Color;
    displayIndex: number;
    enabled: boolean;
    matrix: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IStyle {
    protected constructor();
    alignContent: any;
    alignItems: any;
    alignSelf: any;
    backgroundColor: any;
    backgroundImage: any;
    backgroundSize: any;
    borderBottom: any;
    borderBottomWidth: any;
    borderColor: any;
    borderLeft: any;
    borderLeftWidth: any;
    borderRadius: any;
    borderRight: any;
    borderRightWidth: any;
    borderTop: any;
    borderTopWidth: any;
    flex: any;
    flexDirection: any;
    flexWrap: any;
    font: any;
    fontSize: any;
    fontStyle: any;
    height: any;
    justifyContent: any;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    opacity: any;
    overflow: any;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    positionBottom: any;
    positionLeft: any;
    positionRight: any;
    positionTop: any;
    positionType: any;
    sliceBottom: any;
    sliceLeft: any;
    sliceRight: any;
    sliceTop: any;
    textAlignment: any;
    textClipping: any;
    textColor: any;
    width: any;
    wordWrap: any;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class HierarchyTraversal extends System.Object {
    protected constructor();
    BeginElementTest(element: UnityEngine.Experimental.UIElements.VisualElement, ruleMatchers: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher[]): void;
    Match(element: UnityEngine.Experimental.UIElements.VisualElement, matcher: any): boolean;
    OnBeginElementTest(element: UnityEngine.Experimental.UIElements.VisualElement, ruleMatchers: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher[]): void;
    OnRuleMatchedElement(matcher: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher, element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
    ProcessMatchedRules(element: UnityEngine.Experimental.UIElements.VisualElement): void;
    ShouldSkipElement(element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Label extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor();
    constructor(text: string);
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ManipulatorActivationFilter extends System.ValueType {
    protected constructor();
    Matches(e: UnityEngine.Experimental.UIElements.MouseEventBase): boolean;
    button: UnityEngine.Experimental.UIElements.MouseButton;
    modifiers: UnityEngine.EventModifiers;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IManipulator {
    protected constructor();
    target: UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseButton extends System.Enum {
    protected constructor();
    static LeftMouse: UnityEngine.Experimental.UIElements.MouseButton;
    static MiddleMouse: UnityEngine.Experimental.UIElements.MouseButton;
    static RightMouse: UnityEngine.Experimental.UIElements.MouseButton;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ContextType extends System.Enum {
    protected constructor();
    static Editor: UnityEngine.Experimental.UIElements.ContextType;
    static Player: UnityEngine.Experimental.UIElements.ContextType;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ChangeType extends System.Enum {
    protected constructor();
    static Layout: UnityEngine.Experimental.UIElements.ChangeType;
    static Repaint: UnityEngine.Experimental.UIElements.ChangeType;
    static Styles: UnityEngine.Experimental.UIElements.ChangeType;
    static StylesPath: UnityEngine.Experimental.UIElements.ChangeType;
    static Transform: UnityEngine.Experimental.UIElements.ChangeType;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class BasePanelDebug extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IPanel {
    protected constructor();
    Pick(point: UnityEngine.Vector2): UnityEngine.Experimental.UIElements.VisualElement;
    PickAll(point: UnityEngine.Vector2, picked: UnityEngine.Experimental.UIElements.VisualElement[]): UnityEngine.Experimental.UIElements.VisualElement;
    readonly contextType: UnityEngine.Experimental.UIElements.ContextType;
    readonly dataWatch: UnityEngine.Experimental.UIElements.IDataWatchService;
    readonly dispatcher: UnityEngine.Experimental.UIElements.IDispatcher;
    panelDebug: UnityEngine.Experimental.UIElements.BasePanelDebug;
    readonly scheduler: UnityEngine.Experimental.UIElements.IScheduler;
    readonly visualTree: UnityEngine.Experimental.UIElements.VisualContainer;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class BaseVisualElementPanel extends System.Object {
    protected constructor();
    Pick(point: UnityEngine.Vector2): UnityEngine.Experimental.UIElements.VisualElement;
    PickAll(point: UnityEngine.Vector2, picked: UnityEngine.Experimental.UIElements.VisualElement[]): UnityEngine.Experimental.UIElements.VisualElement;
    Repaint(e: UnityEngine.Event): void;
    ValidateLayout(): void;
    readonly contextType: UnityEngine.Experimental.UIElements.ContextType;
    readonly dataWatch: UnityEngine.Experimental.UIElements.IDataWatchService;
    readonly dispatcher: UnityEngine.Experimental.UIElements.IDispatcher;
    focusedElement: UnityEngine.Experimental.UIElements.VisualElement;
    IMGUIContainersCount: number;
    IMGUIEventInterests: UnityEngine.EventInterests;
    readonly instanceID: number;
    readonly loadResourceFunc: ((pathName: string, type: any) => UnityEngine.Object);
    panelDebug: UnityEngine.Experimental.UIElements.BasePanelDebug;
    readonly scheduler: UnityEngine.Experimental.UIElements.IScheduler;
    readonly visualTree: UnityEngine.Experimental.UIElements.VisualContainer;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Panel extends UnityEngine.Experimental.UIElements.BaseVisualElementPanel {
    constructor(instanceID: number, contextType: UnityEngine.Experimental.UIElements.ContextType, loadResourceDelegate?: ((pathName: string, type: any) => UnityEngine.Object), dataWatch?: UnityEngine.Experimental.UIElements.IDataWatchService, dispatcher?: UnityEngine.Experimental.UIElements.IDispatcher);
    PaintSubTree(e: UnityEngine.Event, root: UnityEngine.Experimental.UIElements.VisualElement, offset: UnityEngine.Matrix4x4, currentGlobalClip: UnityEngine.Rect): void;
    Pick(point: UnityEngine.Vector2): UnityEngine.Experimental.UIElements.VisualElement;
    PickAll(point: UnityEngine.Vector2, picked: UnityEngine.Experimental.UIElements.VisualElement[]): UnityEngine.Experimental.UIElements.VisualElement;
    Repaint(e: UnityEngine.Event): void;
    ValidateLayout(): void;
    allowPixelCaching: boolean;
    readonly contextType: UnityEngine.Experimental.UIElements.ContextType;
    readonly dataWatch: UnityEngine.Experimental.UIElements.IDataWatchService;
    readonly dispatcher: UnityEngine.Experimental.UIElements.IDispatcher;
    IMGUIContainersCount: number;
    IMGUIEventInterests: UnityEngine.EventInterests;
    readonly instanceID: number;
    readonly loadResourceFunc: ((pathName: string, type: any) => UnityEngine.Object);
    readonly scheduler: UnityEngine.Experimental.UIElements.IScheduler;
    readonly timerEventScheduler: UnityEngine.Experimental.UIElements.TimerEventScheduler;
    readonly visualTree: UnityEngine.Experimental.UIElements.VisualContainer;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class RenderData extends System.Object {
    constructor();
    lastLayout: UnityEngine.Rect;
    pixelCache: UnityEngine.RenderTexture;
    worldTransForm: UnityEngine.Matrix4x4;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class RepeatButton extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor(clickEvent: (() => void), delay: number, interval: number);
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class UIElementsUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TimerState extends System.ValueType {
    protected constructor();
    readonly deltaTime: number;
    now: number;
    start: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScheduleBuilder extends System.ValueType {
    protected constructor();
    Every(interval: number): UnityEngine.Experimental.UIElements.ScheduleBuilder;
    StartingIn(delay: number): UnityEngine.Experimental.UIElements.ScheduleBuilder;
    Until(condition: (() => boolean)): UnityEngine.Experimental.UIElements.ScheduleBuilder;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IScheduler {
    protected constructor();
    Schedule(timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void), hanlder: UnityEngine.Experimental.UIElements.IEventHandler): UnityEngine.Experimental.UIElements.ScheduleBuilder;
    Unschedule(timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void)): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScheduledItem extends System.Object {
    constructor(timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void), handler: UnityEngine.Experimental.UIElements.IEventHandler);
    IsUpdatable(): boolean;
    delay: number;
    interval: number;
    start: number;
    handler: UnityEngine.Experimental.UIElements.IEventHandler;
    timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void);
    timerUpdateStopCondition: (() => boolean);
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TimerEventScheduler extends System.Object {
    constructor();
    Schedule(timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void), handler: UnityEngine.Experimental.UIElements.IEventHandler): UnityEngine.Experimental.UIElements.ScheduleBuilder;
    Unschedule(timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void)): void;
    UpdateScheduledEvents(): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScrollerButton extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor(clickEvent: (() => void), delay: number, interval: number);
    clickable: UnityEngine.Experimental.UIElements.Clickable;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Scroller extends UnityEngine.Experimental.UIElements.VisualContainer {
    constructor(lowValue: number, highValue: number, valueChanged: ((obj: number) => void), direction?: UnityEngine.Experimental.UIElements.Slider.Direction);
    Adjust(factor: number): void;
    PropagateEnabled(c: UnityEngine.Experimental.UIElements.VisualContainer, enabled: boolean): void;
    ScrollPageDown(): void;
    ScrollPageUp(): void;
    direction: UnityEngine.Experimental.UIElements.Slider.Direction;
    enabled: boolean;
    readonly highButton: UnityEngine.Experimental.UIElements.ScrollerButton;
    readonly highValue: number;
    readonly lowButton: UnityEngine.Experimental.UIElements.ScrollerButton;
    readonly lowValue: number;
    readonly slider: UnityEngine.Experimental.UIElements.Slider;
    value: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualContainer extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor();
    AddChild(child: UnityEngine.Experimental.UIElements.VisualElement): void;
    AddStyleSheetPath(sheetPath: string): void;
    ClearChildren(): void;
    ContainsChild(elem: UnityEngine.Experimental.UIElements.VisualElement): boolean;
    GetChildAt(index: number): UnityEngine.Experimental.UIElements.VisualElement;
    GetEnumerator(): UnityEngine.Experimental.UIElements.VisualContainer.Enumerator;
    HasStyleSheetPath(sheetPath: string): boolean;
    InsertChild(index: number, child: UnityEngine.Experimental.UIElements.VisualElement): void;
    RemoveChild(child: UnityEngine.Experimental.UIElements.VisualElement): void;
    RemoveChildAt(index: number): void;
    RemoveStyleSheetPath(sheetPath: string): void;
    alignContent: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    alignItems: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    readonly childrenCount: number;
    clipChildren: boolean;
    flexDirection: UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection;
    flexWrap: UnityEngine.Experimental.UIElements.StyleEnums.Wrap;
    justifyContent: UnityEngine.Experimental.UIElements.StyleEnums.Justify;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScrollView extends UnityEngine.Experimental.UIElements.VisualContainer {
    constructor();
    constructor(horizontalScrollerValues: UnityEngine.Vector2, verticalScrollerValues: UnityEngine.Vector2);
    readonly contentView: UnityEngine.Experimental.UIElements.VisualContainer;
    readonly contentViewport: UnityEngine.Experimental.UIElements.VisualContainer;
    readonly horizontalScroller: UnityEngine.Experimental.UIElements.Scroller;
    horizontalScrollerValues: UnityEngine.Vector2;
    readonly needsHorizontal: boolean;
    readonly needsVertical: boolean;
    scrollOffset: UnityEngine.Vector2;
    showHorizontal: boolean;
    showVertical: boolean;
    readonly verticalScroller: UnityEngine.Experimental.UIElements.Scroller;
    verticalScrollerValues: UnityEngine.Vector2;
    static kDefaultScrollerValues: UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Slider extends UnityEngine.Experimental.UIElements.VisualContainer {
    constructor(start: number, end: number, valueChanged: ((obj: number) => void), direction?: UnityEngine.Experimental.UIElements.Slider.Direction, pageSize?: number);
    AdjustDragElement(factor: number): void;
    direction: UnityEngine.Experimental.UIElements.Slider.Direction;
    readonly dragElement: UnityEngine.Experimental.UIElements.VisualElement;
    highValue: number;
    lowValue: number;
    pageSize: number;
    readonly range: number;
    value: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.Slider {
  class Direction extends System.Enum {
    protected constructor();
    static Horizontal: UnityEngine.Experimental.UIElements.Slider.Direction;
    value__: number;
    static Vertical: UnityEngine.Experimental.UIElements.Slider.Direction;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Spacing extends System.ValueType {
    protected constructor();
    readonly horizontal: number;
    readonly vertical: number;
    bottom: number;
    left: number;
    right: number;
    top: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class PositionType extends System.Enum {
    protected constructor();
    static Absolute: UnityEngine.Experimental.UIElements.StyleEnums.PositionType;
    static Manual: UnityEngine.Experimental.UIElements.StyleEnums.PositionType;
    static Relative: UnityEngine.Experimental.UIElements.StyleEnums.PositionType;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class Overflow extends System.Enum {
    protected constructor();
    static Hidden: UnityEngine.Experimental.UIElements.StyleEnums.Overflow;
    static Scroll: UnityEngine.Experimental.UIElements.StyleEnums.Overflow;
    value__: number;
    static Visible: UnityEngine.Experimental.UIElements.StyleEnums.Overflow;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class FlexDirection extends System.Enum {
    protected constructor();
    static Column: UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection;
    static ColumnReverse: UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection;
    static Row: UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection;
    static RowReverse: UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class Wrap extends System.Enum {
    protected constructor();
    static NoWrap: UnityEngine.Experimental.UIElements.StyleEnums.Wrap;
    value__: number;
    static Wrap: UnityEngine.Experimental.UIElements.StyleEnums.Wrap;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class Align extends System.Enum {
    protected constructor();
    static Auto: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    static Center: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    static FlexEnd: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    static FlexStart: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    static Stretch: UnityEngine.Experimental.UIElements.StyleEnums.Align;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class Justify extends System.Enum {
    protected constructor();
    static Center: UnityEngine.Experimental.UIElements.StyleEnums.Justify;
    static FlexEnd: UnityEngine.Experimental.UIElements.StyleEnums.Justify;
    static FlexStart: UnityEngine.Experimental.UIElements.StyleEnums.Justify;
    static SpaceAround: UnityEngine.Experimental.UIElements.StyleEnums.Justify;
    static SpaceBetween: UnityEngine.Experimental.UIElements.StyleEnums.Justify;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleEnums {
  class ImageScaleMode extends System.Enum {
    protected constructor();
    static ScaleAndCrop: UnityEngine.Experimental.UIElements.StyleEnums.ImageScaleMode;
    static ScaleToFit: UnityEngine.Experimental.UIElements.StyleEnums.ImageScaleMode;
    static StretchToFill: UnityEngine.Experimental.UIElements.StyleEnums.ImageScaleMode;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TextField extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor();
    constructor(maxLength: number, multiline: boolean, isPasswordField: boolean, maskChar: any);
    OnStyleResolved(style: UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle): void;
    readonly cursorColor: UnityEngine.Color;
    doubleClickSelectsWord: boolean;
    readonly editor: UnityEngine.Experimental.UIElements.TextEditor;
    readonly hasFocus: boolean;
    isPasswordField: boolean;
    maskChar: any;
    maxLength: number;
    multiline: boolean;
    readonly selectionColor: UnityEngine.Color;
    tripleClickSelectsLine: boolean;
    OnTextChanged: ((obj: string) => void);
    OnTextChangeValidated: (() => void);
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class KeyboardTextEditor extends UnityEngine.Experimental.UIElements.TextEditor {
    constructor(textField: UnityEngine.Experimental.UIElements.TextField);
    PostDrawCursor(): void;
    PreDrawCursor(newText: string): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TextEditor extends UnityEngine.TextEditor {
    protected constructor();
    doubleClickSelectsWord: boolean;
    maskChar: any;
    maxLength: number;
    target: UnityEngine.Experimental.UIElements.VisualElement;
    tripleClickSelectsLine: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TouchScreenTextEditor extends UnityEngine.Experimental.UIElements.TextEditor {
    constructor(textField: UnityEngine.Experimental.UIElements.TextField);
    secureText: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Toggle extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor(clickEvent: (() => void));
    on: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class UQuery extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.UIElements.UQuery {
  class IVisualPredicateWrapper {
    protected constructor();
    Predicate(e: any): boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements.UQuery {
  class UQueryMatcher extends UnityEngine.Experimental.UIElements.StyleSheets.HierarchyTraversal {
    protected constructor();
    Run(root: UnityEngine.Experimental.UIElements.VisualElement, ruleMatchers: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher[]): void;
    ShouldSkipElement(element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements.UQuery {
  class SingleQueryMatcher extends UnityEngine.Experimental.UIElements.UQuery.UQueryMatcher {
    protected constructor();
    Run(root: UnityEngine.Experimental.UIElements.VisualElement, ruleMatchers: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher[]): void;
    readonly match: UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements.UQuery {
  class FirstQueryMatcher extends UnityEngine.Experimental.UIElements.UQuery.SingleQueryMatcher {
    constructor();
    OnRuleMatchedElement(matcher: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher, element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements.UQuery {
  class LastQueryMatcher extends UnityEngine.Experimental.UIElements.UQuery.SingleQueryMatcher {
    constructor();
    OnRuleMatchedElement(matcher: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher, element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements.UQuery {
  class IndexQueryMatcher extends UnityEngine.Experimental.UIElements.UQuery.SingleQueryMatcher {
    constructor();
    OnRuleMatchedElement(matcher: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher, element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
    Run(root: UnityEngine.Experimental.UIElements.VisualElement, ruleMatchers: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher[]): void;
    matchIndex: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class UQueryExtensions extends System.Object {
    protected constructor();
    static Q(e: UnityEngine.Experimental.UIElements.VisualElement, name?: string, className?: string): UnityEngine.Experimental.UIElements.VisualElement;
    static Q(e: UnityEngine.Experimental.UIElements.VisualElement, name?: string, classes: string[]): UnityEngine.Experimental.UIElements.VisualElement;
    static Query(e: UnityEngine.Experimental.UIElements.VisualElement): any;
    static Query(e: UnityEngine.Experimental.UIElements.VisualElement, name?: string, className?: string): any;
    static Query(e: UnityEngine.Experimental.UIElements.VisualElement, name?: string, classes: string[]): any;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualContainer {
  class Enumerator extends System.ValueType {
    protected constructor();
    Dispose(): void;
    MoveNext(): boolean;
    Reset(): void;
    readonly Current: UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class PseudoStates extends System.Enum {
    protected constructor();
    static Active: UnityEngine.Experimental.UIElements.PseudoStates;
    static Checked: UnityEngine.Experimental.UIElements.PseudoStates;
    static Disabled: UnityEngine.Experimental.UIElements.PseudoStates;
    static Focus: UnityEngine.Experimental.UIElements.PseudoStates;
    static Hover: UnityEngine.Experimental.UIElements.PseudoStates;
    static Invisible: UnityEngine.Experimental.UIElements.PseudoStates;
    static Selected: UnityEngine.Experimental.UIElements.PseudoStates;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class PickingMode extends System.Enum {
    protected constructor();
    static Ignore: UnityEngine.Experimental.UIElements.PickingMode;
    static Position: UnityEngine.Experimental.UIElements.PickingMode;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElement {
  class MeasureMode extends System.Enum {
    protected constructor();
    static AtMost: UnityEngine.Experimental.UIElements.VisualElement.MeasureMode;
    static Exactly: UnityEngine.Experimental.UIElements.VisualElement.MeasureMode;
    static Undefined: UnityEngine.Experimental.UIElements.VisualElement.MeasureMode;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualElementExtensions extends System.Object {
    protected constructor();
    static ChangeCoordinatesTo(src: UnityEngine.Experimental.UIElements.VisualElement, dest: UnityEngine.Experimental.UIElements.VisualElement, rect: UnityEngine.Rect): UnityEngine.Rect;
    static ChangeCoordinatesTo(src: UnityEngine.Experimental.UIElements.VisualElement, dest: UnityEngine.Experimental.UIElements.VisualElement, point: UnityEngine.Vector2): UnityEngine.Vector2;
    static GlobalToBound(ele: UnityEngine.Experimental.UIElements.VisualElement, r: UnityEngine.Rect): UnityEngine.Rect;
    static GlobalToBound(ele: UnityEngine.Experimental.UIElements.VisualElement, p: UnityEngine.Vector2): UnityEngine.Vector2;
    static LocalToGlobal(ele: UnityEngine.Experimental.UIElements.VisualElement, r: UnityEngine.Rect): UnityEngine.Rect;
    static LocalToGlobal(ele: UnityEngine.Experimental.UIElements.VisualElement, p: UnityEngine.Vector2): UnityEngine.Vector2;
    static StretchToParentSize(elem: UnityEngine.Experimental.UIElements.VisualElement): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class StylePainterExtensionMethods extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualElementUtils extends System.Object {
    constructor();
    static GetUniqueName(nameBase: string): string;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualTreeAsset extends UnityEngine.ScriptableObject {
    constructor();
    CloneTree(): UnityEngine.Experimental.UIElements.VisualContainer;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualElementAsset extends UnityEngine.ScriptableObject {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    classes: string[];
    id: number;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ButtonAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.Button, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ImageAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.Image, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class LabelAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.Label, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class RepeatButtonAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.RepeatButton, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScrollerAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.Scroller, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScrollerButtonAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.ScrollerButton, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ScrollViewAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.ScrollView, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class SliderAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.Slider, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TextFieldAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.TextField, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class ToggleAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.Toggle, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualContainerAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.VisualContainer, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IMGUIContainerAsset {
    constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    classes: string[];
    hideFlags: UnityEngine.HideFlags;
    id: number;
    name: string;
    parentId: number;
    ruleIndex: number;
    text: string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.VisualElementAsset`1[[UnityEngine.Experimental.UIElements.IMGUIContainer, UnityEngine.UIElementsModule, Version=0.0.0 {
  class VisualElementAsset`1 extends UnityEngine.Experimental.UIElements.VisualElementAsset {
    protected constructor();
    Create(): UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventBase extends System.Object {
    constructor(flags: UnityEngine.Experimental.UIElements.EventBase.EventFlags, imguiEvent: UnityEngine.Event);
    GetEventTypeId(): number;
    PreventDefault(): void;
    StopImmediatePropagation(): void;
    StopPropagation(): void;
    readonly bubbles: boolean;
    readonly currentTarget: UnityEngine.Experimental.UIElements.IEventHandler;
    readonly dispatch: boolean;
    readonly imguiEvent: UnityEngine.Event;
    readonly isDefaultPrevented: boolean;
    readonly isImmediatePropagationStopped: boolean;
    readonly isPropagationStopped: boolean;
    readonly propagationPhase: UnityEngine.Experimental.UIElements.PropagationPhase;
    readonly target: UnityEngine.Experimental.UIElements.IEventHandler;
    readonly timestamp: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.EventBase {
  class EventFlags extends System.Enum {
    protected constructor();
    static Bubbles: UnityEngine.Experimental.UIElements.EventBase.EventFlags;
    static Cancellable: UnityEngine.Experimental.UIElements.EventBase.EventFlags;
    static None: UnityEngine.Experimental.UIElements.EventBase.EventFlags;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventCallbackFunctorBase extends System.Object {
    constructor(phase: UnityEngine.Experimental.UIElements.CallbackPhase);
    Invoke(evt: UnityEngine.Experimental.UIElements.EventBase): void;
    IsEquivalentTo(eventTypeId: number, callback: any, phase: UnityEngine.Experimental.UIElements.CallbackPhase): boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Capture extends System.Enum {
    protected constructor();
    static Capture: UnityEngine.Experimental.UIElements.Capture;
    static NoCapture: UnityEngine.Experimental.UIElements.Capture;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class CallbackPhase extends System.Enum {
    protected constructor();
    static CaptureAndTarget: UnityEngine.Experimental.UIElements.CallbackPhase;
    static TargetAndBubbleUp: UnityEngine.Experimental.UIElements.CallbackPhase;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventCallbackListPool extends System.Object {
    constructor();
    Get(initializer: UnityEngine.Experimental.UIElements.EventCallbackList): UnityEngine.Experimental.UIElements.EventCallbackList;
    Release(element: UnityEngine.Experimental.UIElements.EventCallbackList): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventCallbackList {
    constructor();
    constructor(source: UnityEngine.Experimental.UIElements.EventCallbackList);
    Add(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, comparer: any): number;
    BinarySearch(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): number;
    BinarySearch(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, comparer: any): number;
    Clear(): void;
    Contains(eventTypeId: number, callback: any, phase: UnityEngine.Experimental.UIElements.CallbackPhase): boolean;
    Contains(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): boolean;
    CopyTo(index: number, array: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[], arrayIndex: number, count: number): void;
    CopyTo(array: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[]): void;
    CopyTo(array: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[], arrayIndex: number): void;
    Equals(obj: any): boolean;
    Exists(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): boolean;
    Find(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase;
    FindAll(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[];
    FindIndex(startIndex: number, count: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindIndex(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindLast(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase;
    FindLastIndex(startIndex: number, count: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindLastIndex(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    ForEach(action: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => void)): void;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetRange(index: number, count: number): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[];
    GetType(): any;
    IndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): number;
    IndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number): number;
    IndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number, count: number): number;
    Insert(index: number, item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): number;
    LastIndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number): number;
    LastIndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number, count: number): number;
    Remove(eventTypeId: number, callback: any, phase: UnityEngine.Experimental.UIElements.CallbackPhase): boolean;
    Remove(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): boolean;
    RemoveAll(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, y: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => number)): void;
    ToArray(): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[];
    ToString(): string;
    TrimExcess(): void;
    TrueForAll(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase;
    set_Item(index: number, value: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): void;
  }
}
declare namespace System.Collections.Generic.List`1[[UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, UnityEngine.UIElementsModule, Version=0.0.0 {
  class List`1 extends System.Object {
    constructor();
    constructor(capacity: number);
    constructor(collection: any);
    Add(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, comparer: any): number;
    BinarySearch(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): number;
    BinarySearch(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, comparer: any): number;
    Clear(): void;
    Contains(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): boolean;
    CopyTo(index: number, array: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[], arrayIndex: number, count: number): void;
    CopyTo(array: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[]): void;
    CopyTo(array: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[], arrayIndex: number): void;
    Exists(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): boolean;
    Find(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase;
    FindAll(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[];
    FindIndex(startIndex: number, count: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindIndex(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindLast(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase;
    FindLastIndex(startIndex: number, count: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    FindLastIndex(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    ForEach(action: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => void)): void;
    GetEnumerator(): any;
    GetRange(index: number, count: number): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[];
    IndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): number;
    IndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number): number;
    IndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number, count: number): number;
    Insert(index: number, item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): number;
    LastIndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number): number;
    LastIndexOf(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, index: number, count: number): number;
    Remove(item: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): boolean;
    RemoveAll(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase, y: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => number)): void;
    ToArray(): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase[];
    TrimExcess(): void;
    TrueForAll(match: ((obj: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEngine.Experimental.UIElements.EventCallbackFunctorBase;
    set_Item(index: number, value: UnityEngine.Experimental.UIElements.EventCallbackFunctorBase): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventCallbackRegistry extends System.Object {
    constructor();
    InvokeCallbacks(evt: UnityEngine.Experimental.UIElements.EventBase): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IEventHandler {
    protected constructor();
    HandleEvent(evt: UnityEngine.Experimental.UIElements.EventBase): void;
    OnLostCapture(): void;
    OnLostKeyboardFocus(): void;
    readonly panel: UnityEngine.Experimental.UIElements.IPanel;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class EventHandlerExtensions extends System.Object {
    protected constructor();
    static HasCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): boolean;
    static ReleaseCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    static RemoveCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    static Schedule(handler: UnityEngine.Experimental.UIElements.IEventHandler, timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void)): UnityEngine.Experimental.UIElements.ScheduleBuilder;
    static TakeCapture(handler: UnityEngine.Experimental.UIElements.IEventHandler): void;
    static Unschedule(handler: UnityEngine.Experimental.UIElements.IEventHandler, timerUpdateEvent: ((obj: UnityEngine.Experimental.UIElements.TimerState) => void)): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class KeyboardEventBase extends UnityEngine.Experimental.UIElements.UIEvent {
    constructor(flags: UnityEngine.Experimental.UIElements.EventBase.EventFlags, systemEvent: UnityEngine.Event);
    readonly altKey: boolean;
    readonly character: any;
    readonly commandKey: boolean;
    readonly ctrlKey: boolean;
    readonly keyCode: UnityEngine.KeyCode;
    readonly modifiers: UnityEngine.EventModifiers;
    readonly shiftKey: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class UIEvent extends UnityEngine.Experimental.UIElements.EventBase {
    constructor(flags: UnityEngine.Experimental.UIElements.EventBase.EventFlags, systemEvent: UnityEngine.Event);
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class KeyDownEvent extends UnityEngine.Experimental.UIElements.KeyboardEventBase {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class KeyUpEvent extends UnityEngine.Experimental.UIElements.KeyboardEventBase {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseEventBase extends UnityEngine.Experimental.UIElements.UIEvent {
    constructor(flags: UnityEngine.Experimental.UIElements.EventBase.EventFlags, systemEvent: UnityEngine.Event);
    readonly altKey: boolean;
    readonly button: number;
    readonly clickCount: number;
    readonly commandKey: boolean;
    readonly ctrlKey: boolean;
    readonly currentTarget: UnityEngine.Experimental.UIElements.IEventHandler;
    readonly localMousePosition: UnityEngine.Vector2;
    readonly modifiers: UnityEngine.EventModifiers;
    readonly mouseDelta: UnityEngine.Vector2;
    readonly mousePosition: UnityEngine.Vector2;
    readonly shiftKey: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseDownEvent extends UnityEngine.Experimental.UIElements.MouseEventBase {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseUpEvent extends UnityEngine.Experimental.UIElements.MouseEventBase {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class MouseMoveEvent extends UnityEngine.Experimental.UIElements.MouseEventBase {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class WheelEvent extends UnityEngine.Experimental.UIElements.MouseEventBase {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
    readonly delta: UnityEngine.Vector3;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class IMGUIEvent extends UnityEngine.Experimental.UIElements.UIEvent {
    constructor();
    constructor(systemEvent: UnityEngine.Event);
    GetEventTypeId(): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class StylePropertyID extends System.Enum {
    protected constructor();
    static AlignContent: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static AlignItems: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static AlignSelf: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BackgroundColor: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BackgroundImage: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BackgroundSize: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderBottom: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderBottomWidth: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderColor: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderLeft: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderLeftWidth: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderRadius: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderRight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderRightWidth: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderTop: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static BorderTopWidth: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Custom: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Flex: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static FlexDirection: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static FlexWrap: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Font: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static FontSize: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static FontStyle: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Height: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static JustifyContent: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MarginBottom: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MarginLeft: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MarginRight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MarginTop: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MaxHeight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MaxWidth: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MinHeight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static MinWidth: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Opacity: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Overflow: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PaddingBottom: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PaddingLeft: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PaddingRight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PaddingTop: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PositionBottom: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PositionLeft: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PositionRight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PositionTop: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static PositionType: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static SliceBottom: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static SliceLeft: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static SliceRight: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static SliceTop: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static TextAlignment: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static TextClipping: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static TextColor: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static Unknown: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    value__: number;
    static Width: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
    static WordWrap: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyID;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class StylePropertyApplyMode extends System.Enum {
    protected constructor();
    static Copy: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode;
    static CopyIfMoreSpecific: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode;
    static CopyIfNotInline: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class StyleComplexSelectorExtensions extends System.Object {
    protected constructor();
    static CachePseudoStateMasks(complexSelector: UnityEngine.StyleSheets.StyleComplexSelector): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets.StyleComplexSelectorExtensions {
  class PseudoStateData extends System.ValueType {
    protected constructor();
    negate: boolean;
    state: UnityEngine.Experimental.UIElements.PseudoStates;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class RuleMatcher extends System.ValueType {
    protected constructor();
    complexSelector: UnityEngine.StyleSheets.StyleComplexSelector;
    depth: number;
    sheet: UnityEngine.StyleSheets.StyleSheet;
    simpleSelectorIndex: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class StyleContext extends System.Object {
    constructor(tree: UnityEngine.Experimental.UIElements.VisualContainer);
    ApplyStyles(): void;
    DirtyStyleSheets(): void;
    currentPixelsPerPoint: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets.StyleContext {
  class RuleRef extends System.ValueType {
    protected constructor();
    selector: UnityEngine.StyleSheets.StyleComplexSelector;
    sheet: UnityEngine.StyleSheets.StyleSheet;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets.StyleContext {
  class StyleContextHierarchyTraversal extends UnityEngine.Experimental.UIElements.StyleSheets.HierarchyTraversal {
    constructor();
    OnBeginElementTest(element: UnityEngine.Experimental.UIElements.VisualElement, ruleMatchers: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher[]): void;
    OnRuleMatchedElement(matcher: UnityEngine.Experimental.UIElements.StyleSheets.RuleMatcher, element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
    ProcessMatchedRules(element: UnityEngine.Experimental.UIElements.VisualElement): void;
    ShouldSkipElement(element: UnityEngine.Experimental.UIElements.VisualElement): boolean;
    currentPixelsPerPoint: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class StyleSheetCache extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache {
  class SheetHandleKey extends System.ValueType {
    protected constructor();
    index: number;
    sheetInstanceID: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache {
  class SheetHandleKeyComparer extends System.Object {
    constructor();
    Equals(x: UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache.SheetHandleKey, y: UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache.SheetHandleKey): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetHashCode(key: UnityEngine.Experimental.UIElements.StyleSheets.StyleSheetCache.SheetHandleKey): number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class StyleSheetExtensions extends System.Object {
    protected constructor();
    static Apply(sheet: UnityEngine.StyleSheets.StyleSheet, handle: UnityEngine.StyleSheets.StyleValueHandle, specificity: number, property: any): void;
    static Apply(sheet: UnityEngine.StyleSheets.StyleSheet, handle: UnityEngine.StyleSheets.StyleValueHandle, specificity: number, property: any): void;
    static Apply(sheet: UnityEngine.StyleSheets.StyleSheet, handle: UnityEngine.StyleSheets.StyleValueHandle, specificity: number, property: any): void;
    static Apply(sheet: UnityEngine.StyleSheets.StyleSheet, handle: UnityEngine.StyleSheets.StyleValueHandle, specificity: number, property: any): void;
    static ReadAsString(sheet: UnityEngine.StyleSheets.StyleSheet, handle: UnityEngine.StyleSheets.StyleValueHandle): string;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class CustomProperty extends System.ValueType {
    protected constructor();
    data: UnityEngine.StyleSheets.StyleSheet;
    handle: UnityEngine.StyleSheets.StyleValueHandle;
    specificity: number;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class ICustomStyles {
    protected constructor();
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class ICustomStyle {
    protected constructor();
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements.StyleSheets {
  class VisualElementStylesData extends System.Object {
    constructor(isShared: boolean);
    Apply(other: UnityEngine.Experimental.UIElements.StyleSheets.VisualElementStylesData, mode: UnityEngine.Experimental.UIElements.StyleSheets.StylePropertyApplyMode): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    ApplyCustomProperty(propertyName: string, target: any): void;
    WriteToGUIStyle(style: UnityEngine.GUIStyle): void;
    static none: UnityEngine.Experimental.UIElements.StyleSheets.VisualElementStylesData;
  }
}
declare namespace UnityEngine {
  class RenderMode extends System.Enum {
    protected constructor();
    static ScreenSpaceCamera: UnityEngine.RenderMode;
    static ScreenSpaceOverlay: UnityEngine.RenderMode;
    value__: number;
    static WorldSpace: UnityEngine.RenderMode;
  }
}
declare namespace UnityEngine {
  class AdditionalCanvasShaderChannels extends System.Enum {
    protected constructor();
    static None: UnityEngine.AdditionalCanvasShaderChannels;
    static Normal: UnityEngine.AdditionalCanvasShaderChannels;
    static Tangent: UnityEngine.AdditionalCanvasShaderChannels;
    static TexCoord1: UnityEngine.AdditionalCanvasShaderChannels;
    static TexCoord2: UnityEngine.AdditionalCanvasShaderChannels;
    static TexCoord3: UnityEngine.AdditionalCanvasShaderChannels;
    value__: number;
  }
}
declare namespace UnityEngine {
  class Canvas extends UnityEngine.Behaviour {
    constructor();
    static ForceUpdateCanvases(): void;
    static GetDefaultCanvasMaterial(): UnityEngine.Material;
    static GetDefaultCanvasTextMaterial(): UnityEngine.Material;
    static GetETC1SupportedCanvasMaterial(): UnityEngine.Material;
    additionalShaderChannels: UnityEngine.AdditionalCanvasShaderChannels;
    readonly cachedSortingLayerValue: number;
    readonly isRootCanvas: boolean;
    normalizedSortingGridSize: number;
    overridePixelPerfect: boolean;
    overrideSorting: boolean;
    pixelPerfect: boolean;
    readonly pixelRect: UnityEngine.Rect;
    planeDistance: number;
    referencePixelsPerUnit: number;
    renderMode: UnityEngine.RenderMode;
    readonly renderOrder: number;
    readonly rootCanvas: UnityEngine.Canvas;
    scaleFactor: number;
    sortingGridNormalizedSize: number;
    sortingLayerID: number;
    sortingLayerName: string;
    sortingOrder: number;
    targetDisplay: number;
    worldCamera: UnityEngine.Camera;
  }
}
declare namespace UnityEngine {
  class UISystemProfilerApi extends System.Object {
    constructor();
    static AddMarker(name: string, obj: UnityEngine.Object): void;
    static BeginSample(type: UnityEngine.UISystemProfilerApi.SampleType): void;
    static EndSample(type: UnityEngine.UISystemProfilerApi.SampleType): void;
  }
}
declare namespace UnityEngine.UISystemProfilerApi {
  class SampleType extends System.Enum {
    protected constructor();
    static Layout: UnityEngine.UISystemProfilerApi.SampleType;
    static Render: UnityEngine.UISystemProfilerApi.SampleType;
    value__: number;
  }
}
declare namespace UnityEngine {
  class ICanvasRaycastFilter {
    protected constructor();
    IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
  }
}
declare namespace UnityEngine {
  class CanvasGroup extends UnityEngine.Component {
    constructor();
    IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
    alpha: number;
    blocksRaycasts: boolean;
    ignoreParentGroups: boolean;
    interactable: boolean;
  }
}
declare namespace UnityEngine {
  class CanvasRenderer extends UnityEngine.Component {
    constructor();
    static AddUIVertexStream(verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector2[], uv1S: UnityEngine.Vector2[], uv2S: UnityEngine.Vector2[], uv3S: UnityEngine.Vector2[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[]): void;
    static AddUIVertexStream(verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector2[], uv1S: UnityEngine.Vector2[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[]): void;
    Clear(): void;
    static CreateUIVertexStream(verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector2[], uv1S: UnityEngine.Vector2[], uv2S: UnityEngine.Vector2[], uv3S: UnityEngine.Vector2[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]): void;
    static CreateUIVertexStream(verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector2[], uv1S: UnityEngine.Vector2[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]): void;
    DisableRectClipping(): void;
    EnableRectClipping(rect: UnityEngine.Rect): void;
    GetAlpha(): number;
    GetColor(): UnityEngine.Color;
    GetMaterial(): UnityEngine.Material;
    GetMaterial(index: number): UnityEngine.Material;
    GetPopMaterial(index: number): UnityEngine.Material;
    SetAlpha(alpha: number): void;
    SetAlphaTexture(texture: UnityEngine.Texture): void;
    SetColor(color: UnityEngine.Color): void;
    SetMaterial(material: UnityEngine.Material, index: number): void;
    SetMaterial(material: UnityEngine.Material, texture: UnityEngine.Texture): void;
    SetMesh(mesh: UnityEngine.Mesh): void;
    SetPopMaterial(material: UnityEngine.Material, index: number): void;
    SetTexture(texture: UnityEngine.Texture): void;
    SetVertices(vertices: UnityEngine.UIVertex[]): void;
    SetVertices(vertices: UnityEngine.UIVertex[], size: number): void;
    static SplitUIVertexStreams(verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector2[], uv1S: UnityEngine.Vector2[], uv2S: UnityEngine.Vector2[], uv3S: UnityEngine.Vector2[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]): void;
    static SplitUIVertexStreams(verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector2[], uv1S: UnityEngine.Vector2[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]): void;
    readonly absoluteDepth: number;
    cull: boolean;
    readonly hasMoved: boolean;
    hasPopInstruction: boolean;
    readonly hasRectClipping: boolean;
    isMask: boolean;
    materialCount: number;
    popMaterialCount: number;
    readonly relativeDepth: number;
  }
}
declare namespace UnityEngine {
  class RectTransformUtility extends System.Object {
    protected constructor();
    static CalculateRelativeRectTransformBounds(trans: UnityEngine.Transform): UnityEngine.Bounds;
    static CalculateRelativeRectTransformBounds(root: UnityEngine.Transform, child: UnityEngine.Transform): UnityEngine.Bounds;
    static FlipLayoutAxes(rect: UnityEngine.RectTransform, keepPositioning: boolean, recursive: boolean): void;
    static FlipLayoutOnAxis(rect: UnityEngine.RectTransform, axis: number, keepPositioning: boolean, recursive: boolean): void;
    static PixelAdjustPoint(point: UnityEngine.Vector2, elementTransform: UnityEngine.Transform, canvas: UnityEngine.Canvas): UnityEngine.Vector2;
    static PixelAdjustRect(rectTransform: UnityEngine.RectTransform, canvas: UnityEngine.Canvas): UnityEngine.Rect;
    static RectangleContainsScreenPoint(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2): boolean;
    static RectangleContainsScreenPoint(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera): boolean;
    static ScreenPointToLocalPointInRectangle(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera, localPoint: any): boolean;
    static ScreenPointToRay(cam: UnityEngine.Camera, screenPos: UnityEngine.Vector2): UnityEngine.Ray;
    static ScreenPointToWorldPointInRectangle(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera, worldPoint: any): boolean;
    static WorldToScreenPoint(cam: UnityEngine.Camera, worldPoint: UnityEngine.Vector3): UnityEngine.Vector2;
  }
}
declare namespace UnityEngine.Networking {
  class ConnectionSimulatorConfig extends System.Object {
    constructor(outMinDelay: number, outAvgDelay: number, inMinDelay: number, inAvgDelay: number, packetLossPercentage: number);
    Dispose(): void;
  }
}
declare namespace UnityEngine.Networking {
  class ConnectionConfigInternal extends System.Object {
    constructor(config: UnityEngine.Networking.ConnectionConfig);
    AddChannel(value: UnityEngine.Networking.QosType): number;
    Dispose(): void;
    GetChannel(i: number): UnityEngine.Networking.QosType;
    InitAckDelay(value: number): void;
    InitAcksType(value: number): void;
    InitAllCostTimeout(value: number): void;
    InitBandwidthPeakFactor(value: number): void;
    InitConnectTimeout(value: number): void;
    InitDisconnectTimeout(value: number): void;
    InitFragmentSize(value: number): void;
    InitInitialBandwidth(value: number): void;
    InitMaxCombinedReliableMessageCount(value: number): void;
    InitMaxCombinedReliableMessageSize(value: number): void;
    InitMaxConnectionAttempt(value: number): void;
    InitMaxSentMessageQueueSize(value: number): void;
    InitMinUpdateTimeout(value: number): void;
    InitNetworkDropThreshold(value: number): void;
    InitOverflowDropThreshold(value: number): void;
    InitPacketSize(value: number): void;
    InitPingTimeout(value: number): void;
    InitReducedPingTimeout(value: number): void;
    InitResendTimeout(value: number): void;
    InitSendDelay(value: number): void;
    InitSSLCAFilePath(value: string): number;
    InitSSLCertFilePath(value: string): number;
    InitSSLPrivateKeyFilePath(value: string): number;
    InitUdpSocketReceiveBufferMaxSize(value: number): void;
    InitUsePlatformSpecificProtocols(value: boolean): void;
    InitWebSocketReceiveBufferMaxSize(value: number): void;
    InitWrapper(): void;
    readonly ChannelSize: number;
  }
}
declare namespace UnityEngine.Networking {
  class HostTopologyInternal extends System.Object {
    constructor(topology: UnityEngine.Networking.HostTopology);
    AddSpecialConnectionConfigWrapper(config: UnityEngine.Networking.ConnectionConfigInternal): number;
    Dispose(): void;
    InitMessagePoolSizeGrowthFactor(factor: number): void;
    InitReceivedPoolSize(pool: number): void;
    InitSentMessagePoolSize(pool: number): void;
    InitWrapper(config: UnityEngine.Networking.ConnectionConfigInternal, maxDefaultConnections: number): void;
  }
}
declare namespace UnityEngine.Networking {
  class GlobalConfigInternal extends System.Object {
    constructor(config: UnityEngine.Networking.GlobalConfig);
    Dispose(): void;
    InitMaxHosts(size: number): void;
    InitMaxNetSimulatorTimeout(ms: number): void;
    InitMaxPacketSize(size: number): void;
    InitMaxTimerTimeout(ms: number): void;
    InitMinNetSimulatorTimeout(ms: number): void;
    InitMinTimerTimeout(ms: number): void;
    InitReactorMaximumReceivedMessages(size: number): void;
    InitReactorMaximumSentMessages(size: number): void;
    InitReactorModel(model: number): void;
    InitThreadAwakeTimeout(ms: number): void;
    InitThreadPoolSize(size: number): void;
    InitWrapper(): void;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkTransport extends System.Object {
    protected constructor();
    static AddHost(topology: UnityEngine.Networking.HostTopology): number;
    static AddHost(topology: UnityEngine.Networking.HostTopology, port: number): number;
    static AddHost(topology: UnityEngine.Networking.HostTopology, port: number, ip: string): number;
    static AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number): number;
    static AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number, port: number): number;
    static AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number, port: number, ip: string): number;
    static AddSceneId(id: number): void;
    static AddWebsocketHost(topology: UnityEngine.Networking.HostTopology, port: number): number;
    static AddWebsocketHost(topology: UnityEngine.Networking.HostTopology, port: number, ip: string): number;
    static Connect(hostId: number, address: string, port: number, exeptionConnectionId: number, error: any): number;
    static ConnectAsNetworkHost(hostId: number, address: string, port: number, network: UnityEngine.Networking.Types.NetworkID, source: UnityEngine.Networking.Types.SourceID, node: UnityEngine.Networking.Types.NodeID, error: any): void;
    static ConnectEndPoint(hostId: number, endPoint: any, exceptionConnectionId: number, error: any): number;
    static ConnectToNetworkPeer(hostId: number, address: string, port: number, exceptionConnectionId: number, relaySlotId: number, network: UnityEngine.Networking.Types.NetworkID, source: UnityEngine.Networking.Types.SourceID, node: UnityEngine.Networking.Types.NodeID, error: any): number;
    static ConnectToNetworkPeer(hostId: number, address: string, port: number, exceptionConnectionId: number, relaySlotId: number, network: UnityEngine.Networking.Types.NetworkID, source: UnityEngine.Networking.Types.SourceID, node: UnityEngine.Networking.Types.NodeID, bytesPerSec: number, bucketSizeFactor: number, error: any): number;
    static ConnectWithSimulator(hostId: number, address: string, port: number, exeptionConnectionId: number, error: any, conf: UnityEngine.Networking.ConnectionSimulatorConfig): number;
    static Disconnect(hostId: number, connectionId: number, error: any): boolean;
    static DisconnectNetworkHost(hostId: number, error: any): void;
    static FinishSendMulticast(hostId: number, error: any): boolean;
    static GetAckBufferCount(hostId: number, connectionId: number, error: any): number;
    static GetAssetId(go: UnityEngine.GameObject): string;
    static GetBroadcastConnectionInfo(hostId: number, port: any, error: any): string;
    static GetBroadcastConnectionInfo(hostId: number, address: any, port: any, error: any): void;
    static GetBroadcastConnectionMessage(hostId: number, buffer: number[], bufferSize: number, receivedSize: any, error: any): void;
    static GetConnectionInfo(hostId: number, connectionId: number, port: any, network: any, dstNode: any, error: any): string;
    static GetConnectionInfo(hostId: number, connectionId: number, address: any, port: any, network: any, dstNode: any, error: any): void;
    static GetCurrentIncomingMessageAmount(): number;
    static GetCurrentOutgoingMessageAmount(): number;
    static GetCurrentRtt(hostId: number, connectionId: number, error: any): number;
    static GetCurrentRTT(hostId: number, connectionId: number, error: any): number;
    static GetIncomingMessageQueueSize(hostId: number, error: any): number;
    static GetIncomingPacketCount(hostId: number, connectionId: number, error: any): number;
    static GetIncomingPacketCountForAllHosts(): number;
    static GetIncomingPacketDropCountForAllHosts(): number;
    static GetIncomingPacketLossCount(hostId: number, connectionId: number, error: any): number;
    static GetMaxAllowedBandwidth(hostId: number, connectionId: number, error: any): number;
    static GetNetIOTimeuS(): number;
    static GetNetworkLostPacketNum(hostId: number, connectionId: number, error: any): number;
    static GetNetworkTimestamp(): number;
    static GetNextSceneId(): number;
    static GetOutgoingFullBytesCount(): number;
    static GetOutgoingFullBytesCountForConnection(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingFullBytesCountForHost(hostId: number, error: any): number;
    static GetOutgoingMessageCount(): number;
    static GetOutgoingMessageCountForConnection(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingMessageCountForHost(hostId: number, error: any): number;
    static GetOutgoingMessageQueueSize(hostId: number, error: any): number;
    static GetOutgoingPacketCount(): number;
    static GetOutgoingPacketCountForConnection(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingPacketCountForHost(hostId: number, error: any): number;
    static GetOutgoingPacketNetworkLossPercent(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingPacketOverflowLossPercent(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingSystemBytesCount(): number;
    static GetOutgoingSystemBytesCountForConnection(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingSystemBytesCountForHost(hostId: number, error: any): number;
    static GetOutgoingUserBytesCount(): number;
    static GetOutgoingUserBytesCountForConnection(hostId: number, connectionId: number, error: any): number;
    static GetOutgoingUserBytesCountForHost(hostId: number, error: any): number;
    static GetPacketReceivedRate(hostId: number, connectionId: number, error: any): number;
    static GetPacketSentRate(hostId: number, connectionId: number, error: any): number;
    static GetRemoteDelayTimeMS(hostId: number, connectionId: number, remoteTime: number, error: any): number;
    static GetRemotePacketReceivedRate(hostId: number, connectionId: number, error: any): number;
    static Init(): void;
    static Init(config: UnityEngine.Networking.GlobalConfig): void;
    static IsBroadcastDiscoveryRunning(): boolean;
    static QueueMessageForSending(hostId: number, connectionId: number, channelId: number, buffer: number[], size: number, error: any): boolean;
    static Receive(hostId: any, connectionId: any, channelId: any, buffer: number[], bufferSize: number, receivedSize: any, error: any): UnityEngine.Networking.NetworkEventType;
    static ReceiveFromHost(hostId: number, connectionId: any, channelId: any, buffer: number[], bufferSize: number, receivedSize: any, error: any): UnityEngine.Networking.NetworkEventType;
    static ReceiveRelayEventFromHost(hostId: number, error: any): UnityEngine.Networking.NetworkEventType;
    static RemoveHost(hostId: number): boolean;
    static Send(hostId: number, connectionId: number, channelId: number, buffer: number[], size: number, error: any): boolean;
    static SendMulticast(hostId: number, connectionId: number, error: any): boolean;
    static SendQueuedMessages(hostId: number, connectionId: number, error: any): boolean;
    static SetBroadcastCredentials(hostId: number, key: number, version: number, subversion: number, error: any): void;
    static SetPacketStat(direction: number, packetStatId: number, numMsgs: number, numBytes: number): void;
    static Shutdown(): void;
    static StartBroadcastDiscovery(hostId: number, broadcastPort: number, key: number, version: number, subversion: number, buffer: number[], size: number, timeout: number, error: any): boolean;
    static StartSendMulticast(hostId: number, channelId: number, buffer: number[], size: number, error: any): boolean;
    static StopBroadcastDiscovery(): void;
    static readonly IsStarted: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class Request extends System.Object {
    protected constructor();
    IsValid(): boolean;
    ToString(): string;
    accessTokenString: string;
    appId: UnityEngine.Networking.Types.AppID;
    domain: number;
    projectId: string;
    sourceId: UnityEngine.Networking.Types.SourceID;
    version: number;
    static currentVersion: number;
  }
}
declare namespace UnityEngine.Networking.Match {
  class ResponseBase extends System.Object {
    protected constructor();
    Parse(obj: any): void;
    ParseJSONBool(name: string, obj: any, dictJsonObj: any): boolean;
    ParseJSONDateTime(name: string, obj: any, dictJsonObj: any): any;
    ParseJSONInt16(name: string, obj: any, dictJsonObj: any): number;
    ParseJSONInt32(name: string, obj: any, dictJsonObj: any): number;
    ParseJSONInt64(name: string, obj: any, dictJsonObj: any): number;
    ParseJSONListOfStrings(name: string, obj: any, dictJsonObj: any): string[];
    ParseJSONString(name: string, obj: any, dictJsonObj: any): string;
    ParseJSONUInt16(name: string, obj: any, dictJsonObj: any): number;
    ParseJSONUInt32(name: string, obj: any, dictJsonObj: any): number;
    ParseJSONUInt64(name: string, obj: any, dictJsonObj: any): number;
  }
}
declare namespace UnityEngine.Networking.Match {
  class IResponse {
    protected constructor();
    SetFailure(info: string): void;
    SetSuccess(): void;
  }
}
declare namespace UnityEngine.Networking.Match {
  class Response extends UnityEngine.Networking.Match.ResponseBase {
    protected constructor();
    Parse(obj: any): void;
    SetFailure(info: string): void;
    SetSuccess(): void;
    ToString(): string;
    readonly extendedInfo: string;
    readonly success: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class BasicResponse extends UnityEngine.Networking.Match.Response {
    constructor();
  }
}
declare namespace UnityEngine.Networking.Match {
  class CreateMatchRequest extends UnityEngine.Networking.Match.Request {
    constructor();
    IsValid(): boolean;
    ToString(): string;
    advertise: boolean;
    eloScore: number;
    matchAttributes: any;
    name: string;
    password: string;
    privateAddress: string;
    publicAddress: string;
    size: number;
  }
}
declare namespace UnityEngine.Networking.Match {
  class CreateMatchResponse extends UnityEngine.Networking.Match.BasicResponse {
    constructor();
    Parse(obj: any): void;
    ToString(): string;
    accessTokenString: string;
    address: string;
    domain: number;
    networkId: UnityEngine.Networking.Types.NetworkID;
    nodeId: UnityEngine.Networking.Types.NodeID;
    port: number;
    usingRelay: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class JoinMatchRequest extends UnityEngine.Networking.Match.Request {
    constructor();
    IsValid(): boolean;
    ToString(): string;
    eloScore: number;
    networkId: UnityEngine.Networking.Types.NetworkID;
    password: string;
    privateAddress: string;
    publicAddress: string;
  }
}
declare namespace UnityEngine.Networking.Match {
  class JoinMatchResponse extends UnityEngine.Networking.Match.BasicResponse {
    constructor();
    Parse(obj: any): void;
    ToString(): string;
    accessTokenString: string;
    address: string;
    domain: number;
    networkId: UnityEngine.Networking.Types.NetworkID;
    nodeId: UnityEngine.Networking.Types.NodeID;
    port: number;
    usingRelay: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class DestroyMatchRequest extends UnityEngine.Networking.Match.Request {
    constructor();
    IsValid(): boolean;
    ToString(): string;
    networkId: UnityEngine.Networking.Types.NetworkID;
  }
}
declare namespace UnityEngine.Networking.Match {
  class DropConnectionRequest extends UnityEngine.Networking.Match.Request {
    constructor();
    IsValid(): boolean;
    ToString(): string;
    networkId: UnityEngine.Networking.Types.NetworkID;
    nodeId: UnityEngine.Networking.Types.NodeID;
  }
}
declare namespace UnityEngine.Networking.Match {
  class DropConnectionResponse extends UnityEngine.Networking.Match.Response {
    constructor();
    Parse(obj: any): void;
    ToString(): string;
    networkId: UnityEngine.Networking.Types.NetworkID;
    nodeId: UnityEngine.Networking.Types.NodeID;
  }
}
declare namespace UnityEngine.Networking.Match {
  class ListMatchRequest extends UnityEngine.Networking.Match.Request {
    constructor();
    IsValid(): boolean;
    ToString(): string;
    eloScore: number;
    filterOutPrivateMatches: boolean;
    matchAttributeFilterEqualTo: any;
    matchAttributeFilterGreaterThan: any;
    matchAttributeFilterLessThan: any;
    nameFilter: string;
    pageNum: number;
    pageSize: number;
    includePasswordMatches: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class MatchDirectConnectInfo extends UnityEngine.Networking.Match.ResponseBase {
    constructor();
    Parse(obj: any): void;
    ToString(): string;
    hostPriority: UnityEngine.Networking.Types.HostPriority;
    nodeId: UnityEngine.Networking.Types.NodeID;
    privateAddress: string;
    publicAddress: string;
  }
}
declare namespace UnityEngine.Networking.Match {
  class MatchDesc extends UnityEngine.Networking.Match.ResponseBase {
    constructor();
    Parse(obj: any): void;
    ToString(): string;
    averageEloScore: number;
    currentSize: number;
    directConnectInfos: UnityEngine.Networking.Match.MatchDirectConnectInfo[];
    hostNodeId: UnityEngine.Networking.Types.NodeID;
    isPrivate: boolean;
    matchAttributes: any;
    maxSize: number;
    name: string;
    networkId: UnityEngine.Networking.Types.NetworkID;
  }
}
declare namespace UnityEngine.Networking.Match {
  class ListMatchResponse extends UnityEngine.Networking.Match.BasicResponse {
    constructor();
    constructor(otherMatches: UnityEngine.Networking.Match.MatchDesc[]);
    Parse(obj: any): void;
    ToString(): string;
    matches: UnityEngine.Networking.Match.MatchDesc[];
  }
}
declare namespace UnityEngine.Networking.Match {
  class CreateOrJoinMatchRequest extends UnityEngine.Networking.Match.CreateMatchRequest {
    constructor();
  }
}
declare namespace UnityEngine.Networking.Match {
  class SetMatchAttributesRequest extends UnityEngine.Networking.Match.Request {
    constructor();
    IsValid(): boolean;
    ToString(): string;
    isListed: boolean;
    networkId: UnityEngine.Networking.Types.NetworkID;
  }
}
declare namespace UnityEngine.Networking.Types {
  class NetworkAccessLevel extends System.Enum {
    protected constructor();
    static Admin: UnityEngine.Networking.Types.NetworkAccessLevel;
    static Invalid: UnityEngine.Networking.Types.NetworkAccessLevel;
    static Owner: UnityEngine.Networking.Types.NetworkAccessLevel;
    static User: UnityEngine.Networking.Types.NetworkAccessLevel;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.Types {
  class AppID extends System.Enum {
    protected constructor();
    static Invalid: UnityEngine.Networking.Types.AppID;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.Types {
  class SourceID extends System.Enum {
    protected constructor();
    static Invalid: UnityEngine.Networking.Types.SourceID;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.Types {
  class NetworkID extends System.Enum {
    protected constructor();
    static Invalid: UnityEngine.Networking.Types.NetworkID;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.Types {
  class NodeID extends System.Enum {
    protected constructor();
    static Invalid: UnityEngine.Networking.Types.NodeID;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.Types {
  class HostPriority extends System.Enum {
    protected constructor();
    static Invalid: UnityEngine.Networking.Types.HostPriority;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.Types {
  class NetworkAccessToken extends System.Object {
    constructor();
    constructor(array: number[]);
    constructor(strArray: string);
    GetByteString(): string;
    IsValid(): boolean;
    array: number[];
  }
}
declare namespace UnityEngine.Networking {
  class Utility extends System.Object {
    protected constructor();
    static GetAccessTokenForNetwork(netId: UnityEngine.Networking.Types.NetworkID): UnityEngine.Networking.Types.NetworkAccessToken;
    static GetAppID(): UnityEngine.Networking.Types.AppID;
    static GetSourceID(): UnityEngine.Networking.Types.SourceID;
    static SetAccessTokenForNetwork(netId: UnityEngine.Networking.Types.NetworkID, accessToken: UnityEngine.Networking.Types.NetworkAccessToken): void;
    static SetAppID(newAppID: UnityEngine.Networking.Types.AppID): void;
    static useRandomSourceID: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class MatchInfo extends System.Object {
    constructor();
    ToString(): string;
    readonly accessToken: UnityEngine.Networking.Types.NetworkAccessToken;
    readonly address: string;
    readonly domain: number;
    readonly networkId: UnityEngine.Networking.Types.NetworkID;
    readonly nodeId: UnityEngine.Networking.Types.NodeID;
    readonly port: number;
    readonly usingRelay: boolean;
  }
}
declare namespace UnityEngine.Networking.Match {
  class MatchInfoSnapshot extends System.Object {
    constructor();
    readonly averageEloScore: number;
    readonly currentSize: number;
    readonly directConnectInfos: UnityEngine.Networking.Match.MatchInfoSnapshot.MatchInfoDirectConnectSnapshot[];
    readonly hostNodeId: UnityEngine.Networking.Types.NodeID;
    readonly isPrivate: boolean;
    readonly matchAttributes: any;
    readonly maxSize: number;
    readonly name: string;
    readonly networkId: UnityEngine.Networking.Types.NetworkID;
  }
}
declare namespace UnityEngine.Networking.Match.MatchInfoSnapshot {
  class MatchInfoDirectConnectSnapshot extends System.Object {
    constructor();
    readonly hostPriority: UnityEngine.Networking.Types.HostPriority;
    readonly nodeId: UnityEngine.Networking.Types.NodeID;
    readonly privateAddress: string;
    readonly publicAddress: string;
  }
}
declare namespace UnityEngine.Networking.Match {
  class NetworkMatch extends UnityEngine.MonoBehaviour {
    constructor();
    CreateMatch(matchName: string, matchSize: number, matchAdvertise: boolean, matchPassword: string, publicClientAddress: string, privateClientAddress: string, eloScoreForMatch: number, requestDomain: number, callback: ((success: boolean, extendedInfo: string, responseData: UnityEngine.Networking.Match.MatchInfo) => void)): UnityEngine.Coroutine;
    DestroyMatch(netId: UnityEngine.Networking.Types.NetworkID, requestDomain: number, callback: ((success: boolean, extendedInfo: string) => void)): UnityEngine.Coroutine;
    DropConnection(netId: UnityEngine.Networking.Types.NetworkID, dropNodeId: UnityEngine.Networking.Types.NodeID, requestDomain: number, callback: ((success: boolean, extendedInfo: string) => void)): UnityEngine.Coroutine;
    JoinMatch(netId: UnityEngine.Networking.Types.NetworkID, matchPassword: string, publicClientAddress: string, privateClientAddress: string, eloScoreForClient: number, requestDomain: number, callback: ((success: boolean, extendedInfo: string, responseData: UnityEngine.Networking.Match.MatchInfo) => void)): UnityEngine.Coroutine;
    ListMatches(startPageNumber: number, resultPageSize: number, matchNameFilter: string, filterOutPrivateMatchesFromResults: boolean, eloScoreTarget: number, requestDomain: number, callback: ((success: boolean, extendedInfo: string, responseData: UnityEngine.Networking.Match.MatchInfoSnapshot[]) => void)): UnityEngine.Coroutine;
    SetMatchAttributes(networkId: UnityEngine.Networking.Types.NetworkID, isListed: boolean, requestDomain: number, callback: ((success: boolean, extendedInfo: string) => void)): UnityEngine.Coroutine;
    SetProgramAppID(programAppID: UnityEngine.Networking.Types.AppID): void;
    baseUri: any;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkEventType extends System.Enum {
    protected constructor();
    static BroadcastEvent: UnityEngine.Networking.NetworkEventType;
    static ConnectEvent: UnityEngine.Networking.NetworkEventType;
    static DataEvent: UnityEngine.Networking.NetworkEventType;
    static DisconnectEvent: UnityEngine.Networking.NetworkEventType;
    static Nothing: UnityEngine.Networking.NetworkEventType;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class QosType extends System.Enum {
    protected constructor();
    static AllCostDelivery: UnityEngine.Networking.QosType;
    static Reliable: UnityEngine.Networking.QosType;
    static ReliableFragmented: UnityEngine.Networking.QosType;
    static ReliableFragmentedSequenced: UnityEngine.Networking.QosType;
    static ReliableSequenced: UnityEngine.Networking.QosType;
    static ReliableStateUpdate: UnityEngine.Networking.QosType;
    static StateUpdate: UnityEngine.Networking.QosType;
    static Unreliable: UnityEngine.Networking.QosType;
    static UnreliableFragmented: UnityEngine.Networking.QosType;
    static UnreliableFragmentedSequenced: UnityEngine.Networking.QosType;
    static UnreliableSequenced: UnityEngine.Networking.QosType;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class NetworkError extends System.Enum {
    protected constructor();
    static BadMessage: UnityEngine.Networking.NetworkError;
    static CRCMismatch: UnityEngine.Networking.NetworkError;
    static DNSFailure: UnityEngine.Networking.NetworkError;
    static MessageToLong: UnityEngine.Networking.NetworkError;
    static NoResources: UnityEngine.Networking.NetworkError;
    static Ok: UnityEngine.Networking.NetworkError;
    static Timeout: UnityEngine.Networking.NetworkError;
    static UsageError: UnityEngine.Networking.NetworkError;
    value__: number;
    static VersionMismatch: UnityEngine.Networking.NetworkError;
    static WrongChannel: UnityEngine.Networking.NetworkError;
    static WrongConnection: UnityEngine.Networking.NetworkError;
    static WrongHost: UnityEngine.Networking.NetworkError;
    static WrongOperation: UnityEngine.Networking.NetworkError;
  }
}
declare namespace UnityEngine.Networking {
  class ReactorModel extends System.Enum {
    protected constructor();
    static FixRateReactor: UnityEngine.Networking.ReactorModel;
    static SelectReactor: UnityEngine.Networking.ReactorModel;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class ConnectionAcksType extends System.Enum {
    protected constructor();
    static Acks128: UnityEngine.Networking.ConnectionAcksType;
    static Acks32: UnityEngine.Networking.ConnectionAcksType;
    static Acks64: UnityEngine.Networking.ConnectionAcksType;
    static Acks96: UnityEngine.Networking.ConnectionAcksType;
    value__: number;
  }
}
declare namespace UnityEngine.Networking {
  class ChannelQOS extends System.Object {
    constructor(value: UnityEngine.Networking.QosType);
    constructor();
    constructor(channel: UnityEngine.Networking.ChannelQOS);
    readonly QOS: UnityEngine.Networking.QosType;
  }
}
declare namespace UnityEngine.Networking {
  class ConnectionConfig extends System.Object {
    constructor();
    constructor(config: UnityEngine.Networking.ConnectionConfig);
    AddChannel(value: UnityEngine.Networking.QosType): number;
    GetChannel(idx: number): UnityEngine.Networking.QosType;
    static Validate(config: UnityEngine.Networking.ConnectionConfig): void;
    AckDelay: number;
    AcksType: UnityEngine.Networking.ConnectionAcksType;
    AllCostTimeout: number;
    BandwidthPeakFactor: number;
    readonly ChannelCount: number;
    readonly Channels: UnityEngine.Networking.ChannelQOS[];
    ConnectTimeout: number;
    DisconnectTimeout: number;
    FragmentSize: number;
    InitialBandwidth: number;
    IsAcksLong: boolean;
    MaxCombinedReliableMessageCount: number;
    MaxCombinedReliableMessageSize: number;
    MaxConnectionAttempt: number;
    MaxSentMessageQueueSize: number;
    MinUpdateTimeout: number;
    NetworkDropThreshold: number;
    OverflowDropThreshold: number;
    PacketSize: number;
    PingTimeout: number;
    ReducedPingTimeout: number;
    ResendTimeout: number;
    SendDelay: number;
    SSLCAFilePath: string;
    SSLCertFilePath: string;
    SSLPrivateKeyFilePath: string;
    UdpSocketReceiveBufferMaxSize: number;
    UsePlatformSpecificProtocols: boolean;
    WebSocketReceiveBufferMaxSize: number;
  }
}
declare namespace UnityEngine.Networking {
  class HostTopology extends System.Object {
    constructor(defaultConfig: UnityEngine.Networking.ConnectionConfig, maxDefaultConnections: number);
    AddSpecialConnectionConfig(config: UnityEngine.Networking.ConnectionConfig): number;
    GetSpecialConnectionConfig(i: number): UnityEngine.Networking.ConnectionConfig;
    readonly DefaultConfig: UnityEngine.Networking.ConnectionConfig;
    readonly MaxDefaultConnections: number;
    MessagePoolSizeGrowthFactor: number;
    ReceivedMessagePoolSize: number;
    SentMessagePoolSize: number;
    readonly SpecialConnectionConfigs: UnityEngine.Networking.ConnectionConfig[];
    readonly SpecialConnectionConfigsCount: number;
  }
}
declare namespace UnityEngine.Networking {
  class GlobalConfig extends System.Object {
    constructor();
    MaxHosts: number;
    MaxNetSimulatorTimeout: number;
    MaxPacketSize: number;
    MaxTimerTimeout: number;
    MinNetSimulatorTimeout: number;
    MinTimerTimeout: number;
    ReactorMaximumReceivedMessages: number;
    ReactorMaximumSentMessages: number;
    ReactorModel: UnityEngine.Networking.ReactorModel;
    ThreadAwakeTimeout: number;
    ThreadPoolSize: number;
  }
}
declare namespace UnityEngine.Analytics {
  class CustomEventData extends System.Object {
    constructor(name: string);
    Add(eventData: any): boolean;
    Add(key: string, value: boolean): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: any): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: string): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Add(key: string, value: number): boolean;
    Dispose(): void;
    InternalCreate(name: string): void;
  }
}
declare namespace UnityEngine.Analytics {
  class UnityAnalyticsHandler extends System.Object {
    constructor();
    CustomEvent(customEventName: string): UnityEngine.Analytics.AnalyticsResult;
    CustomEvent(eventData: UnityEngine.Analytics.CustomEventData): UnityEngine.Analytics.AnalyticsResult;
    Dispose(): void;
    FlushEvents(): UnityEngine.Analytics.AnalyticsResult;
    SetUserBirthYear(birthYear: number): UnityEngine.Analytics.AnalyticsResult;
    SetUserGender(gender: UnityEngine.Analytics.Gender): UnityEngine.Analytics.AnalyticsResult;
    SetUserId(userId: string): UnityEngine.Analytics.AnalyticsResult;
    Transaction(productId: string, amount: number, currency: string): UnityEngine.Analytics.AnalyticsResult;
    Transaction(productId: string, amount: number, currency: string, receiptPurchaseData: string, signature: string): UnityEngine.Analytics.AnalyticsResult;
    static deviceStatsEnabled: boolean;
    enabled: boolean;
    static limitUserTracking: boolean;
  }
}
declare namespace UnityEngine.Analytics {
  class Gender extends System.Enum {
    protected constructor();
    static Female: UnityEngine.Analytics.Gender;
    static Male: UnityEngine.Analytics.Gender;
    static Unknown: UnityEngine.Analytics.Gender;
    value__: number;
  }
}
declare namespace UnityEngine.Analytics {
  class AnalyticsResult extends System.Enum {
    protected constructor();
    static AnalyticsDisabled: UnityEngine.Analytics.AnalyticsResult;
    static InvalidData: UnityEngine.Analytics.AnalyticsResult;
    static NotInitialized: UnityEngine.Analytics.AnalyticsResult;
    static Ok: UnityEngine.Analytics.AnalyticsResult;
    static SizeLimitReached: UnityEngine.Analytics.AnalyticsResult;
    static TooManyItems: UnityEngine.Analytics.AnalyticsResult;
    static TooManyRequests: UnityEngine.Analytics.AnalyticsResult;
    static UnsupportedPlatform: UnityEngine.Analytics.AnalyticsResult;
    value__: number;
  }
}
declare namespace UnityEngine.Analytics {
  class Analytics extends System.Object {
    protected constructor();
    static CustomEvent(customEventName: string): UnityEngine.Analytics.AnalyticsResult;
    static CustomEvent(customEventName: string, eventData: any): UnityEngine.Analytics.AnalyticsResult;
    static CustomEvent(customEventName: string, position: UnityEngine.Vector3): UnityEngine.Analytics.AnalyticsResult;
    static FlushEvents(): UnityEngine.Analytics.AnalyticsResult;
    static SetUserBirthYear(birthYear: number): UnityEngine.Analytics.AnalyticsResult;
    static SetUserGender(gender: UnityEngine.Analytics.Gender): UnityEngine.Analytics.AnalyticsResult;
    static SetUserId(userId: string): UnityEngine.Analytics.AnalyticsResult;
    static Transaction(productId: string, amount: number, currency: string): UnityEngine.Analytics.AnalyticsResult;
    static Transaction(productId: string, amount: number, currency: string, receiptPurchaseData: string, signature: string): UnityEngine.Analytics.AnalyticsResult;
    static Transaction(productId: string, amount: number, currency: string, receiptPurchaseData: string, signature: string, usingIAPService: boolean): UnityEngine.Analytics.AnalyticsResult;
    static deviceStatsEnabled: boolean;
    static enabled: boolean;
    static limitUserTracking: boolean;
  }
}
declare namespace UnityEngine.Connect {
  class UnityConnectSettings extends System.Object {
    constructor();
    static enabled: boolean;
    static testConfigUrl: string;
    static testEventUrl: string;
    static testInitMode: number;
    static testMode: boolean;
  }
}
declare namespace UnityEngine {
  class RemoteSettings extends System.Object {
    protected constructor();
    static CallOnUpdate(): void;
    static ForceUpdate(): void;
    static GetBool(key: string): boolean;
    static GetBool(key: string, defaultValue: boolean): boolean;
    static GetCount(): number;
    static GetFloat(key: string): number;
    static GetFloat(key: string, defaultValue: number): number;
    static GetInt(key: string): number;
    static GetInt(key: string, defaultValue: number): number;
    static GetKeys(): string[];
    static GetString(key: string): string;
    static GetString(key: string, defaultValue: string): string;
    static HasKey(key: string): boolean;
  }
}
declare namespace UnityEngine.Advertisements {
  class UnityAdsSettings extends System.Object {
    constructor();
    static GetGameId(platform: UnityEngine.RuntimePlatform): string;
    static IsPlatformEnabled(platform: UnityEngine.RuntimePlatform): boolean;
    static SetGameId(platform: UnityEngine.RuntimePlatform, gameId: string): void;
    static SetPlatformEnabled(platform: UnityEngine.RuntimePlatform, value: boolean): void;
    static enabled: boolean;
    static initializeOnStartup: boolean;
    static testMode: boolean;
  }
}
declare namespace UnityEngine.Analytics {
  class AnalyticsSessionState extends System.Enum {
    protected constructor();
    static kSessionPaused: UnityEngine.Analytics.AnalyticsSessionState;
    static kSessionResumed: UnityEngine.Analytics.AnalyticsSessionState;
    static kSessionStarted: UnityEngine.Analytics.AnalyticsSessionState;
    static kSessionStopped: UnityEngine.Analytics.AnalyticsSessionState;
    value__: number;
  }
}
declare namespace UnityEngine.Analytics {
  class AnalyticsSessionInfo extends System.Object {
    protected constructor();
    static readonly sessionElapsedTime: number;
    static readonly sessionId: number;
    static readonly sessionState: UnityEngine.Analytics.AnalyticsSessionState;
    static readonly userId: string;
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerAudioClip extends UnityEngine.Networking.DownloadHandler {
    constructor(url: string, audioType: UnityEngine.AudioType);
    static GetContent(www: UnityEngine.Networking.UnityWebRequest): UnityEngine.AudioClip;
    readonly audioClip: UnityEngine.AudioClip;
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandler extends System.Object {
    protected constructor();
    Dispose(): void;
    readonly data: number[];
    readonly isDone: boolean;
    readonly text: string;
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerMovieTexture extends UnityEngine.Networking.DownloadHandler {
    constructor();
    static GetContent(uwr: UnityEngine.Networking.UnityWebRequest): UnityEngine.MovieTexture;
    readonly movieTexture: UnityEngine.MovieTexture;
  }
}
declare namespace UnityEngine.Networking {
  class UnityWebRequestMultimedia extends System.Object {
    protected constructor();
    static GetAudioClip(uri: string, audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest;
    static GetMovieTexture(uri: string): UnityEngine.Networking.UnityWebRequest;
  }
}
declare namespace UnityEngine.Networking {
  class UploadHandler extends System.Object {
    protected constructor();
    Dispose(): void;
    contentType: string;
    readonly data: number[];
    readonly progress: number;
  }
}
declare namespace UnityEngine.Networking {
  class UploadHandlerRaw extends UnityEngine.Networking.UploadHandler {
    constructor(data: number[]);
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerBuffer extends UnityEngine.Networking.DownloadHandler {
    constructor();
    static GetContent(www: UnityEngine.Networking.UnityWebRequest): string;
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerScript extends UnityEngine.Networking.DownloadHandler {
    constructor();
    constructor(preallocatedBuffer: number[]);
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerAssetBundle extends UnityEngine.Networking.DownloadHandler {
    constructor(url: string, crc: number);
    constructor(url: string, version: number, crc: number);
    constructor(url: string, hash: UnityEngine.Hash128, crc: number);
    constructor(url: string, name: string, hash: UnityEngine.Hash128, crc: number);
    static GetContent(www: UnityEngine.Networking.UnityWebRequest): UnityEngine.AssetBundle;
    readonly assetBundle: UnityEngine.AssetBundle;
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerFile extends UnityEngine.Networking.DownloadHandler {
    constructor(path: string);
    removeFileOnAbort: boolean;
  }
}
declare namespace UnityEngine.Networking {
  class UnityWebRequestAsyncOperation extends UnityEngine.AsyncOperation {
    constructor();
    readonly webRequest: UnityEngine.Networking.UnityWebRequest;
  }
}
declare namespace UnityEngine.Networking {
  class UnityWebRequest extends System.Object {
    constructor();
    constructor(url: string);
    constructor(url: string, method: string);
    constructor(url: string, method: string, downloadHandler: UnityEngine.Networking.DownloadHandler, uploadHandler: UnityEngine.Networking.UploadHandler);
    Abort(): void;
    static Delete(uri: string): UnityEngine.Networking.UnityWebRequest;
    Dispose(): void;
    static GenerateBoundary(): number[];
    static Get(uri: string): UnityEngine.Networking.UnityWebRequest;
    static GetAssetBundle(uri: string): UnityEngine.Networking.UnityWebRequest;
    static GetAssetBundle(uri: string, crc: number): UnityEngine.Networking.UnityWebRequest;
    static GetAssetBundle(uri: string, version: number, crc: number): UnityEngine.Networking.UnityWebRequest;
    static GetAssetBundle(uri: string, cachedAssetBundle: UnityEngine.CachedAssetBundle, crc: number): UnityEngine.Networking.UnityWebRequest;
    static GetAssetBundle(uri: string, hash: UnityEngine.Hash128, crc: number): UnityEngine.Networking.UnityWebRequest;
    static GetAudioClip(uri: string, audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest;
    GetRequestHeader(name: string): string;
    GetResponseHeader(name: string): string;
    GetResponseHeaders(): any;
    static GetTexture(uri: string): UnityEngine.Networking.UnityWebRequest;
    static GetTexture(uri: string, nonReadable: boolean): UnityEngine.Networking.UnityWebRequest;
    static Head(uri: string): UnityEngine.Networking.UnityWebRequest;
    static Post(uri: string, formFields: any): UnityEngine.Networking.UnityWebRequest;
    static Post(uri: string, multipartFormSections: UnityEngine.Networking.IMultipartFormSection[]): UnityEngine.Networking.UnityWebRequest;
    static Post(uri: string, multipartFormSections: UnityEngine.Networking.IMultipartFormSection[], boundary: number[]): UnityEngine.Networking.UnityWebRequest;
    static Post(uri: string, postData: string): UnityEngine.Networking.UnityWebRequest;
    static Post(uri: string, formData: UnityEngine.WWWForm): UnityEngine.Networking.UnityWebRequest;
    static Put(uri: string, bodyData: number[]): UnityEngine.Networking.UnityWebRequest;
    static Put(uri: string, bodyData: string): UnityEngine.Networking.UnityWebRequest;
    Send(): UnityEngine.AsyncOperation;
    SendWebRequest(): UnityEngine.Networking.UnityWebRequestAsyncOperation;
    static SerializeFormSections(multipartFormSections: UnityEngine.Networking.IMultipartFormSection[], boundary: number[]): number[];
    static SerializeSimpleForm(formFields: any): number[];
    SetRequestHeader(name: string, value: string): void;
    chunkedTransfer: boolean;
    disposeDownloadHandlerOnDispose: boolean;
    disposeUploadHandlerOnDispose: boolean;
    readonly downloadedBytes: number;
    downloadHandler: UnityEngine.Networking.DownloadHandler;
    readonly downloadProgress: number;
    readonly error: string;
    readonly isDone: boolean;
    readonly isError: boolean;
    readonly isHttpError: boolean;
    readonly isModifiable: boolean;
    readonly isNetworkError: boolean;
    method: string;
    redirectLimit: number;
    readonly responseCode: number;
    timeout: number;
    readonly uploadedBytes: number;
    uploadHandler: UnityEngine.Networking.UploadHandler;
    readonly uploadProgress: number;
    url: string;
    useHttpContinue: boolean;
    static kHttpVerbCREATE: string;
    static kHttpVerbDELETE: string;
    static kHttpVerbGET: string;
    static kHttpVerbHEAD: string;
    static kHttpVerbPOST: string;
    static kHttpVerbPUT: string;
  }
}
declare namespace UnityEngine.Networking.UnityWebRequest {
  class UnityWebRequestMethod extends System.Enum {
    protected constructor();
    static Custom: UnityEngine.Networking.UnityWebRequest.UnityWebRequestMethod;
    static Get: UnityEngine.Networking.UnityWebRequest.UnityWebRequestMethod;
    static Head: UnityEngine.Networking.UnityWebRequest.UnityWebRequestMethod;
    static Post: UnityEngine.Networking.UnityWebRequest.UnityWebRequestMethod;
    static Put: UnityEngine.Networking.UnityWebRequest.UnityWebRequestMethod;
    value__: number;
  }
}
declare namespace UnityEngine.Networking.UnityWebRequest {
  class UnityWebRequestError extends System.Enum {
    protected constructor();
    static Aborted: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static AccessDenied: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static CannotConnectToHost: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static CannotResolveHost: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static CannotResolveProxy: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static FailedToReceiveData: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static FailedToSendData: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static GenericHttpError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static HTTPPostError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static LoginFailed: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static MalformattedUrl: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static NoInternetConnection: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static OK: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static OutOfMemory: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static ReadError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static ReceivedNoData: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SDKError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SSLCACertError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SSLCannotConnect: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SSLCertificateError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SSLCipherNotAvailable: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SSLNotSupported: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static SSLShutdownFailed: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static Timeout: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static TooManyRedirects: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static Unknown: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static UnrecognizedContentEncoding: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    static UnsupportedProtocol: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
    value__: number;
    static WriteError: UnityEngine.Networking.UnityWebRequest.UnityWebRequestError;
  }
}
declare namespace UnityEngine.Networking {
  class IMultipartFormSection {
    protected constructor();
    readonly contentType: string;
    readonly fileName: string;
    readonly sectionData: number[];
    readonly sectionName: string;
  }
}
declare namespace UnityEngine.Networking {
  class MultipartFormDataSection extends System.Object {
    constructor(name: string, data: number[], contentType: string);
    constructor(name: string, data: number[]);
    constructor(data: number[]);
    constructor(name: string, data: string, encoding: any, contentType: string);
    constructor(name: string, data: string, contentType: string);
    constructor(name: string, data: string);
    constructor(data: string);
    readonly contentType: string;
    readonly fileName: string;
    readonly sectionData: number[];
    readonly sectionName: string;
  }
}
declare namespace UnityEngine.Networking {
  class MultipartFormFileSection extends System.Object {
    constructor(name: string, data: number[], fileName: string, contentType: string);
    constructor(data: number[]);
    constructor(fileName: string, data: number[]);
    constructor(name: string, data: string, dataEncoding: any, fileName: string);
    constructor(data: string, dataEncoding: any, fileName: string);
    constructor(data: string, fileName: string);
    readonly contentType: string;
    readonly fileName: string;
    readonly sectionData: number[];
    readonly sectionName: string;
  }
}
declare namespace UnityEngine {
  class WWWForm extends System.Object {
    constructor();
    AddBinaryData(fieldName: string, contents: number[]): void;
    AddBinaryData(fieldName: string, contents: number[], fileName: string): void;
    AddBinaryData(fieldName: string, contents: number[], fileName: string, mimeType: string): void;
    AddField(fieldName: string, i: number): void;
    AddField(fieldName: string, value: string): void;
    AddField(fieldName: string, value: string, e: any): void;
    readonly data: number[];
    readonly headers: any;
  }
}
declare namespace UnityEngine {
  class WWWTranscoder extends System.Object {
    constructor();
    static Decode(input: number[], escapeChar: number, space: number): number[];
    static Encode(input: number[], escapeChar: number, space: number, forbidden: number[], uppercase: boolean): number[];
    static QPDecode(toEncode: number[]): number[];
    static QPDecode(toEncode: string): string;
    static QPDecode(toEncode: string, e: any): string;
    static QPEncode(toEncode: number[]): number[];
    static QPEncode(toEncode: string): string;
    static QPEncode(toEncode: string, e: any): string;
    static SevenBitClean(input: number[]): boolean;
    static SevenBitClean(s: string): boolean;
    static SevenBitClean(s: string, e: any): boolean;
    static URLDecode(toEncode: number[]): number[];
    static URLDecode(toEncode: string): string;
    static URLDecode(toEncode: string, e: any): string;
    static URLEncode(toEncode: number[]): number[];
    static URLEncode(toEncode: string): string;
    static URLEncode(toEncode: string, e: any): string;
  }
}
declare namespace UnityEngineInternal {
  class WebRequestUtils extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine.Networking {
  class DownloadHandlerTexture extends UnityEngine.Networking.DownloadHandler {
    constructor();
    constructor(readable: boolean);
    static GetContent(www: UnityEngine.Networking.UnityWebRequest): UnityEngine.Texture2D;
    readonly texture: UnityEngine.Texture2D;
  }
}
declare namespace UnityEngine.Networking {
  class UnityWebRequestTexture extends System.Object {
    protected constructor();
    static GetTexture(uri: string): UnityEngine.Networking.UnityWebRequest;
    static GetTexture(uri: string, nonReadable: boolean): UnityEngine.Networking.UnityWebRequest;
  }
}
declare namespace UnityEngine.Networking {
  class WebRequestWWW extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEngine {
  class WWW extends UnityEngine.CustomYieldInstruction {
    constructor(url: string);
    constructor(url: string, form: UnityEngine.WWWForm);
    constructor(url: string, postData: number[]);
    constructor(url: string, postData: number[], headers: any);
    constructor(url: string, postData: number[], headers: any);
    Dispose(): void;
    static EscapeURL(s: string): string;
    static EscapeURL(s: string, e: any): string;
    static LoadFromCacheOrDownload(url: string, version: number): UnityEngine.WWW;
    static LoadFromCacheOrDownload(url: string, version: number, crc: number): UnityEngine.WWW;
    static LoadFromCacheOrDownload(url: string, cachedBundle: UnityEngine.CachedAssetBundle, crc?: number): UnityEngine.WWW;
    static LoadFromCacheOrDownload(url: string, hash: UnityEngine.Hash128): UnityEngine.WWW;
    static LoadFromCacheOrDownload(url: string, hash: UnityEngine.Hash128, crc: number): UnityEngine.WWW;
    LoadImageIntoTexture(texture: UnityEngine.Texture2D): void;
    static UnEscapeURL(s: string): string;
    static UnEscapeURL(s: string, e: any): string;
    readonly assetBundle: UnityEngine.AssetBundle;
    readonly audioClip: UnityEngine.Object;
    readonly bytes: number[];
    readonly bytesDownloaded: number;
    readonly data: string;
    readonly error: string;
    readonly isDone: boolean;
    readonly keepWaiting: boolean;
    readonly movie: UnityEngine.Object;
    readonly oggVorbis: UnityEngine.Object;
    readonly progress: number;
    readonly responseHeaders: any;
    readonly size: number;
    readonly text: string;
    readonly texture: UnityEngine.Texture2D;
    readonly textureNonReadable: UnityEngine.Texture2D;
    threadPriority: UnityEngine.ThreadPriority;
    readonly uploadProgress: number;
    readonly url: string;
  }
}
declare namespace UnityEngine {
  class WWWAudioExtensions extends System.Object {
    protected constructor();
    static GetAudioClip(www: UnityEngine.WWW): UnityEngine.AudioClip;
    static GetAudioClip(www: UnityEngine.WWW, threeD: boolean): UnityEngine.AudioClip;
    static GetAudioClip(www: UnityEngine.WWW, threeD: boolean, stream: boolean): UnityEngine.AudioClip;
    static GetAudioClip(www: UnityEngine.WWW, threeD: boolean, stream: boolean, audioType: UnityEngine.AudioType): UnityEngine.AudioClip;
    static GetAudioClipCompressed(www: UnityEngine.WWW): UnityEngine.AudioClip;
    static GetAudioClipCompressed(www: UnityEngine.WWW, threeD: boolean): UnityEngine.AudioClip;
    static GetAudioClipCompressed(www: UnityEngine.WWW, threeD: boolean, audioType: UnityEngine.AudioType): UnityEngine.AudioClip;
    static GetMovieTexture(www: UnityEngine.WWW): UnityEngine.MovieTexture;
  }
}
declare namespace UnityEngine {
  class WheelHit extends System.ValueType {
    protected constructor();
    collider: UnityEngine.Collider;
    force: number;
    forwardDir: UnityEngine.Vector3;
    forwardSlip: number;
    normal: UnityEngine.Vector3;
    point: UnityEngine.Vector3;
    sidewaysDir: UnityEngine.Vector3;
    sidewaysSlip: number;
  }
}
declare namespace UnityEngine {
  class WheelCollider extends UnityEngine.Collider {
    constructor();
    ConfigureVehicleSubsteps(speedThreshold: number, stepsBelowThreshold: number, stepsAboveThreshold: number): void;
    GetGroundHit(hit: any): boolean;
    GetWorldPose(pos: any, quat: any): void;
    brakeTorque: number;
    center: UnityEngine.Vector3;
    forceAppPointDistance: number;
    forwardFriction: UnityEngine.WheelFrictionCurve;
    readonly isGrounded: boolean;
    mass: number;
    motorTorque: number;
    radius: number;
    readonly rpm: number;
    sidewaysFriction: UnityEngine.WheelFrictionCurve;
    readonly sprungMass: number;
    steerAngle: number;
    suspensionDistance: number;
    suspensionSpring: UnityEngine.JointSpring;
    wheelDampingRate: number;
  }
}
declare namespace UnityEngine.Video {
  class VideoRenderMode extends System.Enum {
    protected constructor();
    static APIOnly: UnityEngine.Video.VideoRenderMode;
    static CameraFarPlane: UnityEngine.Video.VideoRenderMode;
    static CameraNearPlane: UnityEngine.Video.VideoRenderMode;
    static MaterialOverride: UnityEngine.Video.VideoRenderMode;
    static RenderTexture: UnityEngine.Video.VideoRenderMode;
    value__: number;
  }
}
declare namespace UnityEngine.Video {
  class VideoAspectRatio extends System.Enum {
    protected constructor();
    static FitHorizontally: UnityEngine.Video.VideoAspectRatio;
    static FitInside: UnityEngine.Video.VideoAspectRatio;
    static FitOutside: UnityEngine.Video.VideoAspectRatio;
    static FitVertically: UnityEngine.Video.VideoAspectRatio;
    static NoScaling: UnityEngine.Video.VideoAspectRatio;
    static Stretch: UnityEngine.Video.VideoAspectRatio;
    value__: number;
  }
}
declare namespace UnityEngine.Video {
  class VideoTimeSource extends System.Enum {
    protected constructor();
    static AudioDSPTimeSource: UnityEngine.Video.VideoTimeSource;
    static GameTimeSource: UnityEngine.Video.VideoTimeSource;
    value__: number;
  }
}
declare namespace UnityEngine.Video {
  class VideoTimeReference extends System.Enum {
    protected constructor();
    static ExternalTime: UnityEngine.Video.VideoTimeReference;
    static Freerun: UnityEngine.Video.VideoTimeReference;
    static InternalTime: UnityEngine.Video.VideoTimeReference;
    value__: number;
  }
}
declare namespace UnityEngine.Video {
  class VideoSource extends System.Enum {
    protected constructor();
    static Url: UnityEngine.Video.VideoSource;
    value__: number;
    static VideoClip: UnityEngine.Video.VideoSource;
  }
}
declare namespace UnityEngine.Video {
  class VideoAudioOutputMode extends System.Enum {
    protected constructor();
    static AudioSource: UnityEngine.Video.VideoAudioOutputMode;
    static Direct: UnityEngine.Video.VideoAudioOutputMode;
    static None: UnityEngine.Video.VideoAudioOutputMode;
    value__: number;
  }
}
declare namespace UnityEngine.Video {
  class VideoPlayer extends UnityEngine.Behaviour {
    constructor();
    EnableAudioTrack(trackIndex: number, enabled: boolean): void;
    GetAudioChannelCount(trackIndex: number): number;
    GetAudioLanguageCode(trackIndex: number): string;
    GetDirectAudioMute(trackIndex: number): boolean;
    GetDirectAudioVolume(trackIndex: number): number;
    GetTargetAudioSource(trackIndex: number): UnityEngine.AudioSource;
    IsAudioTrackEnabled(trackIndex: number): boolean;
    Pause(): void;
    Play(): void;
    Prepare(): void;
    SetDirectAudioMute(trackIndex: number, mute: boolean): void;
    SetDirectAudioVolume(trackIndex: number, volume: number): void;
    SetTargetAudioSource(trackIndex: number, source: UnityEngine.AudioSource): void;
    StepForward(): void;
    Stop(): void;
    aspectRatio: UnityEngine.Video.VideoAspectRatio;
    audioOutputMode: UnityEngine.Video.VideoAudioOutputMode;
    readonly audioTrackCount: number;
    readonly canSetDirectAudioVolume: boolean;
    readonly canSetPlaybackSpeed: boolean;
    readonly canSetSkipOnDrop: boolean;
    readonly canSetTime: boolean;
    readonly canSetTimeSource: boolean;
    readonly canStep: boolean;
    clip: UnityEngine.Video.VideoClip;
    controlledAudioTrackCount: number;
    static readonly controlledAudioTrackMaxCount: number;
    externalReferenceTime: number;
    frame: number;
    readonly frameCount: number;
    readonly frameRate: number;
    isLooping: boolean;
    readonly isPlaying: boolean;
    readonly isPrepared: boolean;
    playbackSpeed: number;
    playOnAwake: boolean;
    renderMode: UnityEngine.Video.VideoRenderMode;
    sendFrameReadyEvents: boolean;
    skipOnDrop: boolean;
    source: UnityEngine.Video.VideoSource;
    targetCamera: UnityEngine.Camera;
    targetCameraAlpha: number;
    targetMaterialProperty: string;
    targetMaterialRenderer: UnityEngine.Renderer;
    targetTexture: UnityEngine.RenderTexture;
    readonly texture: UnityEngine.Texture;
    time: number;
    timeReference: UnityEngine.Video.VideoTimeReference;
    timeSource: UnityEngine.Video.VideoTimeSource;
    url: string;
    waitForFirstFrame: boolean;
  }
}
declare namespace UnityEngine.Video {
  class VideoClip extends UnityEngine.Object {
    constructor();
    GetAudioChannelCount(audioTrackIdx: number): number;
    GetAudioLanguage(audioTrackIdx: number): string;
    GetAudioSampleRate(audioTrackIdx: number): number;
    readonly audioTrackCount: number;
    readonly frameCount: number;
    readonly frameRate: number;
    readonly height: number;
    readonly length: number;
    readonly originalPath: string;
    readonly pixelAspectRatioDenominator: number;
    readonly pixelAspectRatioNumerator: number;
    readonly width: number;
  }
}
declare namespace UnityEngine.XR {
  class TrackingSpaceType extends System.Enum {
    protected constructor();
    static RoomScale: UnityEngine.XR.TrackingSpaceType;
    static Stationary: UnityEngine.XR.TrackingSpaceType;
    value__: number;
  }
}
declare namespace UnityEngine.XR {
  class UserPresenceState extends System.Enum {
    protected constructor();
    static NotPresent: UnityEngine.XR.UserPresenceState;
    static Present: UnityEngine.XR.UserPresenceState;
    static Unknown: UnityEngine.XR.UserPresenceState;
    static Unsupported: UnityEngine.XR.UserPresenceState;
    value__: number;
  }
}
declare namespace UnityEngine.XR {
  class XRSettings extends System.Object {
    protected constructor();
    static LoadDeviceByName(deviceName: string): void;
    static LoadDeviceByName(prioritizedDeviceNameList: string[]): void;
    static enabled: boolean;
    static readonly eyeTextureDesc: UnityEngine.RenderTextureDescriptor;
    static readonly eyeTextureHeight: number;
    static eyeTextureResolutionScale: number;
    static readonly eyeTextureWidth: number;
    static readonly isDeviceActive: boolean;
    static readonly loadedDeviceName: string;
    static occlusionMaskScale: number;
    static renderScale: number;
    static renderViewportScale: number;
    static showDeviceView: boolean;
    static readonly supportedDevices: string[];
  }
}
declare namespace UnityEngine.XR {
  class XRDevice extends System.Object {
    protected constructor();
    static DisableAutoXRCameraTracking(camera: UnityEngine.Camera, disabled: boolean): void;
    static GetNativePtr(): any;
    static GetTrackingSpaceType(): UnityEngine.XR.TrackingSpaceType;
    static SetTrackingSpaceType(trackingSpaceType: UnityEngine.XR.TrackingSpaceType): boolean;
    static readonly family: string;
    static fovZoomFactor: number;
    static readonly isPresent: boolean;
    static readonly model: string;
    static readonly refreshRate: number;
    static readonly userPresence: UnityEngine.XR.UserPresenceState;
  }
}
declare namespace UnityEngine.XR {
  class XRStats extends System.Object {
    protected constructor();
    static TryGetDroppedFrameCount(droppedFrameCount: any): boolean;
    static TryGetFramePresentCount(framePresentCount: any): boolean;
    static TryGetGPUTimeLastFrame(gpuTimeLastFrame: any): boolean;
    static readonly gpuTimeLastFrame: number;
  }
}
declare namespace UnityEngine.XR {
  class InputTracking extends System.Object {
    protected constructor();
    static GetLocalPosition(node: UnityEngine.XR.XRNode): UnityEngine.Vector3;
    static GetLocalRotation(node: UnityEngine.XR.XRNode): UnityEngine.Quaternion;
    static GetNodeName(uniqueID: number): string;
    static GetNodeStates(nodeStates: UnityEngine.XR.XRNodeState[]): void;
    static Recenter(): void;
    static disablePositionalTracking: boolean;
  }
}
declare namespace UnityEngine.XR.InputTracking {
  class TrackingStateEventType extends System.Enum {
    protected constructor();
    static NodeAdded: UnityEngine.XR.InputTracking.TrackingStateEventType;
    static NodeRemoved: UnityEngine.XR.InputTracking.TrackingStateEventType;
    static TrackingAcquired: UnityEngine.XR.InputTracking.TrackingStateEventType;
    static TrackingLost: UnityEngine.XR.InputTracking.TrackingStateEventType;
    value__: number;
  }
}
declare namespace UnityEngine.Experimental.XR {
  class Boundary extends System.Object {
    protected constructor();
    static TryGetDimensions(dimensionsOut: any): boolean;
    static TryGetDimensions(dimensionsOut: any, boundaryType: UnityEngine.Experimental.XR.Boundary.Type): boolean;
    static TryGetGeometry(geometry: UnityEngine.Vector3[]): boolean;
    static TryGetGeometry(geometry: UnityEngine.Vector3[], boundaryType: UnityEngine.Experimental.XR.Boundary.Type): boolean;
    static readonly configured: boolean;
    static visible: boolean;
  }
}
declare namespace UnityEngine.Experimental.XR.Boundary {
  class Type extends System.Enum {
    protected constructor();
    static PlayArea: UnityEngine.Experimental.XR.Boundary.Type;
    static TrackedArea: UnityEngine.Experimental.XR.Boundary.Type;
    value__: number;
  }
}
declare namespace UnityEngine.Internal.VR {
  class VRTestMock extends System.Object {
    protected constructor();
    static AddController(controllerName: string): void;
    static AddTrackedDevice(nodeType: UnityEngine.XR.XRNode): void;
    static Reset(): void;
    static UpdateCenterEye(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static UpdateControllerAxis(controllerName: string, axis: number, value: number): void;
    static UpdateControllerButton(controllerName: string, button: number, pressed: boolean): void;
    static UpdateHead(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static UpdateLeftEye(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static UpdateLeftHand(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static UpdateRightEye(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static UpdateRightHand(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
    static UpdateTrackedDevice(nodeType: UnityEngine.XR.XRNode, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class GestureRecognizer extends System.Object {
    constructor();
    CancelGestures(): void;
    Dispose(): void;
    GetRecognizableGestures(): UnityEngine.XR.WSA.Input.GestureSettings;
    IsCapturingGestures(): boolean;
    SetRecognizableGestures(newMaskValue: UnityEngine.XR.WSA.Input.GestureSettings): UnityEngine.XR.WSA.Input.GestureSettings;
    StartCapturingGestures(): void;
    StopCapturingGestures(): void;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionManager extends System.Object {
    constructor();
    static GetCurrentReading(sourceStates: UnityEngine.XR.WSA.Input.InteractionSourceState[]): number;
    static GetCurrentReading(): UnityEngine.XR.WSA.Input.InteractionSourceState[];
    static readonly numSourceStates: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input.InteractionManager {
  class EventType extends System.Enum {
    protected constructor();
    static SourceDetected: UnityEngine.XR.WSA.Input.InteractionManager.EventType;
    static SourceLost: UnityEngine.XR.WSA.Input.InteractionManager.EventType;
    static SourcePressed: UnityEngine.XR.WSA.Input.InteractionManager.EventType;
    static SourceReleased: UnityEngine.XR.WSA.Input.InteractionManager.EventType;
    static SourceUpdated: UnityEngine.XR.WSA.Input.InteractionManager.EventType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA {
  class HolographicSettings extends System.Object {
    constructor();
    static ActivateLatentFramePresentation(activated: boolean): void;
    static SetFocusPointForFrame(position: UnityEngine.Vector3): void;
    static SetFocusPointForFrame(position: UnityEngine.Vector3, normal: UnityEngine.Vector3): void;
    static SetFocusPointForFrame(position: UnityEngine.Vector3, normal: UnityEngine.Vector3, velocity: UnityEngine.Vector3): void;
    static readonly IsDisplayOpaque: boolean;
    static readonly IsLatentFramePresentation: boolean;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SurfaceObserver extends System.Object {
    constructor();
    Dispose(): void;
    RequestMeshAsync(dataRequest: UnityEngine.XR.WSA.SurfaceData, onDataReady: ((bakedData: UnityEngine.XR.WSA.SurfaceData, outputWritten: boolean, elapsedBakeTimeSeconds: number) => void)): boolean;
    SetVolumeAsAxisAlignedBox(origin: UnityEngine.Vector3, extents: UnityEngine.Vector3): void;
    SetVolumeAsFrustum(planes: UnityEngine.Plane[]): void;
    SetVolumeAsOrientedBox(origin: UnityEngine.Vector3, extents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): void;
    SetVolumeAsSphere(origin: UnityEngine.Vector3, radiusMeters: number): void;
    Update(onSurfaceChanged: ((surfaceId: UnityEngine.XR.WSA.SurfaceId, changeType: UnityEngine.XR.WSA.SurfaceChange, bounds: UnityEngine.Bounds, updateTime: any) => void)): void;
  }
}
declare namespace UnityEngine.XR.WSA {
  class WorldAnchor extends UnityEngine.Component {
    protected constructor();
    GetNativeSpatialAnchorPtr(): any;
    SetNativeSpatialAnchorPtr(spatialAnchorPtr: any): void;
    readonly isLocated: boolean;
  }
}
declare namespace UnityEngine.XR.WSA.Persistence {
  class WorldAnchorStore extends System.Object {
    protected constructor();
    Clear(): void;
    Delete(id: string): boolean;
    GetAllIds(ids: string[]): number;
    GetAllIds(): string[];
    static GetAsync(onCompleted: ((store: UnityEngine.XR.WSA.Persistence.WorldAnchorStore) => void)): void;
    Load(id: string, go: UnityEngine.GameObject): UnityEngine.XR.WSA.WorldAnchor;
    Save(id: string, anchor: UnityEngine.XR.WSA.WorldAnchor): boolean;
    readonly anchorCount: number;
  }
}
declare namespace UnityEngine.XR.WSA.Sharing {
  class WorldAnchorTransferBatch extends System.Object {
    constructor();
    AddWorldAnchor(id: string, anchor: UnityEngine.XR.WSA.WorldAnchor): boolean;
    Dispose(): void;
    static ExportAsync(transferBatch: UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch, onDataAvailable: ((data: number[]) => void), onCompleted: ((completionReason: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason) => void)): void;
    GetAllIds(ids: string[]): number;
    GetAllIds(): string[];
    static ImportAsync(serializedData: number[], onComplete: ((completionReason: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason, deserializedTransferBatch: UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch) => void)): void;
    static ImportAsync(serializedData: number[], offset: number, length: number, onComplete: ((completionReason: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason, deserializedTransferBatch: UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch) => void)): void;
    LockObject(id: string, go: UnityEngine.GameObject): UnityEngine.XR.WSA.WorldAnchor;
    readonly anchorCount: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class WebCam extends System.Object {
    protected constructor();
    static readonly Mode: UnityEngine.XR.WSA.WebCam.WebCamMode;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class VideoCapture extends System.Object {
    protected constructor();
    static CreateAsync(showHolograms: boolean, onCreatedCallback: ((captureObject: UnityEngine.XR.WSA.WebCam.VideoCapture) => void)): void;
    Dispose(): void;
    static GetSupportedFrameRatesForResolution(resolution: UnityEngine.Resolution): any;
    GetUnsafePointerToVideoDeviceController(): any;
    StartRecordingAsync(filename: string, onStartedRecordingVideoCallback: ((result: UnityEngine.XR.WSA.WebCam.VideoCapture.VideoCaptureResult) => void)): void;
    StartVideoModeAsync(setupParams: UnityEngine.XR.WSA.WebCam.CameraParameters, audioState: UnityEngine.XR.WSA.WebCam.VideoCapture.AudioState, onVideoModeStartedCallback: ((result: UnityEngine.XR.WSA.WebCam.VideoCapture.VideoCaptureResult) => void)): void;
    StopRecordingAsync(onStoppedRecordingVideoCallback: ((result: UnityEngine.XR.WSA.WebCam.VideoCapture.VideoCaptureResult) => void)): void;
    StopVideoModeAsync(onVideoModeStoppedCallback: ((result: UnityEngine.XR.WSA.WebCam.VideoCapture.VideoCaptureResult) => void)): void;
    readonly IsRecording: boolean;
    static readonly SupportedResolutions: any;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam.VideoCapture {
  class CaptureResultType extends System.Enum {
    protected constructor();
    static Success: UnityEngine.XR.WSA.WebCam.VideoCapture.CaptureResultType;
    static UnknownError: UnityEngine.XR.WSA.WebCam.VideoCapture.CaptureResultType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam.VideoCapture {
  class AudioState extends System.Enum {
    protected constructor();
    static ApplicationAndMicAudio: UnityEngine.XR.WSA.WebCam.VideoCapture.AudioState;
    static ApplicationAudio: UnityEngine.XR.WSA.WebCam.VideoCapture.AudioState;
    static MicAudio: UnityEngine.XR.WSA.WebCam.VideoCapture.AudioState;
    static None: UnityEngine.XR.WSA.WebCam.VideoCapture.AudioState;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam.VideoCapture {
  class VideoCaptureResult extends System.ValueType {
    protected constructor();
    readonly success: boolean;
    hResult: number;
    resultType: UnityEngine.XR.WSA.WebCam.VideoCapture.CaptureResultType;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class PhotoCapture extends System.Object {
    protected constructor();
    static CreateAsync(showHolograms: boolean, onCreatedCallback: ((captureObject: UnityEngine.XR.WSA.WebCam.PhotoCapture) => void)): void;
    Dispose(): void;
    GetUnsafePointerToVideoDeviceController(): any;
    StartPhotoModeAsync(setupParams: UnityEngine.XR.WSA.WebCam.CameraParameters, onPhotoModeStartedCallback: ((result: UnityEngine.XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult) => void)): void;
    StopPhotoModeAsync(onPhotoModeStoppedCallback: ((result: UnityEngine.XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult) => void)): void;
    TakePhotoAsync(onCapturedPhotoToMemoryCallback: ((result: UnityEngine.XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult, photoCaptureFrame: UnityEngine.XR.WSA.WebCam.PhotoCaptureFrame) => void)): void;
    TakePhotoAsync(filename: string, fileOutputFormat: UnityEngine.XR.WSA.WebCam.PhotoCaptureFileOutputFormat, onCapturedPhotoToDiskCallback: ((result: UnityEngine.XR.WSA.WebCam.PhotoCapture.PhotoCaptureResult) => void)): void;
    static readonly SupportedResolutions: any;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam.PhotoCapture {
  class CaptureResultType extends System.Enum {
    protected constructor();
    static Success: UnityEngine.XR.WSA.WebCam.PhotoCapture.CaptureResultType;
    static UnknownError: UnityEngine.XR.WSA.WebCam.PhotoCapture.CaptureResultType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam.PhotoCapture {
  class PhotoCaptureResult extends System.ValueType {
    protected constructor();
    readonly success: boolean;
    hResult: number;
    resultType: UnityEngine.XR.WSA.WebCam.PhotoCapture.CaptureResultType;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class PhotoCaptureFrame extends System.Object {
    protected constructor();
    CopyRawImageDataIntoBuffer(byteBuffer: number[]): void;
    Dispose(): void;
    GetUnsafePointerToBuffer(): any;
    TryGetCameraToWorldMatrix(cameraToWorldMatrix: any): boolean;
    TryGetProjectionMatrix(nearClipPlane: number, farClipPlane: number, projectionMatrix: any): boolean;
    TryGetProjectionMatrix(projectionMatrix: any): boolean;
    UploadImageDataToTexture(targetTexture: UnityEngine.Texture2D): void;
    readonly dataLength: number;
    readonly hasLocationData: boolean;
    readonly pixelFormat: UnityEngine.XR.WSA.WebCam.CapturePixelFormat;
  }
}
declare namespace UnityEngine.XR.WSA {
  class PositionalLocatorState extends System.Enum {
    protected constructor();
    static Activating: UnityEngine.XR.WSA.PositionalLocatorState;
    static Active: UnityEngine.XR.WSA.PositionalLocatorState;
    static Inhibited: UnityEngine.XR.WSA.PositionalLocatorState;
    static OrientationOnly: UnityEngine.XR.WSA.PositionalLocatorState;
    static Unavailable: UnityEngine.XR.WSA.PositionalLocatorState;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA {
  class WorldManager extends System.Object {
    constructor();
    static ActivateLatentFramePresentation(activated: boolean): void;
    static GetNativeISpatialCoordinateSystemPtr(): any;
    static readonly IsLatentFramePresentation: boolean;
    static readonly state: UnityEngine.XR.WSA.PositionalLocatorState;
  }
}
declare namespace UnityEngine.XR {
  class XRNode extends System.Enum {
    protected constructor();
    static CenterEye: UnityEngine.XR.XRNode;
    static GameController: UnityEngine.XR.XRNode;
    static HardwareTracker: UnityEngine.XR.XRNode;
    static Head: UnityEngine.XR.XRNode;
    static LeftEye: UnityEngine.XR.XRNode;
    static LeftHand: UnityEngine.XR.XRNode;
    static RightEye: UnityEngine.XR.XRNode;
    static RightHand: UnityEngine.XR.XRNode;
    static TrackingReference: UnityEngine.XR.XRNode;
    value__: number;
  }
}
declare namespace UnityEngine.XR {
  class AvailableTrackingData extends System.Enum {
    protected constructor();
    static AccelerationAvailable: UnityEngine.XR.AvailableTrackingData;
    static AngularAccelerationAvailable: UnityEngine.XR.AvailableTrackingData;
    static AngularVelocityAvailable: UnityEngine.XR.AvailableTrackingData;
    static None: UnityEngine.XR.AvailableTrackingData;
    static PositionAvailable: UnityEngine.XR.AvailableTrackingData;
    static RotationAvailable: UnityEngine.XR.AvailableTrackingData;
    value__: number;
    static VelocityAvailable: UnityEngine.XR.AvailableTrackingData;
  }
}
declare namespace UnityEngine.XR {
  class XRNodeState extends System.ValueType {
    protected constructor();
    TryGetAcceleration(acceleration: any): boolean;
    TryGetAngularAcceleration(angularAcceleration: any): boolean;
    TryGetAngularVelocity(angularVelocity: any): boolean;
    TryGetPosition(position: any): boolean;
    TryGetRotation(rotation: any): boolean;
    TryGetVelocity(velocity: any): boolean;
    nodeType: UnityEngine.XR.XRNode;
    tracked: boolean;
    uniqueID: number;
  }
}
declare namespace UnityEngine.VR {
  class VRDeviceType extends System.Enum {
    protected constructor();
    static Morpheus: UnityEngine.VR.VRDeviceType;
    static None: UnityEngine.VR.VRDeviceType;
    static Oculus: UnityEngine.VR.VRDeviceType;
    static PlayStationVR: UnityEngine.VR.VRDeviceType;
    static Split: UnityEngine.VR.VRDeviceType;
    static Stereo: UnityEngine.VR.VRDeviceType;
    static Unknown: UnityEngine.VR.VRDeviceType;
    value__: number;
  }
}
declare namespace UnityEngine.VR {
  class TrackingSpaceType extends System.Enum {
    protected constructor();
    static RoomScale: UnityEngine.VR.TrackingSpaceType;
    static Stationary: UnityEngine.VR.TrackingSpaceType;
    value__: number;
  }
}
declare namespace UnityEngine.VR {
  class UserPresenceState extends System.Enum {
    protected constructor();
    static NotPresent: UnityEngine.VR.UserPresenceState;
    static Present: UnityEngine.VR.UserPresenceState;
    static Unknown: UnityEngine.VR.UserPresenceState;
    static Unsupported: UnityEngine.VR.UserPresenceState;
    value__: number;
  }
}
declare namespace UnityEngine.VR {
  class VRSettings extends System.Object {
    protected constructor();
    static LoadDeviceByName(deviceName: string): void;
    static LoadDeviceByName(prioritizedDeviceNameList: string[]): void;
    static enabled: boolean;
    static readonly eyeTextureHeight: number;
    static readonly eyeTextureWidth: number;
    static readonly isDeviceActive: boolean;
    static loadedDevice: UnityEngine.VR.VRDeviceType;
    static readonly loadedDeviceName: string;
    static occlusionMaskScale: number;
    static renderScale: number;
    static renderViewportScale: number;
    static showDeviceView: boolean;
    static readonly supportedDevices: string[];
  }
}
declare namespace UnityEngine.VR {
  class VRDevice extends System.Object {
    protected constructor();
    static DisableAutoVRCameraTracking(camera: UnityEngine.Camera, disabled: boolean): void;
    static GetNativePtr(): any;
    static GetTrackingSpaceType(): UnityEngine.XR.TrackingSpaceType;
    static SetTrackingSpaceType(trackingSpaceType: UnityEngine.XR.TrackingSpaceType): boolean;
    static readonly family: string;
    static readonly isPresent: boolean;
    static readonly model: string;
    static readonly refreshRate: number;
    static readonly userPresence: UnityEngine.XR.UserPresenceState;
  }
}
declare namespace UnityEngine.VR {
  class VRStats extends System.Object {
    protected constructor();
    static TryGetDroppedFrameCount(droppedFrameCount: any): boolean;
    static TryGetFramePresentCount(framePresentCount: any): boolean;
    static TryGetGPUTimeLastFrame(gpuTimeLastFrame: any): boolean;
    static readonly gpuTimeLastFrame: number;
  }
}
declare namespace UnityEngine.VR {
  class InputTracking extends System.Object {
    protected constructor();
    static GetLocalPosition(node: UnityEngine.VR.VRNode): UnityEngine.Vector3;
    static GetNodeName(uniqueID: number): string;
    static GetNodeStates(nodeStates: UnityEngine.VR.VRNodeState[]): void;
    static Recenter(): void;
    static disablePositionalTracking: boolean;
  }
}
declare namespace UnityEngine.VR {
  class VRNode extends System.Enum {
    protected constructor();
    static CenterEye: UnityEngine.VR.VRNode;
    static GameController: UnityEngine.VR.VRNode;
    static HardwareTracker: UnityEngine.VR.VRNode;
    static Head: UnityEngine.VR.VRNode;
    static LeftEye: UnityEngine.VR.VRNode;
    static LeftHand: UnityEngine.VR.VRNode;
    static RightEye: UnityEngine.VR.VRNode;
    static RightHand: UnityEngine.VR.VRNode;
    static TrackingReference: UnityEngine.VR.VRNode;
    value__: number;
  }
}
declare namespace UnityEngine.VR {
  class VRNodeState extends System.ValueType {
    protected constructor();
    TryGetAcceleration(acceleration: any): boolean;
    TryGetAngularAcceleration(angularAcceleration: any): boolean;
    TryGetAngularVelocity(angularVelocity: any): boolean;
    TryGetPosition(position: any): boolean;
    TryGetRotation(rotation: any): boolean;
    TryGetVelocity(velocity: any): boolean;
    nodeType: UnityEngine.VR.VRNode;
    tracked: boolean;
    uniqueID: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class GestureSettings extends System.Enum {
    protected constructor();
    static DoubleTap: UnityEngine.XR.WSA.Input.GestureSettings;
    static Hold: UnityEngine.XR.WSA.Input.GestureSettings;
    static ManipulationTranslate: UnityEngine.XR.WSA.Input.GestureSettings;
    static NavigationRailsX: UnityEngine.XR.WSA.Input.GestureSettings;
    static NavigationRailsY: UnityEngine.XR.WSA.Input.GestureSettings;
    static NavigationRailsZ: UnityEngine.XR.WSA.Input.GestureSettings;
    static NavigationX: UnityEngine.XR.WSA.Input.GestureSettings;
    static NavigationY: UnityEngine.XR.WSA.Input.GestureSettings;
    static NavigationZ: UnityEngine.XR.WSA.Input.GestureSettings;
    static None: UnityEngine.XR.WSA.Input.GestureSettings;
    static Tap: UnityEngine.XR.WSA.Input.GestureSettings;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class HoldCompletedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class HoldCanceledEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class HoldStartedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class TappedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
    readonly tapCount: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class ManipulationCanceledEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class ManipulationCompletedEventArgs extends System.ValueType {
    protected constructor();
    readonly cumulativeDelta: UnityEngine.Vector3;
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class ManipulationStartedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class ManipulationUpdatedEventArgs extends System.ValueType {
    protected constructor();
    readonly cumulativeDelta: UnityEngine.Vector3;
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class NavigationCanceledEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class NavigationCompletedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly normalizedOffset: UnityEngine.Vector3;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class NavigationStartedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class NavigationUpdatedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly normalizedOffset: UnityEngine.Vector3;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class RecognitionEndedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class RecognitionStartedEventArgs extends System.ValueType {
    protected constructor();
    readonly headPose: UnityEngine.Pose;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class GestureErrorEventArgs extends System.ValueType {
    protected constructor();
    readonly error: string;
    readonly hresult: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceKind extends System.Enum {
    protected constructor();
    static Controller: UnityEngine.XR.WSA.Input.InteractionSourceKind;
    static Hand: UnityEngine.XR.WSA.Input.InteractionSourceKind;
    static Other: UnityEngine.XR.WSA.Input.InteractionSourceKind;
    value__: number;
    static Voice: UnityEngine.XR.WSA.Input.InteractionSourceKind;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceFlags extends System.Enum {
    protected constructor();
    static None: UnityEngine.XR.WSA.Input.InteractionSourceFlags;
    static SupportsGrasp: UnityEngine.XR.WSA.Input.InteractionSourceFlags;
    static SupportsMenu: UnityEngine.XR.WSA.Input.InteractionSourceFlags;
    static SupportsPointing: UnityEngine.XR.WSA.Input.InteractionSourceFlags;
    static SupportsThumbstick: UnityEngine.XR.WSA.Input.InteractionSourceFlags;
    static SupportsTouchpad: UnityEngine.XR.WSA.Input.InteractionSourceFlags;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSource extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    readonly handedness: UnityEngine.XR.WSA.Input.InteractionSourceHandedness;
    readonly id: number;
    readonly kind: UnityEngine.XR.WSA.Input.InteractionSourceKind;
    readonly productId: number;
    readonly productVersion: number;
    readonly supportsGrasp: boolean;
    readonly supportsMenu: boolean;
    readonly supportsPointing: boolean;
    readonly supportsThumbstick: boolean;
    readonly supportsTouchpad: boolean;
    readonly vendorId: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourcePoseFlags extends System.Enum {
    protected constructor();
    static HasAngularVelocity: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    static HasGripPosition: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    static HasGripRotation: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    static HasPointerPosition: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    static HasPointerRotation: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    static HasVelocity: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    static None: UnityEngine.XR.WSA.Input.InteractionSourcePoseFlags;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceStateFlags extends System.Enum {
    protected constructor();
    static AnyPressed: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static Grasped: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static MenuPressed: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static None: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static SelectPressed: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static ThumbstickPressed: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static TouchpadPressed: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    static TouchpadTouched: UnityEngine.XR.WSA.Input.InteractionSourceStateFlags;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceHandedness extends System.Enum {
    protected constructor();
    static Left: UnityEngine.XR.WSA.Input.InteractionSourceHandedness;
    static Right: UnityEngine.XR.WSA.Input.InteractionSourceHandedness;
    static Unknown: UnityEngine.XR.WSA.Input.InteractionSourceHandedness;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourcePressType extends System.Enum {
    protected constructor();
    static Grasp: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    static Menu: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    static None: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    static Select: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    static Thumbstick: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    static Touchpad: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceNode extends System.Enum {
    protected constructor();
    static Grip: UnityEngine.XR.WSA.Input.InteractionSourceNode;
    static Pointer: UnityEngine.XR.WSA.Input.InteractionSourceNode;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourcePositionAccuracy extends System.Enum {
    protected constructor();
    static Approximate: UnityEngine.XR.WSA.Input.InteractionSourcePositionAccuracy;
    static High: UnityEngine.XR.WSA.Input.InteractionSourcePositionAccuracy;
    static None: UnityEngine.XR.WSA.Input.InteractionSourcePositionAccuracy;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourcePose extends System.ValueType {
    protected constructor();
    TryGetAngularVelocity(angularVelocity: any): boolean;
    TryGetForward(forward: any, node?: UnityEngine.XR.WSA.Input.InteractionSourceNode): boolean;
    TryGetPosition(position: any): boolean;
    TryGetPosition(position: any, node: UnityEngine.XR.WSA.Input.InteractionSourceNode): boolean;
    TryGetRight(right: any, node?: UnityEngine.XR.WSA.Input.InteractionSourceNode): boolean;
    TryGetRotation(rotation: any, node?: UnityEngine.XR.WSA.Input.InteractionSourceNode): boolean;
    TryGetUp(up: any, node?: UnityEngine.XR.WSA.Input.InteractionSourceNode): boolean;
    TryGetVelocity(velocity: any): boolean;
    readonly positionAccuracy: UnityEngine.XR.WSA.Input.InteractionSourcePositionAccuracy;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceProperties extends System.ValueType {
    protected constructor();
    readonly location: UnityEngine.XR.WSA.Input.InteractionSourceLocation;
    readonly sourceLossMitigationDirection: UnityEngine.Vector3;
    readonly sourceLossRisk: number;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceState extends System.ValueType {
    protected constructor();
    readonly anyPressed: boolean;
    readonly grasped: boolean;
    readonly headPose: UnityEngine.Pose;
    readonly headRay: UnityEngine.Ray;
    readonly menuPressed: boolean;
    readonly pressed: boolean;
    readonly properties: UnityEngine.XR.WSA.Input.InteractionSourceProperties;
    readonly selectPressed: boolean;
    readonly selectPressedAmount: number;
    readonly source: UnityEngine.XR.WSA.Input.InteractionSource;
    readonly sourcePose: UnityEngine.XR.WSA.Input.InteractionSourcePose;
    readonly thumbstickPosition: UnityEngine.Vector2;
    readonly thumbstickPressed: boolean;
    readonly touchpadPosition: UnityEngine.Vector2;
    readonly touchpadPressed: boolean;
    readonly touchpadTouched: boolean;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceDetectedEventArgs extends System.ValueType {
    protected constructor();
    readonly state: UnityEngine.XR.WSA.Input.InteractionSourceState;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceLostEventArgs extends System.ValueType {
    protected constructor();
    readonly state: UnityEngine.XR.WSA.Input.InteractionSourceState;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourcePressedEventArgs extends System.ValueType {
    protected constructor();
    readonly pressType: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    readonly state: UnityEngine.XR.WSA.Input.InteractionSourceState;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceReleasedEventArgs extends System.ValueType {
    protected constructor();
    readonly pressType: UnityEngine.XR.WSA.Input.InteractionSourcePressType;
    readonly state: UnityEngine.XR.WSA.Input.InteractionSourceState;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceUpdatedEventArgs extends System.ValueType {
    protected constructor();
    readonly state: UnityEngine.XR.WSA.Input.InteractionSourceState;
  }
}
declare namespace UnityEngine.XR.WSA.Input {
  class InteractionSourceLocation extends System.ValueType {
    protected constructor();
    TryGetPosition(position: any): boolean;
    TryGetVelocity(velocity: any): boolean;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SurfaceChange extends System.Enum {
    protected constructor();
    static Added: UnityEngine.XR.WSA.SurfaceChange;
    static Removed: UnityEngine.XR.WSA.SurfaceChange;
    static Updated: UnityEngine.XR.WSA.SurfaceChange;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SurfaceId extends System.ValueType {
    protected constructor();
    handle: number;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SurfaceData extends System.ValueType {
    protected constructor();
    bakeCollider: boolean;
    id: UnityEngine.XR.WSA.SurfaceId;
    outputAnchor: UnityEngine.XR.WSA.WorldAnchor;
    outputCollider: UnityEngine.MeshCollider;
    outputMesh: UnityEngine.MeshFilter;
    trianglesPerCubicMeter: number;
  }
}
declare namespace UnityEngine.XR.WSA.Sharing {
  class SerializationCompletionReason extends System.Enum {
    protected constructor();
    static AccessDenied: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason;
    static NotSupported: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason;
    static Succeeded: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason;
    static UnknownError: UnityEngine.XR.WSA.Sharing.SerializationCompletionReason;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class CapturePixelFormat extends System.Enum {
    protected constructor();
    static BGRA32: UnityEngine.XR.WSA.WebCam.CapturePixelFormat;
    static JPEG: UnityEngine.XR.WSA.WebCam.CapturePixelFormat;
    static NV12: UnityEngine.XR.WSA.WebCam.CapturePixelFormat;
    static PNG: UnityEngine.XR.WSA.WebCam.CapturePixelFormat;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class PhotoCaptureFileOutputFormat extends System.Enum {
    protected constructor();
    static JPG: UnityEngine.XR.WSA.WebCam.PhotoCaptureFileOutputFormat;
    static PNG: UnityEngine.XR.WSA.WebCam.PhotoCaptureFileOutputFormat;
    value__: number;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class WebCamMode extends System.Enum {
    protected constructor();
    static None: UnityEngine.XR.WSA.WebCam.WebCamMode;
    static PhotoMode: UnityEngine.XR.WSA.WebCam.WebCamMode;
    value__: number;
    static VideoMode: UnityEngine.XR.WSA.WebCam.WebCamMode;
  }
}
declare namespace UnityEngine.XR.WSA.WebCam {
  class CameraParameters extends System.ValueType {
    protected constructor();
    cameraResolutionHeight: number;
    cameraResolutionWidth: number;
    frameRate: number;
    hologramOpacity: number;
    pixelFormat: UnityEngine.XR.WSA.WebCam.CapturePixelFormat;
  }
}
declare namespace SimpleJson {
  class JsonArray {
    constructor();
    constructor(capacity: number);
    Add(item: any): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: any, comparer: any): number;
    BinarySearch(item: any): number;
    BinarySearch(item: any, comparer: any): number;
    Clear(): void;
    Contains(item: any): boolean;
    CopyTo(index: number, array: any[], arrayIndex: number, count: number): void;
    CopyTo(array: any[]): void;
    CopyTo(array: any[], arrayIndex: number): void;
    Equals(obj: any): boolean;
    Exists(match: ((obj: any) => boolean)): boolean;
    Find(match: ((obj: any) => boolean)): any;
    FindAll(match: ((obj: any) => boolean)): any[];
    FindIndex(startIndex: number, count: number, match: ((obj: any) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: any) => boolean)): number;
    FindIndex(match: ((obj: any) => boolean)): number;
    FindLast(match: ((obj: any) => boolean)): any;
    FindLastIndex(startIndex: number, count: number, match: ((obj: any) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: any) => boolean)): number;
    FindLastIndex(match: ((obj: any) => boolean)): number;
    ForEach(action: ((obj: any) => void)): void;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetRange(index: number, count: number): any[];
    GetType(): any;
    IndexOf(item: any): number;
    IndexOf(item: any, index: number): number;
    IndexOf(item: any, index: number, count: number): number;
    Insert(index: number, item: any): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: any): number;
    LastIndexOf(item: any, index: number): number;
    LastIndexOf(item: any, index: number, count: number): number;
    Remove(item: any): boolean;
    RemoveAll(match: ((obj: any) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: any, y: any) => number)): void;
    ToArray(): any[];
    ToString(): string;
    TrimExcess(): void;
    TrueForAll(match: ((obj: any) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): any;
    set_Item(index: number, value: any): void;
  }
}
declare namespace System.Collections.Generic.List`1[[System.Object, mscorlib, Version=4.0.0 {
  class List`1 extends System.Object {
    constructor();
    constructor(capacity: number);
    constructor(collection: any);
    Add(item: any): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: any, comparer: any): number;
    BinarySearch(item: any): number;
    BinarySearch(item: any, comparer: any): number;
    Clear(): void;
    Contains(item: any): boolean;
    CopyTo(index: number, array: any[], arrayIndex: number, count: number): void;
    CopyTo(array: any[]): void;
    CopyTo(array: any[], arrayIndex: number): void;
    Exists(match: ((obj: any) => boolean)): boolean;
    Find(match: ((obj: any) => boolean)): any;
    FindAll(match: ((obj: any) => boolean)): any[];
    FindIndex(startIndex: number, count: number, match: ((obj: any) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: any) => boolean)): number;
    FindIndex(match: ((obj: any) => boolean)): number;
    FindLast(match: ((obj: any) => boolean)): any;
    FindLastIndex(startIndex: number, count: number, match: ((obj: any) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: any) => boolean)): number;
    FindLastIndex(match: ((obj: any) => boolean)): number;
    ForEach(action: ((obj: any) => void)): void;
    GetEnumerator(): any;
    GetRange(index: number, count: number): any[];
    IndexOf(item: any): number;
    IndexOf(item: any, index: number): number;
    IndexOf(item: any, index: number, count: number): number;
    Insert(index: number, item: any): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: any): number;
    LastIndexOf(item: any, index: number): number;
    LastIndexOf(item: any, index: number, count: number): number;
    Remove(item: any): boolean;
    RemoveAll(match: ((obj: any) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: any, y: any) => number)): void;
    ToArray(): any[];
    TrimExcess(): void;
    TrueForAll(match: ((obj: any) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): any;
    set_Item(index: number, value: any): void;
  }
}
declare namespace SimpleJson {
  class JsonObject extends System.Object {
    constructor();
    constructor(comparer: any);
    Add(item: any): void;
    Add(key: string, value: any): void;
    Clear(): void;
    Contains(item: any): boolean;
    ContainsKey(key: string): boolean;
    CopyTo(array: any[], arrayIndex: number): void;
    GetEnumerator(): any;
    Remove(item: any): boolean;
    Remove(key: string): boolean;
    ToString(): string;
    TryGetValue(key: string, value: any): boolean;
    readonly Count: number;
    readonly IsReadOnly: boolean;
    get_Item(index: number): any;
    get_Item(key: string): any;
    set_Item(key: string, value: any): void;
    readonly Keys: any;
    readonly Values: any;
  }
}
declare namespace SimpleJson {
  class SimpleJson extends System.Object {
    protected constructor();
    static DeserializeObject(json: string): any;
    static DeserializeObject(json: string, type: any): any;
    static DeserializeObject(json: string, type: any, jsonSerializerStrategy: SimpleJson.IJsonSerializerStrategy): any;
    static EscapeToJavascriptString(jsonString: string): string;
    static SerializeObject(json: any): string;
    static SerializeObject(json: any, jsonSerializerStrategy: SimpleJson.IJsonSerializerStrategy): string;
    static TryDeserializeObject(json: string, obj: any): boolean;
    static CurrentJsonSerializerStrategy: SimpleJson.IJsonSerializerStrategy;
    static readonly PocoJsonSerializerStrategy: SimpleJson.PocoJsonSerializerStrategy;
  }
}
declare namespace SimpleJson {
  class IJsonSerializerStrategy {
    protected constructor();
    DeserializeObject(value: any, type: any): any;
    TrySerializeNonPrimitiveObject(input: any, output: any): boolean;
  }
}
declare namespace SimpleJson {
  class PocoJsonSerializerStrategy extends System.Object {
    constructor();
    DeserializeObject(value: any, type: any): any;
    TrySerializeNonPrimitiveObject(input: any, output: any): boolean;
  }
}
declare namespace SimpleJson.Reflection {
  class ReflectionUtils extends System.Object {
    constructor();
    static GetAttribute(info: any, type: any): System.Attribute;
    static GetAttribute(objectType: any, attributeType: any): System.Attribute;
    static GetConstructorByReflection(constructorInfo: any): ((args: any[]) => any);
    static GetConstructorByReflection(type: any, argsType: any[]): ((args: any[]) => any);
    static GetConstructorInfo(type: any, argsType: any[]): any;
    static GetConstructors(type: any): any;
    static GetContructor(constructorInfo: any): ((args: any[]) => any);
    static GetContructor(type: any, argsType: any[]): ((args: any[]) => any);
    static GetFields(type: any): any;
    static GetGenericTypeArguments(type: any): any[];
    static GetGetMethod(fieldInfo: any): ((source: any) => any);
    static GetGetMethod(propertyInfo: any): ((source: any) => any);
    static GetGetMethodByReflection(fieldInfo: any): ((source: any) => any);
    static GetGetMethodByReflection(propertyInfo: any): ((source: any) => any);
    static GetGetterMethodInfo(propertyInfo: any): any;
    static GetProperties(type: any): any;
    static GetSetMethod(fieldInfo: any): ((source: any, value: any) => void);
    static GetSetMethod(propertyInfo: any): ((source: any, value: any) => void);
    static GetSetMethodByReflection(fieldInfo: any): ((source: any, value: any) => void);
    static GetSetMethodByReflection(propertyInfo: any): ((source: any, value: any) => void);
    static GetSetterMethodInfo(propertyInfo: any): any;
    static IsAssignableFrom(type1: any, type2: any): boolean;
    static IsNullableType(type: any): boolean;
    static IsTypeDictionary(type: any): boolean;
    static IsTypeGenericeCollectionInterface(type: any): boolean;
    static IsValueType(type: any): boolean;
    static ToNullableType(obj: any, nullableType: any): any;
  }
}
declare namespace UnityEngine {
  class WindZoneMode extends System.Enum {
    protected constructor();
    static Directional: UnityEngine.WindZoneMode;
    static Spherical: UnityEngine.WindZoneMode;
    value__: number;
  }
}
declare namespace UnityEngine {
  class WindZone extends UnityEngine.Component {
    constructor();
    mode: UnityEngine.WindZoneMode;
    radius: number;
    windMain: number;
    windPulseFrequency: number;
    windPulseMagnitude: number;
    windTurbulence: number;
  }
}
