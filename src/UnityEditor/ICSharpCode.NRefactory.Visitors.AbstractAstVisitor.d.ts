declare namespace ICSharpCode.NRefactory.Visitors {
  class AbstractAstVisitor extends System.Object {
    // constructors
    protected constructor();
    // methods
    VisitAddHandlerStatement(addHandlerStatement: any, data: any): any;
    VisitAddressOfExpression(addressOfExpression: any, data: any): any;
    VisitAnonymousMethodExpression(anonymousMethodExpression: any, data: any): any;
    VisitArrayCreateExpression(arrayCreateExpression: any, data: any): any;
    VisitAssignmentExpression(assignmentExpression: any, data: any): any;
    VisitAttribute(attribute: any, data: any): any;
    VisitAttributeSection(attributeSection: any, data: any): any;
    VisitBaseReferenceExpression(baseReferenceExpression: any, data: any): any;
    VisitBinaryOperatorExpression(binaryOperatorExpression: any, data: any): any;
    VisitBlockStatement(blockStatement: any, data: any): any;
    VisitBreakStatement(breakStatement: any, data: any): any;
    VisitCaseLabel(caseLabel: any, data: any): any;
    VisitCastExpression(castExpression: any, data: any): any;
    VisitCatchClause(catchClause: any, data: any): any;
    VisitCheckedExpression(checkedExpression: any, data: any): any;
    VisitCheckedStatement(checkedStatement: any, data: any): any;
    VisitClassReferenceExpression(classReferenceExpression: any, data: any): any;
    VisitCollectionInitializerExpression(collectionInitializerExpression: any, data: any): any;
    VisitCompilationUnit(compilationUnit: any, data: any): any;
    VisitConditionalExpression(conditionalExpression: any, data: any): any;
    VisitConstructorDeclaration(constructorDeclaration: any, data: any): any;
    VisitConstructorInitializer(constructorInitializer: any, data: any): any;
    VisitContinueStatement(continueStatement: any, data: any): any;
    VisitDeclareDeclaration(declareDeclaration: any, data: any): any;
    VisitDefaultValueExpression(defaultValueExpression: any, data: any): any;
    VisitDelegateDeclaration(delegateDeclaration: any, data: any): any;
    VisitDestructorDeclaration(destructorDeclaration: any, data: any): any;
    VisitDirectionExpression(directionExpression: any, data: any): any;
    VisitDoLoopStatement(doLoopStatement: any, data: any): any;
    VisitElseIfSection(elseIfSection: any, data: any): any;
    VisitEmptyStatement(emptyStatement: any, data: any): any;
    VisitEndStatement(endStatement: any, data: any): any;
    VisitEraseStatement(eraseStatement: any, data: any): any;
    VisitErrorStatement(errorStatement: any, data: any): any;
    VisitEventAddRegion(eventAddRegion: any, data: any): any;
    VisitEventDeclaration(eventDeclaration: any, data: any): any;
    VisitEventRaiseRegion(eventRaiseRegion: any, data: any): any;
    VisitEventRemoveRegion(eventRemoveRegion: any, data: any): any;
    VisitExitStatement(exitStatement: any, data: any): any;
    VisitExpressionRangeVariable(expressionRangeVariable: any, data: any): any;
    VisitExpressionStatement(expressionStatement: any, data: any): any;
    VisitExternAliasDirective(externAliasDirective: any, data: any): any;
    VisitFieldDeclaration(fieldDeclaration: any, data: any): any;
    VisitFixedStatement(fixedStatement: any, data: any): any;
    VisitForeachStatement(foreachStatement: any, data: any): any;
    VisitForNextStatement(forNextStatement: any, data: any): any;
    VisitForStatement(forStatement: any, data: any): any;
    VisitGotoCaseStatement(gotoCaseStatement: any, data: any): any;
    VisitGotoStatement(gotoStatement: any, data: any): any;
    VisitIdentifierExpression(identifierExpression: any, data: any): any;
    VisitIfElseStatement(ifElseStatement: any, data: any): any;
    VisitIndexerDeclaration(indexerDeclaration: any, data: any): any;
    VisitIndexerExpression(indexerExpression: any, data: any): any;
    VisitInnerClassTypeReference(innerClassTypeReference: any, data: any): any;
    VisitInterfaceImplementation(interfaceImplementation: any, data: any): any;
    VisitInvocationExpression(invocationExpression: any, data: any): any;
    VisitLabelStatement(labelStatement: any, data: any): any;
    VisitLambdaExpression(lambdaExpression: any, data: any): any;
    VisitLocalVariableDeclaration(localVariableDeclaration: any, data: any): any;
    VisitLockStatement(lockStatement: any, data: any): any;
    VisitMemberReferenceExpression(memberReferenceExpression: any, data: any): any;
    VisitMethodDeclaration(methodDeclaration: any, data: any): any;
    VisitNamedArgumentExpression(namedArgumentExpression: any, data: any): any;
    VisitNamespaceDeclaration(namespaceDeclaration: any, data: any): any;
    VisitObjectCreateExpression(objectCreateExpression: any, data: any): any;
    VisitOnErrorStatement(onErrorStatement: any, data: any): any;
    VisitOperatorDeclaration(operatorDeclaration: any, data: any): any;
    VisitOptionDeclaration(optionDeclaration: any, data: any): any;
    VisitParameterDeclarationExpression(parameterDeclarationExpression: any, data: any): any;
    VisitParenthesizedExpression(parenthesizedExpression: any, data: any): any;
    VisitPointerReferenceExpression(pointerReferenceExpression: any, data: any): any;
    VisitPrimitiveExpression(primitiveExpression: any, data: any): any;
    VisitPropertyDeclaration(propertyDeclaration: any, data: any): any;
    VisitPropertyGetRegion(propertyGetRegion: any, data: any): any;
    VisitPropertySetRegion(propertySetRegion: any, data: any): any;
    VisitQueryExpression(queryExpression: any, data: any): any;
    VisitQueryExpressionAggregateClause(queryExpressionAggregateClause: any, data: any): any;
    VisitQueryExpressionDistinctClause(queryExpressionDistinctClause: any, data: any): any;
    VisitQueryExpressionFromClause(queryExpressionFromClause: any, data: any): any;
    VisitQueryExpressionGroupClause(queryExpressionGroupClause: any, data: any): any;
    VisitQueryExpressionGroupJoinVBClause(queryExpressionGroupJoinVBClause: any, data: any): any;
    VisitQueryExpressionGroupVBClause(queryExpressionGroupVBClause: any, data: any): any;
    VisitQueryExpressionJoinClause(queryExpressionJoinClause: any, data: any): any;
    VisitQueryExpressionJoinConditionVB(queryExpressionJoinConditionVB: any, data: any): any;
    VisitQueryExpressionJoinVBClause(queryExpressionJoinVBClause: any, data: any): any;
    VisitQueryExpressionLetClause(queryExpressionLetClause: any, data: any): any;
    VisitQueryExpressionLetVBClause(queryExpressionLetVBClause: any, data: any): any;
    VisitQueryExpressionOrderClause(queryExpressionOrderClause: any, data: any): any;
    VisitQueryExpressionOrdering(queryExpressionOrdering: any, data: any): any;
    VisitQueryExpressionPartitionVBClause(queryExpressionPartitionVBClause: any, data: any): any;
    VisitQueryExpressionSelectClause(queryExpressionSelectClause: any, data: any): any;
    VisitQueryExpressionSelectVBClause(queryExpressionSelectVBClause: any, data: any): any;
    VisitQueryExpressionWhereClause(queryExpressionWhereClause: any, data: any): any;
    VisitRaiseEventStatement(raiseEventStatement: any, data: any): any;
    VisitReDimStatement(reDimStatement: any, data: any): any;
    VisitRemoveHandlerStatement(removeHandlerStatement: any, data: any): any;
    VisitResumeStatement(resumeStatement: any, data: any): any;
    VisitReturnStatement(returnStatement: any, data: any): any;
    VisitSizeOfExpression(sizeOfExpression: any, data: any): any;
    VisitStackAllocExpression(stackAllocExpression: any, data: any): any;
    VisitStopStatement(stopStatement: any, data: any): any;
    VisitSwitchSection(switchSection: any, data: any): any;
    VisitSwitchStatement(switchStatement: any, data: any): any;
    VisitTemplateDefinition(templateDefinition: any, data: any): any;
    VisitThisReferenceExpression(thisReferenceExpression: any, data: any): any;
    VisitThrowStatement(throwStatement: any, data: any): any;
    VisitTryCatchStatement(tryCatchStatement: any, data: any): any;
    VisitTypeDeclaration(typeDeclaration: any, data: any): any;
    VisitTypeOfExpression(typeOfExpression: any, data: any): any;
    VisitTypeOfIsExpression(typeOfIsExpression: any, data: any): any;
    VisitTypeReference(typeReference: any, data: any): any;
    VisitTypeReferenceExpression(typeReferenceExpression: any, data: any): any;
    VisitUnaryOperatorExpression(unaryOperatorExpression: any, data: any): any;
    VisitUncheckedExpression(uncheckedExpression: any, data: any): any;
    VisitUncheckedStatement(uncheckedStatement: any, data: any): any;
    VisitUnsafeStatement(unsafeStatement: any, data: any): any;
    VisitUsing(using: any, data: any): any;
    VisitUsingDeclaration(usingDeclaration: any, data: any): any;
    VisitUsingStatement(usingStatement: any, data: any): any;
    VisitVariableDeclaration(variableDeclaration: any, data: any): any;
    VisitWithStatement(withStatement: any, data: any): any;
    VisitYieldStatement(yieldStatement: any, data: any): any;
    // properties
    // fields
  }
}
