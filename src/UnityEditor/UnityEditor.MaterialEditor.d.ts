declare namespace UnityEditor {
  class MaterialEditor extends UnityEditor.Editor {
    // constructors
    constructor();
    // methods
    SetShader(shader: any): void;
    SetShader(newShader: any, registerUndo: boolean): void;
    Awake(): void;
    OnInspectorGUI(): void;
    PropertiesChanged(): void;
    GetFloat(propertyName: string, hasMixedValue: any): number;
    SetFloat(propertyName: string, value: number): void;
    GetColor(propertyName: string, hasMixedValue: any): any;
    SetColor(propertyName: string, value: any): void;
    GetVector(propertyName: string, hasMixedValue: any): any;
    SetVector(propertyName: string, value: any): void;
    GetTexture(propertyName: string, hasMixedValue: any): any;
    SetTexture(propertyName: string, value: any): void;
    GetTextureScale(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    GetTextureOffset(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    SetTextureScale(propertyName: string, value: any, coord: number): void;
    SetTextureOffset(propertyName: string, value: any, coord: number): void;
    RangeProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    RangeProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    RangeProperty(propertyName: string, label: string, v2: number, v3: number): number;
    FloatProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(propertyName: string, label: string): number;
    ColorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    ColorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    ColorProperty(propertyName: string, label: string): any;
    VectorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(propertyName: string, label: string): any;
    TextureScaleOffsetProperty(property: UnityEditor.MaterialProperty): void;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty): number;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty, partOfTexturePropertyControl: boolean): number;
    static TextureScaleOffsetProperty(position: any, scaleOffset: any): any;
    static TextureScaleOffsetProperty(position: any, scaleOffset: any, partOfTexturePropertyControl: boolean): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string, scaleOffset: boolean): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim, scaleOffset: boolean): any;
    HelpBoxWithButton(messageContent: any, buttonContent: any): boolean;
    TextureCompatibilityWarning(prop: UnityEditor.MaterialProperty): void;
    TexturePropertyMiniThumbnail(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string): any;
    GetTexturePropertyCustomArea(position: any): any;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string): number;
    static GetDefaultPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    BeginAnimatedCheck(prop: UnityEditor.MaterialProperty): void;
    EndAnimatedCheck(): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(shader: any, propertyIndex: number): void;
    LightmapEmissionProperty(): void;
    LightmapEmissionProperty(labelIndent: number): void;
    LightmapEmissionProperty(position: any, labelIndent: number): void;
    DefaultShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    DefaultShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    static GetMaterialProperties(mats: UnityEngine.Object[]): UnityEditor.MaterialProperty[];
    static GetMaterialProperty(mats: UnityEngine.Object[], name: string): UnityEditor.MaterialProperty;
    static GetMaterialProperty(mats: UnityEngine.Object[], propertyIndex: number): UnityEditor.MaterialProperty;
    static PrepareMaterialPropertiesForAnimationMode(properties: UnityEditor.MaterialProperty[], isMaterialEditable: boolean): any;
    SetDefaultGUIWidths(): void;
    PropertiesGUI(): boolean;
    PropertiesDefaultGUI(props: UnityEditor.MaterialProperty[]): void;
    static ApplyMaterialPropertyDrawers(material: any): void;
    static ApplyMaterialPropertyDrawers(targets: UnityEngine.Object[]): void;
    RegisterPropertyChangeUndo(label: string): void;
    OnPreviewSettings(): void;
    DefaultPreviewSettingsGUI(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    RequiresConstantRepaint(): boolean;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    DefaultPreviewGUI(r: any, background: any): void;
    OnEnable(): void;
    UndoRedoPerformed(): void;
    OnDisable(): void;
    RenderQueueField(): void;
    RenderQueueField(r: any): void;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, extraProperty2: UnityEditor.MaterialProperty): any;
    TexturePropertyWithHDRColor(label: any, textureProp: UnityEditor.MaterialProperty, colorProperty: UnityEditor.MaterialProperty, hdrConfig: UnityEditor.ColorPickerHDRConfig, showAlpha: boolean): any;
    TexturePropertyTwoLines(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, label2: any, extraProperty2: UnityEditor.MaterialProperty): any;
    static GetRightAlignedFieldRect(r: any): any;
    static GetLeftAlignedFieldRect(r: any): any;
    static GetFlexibleRectBetweenLabelAndField(r: any): any;
    static GetFlexibleRectBetweenFieldAndRightEdge(r: any): any;
    static GetRectAfterLabelWidth(r: any): any;
    // properties
    readonly isVisible: boolean;
    // fields
    static kMiniTextureFieldLabelIndentLevel: number;
  }
}
