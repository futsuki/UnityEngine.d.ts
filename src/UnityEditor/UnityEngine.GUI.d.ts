declare namespace UnityEngine {
  class GUI extends System.Object {
    // constructors
    constructor();
    // methods
    static Label(position: any, text: string): void;
    static Label(position: any, image: any): void;
    static Label(position: any, content: any): void;
    static Label(position: any, text: string, style: any): void;
    static Label(position: any, image: any, style: any): void;
    static Label(position: any, content: any, style: any): void;
    static DrawTexture(position: any, image: any): void;
    static DrawTexture(position: any, image: any, scaleMode: any): void;
    static DrawTexture(position: any, image: any, scaleMode: any, alphaBlend: boolean): void;
    static DrawTexture(position: any, image: any, scaleMode: any, alphaBlend: boolean, imageAspect: number): void;
    static DrawTextureWithTexCoords(position: any, image: any, texCoords: any): void;
    static DrawTextureWithTexCoords(position: any, image: any, texCoords: any, alphaBlend: boolean): void;
    static Box(position: any, text: string): void;
    static Box(position: any, image: any): void;
    static Box(position: any, content: any): void;
    static Box(position: any, text: string, style: any): void;
    static Box(position: any, image: any, style: any): void;
    static Box(position: any, content: any, style: any): void;
    static Button(position: any, text: string): boolean;
    static Button(position: any, image: any): boolean;
    static Button(position: any, content: any): boolean;
    static Button(position: any, text: string, style: any): boolean;
    static Button(position: any, image: any, style: any): boolean;
    static Button(position: any, content: any, style: any): boolean;
    static RepeatButton(position: any, text: string): boolean;
    static RepeatButton(position: any, image: any): boolean;
    static RepeatButton(position: any, content: any): boolean;
    static RepeatButton(position: any, text: string, style: any): boolean;
    static RepeatButton(position: any, image: any, style: any): boolean;
    static RepeatButton(position: any, content: any, style: any): boolean;
    static TextField(position: any, text: string): string;
    static TextField(position: any, text: string, maxLength: number): string;
    static TextField(position: any, text: string, style: any): string;
    static TextField(position: any, text: string, maxLength: number, style: any): string;
    static PasswordField(position: any, password: string, maskChar: any): string;
    static PasswordField(position: any, password: string, maskChar: any, maxLength: number): string;
    static PasswordField(position: any, password: string, maskChar: any, style: any): string;
    static PasswordField(position: any, password: string, maskChar: any, maxLength: number, style: any): string;
    static TextArea(position: any, text: string): string;
    static TextArea(position: any, text: string, maxLength: number): string;
    static TextArea(position: any, text: string, style: any): string;
    static TextArea(position: any, text: string, maxLength: number, style: any): string;
    static Toggle(position: any, value: boolean, text: string): boolean;
    static Toggle(position: any, value: boolean, image: any): boolean;
    static Toggle(position: any, value: boolean, content: any): boolean;
    static Toggle(position: any, value: boolean, text: string, style: any): boolean;
    static Toggle(position: any, value: boolean, image: any, style: any): boolean;
    static Toggle(position: any, value: boolean, content: any, style: any): boolean;
    static Toggle(position: any, id: number, value: boolean, content: any, style: any): boolean;
    static Toolbar(position: any, selected: number, texts: string[]): number;
    static Toolbar(position: any, selected: number, images: any[]): number;
    static Toolbar(position: any, selected: number, content: any[]): number;
    static Toolbar(position: any, selected: number, texts: string[], style: any): number;
    static Toolbar(position: any, selected: number, images: any[], style: any): number;
    static Toolbar(position: any, selected: number, contents: any[], style: any): number;
    static SelectionGrid(position: any, selected: number, texts: string[], xCount: number): number;
    static SelectionGrid(position: any, selected: number, images: any[], xCount: number): number;
    static SelectionGrid(position: any, selected: number, content: any[], xCount: number): number;
    static SelectionGrid(position: any, selected: number, texts: string[], xCount: number, style: any): number;
    static SelectionGrid(position: any, selected: number, images: any[], xCount: number, style: any): number;
    static SelectionGrid(position: any, selected: number, contents: any[], xCount: number, style: any): number;
    static HorizontalSlider(position: any, value: number, leftValue: number, rightValue: number): number;
    static HorizontalSlider(position: any, value: number, leftValue: number, rightValue: number, slider: any, thumb: any): number;
    static VerticalSlider(position: any, value: number, topValue: number, bottomValue: number): number;
    static VerticalSlider(position: any, value: number, topValue: number, bottomValue: number, slider: any, thumb: any): number;
    static Slider(position: any, value: number, size: number, start: number, end: number, sliderStyle: any, thumbStyle: any, horiz: boolean, id: number): number;
    static HorizontalScrollbar(position: any, value: number, size: number, leftValue: number, rightValue: number): number;
    static HorizontalScrollbar(position: any, value: number, size: number, leftValue: number, rightValue: number, style: any): number;
    static VerticalScrollbar(position: any, value: number, size: number, topValue: number, bottomValue: number): number;
    static VerticalScrollbar(position: any, value: number, size: number, topValue: number, bottomValue: number, style: any): number;
    static BeginClip(position: any, scrollOffset: any, renderOffset: any, resetOffset: boolean): void;
    static BeginClip(position: any): void;
    static BeginGroup(position: any): void;
    static BeginGroup(position: any, text: string): void;
    static BeginGroup(position: any, image: any): void;
    static BeginGroup(position: any, content: any): void;
    static BeginGroup(position: any, style: any): void;
    static BeginGroup(position: any, text: string, style: any): void;
    static BeginGroup(position: any, image: any, style: any): void;
    static BeginGroup(position: any, content: any, style: any): void;
    static EndGroup(): void;
    static EndClip(): void;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any): any;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean): any;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any, horizontalScrollbar: any, verticalScrollbar: any): any;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: any, verticalScrollbar: any): any;
    static EndScrollView(): void;
    static EndScrollView(handleScrollWheel: boolean): void;
    static ScrollTo(position: any): void;
    static ScrollTowards(position: any, maxDelta: number): boolean;
    static Window(id: number, clientRect: any, func: ((id: number) => void), text: string): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), image: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), content: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), text: string, style: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), image: any, style: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), title: any, style: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), text: string): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), image: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), content: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), text: string, style: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), image: any, style: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), content: any, style: any): any;
    static DragWindow(): void;
    static DragWindow(position: any): void;
    static SetNextControlName(name: string): void;
    static GetNameOfFocusedControl(): string;
    static FocusControl(name: string): void;
    static BringWindowToFront(windowID: number): void;
    static BringWindowToBack(windowID: number): void;
    static FocusWindow(windowID: number): void;
    static UnfocusWindow(): void;
    // properties
    static skin: any;
    static matrix: any;
    static tooltip: string;
    static color: any;
    static backgroundColor: any;
    static contentColor: any;
    static changed: boolean;
    static enabled: boolean;
    static depth: number;
    // fields
  }
}
