declare namespace UnityEditor {
  class Handles {
    // constructors
    constructor();
    // methods
    static PositionHandle(position: any, rotation: any): any;
    static RotationHandle(rotation: any, position: any): any;
    static ScaleHandle(scale: any, position: any, rotation: any, size: number): any;
    static RadiusHandle(rotation: any, position: any, radius: number, handlesOnly: boolean): number;
    static RadiusHandle(rotation: any, position: any, radius: number): number;
    static Slider(position: any, direction: any): any;
    static Slider(position: any, direction: any, size: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: number): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: any): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: any): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: any): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: any): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: any): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: any): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: number): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: UnityEditor.Handles.DrawCapFunction, snap: number, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: number): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: UnityEditor.Handles.CapFunction, snap: number, drawHelper: boolean): any;
    static FreeRotateHandle(rotation: any, position: any, size: number): any;
    static FreeMoveHandle(position: any, rotation: any, size: number, snap: any, capFunc: UnityEditor.Handles.DrawCapFunction): any;
    static ScaleSlider(scale: number, position: any, direction: any, rotation: any, size: number, snap: number): number;
    static ScaleValueHandle(value: number, position: any, rotation: any, size: number, capFunc: UnityEditor.Handles.DrawCapFunction, snap: number): number;
    static Disc(rotation: any, position: any, axis: any, size: number, cutoffPlane: boolean, snap: number): any;
    static Button(position: any, direction: any, size: number, pickSize: number, capFunc: UnityEditor.Handles.DrawCapFunction): boolean;
    static SnapValue(val: number, snap: number): number;
    static CubeCap(controlID: number, position: any, rotation: any, size: number): any;
    static SphereCap(controlID: number, position: any, rotation: any, size: number): any;
    static ConeCap(controlID: number, position: any, rotation: any, size: number): any;
    static CylinderCap(controlID: number, position: any, rotation: any, size: number): any;
    static RectangleCap(controlID: number, position: any, rotation: any, size: number): any;
    static SelectionFrame(controlID: number, position: any, rotation: any, size: number): any;
    static DotCap(controlID: number, position: any, rotation: any, size: number): any;
    static CircleCap(controlID: number, position: any, rotation: any, size: number): any;
    static ArrowCap(controlID: number, position: any, rotation: any, size: number): any;
    static DrawCylinder(controlID: number, position: any, rotation: any, size: number): any;
    static DrawSphere(controlID: number, position: any, rotation: any, size: number): any;
    static DrawRectangle(controlID: number, position: any, rotation: any, size: number): any;
    static DrawCube(controlID: number, position: any, rotation: any, size: number): any;
    static DrawArrow(controlID: number, position: any, rotation: any, size: number): any;
    static DrawCone(controlID: number, position: any, rotation: any, size: number): any;
    static DrawAAPolyLine(points: any[]): any;
    static DrawAAPolyLine(width: number, points: any[]): any;
    static DrawAAPolyLine(lineTex: any, points: any[]): any;
    static DrawAAPolyLine(width: number, actualNumberOfPoints: number, points: any[]): any;
    static DrawAAPolyLine(lineTex: any, width: number, points: any[]): any;
    static DrawAAConvexPolygon(points: any[]): any;
    static DrawBezier(startPosition: any, endPosition: any, startTangent: any, endTangent: any, color: any, texture: any, width: number): any;
    static DrawWireDisc(center: any, normal: any, radius: number): any;
    static DrawWireArc(center: any, normal: any, from: any, angle: number, radius: number): any;
    static DrawSolidRectangleWithOutline(rectangle: any, faceColor: any, outlineColor: any): any;
    static DrawSolidRectangleWithOutline(verts: any[], faceColor: any, outlineColor: any): any;
    static DrawSolidDisc(center: any, normal: any, radius: number): any;
    static DrawSolidArc(center: any, normal: any, from: any, angle: number, radius: number): any;
    static Label(position: any, text: string): any;
    static Label(position: any, image: any): any;
    static Label(position: any, content: any): any;
    static Label(position: any, text: string, style: any): any;
    static Label(position: any, content: any, style: any): any;
    static GetMainGameViewSize(): any;
    static ClearCamera(position: any, camera: any): any;
    static DrawCamera(position: any, camera: any): any;
    static DrawCamera(position: any, camera: any, drawMode: UnityEditor.DrawCameraMode): any;
    static SetCamera(camera: any): any;
    static SetCamera(position: any, camera: any): any;
    static BeginGUI(): any;
    static BeginGUI(position: any): any;
    static EndGUI(): any;
    static MakeBezierPoints(startPosition: any, endPosition: any, startTangent: any, endTangent: any, division: number): any[];
    static DrawPolyLine(points: any[]): any;
    static DrawLine(p1: any, p2: any): any;
    static DrawLines(lineSegments: any[]): any;
    static DrawLines(points: any[], segmentIndices: number[]): any;
    static DrawDottedLine(p1: any, p2: any, screenSpaceSize: number): any;
    static DrawDottedLines(lineSegments: any[], screenSpaceSize: number): any;
    static DrawDottedLines(points: any[], segmentIndices: number[], screenSpaceSize: number): any;
    static DrawWireCube(center: any, size: any): any;
    static Slider(position: any, direction: any, size: number, capFunction: UnityEditor.Handles.CapFunction, snap: number): any;
    static FreeMoveHandle(position: any, rotation: any, size: number, snap: any, capFunction: UnityEditor.Handles.CapFunction): any;
    static ScaleValueHandle(value: number, position: any, rotation: any, size: number, capFunction: UnityEditor.Handles.CapFunction, snap: number): number;
    static Button(position: any, direction: any, size: number, pickSize: number, capFunction: UnityEditor.Handles.CapFunction): boolean;
    static CubeHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static SphereHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static ConeHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static CylinderHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static RectangleHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static DotHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static CircleHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static ArrowHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static DrawSelectionFrame(controlID: number, position: any, rotation: any, size: number, eventType: any): any;
    static DoPositionHandle(position: any, rotation: any): any;
    static DoRotationHandle(rotation: any, position: any): any;
    static DoScaleHandle(scale: any, position: any, rotation: any, size: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly xAxisColor: any;
    static readonly yAxisColor: any;
    static readonly zAxisColor: any;
    static readonly centerColor: any;
    static readonly selectedColor: any;
    static readonly secondaryColor: any;
    static lighting: boolean;
    static color: any;
    static matrix: any;
    static readonly inverseMatrix: any;
    currentCamera: any;
    // fields
  }
}
