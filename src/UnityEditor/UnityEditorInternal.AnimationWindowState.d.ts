declare namespace UnityEditorInternal {
  class AnimationWindowState extends UnityEngine.ScriptableObject {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    ForceRefresh(): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    OnSelectionChanged(): void;
    UndoRedoPerformed(): void;
    SaveKeySelection(undoLabel: string): void;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve, undoLabel: string): void;
    RemoveCurve(curve: UnityEditorInternal.AnimationWindowCurve, undoLabel: string): void;
    AnyKeyIsSelected(dopeline: UnityEditorInternal.DopeLine): boolean;
    KeyIsSelected(keyframe: UnityEditorInternal.AnimationWindowKeyframe): boolean;
    SelectKey(keyframe: UnityEditorInternal.AnimationWindowKeyframe): void;
    SelectKeysFromDopeline(dopeline: UnityEditorInternal.DopeLine): void;
    UnselectKey(keyframe: UnityEditorInternal.AnimationWindowKeyframe): void;
    UnselectKeysFromDopeline(dopeline: UnityEditorInternal.DopeLine): void;
    DeleteSelectedKeys(): void;
    DeleteKeys(keys: UnityEditorInternal.AnimationWindowKeyframe[]): void;
    StartLiveEdit(): void;
    EndLiveEdit(): void;
    InLiveEdit(): boolean;
    MoveSelectedKeys(deltaTime: number, snapToFrame: boolean): void;
    TransformSelectedKeys(matrix: any, flipX: boolean, flipY: boolean, snapToFrame: boolean): void;
    TransformRippleKeys(matrix: any, t1: number, t2: number, flipX: boolean, snapToFrame: boolean): void;
    CopyKeys(): void;
    CopyAllActiveCurves(): void;
    PasteKeys(): void;
    ClearSelections(): void;
    ClearKeySelections(): void;
    ClearHierarchySelection(): void;
    ResampleAnimation(): void;
    Repaint(): void;
    GetAggregateKeys(hierarchyNode: UnityEditorInternal.AnimationWindowHierarchyNode): UnityEditorInternal.AnimationWindowKeyframe[];
    OnHierarchySelectionChanged(selectedInstanceIDs: number[]): void;
    HandleHierarchySelectionChanged(selectedInstanceIDs: number[], triggerSceneSelectionSync: boolean): void;
    SelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine, additive: boolean): void;
    SelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine, additive: boolean, triggerSceneSelectionSync: boolean): void;
    SelectHierarchyItem(hierarchyNodeID: number, additive: boolean, triggerSceneSelectionSync: boolean): void;
    UnSelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine): void;
    UnSelectHierarchyItem(hierarchyNodeID: number): void;
    GetAffectedHierarchyIDs(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): number[];
    GetAffectedDopelines(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): UnityEditorInternal.DopeLine[];
    GetAffectedCurves(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): UnityEditorInternal.AnimationWindowCurve[];
    GetDopeline(selectedInstanceID: number): UnityEditorInternal.DopeLine;
    PixelToTime(pixel: number): number;
    PixelToTime(pixel: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    PixelToTime(pixelX: number, rect: any): number;
    TimeToPixel(time: number): number;
    TimeToPixel(time: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    TimeToPixel(time: number, rect: any): number;
    SnapToFrame(time: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    SnapToFrame(time: number, fps: number): number;
    FormatFrame(frame: number, frameDigits: number): string;
    TimeToFrame(time: number): number;
    FrameToTime(frame: number): number;
    TimeToFrameFloor(time: number): number;
    TimeToFrameRound(time: number): number;
    FrameToPixel(i: number, rect: any): number;
    FrameDeltaToPixel(rect: any): number;
    PixelDeltaToTime(rect: any): number;
    // properties
    readonly selection: UnityEditorInternal.AnimationWindowSelection;
    selectedItem: UnityEditorInternal.AnimationWindowSelectionItem;
    readonly activeAnimationClip: any;
    readonly activeGameObject: any;
    readonly activeRootGameObject: any;
    readonly activeAnimationPlayer: any;
    readonly animatorIsOptimized: boolean;
    locked: boolean;
    readonly disabled: boolean;
    refresh: UnityEditorInternal.AnimationWindowState.RefreshType;
    readonly allCurves: UnityEditorInternal.AnimationWindowCurve[];
    readonly activeCurves: UnityEditorInternal.AnimationWindowCurve[];
    readonly activeCurveWrappers: UnityEditor.CurveWrapper[];
    readonly dopelines: UnityEditorInternal.DopeLine[];
    readonly selectedHierarchyNodes: UnityEditorInternal.AnimationWindowHierarchyNode[];
    activeKeyframe: UnityEditorInternal.AnimationWindowKeyframe;
    readonly selectedKeys: UnityEditorInternal.AnimationWindowKeyframe[];
    readonly syncTimeDuringDrag: boolean;
    clipFrameRate: number;
    frameRate: number;
    frame: number;
    currentTime: number;
    readonly time: UnityEditorInternal.AnimationKeyTime;
    timeFormat: UnityEditor.TimeArea.TimeFormat;
    playing: boolean;
    readonly canRecord: boolean;
    recording: boolean;
    policy: UnityEditorInternal.AnimationWindowPolicy;
    timeArea: UnityEditor.TimeArea;
    readonly pixelPerSecond: number;
    readonly zeroTimePixel: number;
    readonly minVisibleTime: number;
    readonly maxVisibleTime: number;
    readonly visibleTimeSpan: number;
    readonly minVisibleFrame: number;
    readonly maxVisibleFrame: number;
    readonly visibleFrameSpan: number;
    readonly minTime: number;
    readonly maxTime: number;
    readonly timeRange: any;
    // fields
    hierarchyState: UnityEditorInternal.AnimationWindowHierarchyState;
    animEditor: UnityEditor.AnimEditor;
    showCurveEditor: boolean;
    onStartLiveEdit: (() => void);
    onEndLiveEdit: (() => void);
    hierarchyData: UnityEditorInternal.AnimationWindowHierarchyDataSource;
    static kDefaultFrameRate: number;
    static kEditCurveUndoLabel: string;
    onFrameRateChange: ((obj: number) => void);
  }
}
