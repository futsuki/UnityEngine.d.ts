declare namespace UnityEditor {
  class AssetServer {
    // constructors
    constructor();
    // methods
    static UpdateStartDownload(): boolean;
    static UpdateComplete(): boolean;
    static UpdateAbort(): boolean;
    static CommitBegin(changeDescription: string, candidates: string[]): boolean;
    static CommitStartUpload(): boolean;
    static UpdateGetDownloadProgress(): number;
    static CommitGetUploadProgress(): number;
    static GetProgressText(): string;
    static CommitComplete(): boolean;
    static CommitAbort(): boolean;
    static SetAssetServerError(error: string, isConnectionError: boolean): any;
    static GetAssetServerError(): string;
    static ClearAssetServerError(): any;
    static HasConnectionError(): boolean;
    static RevertVersion(assetGUID: string, version: number): boolean;
    static RecoverDeleted(assetGUID: string, version: number, name: string, parentGUID: string): boolean;
    static CompareFiles(guids: string[], selection: UnityEditor.CompareInfo[]): boolean;
    static GetAllRootGUIDs(): string[];
    static GetRootGUID(): string;
    static CollectAllChildren(guid: string, collection: string[]): string[];
    static GetAssetPathName(guid: string): string;
    static RemoveMaintErrorsFromConsole(): any;
    static GetDownloadResolution(guid: string): UnityEditor.DownloadResolution;
    static GetPathNameConflict(guid: string): string;
    static HasDeletionConflict(guid: string): boolean;
    static GetNameConflictResolution(guid: string): UnityEditor.NameConflictResolution;
    static SetDownloadResolution(guid: string, res: UnityEditor.DownloadResolution): any;
    static SetDownloadResolutionInt(guid: string, res: number): any;
    static SetNameConflictResolution(guid: string, res: UnityEditor.NameConflictResolution): any;
    static UnityGUID(a: number, b: number, c: number, d: number): string;
    static BuildExportPackageAssetListAssetsItems(guids: string[], dependencies: boolean): UnityEditor.AssetsItem[];
    static GetChangedAssetsItems(): UnityEditor.AssetsItem[];
    static GetLocalDeletedItems(): UnityEditor.AssetsItem[];
    static IsItemDeleted(guid: string): boolean;
    static GetDeletedItemPathAndName(guid: string): string;
    static GetHistorySelected(guids: string[]): UnityEditor.Changeset[];
    static GetHistory(downToRevision: number): UnityEditor.Changeset[];
    static GetHistory(): UnityEditor.Changeset[];
    static GetNewItems(): UnityEditor.Changeset[];
    static SetProjectName(name: string): any;
    static Initialize(userName: string, connectionString: string, timeout: number): any;
    static CollectSelection(): string[];
    static CollectDeepSelection(): string[];
    static AssetIsDir(guid: string): boolean;
    static DoUpdateOnNextTick(forceShowConflictResolutions: boolean, backendFunctionForConflictResolutions: string): any;
    static DoCommitOnNextTick(description: string, guids: string[]): any;
    static DoUpdateStatusOnNextTick(): any;
    static DoRefreshAssetsOnNextTick(): any;
    static DoRefreshAssetsAndUpdateStatusOnNextTick(): any;
    static GetDatabaseName(server: string, user: string, password: string, port: string, projectName: string): string;
    static GetParentGUID(itemGUID: string, changeset: number): string;
    static GetServerDeletedItems(): UnityEditor.DeletedAsset[];
    static DoRecoverOnNextTick(assets: UnityEditor.DeletedAsset[]): any;
    static DoRevertOnNextTick(changeset: number, guid: string): any;
    static SetStickyChangeset(changeset: number): any;
    static AdminSetCredentials(server: string, port: number, user: string, password: string): any;
    static AdminRefreshDatabases(): UnityEditor.MaintDatabaseRecord[];
    static AdminGetUsers(databaseName: string): UnityEditor.MaintUserRecord[];
    static AdminChangePassword(userName: string, newPassword: string): any;
    static AdminCreateDB(newProjectName: string, copyFromProjectName: string): number;
    static AdminCreateDB(newProjectName: string): number;
    static AdminDeleteDB(projectName: string): number;
    static AdminCreateUser(userName: string, userFullName: string, userEmail: string, userPassword: string): number;
    static AdminDeleteUser(userName: string): number;
    static AdminSetUserEnabled(databaseName: string, userName: string, fullName: string, email: string, enabled: number): boolean;
    static AdminModifyUserInfo(databaseName: string, userName: string, fullName: string, email: string): boolean;
    static IsGUIDValid(guid: string): number;
    static GetServerItemChangeset(guid: string, changeset: number): number;
    static GetWorkingItemChangeset(guid: string): number;
    static AssetIsBinaryByGUID(guid: string): boolean;
    static IsAssetBinary(name: string): number;
    static CollectAllDependencies(selection: string[]): string[];
    static GetLastCommitMessage(): string;
    static SetLastCommitMessage(message: string): any;
    static GetCommitSelectionGUIDs(): string[];
    static SetCommitSelectionGUIDs(guids: string[]): any;
    static ClearCommitPersistentData(): any;
    static IsControllerBusy(): number;
    static GetLastControllerActionResult(): number;
    static SetAfterActionFinishedCallback(className: string, functionName: string): any;
    static SetSelectionFromGUID(guid: string): any;
    static IsAssetAvailable(guid: string): number;
    static SetSelectionFromGUIDs(guids: string[]): any;
    static GetRefreshUpdate(): boolean;
    static GetRefreshCommit(): boolean;
    static ClearRefreshUpdate(): any;
    static ClearRefreshCommit(): any;
    static CheckForServerUpdates(): any;
    static GetCachesInitialized(): number;
    static IsConstantGUID(guid: string): number;
    static Clear(): any;
    static SaveString(strName: string, strValue: string): any;
    static GetAndRemoveString(strName: string): string;
    static GetString(strName: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
