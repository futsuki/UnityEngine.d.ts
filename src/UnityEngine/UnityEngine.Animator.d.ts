declare namespace UnityEngine {
  class Animator extends UnityEngine.Experimental.Director.DirectorPlayer {
    // constructors
    constructor();
    // methods
    GetFloat(name: string): number;
    GetFloat(id: number): number;
    SetFloat(name: string, value: number): void;
    SetFloat(name: string, value: number, dampTime: number, deltaTime: number): void;
    SetFloat(id: number, value: number): void;
    SetFloat(id: number, value: number, dampTime: number, deltaTime: number): void;
    GetBool(name: string): boolean;
    GetBool(id: number): boolean;
    SetBool(name: string, value: boolean): void;
    SetBool(id: number, value: boolean): void;
    GetInteger(name: string): number;
    GetInteger(id: number): number;
    SetInteger(name: string, value: number): void;
    SetInteger(id: number, value: number): void;
    SetTrigger(name: string): void;
    SetTrigger(id: number): void;
    ResetTrigger(name: string): void;
    ResetTrigger(id: number): void;
    IsParameterControlledByCurve(name: string): boolean;
    IsParameterControlledByCurve(id: number): boolean;
    GetIKPosition(goal: UnityEngine.AvatarIKGoal): UnityEngine.Vector3;
    SetIKPosition(goal: UnityEngine.AvatarIKGoal, goalPosition: UnityEngine.Vector3): void;
    GetIKRotation(goal: UnityEngine.AvatarIKGoal): UnityEngine.Quaternion;
    SetIKRotation(goal: UnityEngine.AvatarIKGoal, goalRotation: UnityEngine.Quaternion): void;
    GetIKPositionWeight(goal: UnityEngine.AvatarIKGoal): number;
    SetIKPositionWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
    GetIKRotationWeight(goal: UnityEngine.AvatarIKGoal): number;
    SetIKRotationWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
    GetIKHintPosition(hint: UnityEngine.AvatarIKHint): UnityEngine.Vector3;
    SetIKHintPosition(hint: UnityEngine.AvatarIKHint, hintPosition: UnityEngine.Vector3): void;
    GetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint): number;
    SetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint, value: number): void;
    SetLookAtPosition(lookAtPosition: UnityEngine.Vector3): void;
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number): void;
    SetLookAtWeight(weight: number): void;
    SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number, clampWeight: number): void;
    SetBoneLocalRotation(humanBoneId: UnityEngine.HumanBodyBones, rotation: UnityEngine.Quaternion): void;
    GetLayerName(layerIndex: number): string;
    GetLayerIndex(layerName: string): number;
    GetLayerWeight(layerIndex: number): number;
    SetLayerWeight(layerIndex: number, weight: number): void;
    GetCurrentAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetNextAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
    GetAnimatorTransitionInfo(layerIndex: number): UnityEngine.AnimatorTransitionInfo;
    GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
    GetCurrentAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetCurrentAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    GetNextAnimatorClipInfoCount(layerIndex: number): number;
    GetNextAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
    GetNextAnimatorClipInfo(layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]): void;
    IsInTransition(layerIndex: number): boolean;
    GetParameter(index: number): UnityEngine.AnimatorControllerParameter;
    MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number): void;
    MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number): void;
    InterruptMatchTarget(completeMatch: boolean): void;
    InterruptMatchTarget(): void;
    ForceStateNormalizedTime(normalizedTime: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number): void;
    CrossFadeInFixedTime(stateName: string, transitionDuration: number, layer: number, fixedTime: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number, fixedTime: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFadeInFixedTime(stateNameHash: number, transitionDuration: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number): void;
    CrossFade(stateName: string, transitionDuration: number): void;
    CrossFade(stateName: string, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number, normalizedTime: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number, layer: number): void;
    CrossFade(stateNameHash: number, transitionDuration: number): void;
    PlayInFixedTime(stateName: string, layer: number): void;
    PlayInFixedTime(stateName: string): void;
    PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
    PlayInFixedTime(stateNameHash: number, layer: number): void;
    PlayInFixedTime(stateNameHash: number): void;
    Play(stateName: string, layer: number): void;
    Play(stateName: string): void;
    Play(stateName: string, layer: number, normalizedTime: number): void;
    Play(stateNameHash: number, layer: number, normalizedTime: number): void;
    Play(stateNameHash: number, layer: number): void;
    Play(stateNameHash: number): void;
    Play(pStruct: UnityEngine.Experimental.Director.Playable): void;
    SetTarget(targetIndex: UnityEngine.AvatarTarget, targetNormalizedTime: number): void;
    IsControlled(transform: UnityEngine.Transform): boolean;
    GetBoneTransform(humanBoneId: UnityEngine.HumanBodyBones): UnityEngine.Transform;
    StartPlayback(): void;
    StopPlayback(): void;
    StartRecording(frameCount: number): void;
    StopRecording(): void;
    HasState(layerIndex: number, stateID: number): boolean;
    static StringToHash(name: string): number;
    Update(deltaTime: number): void;
    Rebind(): void;
    ApplyBuiltinRootMotion(): void;
    GetVector(name: string): UnityEngine.Vector3;
    GetVector(id: number): UnityEngine.Vector3;
    SetVector(name: string, value: UnityEngine.Vector3): void;
    SetVector(id: number, value: UnityEngine.Vector3): void;
    GetQuaternion(name: string): UnityEngine.Quaternion;
    GetQuaternion(id: number): UnityEngine.Quaternion;
    SetQuaternion(name: string, value: UnityEngine.Quaternion): void;
    SetQuaternion(id: number, value: UnityEngine.Quaternion): void;
    GetCurrentAnimationClipState(layerIndex: number): UnityEngine.AnimationInfo[];
    GetNextAnimationClipState(layerIndex: number): UnityEngine.AnimationInfo[];
    // properties
    readonly isOptimizable: boolean;
    readonly isHuman: boolean;
    readonly hasRootMotion: boolean;
    readonly humanScale: number;
    readonly isInitialized: boolean;
    readonly deltaPosition: UnityEngine.Vector3;
    readonly deltaRotation: UnityEngine.Quaternion;
    readonly velocity: UnityEngine.Vector3;
    readonly angularVelocity: UnityEngine.Vector3;
    rootPosition: UnityEngine.Vector3;
    rootRotation: UnityEngine.Quaternion;
    applyRootMotion: boolean;
    linearVelocityBlending: boolean;
    animatePhysics: boolean;
    updateMode: UnityEngine.AnimatorUpdateMode;
    readonly hasTransformHierarchy: boolean;
    readonly gravityWeight: number;
    bodyPosition: UnityEngine.Vector3;
    bodyRotation: UnityEngine.Quaternion;
    stabilizeFeet: boolean;
    readonly layerCount: number;
    readonly parameters: UnityEngine.AnimatorControllerParameter[];
    readonly parameterCount: number;
    feetPivotActive: number;
    readonly pivotWeight: number;
    readonly pivotPosition: UnityEngine.Vector3;
    readonly isMatchingTarget: boolean;
    speed: number;
    readonly targetPosition: UnityEngine.Vector3;
    readonly targetRotation: UnityEngine.Quaternion;
    cullingMode: UnityEngine.AnimatorCullingMode;
    playbackTime: number;
    recorderStartTime: number;
    recorderStopTime: number;
    readonly recorderMode: UnityEngine.AnimatorRecorderMode;
    runtimeAnimatorController: UnityEngine.RuntimeAnimatorController;
    avatar: UnityEngine.Avatar;
    layersAffectMassCenter: boolean;
    readonly leftFeetBottomHeight: number;
    readonly rightFeetBottomHeight: number;
    logWarnings: boolean;
    fireEvents: boolean;
    // fields
  }
}
