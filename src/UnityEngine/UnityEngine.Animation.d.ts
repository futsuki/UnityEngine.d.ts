declare namespace UnityEngine {
  class Animation {
    // constructors
    constructor();
    // methods
    Stop(): void;
    Stop(name: string): void;
    Rewind(name: string): void;
    Rewind(): void;
    Sample(): void;
    IsPlaying(name: string): boolean;
    Play(): boolean;
    Play(mode: UnityEngine.PlayMode): boolean;
    Play(animation: string, mode: UnityEngine.PlayMode): boolean;
    Play(animation: string): boolean;
    CrossFade(animation: string, fadeLength: number, mode: UnityEngine.PlayMode): void;
    CrossFade(animation: string, fadeLength: number): void;
    CrossFade(animation: string): void;
    Blend(animation: string, targetWeight: number, fadeLength: number): void;
    Blend(animation: string, targetWeight: number): void;
    Blend(animation: string): void;
    CrossFadeQueued(animation: string, fadeLength: number, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode): UnityEngine.AnimationState;
    CrossFadeQueued(animation: string, fadeLength: number, queue: UnityEngine.QueueMode): UnityEngine.AnimationState;
    CrossFadeQueued(animation: string, fadeLength: number): UnityEngine.AnimationState;
    CrossFadeQueued(animation: string): UnityEngine.AnimationState;
    PlayQueued(animation: string, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode): UnityEngine.AnimationState;
    PlayQueued(animation: string, queue: UnityEngine.QueueMode): UnityEngine.AnimationState;
    PlayQueued(animation: string): UnityEngine.AnimationState;
    AddClip(clip: UnityEngine.AnimationClip, newName: string): void;
    AddClip(clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number, addLoopFrame: boolean): void;
    AddClip(clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number): void;
    RemoveClip(clip: UnityEngine.AnimationClip): void;
    RemoveClip(clipName: string): void;
    GetClipCount(): number;
    Play(mode: UnityEngine.AnimationPlayMode): boolean;
    Play(animation: string, mode: UnityEngine.AnimationPlayMode): boolean;
    SyncLayer(layer: number): void;
    GetEnumerator(): any;
    GetClip(name: string): UnityEngine.AnimationClip;
    GetComponent(type: any): UnityEngine.Component;
    GetComponent(type: string): UnityEngine.Component;
    GetComponentInChildren(t: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInChildren(t: any): UnityEngine.Component;
    GetComponentsInChildren(t: any): UnityEngine.Component[];
    GetComponentsInChildren(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentInParent(t: any): UnityEngine.Component;
    GetComponentsInParent(t: any): UnityEngine.Component[];
    GetComponentsInParent(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: any): void;
    CompareTag(tag: string): boolean;
    SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessageUpwards(methodName: string, value: any): void;
    SendMessageUpwards(methodName: string): void;
    SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
    SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessage(methodName: string, value: any): void;
    SendMessage(methodName: string): void;
    SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
    BroadcastMessage(methodName: string, parameter: any): void;
    BroadcastMessage(methodName: string): void;
    BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    clip: UnityEngine.AnimationClip;
    playAutomatically: boolean;
    wrapMode: UnityEngine.WrapMode;
    readonly isPlaying: boolean;
    get_Item(name: string): UnityEngine.AnimationState;
    animatePhysics: boolean;
    animateOnlyIfVisible: boolean;
    cullingType: UnityEngine.AnimationCullingType;
    localBounds: UnityEngine.Bounds;
    enabled: boolean;
    readonly isActiveAndEnabled: boolean;
    readonly transform: UnityEngine.Transform;
    readonly gameObject: UnityEngine.GameObject;
    tag: string;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly light: UnityEngine.Component;
    readonly animation: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly guiElement: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    // fields
  }
}
