declare namespace UnityEngine {
  class Terrain {
    // constructors
    constructor();
    // methods
    GetClosestReflectionProbes(result: any): void;
    SampleHeight(worldPosition: UnityEngine.Vector3): number;
    ApplyDelayedHeightmapModification(): void;
    AddTreeInstance(instance: UnityEngine.TreeInstance): void;
    SetNeighbors(left: UnityEngine.Terrain, top: UnityEngine.Terrain, right: UnityEngine.Terrain, bottom: UnityEngine.Terrain): void;
    GetPosition(): UnityEngine.Vector3;
    Flush(): void;
    SetSplatMaterialPropertyBlock(properties: UnityEngine.MaterialPropertyBlock): void;
    GetSplatMaterialPropertyBlock(dest: UnityEngine.MaterialPropertyBlock): void;
    static CreateTerrainGameObject(assignTerrain: UnityEngine.TerrainData): UnityEngine.GameObject;
    GetComponent(type: any): UnityEngine.Component;
    GetComponent(type: string): UnityEngine.Component;
    GetComponentInChildren(t: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInChildren(t: any): UnityEngine.Component;
    GetComponentsInChildren(t: any): UnityEngine.Component[];
    GetComponentsInChildren(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentInParent(t: any): UnityEngine.Component;
    GetComponentsInParent(t: any): UnityEngine.Component[];
    GetComponentsInParent(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: any): void;
    CompareTag(tag: string): boolean;
    SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessageUpwards(methodName: string, value: any): void;
    SendMessageUpwards(methodName: string): void;
    SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
    SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
    SendMessage(methodName: string, value: any): void;
    SendMessage(methodName: string): void;
    SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
    BroadcastMessage(methodName: string, parameter: any): void;
    BroadcastMessage(methodName: string): void;
    BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    terrainData: UnityEngine.TerrainData;
    treeDistance: number;
    treeBillboardDistance: number;
    treeCrossFadeLength: number;
    treeMaximumFullLODCount: number;
    detailObjectDistance: number;
    detailObjectDensity: number;
    heightmapPixelError: number;
    heightmapMaximumLOD: number;
    basemapDistance: number;
    splatmapDistance: number;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    castShadows: boolean;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    materialType: UnityEngine.Terrain.MaterialType;
    materialTemplate: UnityEngine.Material;
    legacySpecular: UnityEngine.Color;
    legacyShininess: number;
    drawHeightmap: boolean;
    drawTreesAndFoliage: boolean;
    treeLODBiasMultiplier: number;
    collectDetailPatches: boolean;
    editorRenderFlags: UnityEngine.TerrainRenderFlags;
    bakeLightProbesForTrees: boolean;
    static readonly activeTerrain: UnityEngine.Terrain;
    static readonly activeTerrains: UnityEngine.Terrain[];
    enabled: boolean;
    readonly isActiveAndEnabled: boolean;
    readonly transform: UnityEngine.Transform;
    readonly gameObject: UnityEngine.GameObject;
    tag: string;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly light: UnityEngine.Component;
    readonly animation: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly guiElement: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    // fields
  }
}
