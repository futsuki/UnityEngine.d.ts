declare namespace UnityEngine {
  class Material {
    // constructors
    constructor(contents: string);
    constructor(shader: UnityEngine.Shader);
    constructor(source: UnityEngine.Material);
    // methods
    SetColor(propertyName: string, color: UnityEngine.Color): any;
    SetColor(nameID: number, color: UnityEngine.Color): any;
    GetColor(propertyName: string): UnityEngine.Color;
    GetColor(nameID: number): UnityEngine.Color;
    SetVector(propertyName: string, vector: UnityEngine.Vector4): any;
    SetVector(nameID: number, vector: UnityEngine.Vector4): any;
    GetVector(propertyName: string): UnityEngine.Vector4;
    GetVector(nameID: number): UnityEngine.Vector4;
    SetTexture(propertyName: string, texture: UnityEngine.Texture): any;
    SetTexture(nameID: number, texture: UnityEngine.Texture): any;
    GetTexture(propertyName: string): UnityEngine.Texture;
    GetTexture(nameID: number): UnityEngine.Texture;
    SetTextureOffset(propertyName: string, offset: UnityEngine.Vector2): any;
    GetTextureOffset(propertyName: string): UnityEngine.Vector2;
    SetTextureScale(propertyName: string, scale: UnityEngine.Vector2): any;
    GetTextureScale(propertyName: string): UnityEngine.Vector2;
    SetMatrix(propertyName: string, matrix: UnityEngine.Matrix4x4): any;
    SetMatrix(nameID: number, matrix: UnityEngine.Matrix4x4): any;
    GetMatrix(propertyName: string): UnityEngine.Matrix4x4;
    GetMatrix(nameID: number): UnityEngine.Matrix4x4;
    SetFloat(propertyName: string, value: number): any;
    SetFloat(nameID: number, value: number): any;
    GetFloat(propertyName: string): number;
    GetFloat(nameID: number): number;
    SetFloatArray(name: string, values: any): any;
    SetFloatArray(nameID: number, values: any): any;
    SetFloatArray(name: string, values: number[]): any;
    SetFloatArray(nameID: number, values: number[]): any;
    SetVectorArray(name: string, values: any): any;
    SetVectorArray(nameID: number, values: any): any;
    SetVectorArray(name: string, values: UnityEngine.Vector4[]): any;
    SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): any;
    SetColorArray(name: string, values: any): any;
    SetColorArray(nameID: number, values: any): any;
    SetColorArray(name: string, values: UnityEngine.Color[]): any;
    SetColorArray(nameID: number, values: UnityEngine.Color[]): any;
    SetMatrixArray(name: string, values: any): any;
    SetMatrixArray(nameID: number, values: any): any;
    SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): any;
    SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): any;
    GetFloatArray(name: string, values: any): any;
    GetFloatArray(nameID: number, values: any): any;
    GetFloatArray(name: string): number[];
    GetFloatArray(nameID: number): number[];
    GetVectorArray(name: string, values: any): any;
    GetVectorArray(nameID: number, values: any): any;
    GetVectorArray(name: string): UnityEngine.Vector4[];
    GetVectorArray(nameID: number): UnityEngine.Vector4[];
    GetColorArray(name: string, values: any): any;
    GetColorArray(nameID: number, values: any): any;
    GetColorArray(name: string): UnityEngine.Color[];
    GetColorArray(nameID: number): UnityEngine.Color[];
    GetMatrixArray(name: string, values: any): any;
    GetMatrixArray(nameID: number, values: any): any;
    GetMatrixArray(name: string): UnityEngine.Matrix4x4[];
    GetMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
    SetInt(propertyName: string, value: number): any;
    SetInt(nameID: number, value: number): any;
    GetInt(propertyName: string): number;
    GetInt(nameID: number): number;
    SetBuffer(propertyName: string, buffer: UnityEngine.ComputeBuffer): any;
    HasProperty(propertyName: string): boolean;
    HasProperty(nameID: number): boolean;
    GetTag(tag: string, searchFallbacks: boolean, defaultValue: string): string;
    GetTag(tag: string, searchFallbacks: boolean): string;
    SetOverrideTag(tag: string, val: string): any;
    Lerp(start: UnityEngine.Material, end: UnityEngine.Material, t: number): any;
    SetPass(pass: number): boolean;
    GetPassName(pass: number): string;
    FindPass(passName: string): number;
    static Create(scriptContents: string): UnityEngine.Material;
    CopyPropertiesFromMaterial(mat: UnityEngine.Material): any;
    EnableKeyword(keyword: string): any;
    DisableKeyword(keyword: string): any;
    IsKeywordEnabled(keyword: string): boolean;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    shader: UnityEngine.Shader;
    color: UnityEngine.Color;
    mainTexture: UnityEngine.Texture;
    mainTextureOffset: UnityEngine.Vector2;
    mainTextureScale: UnityEngine.Vector2;
    readonly passCount: number;
    renderQueue: number;
    shaderKeywords: string[];
    globalIlluminationFlags: UnityEngine.MaterialGlobalIlluminationFlags;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    // fields
  }
}
