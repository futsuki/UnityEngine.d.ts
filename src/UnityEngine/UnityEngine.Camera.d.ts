declare namespace UnityEngine {
  class Camera {
    // constructors
    constructor();
    // methods
    SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer): any;
    SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer): any;
    ResetWorldToCameraMatrix(): any;
    ResetProjectionMatrix(): any;
    ResetAspect(): any;
    ResetFieldOfView(): any;
    GetStereoViewMatrices(): UnityEngine.Matrix4x4[];
    GetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
    SetStereoViewMatrices(leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4): any;
    SetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): any;
    ResetStereoViewMatrices(): any;
    GetStereoProjectionMatrices(): UnityEngine.Matrix4x4[];
    GetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
    SetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): any;
    SetStereoProjectionMatrices(leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4): any;
    CalculateFrustumCorners(viewport: UnityEngine.Rect, z: number, eye: UnityEngine.Camera.MonoOrStereoscopicEye, outCorners: UnityEngine.Vector3[]): any;
    ResetStereoProjectionMatrices(): any;
    WorldToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    WorldToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ViewportToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ScreenToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ScreenToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ViewportToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
    ViewportPointToRay(position: UnityEngine.Vector3): UnityEngine.Ray;
    ScreenPointToRay(position: UnityEngine.Vector3): UnityEngine.Ray;
    static GetAllCameras(cameras: UnityEngine.Camera[]): number;
    Render(): any;
    RenderWithShader(shader: UnityEngine.Shader, replacementTag: string): any;
    SetReplacementShader(shader: UnityEngine.Shader, replacementTag: string): any;
    ResetReplacementShader(): any;
    ResetCullingMatrix(): any;
    RenderDontRestore(): any;
    static SetupCurrent(cur: UnityEngine.Camera): any;
    RenderToCubemap(cubemap: UnityEngine.Cubemap): boolean;
    RenderToCubemap(cubemap: UnityEngine.Cubemap, faceMask: number): boolean;
    RenderToCubemap(cubemap: UnityEngine.RenderTexture): boolean;
    RenderToCubemap(cubemap: UnityEngine.RenderTexture, faceMask: number): boolean;
    CopyFrom(other: UnityEngine.Camera): any;
    AddCommandBuffer(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer): any;
    RemoveCommandBuffer(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer): any;
    RemoveCommandBuffers(evt: UnityEngine.Rendering.CameraEvent): any;
    RemoveAllCommandBuffers(): any;
    GetCommandBuffers(evt: UnityEngine.Rendering.CameraEvent): UnityEngine.Rendering.CommandBuffer[];
    CalculateObliqueMatrix(clipPlane: UnityEngine.Vector4): UnityEngine.Matrix4x4;
    GetScreenWidth(): number;
    GetScreenHeight(): number;
    DoClear(): any;
    GetComponent(type: any): UnityEngine.Component;
    GetComponent(type: string): UnityEngine.Component;
    GetComponentInChildren(t: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInChildren(t: any): UnityEngine.Component;
    GetComponentsInChildren(t: any): UnityEngine.Component[];
    GetComponentsInChildren(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentInParent(t: any): UnityEngine.Component;
    GetComponentsInParent(t: any): UnityEngine.Component[];
    GetComponentsInParent(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: any): any;
    CompareTag(tag: string): boolean;
    SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): any;
    SendMessageUpwards(methodName: string, value: any): any;
    SendMessageUpwards(methodName: string): any;
    SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): any;
    SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): any;
    SendMessage(methodName: string, value: any): any;
    SendMessage(methodName: string): any;
    SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): any;
    BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): any;
    BroadcastMessage(methodName: string, parameter: any): any;
    BroadcastMessage(methodName: string): any;
    BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): any;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    fov: number;
    near: number;
    far: number;
    fieldOfView: number;
    nearClipPlane: number;
    farClipPlane: number;
    renderingPath: UnityEngine.RenderingPath;
    readonly actualRenderingPath: UnityEngine.RenderingPath;
    hdr: boolean;
    orthographicSize: number;
    orthographic: boolean;
    opaqueSortMode: UnityEngine.Rendering.OpaqueSortMode;
    transparencySortMode: UnityEngine.TransparencySortMode;
    depth: number;
    aspect: number;
    cullingMask: number;
    eventMask: number;
    backgroundColor: UnityEngine.Color;
    rect: UnityEngine.Rect;
    pixelRect: UnityEngine.Rect;
    targetTexture: UnityEngine.RenderTexture;
    readonly pixelWidth: number;
    readonly pixelHeight: number;
    readonly cameraToWorldMatrix: UnityEngine.Matrix4x4;
    worldToCameraMatrix: UnityEngine.Matrix4x4;
    projectionMatrix: UnityEngine.Matrix4x4;
    nonJitteredProjectionMatrix: UnityEngine.Matrix4x4;
    useJitteredProjectionMatrixForTransparentRendering: boolean;
    readonly velocity: UnityEngine.Vector3;
    clearFlags: UnityEngine.CameraClearFlags;
    readonly stereoEnabled: boolean;
    stereoSeparation: number;
    stereoConvergence: number;
    cameraType: UnityEngine.CameraType;
    stereoMirrorMode: boolean;
    stereoTargetEye: UnityEngine.StereoTargetEyeMask;
    readonly stereoActiveEye: UnityEngine.Camera.MonoOrStereoscopicEye;
    targetDisplay: number;
    static readonly main: UnityEngine.Camera;
    static readonly current: UnityEngine.Camera;
    static readonly allCameras: UnityEngine.Camera[];
    static readonly allCamerasCount: number;
    useOcclusionCulling: boolean;
    cullingMatrix: UnityEngine.Matrix4x4;
    layerCullDistances: number[];
    layerCullSpherical: boolean;
    depthTextureMode: UnityEngine.DepthTextureMode;
    clearStencilAfterLightingPass: boolean;
    readonly commandBufferCount: number;
    isOrthoGraphic: boolean;
    static readonly mainCamera: UnityEngine.Camera;
    enabled: boolean;
    readonly isActiveAndEnabled: boolean;
    readonly transform: UnityEngine.Transform;
    readonly gameObject: UnityEngine.GameObject;
    tag: string;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly light: UnityEngine.Component;
    readonly animation: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly guiElement: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    // fields
    static onPreCull: UnityEngine.Camera.CameraCallback;
    static onPreRender: UnityEngine.Camera.CameraCallback;
    static onPostRender: UnityEngine.Camera.CameraCallback;
  }
}
