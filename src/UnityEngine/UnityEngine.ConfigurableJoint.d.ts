declare namespace UnityEngine {
  class ConfigurableJoint {
    // constructors
    constructor();
    // methods
    GetComponent(type: any): UnityEngine.Component;
    GetComponent(type: string): UnityEngine.Component;
    GetComponentInChildren(t: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInChildren(t: any): UnityEngine.Component;
    GetComponentsInChildren(t: any): UnityEngine.Component[];
    GetComponentsInChildren(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentInParent(t: any): UnityEngine.Component;
    GetComponentsInParent(t: any): UnityEngine.Component[];
    GetComponentsInParent(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: any): any;
    CompareTag(tag: string): boolean;
    SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): any;
    SendMessageUpwards(methodName: string, value: any): any;
    SendMessageUpwards(methodName: string): any;
    SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): any;
    SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): any;
    SendMessage(methodName: string, value: any): any;
    SendMessage(methodName: string): any;
    SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): any;
    BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): any;
    BroadcastMessage(methodName: string, parameter: any): any;
    BroadcastMessage(methodName: string): any;
    BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): any;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    secondaryAxis: UnityEngine.Vector3;
    xMotion: UnityEngine.ConfigurableJointMotion;
    yMotion: UnityEngine.ConfigurableJointMotion;
    zMotion: UnityEngine.ConfigurableJointMotion;
    angularXMotion: UnityEngine.ConfigurableJointMotion;
    angularYMotion: UnityEngine.ConfigurableJointMotion;
    angularZMotion: UnityEngine.ConfigurableJointMotion;
    linearLimitSpring: UnityEngine.SoftJointLimitSpring;
    angularXLimitSpring: UnityEngine.SoftJointLimitSpring;
    angularYZLimitSpring: UnityEngine.SoftJointLimitSpring;
    linearLimit: UnityEngine.SoftJointLimit;
    lowAngularXLimit: UnityEngine.SoftJointLimit;
    highAngularXLimit: UnityEngine.SoftJointLimit;
    angularYLimit: UnityEngine.SoftJointLimit;
    angularZLimit: UnityEngine.SoftJointLimit;
    targetPosition: UnityEngine.Vector3;
    targetVelocity: UnityEngine.Vector3;
    xDrive: UnityEngine.JointDrive;
    yDrive: UnityEngine.JointDrive;
    zDrive: UnityEngine.JointDrive;
    targetRotation: UnityEngine.Quaternion;
    targetAngularVelocity: UnityEngine.Vector3;
    rotationDriveMode: UnityEngine.RotationDriveMode;
    angularXDrive: UnityEngine.JointDrive;
    angularYZDrive: UnityEngine.JointDrive;
    slerpDrive: UnityEngine.JointDrive;
    projectionMode: UnityEngine.JointProjectionMode;
    projectionDistance: number;
    projectionAngle: number;
    configuredInWorldSpace: boolean;
    swapBodies: boolean;
    connectedBody: UnityEngine.Rigidbody;
    axis: UnityEngine.Vector3;
    anchor: UnityEngine.Vector3;
    connectedAnchor: UnityEngine.Vector3;
    autoConfigureConnectedAnchor: boolean;
    breakForce: number;
    breakTorque: number;
    enableCollision: boolean;
    enablePreprocessing: boolean;
    readonly currentForce: UnityEngine.Vector3;
    readonly currentTorque: UnityEngine.Vector3;
    readonly transform: UnityEngine.Transform;
    readonly gameObject: UnityEngine.GameObject;
    tag: string;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly light: UnityEngine.Component;
    readonly animation: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly guiElement: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    // fields
  }
}
