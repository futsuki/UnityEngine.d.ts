declare namespace UnityEngine {
  class Physics2D {
    // constructors
    constructor();
    // methods
    static IgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, ignore: boolean): any;
    static IgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): any;
    static GetIgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): boolean;
    static IgnoreLayerCollision(layer1: number, layer2: number, ignore: boolean): any;
    static IgnoreLayerCollision(layer1: number, layer2: number): any;
    static GetIgnoreLayerCollision(layer1: number, layer2: number): boolean;
    static SetLayerCollisionMask(layer: number, layerMask: number): any;
    static GetLayerCollisionMask(layer: number): number;
    static IsTouching(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): boolean;
    static IsTouchingLayers(collider: UnityEngine.Collider2D, layerMask: number): boolean;
    static IsTouchingLayers(collider: UnityEngine.Collider2D): boolean;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number): UnityEngine.RaycastHit2D;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number): UnityEngine.RaycastHit2D[];
    static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number, minDepth: number): number;
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number): number;
    static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
    static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
    static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
    static GetRayIntersection(ray: UnityEngine.Ray, distance: number): UnityEngine.RaycastHit2D;
    static GetRayIntersection(ray: UnityEngine.Ray): UnityEngine.RaycastHit2D;
    static GetRayIntersection(ray: UnityEngine.Ray, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
    static GetRayIntersectionAll(ray: UnityEngine.Ray, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
    static GetRayIntersectionAll(ray: UnityEngine.Ray, distance: number): UnityEngine.RaycastHit2D[];
    static GetRayIntersectionAll(ray: UnityEngine.Ray): UnityEngine.RaycastHit2D[];
    static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
    static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], distance: number): number;
    static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[]): number;
    static OverlapPoint(point: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapPoint(point: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapPoint(point: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D;
    static OverlapPoint(point: UnityEngine.Vector2): UnityEngine.Collider2D;
    static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D[];
    static OverlapPointAll(point: UnityEngine.Vector2): UnityEngine.Collider2D[];
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[]): number;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number): UnityEngine.Collider2D;
    static OverlapCircle(point: UnityEngine.Vector2, radius: number): UnityEngine.Collider2D;
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number): UnityEngine.Collider2D[];
    static OverlapCircleAll(point: UnityEngine.Vector2, radius: number): UnityEngine.Collider2D[];
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[]): number;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number): UnityEngine.Collider2D;
    static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number): UnityEngine.Collider2D;
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number): UnityEngine.Collider2D[];
    static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number): UnityEngine.Collider2D[];
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[]): number;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D;
    static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2): UnityEngine.Collider2D;
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D[];
    static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2): UnityEngine.Collider2D[];
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[]): number;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number): UnityEngine.Collider2D;
    static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number): UnityEngine.Collider2D;
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number): UnityEngine.Collider2D[];
    static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number): UnityEngine.Collider2D[];
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number): number;
    static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[]): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static raycastsHitTriggers: boolean;
    static raycastsStartInColliders: boolean;
    static deleteStopsCallbacks: boolean;
    static velocityIterations: number;
    static positionIterations: number;
    static gravity: UnityEngine.Vector2;
    static queriesHitTriggers: boolean;
    static queriesStartInColliders: boolean;
    static changeStopsCallbacks: boolean;
    static velocityThreshold: number;
    static maxLinearCorrection: number;
    static maxAngularCorrection: number;
    static maxTranslationSpeed: number;
    static maxRotationSpeed: number;
    static minPenetrationForPenalty: number;
    static baumgarteScale: number;
    static baumgarteTOIScale: number;
    static timeToSleep: number;
    static linearSleepTolerance: number;
    static angularSleepTolerance: number;
    static alwaysShowColliders: boolean;
    static showColliderSleep: boolean;
    static showColliderContacts: boolean;
    static showColliderAABB: boolean;
    static contactArrowScale: number;
    static colliderAwakeColor: UnityEngine.Color;
    static colliderAsleepColor: UnityEngine.Color;
    static colliderContactColor: UnityEngine.Color;
    static colliderAABBColor: UnityEngine.Color;
    // fields
    static IgnoreRaycastLayer: number;
    static DefaultRaycastLayers: number;
    static AllLayers: number;
  }
}
