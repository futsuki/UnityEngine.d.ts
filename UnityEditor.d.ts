/*
 Unity Version(2017.2.0f3)

 Assemblies
   UnityEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Advertisements, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Analytics, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Android.Extensions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.GoogleAudioSpatializer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Graphs, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.HoloLens, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.iOS.Extensions.Xcode, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.LinuxStandalone.Extensions, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Networking, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Purchasing, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.SpatialTracking, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.TestRunner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.Timeline, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.TreeEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.UIAutomation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.VR, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.WebGL.Extensions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
   UnityEditor.WindowsStandalone.Extensions, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
 */

declare namespace UnityEditor {
  class Json extends System.Object {
    protected constructor();
    static Deserialize(json: string): any;
    static Serialize(obj: any): string;
  }
}
declare namespace System {
  class Object {
    constructor();
    Equals(obj: any): boolean;
    static Equals(objA: any, objB: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    static ReferenceEquals(objA: any, objB: any): boolean;
    ToString(): string;
  }
}
declare namespace UnityEditor.Json {
  class Parser extends System.Object {
    protected constructor();
    Dispose(): void;
    static IsWordBreak(c: any): boolean;
    static Parse(jsonString: string): any;
  }
}
declare namespace UnityEditor.Json.Parser {
  class TOKEN extends System.Enum {
    protected constructor();
    static COLON: UnityEditor.Json.Parser.TOKEN;
    static COMMA: UnityEditor.Json.Parser.TOKEN;
    static CURLY_CLOSE: UnityEditor.Json.Parser.TOKEN;
    static CURLY_OPEN: UnityEditor.Json.Parser.TOKEN;
    static FALSE: UnityEditor.Json.Parser.TOKEN;
    static NONE: UnityEditor.Json.Parser.TOKEN;
    static NULL: UnityEditor.Json.Parser.TOKEN;
    static NUMBER: UnityEditor.Json.Parser.TOKEN;
    static SQUARED_CLOSE: UnityEditor.Json.Parser.TOKEN;
    static SQUARED_OPEN: UnityEditor.Json.Parser.TOKEN;
    static STRING: UnityEditor.Json.Parser.TOKEN;
    static TRUE: UnityEditor.Json.Parser.TOKEN;
    value__: number;
  }
}
declare namespace System {
  class Enum extends System.ValueType {
    protected constructor();
    CompareTo(target: any): number;
    Equals(obj: any): boolean;
    static Format(enumType: any, value: any, format: string): string;
    GetHashCode(): number;
    static GetName(enumType: any, value: any): string;
    static GetNames(enumType: any): string[];
    GetTypeCode(): any;
    static GetUnderlyingType(enumType: any): any;
    static GetValues(enumType: any): any;
    HasFlag(flag: System.Enum): boolean;
    static IsDefined(enumType: any, value: any): boolean;
    static Parse(enumType: any, value: string): any;
    static Parse(enumType: any, value: string, ignoreCase: boolean): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: any): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    static ToObject(enumType: any, value: number): any;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
  }
}
declare namespace System {
  class ValueType extends System.Object {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
  }
}
declare namespace UnityEditor.Json {
  class Serializer extends System.Object {
    protected constructor();
    static Serialize(obj: any): string;
  }
}
declare namespace UnityEditor {
  class ActiveEditorTracker extends System.Object {
    constructor();
    ClearDirty(): void;
    Destroy(): void;
    Equals(o: any): boolean;
    ForceRebuild(): void;
    GetHashCode(): number;
    GetVisible(index: number): number;
    static HasCustomEditor(obj: UnityEngine.Object): boolean;
    static MakeCustomEditor(obj: UnityEngine.Object): UnityEditor.Editor;
    RebuildIfNecessary(): void;
    SetVisible(index: number, visible: number): void;
    VerifyModifiedMonoBehaviours(): void;
    readonly activeEditors: UnityEditor.Editor[];
    readonly hasComponentsWhichCannotBeMultiEdited: boolean;
    inspectorMode: UnityEditor.InspectorMode;
    readonly isDirty: boolean;
    isLocked: boolean;
    static readonly sharedTracker: UnityEditor.ActiveEditorTracker;
  }
}
declare namespace UnityEditor {
  class AnimationClipCurveData extends System.Object {
    constructor();
    constructor(binding: UnityEditor.EditorCurveBinding);
    curve: any;
    path: string;
    propertyName: string;
    type: any;
  }
}
declare namespace UnityEditor {
  class ObjectReferenceKeyframe extends System.ValueType {
    protected constructor();
    time: number;
    value: UnityEngine.Object;
  }
}
declare namespace UnityEditor {
  class EditorCurveBinding extends System.ValueType {
    protected constructor();
    Equals(other: any): boolean;
    static FloatCurve(inPath: string, inType: any, inPropertyName: string): UnityEditor.EditorCurveBinding;
    GetHashCode(): number;
    static PPtrCurve(inPath: string, inType: any, inPropertyName: string): UnityEditor.EditorCurveBinding;
    readonly isPPtrCurve: boolean;
    type: any;
    path: string;
    propertyName: string;
  }
}
declare namespace UnityEditor {
  class AnimationClipStats extends System.ValueType {
    protected constructor();
    Combine(other: UnityEditor.AnimationClipStats): void;
    Reset(): void;
    constantCurves: number;
    denseCurves: number;
    eulerCurves: number;
    genericCurves: number;
    muscleCurves: number;
    positionCurves: number;
    pptrCurves: number;
    quaternionCurves: number;
    scaleCurves: number;
    size: number;
    streamCurves: number;
    totalCurves: number;
  }
}
declare namespace UnityEditor {
  class AnimationClipSettings extends System.Object {
    constructor();
    additiveReferencePoseClip: any;
    additiveReferencePoseTime: number;
    cycleOffset: number;
    hasAdditiveReferencePose: boolean;
    heightFromFeet: boolean;
    keepOriginalOrientation: boolean;
    keepOriginalPositionXZ: boolean;
    keepOriginalPositionY: boolean;
    level: number;
    loopBlend: boolean;
    loopBlendOrientation: boolean;
    loopBlendPositionXZ: boolean;
    loopBlendPositionY: boolean;
    loopTime: boolean;
    mirror: boolean;
    orientationOffsetY: number;
    startTime: number;
    stopTime: number;
  }
}
declare namespace UnityEditor {
  class AnimationUtility extends System.Object {
    constructor();
    static CalculateTransformPath(targetTransform: any, root: any): string;
    static ConstrainToPolynomialCurve(curve: any): void;
    static GetAllCurves(clip: any): UnityEditor.AnimationClipCurveData[];
    static GetAllCurves(clip: any, includeCurveData: boolean): UnityEditor.AnimationClipCurveData[];
    static GetAnimatableBindings(targetObject: any, root: any): UnityEditor.EditorCurveBinding[];
    static GetAnimatedObject(root: any, binding: UnityEditor.EditorCurveBinding): UnityEngine.Object;
    static GetAnimationClips(component: any): any[];
    static GetAnimationClips(gameObject: any): any[];
    static GetAnimationClipSettings(clip: any): UnityEditor.AnimationClipSettings;
    static GetAnimationEvents(clip: any): any[];
    static GetCurveBindings(clip: any): UnityEditor.EditorCurveBinding[];
    static GetEditorCurve(clip: any, relativePath: string, type: any, propertyName: string): any;
    static GetEditorCurve(clip: any, binding: UnityEditor.EditorCurveBinding): any;
    static GetEditorCurveValueType(root: any, binding: UnityEditor.EditorCurveBinding): any;
    static GetFloatValue(root: any, relativePath: string, type: any, propertyName: string, data: any): boolean;
    static GetFloatValue(root: any, binding: UnityEditor.EditorCurveBinding, data: any): boolean;
    static GetKeyBroken(curve: any, index: number): boolean;
    static GetKeyLeftTangentMode(curve: any, index: number): UnityEditor.AnimationUtility.TangentMode;
    static GetKeyRightTangentMode(curve: any, index: number): UnityEditor.AnimationUtility.TangentMode;
    static GetObjectReferenceCurve(clip: any, binding: UnityEditor.EditorCurveBinding): UnityEditor.ObjectReferenceKeyframe[];
    static GetObjectReferenceCurveBindings(clip: any): UnityEditor.EditorCurveBinding[];
    static GetObjectReferenceValue(root: any, binding: UnityEditor.EditorCurveBinding, targetObject: any): boolean;
    static InAnimationMode(): boolean;
    static PropertyModificationToEditorCurveBinding(modification: UnityEditor.PropertyModification, gameObject: any, binding: any): any;
    static SetAdditiveReferencePose(clip: any, referenceClip: any, time: number): void;
    static SetAnimationClips(animation: any, clips: any[]): void;
    static SetAnimationClipSettings(clip: any, srcClipInfo: UnityEditor.AnimationClipSettings): void;
    static SetAnimationEvents(clip: any, events: any[]): void;
    static SetAnimationType(clip: any, type: UnityEditor.ModelImporterAnimationType): void;
    static SetEditorCurve(clip: any, relativePath: string, type: any, propertyName: string, curve: any): void;
    static SetEditorCurve(clip: any, binding: UnityEditor.EditorCurveBinding, curve: any): void;
    static SetKeyBroken(curve: any, index: number, broken: boolean): void;
    static SetKeyLeftTangentMode(curve: any, index: number, tangentMode: UnityEditor.AnimationUtility.TangentMode): void;
    static SetKeyRightTangentMode(curve: any, index: number, tangentMode: UnityEditor.AnimationUtility.TangentMode): void;
    static SetObjectReferenceCurve(clip: any, binding: UnityEditor.EditorCurveBinding, keyframes: UnityEditor.ObjectReferenceKeyframe[]): void;
    static StartAnimationMode(objects: UnityEngine.Object[]): void;
    static StopAnimationMode(): void;
    static onCurveWasModified: ((clip: any, binding: UnityEditor.EditorCurveBinding, deleted: UnityEditor.AnimationUtility.CurveModifiedType) => void);
  }
}
declare namespace UnityEditor.AnimationUtility {
  class CurveModifiedType extends System.Enum {
    protected constructor();
    static ClipModified: UnityEditor.AnimationUtility.CurveModifiedType;
    static CurveDeleted: UnityEditor.AnimationUtility.CurveModifiedType;
    static CurveModified: UnityEditor.AnimationUtility.CurveModifiedType;
    value__: number;
  }
}
declare namespace UnityEditor.AnimationUtility {
  class TangentMode extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.AnimationUtility.TangentMode;
    static ClampedAuto: UnityEditor.AnimationUtility.TangentMode;
    static Constant: UnityEditor.AnimationUtility.TangentMode;
    static Free: UnityEditor.AnimationUtility.TangentMode;
    static Linear: UnityEditor.AnimationUtility.TangentMode;
    value__: number;
  }
}
declare namespace UnityEditor.AnimationUtility {
  class PolynomialValid extends System.Enum {
    protected constructor();
    static InvalidPostWrapMode: UnityEditor.AnimationUtility.PolynomialValid;
    static InvalidPreWrapMode: UnityEditor.AnimationUtility.PolynomialValid;
    static TooManySegments: UnityEditor.AnimationUtility.PolynomialValid;
    static Valid: UnityEditor.AnimationUtility.PolynomialValid;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AnimationModeDriver extends UnityEngine.ScriptableObject {
    constructor();
  }
}
declare namespace UnityEngine {
  class ScriptableObject extends UnityEngine.Object {
    constructor();
    static CreateInstance(className: string): UnityEngine.ScriptableObject;
    static CreateInstance(type: any): UnityEngine.ScriptableObject;
    SetDirty(): void;
  }
}
declare namespace UnityEngine {
  class Object extends System.Object {
    constructor();
    static Destroy(obj: UnityEngine.Object): void;
    static Destroy(obj: UnityEngine.Object, t: number): void;
    static DestroyImmediate(obj: UnityEngine.Object): void;
    static DestroyImmediate(obj: UnityEngine.Object, allowDestroyingAssets: boolean): void;
    static DestroyObject(obj: UnityEngine.Object): void;
    static DestroyObject(obj: UnityEngine.Object, t: number): void;
    static DontDestroyOnLoad(target: UnityEngine.Object): void;
    Equals(other: any): boolean;
    static FindObjectOfType(type: any): UnityEngine.Object;
    static FindObjectsOfType(type: any): UnityEngine.Object[];
    static FindObjectsOfTypeAll(type: any): UnityEngine.Object[];
    static FindObjectsOfTypeIncludingAssets(type: any): UnityEngine.Object[];
    static FindSceneObjectsOfType(type: any): UnityEngine.Object[];
    GetHashCode(): number;
    GetInstanceID(): number;
    static Instantiate(original: UnityEngine.Object): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, parent: any): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, parent: any, instantiateInWorldSpace: boolean): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, position: any, rotation: any): UnityEngine.Object;
    static Instantiate(original: UnityEngine.Object, position: any, rotation: any, parent: any): UnityEngine.Object;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class AnimationMode extends System.Object {
    constructor();
    static AddPropertyModification(binding: UnityEditor.EditorCurveBinding, modification: UnityEditor.PropertyModification, keepPrefabOverride: boolean): void;
    static BeginSampling(): void;
    static EndSampling(): void;
    static InAnimationMode(): boolean;
    static IsPropertyAnimated(target: UnityEngine.Object, propertyPath: string): boolean;
    static SampleAnimationClip(gameObject: any, clip: any, time: number): void;
    static StartAnimationMode(): void;
    static StopAnimationMode(): void;
    static readonly animatedPropertyColor: any;
    static readonly candidatePropertyColor: any;
    static readonly recordedPropertyColor: any;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorLayerBlendingMode extends System.Enum {
    protected constructor();
    static Additive: UnityEditor.Animations.AnimatorLayerBlendingMode;
    static Override: UnityEditor.Animations.AnimatorLayerBlendingMode;
    value__: number;
  }
}
declare namespace UnityEditor.Animations {
  class StateMotionPair extends System.ValueType {
    protected constructor();
    m_Motion: UnityEngine.Motion;
    m_State: UnityEditor.Animations.AnimatorState;
  }
}
declare namespace UnityEditor.Animations {
  class StateBehavioursPair extends System.ValueType {
    protected constructor();
    m_Behaviours: any[];
    m_State: UnityEditor.Animations.AnimatorState;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorControllerLayer extends System.Object {
    constructor();
    GetOverrideBehaviours(state: UnityEditor.Animations.AnimatorState): any[];
    GetOverrideMotion(state: UnityEditor.Animations.AnimatorState): UnityEngine.Motion;
    SetOverrideBehaviours(state: UnityEditor.Animations.AnimatorState, behaviours: any[]): void;
    SetOverrideMotion(state: UnityEditor.Animations.AnimatorState, motion: UnityEngine.Motion): void;
    avatarMask: any;
    blendingMode: UnityEditor.Animations.AnimatorLayerBlendingMode;
    defaultWeight: number;
    iKPass: boolean;
    name: string;
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
    syncedLayerAffectsTiming: boolean;
    syncedLayerIndex: number;
  }
}
declare namespace UnityEditor.Animations {
  class StateMachineBehaviourContext extends System.Object {
    constructor();
    animatorController: UnityEditor.Animations.AnimatorController;
    animatorObject: UnityEngine.Object;
    layerIndex: number;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorController extends UnityEngine.RuntimeAnimatorController {
    constructor();
    AddEffectiveStateMachineBehaviour(stateMachineBehaviourType: any, state: UnityEditor.Animations.AnimatorState, layerIndex: number): any;
    AddLayer(name: string): void;
    AddLayer(layer: UnityEditor.Animations.AnimatorControllerLayer): void;
    AddMotion(motion: UnityEngine.Motion): UnityEditor.Animations.AnimatorState;
    AddMotion(motion: UnityEngine.Motion, layerIndex: number): UnityEditor.Animations.AnimatorState;
    AddParameter(name: string, type: any): void;
    AddParameter(paramater: any): void;
    static AllocateAnimatorClip(name: string): any;
    static CreateAnimatorControllerAtPath(path: string): UnityEditor.Animations.AnimatorController;
    static CreateAnimatorControllerAtPathWithClip(path: string, clip: any): UnityEditor.Animations.AnimatorController;
    CreateBlendTreeInController(name: string, tree: any): UnityEditor.Animations.AnimatorState;
    CreateBlendTreeInController(name: string, tree: any, layerIndex: number): UnityEditor.Animations.AnimatorState;
    static CreateStateMachineBehaviour(script: UnityEditor.MonoScript): number;
    static FindStateMachineBehaviourContext(behaviour: any): UnityEditor.Animations.StateMachineBehaviourContext[];
    GetStateEffectiveBehaviours(state: UnityEditor.Animations.AnimatorState, layerIndex: number): any[];
    GetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState): UnityEngine.Motion;
    GetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState, layerIndex: number): UnityEngine.Motion;
    MakeUniqueLayerName(name: string): string;
    MakeUniqueParameterName(name: string): string;
    RemoveLayer(index: number): void;
    RemoveParameter(index: number): void;
    RemoveParameter(parameter: any): void;
    static SetAnimatorController(behavior: any, controller: UnityEditor.Animations.AnimatorController): void;
    SetStateEffectiveBehaviours(state: UnityEditor.Animations.AnimatorState, layerIndex: number, behaviours: any[]): void;
    SetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState, motion: UnityEngine.Motion): void;
    SetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState, motion: UnityEngine.Motion, layerIndex: number): void;
    layers: UnityEditor.Animations.AnimatorControllerLayer[];
    parameters: any[];
  }
}
declare namespace UnityEngine {
  class RuntimeAnimatorController extends UnityEngine.Object {
    constructor();
    readonly animationClips: any[];
  }
}
declare namespace UnityEditor {
  class Annotation extends System.ValueType {
    protected constructor();
    classID: number;
    flags: number;
    gizmoEnabled: number;
    iconEnabled: number;
    scriptClass: string;
  }
}
declare namespace UnityEditor {
  class AnnotationUtility extends System.Object {
    constructor();
  }
}
  class AssetModificationProcessor extends System.Object {
    constructor();
  }
declare namespace UnityEditor {
  class AssetModificationProcessor extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class AssetImporter extends UnityEngine.Object {
    constructor();
    AddRemap(identifier: UnityEditor.AssetImporter.SourceAssetIdentifier, externalObject: UnityEngine.Object): void;
    static GetAtPath(path: string): UnityEditor.AssetImporter;
    GetExternalObjectMap(): any;
    RemoveRemap(identifier: UnityEditor.AssetImporter.SourceAssetIdentifier): boolean;
    SaveAndReimport(): void;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    assetBundleName: string;
    assetBundleVariant: string;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
  }
}
declare namespace UnityEditor.AssetImporter {
  class SourceAssetIdentifier extends System.ValueType {
    protected constructor();
    name: string;
    type: any;
  }
}
declare namespace UnityEditor {
  class AssetPostprocessor extends System.Object {
    constructor();
    GetPostprocessOrder(): number;
    GetVersion(): number;
    LogError(warning: string): void;
    LogError(warning: string, context: UnityEngine.Object): void;
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: UnityEngine.Object): void;
    readonly assetImporter: UnityEditor.AssetImporter;
    assetPath: string;
    preview: any;
  }
}
declare namespace UnityEditor {
  class AudioImporterFormat extends System.Enum {
    protected constructor();
    static Compressed: UnityEditor.AudioImporterFormat;
    static Native: UnityEditor.AudioImporterFormat;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AudioImporterLoadType extends System.Enum {
    protected constructor();
    static CompressedInMemory: UnityEditor.AudioImporterLoadType;
    static DecompressOnLoad: UnityEditor.AudioImporterLoadType;
    static StreamFromDisc: UnityEditor.AudioImporterLoadType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AudioImporterChannels extends System.Enum {
    protected constructor();
    static Automatic: UnityEditor.AudioImporterChannels;
    static Mono: UnityEditor.AudioImporterChannels;
    static Stereo: UnityEditor.AudioImporterChannels;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AudioSampleRateSetting extends System.Enum {
    protected constructor();
    static OptimizeSampleRate: UnityEditor.AudioSampleRateSetting;
    static OverrideSampleRate: UnityEditor.AudioSampleRateSetting;
    static PreserveSampleRate: UnityEditor.AudioSampleRateSetting;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AudioImporterSampleSettings extends System.ValueType {
    protected constructor();
    compressionFormat: any;
    conversionMode: number;
    loadType: any;
    quality: number;
    sampleRateOverride: number;
    sampleRateSetting: UnityEditor.AudioSampleRateSetting;
  }
}
declare namespace UnityEditor {
  class AudioImporter extends UnityEditor.AssetImporter {
    constructor();
    ClearSampleSettingOverride(platform: string): boolean;
    ContainsSampleSettingsOverride(platform: string): boolean;
    GetOverrideSampleSettings(platform: string): UnityEditor.AudioImporterSampleSettings;
    SetOverrideSampleSettings(platform: string, settings: UnityEditor.AudioImporterSampleSettings): boolean;
    ambisonic: boolean;
    channels: UnityEditor.AudioImporterChannels;
    compressionBitrate: number;
    defaultSampleSettings: UnityEditor.AudioImporterSampleSettings;
    forceToMono: boolean;
    hardware: boolean;
    loadInBackground: boolean;
    loopable: boolean;
    preloadAudioData: boolean;
    threeD: boolean;
  }
}
declare namespace UnityEditor {
  class VideoCodec extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.VideoCodec;
    static H264: UnityEditor.VideoCodec;
    value__: number;
    static VP8: UnityEditor.VideoCodec;
  }
}
declare namespace UnityEditor {
  class VideoBitrateMode extends System.Enum {
    protected constructor();
    static High: UnityEditor.VideoBitrateMode;
    static Low: UnityEditor.VideoBitrateMode;
    static Medium: UnityEditor.VideoBitrateMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VideoDeinterlaceMode extends System.Enum {
    protected constructor();
    static Even: UnityEditor.VideoDeinterlaceMode;
    static Odd: UnityEditor.VideoDeinterlaceMode;
    static Off: UnityEditor.VideoDeinterlaceMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VideoResizeMode extends System.Enum {
    protected constructor();
    static CustomSize: UnityEditor.VideoResizeMode;
    static HalfRes: UnityEditor.VideoResizeMode;
    static OriginalSize: UnityEditor.VideoResizeMode;
    static QuarterRes: UnityEditor.VideoResizeMode;
    static Square1024: UnityEditor.VideoResizeMode;
    static Square256: UnityEditor.VideoResizeMode;
    static Square512: UnityEditor.VideoResizeMode;
    static ThreeQuarterRes: UnityEditor.VideoResizeMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VideoSpatialQuality extends System.Enum {
    protected constructor();
    static HighSpatialQuality: UnityEditor.VideoSpatialQuality;
    static LowSpatialQuality: UnityEditor.VideoSpatialQuality;
    static MediumSpatialQuality: UnityEditor.VideoSpatialQuality;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VideoEncodeAspectRatio extends System.Enum {
    protected constructor();
    static NoScaling: UnityEditor.VideoEncodeAspectRatio;
    static Stretch: UnityEditor.VideoEncodeAspectRatio;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VideoImporterTargetSettings extends System.Object {
    constructor();
    aspectRatio: UnityEditor.VideoEncodeAspectRatio;
    bitrateMode: UnityEditor.VideoBitrateMode;
    codec: UnityEditor.VideoCodec;
    customHeight: number;
    customWidth: number;
    enableTranscoding: boolean;
    resizeMode: UnityEditor.VideoResizeMode;
    spatialQuality: UnityEditor.VideoSpatialQuality;
  }
}
declare namespace UnityEditor {
  class VideoClipImporter extends UnityEditor.AssetImporter {
    constructor();
    ClearTargetSettings(platform: string): void;
    GetPreviewTexture(): any;
    GetResizeHeight(mode: UnityEditor.VideoResizeMode): number;
    GetResizeModeName(mode: UnityEditor.VideoResizeMode): string;
    GetResizeWidth(mode: UnityEditor.VideoResizeMode): number;
    GetSourceAudioChannelCount(audioTrackIdx: number): number;
    GetSourceAudioSampleRate(audioTrackIdx: number): number;
    GetTargetSettings(platform: string): UnityEditor.VideoImporterTargetSettings;
    PlayPreview(): void;
    SetTargetSettings(platform: string, settings: UnityEditor.VideoImporterTargetSettings): void;
    StopPreview(): void;
    defaultTargetSettings: UnityEditor.VideoImporterTargetSettings;
    deinterlaceMode: UnityEditor.VideoDeinterlaceMode;
    flipHorizontal: boolean;
    flipVertical: boolean;
    readonly frameCount: number;
    readonly frameRate: number;
    importAudio: boolean;
    readonly isPlayingPreview: boolean;
    keepAlpha: boolean;
    linearColor: boolean;
    readonly outputFileSize: number;
    readonly pixelAspectRatioDenominator: number;
    readonly pixelAspectRatioNumerator: number;
    quality: number;
    readonly sourceAudioTrackCount: number;
    readonly sourceFileSize: number;
    readonly sourceHasAlpha: boolean;
    useLegacyImporter: boolean;
  }
}
declare namespace UnityEditor {
  class ModelImporter extends UnityEditor.AssetImporter {
    constructor();
    CreateDefaultMaskForClip(clip: UnityEditor.ModelImporterClipAnimation): void;
    ExtractTextures(folderPath: string): boolean;
    addCollider: boolean;
    animationCompression: UnityEditor.ModelImporterAnimationCompression;
    animationPositionError: number;
    animationRotationError: number;
    animationScaleError: number;
    animationType: UnityEditor.ModelImporterAnimationType;
    animationWrapMode: any;
    bakeIK: boolean;
    clipAnimations: UnityEditor.ModelImporterClipAnimation[];
    readonly defaultClipAnimations: UnityEditor.ModelImporterClipAnimation[];
    extraExposedTransformPaths: string[];
    extraUserProperties: string[];
    generateAnimations: UnityEditor.ModelImporterGenerateAnimations;
    generateMaterials: UnityEditor.ModelImporterGenerateMaterials;
    generateSecondaryUV: boolean;
    globalScale: number;
    humanDescription: any;
    humanoidOversampling: UnityEditor.ModelImporterHumanoidOversampling;
    importAnimatedCustomProperties: boolean;
    importAnimation: boolean;
    importBlendShapes: boolean;
    importCameras: boolean;
    readonly importedTakeInfos: UnityEditor.TakeInfo[];
    importLights: boolean;
    importMaterials: boolean;
    importNormals: UnityEditor.ModelImporterNormals;
    importTangents: UnityEditor.ModelImporterTangents;
    importVisibility: boolean;
    readonly isBakeIKSupported: boolean;
    readonly isFileScaleUsed: boolean;
    isReadable: boolean;
    readonly isTangentImportSupported: boolean;
    readonly isUseFileUnitsSupported: boolean;
    keepQuads: boolean;
    materialName: UnityEditor.ModelImporterMaterialName;
    materialSearch: UnityEditor.ModelImporterMaterialSearch;
    meshCompression: UnityEditor.ModelImporterMeshCompression;
    motionNodeName: string;
    normalCalculationMode: UnityEditor.ModelImporterNormalCalculationMode;
    normalImportMode: UnityEditor.ModelImporterTangentSpaceMode;
    normalSmoothingAngle: number;
    optimizeGameObjects: boolean;
    optimizeMesh: boolean;
    readonly referencedClips: string[];
    resampleCurves: boolean;
    resampleRotations: boolean;
    secondaryUVAngleDistortion: number;
    secondaryUVAreaDistortion: number;
    secondaryUVHardAngle: number;
    secondaryUVPackMargin: number;
    sourceAvatar: any;
    splitAnimations: boolean;
    splitTangentsAcrossSeams: boolean;
    swapUVChannels: boolean;
    tangentImportMode: UnityEditor.ModelImporterTangentSpaceMode;
    readonly transformPaths: string[];
    useFileScale: boolean;
    useFileUnits: boolean;
    weldVertices: boolean;
  }
}
declare namespace UnityEditor {
  class MonoImporter extends UnityEditor.AssetImporter {
    constructor();
    static GetAllRuntimeMonoScripts(): UnityEditor.MonoScript[];
    GetDefaultReference(name: string): UnityEngine.Object;
    static GetExecutionOrder(script: UnityEditor.MonoScript): number;
    GetScript(): UnityEditor.MonoScript;
    SetDefaultReferences(name: string[], target: UnityEngine.Object[]): void;
    static SetExecutionOrder(script: UnityEditor.MonoScript, order: number): void;
  }
}
declare namespace UnityEditor {
  class MovieImporter extends UnityEditor.AssetImporter {
    constructor();
    readonly duration: number;
    linearTexture: boolean;
    quality: number;
  }
}
declare namespace UnityEditor {
  class ShaderImporter extends UnityEditor.AssetImporter {
    constructor();
    GetDefaultTexture(name: string): any;
    GetShader(): any;
    SetDefaultTextures(name: string[], textures: any[]): void;
  }
}
declare namespace UnityEditor {
  class TextureUsageMode extends System.Enum {
    protected constructor();
    static AlwaysPadded: UnityEditor.TextureUsageMode;
    static Default: UnityEditor.TextureUsageMode;
    static LightmapDoubleLDR: UnityEditor.TextureUsageMode;
    static LightmapRGBM: UnityEditor.TextureUsageMode;
    static NormalmapDXT5nm: UnityEditor.TextureUsageMode;
    static NormalmapPlain: UnityEditor.TextureUsageMode;
    static RGBMEncoded: UnityEditor.TextureUsageMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureUtil extends System.Object {
    constructor();
    static ConvertToAlphaTextureFormat(format: any): any;
    static CopyCubemapFaceIntoTexture(cubemapRef: any, face: any, textureRef: any): void;
    static CopyTextureIntoCubemapFace(textureRef: any, cubemapRef: any, face: any): void;
    static DoesTextureStillNeedToBeCompressed(assetPath: string): boolean;
    static GetBytesFromTextureFormat(inFormat: any): number;
    static GetDefaultCompressionQuality(): number;
    static GetGPUHeight(t: any): number;
    static GetGPUWidth(t: any): number;
    static GetLinearSampled(t: any): boolean;
    static GetMipmapCount(t: any): number;
    static GetRowBytesFromWidthAndFormat(width: number, format: any): number;
    static GetRuntimeMemorySize(t: any): number;
    static GetRuntimeMemorySizeLong(t: any): number;
    static GetSourceTexture(cubemapRef: any, face: any): any;
    static GetStorageMemorySize(t: any): number;
    static GetStorageMemorySizeLong(t: any): number;
    static GetTexelSizeVector(t: any): any;
    static GetTextureColorSpaceString(texture: any): string;
    static GetTextureFormat(texture: any): any;
    static GetTextureFormatString(format: any): string;
    static GetUsageMode(t: any): UnityEditor.TextureUsageMode;
    static HasAlphaTextureFormat(format: any): boolean;
    static HasMipMap(t: any): boolean;
    static IsAlphaOnlyTextureFormat(format: any): boolean;
    static IsCompressedTextureFormat(format: any): boolean;
    static IsCubemapReadable(cubemapRef: any): boolean;
    static IsDepthRTFormat(format: any): boolean;
    static IsNonPowerOfTwo(t: any): boolean;
    static IsValidTextureFormat(format: any): boolean;
    static MarkCubemapReadable(cubemapRef: any, readable: boolean): void;
    static ReformatCubemap(cubemap: any, width: number, height: number, textureFormat: any, useMipmap: boolean, linear: boolean): boolean;
    static ReformatTexture(texture: any, width: number, height: number, textureFormat: any, useMipmap: boolean, linear: boolean): boolean;
    static SetAnisoLevelNoDirty(tex: any, level: number): void;
    static SetFilterModeNoDirty(tex: any, mode: any): void;
    static SetMipMapBiasNoDirty(tex: any, bias: number): void;
    static SetSourceTexture(cubemapRef: any, face: any, tex: any): void;
    static SetWrapModeNoDirty(tex: any, u: any, v: any, w: any): void;
  }
}
declare namespace UnityEditor {
  class TextureImporterFormat extends System.Enum {
    protected constructor();
    static Alpha8: UnityEditor.TextureImporterFormat;
    static ARGB16: UnityEditor.TextureImporterFormat;
    static ARGB32: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_10x10: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_12x12: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_4x4: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_5x5: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_6x6: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_8x8: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_10x10: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_12x12: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_4x4: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_5x5: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_6x6: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_8x8: UnityEditor.TextureImporterFormat;
    static ATC_RGB4: UnityEditor.TextureImporterFormat;
    static ATC_RGBA8: UnityEditor.TextureImporterFormat;
    static Automatic: UnityEditor.TextureImporterFormat;
    static Automatic16bit: UnityEditor.TextureImporterFormat;
    static AutomaticCompressed: UnityEditor.TextureImporterFormat;
    static AutomaticCompressedHDR: UnityEditor.TextureImporterFormat;
    static AutomaticCrunched: UnityEditor.TextureImporterFormat;
    static AutomaticHDR: UnityEditor.TextureImporterFormat;
    static AutomaticTruecolor: UnityEditor.TextureImporterFormat;
    static BC4: UnityEditor.TextureImporterFormat;
    static BC5: UnityEditor.TextureImporterFormat;
    static BC6H: UnityEditor.TextureImporterFormat;
    static BC7: UnityEditor.TextureImporterFormat;
    static DXT1: UnityEditor.TextureImporterFormat;
    static DXT1Crunched: UnityEditor.TextureImporterFormat;
    static DXT5: UnityEditor.TextureImporterFormat;
    static DXT5Crunched: UnityEditor.TextureImporterFormat;
    static EAC_R: UnityEditor.TextureImporterFormat;
    static EAC_R_SIGNED: UnityEditor.TextureImporterFormat;
    static EAC_RG: UnityEditor.TextureImporterFormat;
    static EAC_RG_SIGNED: UnityEditor.TextureImporterFormat;
    static ETC_RGB4: UnityEditor.TextureImporterFormat;
    static ETC2_RGB4: UnityEditor.TextureImporterFormat;
    static ETC2_RGB4_PUNCHTHROUGH_ALPHA: UnityEditor.TextureImporterFormat;
    static ETC2_RGBA8: UnityEditor.TextureImporterFormat;
    static PVRTC_RGB2: UnityEditor.TextureImporterFormat;
    static PVRTC_RGB4: UnityEditor.TextureImporterFormat;
    static PVRTC_RGBA2: UnityEditor.TextureImporterFormat;
    static PVRTC_RGBA4: UnityEditor.TextureImporterFormat;
    static RGB16: UnityEditor.TextureImporterFormat;
    static RGB24: UnityEditor.TextureImporterFormat;
    static RGBA16: UnityEditor.TextureImporterFormat;
    static RGBA32: UnityEditor.TextureImporterFormat;
    static RGBAHalf: UnityEditor.TextureImporterFormat;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterMipFilter extends System.Enum {
    protected constructor();
    static BoxFilter: UnityEditor.TextureImporterMipFilter;
    static KaiserFilter: UnityEditor.TextureImporterMipFilter;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterGenerateCubemap extends System.Enum {
    protected constructor();
    static AutoCubemap: UnityEditor.TextureImporterGenerateCubemap;
    static Cylindrical: UnityEditor.TextureImporterGenerateCubemap;
    static FullCubemap: UnityEditor.TextureImporterGenerateCubemap;
    static NiceSpheremap: UnityEditor.TextureImporterGenerateCubemap;
    static None: UnityEditor.TextureImporterGenerateCubemap;
    static SimpleSpheremap: UnityEditor.TextureImporterGenerateCubemap;
    static Spheremap: UnityEditor.TextureImporterGenerateCubemap;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterNPOTScale extends System.Enum {
    protected constructor();
    static None: UnityEditor.TextureImporterNPOTScale;
    static ToLarger: UnityEditor.TextureImporterNPOTScale;
    static ToNearest: UnityEditor.TextureImporterNPOTScale;
    static ToSmaller: UnityEditor.TextureImporterNPOTScale;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterNormalFilter extends System.Enum {
    protected constructor();
    static Sobel: UnityEditor.TextureImporterNormalFilter;
    static Standard: UnityEditor.TextureImporterNormalFilter;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterAlphaSource extends System.Enum {
    protected constructor();
    static FromGrayScale: UnityEditor.TextureImporterAlphaSource;
    static FromInput: UnityEditor.TextureImporterAlphaSource;
    static None: UnityEditor.TextureImporterAlphaSource;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterType extends System.Enum {
    protected constructor();
    static Advanced: UnityEditor.TextureImporterType;
    static Bump: UnityEditor.TextureImporterType;
    static Cookie: UnityEditor.TextureImporterType;
    static Cubemap: UnityEditor.TextureImporterType;
    static Cursor: UnityEditor.TextureImporterType;
    static Default: UnityEditor.TextureImporterType;
    static GUI: UnityEditor.TextureImporterType;
    static HDRI: UnityEditor.TextureImporterType;
    static Image: UnityEditor.TextureImporterType;
    static Lightmap: UnityEditor.TextureImporterType;
    static NormalMap: UnityEditor.TextureImporterType;
    static Reflection: UnityEditor.TextureImporterType;
    static SingleChannel: UnityEditor.TextureImporterType;
    static Sprite: UnityEditor.TextureImporterType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterCompression extends System.Enum {
    protected constructor();
    static Compressed: UnityEditor.TextureImporterCompression;
    static CompressedHQ: UnityEditor.TextureImporterCompression;
    static CompressedLQ: UnityEditor.TextureImporterCompression;
    static Uncompressed: UnityEditor.TextureImporterCompression;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureResizeAlgorithm extends System.Enum {
    protected constructor();
    static Bilinear: UnityEditor.TextureResizeAlgorithm;
    static Mitchell: UnityEditor.TextureResizeAlgorithm;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterShape extends System.Enum {
    protected constructor();
    static Texture2D: UnityEditor.TextureImporterShape;
    static TextureCube: UnityEditor.TextureImporterShape;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SpriteImportMode extends System.Enum {
    protected constructor();
    static Multiple: UnityEditor.SpriteImportMode;
    static None: UnityEditor.SpriteImportMode;
    static Polygon: UnityEditor.SpriteImportMode;
    static Single: UnityEditor.SpriteImportMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SpriteMetaData extends System.ValueType {
    protected constructor();
    alignment: number;
    border: any;
    name: string;
    pivot: any;
    rect: any;
  }
}
declare namespace UnityEditor {
  class TextureImporter extends UnityEditor.AssetImporter {
    constructor();
    ClearPlatformTextureSettings(platform: string): void;
    DoesSourceTextureHaveAlpha(): boolean;
    DoesSourceTextureHaveColor(): boolean;
    GetAllowsAlphaSplitting(): boolean;
    GetAutomaticFormat(platform: string): UnityEditor.TextureImporterFormat;
    GetDefaultPlatformTextureSettings(): UnityEditor.TextureImporterPlatformSettings;
    GetPlatformTextureSettings(platform: string, maxTextureSize: any, textureFormat: any): boolean;
    GetPlatformTextureSettings(platform: string, maxTextureSize: any, textureFormat: any, compressionQuality: any): boolean;
    GetPlatformTextureSettings(platform: string, maxTextureSize: any, textureFormat: any, compressionQuality: any, etc1AlphaSplitEnabled: any): boolean;
    GetPlatformTextureSettings(platform: string): UnityEditor.TextureImporterPlatformSettings;
    ReadTextureImportInstructions(target: UnityEditor.BuildTarget, desiredFormat: any, colorSpace: any, compressionQuality: any): void;
    ReadTextureSettings(dest: UnityEditor.TextureImporterSettings): void;
    SetAllowsAlphaSplitting(flag: boolean): void;
    SetPlatformTextureSettings(platform: string, maxTextureSize: number, textureFormat: UnityEditor.TextureImporterFormat): void;
    SetPlatformTextureSettings(platform: string, maxTextureSize: number, textureFormat: UnityEditor.TextureImporterFormat, allowsAlphaSplit: boolean): void;
    SetPlatformTextureSettings(platform: string, maxTextureSize: number, textureFormat: UnityEditor.TextureImporterFormat, compressionQuality: number, allowsAlphaSplit: boolean): void;
    SetPlatformTextureSettings(platformSettings: UnityEditor.TextureImporterPlatformSettings): void;
    SetTextureSettings(src: UnityEditor.TextureImporterSettings): void;
    allowAlphaSplitting: boolean;
    alphaIsTransparency: boolean;
    alphaSource: UnityEditor.TextureImporterAlphaSource;
    alphaTestReferenceValue: number;
    anisoLevel: number;
    borderMipmap: boolean;
    compressionQuality: number;
    convertToNormalmap: boolean;
    correctGamma: boolean;
    crunchedCompression: boolean;
    fadeout: boolean;
    filterMode: any;
    generateCubemap: UnityEditor.TextureImporterGenerateCubemap;
    generateMipsInLinearSpace: boolean;
    grayscaleToAlpha: boolean;
    heightmapScale: number;
    isReadable: boolean;
    lightmap: boolean;
    linearTexture: boolean;
    maxTextureSize: number;
    mipMapBias: number;
    mipmapEnabled: boolean;
    mipmapFadeDistanceEnd: number;
    mipmapFadeDistanceStart: number;
    mipmapFilter: UnityEditor.TextureImporterMipFilter;
    mipMapsPreserveCoverage: boolean;
    normalmap: boolean;
    normalmapFilter: UnityEditor.TextureImporterNormalFilter;
    npotScale: UnityEditor.TextureImporterNPOTScale;
    readonly qualifiesForSpritePacking: boolean;
    spriteBorder: any;
    spriteImportMode: UnityEditor.SpriteImportMode;
    spritePackingTag: string;
    spritePivot: any;
    spritePixelsPerUnit: number;
    spritePixelsToUnits: number;
    spritesheet: UnityEditor.SpriteMetaData[];
    sRGBTexture: boolean;
    textureCompression: UnityEditor.TextureImporterCompression;
    textureFormat: UnityEditor.TextureImporterFormat;
    textureShape: UnityEditor.TextureImporterShape;
    textureType: UnityEditor.TextureImporterType;
    wrapMode: any;
    wrapModeU: any;
    wrapModeV: any;
    wrapModeW: any;
  }
}
declare namespace UnityEditor {
  class TextureImporterSettings extends System.Object {
    constructor();
    ApplyTextureType(type: UnityEditor.TextureImporterType): void;
    ApplyTextureType(type: UnityEditor.TextureImporterType, applyAll: boolean): void;
    CopyTo(target: UnityEditor.TextureImporterSettings): void;
    static Equal(a: UnityEditor.TextureImporterSettings, b: UnityEditor.TextureImporterSettings): boolean;
    alphaIsTransparency: boolean;
    alphaSource: UnityEditor.TextureImporterAlphaSource;
    alphaTestReferenceValue: number;
    aniso: number;
    borderMipmap: boolean;
    compressionQuality: number;
    convertToNormalMap: boolean;
    cubemapConvolution: UnityEditor.TextureImporterCubemapConvolution;
    cubemapConvolutionExponent: number;
    cubemapConvolutionSteps: number;
    fadeOut: boolean;
    filterMode: any;
    generateCubemap: UnityEditor.TextureImporterGenerateCubemap;
    generateMipsInLinearSpace: boolean;
    grayscaleToAlpha: boolean;
    heightmapScale: number;
    lightmap: boolean;
    linearTexture: boolean;
    maxTextureSize: number;
    mipmapBias: number;
    mipmapEnabled: boolean;
    mipmapFadeDistanceEnd: number;
    mipmapFadeDistanceStart: number;
    mipmapFilter: UnityEditor.TextureImporterMipFilter;
    mipMapsPreserveCoverage: boolean;
    normalMap: boolean;
    normalMapFilter: UnityEditor.TextureImporterNormalFilter;
    npotScale: UnityEditor.TextureImporterNPOTScale;
    readable: boolean;
    rgbm: UnityEditor.TextureImporterRGBMMode;
    seamlessCubemap: boolean;
    spriteAlignment: number;
    spriteBorder: any;
    spriteExtrude: number;
    spriteMeshType: any;
    spriteMode: number;
    spritePivot: any;
    spritePixelsPerUnit: number;
    spritePixelsToUnits: number;
    spriteTessellationDetail: number;
    sRGBTexture: boolean;
    textureFormat: UnityEditor.TextureImporterFormat;
    textureShape: UnityEditor.TextureImporterShape;
    textureType: UnityEditor.TextureImporterType;
    wrapMode: any;
    wrapModeU: any;
    wrapModeV: any;
    wrapModeW: any;
  }
}
declare namespace UnityEditor {
  class TextureImporterPlatformSettings extends System.Object {
    constructor();
    CopyTo(target: UnityEditor.TextureImporterPlatformSettings): void;
    allowsAlphaSplitting: boolean;
    compressionQuality: number;
    crunchedCompression: boolean;
    format: UnityEditor.TextureImporterFormat;
    maxTextureSize: number;
    name: string;
    overridden: boolean;
    resizeAlgorithm: UnityEditor.TextureResizeAlgorithm;
    textureCompression: UnityEditor.TextureImporterCompression;
  }
}
declare namespace UnityEditor {
  class AssetPreview extends System.Object {
    constructor();
    static GetAssetPreview(asset: UnityEngine.Object): any;
    static GetMiniThumbnail(obj: UnityEngine.Object): any;
    static GetMiniTypeThumbnail(type: any): any;
    static IsLoadingAssetPreview(instanceID: number): boolean;
    static IsLoadingAssetPreviews(): boolean;
    static SetPreviewTextureCacheSize(size: number): void;
  }
}
declare namespace UnityEditor {
  class ImportPackageItem extends System.Object {
    constructor();
    assetChanged: boolean;
    destinationAssetPath: string;
    enabledStatus: number;
    exists: boolean;
    exportedAssetPath: string;
    guid: string;
    isFolder: boolean;
    pathConflict: boolean;
    previewPath: string;
    projectAsset: boolean;
    sourceFolder: string;
  }
}
declare namespace UnityEditor {
  class ExportPackageItem extends System.Object {
    constructor();
    assetPath: string;
    enabledStatus: number;
    guid: string;
    isFolder: boolean;
  }
}
declare namespace UnityEditor {
  class PackageInfo extends System.ValueType {
    protected constructor();
    iconURL: string;
    jsonInfo: string;
    packagePath: string;
  }
}
declare namespace UnityEditor {
  class PackageUtility extends System.Object {
    constructor();
    static BuildExportPackageItemsList(guids: string[], dependencies: boolean): UnityEditor.ExportPackageItem[];
    static ExportPackage(guids: string[], fileName: string): void;
    static ExtractAndPrepareAssetList(packagePath: string, packageIconPath: any, canPerformReInstall: any): UnityEditor.ImportPackageItem[];
    static ImportPackageAssets(packageName: string, items: UnityEditor.ImportPackageItem[], performReInstall: boolean): void;
    static ImportPackageAssetsImmediately(packageName: string, items: UnityEditor.ImportPackageItem[], performReInstall: boolean): void;
  }
}
declare namespace UnityEditorInternal {
  class AssetStore extends System.Object {
    constructor();
    static Open(assetStoreURL: string): void;
  }
}
declare namespace UnityEditor {
  class AssetStoreContext extends System.Object {
    constructor();
    DeleteKey(key: string): void;
    Download(package_: UnityEditor.AssetStoreContext.Package, downloadInfo: UnityEditor.AssetStoreContext.DownloadInfo): void;
    static Download(package_id: string, url: string, key: string, package_name: string, publisher_name: string, category_name: string, doneCallback: ((package_id: string, message: string, bytes: number, total: number) => void)): void;
    GetAuthToken(): string;
    GetDockedStatus(): boolean;
    GetFloat(key: string): number;
    GetInitialOpenURL(): string;
    static GetInstance(): UnityEditor.AssetStoreContext;
    GetInt(key: string): number;
    GetLicenseFlags(): number[];
    GetPackageList(): UnityEditor.AssetStoreContext.PackageList;
    GetSkinIndex(): number;
    GetString(key: string): string;
    HasKey(key: string): boolean;
    OpenBrowser(url: string): void;
    OpenPackage(id: string): boolean;
    OpenPackage(id: string, action: string): boolean;
    static OpenPackageInternal(id: string): boolean;
    static PackageStorePath(publisher_name: string, category_name: string, package_name: string, package_id: string, url: string): string[];
    static SessionGetString(key: string): string;
    static SessionHasString(key: string): boolean;
    static SessionRemoveString(key: string): void;
    static SessionSetString(key: string, value: string): void;
    SetFloat(key: string, value: number): void;
    SetInt(key: string, value: number): void;
    SetString(key: string, value: string): void;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class DownloadInfo extends System.Object {
    constructor();
    id: string;
    key: string;
    url: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class LabelAndId extends System.Object {
    constructor();
    Initialize(json: UnityEditorInternal.JSONValue): void;
    ToString(): string;
    id: string;
    label: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class Link extends System.Object {
    constructor();
    Initialize(json: UnityEditorInternal.JSONValue): void;
    ToString(): string;
    id: string;
    type: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class Package extends System.Object {
    constructor();
    Initialize(json: UnityEditorInternal.JSONValue): void;
    ToString(): string;
    category: UnityEditor.AssetStoreContext.LabelAndId;
    description: string;
    id: string;
    link: UnityEditor.AssetStoreContext.Link;
    local_icon: string;
    local_path: string;
    pubdate: string;
    publisher: UnityEditor.AssetStoreContext.LabelAndId;
    title: string;
    version: string;
    version_id: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class PackageList extends System.Object {
    constructor();
    results: UnityEditor.AssetStoreContext.Package[];
  }
}
declare namespace UnityEditorInternal {
  class AssetStoreToolUtils extends System.Object {
    constructor();
    static BuildAssetStoreAssetBundle(targetObject: UnityEngine.Object, targetPath: string): boolean;
    static PreviewAssetStoreAssetBundleInInspector(bundle: any, info: UnityEditor.AssetStoreAsset): boolean;
    static UpdatePreloadingInternal(): void;
  }
}
declare namespace UnityEditor {
  class AssetStoreUtils extends System.Object {
    constructor();
    static CheckDownload(id: string, url: string, destination: string[], key: string): string;
    static Download(id: string, url: string, destination: string[], key: string, jsonData: string, resumeOK: boolean): void;
    static Download(id: string, url: string, destination: string[], key: string, jsonData: string, resumeOK: boolean, doneCallback: ((package_id: string, message: string, bytes: number, total: number) => void)): void;
    static GetAssetStoreSearchUrl(): string;
    static GetAssetStoreUrl(): string;
    static GetLoaderPath(): string;
    static GetOfflinePath(): string;
    static RegisterDownloadDelegate(d: UnityEngine.ScriptableObject): void;
    static UnRegisterDownloadDelegate(d: UnityEngine.ScriptableObject): void;
    static UpdatePreloading(): void;
  }
}
declare namespace UnityEditor {
  class AsyncHTTPClient extends System.Object {
    constructor(_toUrl: string);
    constructor(_toUrl: string, _method: string);
    Abort(): void;
    static AbortByTag(tag: string): void;
    Begin(): void;
    static CurlRequestCheck(): void;
    IsAborted(): boolean;
    IsDone(): boolean;
    static IsDone(state: UnityEditor.AsyncHTTPClient.State): boolean;
    IsSuccess(): boolean;
    static IsSuccess(state: UnityEditor.AsyncHTTPClient.State): boolean;
    readonly bytes: number[];
    readonly responseCode: number;
    readonly state: UnityEditor.AsyncHTTPClient.State;
    tag: string;
    readonly text: string;
    readonly texture: any;
    readonly url: string;
    doneCallback: ((client: UnityEditor.AsyncHTTPClient) => void);
    header: any;
    statusCallback: ((status: UnityEditor.AsyncHTTPClient.State, bytesDone: number, bytesTotal: number) => void);
  }
}
declare namespace UnityEditor.AsyncHTTPClient {
  class State extends System.Enum {
    protected constructor();
    static ABORTED: UnityEditor.AsyncHTTPClient.State;
    static CONFIRMING: UnityEditor.AsyncHTTPClient.State;
    static CONNECTED: UnityEditor.AsyncHTTPClient.State;
    static CONNECTING: UnityEditor.AsyncHTTPClient.State;
    static DONE_FAILED: UnityEditor.AsyncHTTPClient.State;
    static DONE_OK: UnityEditor.AsyncHTTPClient.State;
    static DOWNLOADING: UnityEditor.AsyncHTTPClient.State;
    static INIT: UnityEditor.AsyncHTTPClient.State;
    static TIMEOUT: UnityEditor.AsyncHTTPClient.State;
    static UPLOADING: UnityEditor.AsyncHTTPClient.State;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AudioUtil extends System.Object {
    constructor();
    static GetAmbisonicDecoderPluginNames(): string[];
    static GetBitRate(clip: any): number;
    static GetBitsPerSample(clip: any): number;
    static GetChannelCount(clip: any): number;
    static GetClipPosition(clip: any): number;
    static GetClipSamplePosition(clip: any): number;
    static GetCustomFilterChannelCount(behaviour: UnityEngine.MonoBehaviour): number;
    static GetCustomFilterMaxIn(behaviour: UnityEngine.MonoBehaviour, channel: number): number;
    static GetCustomFilterMaxOut(behaviour: UnityEngine.MonoBehaviour, channel: number): number;
    static GetCustomFilterProcessTime(behaviour: UnityEngine.MonoBehaviour): number;
    static GetDuration(clip: any): number;
    static GetFMODCPUUsage(): number;
    static GetFMODMemoryAllocated(): number;
    static GetFrequency(clip: any): number;
    static GetImporterFromClip(clip: any): UnityEditor.AudioImporter;
    static GetListenerPos(): any;
    static GetLowpassCurve(lowPassFilter: any): any;
    static GetMinMaxData(importer: UnityEditor.AudioImporter): number[];
    static GetMusicChannelCount(clip: any): number;
    static GetSampleCount(clip: any): number;
    static GetSoundCompressionFormat(clip: any): any;
    static GetSoundSize(clip: any): number;
    static GetTargetPlatformSoundCompressionFormat(clip: any): any;
    static HasAudioCallback(behaviour: UnityEngine.MonoBehaviour): boolean;
    static HasPreview(clip: any): boolean;
    static IsClipPlaying(clip: any): boolean;
    static IsMovieAudio(clip: any): boolean;
    static IsTrackerFile(clip: any): boolean;
    static LoopClip(clip: any, on: boolean): void;
    static PauseClip(clip: any): void;
    static PlayClip(clip: any): void;
    static PlayClip(clip: any, startSample: number): void;
    static PlayClip(clip: any, startSample: number, loop: boolean): void;
    static ResumeClip(clip: any): void;
    static SetClipSamplePosition(clip: any, iSamplePosition: number): void;
    static SetListenerTransform(t: any): void;
    static StopAllClips(): void;
    static StopClip(clip: any): void;
    static UpdateAudio(): void;
    static readonly canUseSpatializerEffect: boolean;
    static resetAllAudioClipPlayCountsOnPlay: boolean;
  }
}
declare namespace UnityEditor.Audio {
  class ExposedAudioParameter extends System.ValueType {
    protected constructor();
    guid: UnityEditor.GUID;
    name: string;
  }
}
declare namespace UnityEditor.Audio {
  class MixerGroupView extends System.ValueType {
    protected constructor();
    guids: UnityEditor.GUID[];
    name: string;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerController extends UnityEngine.Audio.AudioMixer {
    constructor();
    AddChildToParent(child: UnityEditor.Audio.AudioMixerGroupController, parent: UnityEditor.Audio.AudioMixerGroupController): void;
    AddExposedParameter(path: UnityEditor.Audio.AudioParameterPath): void;
    AddGroupToCurrentView(group: UnityEditor.Audio.AudioMixerGroupController): void;
    AreAnyOfTheGroupsInTheListAncestors(groups: UnityEditor.Audio.AudioMixerGroupController[]): boolean;
    BuildTestSetup(minSpan: number, maxSpan: number, maxGroups: number): void;
    ClearEventHandlers(): void;
    ClearSendConnectionsTo(sendTarget: UnityEditor.Audio.AudioMixerEffectController): void;
    CloneNewSnapshotFromTarget(storeUndoState: boolean): void;
    CloneViewFromCurrent(): void;
    ContainsExposedParameter(parameter: UnityEditor.GUID): boolean;
    CopyAllSettingsToAllSnapshots(group: UnityEditor.Audio.AudioMixerGroupController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): void;
    CopyAttenuationToAllSnapshots(group: UnityEditor.Audio.AudioMixerGroupController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): void;
    CopyEffect(sourceEffect: UnityEditor.Audio.AudioMixerEffectController): UnityEditor.Audio.AudioMixerEffectController;
    CopyEffectSettingsToAllSnapshots(group: UnityEditor.Audio.AudioMixerGroupController, effectIndex: number, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, includeWetParam: boolean): void;
    CreateDefaultAsset(path: string): void;
    static CreateMixerControllerAtPath(path: string): UnityEditor.Audio.AudioMixerController;
    CreateNewGroup(name: string, storeUndoState: boolean): UnityEditor.Audio.AudioMixerGroupController;
    CurrentViewContainsGroup(group: UnityEditor.GUID): boolean;
    static DbToLin(x: number): number;
    DeleteGroups(groups: UnityEditor.Audio.AudioMixerGroupController[]): void;
    DeleteView(index: number): void;
    static DoesTheTemporaryGraphHaveAnyCycles(allGroups: UnityEditor.Audio.AudioMixerGroupController[], identifiedLoop: UnityEditor.Audio.AudioMixerController.ConnectionNode[], graph: any): boolean;
    DuplicateGroups(sourceGroups: UnityEditor.Audio.AudioMixerGroupController[], recordUndo: boolean): UnityEditor.Audio.AudioMixerGroupController[];
    static EditingTargetSnapshot(): boolean;
    FindParentGroup(node: UnityEditor.Audio.AudioMixerGroupController, group: UnityEditor.Audio.AudioMixerGroupController): UnityEditor.Audio.AudioMixerGroupController;
    static FixNameForPopupMenu(s: string): string;
    ForceSetView(index: number): void;
    GetAllAudioGroupsSlow(): UnityEditor.Audio.AudioMixerGroupController[];
    GetCurrentViewGroupList(): UnityEditor.Audio.AudioMixerGroupController[];
    GetGroupVUInfo(group: UnityEditor.GUID, fader: boolean, vuLevel: any, vuPeak: any): number;
    HasMoreThanOneGroup(): boolean;
    static InsertEffect(effect: UnityEditor.Audio.AudioMixerEffectController, targetEffects: any, targetIndex: number): boolean;
    static MoveEffect(sourceEffects: any, sourceIndex: number, targetEffects: any, targetIndex: number): boolean;
    OnChangedExposedParameter(): void;
    OnSubAssetChanged(): void;
    OnUnitySelectionChanged(): void;
    RemoveEffect(effect: UnityEditor.Audio.AudioMixerEffectController, group: UnityEditor.Audio.AudioMixerGroupController): void;
    RemoveExposedParameter(parameter: UnityEditor.GUID): void;
    RemoveGroupsFromParent(groups: UnityEditor.Audio.AudioMixerGroupController[], storeUndoState: boolean): void;
    RemoveSnapshot(snapshot: UnityEditor.Audio.AudioMixerSnapshotController): void;
    RemoveTargetSnapshot(): void;
    ReparentSelection(newParent: UnityEditor.Audio.AudioMixerGroupController, insertionIndex: number, selection: UnityEditor.Audio.AudioMixerGroupController[]): void;
    ResolveExposedParameterPath(parameter: UnityEditor.GUID, getOnlyBasePath: boolean): string;
    SanitizeGroupViews(): void;
    SetCurrentViewVisibility(guids: UnityEditor.GUID[]): void;
    SetView(index: number): void;
    UpdateBypass(): void;
    UpdateMuteSolo(): void;
    static VolumeToScreenMapping(value: number, screenRange: number, forward: boolean): number;
    static WillChangeOfEffectTargetCauseFeedback(allGroups: UnityEditor.Audio.AudioMixerGroupController[], groupWhoseEffectIsChanged: UnityEditor.Audio.AudioMixerGroupController, effectWhoseTargetIsChanged: number, targetToTest: UnityEditor.Audio.AudioMixerEffectController, identifiedLoop: UnityEditor.Audio.AudioMixerController.ConnectionNode[]): boolean;
    static WillModificationOfTopologyCauseFeedback(allGroups: UnityEditor.Audio.AudioMixerGroupController[], groupsToBeMoved: UnityEditor.Audio.AudioMixerGroupController[], newParentForMovedGroups: UnityEditor.Audio.AudioMixerGroupController, identifiedLoop: UnityEditor.Audio.AudioMixerController.ConnectionNode[]): boolean;
    static WillMovingEffectCauseFeedback(allGroups: UnityEditor.Audio.AudioMixerGroupController[], sourceGroup: UnityEditor.Audio.AudioMixerGroupController, sourceIndex: number, targetGroup: UnityEditor.Audio.AudioMixerGroupController, targetIndex: number, identifiedLoop: UnityEditor.Audio.AudioMixerController.ConnectionNode[]): boolean;
    readonly allGroups: UnityEditor.Audio.AudioMixerGroupController[];
    readonly CachedSelection: UnityEditor.Audio.AudioMixerGroupController[];
    currentViewIndex: number;
    exposedParameters: UnityEditor.Audio.ExposedAudioParameter[];
    readonly isSuspended: boolean;
    masterGroup: UnityEditor.Audio.AudioMixerGroupController;
    readonly numExposedParameters: number;
    snapshots: UnityEditor.Audio.AudioMixerSnapshotController[];
    startSnapshot: UnityEngine.Audio.AudioMixerSnapshot;
    TargetSnapshot: UnityEditor.Audio.AudioMixerSnapshotController;
    views: UnityEditor.Audio.MixerGroupView[];
    static kMaxEffect: number;
    static kMinVolume: number;
    static kVolumeWarp: number;
    m_HighlightEffectIndex: number;
    static s_GroupEffectDisplaySeperator: string;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixer extends UnityEngine.Object {
    protected constructor();
    ClearFloat(name: string): boolean;
    FindMatchingGroups(subPath: string): UnityEngine.Audio.AudioMixerGroup[];
    FindSnapshot(name: string): UnityEngine.Audio.AudioMixerSnapshot;
    GetFloat(name: string, value: any): boolean;
    SetFloat(name: string, value: number): boolean;
    TransitionToSnapshots(snapshots: UnityEngine.Audio.AudioMixerSnapshot[], weights: number[], timeToReach: number): void;
    outputAudioMixerGroup: UnityEngine.Audio.AudioMixerGroup;
    updateMode: any;
  }
}
declare namespace UnityEditor.Audio.AudioMixerController {
  class ConnectionNode extends System.Object {
    constructor();
    GetDisplayString(): string;
    effect: UnityEditor.Audio.AudioMixerEffectController;
    group: UnityEditor.Audio.AudioMixerGroupController;
    groupTail: any;
    targets: any[];
    visited: boolean;
  }
}
declare namespace UnityEditor.Audio {
  class MixerParameterDefinition extends System.ValueType {
    protected constructor();
    defaultValue: number;
    description: string;
    displayExponent: number;
    displayScale: number;
    maxRange: number;
    minRange: number;
    name: string;
    units: string;
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectDefinitions extends System.Object {
    constructor();
    static ClearDefinitions(): void;
    static EffectCanBeSidechainTarget(effect: UnityEditor.Audio.AudioMixerEffectController): boolean;
    static EffectExists(name: string): boolean;
    static GetAudioEffectNames(): string[];
    static GetAudioEffectParameterDesc(effectName: string): UnityEditor.Audio.MixerParameterDefinition[];
    static GetEffectList(): string[];
    static GetEffectParameters(effect: string): UnityEditor.Audio.MixerParameterDefinition[];
    static Refresh(): void;
    static RegisterAudioMixerEffect(name: string, definitions: UnityEditor.Audio.MixerParameterDefinition[]): boolean;
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectParameter extends System.ValueType {
    protected constructor();
    GUID: UnityEditor.GUID;
    parameterName: string;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerEffectController extends UnityEngine.Object {
    constructor(name: string);
    ClearCachedDisplayName(): void;
    ContainsParameterGUID(guid: UnityEditor.GUID): boolean;
    DisallowsBypass(): boolean;
    GetCPUUsage(controller: UnityEditor.Audio.AudioMixerController): number;
    GetDisplayString(effectMap: any): string;
    GetFloatBuffer(controller: UnityEditor.Audio.AudioMixerController, name: string, data: any, numsamples: number): boolean;
    GetGUIDForMixLevel(): UnityEditor.GUID;
    GetGUIDForParameter(parameterName: string): UnityEditor.GUID;
    GetSendTargetDisplayString(effectMap: any): string;
    GetValueForMixLevel(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): number;
    GetValueForParameter(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, parameterName: string): number;
    IsAttenuation(): boolean;
    IsDuckVolume(): boolean;
    IsReceive(): boolean;
    IsSend(): boolean;
    PreallocateGUIDs(): void;
    SetValueForMixLevel(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, value: number): void;
    SetValueForParameter(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, parameterName: string, value: number): void;
    bypass: boolean;
    readonly effectID: UnityEditor.GUID;
    readonly effectName: string;
    enableWetMix: boolean;
    sendTarget: UnityEditor.Audio.AudioMixerEffectController;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerGroupController extends UnityEngine.Audio.AudioMixerGroup {
    constructor(owner: UnityEngine.Audio.AudioMixer);
    DumpHierarchy(title: string, level: number): void;
    GetDisplayString(): string;
    GetGUIDForPitch(): UnityEditor.GUID;
    GetGUIDForVolume(): UnityEditor.GUID;
    GetValueForPitch(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): number;
    GetValueForVolume(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): number;
    HasAttenuation(): boolean;
    HasDependentMixers(): boolean;
    InsertEffect(effect: UnityEditor.Audio.AudioMixerEffectController, index: number): void;
    PreallocateGUIDs(): void;
    SetValueForPitch(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, value: number): void;
    SetValueForVolume(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, value: number): void;
    ToString(): string;
    bypassEffects: boolean;
    children: UnityEditor.Audio.AudioMixerGroupController[];
    readonly controller: UnityEditor.Audio.AudioMixerController;
    effects: UnityEditor.Audio.AudioMixerEffectController[];
    readonly groupID: UnityEditor.GUID;
    mute: boolean;
    solo: boolean;
    userColorIndex: number;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixerGroup extends UnityEngine.Object {
    protected constructor();
    readonly audioMixer: UnityEngine.Audio.AudioMixer;
  }
}
declare namespace UnityEditor.Audio {
  class ParameterTransitionType extends System.Enum {
    protected constructor();
    static BrickwallEnd: UnityEditor.Audio.ParameterTransitionType;
    static BrickwallStart: UnityEditor.Audio.ParameterTransitionType;
    static Lerp: UnityEditor.Audio.ParameterTransitionType;
    static Smoothstep: UnityEditor.Audio.ParameterTransitionType;
    static Squared: UnityEditor.Audio.ParameterTransitionType;
    static SquareRoot: UnityEditor.Audio.ParameterTransitionType;
    value__: number;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerSnapshotController extends UnityEngine.Audio.AudioMixerSnapshot {
    constructor(owner: UnityEngine.Audio.AudioMixer);
    ClearTransitionTypeOverride(guid: UnityEditor.GUID): void;
    GetTransitionTypeOverride(guid: UnityEditor.GUID, type: any): boolean;
    GetValue(guid: UnityEditor.GUID, value: any): boolean;
    SetTransitionTypeOverride(guid: UnityEditor.GUID, type: UnityEditor.Audio.ParameterTransitionType): void;
    SetValue(guid: UnityEditor.GUID, value: number): void;
    readonly snapshotID: UnityEditor.GUID;
  }
}
declare namespace UnityEngine.Audio {
  class AudioMixerSnapshot extends UnityEngine.Object {
    protected constructor();
    TransitionTo(timeToReach: number): void;
    readonly audioMixer: UnityEngine.Audio.AudioMixer;
  }
}
declare namespace UnityEditor {
  class IMGUIDrawInstruction extends System.ValueType {
    protected constructor();
    Reset(): void;
    rect: any;
    stackframes: UnityEditor.StackFrame[];
    usedGUIContent: any;
    usedGUIStyle: any;
  }
}
declare namespace UnityEditor {
  class IMGUIClipInstruction extends System.ValueType {
    protected constructor();
    level: number;
    popStacktrace: UnityEditor.StackFrame[];
    pushStacktrace: UnityEditor.StackFrame[];
    renderOffset: any;
    resetOffset: boolean;
    screenRect: any;
    scrollOffset: any;
    unclippedScreenRect: any;
  }
}
declare namespace UnityEditor {
  class IMGUILayoutInstruction extends System.ValueType {
    protected constructor();
    isGroup: number;
    isVertical: number;
    level: number;
    marginBottom: number;
    marginLeft: number;
    marginRight: number;
    marginTop: number;
    stack: UnityEditor.StackFrame[];
    style: any;
    unclippedRect: any;
  }
}
declare namespace UnityEditor {
  class IMGUINamedControlInstruction extends System.ValueType {
    protected constructor();
    id: number;
    name: string;
    rect: any;
  }
}
declare namespace UnityEditor {
  class IMGUIPropertyInstruction extends System.ValueType {
    protected constructor();
    beginStacktrace: UnityEditor.StackFrame[];
    endStacktrace: UnityEditor.StackFrame[];
    path: string;
    rect: any;
    targetTypeName: string;
  }
}
declare namespace UnityEditor {
  class InstructionType extends System.Enum {
    protected constructor();
    static kClipPop: UnityEditor.InstructionType;
    static kClipPush: UnityEditor.InstructionType;
    static kLayoutBeginGroup: UnityEditor.InstructionType;
    static kLayoutEndGroup: UnityEditor.InstructionType;
    static kLayoutEntry: UnityEditor.InstructionType;
    static kLayoutNamedControl: UnityEditor.InstructionType;
    static kPropertyBegin: UnityEditor.InstructionType;
    static kPropertyEnd: UnityEditor.InstructionType;
    static kStyleDraw: UnityEditor.InstructionType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IMGUIInstruction extends System.ValueType {
    protected constructor();
    level: number;
    stack: UnityEditor.StackFrame[];
    type: UnityEditor.InstructionType;
    typeInstructionIndex: number;
    unclippedRect: any;
  }
}
declare namespace UnityEditor {
  class GUIViewDebuggerHelper extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class MuscleClipQualityInfo extends System.Object {
    constructor();
    loop: number;
    loopOrientation: number;
    loopPositionXZ: number;
    loopPositionY: number;
  }
}
declare namespace UnityEditor {
  class QualityCurvesTime extends System.ValueType {
    protected constructor();
    fixedTime: number;
    q: number;
    variableEndEnd: number;
    variableEndStart: number;
  }
}
declare namespace UnityEditor {
  class MuscleClipEditorUtilities extends System.Object {
    constructor();
    static CalculateQualityCurves(clip: any, time: UnityEditor.QualityCurvesTime, poseCurve: any[], rotationCurve: any[], heightCurve: any[], positionCurve: any[]): void;
    static GetMuscleClipQualityInfo(clip: any, startTime: number, stopTime: number): UnityEditor.MuscleClipQualityInfo;
  }
}
declare namespace UnityEditor {
  class TransformX extends System.ValueType {
    protected constructor();
    position: any;
    rotation: any;
    scale: any;
  }
}
declare namespace UnityEditor {
  class AvatarUtility extends System.Object {
    constructor();
    static HumanGetColliderTransform(avatar: any, index: number, boneX: UnityEditor.TransformX, colliderX: any): void;
    static SetHumanPose(animator: any, dof: number[]): void;
  }
}
declare namespace UnityEditor.Animations {
  class BlendTreeType extends System.Enum {
    protected constructor();
    static Direct: UnityEditor.Animations.BlendTreeType;
    static FreeformCartesian2D: UnityEditor.Animations.BlendTreeType;
    static FreeformDirectional2D: UnityEditor.Animations.BlendTreeType;
    static Simple1D: UnityEditor.Animations.BlendTreeType;
    static SimpleDirectional2D: UnityEditor.Animations.BlendTreeType;
    value__: number;
  }
}
declare namespace UnityEditor.Animations {
  class ChildMotion extends System.ValueType {
    protected constructor();
    cycleOffset: number;
    directBlendParameter: string;
    mirror: boolean;
    motion: UnityEngine.Motion;
    position: any;
    threshold: number;
    timeScale: number;
  }
}
declare namespace UnityEditor.Animations {
  class BlendTree extends UnityEngine.Motion {
    constructor();
    AddChild(motion: UnityEngine.Motion): void;
    AddChild(motion: UnityEngine.Motion, threshold: number): void;
    AddChild(motion: UnityEngine.Motion, position: any): void;
    CreateBlendTreeChild(threshold: number): UnityEditor.Animations.BlendTree;
    CreateBlendTreeChild(position: any): UnityEditor.Animations.BlendTree;
    RemoveChild(index: number): void;
    blendParameter: string;
    blendParameterY: string;
    blendType: UnityEditor.Animations.BlendTreeType;
    children: UnityEditor.Animations.ChildMotion[];
    maxThreshold: number;
    minThreshold: number;
    useAutomaticThresholds: boolean;
  }
}
declare namespace UnityEngine {
  class Motion extends UnityEngine.Object {
    constructor();
    ValidateIfRetargetable(val: boolean): boolean;
    readonly apparentSpeed: number;
    readonly averageAngularSpeed: number;
    readonly averageDuration: number;
    readonly averageSpeed: any;
    readonly isAnimatorMotion: boolean;
    readonly isHumanMotion: boolean;
    readonly isLooping: boolean;
    readonly legacy: boolean;
  }
}
declare namespace UnityEditorInternal {
  class BlendTreePreviewUtility extends System.Object {
    constructor();
    static CalculateBlendTexture(animator: any, layerIndex: number, stateHash: number, blendTexture: any, weightTextures: any[], rect: any): void;
    static CalculateRootBlendTreeChildWeights(animator: any, layerIndex: number, stateHash: number, weightArray: number[], blendX: number, blendY: number): void;
    static GetRootBlendTreeChildWeights(animator: any, layerIndex: number, stateHash: number, weightArray: number[]): void;
  }
}
declare namespace UnityEditor {
  class BuildOptions extends System.Enum {
    protected constructor();
    static AcceptExternalModificationsToPlayer: UnityEditor.BuildOptions;
    static AllowDebugging: UnityEditor.BuildOptions;
    static AutoRunPlayer: UnityEditor.BuildOptions;
    static BuildAdditionalStreamedScenes: UnityEditor.BuildOptions;
    static BuildScriptsOnly: UnityEditor.BuildOptions;
    static CompressTextures: UnityEditor.BuildOptions;
    static CompressWithLz4: UnityEditor.BuildOptions;
    static CompressWithLz4HC: UnityEditor.BuildOptions;
    static ComputeCRC: UnityEditor.BuildOptions;
    static ConnectToHost: UnityEditor.BuildOptions;
    static ConnectWithProfiler: UnityEditor.BuildOptions;
    static Development: UnityEditor.BuildOptions;
    static EnableHeadlessMode: UnityEditor.BuildOptions;
    static ForceEnableAssertions: UnityEditor.BuildOptions;
    static ForceOptimizeScriptCompilation: UnityEditor.BuildOptions;
    static Il2CPP: UnityEditor.BuildOptions;
    static InstallInBuildFolder: UnityEditor.BuildOptions;
    static None: UnityEditor.BuildOptions;
    static ShowBuiltPlayer: UnityEditor.BuildOptions;
    static StrictMode: UnityEditor.BuildOptions;
    static StripDebugSymbols: UnityEditor.BuildOptions;
    static SymlinkLibraries: UnityEditor.BuildOptions;
    static UncompressedAssetBundle: UnityEditor.BuildOptions;
    value__: number;
    static WebPlayerOfflineDeployment: UnityEditor.BuildOptions;
  }
}
declare namespace UnityEditor {
  class BuildAssetBundleOptions extends System.Enum {
    protected constructor();
    static AppendHashToAssetBundleName: UnityEditor.BuildAssetBundleOptions;
    static ChunkBasedCompression: UnityEditor.BuildAssetBundleOptions;
    static CollectDependencies: UnityEditor.BuildAssetBundleOptions;
    static CompleteAssets: UnityEditor.BuildAssetBundleOptions;
    static DeterministicAssetBundle: UnityEditor.BuildAssetBundleOptions;
    static DisableLoadAssetByFileName: UnityEditor.BuildAssetBundleOptions;
    static DisableLoadAssetByFileNameWithExtension: UnityEditor.BuildAssetBundleOptions;
    static DisableWriteTypeTree: UnityEditor.BuildAssetBundleOptions;
    static DryRunBuild: UnityEditor.BuildAssetBundleOptions;
    static ForceRebuildAssetBundle: UnityEditor.BuildAssetBundleOptions;
    static IgnoreTypeTreeChanges: UnityEditor.BuildAssetBundleOptions;
    static None: UnityEditor.BuildAssetBundleOptions;
    static StrictMode: UnityEditor.BuildAssetBundleOptions;
    static UncompressedAssetBundle: UnityEditor.BuildAssetBundleOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssetBundleBuild extends System.ValueType {
    protected constructor();
    addressableNames: string[];
    assetBundleName: string;
    assetBundleVariant: string;
    assetNames: string[];
  }
}
declare namespace UnityEditor {
  class BuildPlayerOptions extends System.ValueType {
    protected constructor();
    assetBundleManifestPath: string;
    locationPathName: string;
    options: UnityEditor.BuildOptions;
    scenes: string[];
    target: UnityEditor.BuildTarget;
    targetGroup: UnityEditor.BuildTargetGroup;
  }
}
declare namespace UnityEditor {
  class BuildPipeline extends System.Object {
    constructor();
    static BuildAssetBundle(mainAsset: UnityEngine.Object, assets: UnityEngine.Object[], pathName: string, crc: any, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundle(mainAsset: UnityEngine.Object, assets: UnityEngine.Object[], pathName: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: UnityEngine.Object[], assetNames: string[], pathName: string, crc: any, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: UnityEngine.Object[], assetNames: string[], pathName: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundles(outputPath: string, builds: UnityEditor.AssetBundleBuild[], assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): any;
    static BuildAssetBundles(outputPath: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): any;
    static BuildPlayer(levels: string[], locationPathName: string, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static BuildPlayer(buildPlayerOptions: UnityEditor.BuildPlayerOptions): string;
    static BuildPlayer(levels: UnityEditor.EditorBuildSettingsScene[], locationPathName: string, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget, crc: any): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget, crc: any, options: UnityEditor.BuildOptions): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static GetBuildTargetGroup(platform: UnityEditor.BuildTarget): UnityEditor.BuildTargetGroup;
    static GetCRCForAssetBundle(targetPath: string, crc: any): boolean;
    static GetHashForAssetBundle(targetPath: string, hash: any): boolean;
    static PopAssetDependencies(): void;
    static PushAssetDependencies(): void;
    static readonly isBuildingPlayer: boolean;
  }
}
declare namespace UnityEditor {
  class BuildTarget extends System.Enum {
    protected constructor();
    static Android: UnityEditor.BuildTarget;
    static BB10: UnityEditor.BuildTarget;
    static BlackBerry: UnityEditor.BuildTarget;
    static iOS: UnityEditor.BuildTarget;
    static iPhone: UnityEditor.BuildTarget;
    static MetroPlayer: UnityEditor.BuildTarget;
    static N3DS: UnityEditor.BuildTarget;
    static NoTarget: UnityEditor.BuildTarget;
    static PS3: UnityEditor.BuildTarget;
    static PS4: UnityEditor.BuildTarget;
    static PSM: UnityEditor.BuildTarget;
    static PSP2: UnityEditor.BuildTarget;
    static SamsungTV: UnityEditor.BuildTarget;
    static StandaloneLinux: UnityEditor.BuildTarget;
    static StandaloneLinux64: UnityEditor.BuildTarget;
    static StandaloneLinuxUniversal: UnityEditor.BuildTarget;
    static StandaloneOSXIntel: UnityEditor.BuildTarget;
    static StandaloneOSXIntel64: UnityEditor.BuildTarget;
    static StandaloneOSXUniversal: UnityEditor.BuildTarget;
    static StandaloneWindows: UnityEditor.BuildTarget;
    static StandaloneWindows64: UnityEditor.BuildTarget;
    static Switch: UnityEditor.BuildTarget;
    static Tizen: UnityEditor.BuildTarget;
    static tvOS: UnityEditor.BuildTarget;
    value__: number;
    static WebGL: UnityEditor.BuildTarget;
    static WebPlayer: UnityEditor.BuildTarget;
    static WebPlayerStreamed: UnityEditor.BuildTarget;
    static WiiU: UnityEditor.BuildTarget;
    static WP8Player: UnityEditor.BuildTarget;
    static WSAPlayer: UnityEditor.BuildTarget;
    static XBOX360: UnityEditor.BuildTarget;
    static XboxOne: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor {
  class BuildTargetGroup extends System.Enum {
    protected constructor();
    static Android: UnityEditor.BuildTargetGroup;
    static BlackBerry: UnityEditor.BuildTargetGroup;
    static Facebook: UnityEditor.BuildTargetGroup;
    static iOS: UnityEditor.BuildTargetGroup;
    static iPhone: UnityEditor.BuildTargetGroup;
    static Metro: UnityEditor.BuildTargetGroup;
    static N3DS: UnityEditor.BuildTargetGroup;
    static PS3: UnityEditor.BuildTargetGroup;
    static PS4: UnityEditor.BuildTargetGroup;
    static PSM: UnityEditor.BuildTargetGroup;
    static PSP2: UnityEditor.BuildTargetGroup;
    static SamsungTV: UnityEditor.BuildTargetGroup;
    static Standalone: UnityEditor.BuildTargetGroup;
    static Switch: UnityEditor.BuildTargetGroup;
    static Tizen: UnityEditor.BuildTargetGroup;
    static tvOS: UnityEditor.BuildTargetGroup;
    static Unknown: UnityEditor.BuildTargetGroup;
    value__: number;
    static WebGL: UnityEditor.BuildTargetGroup;
    static WebPlayer: UnityEditor.BuildTargetGroup;
    static WiiU: UnityEditor.BuildTargetGroup;
    static WP8: UnityEditor.BuildTargetGroup;
    static WSA: UnityEditor.BuildTargetGroup;
    static XBOX360: UnityEditor.BuildTargetGroup;
    static XboxOne: UnityEditor.BuildTargetGroup;
  }
}
declare namespace UnityEditor {
  class ChangeTrackerHandle extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEditorInternal {
  class ComponentUtility extends System.Object {
    constructor();
    static CopyComponent(component: UnityEngine.Component): boolean;
    static DestroyComponentsMatching(dst: any, componentFilter: ((c: UnityEngine.Component) => boolean)): void;
    static MoveComponentDown(component: UnityEngine.Component): boolean;
    static MoveComponentUp(component: UnityEngine.Component): boolean;
    static PasteComponentAsNew(go: any): boolean;
    static PasteComponentValues(component: UnityEngine.Component): boolean;
    static ReplaceComponentsIfDifferent(src: any, dst: any, componentFilter: ((c: UnityEngine.Component) => boolean)): void;
  }
}
declare namespace UnityEditor {
  class ShowMode extends System.Enum {
    protected constructor();
    static AuxWindow: UnityEditor.ShowMode;
    static MainWindow: UnityEditor.ShowMode;
    static NormalWindow: UnityEditor.ShowMode;
    static NoShadow: UnityEditor.ShowMode;
    static PopupMenu: UnityEditor.ShowMode;
    static PopupMenuWithKeyboardFocus: UnityEditor.ShowMode;
    static Utility: UnityEditor.ShowMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ContainerWindow extends UnityEngine.ScriptableObject {
    constructor();
    Close(): void;
    DisplayAllViews(): void;
    HandleWindowDecorationEnd(windowPosition: any): void;
    HandleWindowDecorationStart(windowPosition: any): void;
    InternalClose(): void;
    IsZoomed(): boolean;
    Minimize(): void;
    MoveBehindOf(other: UnityEditor.ContainerWindow): void;
    MoveInFrontOf(other: UnityEditor.ContainerWindow): void;
    OnDestroy(): void;
    OnEnable(): void;
    Save(): void;
    SetAlpha(alpha: number): void;
    static SetFreezeDisplay(freeze: boolean): void;
    SetInvisible(): void;
    SetMinMaxSizes(min: any, max: any): void;
    Show(showMode: UnityEditor.ShowMode, loadPosition: boolean, displayImmediately: boolean): void;
    ToggleMaximize(): void;
    WindowToScreenPoint(windowPoint: any): any;
    readonly maximized: boolean;
    position: any;
    readonly rootSplitView: UnityEditor.SplitView;
    rootView: UnityEditor.View;
    title: string;
    static readonly windows: UnityEditor.ContainerWindow[];
  }
}
declare namespace UnityEditor.ContainerWindow {
  class Styles extends System.Object {
    protected constructor();
    static buttonClose: any;
    static buttonInactive: any;
    static buttonMax: any;
    static buttonMin: any;
  }
}
declare namespace UnityEditor {
  class DefaultAsset extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class DefaultAssetInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class Editor extends UnityEngine.ScriptableObject {
    constructor();
    static CreateCachedEditor(targetObject: UnityEngine.Object, editorType: any, previousEditor: any): void;
    static CreateCachedEditor(targetObjects: UnityEngine.Object[], editorType: any, previousEditor: any): void;
    static CreateCachedEditorWithContext(targetObject: UnityEngine.Object, context: UnityEngine.Object, editorType: any, previousEditor: any): void;
    static CreateCachedEditorWithContext(targetObjects: UnityEngine.Object[], context: UnityEngine.Object, editorType: any, previousEditor: any): void;
    static CreateEditor(targetObject: UnityEngine.Object): UnityEditor.Editor;
    static CreateEditor(targetObject: UnityEngine.Object, editorType: any): UnityEditor.Editor;
    static CreateEditor(targetObjects: UnityEngine.Object[]): UnityEditor.Editor;
    static CreateEditor(targetObjects: UnityEngine.Object[], editorType: any): UnityEditor.Editor;
    static CreateEditorWithContext(targetObjects: UnityEngine.Object[], context: UnityEngine.Object): UnityEditor.Editor;
    static CreateEditorWithContext(targetObjects: UnityEngine.Object[], context: UnityEngine.Object, editorType: any): UnityEditor.Editor;
    DrawDefaultInspector(): boolean;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    GetInfoString(): string;
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    MoveNextTarget(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    Repaint(): void;
    RequiresConstantRepaint(): boolean;
    ResetTarget(): void;
    UseDefaultMargins(): boolean;
    readonly serializedObject: UnityEditor.SerializedObject;
    target: UnityEngine.Object;
    readonly targets: UnityEngine.Object[];
  }
}
declare namespace UnityEditor {
  class CustomEditor extends System.Attribute {
    constructor(inspectedType: any);
    constructor(inspectedType: any, editorForChildClasses: boolean);
    isFallback: boolean;
  }
}
declare namespace System {
  class Attribute extends System.Object {
    protected constructor();
    Equals(obj: any): boolean;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any): System.Attribute;
    static GetCustomAttribute(element: any, attributeType: any, inherit: boolean): System.Attribute;
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, type: any): System.Attribute[];
    static GetCustomAttributes(element: any, type: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any): System.Attribute[];
    static GetCustomAttributes(element: any, inherit: boolean): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any): System.Attribute[];
    static GetCustomAttributes(element: any, attributeType: any, inherit: boolean): System.Attribute[];
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    static IsDefined(element: any, attributeType: any): boolean;
    static IsDefined(element: any, attributeType: any, inherit: boolean): boolean;
    Match(obj: any): boolean;
    readonly TypeId: any;
  }
}
declare namespace UnityEditor {
  class CanEditMultipleObjects extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEditor.Editor {
  class Styles extends System.Object {
    constructor();
    centerStyle: any;
    inspectorBig: any;
    inspectorBigInner: any;
  }
}
declare namespace UnityEditor {
  class EditorApplication extends System.Object {
    constructor();
    static Beep(): void;
    static DirtyHierarchyWindowSorting(): void;
    static ExecuteMenuItem(menuItemPath: string): boolean;
    static Exit(returnValue: number): void;
    static LoadLevelAdditiveAsyncInPlayMode(path: string): any;
    static LoadLevelAdditiveInPlayMode(path: string): void;
    static LoadLevelAsyncInPlayMode(path: string): any;
    static LoadLevelInPlayMode(path: string): void;
    static LockReloadAssemblies(): void;
    static MarkSceneDirty(): void;
    static NewEmptyScene(): void;
    static NewScene(): void;
    static OpenProject(projectPath: string, args: string[]): void;
    static OpenScene(path: string): boolean;
    static OpenSceneAdditive(path: string): void;
    static QueuePlayerLoopUpdate(): void;
    static RepaintAnimationWindow(): void;
    static RepaintHierarchyWindow(): void;
    static RepaintProjectWindow(): void;
    static SaveAssets(): void;
    static SaveCurrentSceneIfUserWantsTo(): boolean;
    static SaveScene(): boolean;
    static SaveScene(path: string): boolean;
    static SaveScene(path: string, saveAsCopy: boolean): boolean;
    static SetTemporaryProjectKeepPath(path: string): void;
    static Step(): void;
    static UnlockReloadAssemblies(): void;
    static readonly applicationContentsPath: string;
    static readonly applicationPath: string;
    static currentScene: string;
    static readonly isCompiling: boolean;
    static isPaused: boolean;
    static isPlaying: boolean;
    static readonly isPlayingOrWillChangePlaymode: boolean;
    static readonly isRemoteConnected: boolean;
    static readonly isSceneDirty: boolean;
    static readonly isTemporaryProject: boolean;
    static readonly isUpdating: boolean;
    static readonly scriptingRuntimeVersion: UnityEditor.ScriptingRuntimeVersion;
    static readonly timeSinceStartup: number;
    static contextualPropertyMenu: ((menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) => void);
    static delayCall: (() => void);
    static hierarchyWindowChanged: (() => void);
    static hierarchyWindowItemOnGUI: ((instanceID: number, selectionRect: any) => void);
    static modifierKeysChanged: (() => void);
    static playmodeStateChanged: (() => void);
    static projectWindowChanged: (() => void);
    static projectWindowItemOnGUI: ((guid: string, selectionRect: any) => void);
    static searchChanged: (() => void);
    static update: (() => void);
  }
}
declare namespace UnityEditor {
  class EditorConnectionInternal extends System.Object {
    constructor();
    static Connect(IP: string, port: number): number;
    static DisconnectAll(): void;
    static Initialize(): void;
    IsConnected(): boolean;
    static RegisterInternal(messageId: string): void;
    static SendMessage(messageId: string, data: number[], playerId: number): void;
    static UnregisterInternal(messageId: string): void;
  }
}
declare namespace UnityEditor {
  class PSMBuildSubtarget extends System.Enum {
    protected constructor();
    static DevAssistant: UnityEditor.PSMBuildSubtarget;
    static Intermediate: UnityEditor.PSMBuildSubtarget;
    static Master: UnityEditor.PSMBuildSubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PSP2BuildSubtarget extends System.Enum {
    protected constructor();
    static Package: UnityEditor.PSP2BuildSubtarget;
    static PCHosted: UnityEditor.PSP2BuildSubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PS4BuildSubtarget extends System.Enum {
    protected constructor();
    static Iso: UnityEditor.PS4BuildSubtarget;
    static Package: UnityEditor.PS4BuildSubtarget;
    static PCHosted: UnityEditor.PS4BuildSubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PS4HardwareTarget extends System.Enum {
    protected constructor();
    static BaseOnly: UnityEditor.PS4HardwareTarget;
    static NeoAndBase: UnityEditor.PS4HardwareTarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WiiUBuildDebugLevel extends System.Enum {
    protected constructor();
    static Debug: UnityEditor.WiiUBuildDebugLevel;
    static DebugOptimized: UnityEditor.WiiUBuildDebugLevel;
    static Development: UnityEditor.WiiUBuildDebugLevel;
    static Master: UnityEditor.WiiUBuildDebugLevel;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WiiUBuildOutput extends System.Enum {
    protected constructor();
    static DownloadImage: UnityEditor.WiiUBuildOutput;
    static Unpackaged: UnityEditor.WiiUBuildOutput;
    value__: number;
    static WUMADFile: UnityEditor.WiiUBuildOutput;
  }
}
declare namespace UnityEditor {
  class XboxBuildSubtarget extends System.Enum {
    protected constructor();
    static Debug: UnityEditor.XboxBuildSubtarget;
    static Development: UnityEditor.XboxBuildSubtarget;
    static Master: UnityEditor.XboxBuildSubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class XboxOneDeployMethod extends System.Enum {
    protected constructor();
    static Package: UnityEditor.XboxOneDeployMethod;
    static PackageStreaming: UnityEditor.XboxOneDeployMethod;
    static Pull: UnityEditor.XboxOneDeployMethod;
    static Push: UnityEditor.XboxOneDeployMethod;
    static RunFromPC: UnityEditor.XboxOneDeployMethod;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidBuildSubtarget extends System.Enum {
    protected constructor();
    static ASTC: UnityEditor.AndroidBuildSubtarget;
    static ATC: UnityEditor.AndroidBuildSubtarget;
    static DXT: UnityEditor.AndroidBuildSubtarget;
    static ETC: UnityEditor.AndroidBuildSubtarget;
    static ETC2: UnityEditor.AndroidBuildSubtarget;
    static Generic: UnityEditor.AndroidBuildSubtarget;
    static PVRTC: UnityEditor.AndroidBuildSubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class MobileTextureSubtarget extends System.Enum {
    protected constructor();
    static ASTC: UnityEditor.MobileTextureSubtarget;
    static ATC: UnityEditor.MobileTextureSubtarget;
    static DXT: UnityEditor.MobileTextureSubtarget;
    static ETC: UnityEditor.MobileTextureSubtarget;
    static ETC2: UnityEditor.MobileTextureSubtarget;
    static Generic: UnityEditor.MobileTextureSubtarget;
    static PVRTC: UnityEditor.MobileTextureSubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WSASubtarget extends System.Enum {
    protected constructor();
    static AnyDevice: UnityEditor.WSASubtarget;
    static HoloLens: UnityEditor.WSASubtarget;
    static Mobile: UnityEditor.WSASubtarget;
    static PC: UnityEditor.WSASubtarget;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WSASDK extends System.Enum {
    protected constructor();
    static PhoneSDK81: UnityEditor.WSASDK;
    static SDK80: UnityEditor.WSASDK;
    static SDK81: UnityEditor.WSASDK;
    static UniversalSDK81: UnityEditor.WSASDK;
    static UWP: UnityEditor.WSASDK;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WSAUWPBuildType extends System.Enum {
    protected constructor();
    static D3D: UnityEditor.WSAUWPBuildType;
    value__: number;
    static XAML: UnityEditor.WSAUWPBuildType;
  }
}
declare namespace UnityEditor {
  class WSABuildAndRunDeployTarget extends System.Enum {
    protected constructor();
    static LocalMachine: UnityEditor.WSABuildAndRunDeployTarget;
    static LocalMachineAndWindowsPhone: UnityEditor.WSABuildAndRunDeployTarget;
    value__: number;
    static WindowsPhone: UnityEditor.WSABuildAndRunDeployTarget;
  }
}
declare namespace UnityEditor {
  class WSABuildType extends System.Enum {
    protected constructor();
    static Debug: UnityEditor.WSABuildType;
    static Master: UnityEditor.WSABuildType;
    static Release: UnityEditor.WSABuildType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSBuildType extends System.Enum {
    protected constructor();
    static Debug: UnityEditor.iOSBuildType;
    static Release: UnityEditor.iOSBuildType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class Compression extends System.Enum {
    protected constructor();
    static Lz4: UnityEditor.Compression;
    static Lz4HC: UnityEditor.Compression;
    static None: UnityEditor.Compression;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidBuildSystem extends System.Enum {
    protected constructor();
    static ADT: UnityEditor.AndroidBuildSystem;
    static Gradle: UnityEditor.AndroidBuildSystem;
    static Internal: UnityEditor.AndroidBuildSystem;
    value__: number;
    static VisualStudio: UnityEditor.AndroidBuildSystem;
  }
}
declare namespace UnityEditor {
  class AndroidBuildType extends System.Enum {
    protected constructor();
    static Debug: UnityEditor.AndroidBuildType;
    static Development: UnityEditor.AndroidBuildType;
    static Release: UnityEditor.AndroidBuildType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AppleBuildAndRunType extends System.Enum {
    protected constructor();
    static iOSDeploy: UnityEditor.AppleBuildAndRunType;
    value__: number;
    static Xcode: UnityEditor.AppleBuildAndRunType;
    static Xcodebuild: UnityEditor.AppleBuildAndRunType;
  }
}
declare namespace UnityEditor {
  class AndroidMinification extends System.Enum {
    protected constructor();
    static Gradle: UnityEditor.AndroidMinification;
    static None: UnityEditor.AndroidMinification;
    static Proguard: UnityEditor.AndroidMinification;
    value__: number;
  }
}
declare namespace UnityEditor {
  class EditorBuildSettingsScene extends System.Object {
    constructor();
    constructor(path: string, enable: boolean);
    constructor(guid: UnityEditor.GUID, enable: boolean);
    CompareTo(obj: any): number;
    static GetActiveSceneList(scenes: UnityEditor.EditorBuildSettingsScene[]): string[];
    enabled: boolean;
    guid: UnityEditor.GUID;
    path: string;
  }
}
declare namespace UnityEditor {
  class EditorBuildSettings extends System.Object {
    constructor();
    static scenes: UnityEditor.EditorBuildSettingsScene[];
  }
}
declare namespace UnityEditor {
  class EditorUserBuildSettings extends System.Object {
    constructor();
    static GetBuildLocation(target: UnityEditor.BuildTarget): string;
    static GetPlatformSettings(platformName: string, name: string): string;
    static GetPlatformSettings(buildTargetGroup: string, platformName: string, name: string): string;
    static GetWSADotNetNative(config: UnityEditor.WSABuildType): boolean;
    static SetBuildLocation(target: UnityEditor.BuildTarget, location: string): void;
    static SetPlatformSettings(platformName: string, name: string, value: string): void;
    static SetPlatformSettings(buildTargetGroup: string, buildTarget: string, name: string, value: string): void;
    static SetWSADotNetNative(config: UnityEditor.WSABuildType, enabled: boolean): void;
    static SwitchActiveBuildTarget(target: UnityEditor.BuildTarget): boolean;
    static SwitchActiveBuildTarget(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget): boolean;
    static SwitchActiveBuildTargetAsync(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget): boolean;
    static readonly activeBuildTarget: UnityEditor.BuildTarget;
    static readonly activeScriptCompilationDefines: string[];
    static allowDebugging: boolean;
    static androidBuildSubtarget: UnityEditor.MobileTextureSubtarget;
    static androidBuildSystem: UnityEditor.AndroidBuildSystem;
    static androidBuildType: UnityEditor.AndroidBuildType;
    static androidDebugMinification: UnityEditor.AndroidMinification;
    static androidDeviceSocketAddress: string;
    static androidReleaseMinification: UnityEditor.AndroidMinification;
    static buildScriptsOnly: boolean;
    static compressFilesInPackage: boolean;
    static compressWithPsArc: boolean;
    static connectProfiler: boolean;
    static development: boolean;
    static enableHeadlessMode: boolean;
    static explicitDivideByZeroChecks: boolean;
    static explicitNullChecks: boolean;
    static exportAsGoogleAndroidProject: boolean;
    static forceInstallation: boolean;
    static forceOptimizeScriptCompilation: boolean;
    static installInBuildFolder: boolean;
    static iOSBuildConfigType: UnityEditor.iOSBuildType;
    static n3dsCreateCIAFile: boolean;
    static needSubmissionMaterials: boolean;
    static ps4BuildSubtarget: UnityEditor.PS4BuildSubtarget;
    static ps4HardwareTarget: UnityEditor.PS4HardwareTarget;
    static psmBuildSubtarget: UnityEditor.PSMBuildSubtarget;
    static psp2BuildSubtarget: UnityEditor.PSP2BuildSubtarget;
    static selectedBuildTargetGroup: UnityEditor.BuildTargetGroup;
    static selectedStandaloneTarget: UnityEditor.BuildTarget;
    static streamingInstallLaunchRange: number;
    static switchCreateRomFile: boolean;
    static switchCreateSolutionFile: boolean;
    static switchEnableDebugPad: boolean;
    static switchNVNGraphicsDebugger: boolean;
    static switchRedirectWritesToHostMount: boolean;
    static symlinkLibraries: boolean;
    static tizenBuildSubtarget: UnityEditor.MobileTextureSubtarget;
    static webGLUsePreBuiltUnityEngine: boolean;
    static readonly webPlayerOfflineDeployment: boolean;
    static readonly webPlayerStreamed: boolean;
    static wiiUBootMode: number;
    static wiiUBuildDebugLevel: UnityEditor.WiiUBuildDebugLevel;
    static wiiuBuildOutput: UnityEditor.WiiUBuildOutput;
    static wiiUEnableNetAPI: boolean;
    static wsaBuildAndRunDeployTarget: UnityEditor.WSABuildAndRunDeployTarget;
    static wsaGenerateReferenceProjects: boolean;
    static wsaSDK: UnityEditor.WSASDK;
    static wsaSubtarget: UnityEditor.WSASubtarget;
    static wsaUWPBuildType: UnityEditor.WSAUWPBuildType;
    static wsaUWPSDK: string;
    static xboxBuildSubtarget: UnityEditor.XboxBuildSubtarget;
    static xboxOneAdditionalDebugPorts: string;
    static xboxOneDeployMethod: UnityEditor.XboxOneDeployMethod;
    static xboxOneNetworkSharePath: string;
    static xboxOneRebootIfDeployFailsAndRetry: boolean;
    static xboxOneUsername: string;
    static activeBuildTargetChanged: (() => void);
  }
}
declare namespace UnityEditor.Rendering {
  class AlbedoSwatchInfo extends System.ValueType {
    protected constructor();
    color: any;
    maxLuminance: number;
    minLuminance: number;
    name: string;
  }
}
declare namespace UnityEditor.Rendering {
  class EditorGraphicsSettings extends System.Object {
    constructor();
    static GetShaderSettingsForPlatform(target: UnityEditor.BuildTargetGroup, tier: any): UnityEditor.Rendering.PlatformShaderSettings;
    static GetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any): UnityEditor.Rendering.TierSettings;
    static GetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any): UnityEditor.Rendering.TierSettings;
    static SetShaderSettingsForPlatform(target: UnityEditor.BuildTargetGroup, tier: any, settings: UnityEditor.Rendering.PlatformShaderSettings): void;
    static SetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any, settings: UnityEditor.Rendering.TierSettings): void;
    static SetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any, settings: UnityEditor.Rendering.TierSettings): void;
    static albedoSwatches: UnityEditor.Rendering.AlbedoSwatchInfo[];
  }
}
declare namespace UnityEditor {
  class EditorGUI extends System.Object {
    constructor();
    static BeginChangeCheck(): void;
    static BeginDisabledGroup(disabled: boolean): void;
    static BeginProperty(totalPosition: any, label: any, property: UnityEditor.SerializedProperty): any;
    static BoundsField(position: any, label: string, value: any): any;
    static BoundsField(position: any, value: any): any;
    static BoundsField(position: any, label: any, value: any): any;
    static BoundsIntField(position: any, label: string, value: any): any;
    static BoundsIntField(position: any, value: any): any;
    static BoundsIntField(position: any, label: any, value: any): any;
    static ColorField(position: any, label: string, value: any): any;
    static ColorField(position: any, value: any): any;
    static ColorField(position: any, label: any, value: any): any;
    static ColorField(position: any, label: any, value: any, showEyedropper: boolean, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig): any;
    static CurveField(position: any, label: string, value: any): any;
    static CurveField(position: any, label: string, value: any, color: any, ranges: any): any;
    static CurveField(position: any, value: any): any;
    static CurveField(position: any, value: any, color: any, ranges: any): any;
    static CurveField(position: any, label: any, value: any): any;
    static CurveField(position: any, label: any, value: any, color: any, ranges: any): any;
    static CurveField(position: any, property: UnityEditor.SerializedProperty, color: any, ranges: any): void;
    static CurveField(position: any, property: UnityEditor.SerializedProperty, color: any, ranges: any, label: any): void;
    static DelayedDoubleField(position: any, value: number): number;
    static DelayedDoubleField(position: any, value: number, style: any): number;
    static DelayedDoubleField(position: any, label: string, value: number): number;
    static DelayedDoubleField(position: any, label: string, value: number, style: any): number;
    static DelayedDoubleField(position: any, label: any, value: number): number;
    static DelayedDoubleField(position: any, label: any, value: number, style: any): number;
    static DelayedFloatField(position: any, value: number): number;
    static DelayedFloatField(position: any, value: number, style: any): number;
    static DelayedFloatField(position: any, label: string, value: number): number;
    static DelayedFloatField(position: any, label: string, value: number, style: any): number;
    static DelayedFloatField(position: any, label: any, value: number): number;
    static DelayedFloatField(position: any, label: any, value: number, style: any): number;
    static DelayedFloatField(position: any, property: UnityEditor.SerializedProperty): void;
    static DelayedFloatField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static DelayedIntField(position: any, value: number): number;
    static DelayedIntField(position: any, value: number, style: any): number;
    static DelayedIntField(position: any, label: string, value: number): number;
    static DelayedIntField(position: any, label: string, value: number, style: any): number;
    static DelayedIntField(position: any, label: any, value: number): number;
    static DelayedIntField(position: any, label: any, value: number, style: any): number;
    static DelayedIntField(position: any, property: UnityEditor.SerializedProperty): void;
    static DelayedIntField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static DelayedTextField(position: any, text: string): string;
    static DelayedTextField(position: any, label: string, text: string): string;
    static DelayedTextField(position: any, label: string, text: string, style: any): string;
    static DelayedTextField(position: any, text: string, style: any): string;
    static DelayedTextField(position: any, label: any, controlId: number, text: string): string;
    static DelayedTextField(position: any, label: any, controlId: number, text: string, style: any): string;
    static DelayedTextField(position: any, label: any, text: string): string;
    static DelayedTextField(position: any, label: any, text: string, style: any): string;
    static DelayedTextField(position: any, property: UnityEditor.SerializedProperty): void;
    static DelayedTextField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static DoPasswordField(id: number, position: any, password: string, style: any): string;
    static DoPasswordField(id: number, position: any, label: any, password: string, style: any): string;
    static DoubleField(position: any, value: number): number;
    static DoubleField(position: any, value: number, style: any): number;
    static DoubleField(position: any, label: string, value: number): number;
    static DoubleField(position: any, label: string, value: number, style: any): number;
    static DoubleField(position: any, label: any, value: number): number;
    static DoubleField(position: any, label: any, value: number, style: any): number;
    static DrawPreviewTexture(position: any, image: any): void;
    static DrawPreviewTexture(position: any, image: any, mat: any): void;
    static DrawPreviewTexture(position: any, image: any, mat: any, scaleMode: any): void;
    static DrawPreviewTexture(position: any, image: any, mat: any, scaleMode: any, imageAspect: number): void;
    static DrawRect(rect: any, color: any): void;
    static DrawTextureAlpha(position: any, image: any): void;
    static DrawTextureAlpha(position: any, image: any, scaleMode: any): void;
    static DrawTextureAlpha(position: any, image: any, scaleMode: any, imageAspect: number): void;
    static DrawTextureTransparent(position: any, image: any): void;
    static DrawTextureTransparent(position: any, image: any, scaleMode: any): void;
    static DrawTextureTransparent(position: any, image: any, scaleMode: any, imageAspect: number): void;
    static DropdownButton(position: any, content: any, focusType: any): boolean;
    static DropdownButton(position: any, content: any, focusType: any, style: any): boolean;
    static DropShadowLabel(position: any, text: string): void;
    static DropShadowLabel(position: any, text: string, style: any): void;
    static DropShadowLabel(position: any, content: any): void;
    static DropShadowLabel(position: any, content: any, style: any): void;
    static EndChangeCheck(): boolean;
    static EndDisabledGroup(): void;
    static EndProperty(): void;
    static EnumMaskField(position: any, enumValue: System.Enum): System.Enum;
    static EnumMaskField(position: any, enumValue: System.Enum, style: any): System.Enum;
    static EnumMaskField(position: any, label: string, enumValue: System.Enum): System.Enum;
    static EnumMaskField(position: any, label: string, enumValue: System.Enum, style: any): System.Enum;
    static EnumMaskField(position: any, label: any, enumValue: System.Enum): System.Enum;
    static EnumMaskField(position: any, label: any, enumValue: System.Enum, style: any): System.Enum;
    static EnumMaskPopup(position: any, label: string, selected: System.Enum): System.Enum;
    static EnumMaskPopup(position: any, label: string, selected: System.Enum, style: any): System.Enum;
    static EnumMaskPopup(position: any, label: any, selected: System.Enum): System.Enum;
    static EnumMaskPopup(position: any, label: any, selected: System.Enum, style: any): System.Enum;
    static EnumPopup(position: any, selected: System.Enum): System.Enum;
    static EnumPopup(position: any, selected: System.Enum, style: any): System.Enum;
    static EnumPopup(position: any, label: string, selected: System.Enum): System.Enum;
    static EnumPopup(position: any, label: string, selected: System.Enum, style: any): System.Enum;
    static EnumPopup(position: any, label: any, selected: System.Enum): System.Enum;
    static EnumPopup(position: any, label: any, selected: System.Enum, style: any): System.Enum;
    static FloatField(position: any, value: number): number;
    static FloatField(position: any, value: number, style: any): number;
    static FloatField(position: any, label: string, value: number): number;
    static FloatField(position: any, label: string, value: number, style: any): number;
    static FloatField(position: any, label: any, value: number): number;
    static FloatField(position: any, label: any, value: number, style: any): number;
    static FocusTextInControl(name: string): void;
    static Foldout(position: any, foldout: boolean, content: string): boolean;
    static Foldout(position: any, foldout: boolean, content: string, toggleOnLabelClick: boolean): boolean;
    static Foldout(position: any, foldout: boolean, content: string, toggleOnLabelClick: boolean, style: any): boolean;
    static Foldout(position: any, foldout: boolean, content: string, style: any): boolean;
    static Foldout(position: any, foldout: boolean, content: any): boolean;
    static Foldout(position: any, foldout: boolean, content: any, toggleOnLabelClick: boolean): boolean;
    static Foldout(position: any, foldout: boolean, content: any, toggleOnLabelClick: boolean, style: any): boolean;
    static Foldout(position: any, foldout: boolean, content: any, style: any): boolean;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty): number;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty, includeChildren: boolean): number;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): number;
    static GetPropertyHeight(type: UnityEditor.SerializedPropertyType, label: any): number;
    static HandlePrefixLabel(totalPosition: any, labelPosition: any, label: any): void;
    static HandlePrefixLabel(totalPosition: any, labelPosition: any, label: any, id: number): void;
    static HandlePrefixLabel(totalPosition: any, labelPosition: any, label: any, id: number, style: any): void;
    static HelpBox(position: any, message: string, type: UnityEditor.MessageType): void;
    static IndentedRect(source: any): any;
    static InspectorTitlebar(position: any, foldout: boolean, targetObj: UnityEngine.Object, expandable: boolean): boolean;
    static InspectorTitlebar(position: any, foldout: boolean, targetObjs: UnityEngine.Object[], expandable: boolean): boolean;
    static InspectorTitlebar(position: any, targetObjs: UnityEngine.Object[]): void;
    static IntField(position: any, value: number): number;
    static IntField(position: any, value: number, style: any): number;
    static IntField(position: any, label: string, value: number): number;
    static IntField(position: any, label: string, value: number, style: any): number;
    static IntField(position: any, label: any, value: number): number;
    static IntField(position: any, label: any, value: number, style: any): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: string[], optionValues: number[]): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: string[], optionValues: number[], style: any): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: any[], optionValues: number[]): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: any[], optionValues: number[], style: any): number;
    static IntPopup(position: any, label: string, selectedValue: number, displayedOptions: string[], optionValues: number[]): number;
    static IntPopup(position: any, label: string, selectedValue: number, displayedOptions: string[], optionValues: number[], style: any): number;
    static IntPopup(position: any, label: any, selectedValue: number, displayedOptions: any[], optionValues: number[]): number;
    static IntPopup(position: any, label: any, selectedValue: number, displayedOptions: any[], optionValues: number[], style: any): number;
    static IntPopup(position: any, property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[]): void;
    static IntPopup(position: any, property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], label: any): void;
    static IntSlider(position: any, value: number, leftValue: number, rightValue: number): number;
    static IntSlider(position: any, label: string, value: number, leftValue: number, rightValue: number): number;
    static IntSlider(position: any, label: any, value: number, leftValue: number, rightValue: number): number;
    static IntSlider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number): void;
    static IntSlider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string): void;
    static IntSlider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any): void;
    static LabelField(position: any, label: string): void;
    static LabelField(position: any, label: string, label2: string): void;
    static LabelField(position: any, label: string, label2: string, style: any): void;
    static LabelField(position: any, label: string, style: any): void;
    static LabelField(position: any, label: any): void;
    static LabelField(position: any, label: any, label2: any): void;
    static LabelField(position: any, label: any, label2: any, style: any): void;
    static LabelField(position: any, label: any, style: any): void;
    static LayerField(position: any, layer: number): number;
    static LayerField(position: any, layer: number, style: any): number;
    static LayerField(position: any, label: string, layer: number): number;
    static LayerField(position: any, label: string, layer: number, style: any): number;
    static LayerField(position: any, label: any, layer: number): number;
    static LayerField(position: any, label: any, layer: number, style: any): number;
    static LongField(position: any, value: number): number;
    static LongField(position: any, value: number, style: any): number;
    static LongField(position: any, label: string, value: number): number;
    static LongField(position: any, label: string, value: number, style: any): number;
    static LongField(position: any, label: any, value: number): number;
    static LongField(position: any, label: any, value: number, style: any): number;
    static MaskField(position: any, mask: number, displayedOptions: string[]): number;
    static MaskField(position: any, mask: number, displayedOptions: string[], style: any): number;
    static MaskField(position: any, label: string, mask: number, displayedOptions: string[]): number;
    static MaskField(position: any, label: string, mask: number, displayedOptions: string[], style: any): number;
    static MaskField(position: any, label: any, mask: number, displayedOptions: string[]): number;
    static MaskField(position: any, label: any, mask: number, displayedOptions: string[], style: any): number;
    static MinMaxSlider(label: any, position: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MinMaxSlider(position: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MinMaxSlider(position: any, label: string, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MinMaxSlider(position: any, label: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MultiFloatField(position: any, label: any, subLabels: any[], values: number[]): void;
    static MultiFloatField(position: any, subLabels: any[], values: number[]): void;
    static MultiIntField(position: any, subLabels: any[], values: number[]): void;
    static MultiPropertyField(position: any, subLabels: any[], valuesIterator: UnityEditor.SerializedProperty): void;
    static MultiPropertyField(position: any, subLabels: any[], valuesIterator: UnityEditor.SerializedProperty, label: any): void;
    static ObjectField(position: any, label: string, obj: UnityEngine.Object, objType: any): UnityEngine.Object;
    static ObjectField(position: any, label: string, obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean): UnityEngine.Object;
    static ObjectField(position: any, label: any, obj: UnityEngine.Object, objType: any): UnityEngine.Object;
    static ObjectField(position: any, label: any, obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean): UnityEngine.Object;
    static ObjectField(position: any, obj: UnityEngine.Object, objType: any): UnityEngine.Object;
    static ObjectField(position: any, obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean): UnityEngine.Object;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty, objType: any): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty, objType: any, label: any): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static PasswordField(position: any, password: string): string;
    static PasswordField(position: any, label: string, password: string): string;
    static PasswordField(position: any, label: string, password: string, style: any): string;
    static PasswordField(position: any, password: string, style: any): string;
    static PasswordField(position: any, label: any, password: string): string;
    static PasswordField(position: any, label: any, password: string, style: any): string;
    static Popup(position: any, selectedIndex: number, displayedOptions: string[]): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: string[], style: any): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: any[]): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: any[], style: any): number;
    static Popup(position: any, label: string, selectedIndex: number, displayedOptions: string[]): number;
    static Popup(position: any, label: string, selectedIndex: number, displayedOptions: string[], style: any): number;
    static Popup(position: any, label: any, selectedIndex: number, displayedOptions: any[]): number;
    static Popup(position: any, label: any, selectedIndex: number, displayedOptions: any[], style: any): number;
    static PrefixLabel(totalPosition: any, id: number, label: any): any;
    static PrefixLabel(totalPosition: any, id: number, label: any, style: any): any;
    static PrefixLabel(totalPosition: any, label: any): any;
    static PrefixLabel(totalPosition: any, label: any, style: any): any;
    static ProgressBar(position: any, value: number, text: string): void;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty): boolean;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty, includeChildren: boolean): boolean;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty, label: any): boolean;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): boolean;
    static RectField(position: any, label: string, value: any): any;
    static RectField(position: any, label: any, value: any): any;
    static RectField(position: any, value: any): any;
    static RectIntField(position: any, label: string, value: any): any;
    static RectIntField(position: any, label: any, value: any): any;
    static RectIntField(position: any, value: any): any;
    static SelectableLabel(position: any, text: string): void;
    static SelectableLabel(position: any, text: string, style: any): void;
    static Slider(position: any, value: number, leftValue: number, rightValue: number): number;
    static Slider(position: any, label: string, value: number, leftValue: number, rightValue: number): number;
    static Slider(position: any, label: any, value: number, leftValue: number, rightValue: number): number;
    static Slider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number): void;
    static Slider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string): void;
    static Slider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any): void;
    static TagField(position: any, tag: string): string;
    static TagField(position: any, label: string, tag: string): string;
    static TagField(position: any, label: string, tag: string, style: any): string;
    static TagField(position: any, tag: string, style: any): string;
    static TagField(position: any, label: any, tag: string): string;
    static TagField(position: any, label: any, tag: string, style: any): string;
    static TextArea(position: any, text: string): string;
    static TextArea(position: any, text: string, style: any): string;
    static TextField(position: any, text: string): string;
    static TextField(position: any, label: string, text: string): string;
    static TextField(position: any, label: string, text: string, style: any): string;
    static TextField(position: any, text: string, style: any): string;
    static TextField(position: any, label: any, text: string): string;
    static TextField(position: any, label: any, text: string, style: any): string;
    static Toggle(position: any, value: boolean): boolean;
    static Toggle(position: any, value: boolean, style: any): boolean;
    static Toggle(position: any, label: string, value: boolean): boolean;
    static Toggle(position: any, label: string, value: boolean, style: any): boolean;
    static Toggle(position: any, label: any, value: boolean): boolean;
    static Toggle(position: any, label: any, value: boolean, style: any): boolean;
    static ToggleLeft(position: any, label: string, value: boolean): boolean;
    static ToggleLeft(position: any, label: string, value: boolean, labelStyle: any): boolean;
    static ToggleLeft(position: any, label: any, value: boolean): boolean;
    static ToggleLeft(position: any, label: any, value: boolean, labelStyle: any): boolean;
    static Vector2Field(position: any, label: string, value: any): any;
    static Vector2Field(position: any, label: any, value: any): any;
    static Vector2IntField(position: any, label: string, value: any): any;
    static Vector2IntField(position: any, label: any, value: any): any;
    static Vector3Field(position: any, label: string, value: any): any;
    static Vector3Field(position: any, label: any, value: any): any;
    static Vector3IntField(position: any, label: string, value: any): any;
    static Vector3IntField(position: any, label: any, value: any): any;
    static Vector4Field(position: any, label: string, value: any): any;
    static Vector4Field(position: any, label: any, value: any): any;
    static readonly actionKey: boolean;
    static indentLevel: number;
    static showMixedValue: boolean;
  }
}
declare namespace UnityEditor.EditorGUI {
  class DisabledGroupScope extends UnityEngine.GUI.Scope {
    constructor(disabled: boolean);
  }
}
declare namespace UnityEngine.GUI {
  class Scope extends System.Object {
    protected constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor.EditorGUI {
  class DisabledScope extends System.ValueType {
    protected constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor.EditorGUI {
  class ChangeCheckScope extends UnityEngine.GUI.Scope {
    constructor();
    readonly changed: boolean;
  }
}
declare namespace UnityEditor.EditorGUI {
  class RecycledTextEditor extends UnityEngine.TextEditor {
    constructor();
    BeginEditing(id: number, newText: string, position: any, style: any, multiline: boolean, passwordField: boolean): void;
    EndEditing(): void;
  }
}
declare namespace UnityEngine {
  class TextEditor extends System.Object {
    constructor();
    Backspace(): boolean;
    CanPaste(): boolean;
    Copy(): void;
    Cut(): boolean;
    DblClickSnap(snapping: any): void;
    Delete(): boolean;
    DeleteLineBack(): boolean;
    DeleteSelection(): boolean;
    DeleteWordBack(): boolean;
    DeleteWordForward(): boolean;
    DetectFocusChange(): void;
    DrawCursor(newText: string): void;
    ExpandSelectGraphicalLineEnd(): void;
    ExpandSelectGraphicalLineStart(): void;
    FindStartOfNextWord(p: number): number;
    HandleKeyEvent(e: any): boolean;
    Insert(c: any): void;
    IsOverSelection(cursorPosition: any): boolean;
    MouseDragSelectsWholeWords(on: boolean): void;
    MoveAltCursorToPosition(cursorPosition: any): void;
    MoveCursorToPosition(cursorPosition: any): void;
    MoveDown(): void;
    MoveGraphicalLineEnd(): void;
    MoveGraphicalLineStart(): void;
    MoveLeft(): void;
    MoveLineEnd(): void;
    MoveLineStart(): void;
    MoveParagraphBackward(): void;
    MoveParagraphForward(): void;
    MoveRight(): void;
    MoveSelectionToAltCursor(): void;
    MoveTextEnd(): void;
    MoveTextStart(): void;
    MoveToEndOfPreviousWord(): void;
    MoveToStartOfNextWord(): void;
    MoveUp(): void;
    MoveWordLeft(): void;
    MoveWordRight(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    Paste(): boolean;
    ReplaceSelection(replace: string): void;
    SaveBackup(): void;
    SelectAll(): void;
    SelectCurrentParagraph(): void;
    SelectCurrentWord(): void;
    SelectDown(): void;
    SelectGraphicalLineEnd(): void;
    SelectGraphicalLineStart(): void;
    SelectLeft(): void;
    SelectNone(): void;
    SelectParagraphBackward(): void;
    SelectParagraphForward(): void;
    SelectRight(): void;
    SelectTextEnd(): void;
    SelectTextStart(): void;
    SelectToEndOfPreviousWord(): void;
    SelectToPosition(cursorPosition: any): void;
    SelectToStartOfNextWord(): void;
    SelectUp(): void;
    SelectWordLeft(): void;
    SelectWordRight(): void;
    Undo(): void;
    UpdateScrollOffsetIfNeeded(evt: any): void;
    altCursorPosition: number;
    content: any;
    cursorIndex: number;
    doubleClickSnapping: any;
    readonly hasSelection: boolean;
    position: any;
    readonly SelectedText: string;
    selectIndex: number;
    text: string;
    controlID: number;
    graphicalCursorPos: any;
    graphicalSelectCursorPos: any;
    hasHorizontalCursorPos: boolean;
    isPasswordField: boolean;
    keyboardOnScreen: any;
    multiline: boolean;
    scrollOffset: any;
    style: any;
  }
}
declare namespace UnityEditor.EditorGUI {
  class DelayedTextEditor extends UnityEditor.EditorGUI.RecycledTextEditor {
    constructor();
    BeginGUI(): void;
    EndEditing(): void;
    EndGUI(type: any): void;
    OnGUI(id: number, value: string, changed: any): string;
  }
}
declare namespace UnityEditor.EditorGUI {
  class PopupMenuEvent extends System.Object {
    constructor(cmd: string, v: UnityEditor.GUIView);
    SendEvent(): void;
    commandName: string;
    receiver: UnityEditor.GUIView;
  }
}
declare namespace UnityEditor.EditorGUI {
  class IndentLevelScope extends UnityEngine.GUI.Scope {
    constructor();
    constructor(increment: number);
  }
}
declare namespace UnityEditor.EditorGUI {
  class PopupCallbackInfo extends System.Object {
    constructor(controlID: number);
    static GetSelectedValueForControl(controlID: number, selected: number): number;
    static instance: UnityEditor.EditorGUI.PopupCallbackInfo;
  }
}
declare namespace UnityEditor.EditorGUI {
  class PropertyVisibility extends System.Enum {
    protected constructor();
    static All: UnityEditor.EditorGUI.PropertyVisibility;
    static OnlyVisible: UnityEditor.EditorGUI.PropertyVisibility;
    value__: number;
  }
}
declare namespace UnityEditor.EditorGUI {
  class PropertyScope extends UnityEngine.GUI.Scope {
    constructor(totalPosition: any, label: any, property: UnityEditor.SerializedProperty);
    readonly content: any;
  }
}
declare namespace UnityEditor.EditorGUI {
  class ColorBrightnessFieldStateObject extends System.Object {
    constructor();
    m_Brightness: number;
    m_Hue: number;
    m_Saturation: number;
  }
}
declare namespace UnityEditor.EditorGUI {
  class GUIContents extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.EditorGUI.GUIContents {
  class IconName extends System.Attribute {
    constructor(name: string);
    readonly name: string;
  }
}
declare namespace UnityEditor.EditorGUI {
  class Resizer extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.EditorGUI {
  class KnobContext extends System.ValueType {
    protected constructor();
    Handle(): number;
  }
}
declare namespace UnityEditor.EditorGUI {
  class ObjectFieldValidatorOptions extends System.Enum {
    protected constructor();
    static ExactObjectTypeValidation: UnityEditor.EditorGUI.ObjectFieldValidatorOptions;
    static None: UnityEditor.EditorGUI.ObjectFieldValidatorOptions;
    value__: number;
  }
}
declare namespace UnityEditor.EditorGUI {
  class ObjectFieldVisualType extends System.Enum {
    protected constructor();
    static IconAndText: UnityEditor.EditorGUI.ObjectFieldVisualType;
    static LargePreview: UnityEditor.EditorGUI.ObjectFieldVisualType;
    static MiniPreview: UnityEditor.EditorGUI.ObjectFieldVisualType;
    value__: number;
  }
}
declare namespace UnityEditor.EditorGUI {
  class VUMeter extends System.Object {
    constructor();
    static HorizontalMeter(position: any, value: number, peak: number, foregroundTexture: any, peakColor: any): void;
    static HorizontalMeter(position: any, value: number, data: any, foregroundTexture: any, peakColor: any): void;
    static VerticalMeter(position: any, value: number, peak: number, foregroundTexture: any, peakColor: any): void;
    static VerticalMeter(position: any, value: number, data: any, foregroundTexture: any, peakColor: any): void;
    static readonly horizontalVUTexture: any;
    static readonly verticalVUTexture: any;
  }
}
declare namespace UnityEditor.EditorGUI.VUMeter {
  class SmoothingData extends System.ValueType {
    protected constructor();
    lastValue: number;
    peakValue: number;
    peakValueTime: number;
  }
}
declare namespace UnityEditor {
  class EditorGUILayout extends System.Object {
    constructor();
    static BeginFadeGroup(value: number): boolean;
    static BeginHorizontal(options: any[]): any;
    static BeginHorizontal(style: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: any[]): any;
    static BeginScrollView(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: any, verticalScrollbar: any, background: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, style: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, horizontalScrollbar: any, verticalScrollbar: any, options: any[]): any;
    static BeginToggleGroup(label: string, toggle: boolean): boolean;
    static BeginToggleGroup(label: any, toggle: boolean): boolean;
    static BeginVertical(options: any[]): any;
    static BeginVertical(style: any, options: any[]): any;
    static BoundsField(label: string, value: any, options: any[]): any;
    static BoundsField(value: any, options: any[]): any;
    static BoundsField(label: any, value: any, options: any[]): any;
    static BoundsIntField(label: string, value: any, options: any[]): any;
    static BoundsIntField(value: any, options: any[]): any;
    static BoundsIntField(label: any, value: any, options: any[]): any;
    static ColorField(label: string, value: any, options: any[]): any;
    static ColorField(value: any, options: any[]): any;
    static ColorField(label: any, value: any, showEyedropper: boolean, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig, options: any[]): any;
    static ColorField(label: any, value: any, options: any[]): any;
    static CurveField(label: string, value: any, color: any, ranges: any, options: any[]): any;
    static CurveField(label: string, value: any, options: any[]): any;
    static CurveField(value: any, color: any, ranges: any, options: any[]): any;
    static CurveField(value: any, options: any[]): any;
    static CurveField(label: any, value: any, color: any, ranges: any, options: any[]): any;
    static CurveField(label: any, value: any, options: any[]): any;
    static CurveField(property: UnityEditor.SerializedProperty, color: any, ranges: any, label: any, options: any[]): void;
    static CurveField(property: UnityEditor.SerializedProperty, color: any, ranges: any, options: any[]): void;
    static DelayedDoubleField(value: number, options: any[]): number;
    static DelayedDoubleField(value: number, style: any, options: any[]): number;
    static DelayedDoubleField(label: string, value: number, options: any[]): number;
    static DelayedDoubleField(label: string, value: number, style: any, options: any[]): number;
    static DelayedDoubleField(label: any, value: number, options: any[]): number;
    static DelayedDoubleField(label: any, value: number, style: any, options: any[]): number;
    static DelayedFloatField(value: number, options: any[]): number;
    static DelayedFloatField(value: number, style: any, options: any[]): number;
    static DelayedFloatField(label: string, value: number, options: any[]): number;
    static DelayedFloatField(label: string, value: number, style: any, options: any[]): number;
    static DelayedFloatField(label: any, value: number, options: any[]): number;
    static DelayedFloatField(label: any, value: number, style: any, options: any[]): number;
    static DelayedFloatField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static DelayedFloatField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static DelayedIntField(value: number, options: any[]): number;
    static DelayedIntField(value: number, style: any, options: any[]): number;
    static DelayedIntField(label: string, value: number, options: any[]): number;
    static DelayedIntField(label: string, value: number, style: any, options: any[]): number;
    static DelayedIntField(label: any, value: number, options: any[]): number;
    static DelayedIntField(label: any, value: number, style: any, options: any[]): number;
    static DelayedIntField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static DelayedIntField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static DelayedTextField(label: string, text: string, options: any[]): string;
    static DelayedTextField(label: string, text: string, style: any, options: any[]): string;
    static DelayedTextField(text: string, options: any[]): string;
    static DelayedTextField(text: string, style: any, options: any[]): string;
    static DelayedTextField(label: any, text: string, options: any[]): string;
    static DelayedTextField(label: any, text: string, style: any, options: any[]): string;
    static DelayedTextField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static DelayedTextField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static DoubleField(value: number, options: any[]): number;
    static DoubleField(value: number, style: any, options: any[]): number;
    static DoubleField(label: string, value: number, options: any[]): number;
    static DoubleField(label: string, value: number, style: any, options: any[]): number;
    static DoubleField(label: any, value: number, options: any[]): number;
    static DoubleField(label: any, value: number, style: any, options: any[]): number;
    static DropdownButton(content: any, focusType: any, options: any[]): boolean;
    static DropdownButton(content: any, focusType: any, style: any, options: any[]): boolean;
    static EndFadeGroup(): void;
    static EndHorizontal(): void;
    static EndScrollView(): void;
    static EndToggleGroup(): void;
    static EndVertical(): void;
    static EnumMaskField(enumValue: System.Enum, options: any[]): System.Enum;
    static EnumMaskField(enumValue: System.Enum, style: any, options: any[]): System.Enum;
    static EnumMaskField(label: string, enumValue: System.Enum, options: any[]): System.Enum;
    static EnumMaskField(label: string, enumValue: System.Enum, style: any, options: any[]): System.Enum;
    static EnumMaskField(label: any, enumValue: System.Enum, options: any[]): System.Enum;
    static EnumMaskField(label: any, enumValue: System.Enum, style: any, options: any[]): System.Enum;
    static EnumMaskPopup(label: string, selected: System.Enum, options: any[]): System.Enum;
    static EnumMaskPopup(label: string, selected: System.Enum, style: any, options: any[]): System.Enum;
    static EnumMaskPopup(label: any, selected: System.Enum, options: any[]): System.Enum;
    static EnumMaskPopup(label: any, selected: System.Enum, style: any, options: any[]): System.Enum;
    static EnumPopup(selected: System.Enum, options: any[]): System.Enum;
    static EnumPopup(selected: System.Enum, style: any, options: any[]): System.Enum;
    static EnumPopup(label: string, selected: System.Enum, options: any[]): System.Enum;
    static EnumPopup(label: string, selected: System.Enum, style: any, options: any[]): System.Enum;
    static EnumPopup(label: any, selected: System.Enum, options: any[]): System.Enum;
    static EnumPopup(label: any, selected: System.Enum, style: any, options: any[]): System.Enum;
    static FloatField(value: number, options: any[]): number;
    static FloatField(value: number, style: any, options: any[]): number;
    static FloatField(label: string, value: number, options: any[]): number;
    static FloatField(label: string, value: number, style: any, options: any[]): number;
    static FloatField(label: any, value: number, options: any[]): number;
    static FloatField(label: any, value: number, style: any, options: any[]): number;
    static Foldout(foldout: boolean, content: string): boolean;
    static Foldout(foldout: boolean, content: string, toggleOnLabelClick: boolean): boolean;
    static Foldout(foldout: boolean, content: string, toggleOnLabelClick: boolean, style: any): boolean;
    static Foldout(foldout: boolean, content: string, style: any): boolean;
    static Foldout(foldout: boolean, content: any): boolean;
    static Foldout(foldout: boolean, content: any, toggleOnLabelClick: boolean): boolean;
    static Foldout(foldout: boolean, content: any, toggleOnLabelClick: boolean, style: any): boolean;
    static Foldout(foldout: boolean, content: any, style: any): boolean;
    static GetControlRect(hasLabel: boolean, height: number, options: any[]): any;
    static GetControlRect(hasLabel: boolean, height: number, style: any, options: any[]): any;
    static GetControlRect(hasLabel: boolean, options: any[]): any;
    static GetControlRect(options: any[]): any;
    static HelpBox(message: string, type: UnityEditor.MessageType): void;
    static HelpBox(message: string, type: UnityEditor.MessageType, wide: boolean): void;
    static InspectorTitlebar(foldout: boolean, targetObj: UnityEngine.Object): boolean;
    static InspectorTitlebar(foldout: boolean, targetObj: UnityEngine.Object, expandable: boolean): boolean;
    static InspectorTitlebar(foldout: boolean, targetObjs: UnityEngine.Object[]): boolean;
    static InspectorTitlebar(foldout: boolean, targetObjs: UnityEngine.Object[], expandable: boolean): boolean;
    static InspectorTitlebar(targetObjs: UnityEngine.Object[]): void;
    static IntField(value: number, options: any[]): number;
    static IntField(value: number, style: any, options: any[]): number;
    static IntField(label: string, value: number, options: any[]): number;
    static IntField(label: string, value: number, style: any, options: any[]): number;
    static IntField(label: any, value: number, options: any[]): number;
    static IntField(label: any, value: number, style: any, options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: string[], optionValues: number[], options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: string[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: any[], optionValues: number[], options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: any[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(label: string, selectedValue: number, displayedOptions: string[], optionValues: number[], options: any[]): number;
    static IntPopup(label: string, selectedValue: number, displayedOptions: string[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(label: any, selectedValue: number, displayedOptions: any[], optionValues: number[], options: any[]): number;
    static IntPopup(label: any, selectedValue: number, displayedOptions: any[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], label: any, options: any[]): void;
    static IntPopup(property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], label: any, style: any, options: any[]): void;
    static IntPopup(property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], options: any[]): void;
    static IntSlider(value: number, leftValue: number, rightValue: number, options: any[]): number;
    static IntSlider(label: string, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static IntSlider(label: any, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static IntSlider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string, options: any[]): void;
    static IntSlider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any, options: any[]): void;
    static IntSlider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, options: any[]): void;
    static Knob(knobSize: any, value: number, minValue: number, maxValue: number, unit: string, backgroundColor: any, activeColor: any, showValue: boolean, options: any[]): number;
    static LabelField(label: string, label2: string, options: any[]): void;
    static LabelField(label: string, label2: string, style: any, options: any[]): void;
    static LabelField(label: string, options: any[]): void;
    static LabelField(label: string, style: any, options: any[]): void;
    static LabelField(label: any, label2: any, options: any[]): void;
    static LabelField(label: any, label2: any, style: any, options: any[]): void;
    static LabelField(label: any, options: any[]): void;
    static LabelField(label: any, style: any, options: any[]): void;
    static LayerField(layer: number, options: any[]): number;
    static LayerField(layer: number, style: any, options: any[]): number;
    static LayerField(label: string, layer: number, options: any[]): number;
    static LayerField(label: string, layer: number, style: any, options: any[]): number;
    static LayerField(label: any, layer: number, options: any[]): number;
    static LayerField(label: any, layer: number, style: any, options: any[]): number;
    static LongField(value: number, options: any[]): number;
    static LongField(value: number, style: any, options: any[]): number;
    static LongField(label: string, value: number, options: any[]): number;
    static LongField(label: string, value: number, style: any, options: any[]): number;
    static LongField(label: any, value: number, options: any[]): number;
    static LongField(label: any, value: number, style: any, options: any[]): number;
    static MaskField(mask: number, displayedOptions: string[], options: any[]): number;
    static MaskField(mask: number, displayedOptions: string[], style: any, options: any[]): number;
    static MaskField(label: string, mask: number, displayedOptions: string[], options: any[]): number;
    static MaskField(label: string, mask: number, displayedOptions: string[], style: any, options: any[]): number;
    static MaskField(label: any, mask: number, displayedOptions: string[], options: any[]): number;
    static MaskField(label: any, mask: number, displayedOptions: string[], style: any, options: any[]): number;
    static MinMaxSlider(minValue: any, maxValue: any, minLimit: number, maxLimit: number, options: any[]): void;
    static MinMaxSlider(label: string, minValue: any, maxValue: any, minLimit: number, maxLimit: number, options: any[]): void;
    static MinMaxSlider(label: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number, options: any[]): void;
    static ObjectField(label: string, obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean, options: any[]): UnityEngine.Object;
    static ObjectField(label: string, obj: UnityEngine.Object, objType: any, options: any[]): UnityEngine.Object;
    static ObjectField(label: any, obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean, options: any[]): UnityEngine.Object;
    static ObjectField(label: any, obj: UnityEngine.Object, objType: any, options: any[]): UnityEngine.Object;
    static ObjectField(obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean, options: any[]): UnityEngine.Object;
    static ObjectField(obj: UnityEngine.Object, objType: any, options: any[]): UnityEngine.Object;
    static ObjectField(property: UnityEditor.SerializedProperty, objType: any, label: any, options: any[]): void;
    static ObjectField(property: UnityEditor.SerializedProperty, objType: any, options: any[]): void;
    static ObjectField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static ObjectField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static PasswordField(label: string, password: string, options: any[]): string;
    static PasswordField(label: string, password: string, style: any, options: any[]): string;
    static PasswordField(password: string, options: any[]): string;
    static PasswordField(password: string, style: any, options: any[]): string;
    static PasswordField(label: any, password: string, options: any[]): string;
    static PasswordField(label: any, password: string, style: any, options: any[]): string;
    static Popup(selectedIndex: number, displayedOptions: string[], options: any[]): number;
    static Popup(selectedIndex: number, displayedOptions: string[], style: any, options: any[]): number;
    static Popup(selectedIndex: number, displayedOptions: any[], options: any[]): number;
    static Popup(selectedIndex: number, displayedOptions: any[], style: any, options: any[]): number;
    static Popup(label: string, selectedIndex: number, displayedOptions: string[], options: any[]): number;
    static Popup(label: string, selectedIndex: number, displayedOptions: string[], style: any, options: any[]): number;
    static Popup(label: any, selectedIndex: number, displayedOptions: any[], options: any[]): number;
    static Popup(label: any, selectedIndex: number, displayedOptions: any[], style: any, options: any[]): number;
    static PrefixLabel(label: string): void;
    static PrefixLabel(label: string, followingStyle: any): void;
    static PrefixLabel(label: string, followingStyle: any, labelStyle: any): void;
    static PrefixLabel(label: any): void;
    static PrefixLabel(label: any, followingStyle: any): void;
    static PrefixLabel(label: any, followingStyle: any, labelStyle: any): void;
    static PropertyField(property: UnityEditor.SerializedProperty, includeChildren: boolean, options: any[]): boolean;
    static PropertyField(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean, options: any[]): boolean;
    static PropertyField(property: UnityEditor.SerializedProperty, label: any, options: any[]): boolean;
    static PropertyField(property: UnityEditor.SerializedProperty, options: any[]): boolean;
    static RectField(label: string, value: any, options: any[]): any;
    static RectField(label: any, value: any, options: any[]): any;
    static RectField(value: any, options: any[]): any;
    static RectIntField(label: string, value: any, options: any[]): any;
    static RectIntField(label: any, value: any, options: any[]): any;
    static RectIntField(value: any, options: any[]): any;
    static SelectableLabel(text: string, options: any[]): void;
    static SelectableLabel(text: string, style: any, options: any[]): void;
    static Separator(): void;
    static Slider(value: number, leftValue: number, rightValue: number, options: any[]): number;
    static Slider(label: string, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static Slider(label: any, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static Slider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string, options: any[]): void;
    static Slider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any, options: any[]): void;
    static Slider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, options: any[]): void;
    static Space(): void;
    static TagField(label: string, tag: string, options: any[]): string;
    static TagField(label: string, tag: string, style: any, options: any[]): string;
    static TagField(tag: string, options: any[]): string;
    static TagField(tag: string, style: any, options: any[]): string;
    static TagField(label: any, tag: string, options: any[]): string;
    static TagField(label: any, tag: string, style: any, options: any[]): string;
    static TextArea(text: string, options: any[]): string;
    static TextArea(text: string, style: any, options: any[]): string;
    static TextField(label: string, text: string, options: any[]): string;
    static TextField(label: string, text: string, style: any, options: any[]): string;
    static TextField(text: string, options: any[]): string;
    static TextField(text: string, style: any, options: any[]): string;
    static TextField(label: any, text: string, options: any[]): string;
    static TextField(label: any, text: string, style: any, options: any[]): string;
    static Toggle(value: boolean, options: any[]): boolean;
    static Toggle(value: boolean, style: any, options: any[]): boolean;
    static Toggle(label: string, value: boolean, options: any[]): boolean;
    static Toggle(label: string, value: boolean, style: any, options: any[]): boolean;
    static Toggle(label: any, value: boolean, options: any[]): boolean;
    static Toggle(label: any, value: boolean, style: any, options: any[]): boolean;
    static ToggleLeft(label: string, value: boolean, options: any[]): boolean;
    static ToggleLeft(label: string, value: boolean, labelStyle: any, options: any[]): boolean;
    static ToggleLeft(label: any, value: boolean, options: any[]): boolean;
    static ToggleLeft(label: any, value: boolean, labelStyle: any, options: any[]): boolean;
    static Vector2Field(label: string, value: any, options: any[]): any;
    static Vector2Field(label: any, value: any, options: any[]): any;
    static Vector2IntField(label: string, value: any, options: any[]): any;
    static Vector2IntField(label: any, value: any, options: any[]): any;
    static Vector3Field(label: string, value: any, options: any[]): any;
    static Vector3Field(label: any, value: any, options: any[]): any;
    static Vector3IntField(label: string, value: any, options: any[]): any;
    static Vector3IntField(label: any, value: any, options: any[]): any;
    static Vector4Field(label: string, value: any, options: any[]): any;
    static Vector4Field(label: any, value: any, options: any[]): any;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class ToggleGroupScope extends UnityEngine.GUI.Scope {
    constructor(label: string, toggle: boolean);
    constructor(label: any, toggle: boolean);
    readonly enabled: boolean;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class HorizontalScope extends UnityEngine.GUI.Scope {
    constructor(options: any[]);
    constructor(style: any, options: any[]);
    readonly rect: any;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class VerticalScope extends UnityEngine.GUI.Scope {
    constructor(options: any[]);
    constructor(style: any, options: any[]);
    readonly rect: any;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class ScrollViewScope extends UnityEngine.GUI.Scope {
    constructor(scrollPosition: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: any[]);
    constructor(scrollPosition: any, horizontalScrollbar: any, verticalScrollbar: any, options: any[]);
    constructor(scrollPosition: any, style: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: any, verticalScrollbar: any, background: any, options: any[]);
    handleScrollWheel: boolean;
    readonly scrollPosition: any;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class VerticalScrollViewScope extends UnityEngine.GUI.Scope {
    constructor(scrollPosition: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowVertical: boolean, verticalScrollbar: any, background: any, options: any[]);
    handleScrollWheel: boolean;
    readonly scrollPosition: any;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class HorizontalScrollViewScope extends UnityEngine.GUI.Scope {
    constructor(scrollPosition: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowHorizontal: boolean, horizontalScrollbar: any, background: any, options: any[]);
    handleScrollWheel: boolean;
    readonly scrollPosition: any;
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class FadeGroupScope extends UnityEngine.GUI.Scope {
    constructor(value: number);
    readonly visible: boolean;
  }
}
declare namespace UnityEditor {
  class BuiltinResource extends System.Object {
    constructor();
    m_InstanceID: number;
    m_Name: string;
  }
}
declare namespace UnityEditor {
  class SliderLabels extends System.ValueType {
    protected constructor();
    HasLabels(): boolean;
    SetLabels(leftLabel: any, rightLabel: any): void;
    leftLabel: any;
    rightLabel: any;
  }
}
declare namespace UnityEditor {
  class EditorGUIUtility extends UnityEngine.GUIUtility {
    constructor();
    static AddCursorRect(position: any, mouse: UnityEditor.MouseCursor): void;
    static AddCursorRect(position: any, mouse: UnityEditor.MouseCursor, controlID: number): void;
    static CommandEvent(commandName: string): any;
    static DrawColorSwatch(position: any, color: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any, topFillColor: any, bottomFillColor: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any, topFillColor: any, bottomFillColor: any, curveRanges: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any, curveRanges: any): void;
    static DrawRegionSwatch(position: any, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, bgColor: any, curveRanges: any): void;
    static DrawRegionSwatch(position: any, curve: any, curve2: any, color: any, bgColor: any, curveRanges: any): void;
    static FindTexture(name: string): any;
    static GetBuiltinSkin(skin: UnityEditor.EditorSkin): any;
    static GetFlowLayoutedRects(rect: any, style: any, horizontalSpacing: number, verticalSpacing: number, items: string[]): any[];
    static GetIconSize(): any;
    static GetObjectPickerControlID(): number;
    static GetObjectPickerObject(): UnityEngine.Object;
    static HasObjectThumbnail(objType: any): boolean;
    static HSVToRGB(H: number, S: number, V: number): any;
    static HSVToRGB(H: number, S: number, V: number, hdr: boolean): any;
    static IconContent(name: string): any;
    static IconContent(name: string, text: string): any;
    static IsDisplayReferencedByCameras(displayIndex: number): boolean;
    static Load(path: string): UnityEngine.Object;
    static LoadRequired(path: string): UnityEngine.Object;
    static LookLikeControls(): void;
    static LookLikeControls(labelWidth: number): void;
    static LookLikeControls(labelWidth: number, fieldWidth: number): void;
    static LookLikeInspector(): void;
    static ObjectContent(obj: UnityEngine.Object, type: any): any;
    static PingObject(targetInstanceID: number): void;
    static PingObject(obj: UnityEngine.Object): void;
    static PixelsToPoints(rect: any): any;
    static PixelsToPoints(position: any): any;
    static PointsToPixels(rect: any): any;
    static PointsToPixels(position: any): any;
    static QueueGameViewInputEvent(evt: any): void;
    static RenderGameViewCameras(cameraRect: any, gizmos: boolean, gui: boolean): void;
    static RenderGameViewCameras(cameraRect: any, statsRect: any, gizmos: boolean, gui: boolean): void;
    static RenderGameViewCameras(target: any, targetDisplay: number, screenRect: any, mousePosition: any, gizmos: boolean): void;
    static RGBToHSV(rgbColor: any, H: any, S: any, V: any): void;
    static SerializeMainMenuToString(): string;
    static SetIconSize(size: any): void;
    static SetMenuLocalizationTestMode(onoff: boolean): void;
    static SetWantsMouseJumping(wantz: number): void;
    static readonly currentViewWidth: number;
    static editingTextField: boolean;
    static fieldWidth: number;
    static hierarchyMode: boolean;
    static readonly isProSkin: boolean;
    static labelWidth: number;
    static readonly pixelsPerPoint: number;
    static readonly singleLineHeight: number;
    static readonly standardVerticalSpacing: number;
    static systemCopyBuffer: string;
    static readonly whiteTexture: any;
    static wideMode: boolean;
    static "native": any;
  }
}
declare namespace UnityEngine {
  class GUIUtility extends System.Object {
    constructor();
    static ExitGUI(): void;
    static GetControlID(hint: number, focus: any): number;
    static GetControlID(hint: number, focus: any, position: any): number;
    static GetControlID(focus: any): number;
    static GetControlID(focus: any, position: any): number;
    static GetControlID(contents: any, focus: any): number;
    static GetControlID(contents: any, focus: any, position: any): number;
    static GetStateObject(t: any, controlID: number): any;
    static GUIToScreenPoint(guiPoint: any): any;
    static QueryStateObject(t: any, controlID: number): any;
    static RotateAroundPivot(angle: number, pivotPoint: any): void;
    static ScaleAroundPivot(scale: any, pivotPoint: any): void;
    static ScreenToGUIPoint(screenPoint: any): any;
    static ScreenToGUIRect(screenRect: any): any;
    static readonly hasModalWindow: boolean;
    static hotControl: number;
    static keyboardControl: number;
    static systemCopyBuffer: string;
  }
}
declare namespace UnityEditor.EditorGUIUtility {
  class IconSizeScope extends UnityEngine.GUI.Scope {
    constructor(iconSizeWithinScope: any);
  }
}
declare namespace UnityEditor.EditorGUIUtility {
  class SkinnedColor extends System.Object {
    constructor(color: any, proColor: any);
    constructor(color: any);
    color: any;
  }
}
declare namespace UnityEditor {
  class MessageType extends System.Enum {
    protected constructor();
    static Error: UnityEditor.MessageType;
    static Info: UnityEditor.MessageType;
    static None: UnityEditor.MessageType;
    value__: number;
    static Warning: UnityEditor.MessageType;
  }
}
declare namespace UnityEditor {
  class EditorSkin extends System.Enum {
    protected constructor();
    static Game: UnityEditor.EditorSkin;
    static Inspector: UnityEditor.EditorSkin;
    static Scene: UnityEditor.EditorSkin;
    value__: number;
  }
}
declare namespace UnityEditor {
  class MouseCursor extends System.Enum {
    protected constructor();
    static Arrow: UnityEditor.MouseCursor;
    static ArrowMinus: UnityEditor.MouseCursor;
    static ArrowPlus: UnityEditor.MouseCursor;
    static CustomCursor: UnityEditor.MouseCursor;
    static FPS: UnityEditor.MouseCursor;
    static Link: UnityEditor.MouseCursor;
    static MoveArrow: UnityEditor.MouseCursor;
    static Orbit: UnityEditor.MouseCursor;
    static Pan: UnityEditor.MouseCursor;
    static ResizeHorizontal: UnityEditor.MouseCursor;
    static ResizeUpLeft: UnityEditor.MouseCursor;
    static ResizeUpRight: UnityEditor.MouseCursor;
    static ResizeVertical: UnityEditor.MouseCursor;
    static RotateArrow: UnityEditor.MouseCursor;
    static ScaleArrow: UnityEditor.MouseCursor;
    static SlideArrow: UnityEditor.MouseCursor;
    static SplitResizeLeftRight: UnityEditor.MouseCursor;
    static SplitResizeUpDown: UnityEditor.MouseCursor;
    static Text: UnityEditor.MouseCursor;
    value__: number;
    static Zoom: UnityEditor.MouseCursor;
  }
}
declare namespace UnityEditor {
  class EditorLook extends System.Enum {
    protected constructor();
    static LikeControls: UnityEditor.EditorLook;
    static LikeInspector: UnityEditor.EditorLook;
    static Uninitialized: UnityEditor.EditorLook;
    value__: number;
  }
}
declare namespace UnityEditor {
  class GUILayoutFadeGroup extends UnityEngine.GUILayoutGroup {
    constructor();
    CalcHeight(): void;
    fadeValue: number;
    guiColor: any;
    wasGUIEnabled: boolean;
  }
}
declare namespace UnityEngine {
  class GUILayoutGroup extends UnityEngine.GUILayoutEntry {
    constructor();
    constructor(_style: any, options: any[]);
    Add(e: UnityEngine.GUILayoutEntry): void;
    ApplyOptions(options: any[]): void;
    CalcHeight(): void;
    CalcWidth(): void;
    GetLast(): any;
    GetNext(): UnityEngine.GUILayoutEntry;
    PeekNext(): any;
    ResetCursor(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ToString(): string;
    readonly margin: any;
    entries: UnityEngine.GUILayoutEntry[];
    isVertical: boolean;
    isWindow: boolean;
    resetCoords: boolean;
    sameSize: boolean;
    spacing: number;
    windowID: number;
  }
}
declare namespace UnityEngine {
  class GUILayoutEntry extends System.Object {
    constructor(_minWidth: number, _maxWidth: number, _minHeight: number, _maxHeight: number, _style: any);
    constructor(_minWidth: number, _maxWidth: number, _minHeight: number, _maxHeight: number, _style: any, options: any[]);
    ApplyOptions(options: any[]): void;
    CalcHeight(): void;
    CalcWidth(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ToString(): string;
    readonly margin: any;
    style: any;
    maxHeight: number;
    maxWidth: number;
    minHeight: number;
    minWidth: number;
    rect: any;
    stretchHeight: number;
    stretchWidth: number;
  }
}
declare namespace UnityEditor {
  class OptimizedGUIBlock extends System.Object {
    constructor();
    Begin(hasChanged: boolean, position: any): boolean;
    BeginRecording(): void;
    Dispose(): void;
    End(): void;
    EndRecording(): void;
    Execute(): void;
    valid: boolean;
  }
}
declare namespace UnityEditor {
  class SessionState extends System.Object {
    protected constructor();
    static EraseBool(key: string): void;
    static EraseFloat(key: string): void;
    static EraseInt(key: string): void;
    static EraseIntArray(key: string): void;
    static EraseString(key: string): void;
    static EraseVector3(key: string): void;
    static GetBool(key: string, defaultValue: boolean): boolean;
    static GetFloat(key: string, defaultValue: number): number;
    static GetInt(key: string, defaultValue: number): number;
    static GetIntArray(key: string, defaultValue: number[]): number[];
    static GetString(key: string, defaultValue: string): string;
    static GetVector3(key: string, defaultValue: any): any;
    static SetBool(key: string, value: boolean): void;
    static SetFloat(key: string, value: number): void;
    static SetInt(key: string, value: number): void;
    static SetIntArray(key: string, value: number[]): void;
    static SetString(key: string, value: string): void;
    static SetVector3(key: string, value: any): void;
  }
}
declare namespace UnityEditor {
  class DrawGridParameters extends System.ValueType {
    protected constructor();
    alphaX: number;
    alphaY: number;
    alphaZ: number;
    color: any;
    pivot: any;
    size: number;
  }
}
declare namespace UnityEditor {
  class Handles extends System.Object {
    constructor();
    static ArrowCap(controlID: number, position: any, rotation: any, size: number): void;
    static ArrowHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static BeginGUI(): void;
    static BeginGUI(position: any): void;
    static Button(position: any, direction: any, size: number, pickSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void)): boolean;
    static Button(position: any, direction: any, size: number, pickSize: number, capFunc: ((controlID: number, position: any, rotation: any, size: number) => void)): boolean;
    static CircleCap(controlID: number, position: any, rotation: any, size: number): void;
    static CircleHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static ClearCamera(position: any, camera: any): void;
    static ConeCap(controlID: number, position: any, rotation: any, size: number): void;
    static ConeHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static CubeCap(controlID: number, position: any, rotation: any, size: number): void;
    static CubeHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static CylinderCap(controlID: number, position: any, rotation: any, size: number): void;
    static CylinderHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static Disc(rotation: any, position: any, axis: any, size: number, cutoffPlane: boolean, snap: number): any;
    static DoPositionHandle(position: any, rotation: any): any;
    static DoRotationHandle(rotation: any, position: any): any;
    static DoScaleHandle(scale: any, position: any, rotation: any, size: number): any;
    static DotCap(controlID: number, position: any, rotation: any, size: number): void;
    static DotHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DrawAAConvexPolygon(points: any[]): void;
    static DrawAAPolyLine(width: number, actualNumberOfPoints: number, points: any[]): void;
    static DrawAAPolyLine(width: number, points: any[]): void;
    static DrawAAPolyLine(lineTex: any, width: number, points: any[]): void;
    static DrawAAPolyLine(lineTex: any, points: any[]): void;
    static DrawAAPolyLine(points: any[]): void;
    static DrawArrow(controlID: number, position: any, rotation: any, size: number): void;
    static DrawBezier(startPosition: any, endPosition: any, startTangent: any, endTangent: any, color: any, texture: any, width: number): void;
    static DrawCamera(position: any, camera: any): void;
    static DrawCamera(position: any, camera: any, drawMode: UnityEditor.DrawCameraMode): void;
    static DrawCone(controlID: number, position: any, rotation: any, size: number): void;
    static DrawCube(controlID: number, position: any, rotation: any, size: number): void;
    static DrawCylinder(controlID: number, position: any, rotation: any, size: number): void;
    static DrawDottedLine(p1: any, p2: any, screenSpaceSize: number): void;
    static DrawDottedLines(points: any[], segmentIndices: number[], screenSpaceSize: number): void;
    static DrawDottedLines(lineSegments: any[], screenSpaceSize: number): void;
    static DrawLine(p1: any, p2: any): void;
    static DrawLines(lineSegments: any[]): void;
    static DrawLines(points: any[], segmentIndices: number[]): void;
    static DrawPolyLine(points: any[]): void;
    static DrawRectangle(controlID: number, position: any, rotation: any, size: number): void;
    static DrawSelectionFrame(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DrawSolidArc(center: any, normal: any, from: any, angle: number, radius: number): void;
    static DrawSolidDisc(center: any, normal: any, radius: number): void;
    static DrawSolidRectangleWithOutline(rectangle: any, faceColor: any, outlineColor: any): void;
    static DrawSolidRectangleWithOutline(verts: any[], faceColor: any, outlineColor: any): void;
    static DrawSphere(controlID: number, position: any, rotation: any, size: number): void;
    static DrawWireArc(center: any, normal: any, from: any, angle: number, radius: number): void;
    static DrawWireCube(center: any, size: any): void;
    static DrawWireDisc(center: any, normal: any, radius: number): void;
    static EndGUI(): void;
    static FreeMoveHandle(controlID: number, position: any, rotation: any, size: number, snap: any, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void)): any;
    static FreeMoveHandle(position: any, rotation: any, size: number, snap: any, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void)): any;
    static FreeMoveHandle(position: any, rotation: any, size: number, snap: any, capFunc: ((controlID: number, position: any, rotation: any, size: number) => void)): any;
    static FreeRotateHandle(rotation: any, position: any, size: number): any;
    static GetMainGameViewSize(): any;
    static Label(position: any, text: string): void;
    static Label(position: any, text: string, style: any): void;
    static Label(position: any, content: any): void;
    static Label(position: any, content: any, style: any): void;
    static Label(position: any, image: any): void;
    static MakeBezierPoints(startPosition: any, endPosition: any, startTangent: any, endTangent: any, division: number): any[];
    static PositionHandle(position: any, rotation: any): any;
    static RadiusHandle(rotation: any, position: any, radius: number): number;
    static RadiusHandle(rotation: any, position: any, radius: number, handlesOnly: boolean): number;
    static RectangleCap(controlID: number, position: any, rotation: any, size: number): void;
    static RectangleHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static RotationHandle(rotation: any, position: any): any;
    static ScaleHandle(scale: any, position: any, rotation: any, size: number): any;
    static ScaleSlider(scale: number, position: any, direction: any, rotation: any, size: number, snap: number): number;
    static ScaleValueHandle(controlID: number, value: number, position: any, rotation: any, size: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number): number;
    static ScaleValueHandle(value: number, position: any, rotation: any, size: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number): number;
    static ScaleValueHandle(value: number, position: any, rotation: any, size: number, capFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number): number;
    static SelectionFrame(controlID: number, position: any, rotation: any, size: number): void;
    static SetCamera(camera: any): void;
    static SetCamera(position: any, camera: any): void;
    static Slider(controlID: number, position: any, direction: any, size: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number): any;
    static Slider(position: any, direction: any): any;
    static Slider(position: any, direction: any, size: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number): any;
    static Slider(position: any, direction: any, size: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any, drawHelper: boolean): any;
    static SnapValue(val: number, snap: number): number;
    static SphereCap(controlID: number, position: any, rotation: any, size: number): void;
    static SphereHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static readonly centerColor: any;
    static color: any;
    currentCamera: any;
    static readonly inverseMatrix: any;
    static lighting: boolean;
    static matrix: any;
    static readonly preselectionColor: any;
    static readonly secondaryColor: any;
    static readonly selectedColor: any;
    static readonly xAxisColor: any;
    static readonly yAxisColor: any;
    static readonly zAxisColor: any;
    static zTest: any;
  }
}
declare namespace UnityEditor.Handles {
  class FilterMode extends System.Enum {
    protected constructor();
    static Off: UnityEditor.Handles.FilterMode;
    static ShowFiltered: UnityEditor.Handles.FilterMode;
    static ShowRest: UnityEditor.Handles.FilterMode;
    value__: number;
  }
}
declare namespace UnityEditor.Handles {
  class DrawingScope extends System.ValueType {
    protected constructor();
    Dispose(): void;
    readonly originalColor: any;
    readonly originalMatrix: any;
  }
}
declare namespace UnityEditor.Handles {
  class PlaneHandle extends System.Enum {
    protected constructor();
    value__: number;
    static xyPlane: UnityEditor.Handles.PlaneHandle;
    static xzPlane: UnityEditor.Handles.PlaneHandle;
    static yzPlane: UnityEditor.Handles.PlaneHandle;
  }
}
declare namespace UnityEditor {
  class HandleUtility extends System.Object {
    constructor();
    static AddControl(controlId: number, distance: number): void;
    static AddDefaultControl(controlId: number): void;
    static CalcLineTranslation(src: any, dest: any, srcPosition: any, constraintDir: any): number;
    static ClosestPointToArc(center: any, normal: any, from: any, angle: number, radius: number): any;
    static ClosestPointToDisc(center: any, normal: any, radius: number): any;
    static ClosestPointToPolyLine(vertices: any[]): any;
    static DistancePointBezier(point: any, startPosition: any, endPosition: any, startTangent: any, endTangent: any): number;
    static DistancePointLine(point: any, lineStart: any, lineEnd: any): number;
    static DistancePointToLine(p: any, a: any, b: any): number;
    static DistancePointToLineSegment(p: any, a: any, b: any): number;
    static DistanceToArc(center: any, normal: any, from: any, angle: number, radius: number): number;
    static DistanceToCircle(position: any, radius: number): number;
    static DistanceToDisc(center: any, normal: any, radius: number): number;
    static DistanceToLine(p1: any, p2: any): number;
    static DistanceToPolyLine(points: any[]): number;
    static DistanceToRectangle(position: any, rotation: any, size: number): number;
    static GetHandleSize(position: any): number;
    static GUIPointToScreenPixelCoordinate(guiPoint: any): any;
    static GUIPointToWorldRay(position: any): any;
    static PickGameObject(position: any, selectPrefabRoot: boolean): any;
    static PickGameObject(position: any, selectPrefabRoot: boolean, ignore: any[]): any;
    static PickGameObject(position: any, materialIndex: any): any;
    static PickGameObject(position: any, ignore: any[], materialIndex: any): any;
    static PickRectObjects(rect: any): any[];
    static PickRectObjects(rect: any, selectPrefabRootsOnly: boolean): any[];
    static PointOnLineParameter(point: any, linePoint: any, lineDirection: any): number;
    static PopCamera(camera: any): void;
    static ProjectPointLine(point: any, lineStart: any, lineEnd: any): any;
    static PushCamera(camera: any): void;
    static RaySnap(ray: any): any;
    static Repaint(): void;
    static WorldPointToSizedRect(position: any, content: any, style: any): any;
    static WorldToGUIPoint(world: any): any;
    static readonly acceleration: number;
    static readonly handleMaterial: any;
    static nearestControl: number;
    static readonly niceMouseDelta: number;
    static readonly niceMouseDeltaZoom: number;
  }
}
declare namespace UnityEditor.HandleUtility {
  class SavedCamera extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class EditorJsonUtility extends System.Object {
    protected constructor();
    static FromJsonOverwrite(json: string, objectToOverwrite: any): void;
    static ToJson(obj: any): string;
    static ToJson(obj: any, prettyPrint: boolean): string;
  }
}
declare namespace UnityEditor {
  class EditorMaterialUtility extends System.Object {
    constructor();
    static IsBackgroundMaterial(material: any): boolean;
    static ResetDefaultTextures(material: any, overrideSetTextures: boolean): void;
    static SetShaderDefaults(shader: any, name: string[], textures: any[]): void;
  }
}
declare namespace UnityEditorInternal {
  class EditorResourcesUtility extends System.Object {
    constructor();
    static readonly brushesPath: string;
    static readonly darkSkinSourcePath: string;
    static readonly emptyFolderIconName: string;
    static readonly folderIconName: string;
    static readonly fontsPath: string;
    static readonly generatedIconsPath: string;
    static readonly iconsPath: string;
    static readonly lightSkinSourcePath: string;
  }
}
declare namespace UnityEditor.SceneManagement {
  class OpenSceneMode extends System.Enum {
    protected constructor();
    static Additive: UnityEditor.SceneManagement.OpenSceneMode;
    static AdditiveWithoutLoading: UnityEditor.SceneManagement.OpenSceneMode;
    static Single: UnityEditor.SceneManagement.OpenSceneMode;
    value__: number;
  }
}
declare namespace UnityEditor.SceneManagement {
  class NewSceneMode extends System.Enum {
    protected constructor();
    static Additive: UnityEditor.SceneManagement.NewSceneMode;
    static Single: UnityEditor.SceneManagement.NewSceneMode;
    value__: number;
  }
}
declare namespace UnityEditor.SceneManagement {
  class NewSceneSetup extends System.Enum {
    protected constructor();
    static DefaultGameObjects: UnityEditor.SceneManagement.NewSceneSetup;
    static EmptyScene: UnityEditor.SceneManagement.NewSceneSetup;
    value__: number;
  }
}
declare namespace UnityEditor.SceneManagement {
  class EditorSceneManager extends UnityEngine.SceneManagement.SceneManager {
    constructor();
    static ClosePreviewScene(scene: any): boolean;
    static CloseScene(scene: any, removeScene: boolean): boolean;
    static DetectCrossSceneReferences(scene: any): boolean;
    static EnsureUntitledSceneHasBeenSaved(dialogContent: string): boolean;
    static GetSceneManagerSetup(): UnityEditor.SceneManagement.SceneSetup[];
    static MarkAllScenesDirty(): void;
    static MarkSceneDirty(scene: any): boolean;
    static MoveSceneAfter(src: any, dst: any): void;
    static MoveSceneBefore(src: any, dst: any): void;
    static NewPreviewScene(): any;
    static NewScene(setup: UnityEditor.SceneManagement.NewSceneSetup): any;
    static NewScene(setup: UnityEditor.SceneManagement.NewSceneSetup, mode: UnityEditor.SceneManagement.NewSceneMode): any;
    static OpenScene(scenePath: string): any;
    static OpenScene(scenePath: string, mode: UnityEditor.SceneManagement.OpenSceneMode): any;
    static RestoreSceneManagerSetup(value: UnityEditor.SceneManagement.SceneSetup[]): void;
    static SaveCurrentModifiedScenesIfUserWantsTo(): boolean;
    static SaveModifiedScenesIfUserWantsTo(scenes: any[]): boolean;
    static SaveOpenScenes(): boolean;
    static SaveScene(scene: any): boolean;
    static SaveScene(scene: any, dstScenePath: string): boolean;
    static SaveScene(scene: any, dstScenePath: string, saveAsCopy: boolean): boolean;
    static SaveScenes(scenes: any[]): boolean;
    static readonly loadedSceneCount: number;
    static playModeStartScene: UnityEditor.SceneAsset;
    static preventCrossSceneReferences: boolean;
  }
}
declare namespace UnityEngine.SceneManagement {
  class SceneManager extends System.Object {
    constructor();
    static CreateScene(sceneName: string): any;
    static GetActiveScene(): any;
    static GetAllScenes(): any[];
    static GetSceneAt(index: number): any;
    static GetSceneByBuildIndex(buildIndex: number): any;
    static GetSceneByName(name: string): any;
    static GetSceneByPath(scenePath: string): any;
    static LoadScene(sceneBuildIndex: number): void;
    static LoadScene(sceneBuildIndex: number, mode: any): void;
    static LoadScene(sceneName: string): void;
    static LoadScene(sceneName: string, mode: any): void;
    static LoadSceneAsync(sceneBuildIndex: number): any;
    static LoadSceneAsync(sceneBuildIndex: number, mode: any): any;
    static LoadSceneAsync(sceneName: string): any;
    static LoadSceneAsync(sceneName: string, mode: any): any;
    static MergeScenes(sourceScene: any, destinationScene: any): void;
    static MoveGameObjectToScene(go: any, scene: any): void;
    static SetActiveScene(scene: any): boolean;
    static UnloadScene(sceneBuildIndex: number): boolean;
    static UnloadScene(sceneName: string): boolean;
    static UnloadScene(scene: any): boolean;
    static UnloadSceneAsync(sceneBuildIndex: number): any;
    static UnloadSceneAsync(sceneName: string): any;
    static UnloadSceneAsync(scene: any): any;
    static readonly sceneCount: number;
    static readonly sceneCountInBuildSettings: number;
  }
}
declare namespace UnityEditor {
  class SerializationMode extends System.Enum {
    protected constructor();
    static ForceBinary: UnityEditor.SerializationMode;
    static ForceText: UnityEditor.SerializationMode;
    static Mixed: UnityEditor.SerializationMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class EditorBehaviorMode extends System.Enum {
    protected constructor();
    static Mode2D: UnityEditor.EditorBehaviorMode;
    static Mode3D: UnityEditor.EditorBehaviorMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SpritePackerMode extends System.Enum {
    protected constructor();
    static AlwaysOn: UnityEditor.SpritePackerMode;
    static AlwaysOnAtlas: UnityEditor.SpritePackerMode;
    static BuildTimeOnly: UnityEditor.SpritePackerMode;
    static BuildTimeOnlyAtlas: UnityEditor.SpritePackerMode;
    static Disabled: UnityEditor.SpritePackerMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ExternalVersionControl extends System.ValueType {
    protected constructor();
    ToString(): string;
    static AssetServer: string;
    static AutoDetect: string;
    static Disabled: string;
    static Generic: string;
  }
}
declare namespace UnityEditor {
  class EditorSettings extends UnityEngine.Object {
    constructor();
    static defaultBehaviorMode: UnityEditor.EditorBehaviorMode;
    static etcTextureBestCompressor: number;
    static etcTextureCompressorBehavior: number;
    static etcTextureFastCompressor: number;
    static etcTextureNormalCompressor: number;
    static externalVersionControl: string;
    static readonly projectGenerationBuiltinExtensions: string[];
    static projectGenerationRootNamespace: string;
    static projectGenerationUserExtensions: string[];
    static serializationMode: UnityEditor.SerializationMode;
    static spritePackerMode: UnityEditor.SpritePackerMode;
    static spritePackerPaddingPower: number;
    static unityRemoteCompression: string;
    static unityRemoteDevice: string;
    static unityRemoteJoystickSource: string;
    static unityRemoteResolution: string;
    static webSecurityEmulationEnabled: boolean;
    static webSecurityEmulationHostUrl: string;
  }
}
declare namespace UnityEditor {
  class SemanticMergeMode extends System.Enum {
    protected constructor();
    static Ask: UnityEditor.SemanticMergeMode;
    static Off: UnityEditor.SemanticMergeMode;
    static Premerge: UnityEditor.SemanticMergeMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class EditorUserSettings extends UnityEngine.Object {
    constructor();
    static GetConfigValue(name: string): string;
    static SetConfigValue(name: string, value: string): void;
    static AutomaticAdd: boolean;
    static semanticMergeMode: UnityEditor.SemanticMergeMode;
    static showFailedCheckout: boolean;
    static WorkOffline: boolean;
  }
}
declare namespace UnityEditor {
  class EditorWindow extends UnityEngine.ScriptableObject {
    constructor();
    BeginWindows(): void;
    Close(): void;
    EndWindows(): void;
    Focus(): void;
    static FocusWindowIfItsOpen(t: any): void;
    static GetWindow(t: any): UnityEditor.EditorWindow;
    static GetWindow(t: any, utility: boolean): UnityEditor.EditorWindow;
    static GetWindow(t: any, utility: boolean, title: string): UnityEditor.EditorWindow;
    static GetWindow(t: any, utility: boolean, title: string, focus: boolean): UnityEditor.EditorWindow;
    static GetWindowWithRect(t: any, rect: any): UnityEditor.EditorWindow;
    static GetWindowWithRect(t: any, rect: any, utility: boolean): UnityEditor.EditorWindow;
    static GetWindowWithRect(t: any, rect: any, utility: boolean, title: string): UnityEditor.EditorWindow;
    RemoveNotification(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    ShowAuxWindow(): void;
    ShowNotification(notification: any): void;
    ShowPopup(): void;
    ShowTab(): void;
    ShowUtility(): void;
    antiAlias: number;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    static readonly focusedWindow: UnityEditor.EditorWindow;
    maximized: boolean;
    maxSize: any;
    minSize: any;
    static readonly mouseOverWindow: UnityEditor.EditorWindow;
    position: any;
    title: string;
    titleContent: any;
    wantsMouseEnterLeaveWindow: boolean;
    wantsMouseMove: boolean;
  }
}
declare namespace UnityEditor {
  class ExportPackageOptions extends System.Enum {
    protected constructor();
    static Default: UnityEditor.ExportPackageOptions;
    static IncludeDependencies: UnityEditor.ExportPackageOptions;
    static IncludeLibraryAssets: UnityEditor.ExportPackageOptions;
    static Interactive: UnityEditor.ExportPackageOptions;
    static Recurse: UnityEditor.ExportPackageOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class FileUtil extends System.Object {
    constructor();
    static CopyFileOrDirectory(source: string, dest: string): void;
    static CopyFileOrDirectoryFollowSymlinks(source: string, dest: string): void;
    static DeleteFileOrDirectory(path: string): boolean;
    static GetProjectRelativePath(path: string): string;
    static GetUniqueTempPathInProject(): string;
    static MoveFileOrDirectory(source: string, dest: string): void;
    static ReplaceDirectory(src: string, dst: string): void;
    static ReplaceFile(src: string, dst: string): void;
  }
}
declare namespace UnityEditor {
  class GenericMenu extends System.Object {
    constructor();
    AddDisabledItem(content: any): void;
    AddItem(content: any, on: boolean, func: (() => void)): void;
    AddItem(content: any, on: boolean, func: ((userData: any) => void), userData: any): void;
    AddSeparator(path: string): void;
    DropDown(position: any): void;
    GetItemCount(): number;
    ShowAsContext(): void;
  }
}
declare namespace UnityEditor.GenericMenu {
  class MenuItem extends System.Object {
    constructor(_content: any, _separator: boolean, _on: boolean, _func: (() => void));
    constructor(_content: any, _separator: boolean, _on: boolean, _func: ((userData: any) => void), _userData: any);
    content: any;
    func: (() => void);
    func2: ((userData: any) => void);
    on: boolean;
    separator: boolean;
    userData: any;
  }
}
declare namespace UnityEditor {
  class ViewTool extends System.Enum {
    protected constructor();
    static FPS: UnityEditor.ViewTool;
    static None: UnityEditor.ViewTool;
    static Orbit: UnityEditor.ViewTool;
    static Pan: UnityEditor.ViewTool;
    value__: number;
    static Zoom: UnityEditor.ViewTool;
  }
}
declare namespace UnityEditor {
  class PivotMode extends System.Enum {
    protected constructor();
    static Center: UnityEditor.PivotMode;
    static Pivot: UnityEditor.PivotMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PivotRotation extends System.Enum {
    protected constructor();
    static Global: UnityEditor.PivotRotation;
    static Local: UnityEditor.PivotRotation;
    value__: number;
  }
}
declare namespace UnityEditor {
  class Tool extends System.Enum {
    protected constructor();
    static Move: UnityEditor.Tool;
    static None: UnityEditor.Tool;
    static Rect: UnityEditor.Tool;
    static Rotate: UnityEditor.Tool;
    static Scale: UnityEditor.Tool;
    value__: number;
    static View: UnityEditor.Tool;
  }
}
declare namespace UnityEditor {
  class Tools extends UnityEngine.ScriptableObject {
    constructor();
    static current: UnityEditor.Tool;
    static readonly handlePosition: any;
    static readonly handleRect: any;
    static readonly handleRectRotation: any;
    static handleRotation: any;
    static hidden: boolean;
    static lockedLayers: number;
    static pivotMode: UnityEditor.PivotMode;
    static pivotRotation: UnityEditor.PivotRotation;
    static rectBlueprintMode: boolean;
    static viewTool: UnityEditor.ViewTool;
    static visibleLayers: number;
  }
}
declare namespace UnityEditor {
  class GUIView extends UnityEditor.View {
    constructor();
    CaptureRenderDoc(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    SetAsStartView(): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    antiAlias: number;
    autoRepaintOnSceneChange: boolean;
    static readonly current: UnityEditor.GUIView;
    depthBufferBits: number;
    eventInterests: any;
    static readonly focusedView: UnityEditor.GUIView;
    readonly hasFocus: boolean;
    static readonly mouseOverView: UnityEditor.GUIView;
    readonly visualTree: any;
    wantsMouseEnterLeaveWindow: boolean;
    wantsMouseMove: boolean;
  }
}
declare namespace UnityEditor {
  class View extends UnityEngine.ScriptableObject {
    constructor();
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    IndexOfChild(child: UnityEditor.View): number;
    RemoveChild(idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    readonly allChildren: UnityEditor.View[];
    readonly children: UnityEditor.View[];
    readonly maxSize: any;
    readonly minSize: any;
    readonly parent: UnityEditor.View;
    position: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly windowPosition: any;
  }
}
declare namespace UnityEditor.Hardware {
  class UsbDevice extends System.ValueType {
    protected constructor();
    ToString(): string;
    name: string;
    productId: number;
    revision: number;
    udid: string;
    vendorId: number;
  }
}
declare namespace UnityEditor.Hardware {
  class Usb extends System.Object {
    constructor();
    static OnDevicesChanged(devices: UnityEditor.Hardware.UsbDevice[]): void;
  }
}
declare namespace UnityEditor.Hardware {
  class DevDeviceList extends System.Object {
    constructor();
    static FindDevice(deviceId: string, device: any): boolean;
    static GetDevices(): UnityEditor.Hardware.DevDevice[];
    static OnChanged(): void;
  }
}
declare namespace UnityEditor.Hardware {
  class DevDeviceState extends System.Enum {
    protected constructor();
    static Connected: UnityEditor.Hardware.DevDeviceState;
    static Disconnected: UnityEditor.Hardware.DevDeviceState;
    value__: number;
  }
}
declare namespace UnityEditor.Hardware {
  class DevDeviceFeatures extends System.Enum {
    protected constructor();
    static None: UnityEditor.Hardware.DevDeviceFeatures;
    static PlayerConnection: UnityEditor.Hardware.DevDeviceFeatures;
    static RemoteConnection: UnityEditor.Hardware.DevDeviceFeatures;
    value__: number;
  }
}
declare namespace UnityEditor.Hardware {
  class DevDevice extends System.ValueType {
    protected constructor();
    ToString(): string;
    readonly isConnected: boolean;
    static readonly none: UnityEditor.Hardware.DevDevice;
    features: UnityEditor.Hardware.DevDeviceFeatures;
    id: string;
    module: string;
    name: string;
    state: UnityEditor.Hardware.DevDeviceState;
    type: string;
  }
}
declare namespace UnityEditor {
  class PlayerSettingsSplashScreenEditor extends System.Object {
    constructor(owner: UnityEditor.PlayerSettingsEditor);
    OnEnable(): void;
    SplashSectionGUI(platform: UnityEditor.Build.BuildPlatform, targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension, sectionIndex?: number): void;
    static readonly licenseAllowsDisabling: boolean;
  }
}
declare namespace UnityEditor.PlayerSettingsSplashScreenEditor {
  class Texts extends System.Object {
    constructor();
    animate: any;
    backgroundColor: any;
    backgroundImage: any;
    backgroundPortraitImage: any;
    backgroundTitle: any;
    backgroundZoom: any;
    configDialogBanner: any;
    drawMode: any;
    logoDuration: any;
    logosTitle: any;
    logoZoom: any;
    overlayOpacity: any;
    previewSplash: any;
    showLogo: any;
    showSplash: any;
    splashStyle: any;
    splashTitle: any;
    title: any;
    vrSplashScreen: any;
  }
}
declare namespace UnityEditorInternal {
  class CanAppendBuild extends System.Enum {
    protected constructor();
    static No: UnityEditorInternal.CanAppendBuild;
    static Unsupported: UnityEditorInternal.CanAppendBuild;
    value__: number;
    static Yes: UnityEditorInternal.CanAppendBuild;
  }
}
declare namespace UnityEditorInternal {
  class DllType extends System.Enum {
    protected constructor();
    static ManagedNET35: UnityEditorInternal.DllType;
    static ManagedNET40: UnityEditorInternal.DllType;
    static Native: UnityEditorInternal.DllType;
    static Unknown: UnityEditorInternal.DllType;
    static UnknownManaged: UnityEditorInternal.DllType;
    value__: number;
    static WinMDNative: UnityEditorInternal.DllType;
    static WinMDNET40: UnityEditorInternal.DllType;
  }
}
declare namespace UnityEditorInternal {
  class InternalEditorUtility extends System.Object {
    constructor();
    static AddTag(tag: string): void;
    static BuildCanBeAppended(target: UnityEditor.BuildTarget, location: string): UnityEditorInternal.CanAppendBuild;
    static BumpMapSettingsFixingWindowReportResult(result: number): void;
    static BumpMapTextureNeedsFixingInternal(material: any, propName: string, flaggedAsNormal: boolean): boolean;
    static CalculateHashForObjectsAndDependencies(objects: UnityEngine.Object[]): string;
    static CalculateSelectionBounds(usePivotOnlyForParticles: boolean, onlyUseActiveSelection: boolean): any;
    static CanConnectToCacheServer(): boolean;
    static ConcatenatedLayersMaskToLayerMask(concatenatedLayersMask: number): any;
    static CountToString(count: number): string;
    static CreateScriptableObjectUnchecked(script: UnityEditor.MonoScript): number;
    static DetectDotNetDll(path: string): UnityEditorInternal.DllType;
    static DetermineDepthOrder(lhs: any, rhs: any): number;
    static EnsureSceneHasBeenSaved(operation: string): boolean;
    static ExecuteCommandOnKeyWindow(commandName: string): void;
    static FixCacheServerIntegrityErrors(): number;
    static FixNormalmapTextureInternal(material: any, propName: string): void;
    static GetAssetsFolder(): string;
    static GetAuthToken(): string;
    static GetAvailableDiffTools(): string[];
    static GetBoundsOfDesktopAtPoint(pos: any): any;
    static GetCrashReportFolder(): string;
    static GetDisplayStringOfInvalidCharsOfFileName(filename: string): string;
    static GetEditorAssemblyPath(): string;
    static GetEditorFolder(): string;
    static GetEditorSettingsList(prefix: string, count: number): string[];
    static GetEngineAssemblyPath(): string;
    static GetEngineCoreModuleAssemblyPath(): string;
    static GetFullUnityVersion(): string;
    static GetGameObjectInstanceIDFromComponent(instanceID: number): number;
    static GetIconForFile(fileName: string): any;
    static GetIsInspectorExpanded(obj: UnityEngine.Object): boolean;
    static GetLayerName(layer: number): string;
    static GetLicenseFlags(): number[];
    static GetLicenseInfo(): string;
    static GetLoadedObjectFromInstanceID(instanceID: number): UnityEngine.Object;
    static GetNewSelection(clickedInstanceID: number, allInstanceIDs: number[], selectedInstanceIDs: number[], lastClickedInstanceID: number, keepMultiSelection: boolean, useShiftAsActionKey: boolean, allowMultiSelection: boolean): number[];
    static GetNoDiffToolsDetectedMessage(): string;
    static GetObjectFromInstanceID(instanceID: number): UnityEngine.Object;
    static GetSceneViewCameras(): any[];
    static GetSpriteOuterUV(sprite: any, getAtlasData: boolean): any;
    static GetTypeWithoutLoadingObject(instanceID: number): any;
    static GetUnityBuildBranch(): string;
    static GetUnityCopyright(): string;
    static GetUnityRevision(): number;
    static GetUnityVersion(): any;
    static GetUnityVersionDate(): number;
    static GetUnityVersionDigits(): string;
    static HasAdvancedLicenseOnBuildTarget(target: UnityEditor.BuildTarget): boolean;
    static HasEduLicense(): boolean;
    static HasFreeLicense(): boolean;
    static HasFullscreenCamera(): boolean;
    static HasPro(): boolean;
    static HasTeamLicense(): boolean;
    static HierarchyWindowDrag(property: UnityEditor.HierarchyProperty, perform: boolean, dropMode: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode): UnityEditor.DragAndDropVisualMode;
    static InstantiateMaterialsInEditMode(renderer: any): any[];
    static IsDotNet4Dll(path: string): boolean;
    static IsInEditorFolder(path: string): boolean;
    static IsUnityBeta(): boolean;
    static IsValidFileName(filename: string): boolean;
    static LayerMaskToConcatenatedLayersMask(mask: any): number;
    static LoadAssemblyWrapper(dllName: string, dllLocation: string): any;
    static LoadDefaultLayout(): void;
    static LoadSerializedFileAndForget(path: string): UnityEngine.Object[];
    static OnGameViewFocus(focus: boolean): void;
    static OpenEditorConsole(): void;
    static OpenFileAtLineExternal(filename: string, line: number): boolean;
    static OpenPlayerConsole(): void;
    static PassAndReturnColor32(c: any): any;
    static PassAndReturnVector2(v: any): any;
    static ProjectWindowDrag(property: UnityEditor.HierarchyProperty, perform: boolean): UnityEditor.DragAndDropVisualMode;
    static ReadScreenPixel(pixelPos: any, sizex: number, sizey: number): any[];
    static ReloadWindowLayoutMenu(): void;
    static RemoveCustomLighting(): void;
    static RemoveInvalidCharsFromFileName(filename: string, logIfInvalidChars: boolean): string;
    static RemoveTag(tag: string): void;
    static RepaintAllViews(): void;
    static RequestScriptReload(): void;
    static ResetCursor(): void;
    static RevertFactoryLayoutSettings(quitOnCancel: boolean): void;
    static SaveCursorToFile(path: string, image: any, hotSpot: any): boolean;
    static SaveEditorSettingsList(prefix: string, aList: string[], count: number): void;
    static SaveToSerializedFileAndForget(obj: UnityEngine.Object[], path: string, allowTextSerialization: boolean): void;
    static SceneViewDrag(dropUpon: UnityEngine.Object, worldPosition: any, viewportPosition: any, perform: boolean): UnityEditor.DragAndDropVisualMode;
    static SetCustomLighting(lights: any[], ambient: any): void;
    static SetCustomLightingInternal(lights: any[], ambient: any): void;
    static SetIsInspectorExpanded(obj: UnityEngine.Object, isExpanded: boolean): void;
    static SetRectTransformTemporaryRect(rectTransform: any, rect: any): void;
    static SetupShaderMenu(material: any): void;
    static ShowGameView(): void;
    static ShowPackageManagerWindow(): void;
    static SwitchSkinAndRepaintAllViews(): void;
    static TextAreaForDocBrowser(position: any, text: string, style: any): string;
    static TextifyEvent(evt: any): string;
    static TransformBounds(b: any, t: any): any;
    static VerifyCacheServerIntegrity(): number;
    static WiiUSaveStartupScreenToFile(image: any, path: string, outputWidth: number, outputHeight: number): boolean;
    static readonly defaultScreenHeight: number;
    static readonly defaultScreenWidth: number;
    static readonly defaultWebScreenHeight: number;
    static readonly defaultWebScreenWidth: number;
    static expandedProjectWindowItems: number[];
    static readonly ignoreInspectorChanges: boolean;
    static readonly inBatchMode: boolean;
    static readonly isApplicationActive: boolean;
    static readonly isHumanControllingUs: boolean;
    static readonly layers: string[];
    static readonly remoteScreenHeight: number;
    static readonly remoteScreenWidth: number;
    static readonly tags: string[];
    static readonly unityPreferencesFolder: string;
  }
}
declare namespace UnityEditorInternal.InternalEditorUtility {
  class HierarchyDropMode extends System.Enum {
    protected constructor();
    static kHierarchyDragNormal: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchyDropAfterParent: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchyDropBetween: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchyDropUpon: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchySearchActive: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class InspectorMode extends System.Enum {
    protected constructor();
    static Debug: UnityEditor.InspectorMode;
    static DebugInternal: UnityEditor.InspectorMode;
    static Normal: UnityEditor.InspectorMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class HierarchyType extends System.Enum {
    protected constructor();
    static Assets: UnityEditor.HierarchyType;
    static GameObjects: UnityEditor.HierarchyType;
    static Packages: UnityEditor.HierarchyType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IconDrawStyle extends System.Enum {
    protected constructor();
    static NonTexture: UnityEditor.IconDrawStyle;
    static Texture: UnityEditor.IconDrawStyle;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IHierarchyProperty {
    protected constructor();
    CountRemaining(expanded: number[]): number;
    Find(instanceID: number, expanded: number[]): boolean;
    FindAllAncestors(instanceIDs: number[]): number[];
    IsExpanded(expanded: number[]): boolean;
    Next(expanded: number[]): boolean;
    NextWithDepthCheck(expanded: number[], minDepth: number): boolean;
    Parent(): boolean;
    Previous(expanded: number[]): boolean;
    Reset(): void;
    Skip(count: number, expanded: number[]): boolean;
    readonly ancestors: number[];
    readonly colorCode: number;
    readonly depth: number;
    readonly guid: string;
    readonly hasChildren: boolean;
    readonly hasFullPreviewImage: boolean;
    readonly icon: any;
    readonly iconDrawStyle: UnityEditor.IconDrawStyle;
    readonly instanceID: number;
    readonly isFolder: boolean;
    readonly isMainRepresentation: boolean;
    readonly isValid: boolean;
    readonly name: string;
    readonly pptrValue: UnityEngine.Object;
    readonly row: number;
  }
}
declare namespace UnityEditor {
  class HierarchyProperty extends System.Object {
    constructor(hierarchyType: UnityEditor.HierarchyType);
    static ClearSceneObjectsFilter(): void;
    CountRemaining(expanded: number[]): number;
    static FilterSingleSceneObject(instanceID: number, otherVisibilityState: boolean): void;
    Find(instanceID: number, expanded: number[]): boolean;
    FindAllAncestors(instanceIDs: number[]): number[];
    GetScene(): any;
    IsExpanded(expanded: number[]): boolean;
    Next(expanded: number[]): boolean;
    NextWithDepthCheck(expanded: number[], minDepth: number): boolean;
    Parent(): boolean;
    Previous(expanded: number[]): boolean;
    Reset(): void;
    SetSearchFilter(searchString: string, mode: number): void;
    Skip(count: number, expanded: number[]): boolean;
    alphaSorted: boolean;
    readonly ancestors: number[];
    readonly colorCode: number;
    readonly depth: number;
    readonly guid: string;
    readonly hasChildren: boolean;
    readonly hasFullPreviewImage: boolean;
    readonly icon: any;
    readonly iconDrawStyle: UnityEditor.IconDrawStyle;
    readonly instanceID: number;
    readonly isFolder: boolean;
    readonly isMainRepresentation: boolean;
    readonly isValid: boolean;
    readonly name: string;
    readonly pptrValue: UnityEngine.Object;
    readonly row: number;
  }
}
declare namespace UnityEditor {
  class AssetMoveResult extends System.Enum {
    protected constructor();
    static DidMove: UnityEditor.AssetMoveResult;
    static DidNotMove: UnityEditor.AssetMoveResult;
    static FailedMove: UnityEditor.AssetMoveResult;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssetDeleteResult extends System.Enum {
    protected constructor();
    static DidDelete: UnityEditor.AssetDeleteResult;
    static DidNotDelete: UnityEditor.AssetDeleteResult;
    static FailedDelete: UnityEditor.AssetDeleteResult;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SaveAssetsProcessor extends UnityEditor.AssetModificationProcessor {
    constructor();
  }
}
declare namespace UnityEditor {
  class InternalMeshUtil extends System.Object {
    constructor();
    static CalcTriangleCount(mesh: any): number;
    static GetCachedMeshSurfaceArea(meshRenderer: any): number;
    static GetPrimitiveCount(mesh: any): number;
    static GetVertexFormat(mesh: any): string;
    static HasNormals(mesh: any): boolean;
  }
}
declare namespace UnityEditor {
  class VideoUtil extends System.Object {
    constructor();
    static GetPreviewTexture(id: UnityEditor.GUID): any;
    static IsPreviewPlaying(id: UnityEditor.GUID): boolean;
    static PausePreview(id: UnityEditor.GUID): void;
    static PlayPreview(id: UnityEditor.GUID, loop: boolean): void;
    static StartPreview(clip: any): UnityEditor.GUID;
    static StopPreview(id: UnityEditor.GUID): void;
  }
}
declare namespace UnityEditor {
  class MeshUtility extends System.Object {
    constructor();
    static GetMeshCompression(mesh: any): UnityEditor.ModelImporterMeshCompression;
    static Optimize(mesh: any): void;
    static SetMeshCompression(mesh: any, compression: UnityEditor.ModelImporterMeshCompression): void;
    static SetPerTriangleUV2(src: any, triUV: any[]): void;
  }
}
declare namespace UnityEditor {
  class ArrayUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class OSUtil extends System.Object {
    constructor();
    static GetAppFriendlyName(app: string): string;
    static GetDefaultAppPath(fileType: string): string;
    static GetDefaultApps(fileType: string): string[];
    static GetDefaultCachePath(): string;
  }
}
declare namespace UnityEditor {
  class TerrainInspectorUtil extends System.Object {
    constructor();
    static CheckTreeDistance(terrainData: any, position: any, prototypeIndex: number, distanceBias: number): boolean;
    static GetPrototypeCount(terrainData: any): number;
    static GetPrototypeExtent(terrainData: any, prototypeIndex: number): any;
    static GetTreePlacementSize(terrainData: any, prototypeIndex: number, spacing: number, treeCount: number): number;
    static PrototypeIsRenderable(terrainData: any, prototypeIndex: number): boolean;
    static RefreshPhysicsInEditMode(): void;
  }
}
declare namespace UnityEditor {
  class PhysicsManager extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class AudioManager extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class Physics2DSettings extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class MonoManager extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TagManager extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class DDSImporter extends UnityEditor.AssetImporter {
    constructor();
    isReadable: boolean;
  }
}
declare namespace UnityEditor {
  class IHVImageFormatImporter extends UnityEditor.AssetImporter {
    constructor();
    filterMode: any;
    isReadable: boolean;
    wrapMode: any;
    wrapModeU: any;
    wrapModeV: any;
    wrapModeW: any;
  }
}
declare namespace UnityEditor {
  class UnwrapParam extends System.ValueType {
    protected constructor();
    static SetDefaults(param: any): void;
    angleError: number;
    areaError: number;
    hardAngle: number;
    packMargin: number;
  }
}
declare namespace UnityEditor {
  class Unwrapping extends System.Object {
    constructor();
    static GeneratePerTriangleUV(src: any): any[];
    static GeneratePerTriangleUV(src: any, settings: UnityEditor.UnwrapParam): any[];
    static GenerateSecondaryUVSet(src: any): void;
    static GenerateSecondaryUVSet(src: any, settings: UnityEditor.UnwrapParam): void;
  }
}
declare namespace UnityEditor {
  class StaticOcclusionCulling extends System.Object {
    constructor();
    static Cancel(): void;
    static Clear(): void;
    static Compute(): boolean;
    static GenerateInBackground(): boolean;
    static SetDefaultOcclusionBakeSettings(): void;
    static backfaceThreshold: number;
    static readonly doesSceneHaveManualPortals: boolean;
    static readonly isRunning: boolean;
    static smallestHole: number;
    static smallestOccluder: number;
    static readonly umbraDataSize: number;
  }
}
declare namespace UnityEditor {
  class StaticOcclusionCullingVisualization extends System.Object {
    constructor();
    static readonly isPreviewOcclusionCullingCameraInPVS: boolean;
    static readonly previewOcclucionCamera: any;
    static readonly previewOcclusionCamera: any;
    static showDynamicObjectBounds: boolean;
    static showGeometryCulling: boolean;
    static showOcclusionCulling: boolean;
    static showPortals: boolean;
    static showPreVisualization: boolean;
    static showViewVolumes: boolean;
    static showVisibilityLines: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AnimationCurvePreviewCache extends System.Object {
    constructor();
    static ClearCache(): void;
    static GetCurvePreview(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, color: any): any;
    static GetCurvePreviewFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetCurvePreviewRegion(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, curve2: any, color: any): any;
    static GetCurvePreviewRegionFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, curve2: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any, curveRanges: any): any;
    static GetPropertyPreview(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, color: any): any;
    static GetPropertyPreviewFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPropertyPreviewRegion(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any): any;
    static GetPropertyPreviewRegionFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
  }
}
declare namespace UnityEditorInternal {
  class GradientPreviewCache extends System.Object {
    constructor();
    static ClearCache(): void;
    static GetGradientPreview(curve: any): any;
    static GetPropertyPreview(property: UnityEditor.SerializedProperty): any;
  }
}
declare namespace UnityEditorInternal {
  class ModuleMetadata extends System.Object {
    constructor();
    static GetICallModule(icall: string): string;
    static GetModuleClasses(moduleName: string): number[];
    static GetModuleNames(): string[];
    static GetModuleStrippable(moduleName: string): boolean;
    static GetModuleTypes(moduleName: string): UnityEditor.UnityType[];
  }
}
declare namespace UnityEditor {
  class LicenseManagementWindow extends UnityEditor.EditorWindow {
    constructor();
    static ActivateNewLicense(): void;
    static CheckForUpdates(): void;
    static ManualActivation(): void;
    static ReturnLicense(): void;
  }
}
declare namespace UnityEditor {
  class LocalizationDatabase extends System.Object {
    constructor();
    static GetLocalizedString(original: string): string;
    static MarkForTranslation(value: string): string;
  }
}
declare namespace UnityEditor {
  class LODVisualizationInformation extends System.ValueType {
    protected constructor();
    activeDistance: number;
    activeLODFade: number;
    activeLODLevel: number;
    activePixelSize: number;
    activeRelativeScreenSize: number;
    rendererCount: number;
    submeshCount: number;
    triangleCount: number;
    vertexCount: number;
    worldSpaceSize: number;
  }
}
declare namespace UnityEditor {
  class LODUtility extends System.Object {
    constructor();
    static CalculateLODGroupBoundingBox(group: any): void;
  }
}
declare namespace UnityEditor {
  class LogEntry extends System.Object {
    constructor();
    condition: string;
    errorNum: number;
    file: string;
    identifier: number;
    instanceID: number;
    isWorldPlaying: number;
    line: number;
    mode: number;
  }
}
declare namespace UnityEditor {
  class LogEntries extends System.Object {
    constructor();
    static Clear(): void;
    static ClickStatusBar(count: number): void;
    static EndGettingEntries(): void;
    static GetCount(): number;
    static GetCountsByType(errorCount: any, warningCount: any, logCount: any): void;
    static GetEntryCount(row: number): number;
    static GetEntryInternal(row: number, outputEntry: UnityEditor.LogEntry): boolean;
    static GetFirstTwoLinesEntryTextAndModeInternal(row: number, mask: any, outString: any): void;
    static GetStatusMask(): number;
    static GetStatusText(): string;
    static GetStatusViewErrorIndex(): number;
    static RowGotDoubleClicked(index: number): void;
    static SetConsoleFlag(bit: number, value: boolean): void;
    static StartGettingEntries(): number;
    static consoleFlags: number;
  }
}
declare namespace UnityEditor {
  class ParticleSystemEditorUtils extends System.Object {
    constructor();
    static GetRoot(ps: any): any;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerUtility extends System.Object {
    constructor();
    static GetBatchBreakCauseStrings(): string[];
    static GetFrameEventData(index: number, frameDebuggerEventData: any): boolean;
    static GetFrameEventGameObject(index: number): any;
    static GetFrameEventInfoName(index: number): string;
    static GetFrameEvents(): UnityEditorInternal.FrameDebuggerEvent[];
    static GetRemotePlayerGUID(): number;
    static IsLocalEnabled(): boolean;
    static IsRemoteEnabled(): boolean;
    static SetEnabled(enabled: boolean, remotePlayerGUID: number): void;
    static SetRenderTargetDisplayOptions(rtIndex: number, channels: any, blackLevel: number, whiteLevel: number): void;
    static readonly count: number;
    static readonly eventDataHash: number;
    static readonly eventsHash: number;
    static limit: number;
    static readonly locallySupported: boolean;
    static readonly receivingRemoteFrameEventData: boolean;
  }
}
declare namespace UnityEditor {
  class ResolutionDialogSetting extends System.Enum {
    protected constructor();
    static Disabled: UnityEditor.ResolutionDialogSetting;
    static Enabled: UnityEditor.ResolutionDialogSetting;
    static HiddenByDefault: UnityEditor.ResolutionDialogSetting;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ScriptingImplementation extends System.Enum {
    protected constructor();
    static IL2CPP: UnityEditor.ScriptingImplementation;
    static Mono2x: UnityEditor.ScriptingImplementation;
    value__: number;
    static WinRTDotNET: UnityEditor.ScriptingImplementation;
  }
}
declare namespace UnityEditor {
  class AspectRatio extends System.Enum {
    protected constructor();
    static Aspect16by10: UnityEditor.AspectRatio;
    static Aspect16by9: UnityEditor.AspectRatio;
    static Aspect4by3: UnityEditor.AspectRatio;
    static Aspect5by4: UnityEditor.AspectRatio;
    static AspectOthers: UnityEditor.AspectRatio;
    value__: number;
  }
}
declare namespace UnityEditor {
  class MacFullscreenMode extends System.Enum {
    protected constructor();
    static CaptureDisplay: UnityEditor.MacFullscreenMode;
    static FullscreenWindow: UnityEditor.MacFullscreenMode;
    static FullscreenWindowWithDockAndMenuBar: UnityEditor.MacFullscreenMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class D3D9FullscreenMode extends System.Enum {
    protected constructor();
    static ExclusiveMode: UnityEditor.D3D9FullscreenMode;
    static FullscreenWindow: UnityEditor.D3D9FullscreenMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class D3D11FullscreenMode extends System.Enum {
    protected constructor();
    static ExclusiveMode: UnityEditor.D3D11FullscreenMode;
    static FullscreenWindow: UnityEditor.D3D11FullscreenMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class StereoRenderingPath extends System.Enum {
    protected constructor();
    static Instancing: UnityEditor.StereoRenderingPath;
    static MultiPass: UnityEditor.StereoRenderingPath;
    static SinglePass: UnityEditor.StereoRenderingPath;
    value__: number;
  }
}
declare namespace UnityEditor {
  class StrippingLevel extends System.Enum {
    protected constructor();
    static Disabled: UnityEditor.StrippingLevel;
    static StripAssemblies: UnityEditor.StrippingLevel;
    static StripByteCode: UnityEditor.StrippingLevel;
    static UseMicroMSCorlib: UnityEditor.StrippingLevel;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ScriptCallOptimizationLevel extends System.Enum {
    protected constructor();
    static FastButNoExceptions: UnityEditor.ScriptCallOptimizationLevel;
    static SlowAndSafe: UnityEditor.ScriptCallOptimizationLevel;
    value__: number;
  }
}
declare namespace UnityEditor {
  class UIOrientation extends System.Enum {
    protected constructor();
    static AutoRotation: UnityEditor.UIOrientation;
    static LandscapeLeft: UnityEditor.UIOrientation;
    static LandscapeRight: UnityEditor.UIOrientation;
    static Portrait: UnityEditor.UIOrientation;
    static PortraitUpsideDown: UnityEditor.UIOrientation;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ScriptingRuntimeVersion extends System.Enum {
    protected constructor();
    static Latest: UnityEditor.ScriptingRuntimeVersion;
    static Legacy: UnityEditor.ScriptingRuntimeVersion;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ApiCompatibilityLevel extends System.Enum {
    protected constructor();
    static NET_2_0: UnityEditor.ApiCompatibilityLevel;
    static NET_2_0_Subset: UnityEditor.ApiCompatibilityLevel;
    static NET_4_6: UnityEditor.ApiCompatibilityLevel;
    static NET_Micro: UnityEditor.ApiCompatibilityLevel;
    static NET_Web: UnityEditor.ApiCompatibilityLevel;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ActionOnDotNetUnhandledException extends System.Enum {
    protected constructor();
    static Crash: UnityEditor.ActionOnDotNetUnhandledException;
    static SilentExit: UnityEditor.ActionOnDotNetUnhandledException;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SplashScreenStyle extends System.Enum {
    protected constructor();
    static Dark: UnityEditor.SplashScreenStyle;
    static Light: UnityEditor.SplashScreenStyle;
    value__: number;
  }
}
declare namespace UnityEditor {
  class GraphicsJobMode extends System.Enum {
    protected constructor();
    static Legacy: UnityEditor.GraphicsJobMode;
    static Native: UnityEditor.GraphicsJobMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IconKind extends System.Enum {
    protected constructor();
    static Any: UnityEditor.IconKind;
    static Application: UnityEditor.IconKind;
    static Notification: UnityEditor.IconKind;
    static Settings: UnityEditor.IconKind;
    static Spotlight: UnityEditor.IconKind;
    static Store: UnityEditor.IconKind;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PlayerSettings extends UnityEngine.Object {
    constructor();
    static GetAdditionalIl2CppArgs(): string;
    static GetApiCompatibilityLevel(buildTargetGroup: UnityEditor.BuildTargetGroup): UnityEditor.ApiCompatibilityLevel;
    static GetApplicationIdentifier(targetGroup: UnityEditor.BuildTargetGroup): string;
    static GetArchitecture(targetGroup: UnityEditor.BuildTargetGroup): number;
    static GetGraphicsAPIs(platform: UnityEditor.BuildTarget): any[];
    static GetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup): any[];
    static GetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup, kind: UnityEditor.IconKind): any[];
    static GetIconSizesForTargetGroup(platform: UnityEditor.BuildTargetGroup): number[];
    static GetIconSizesForTargetGroup(platform: UnityEditor.BuildTargetGroup, kind: UnityEditor.IconKind): number[];
    static GetIncrementalIl2CppBuild(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static GetMobileMTRendering(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static GetPlatformVuforiaEnabled(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static GetPropertyBool(name: string): boolean;
    static GetPropertyBool(name: string, target: UnityEditor.BuildTargetGroup): boolean;
    static GetPropertyInt(name: string): number;
    static GetPropertyInt(name: string, target: UnityEditor.BuildTargetGroup): number;
    static GetPropertyOptionalBool(name: string, value: any): boolean;
    static GetPropertyOptionalBool(name: string, value: any, target: UnityEditor.BuildTargetGroup): boolean;
    static GetPropertyOptionalInt(name: string, value: any): boolean;
    static GetPropertyOptionalInt(name: string, value: any, target: UnityEditor.BuildTargetGroup): boolean;
    static GetPropertyOptionalString(name: string, value: any): boolean;
    static GetPropertyOptionalString(name: string, value: any, target: UnityEditor.BuildTargetGroup): boolean;
    static GetPropertyString(name: string): string;
    static GetPropertyString(name: string, target: UnityEditor.BuildTargetGroup): string;
    static GetScriptingBackend(targetGroup: UnityEditor.BuildTargetGroup): UnityEditor.ScriptingImplementation;
    static GetScriptingDefineSymbolsForGroup(targetGroup: UnityEditor.BuildTargetGroup): string;
    static GetStackTraceLogType(logType: any): any;
    static GetUseDefaultGraphicsAPIs(platform: UnityEditor.BuildTarget): boolean;
    static HasAspectRatio(aspectRatio: UnityEditor.AspectRatio): boolean;
    static SetAdditionalIl2CppArgs(additionalArgs: string): void;
    static SetApiCompatibilityLevel(buildTargetGroup: UnityEditor.BuildTargetGroup, value: UnityEditor.ApiCompatibilityLevel): void;
    static SetApplicationIdentifier(targetGroup: UnityEditor.BuildTargetGroup, identifier: string): void;
    static SetArchitecture(targetGroup: UnityEditor.BuildTargetGroup, architecture: number): void;
    static SetAspectRatio(aspectRatio: UnityEditor.AspectRatio, enable: boolean): void;
    static SetGraphicsAPIs(platform: UnityEditor.BuildTarget, apis: any[]): void;
    static SetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup, icons: any[]): void;
    static SetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup, icons: any[], kind: UnityEditor.IconKind): void;
    static SetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup, icons: any[], kinds: UnityEditor.IconKind[]): void;
    static SetIncrementalIl2CppBuild(targetGroup: UnityEditor.BuildTargetGroup, enabled: boolean): void;
    static SetMobileMTRendering(targetGroup: UnityEditor.BuildTargetGroup, enable: boolean): void;
    static SetPlatformVuforiaEnabled(targetGroup: UnityEditor.BuildTargetGroup, enabled: boolean): void;
    static SetPropertyBool(name: string, value: boolean): void;
    static SetPropertyBool(name: string, value: boolean, target: UnityEditor.BuildTarget): void;
    static SetPropertyBool(name: string, value: boolean, target: UnityEditor.BuildTargetGroup): void;
    static SetPropertyInt(name: string, value: number): void;
    static SetPropertyInt(name: string, value: number, target: UnityEditor.BuildTarget): void;
    static SetPropertyInt(name: string, value: number, target: UnityEditor.BuildTargetGroup): void;
    static SetPropertyString(name: string, value: string): void;
    static SetPropertyString(name: string, value: string, target: UnityEditor.BuildTarget): void;
    static SetPropertyString(name: string, value: string, target: UnityEditor.BuildTargetGroup): void;
    static SetScriptingBackend(targetGroup: UnityEditor.BuildTargetGroup, backend: UnityEditor.ScriptingImplementation): void;
    static SetScriptingDefineSymbolsForGroup(targetGroup: UnityEditor.BuildTargetGroup, defines: string): void;
    static SetStackTraceLogType(logType: any, stackTraceType: any): void;
    static SetUseDefaultGraphicsAPIs(platform: UnityEditor.BuildTarget, automatic: boolean): void;
    static accelerometerFrequency: number;
    static actionOnDotNetUnhandledException: UnityEditor.ActionOnDotNetUnhandledException;
    static readonly advancedLicense: boolean;
    static allowedAutorotateToLandscapeLeft: boolean;
    static allowedAutorotateToLandscapeRight: boolean;
    static allowedAutorotateToPortrait: boolean;
    static allowedAutorotateToPortraitUpsideDown: boolean;
    static allowFullscreenSwitch: boolean;
    static alwaysDisplayWatermark: boolean;
    static aotOptions: string;
    static apiCompatibilityLevel: UnityEditor.ApiCompatibilityLevel;
    static applicationIdentifier: string;
    static bakeCollisionMeshes: boolean;
    static bundleIdentifier: string;
    static bundleVersion: string;
    static captureSingleScreen: boolean;
    static readonly cloudProjectId: string;
    static colorSpace: any;
    static companyName: string;
    static cursorHotspot: any;
    static d3d11FullscreenMode: UnityEditor.D3D11FullscreenMode;
    static d3d9FullscreenMode: UnityEditor.D3D9FullscreenMode;
    static defaultCursor: any;
    static defaultInterfaceOrientation: UnityEditor.UIOrientation;
    static defaultIsFullScreen: boolean;
    static defaultIsNativeResolution: boolean;
    static defaultScreenHeight: number;
    static defaultScreenWidth: number;
    static defaultWebScreenHeight: number;
    static defaultWebScreenWidth: number;
    static displayResolutionDialog: UnityEditor.ResolutionDialogSetting;
    static enableCrashReportAPI: boolean;
    static enableInternalProfiler: boolean;
    static firstStreamedLevelWithResources: number;
    static forceSingleInstance: boolean;
    static gpuSkinning: boolean;
    static graphicsJobMode: UnityEditor.GraphicsJobMode;
    static graphicsJobs: boolean;
    static iPhoneBundleIdentifier: string;
    static keyaliasPass: string;
    static keystorePass: string;
    static locationUsageDescription: string;
    static logObjCUncaughtExceptions: boolean;
    static macFullscreenMode: UnityEditor.MacFullscreenMode;
    static macRetinaSupport: boolean;
    static mobileRenderingPath: any;
    static MTRendering: boolean;
    static muteOtherAudioSources: boolean;
    static openGLRequireES31: boolean;
    static openGLRequireES31AEP: boolean;
    static readonly productGUID: any;
    static productName: string;
    static protectGraphicsMemory: boolean;
    static renderingPath: any;
    static resizableWindow: boolean;
    static resolutionDialogBanner: any;
    static runInBackground: boolean;
    static scriptingRuntimeVersion: UnityEditor.ScriptingRuntimeVersion;
    static showUnitySplashScreen: boolean;
    static singlePassStereoRendering: boolean;
    static splashScreenStyle: UnityEditor.SplashScreenStyle;
    static statusBarHidden: boolean;
    static stereoRenderingPath: UnityEditor.StereoRenderingPath;
    static stereoscopic3D: boolean;
    static stripEngineCode: boolean;
    static strippingLevel: UnityEditor.StrippingLevel;
    static stripUnusedMeshComponents: boolean;
    static targetGlesGraphics: UnityEditor.TargetGlesGraphics;
    static targetIOSGraphics: UnityEditor.TargetIOSGraphics;
    static use32BitDisplayBuffer: boolean;
    static useAnimatedAutorotation: boolean;
    static useDirect3D11: boolean;
    static useHDRDisplay: boolean;
    static useMacAppStoreValidation: boolean;
    static usePlayerLog: boolean;
    static virtualRealitySplashScreen: any;
    static virtualRealitySupported: boolean;
    static visibleInBackground: boolean;
    static xboxAdditionalTitleMemorySize: number;
    static xboxDeployKinectHeadOrientation: boolean;
    static xboxDeployKinectHeadPosition: boolean;
    static readonly xboxDeployKinectResources: boolean;
    static readonly xboxEnableAvatar: boolean;
    static readonly xboxEnableGuest: boolean;
    static readonly xboxEnableKinect: boolean;
    static readonly xboxEnableKinectAutoTracking: boolean;
    static readonly xboxEnableSpeech: boolean;
    static readonly xboxGenerateSpa: boolean;
    static readonly xboxImageXexFilePath: string;
    static readonly xboxOneResolution: number;
    static readonly xboxPIXTextureCapture: boolean;
    static readonly xboxSpaFilePath: string;
    static readonly xboxSpeechDB: number;
    static readonly xboxSplashScreen: any;
    static xboxTitleId: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class PSM extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.PlayerSettings {
  class Android extends System.Object {
    constructor();
    static androidIsGame: boolean;
    static androidTVCompatibility: boolean;
    static blitType: UnityEditor.AndroidBlitType;
    static bundleVersionCode: number;
    static disableDepthAndStencilBuffers: boolean;
    static forceInternetPermission: boolean;
    static forceSDCardPermission: boolean;
    static keyaliasName: string;
    static keyaliasPass: string;
    static keystoreName: string;
    static keystorePass: string;
    static readonly licenseVerification: boolean;
    static maxAspectRatio: number;
    static minSdkVersion: UnityEditor.AndroidSdkVersions;
    static preferredInstallLocation: UnityEditor.AndroidPreferredInstallLocation;
    static showActivityIndicatorOnLoading: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static splashScreenScale: UnityEditor.AndroidSplashScreenScale;
    static targetDevice: UnityEditor.AndroidTargetDevice;
    static targetSdkVersion: UnityEditor.AndroidSdkVersions;
    static use24BitDepthBuffer: boolean;
    static useAPKExpansionFiles: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class VRCardboard extends System.Object {
    protected constructor();
    static depthFormat: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class VRDaydream extends System.Object {
    protected constructor();
    static daydreamIcon: any;
    static daydreamIconBackground: any;
    static depthFormat: number;
    static enableVideoSurface: boolean;
    static enableVideoSurfaceProtectedMemory: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class Facebook extends System.Object {
    constructor();
    static sdkVersion: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class iOS extends System.Object {
    constructor();
    static SetiPadLaunchScreenType(type: UnityEditor.iOSLaunchScreenType): void;
    static SetiPhoneLaunchScreenType(type: UnityEditor.iOSLaunchScreenType): void;
    static SetLaunchScreenImage(image: any, type: UnityEditor.iOSLaunchScreenImageType): void;
    static allowHTTPDownload: boolean;
    static appInBackgroundBehavior: UnityEditor.iOSAppInBackgroundBehavior;
    static appleDeveloperTeamID: string;
    static appleEnableAutomaticSigning: boolean;
    static applicationDisplayName: string;
    static backgroundModes: UnityEditor.iOSBackgroundMode;
    static buildNumber: string;
    static cameraUsageDescription: string;
    static exitOnSuspend: boolean;
    static forceHardShadowsOnMetal: boolean;
    static iOSManualProvisioningProfileID: string;
    static locationUsageDescription: string;
    static microphoneUsageDescription: string;
    static overrideIPodMusic: boolean;
    static prerenderedIcon: boolean;
    static requiresFullScreen: boolean;
    static requiresPersistentWiFi: boolean;
    static scriptCallOptimization: UnityEditor.ScriptCallOptimizationLevel;
    static sdkVersion: UnityEditor.iOSSdkVersion;
    static showActivityIndicatorOnLoading: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static statusBarStyle: UnityEditor.iOSStatusBarStyle;
    static targetDevice: UnityEditor.iOSTargetDevice;
    static targetOSVersion: UnityEditor.iOSTargetOSVersion;
    static targetOSVersionString: string;
    static targetResolution: UnityEditor.iOSTargetResolution;
    static tvOSManualProvisioningProfileID: string;
    static useOnDemandResources: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class macOS extends System.Object {
    constructor();
    static buildNumber: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class N3DS extends System.Object {
    constructor();
    static applicationId: string;
    static compressStaticMem: boolean;
    static disableDepthAndStencilBuffers: boolean;
    static disableStereoscopicView: boolean;
    static enableSharedListOpt: boolean;
    static enableVSync: boolean;
    static extSaveDataNumber: string;
    static logoStyle: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static mediaSize: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static productCode: string;
    static region: UnityEditor.PlayerSettings.N3DS.Region;
    static stackSize: number;
    static targetPlatform: UnityEditor.PlayerSettings.N3DS.TargetPlatform;
    static title: string;
    static useExtSaveData: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class TargetPlatform extends System.Enum {
    protected constructor();
    static NewNintendo3DS: UnityEditor.PlayerSettings.N3DS.TargetPlatform;
    static Nintendo3DS: UnityEditor.PlayerSettings.N3DS.TargetPlatform;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class Region extends System.Enum {
    protected constructor();
    static All: UnityEditor.PlayerSettings.N3DS.Region;
    static America: UnityEditor.PlayerSettings.N3DS.Region;
    static China: UnityEditor.PlayerSettings.N3DS.Region;
    static Europe: UnityEditor.PlayerSettings.N3DS.Region;
    static Japan: UnityEditor.PlayerSettings.N3DS.Region;
    static Korea: UnityEditor.PlayerSettings.N3DS.Region;
    static Taiwan: UnityEditor.PlayerSettings.N3DS.Region;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class MediaSize extends System.Enum {
    protected constructor();
    static _128MB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _1GB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _256MB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _2GB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _512MB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class LogoStyle extends System.Enum {
    protected constructor();
    static Distributed: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static iQue: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static Licensed: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static Nintendo: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class PS4 extends System.Object {
    constructor();
    static applicationParameter1: number;
    static applicationParameter2: number;
    static applicationParameter3: number;
    static applicationParameter4: number;
    static appType: number;
    static appVersion: string;
    static attrib3DSupport: boolean;
    static attribCpuUsage: number;
    static attribExclusiveVR: boolean;
    static attribEyeToEyeDistanceSettingVR: UnityEditor.PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings;
    static attribMoveSupport: boolean;
    static attribShareSupport: boolean;
    static attribUserManagement: boolean;
    static audio3dVirtualSpeakerCount: number;
    static BackgroundImagePath: string;
    static BGMPath: string;
    static category: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
    static contentID: string;
    static contentSearchFeaturesUsed: boolean;
    static disableAutoHideSplash: boolean;
    static downloadDataSize: number;
    static enterButtonAssignment: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
    static garlicHeapSize: number;
    static includedModules: string[];
    static masterVersion: string;
    static monoEnv: string;
    static npAgeRating: number;
    static NPtitleDatPath: string;
    static npTitleSecret: string;
    static npTrophyPackPath: string;
    static paramSfxPath: string;
    static parentalLevel: number;
    static passcode: string;
    static PatchChangeinfoPath: string;
    static patchDayOne: boolean;
    static PatchLatestPkgPath: string;
    static PatchPkgPath: string;
    static playerPrefsSupport: boolean;
    static playTogetherPlayerCount: number;
    static pnFriends: boolean;
    static pnGameCustomData: boolean;
    static pnPresence: boolean;
    static pnSessions: boolean;
    static PrivacyGuardImagePath: string;
    static proGarlicHeapSize: number;
    static PronunciationSIGPath: string;
    static PronunciationXMLPath: string;
    static remotePlayKeyAssignment: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static remotePlayKeyMappingDir: string;
    static reprojectionSupport: boolean;
    static restrictedAudioUsageRights: boolean;
    static SaveDataImagePath: string;
    static scriptOptimizationLevel: number;
    static SdkOverride: string;
    static ShareFilePath: string;
    static ShareOverlayImagePath: string;
    static socialScreenEnabled: number;
    static StartupImagePath: string;
    static useAudio3dBackend: boolean;
    static useResolutionFallback: boolean;
    static videoOutBaseModeInitialWidth: number;
    static videoOutInitialWidth: number;
    static videoOutPixelFormat: number;
    static videoOutReprojectionRate: number;
    static videoOutResolution: number;
    static videoRecordingFeaturesUsed: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PS4AppCategory extends System.Enum {
    protected constructor();
    static Application: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
    static Patch: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
    static Remaster: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PS4RemotePlayKeyAssignment extends System.Enum {
    protected constructor();
    static None: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternA: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternB: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternC: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternD: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternE: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternF: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternG: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternH: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PS4EnterButtonAssignment extends System.Enum {
    protected constructor();
    static CircleButton: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
    static CrossButton: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PlayStationVREyeToEyeDistanceSettings extends System.Enum {
    protected constructor();
    static DynamicModeAtRuntime: UnityEditor.PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings;
    static ForceDefault: UnityEditor.PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings;
    static PerUser: UnityEditor.PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class PSVita extends System.Object {
    constructor();
    static acquireBGM: boolean;
    static AllowTwitterDialog: boolean;
    static appVersion: string;
    static category: UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory;
    static contentID: string;
    static drmType: UnityEditor.PlayerSettings.PSVita.PSVitaDRMType;
    static enterButtonAssignment: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    static healthWarning: boolean;
    static infoBarColor: boolean;
    static infoBarOnStartup: boolean;
    static keystoneFile: string;
    static liveAreaBackroundPath: string;
    static liveAreaGatePath: string;
    static liveAreaPath: string;
    static liveAreaTrialPath: string;
    static manualPath: string;
    static masterVersion: string;
    static mediaCapacity: number;
    static memoryExpansionMode: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static npAgeRating: number;
    static npCommsPassphrase: string;
    static npCommsSig: string;
    static npCommunicationsID: string;
    static npSupportGBMorGJP: boolean;
    static npTitleDatPath: string;
    static npTrophyPackPath: string;
    static packagePassword: string;
    static paramSfxPath: string;
    static parentalLevel: number;
    static patchChangeInfoPath: string;
    static patchOriginalPackage: string;
    static powerMode: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    static saveDataQuota: number;
    static scriptOptimizationLevel: number;
    static shortTitle: string;
    static storageType: number;
    static tvBootMode: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    static tvDisableEmu: boolean;
    static upgradable: boolean;
    static useLibLocation: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaPowerMode extends System.Enum {
    protected constructor();
    static ModeA: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    static ModeB: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    static ModeC: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaTvBootMode extends System.Enum {
    protected constructor();
    static Default: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    static PSVitaBootablePSVitaTvBootable: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    static PSVitaBootablePSVitaTvNotBootable: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaEnterButtonAssignment extends System.Enum {
    protected constructor();
    static CircleButton: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    static CrossButton: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    static Default: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaAppCategory extends System.Enum {
    protected constructor();
    static Application: UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory;
    static ApplicationPatch: UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaMemoryExpansionMode extends System.Enum {
    protected constructor();
    static ExpandBy109MB: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static ExpandBy29MB: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static ExpandBy77MB: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static None: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaDRMType extends System.Enum {
    protected constructor();
    static Free: UnityEditor.PlayerSettings.PSVita.PSVitaDRMType;
    static PaidFor: UnityEditor.PlayerSettings.PSVita.PSVitaDRMType;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class SamsungTV extends System.Object {
    constructor();
    static deviceAddress: string;
    static productAuthor: string;
    static productAuthorEmail: string;
    static productCategory: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static productDescription: string;
    static productLink: string;
  }
}
declare namespace UnityEditor.PlayerSettings.SamsungTV {
  class SamsungTVProductCategories extends System.Enum {
    protected constructor();
    static Education: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Games: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Information: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Kids: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Lifestyle: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Sports: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    value__: number;
    static Videos: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class SplashScreenLogo extends System.ValueType {
    protected constructor();
    static Create(): UnityEditor.PlayerSettings.SplashScreenLogo;
    static Create(duration: number): UnityEditor.PlayerSettings.SplashScreenLogo;
    static Create(duration: number, logo: any): UnityEditor.PlayerSettings.SplashScreenLogo;
    static CreateWithUnityLogo(): UnityEditor.PlayerSettings.SplashScreenLogo;
    static CreateWithUnityLogo(duration: number): UnityEditor.PlayerSettings.SplashScreenLogo;
    duration: number;
    logo: any;
    static readonly unityLogo: any;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class SplashScreen extends System.Object {
    constructor();
    static animationBackgroundZoom: number;
    static animationLogoZoom: number;
    static animationMode: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    static background: any;
    static backgroundColor: any;
    static backgroundPortrait: any;
    static drawMode: UnityEditor.PlayerSettings.SplashScreen.DrawMode;
    static logos: UnityEditor.PlayerSettings.SplashScreenLogo[];
    static overlayOpacity: number;
    static show: boolean;
    static showUnityLogo: boolean;
    static unityLogoStyle: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
  }
}
declare namespace UnityEditor.PlayerSettings.SplashScreen {
  class AnimationMode extends System.Enum {
    protected constructor();
    static Custom: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    static Dolly: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    static Static: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.SplashScreen {
  class DrawMode extends System.Enum {
    protected constructor();
    static AllSequential: UnityEditor.PlayerSettings.SplashScreen.DrawMode;
    static UnityLogoBelow: UnityEditor.PlayerSettings.SplashScreen.DrawMode;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.SplashScreen {
  class UnityLogoStyle extends System.Enum {
    protected constructor();
    static DarkOnLight: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
    static LightOnDark: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class TizenCapability extends System.Enum {
    protected constructor();
    static AccountRead: UnityEditor.PlayerSettings.TizenCapability;
    static AccountWrite: UnityEditor.PlayerSettings.TizenCapability;
    static AlarmGet: UnityEditor.PlayerSettings.TizenCapability;
    static AlarmSet: UnityEditor.PlayerSettings.TizenCapability;
    static AppManagerLaunch: UnityEditor.PlayerSettings.TizenCapability;
    static Bluetooth: UnityEditor.PlayerSettings.TizenCapability;
    static CalendarRead: UnityEditor.PlayerSettings.TizenCapability;
    static CalendarWrite: UnityEditor.PlayerSettings.TizenCapability;
    static Call: UnityEditor.PlayerSettings.TizenCapability;
    static CallHistoryRead: UnityEditor.PlayerSettings.TizenCapability;
    static CallHistoryWrite: UnityEditor.PlayerSettings.TizenCapability;
    static Camera: UnityEditor.PlayerSettings.TizenCapability;
    static ContactRead: UnityEditor.PlayerSettings.TizenCapability;
    static ContactWrite: UnityEditor.PlayerSettings.TizenCapability;
    static ContentWrite: UnityEditor.PlayerSettings.TizenCapability;
    static DataSharing: UnityEditor.PlayerSettings.TizenCapability;
    static Display: UnityEditor.PlayerSettings.TizenCapability;
    static Download: UnityEditor.PlayerSettings.TizenCapability;
    static Email: UnityEditor.PlayerSettings.TizenCapability;
    static ExternalStorage: UnityEditor.PlayerSettings.TizenCapability;
    static ExternalStorageAppData: UnityEditor.PlayerSettings.TizenCapability;
    static Haptic: UnityEditor.PlayerSettings.TizenCapability;
    static Internet: UnityEditor.PlayerSettings.TizenCapability;
    static KeyManager: UnityEditor.PlayerSettings.TizenCapability;
    static LED: UnityEditor.PlayerSettings.TizenCapability;
    static Location: UnityEditor.PlayerSettings.TizenCapability;
    static MediaStorage: UnityEditor.PlayerSettings.TizenCapability;
    static MessageRead: UnityEditor.PlayerSettings.TizenCapability;
    static MessageWrite: UnityEditor.PlayerSettings.TizenCapability;
    static NetworkGet: UnityEditor.PlayerSettings.TizenCapability;
    static NetworkProfile: UnityEditor.PlayerSettings.TizenCapability;
    static NetworkSet: UnityEditor.PlayerSettings.TizenCapability;
    static NFC: UnityEditor.PlayerSettings.TizenCapability;
    static NFCCardEmulation: UnityEditor.PlayerSettings.TizenCapability;
    static Notification: UnityEditor.PlayerSettings.TizenCapability;
    static PackageManagerInfo: UnityEditor.PlayerSettings.TizenCapability;
    static Power: UnityEditor.PlayerSettings.TizenCapability;
    static Push: UnityEditor.PlayerSettings.TizenCapability;
    static Recorder: UnityEditor.PlayerSettings.TizenCapability;
    static Shortcut: UnityEditor.PlayerSettings.TizenCapability;
    static SystemSettings: UnityEditor.PlayerSettings.TizenCapability;
    static Telephony: UnityEditor.PlayerSettings.TizenCapability;
    value__: number;
    static VolumeSet: UnityEditor.PlayerSettings.TizenCapability;
    static WifiDirect: UnityEditor.PlayerSettings.TizenCapability;
    static WindowPrioritySet: UnityEditor.PlayerSettings.TizenCapability;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class Tizen extends System.Object {
    constructor();
    static GetCapability(capability: UnityEditor.PlayerSettings.TizenCapability): boolean;
    static SetCapability(capability: UnityEditor.PlayerSettings.TizenCapability, value: boolean): void;
    static deploymentTarget: string;
    static deploymentTargetType: number;
    static minOSVersion: UnityEditor.TizenOSVersion;
    static productDescription: string;
    static productURL: string;
    static showActivityIndicatorOnLoading: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static signingProfileName: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class tvOS extends System.Object {
    constructor();
    static buildNumber: string;
    static requireExtendedGameController: boolean;
    static sdkVersion: UnityEditor.tvOSSdkVersion;
    static targetOSVersion: UnityEditor.tvOSTargetOSVersion;
    static targetOSVersionString: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WebGL extends System.Object {
    constructor();
    static analyzeBuildSize: boolean;
    static compressionFormat: UnityEditor.WebGLCompressionFormat;
    static dataCaching: boolean;
    static debugSymbols: boolean;
    static emscriptenArgs: string;
    static exceptionSupport: UnityEditor.WebGLExceptionSupport;
    static memorySize: number;
    static modulesDirectory: string;
    static nameFilesAsHashes: boolean;
    static template: string;
    static useEmbeddedResources: boolean;
    static useWasm: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WiiU extends System.Object {
    constructor();
    static accountBossSize: number;
    static accountSaveSize: number;
    static addOnUniqueIDs: string[];
    static allowScreenCapture: boolean;
    static commonBossSize: number;
    static commonSaveSize: number;
    static controllerCount: number;
    static drcBufferDisabled: boolean;
    static gamePadMSAA: number;
    static readonly gamePadStartupScreen: any;
    static groupID: string;
    static joinGameId: string;
    static joinGameModeMask: string;
    static loaderThreadStackSize: number;
    static mainThreadStackSize: number;
    static olvAccessKey: string;
    static profilerLibraryPath: string;
    static supportsBalanceBoard: boolean;
    static supportsClassicController: boolean;
    static supportsMotionPlus: boolean;
    static supportsNunchuk: boolean;
    static supportsProController: boolean;
    static systemHeapSize: number;
    static tinCode: string;
    static titleID: string;
    static tvResolution: UnityEditor.WiiUTVResolution;
    static readonly tvStartupScreen: any;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class Switch extends System.Object {
    constructor();
    static GetRatingAge(category: UnityEditor.PlayerSettings.Switch.RatingCategories): number;
    static accessibleURLPath: string;
    static applicationAttribute: UnityEditor.PlayerSettings.Switch.ApplicationAttribute;
    static applicationErrorCodeCategory: string;
    static applicationID: string;
    static cardSpecClock: number;
    static cardSpecSize: number;
    static displayVersion: string;
    static icons: any[];
    static isAllowsScreenshot: boolean;
    static isDataLossConfirmation: boolean;
    static readonly isUnderParentalControl: boolean;
    static legalInformationPath: string;
    static localCommunicationIds: string[];
    static logoHandling: UnityEditor.PlayerSettings.Switch.LogoHandling;
    static logoType: UnityEditor.PlayerSettings.Switch.LogoType;
    static mainThreadStackSize: number;
    static manualHTMLPath: string;
    static networkInterfaceManagerInitializeEnabled: boolean;
    static nsoDependencies: string;
    static playerConnectionEnabled: boolean;
    static presenceGroupId: string;
    static publisherNames: string[];
    static readonly ratingsMask: number;
    static releaseVersion: string;
    static screenResolutionBehavior: UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior;
    static smallIcons: any[];
    static socketAllocatorPoolSize: number;
    static socketBufferEfficiency: number;
    static socketConcurrencyLimit: number;
    static socketConfigEnabled: boolean;
    static socketInitializeEnabled: boolean;
    static socketMemoryPoolSize: number;
    static startupUserAccount: UnityEditor.PlayerSettings.Switch.StartupUserAccount;
    static supportedLanguages: number;
    static supportedNpadStyles: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
    static tcpAutoReceiveBufferSizeMax: number;
    static tcpAutoSendBufferSizeMax: number;
    static tcpInitialReceiveBufferSize: number;
    static tcpInitialSendBufferSize: number;
    static titleNames: string[];
    static touchScreenUsage: UnityEditor.PlayerSettings.Switch.TouchScreenUsage;
    static udpReceiveBufferSize: number;
    static udpSendBufferSize: number;
    static userAccountSaveDataJournalSize: number;
    static userAccountSaveDataSize: number;
    static useSwitchCPUProfiler: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class ScreenResolutionBehavior extends System.Enum {
    protected constructor();
    static Both: UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior;
    static Manual: UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior;
    static OperationMode: UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior;
    static PerformanceMode: UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class Languages extends System.Enum {
    protected constructor();
    static AmericanEnglish: UnityEditor.PlayerSettings.Switch.Languages;
    static BritishEnglish: UnityEditor.PlayerSettings.Switch.Languages;
    static CanadianFrench: UnityEditor.PlayerSettings.Switch.Languages;
    static Dutch: UnityEditor.PlayerSettings.Switch.Languages;
    static French: UnityEditor.PlayerSettings.Switch.Languages;
    static German: UnityEditor.PlayerSettings.Switch.Languages;
    static Italian: UnityEditor.PlayerSettings.Switch.Languages;
    static Japanese: UnityEditor.PlayerSettings.Switch.Languages;
    static LatinAmericanSpanish: UnityEditor.PlayerSettings.Switch.Languages;
    static Portuguese: UnityEditor.PlayerSettings.Switch.Languages;
    static Russian: UnityEditor.PlayerSettings.Switch.Languages;
    static Spanish: UnityEditor.PlayerSettings.Switch.Languages;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class StartupUserAccount extends System.Enum {
    protected constructor();
    static None: UnityEditor.PlayerSettings.Switch.StartupUserAccount;
    static Required: UnityEditor.PlayerSettings.Switch.StartupUserAccount;
    static RequiredWithNetworkServiceAccountAvailable: UnityEditor.PlayerSettings.Switch.StartupUserAccount;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class TouchScreenUsage extends System.Enum {
    protected constructor();
    static None: UnityEditor.PlayerSettings.Switch.TouchScreenUsage;
    static Required: UnityEditor.PlayerSettings.Switch.TouchScreenUsage;
    static Supported: UnityEditor.PlayerSettings.Switch.TouchScreenUsage;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class LogoHandling extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.PlayerSettings.Switch.LogoHandling;
    static Manual: UnityEditor.PlayerSettings.Switch.LogoHandling;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class LogoType extends System.Enum {
    protected constructor();
    static DistributedByNintendo: UnityEditor.PlayerSettings.Switch.LogoType;
    static LicensedByNintendo: UnityEditor.PlayerSettings.Switch.LogoType;
    static Nintendo: UnityEditor.PlayerSettings.Switch.LogoType;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class ApplicationAttribute extends System.Enum {
    protected constructor();
    static Demo: UnityEditor.PlayerSettings.Switch.ApplicationAttribute;
    static None: UnityEditor.PlayerSettings.Switch.ApplicationAttribute;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class RatingCategories extends System.Enum {
    protected constructor();
    static ACB: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static CERO: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static ClassInd: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static ESRB: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static GRACGCRB: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static GSRMR: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static OFLC: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static PEGI: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static PEGIBBFC: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static PEGIPortugal: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static Russian: UnityEditor.PlayerSettings.Switch.RatingCategories;
    static USK: UnityEditor.PlayerSettings.Switch.RatingCategories;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class SupportedNpadStyleBits extends System.Enum {
    protected constructor();
    static FullKey: UnityEditor.PlayerSettings.Switch.SupportedNpadStyleBits;
    static Handheld: UnityEditor.PlayerSettings.Switch.SupportedNpadStyleBits;
    static JoyDual: UnityEditor.PlayerSettings.Switch.SupportedNpadStyleBits;
    static JoyLeft: UnityEditor.PlayerSettings.Switch.SupportedNpadStyleBits;
    static JoyRight: UnityEditor.PlayerSettings.Switch.SupportedNpadStyleBits;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings.Switch {
  class SupportedNpadStyle extends System.Enum {
    protected constructor();
    static FullKey: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
    static Handheld: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
    static JoyDual: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
    static JoyLeft: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
    static JoyRight: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAApplicationShowName extends System.Enum {
    protected constructor();
    static AllLogos: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static NoLogos: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static NotSet: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static StandardLogoOnly: UnityEditor.PlayerSettings.WSAApplicationShowName;
    value__: number;
    static WideLogoOnly: UnityEditor.PlayerSettings.WSAApplicationShowName;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSADefaultTileSize extends System.Enum {
    protected constructor();
    static Medium: UnityEditor.PlayerSettings.WSADefaultTileSize;
    static NotSet: UnityEditor.PlayerSettings.WSADefaultTileSize;
    value__: number;
    static Wide: UnityEditor.PlayerSettings.WSADefaultTileSize;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAApplicationForegroundText extends System.Enum {
    protected constructor();
    static Dark: UnityEditor.PlayerSettings.WSAApplicationForegroundText;
    static Light: UnityEditor.PlayerSettings.WSAApplicationForegroundText;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSACompilationOverrides extends System.Enum {
    protected constructor();
    static None: UnityEditor.PlayerSettings.WSACompilationOverrides;
    static UseNetCore: UnityEditor.PlayerSettings.WSACompilationOverrides;
    static UseNetCorePartially: UnityEditor.PlayerSettings.WSACompilationOverrides;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSACapability extends System.Enum {
    protected constructor();
    static AllJoyn: UnityEditor.PlayerSettings.WSACapability;
    static BlockedChatMessages: UnityEditor.PlayerSettings.WSACapability;
    static Bluetooth: UnityEditor.PlayerSettings.WSACapability;
    static Chat: UnityEditor.PlayerSettings.WSACapability;
    static CodeGeneration: UnityEditor.PlayerSettings.WSACapability;
    static EnterpriseAuthentication: UnityEditor.PlayerSettings.WSACapability;
    static HumanInterfaceDevice: UnityEditor.PlayerSettings.WSACapability;
    static InputInjectionBrokered: UnityEditor.PlayerSettings.WSACapability;
    static InternetClient: UnityEditor.PlayerSettings.WSACapability;
    static InternetClientServer: UnityEditor.PlayerSettings.WSACapability;
    static Location: UnityEditor.PlayerSettings.WSACapability;
    static Microphone: UnityEditor.PlayerSettings.WSACapability;
    static MusicLibrary: UnityEditor.PlayerSettings.WSACapability;
    static Objects3D: UnityEditor.PlayerSettings.WSACapability;
    static PhoneCall: UnityEditor.PlayerSettings.WSACapability;
    static PicturesLibrary: UnityEditor.PlayerSettings.WSACapability;
    static PrivateNetworkClientServer: UnityEditor.PlayerSettings.WSACapability;
    static Proximity: UnityEditor.PlayerSettings.WSACapability;
    static RemovableStorage: UnityEditor.PlayerSettings.WSACapability;
    static SharedUserCertificates: UnityEditor.PlayerSettings.WSACapability;
    static SpatialPerception: UnityEditor.PlayerSettings.WSACapability;
    static UserAccountInformation: UnityEditor.PlayerSettings.WSACapability;
    value__: number;
    static VideosLibrary: UnityEditor.PlayerSettings.WSACapability;
    static VoipCall: UnityEditor.PlayerSettings.WSACapability;
    static WebCam: UnityEditor.PlayerSettings.WSACapability;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAImageScale extends System.Enum {
    protected constructor();
    static _100: UnityEditor.PlayerSettings.WSAImageScale;
    static _125: UnityEditor.PlayerSettings.WSAImageScale;
    static _140: UnityEditor.PlayerSettings.WSAImageScale;
    static _150: UnityEditor.PlayerSettings.WSAImageScale;
    static _180: UnityEditor.PlayerSettings.WSAImageScale;
    static _200: UnityEditor.PlayerSettings.WSAImageScale;
    static _240: UnityEditor.PlayerSettings.WSAImageScale;
    static _400: UnityEditor.PlayerSettings.WSAImageScale;
    static _80: UnityEditor.PlayerSettings.WSAImageScale;
    static Target16: UnityEditor.PlayerSettings.WSAImageScale;
    static Target24: UnityEditor.PlayerSettings.WSAImageScale;
    static Target256: UnityEditor.PlayerSettings.WSAImageScale;
    static Target32: UnityEditor.PlayerSettings.WSAImageScale;
    static Target48: UnityEditor.PlayerSettings.WSAImageScale;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAImageType extends System.Enum {
    protected constructor();
    static PackageLogo: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneAppIcon: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneMediumTile: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneSmallTile: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneSplashScreen: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneWideTile: UnityEditor.PlayerSettings.WSAImageType;
    static SplashScreenImage: UnityEditor.PlayerSettings.WSAImageType;
    static StoreLargeTile: UnityEditor.PlayerSettings.WSAImageType;
    static StoreSmallTile: UnityEditor.PlayerSettings.WSAImageType;
    static StoreTileLogo: UnityEditor.PlayerSettings.WSAImageType;
    static StoreTileSmallLogo: UnityEditor.PlayerSettings.WSAImageType;
    static StoreTileWideLogo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare150x150Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare310x310Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare44x44Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare71x71Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPWide310x150Logo: UnityEditor.PlayerSettings.WSAImageType;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAInputSource extends System.Enum {
    protected constructor();
    static CoreWindow: UnityEditor.PlayerSettings.WSAInputSource;
    static IndependentInputSource: UnityEditor.PlayerSettings.WSAInputSource;
    static SwapChainPanel: UnityEditor.PlayerSettings.WSAInputSource;
    value__: number;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSASupportedFileType extends System.ValueType {
    protected constructor();
    contentType: string;
    fileType: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAFileTypeAssociations extends System.ValueType {
    protected constructor();
    name: string;
    supportedFileTypes: UnityEditor.PlayerSettings.WSASupportedFileType[];
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSA extends System.Object {
    constructor();
    static GetCapability(capability: UnityEditor.PlayerSettings.WSACapability): boolean;
    static GetVisualAssetsImage(type: UnityEditor.PlayerSettings.WSAImageType, scale: UnityEditor.PlayerSettings.WSAImageScale): string;
    static SetCapability(capability: UnityEditor.PlayerSettings.WSACapability, value: boolean): void;
    static SetCertificate(path: string, password: string): boolean;
    static SetVisualAssetsImage(image: string, type: UnityEditor.PlayerSettings.WSAImageType, scale: UnityEditor.PlayerSettings.WSAImageScale): void;
    static applicationDescription: string;
    static readonly certificateIssuer: string;
    static readonly certificateNotAfter: any;
    static readonly certificatePath: string;
    static readonly certificateSubject: string;
    static commandLineArgsFile: string;
    static compilationOverrides: UnityEditor.PlayerSettings.WSACompilationOverrides;
    static defaultTileSize: UnityEditor.PlayerSettings.WSADefaultTileSize;
    static enableIndependentInputSource: boolean;
    static enableLowLatencyPresentationAPI: boolean;
    static inputSource: UnityEditor.PlayerSettings.WSAInputSource;
    static largeTileShowName: boolean;
    static mediumTileShowName: boolean;
    static packageLogo: string;
    static packageLogo140: string;
    static packageLogo180: string;
    static packageLogo240: string;
    static packageName: string;
    static packageVersion: any;
    static phoneAppIcon: string;
    static phoneAppIcon140: string;
    static phoneAppIcon240: string;
    static phoneMediumTile: string;
    static phoneMediumTile140: string;
    static phoneMediumTile240: string;
    static phoneSmallTile: string;
    static phoneSmallTile140: string;
    static phoneSmallTile240: string;
    static phoneSplashScreenImage: string;
    static phoneSplashScreenImageScale140: string;
    static phoneSplashScreenImageScale240: string;
    static phoneWideTile: string;
    static phoneWideTile140: string;
    static phoneWideTile240: string;
    static splashScreenBackgroundColor: any;
    static storeLargeTile: string;
    static storeLargeTile140: string;
    static storeLargeTile180: string;
    static storeLargeTile80: string;
    static storeSmallTile: string;
    static storeSmallTile140: string;
    static storeSmallTile180: string;
    static storeSmallTile80: string;
    static storeSplashScreenImage: string;
    static storeSplashScreenImageScale140: string;
    static storeSplashScreenImageScale180: string;
    static storeTileLogo: string;
    static storeTileLogo140: string;
    static storeTileLogo180: string;
    static storeTileLogo80: string;
    static storeTileSmallLogo: string;
    static storeTileSmallLogo140: string;
    static storeTileSmallLogo180: string;
    static storeTileSmallLogo80: string;
    static storeTileWideLogo: string;
    static storeTileWideLogo140: string;
    static storeTileWideLogo180: string;
    static storeTileWideLogo80: string;
    static tileBackgroundColor: any;
    static tileForegroundText: UnityEditor.PlayerSettings.WSAApplicationForegroundText;
    static tileShortName: string;
    static tileShowName: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static wideTileShowName: boolean;
  }
}
declare namespace UnityEditor.PlayerSettings.WSA {
  class Declarations extends System.Object {
    protected constructor();
    static fileTypeAssociations: UnityEditor.PlayerSettings.WSAFileTypeAssociations;
    static protocolName: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class XboxOne extends System.Object {
    constructor();
    static AddAllowedProductId(id: string): boolean;
    static GetCapability(capability: string): boolean;
    static GetGameRating(name: string): number;
    static GetSocketDefinition(name: string, port: any, protocol: any, usages: any, templateName: any, sessionRequirment: any, deviceUsages: any): void;
    static GetSupportedLanguage(language: string): boolean;
    static RemoveAllowedProductId(id: string): void;
    static RemoveSocketDefinition(name: string): void;
    static SetCapability(capability: string, value: boolean): void;
    static SetGameRating(name: string, value: number): void;
    static SetSocketDefinition(name: string, port: string, protocol: number, usages: number[], templateName: string, sessionRequirment: number, deviceUsages: number[]): void;
    static SetSupportedLanguage(language: string, enabled: boolean): void;
    static UpdateAllowedProductId(idx: number, id: string): void;
    static readonly AllowedProductIds: string[];
    static AppManifestOverridePath: string;
    static ContentId: string;
    static defaultLoggingLevel: UnityEditor.XboxOneLoggingLevel;
    static Description: string;
    static DisableKinectGpuReservation: boolean;
    static Enable7thCore: boolean;
    static EnablePIXSampling: boolean;
    static EnableVariableGPU: boolean;
    static GameOsOverridePath: string;
    static IsContentPackage: boolean;
    static monoLoggingLevel: number;
    static PackageUpdateGranularity: UnityEditor.XboxOnePackageUpdateGranularity;
    static PackagingEncryption: UnityEditor.XboxOneEncryptionLevel;
    static PackagingOverridePath: string;
    static PersistentLocalStorageSize: number;
    static PresentImmediateThreshold: number;
    static ProductId: string;
    static SandboxId: string;
    static SCID: string;
    static scriptCompiler: UnityEditor.ScriptCompiler;
    static readonly SocketNames: string[];
    static TitleId: string;
    static UpdateKey: string;
    static Version: string;
  }
}
declare namespace UnityEditor {
  class AndroidTargetDevice extends System.Enum {
    protected constructor();
    static ARMv7: UnityEditor.AndroidTargetDevice;
    static FAT: UnityEditor.AndroidTargetDevice;
    value__: number;
    static x86: UnityEditor.AndroidTargetDevice;
  }
}
declare namespace UnityEditor {
  class AndroidSdkVersions extends System.Enum {
    protected constructor();
    static AndroidApiLevel16: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel17: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel18: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel19: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel21: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel22: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel23: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel24: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel25: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevelAuto: UnityEditor.AndroidSdkVersions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidPreferredInstallLocation extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.AndroidPreferredInstallLocation;
    static ForceInternal: UnityEditor.AndroidPreferredInstallLocation;
    static PreferExternal: UnityEditor.AndroidPreferredInstallLocation;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidShowActivityIndicatorOnLoading extends System.Enum {
    protected constructor();
    static DontShow: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static InversedLarge: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static InversedSmall: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static Large: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static Small: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidGamepadSupportLevel extends System.Enum {
    protected constructor();
    static RequiresGamepad: UnityEditor.AndroidGamepadSupportLevel;
    static SupportsDPad: UnityEditor.AndroidGamepadSupportLevel;
    static SupportsGamepad: UnityEditor.AndroidGamepadSupportLevel;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidSplashScreenScale extends System.Enum {
    protected constructor();
    static Center: UnityEditor.AndroidSplashScreenScale;
    static ScaleToFill: UnityEditor.AndroidSplashScreenScale;
    static ScaleToFit: UnityEditor.AndroidSplashScreenScale;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidBlitType extends System.Enum {
    protected constructor();
    static Always: UnityEditor.AndroidBlitType;
    static Auto: UnityEditor.AndroidBlitType;
    static Never: UnityEditor.AndroidBlitType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AndroidBanner extends System.ValueType {
    protected constructor();
    banner: any;
    height: number;
    width: number;
  }
}
declare namespace UnityEditor {
  class iOSSdkVersion extends System.Enum {
    protected constructor();
    static DeviceSDK: UnityEditor.iOSSdkVersion;
    static SimulatorSDK: UnityEditor.iOSSdkVersion;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSTargetDevice extends System.Enum {
    protected constructor();
    static iPadOnly: UnityEditor.iOSTargetDevice;
    static iPhoneAndiPad: UnityEditor.iOSTargetDevice;
    static iPhoneOnly: UnityEditor.iOSTargetDevice;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSShowActivityIndicatorOnLoading extends System.Enum {
    protected constructor();
    static DontShow: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static Gray: UnityEditor.iOSShowActivityIndicatorOnLoading;
    value__: number;
    static White: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static WhiteLarge: UnityEditor.iOSShowActivityIndicatorOnLoading;
  }
}
declare namespace UnityEditor {
  class iOSStatusBarStyle extends System.Enum {
    protected constructor();
    static BlackOpaque: UnityEditor.iOSStatusBarStyle;
    static BlackTranslucent: UnityEditor.iOSStatusBarStyle;
    static Default: UnityEditor.iOSStatusBarStyle;
    static LightContent: UnityEditor.iOSStatusBarStyle;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSAppInBackgroundBehavior extends System.Enum {
    protected constructor();
    static Custom: UnityEditor.iOSAppInBackgroundBehavior;
    static Exit: UnityEditor.iOSAppInBackgroundBehavior;
    static Suspend: UnityEditor.iOSAppInBackgroundBehavior;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSBackgroundMode extends System.Enum {
    protected constructor();
    static Audio: UnityEditor.iOSBackgroundMode;
    static BluetoothCentral: UnityEditor.iOSBackgroundMode;
    static BluetoothPeripheral: UnityEditor.iOSBackgroundMode;
    static ExternalAccessory: UnityEditor.iOSBackgroundMode;
    static Fetch: UnityEditor.iOSBackgroundMode;
    static Location: UnityEditor.iOSBackgroundMode;
    static NewsstandContent: UnityEditor.iOSBackgroundMode;
    static None: UnityEditor.iOSBackgroundMode;
    static RemoteNotification: UnityEditor.iOSBackgroundMode;
    value__: number;
    static VOIP: UnityEditor.iOSBackgroundMode;
  }
}
declare namespace UnityEditor {
  class iOSLaunchScreenImageType extends System.Enum {
    protected constructor();
    static iPadImage: UnityEditor.iOSLaunchScreenImageType;
    static iPhoneLandscapeImage: UnityEditor.iOSLaunchScreenImageType;
    static iPhonePortraitImage: UnityEditor.iOSLaunchScreenImageType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSLaunchScreenType extends System.Enum {
    protected constructor();
    static CustomXib: UnityEditor.iOSLaunchScreenType;
    static Default: UnityEditor.iOSLaunchScreenType;
    static ImageAndBackgroundConstant: UnityEditor.iOSLaunchScreenType;
    static ImageAndBackgroundRelative: UnityEditor.iOSLaunchScreenType;
    static None: UnityEditor.iOSLaunchScreenType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSAutomaticallySignValue extends System.Enum {
    protected constructor();
    static AutomaticallySignValueFalse: UnityEditor.iOSAutomaticallySignValue;
    static AutomaticallySignValueNotSet: UnityEditor.iOSAutomaticallySignValue;
    static AutomaticallySignValueTrue: UnityEditor.iOSAutomaticallySignValue;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSDeviceRequirement extends System.Object {
    constructor();
    readonly values: any;
  }
}
declare namespace UnityEditor {
  class iOSDeviceRequirementGroup extends System.Object {
    protected constructor();
    Add(requirement: UnityEditor.iOSDeviceRequirement): void;
    RemoveAt(index: number): void;
    readonly count: number;
    get_Item(index: number): UnityEditor.iOSDeviceRequirement;
    set_Item(index: number, value: UnityEditor.iOSDeviceRequirement): void;
  }
}
declare namespace UnityEditor {
  class TizenOSVersion extends System.Enum {
    protected constructor();
    value__: number;
    static Version24: UnityEditor.TizenOSVersion;
  }
}
declare namespace UnityEditor {
  class TizenShowActivityIndicatorOnLoading extends System.Enum {
    protected constructor();
    static DontShow: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static InversedLarge: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static InversedSmall: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static Large: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static Small: UnityEditor.TizenShowActivityIndicatorOnLoading;
    value__: number;
  }
}
declare namespace UnityEditor {
  class tvOSSdkVersion extends System.Enum {
    protected constructor();
    static Device: UnityEditor.tvOSSdkVersion;
    static Simulator: UnityEditor.tvOSSdkVersion;
    value__: number;
  }
}
declare namespace UnityEditor {
  class tvOSTargetOSVersion extends System.Enum {
    protected constructor();
    static tvOS_9_0: UnityEditor.tvOSTargetOSVersion;
    static tvOS_9_1: UnityEditor.tvOSTargetOSVersion;
    static Unknown: UnityEditor.tvOSTargetOSVersion;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WebGLExceptionSupport extends System.Enum {
    protected constructor();
    static ExplicitlyThrownExceptionsOnly: UnityEditor.WebGLExceptionSupport;
    static Full: UnityEditor.WebGLExceptionSupport;
    static None: UnityEditor.WebGLExceptionSupport;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WebGLCompressionFormat extends System.Enum {
    protected constructor();
    static Brotli: UnityEditor.WebGLCompressionFormat;
    static Disabled: UnityEditor.WebGLCompressionFormat;
    static Gzip: UnityEditor.WebGLCompressionFormat;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WiiUTVResolution extends System.Enum {
    protected constructor();
    static Resolution_1080p: UnityEditor.WiiUTVResolution;
    static Resolution_720p: UnityEditor.WiiUTVResolution;
    value__: number;
  }
}
declare namespace UnityEditor {
  class XboxOneEncryptionLevel extends System.Enum {
    protected constructor();
    static DevkitCompatible: UnityEditor.XboxOneEncryptionLevel;
    static FullEncryption: UnityEditor.XboxOneEncryptionLevel;
    static None: UnityEditor.XboxOneEncryptionLevel;
    value__: number;
  }
}
declare namespace UnityEditor {
  class XboxOnePackageUpdateGranularity extends System.Enum {
    protected constructor();
    static Chunk: UnityEditor.XboxOnePackageUpdateGranularity;
    static File: UnityEditor.XboxOnePackageUpdateGranularity;
    value__: number;
  }
}
declare namespace UnityEditor {
  class XboxOneLoggingLevel extends System.Enum {
    protected constructor();
    static AllLogging: UnityEditor.XboxOneLoggingLevel;
    static ErrorsOnly: UnityEditor.XboxOneLoggingLevel;
    value__: number;
    static WarningsAndErrors: UnityEditor.XboxOneLoggingLevel;
  }
}
declare namespace UnityEditor {
  class ScriptCompiler extends System.Enum {
    protected constructor();
    static Mono: UnityEditor.ScriptCompiler;
    static Roslyn: UnityEditor.ScriptCompiler;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PolygonEditor extends System.Object {
    constructor();
    static ApplyEditing(collider: any): void;
    static GetNearestEdge(point: any, pathIndex: any, pointIndex0: any, pointIndex1: any, distance: any, loop: boolean): boolean;
    static GetNearestPoint(point: any, pathIndex: any, pointIndex: any, distance: any): boolean;
    static GetPathCount(): number;
    static GetPoint(pathIndex: number, pointIndex: number, point: any): boolean;
    static GetPointCount(pathIndex: number): number;
    static InsertPoint(pathIndex: number, pointIndex: number, value: any): void;
    static RemovePoint(pathIndex: number, pointIndex: number): void;
    static SetPoint(pathIndex: number, pointIndex: number, value: any): void;
    static StartEditing(collider: any): void;
    static StopEditing(): void;
    static TestPointMove(pathIndex: number, pointIndex: number, movePosition: any, leftIntersect: any, rightIntersect: any, loop: boolean): void;
  }
}
declare namespace UnityEditor {
  class ReplacePrefabOptions extends System.Enum {
    protected constructor();
    static ConnectToPrefab: UnityEditor.ReplacePrefabOptions;
    static Default: UnityEditor.ReplacePrefabOptions;
    static ReplaceNameBased: UnityEditor.ReplacePrefabOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PrefabType extends System.Enum {
    protected constructor();
    static DisconnectedModelPrefabInstance: UnityEditor.PrefabType;
    static DisconnectedPrefabInstance: UnityEditor.PrefabType;
    static MissingPrefabInstance: UnityEditor.PrefabType;
    static ModelPrefab: UnityEditor.PrefabType;
    static ModelPrefabInstance: UnityEditor.PrefabType;
    static None: UnityEditor.PrefabType;
    static Prefab: UnityEditor.PrefabType;
    static PrefabInstance: UnityEditor.PrefabType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PropertyModification extends System.Object {
    constructor();
    objectReference: UnityEngine.Object;
    propertyPath: string;
    target: UnityEngine.Object;
    value: string;
  }
}
declare namespace UnityEditor {
  class PrefabUtility extends System.Object {
    constructor();
    static ConnectGameObjectToPrefab(go: any, sourcePrefab: any): any;
    static CreateEmptyPrefab(path: string): UnityEngine.Object;
    static CreatePrefab(path: string, go: any): any;
    static CreatePrefab(path: string, go: any, options: UnityEditor.ReplacePrefabOptions): any;
    static DisconnectPrefabInstance(targetObject: UnityEngine.Object): void;
    static FindPrefabRoot(source: any): any;
    static FindRootGameObjectWithSameParentPrefab(target: any): any;
    static FindValidUploadPrefabInstanceRoot(target: any): any;
    static GetPrefabObject(targetObject: UnityEngine.Object): UnityEngine.Object;
    static GetPrefabParent(source: UnityEngine.Object): UnityEngine.Object;
    static GetPrefabType(target: UnityEngine.Object): UnityEditor.PrefabType;
    static GetPropertyModifications(targetPrefab: UnityEngine.Object): UnityEditor.PropertyModification[];
    static InstantiateAttachedAsset(targetObject: UnityEngine.Object): UnityEngine.Object;
    static InstantiatePrefab(target: UnityEngine.Object): UnityEngine.Object;
    static InstantiatePrefab(target: UnityEngine.Object, destinationScene: any): UnityEngine.Object;
    static IsComponentAddedToPrefabInstance(source: UnityEngine.Object): boolean;
    static MergeAllPrefabInstances(targetObject: UnityEngine.Object): void;
    static ReconnectToLastPrefab(go: any): boolean;
    static RecordPrefabInstancePropertyModifications(targetObject: UnityEngine.Object): void;
    static ReplacePrefab(go: any, targetPrefab: UnityEngine.Object): any;
    static ReplacePrefab(go: any, targetPrefab: UnityEngine.Object, options: UnityEditor.ReplacePrefabOptions): any;
    static ResetToPrefabState(obj: UnityEngine.Object): boolean;
    static RevertPrefabInstance(go: any): boolean;
    static SetPropertyModifications(targetPrefab: UnityEngine.Object, modifications: UnityEditor.PropertyModification[]): void;
    static prefabInstanceUpdated: ((instance: any) => void);
  }
}
declare namespace UnityEditor {
  class PreferenceItem extends System.Attribute {
    constructor(name: string);
    name: string;
  }
}
declare namespace UnityEditor {
  class DrivenPropertyManagerInternal extends System.Object {
    constructor();
    static IsDriven(target: UnityEngine.Object, propertyPath: string): boolean;
    static IsDriving(driver: UnityEngine.Object, target: UnityEngine.Object, propertyPath: string): boolean;
  }
}
declare namespace UnityEditorInternal {
  class RegistryView extends System.Enum {
    protected constructor();
    static _32: UnityEditorInternal.RegistryView;
    static _64: UnityEditorInternal.RegistryView;
    static Default: UnityEditorInternal.RegistryView;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class RegistryUtil extends System.Object {
    constructor();
    static GetRegistryStringValue(subKey: string, valueName: string, defaultValue: string, view: UnityEditorInternal.RegistryView): string;
    static GetRegistryUInt32Value(subKey: string, valueName: string, defaultValue: number, view: UnityEditorInternal.RegistryView): number;
  }
}
declare namespace UnityEditor {
  class SavedGUIState extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class ScriptableWizard extends UnityEditor.EditorWindow {
    constructor();
    static DisplayWizard(title: string, klass: any): UnityEditor.ScriptableWizard;
    static DisplayWizard(title: string, klass: any, createButtonName: string): UnityEditor.ScriptableWizard;
    static DisplayWizard(title: string, klass: any, createButtonName: string, otherButtonName: string): UnityEditor.ScriptableWizard;
    createButtonName: string;
    errorString: string;
    helpString: string;
    isValid: boolean;
    otherButtonName: string;
  }
}
declare namespace UnityEditor.ScriptableWizard {
  class Styles extends System.Object {
    constructor();
    static box: string;
    static errorText: string;
  }
}
declare namespace UnityEditorInternal {
  class ScriptUpdatingManager extends System.Object {
    constructor();
    static ReportExpectedUpdateFailure(): void;
    static ReportGroupedAPIUpdaterFailure(msg: string): void;
    static ResetConsentStatus(): void;
    static WaitForVCSServerConnection(reportTimeout: boolean): boolean;
    static readonly numberOfTimesAsked: number;
  }
}
declare namespace UnityEditor {
  class SerializedPropertyType extends System.Enum {
    protected constructor();
    static AnimationCurve: UnityEditor.SerializedPropertyType;
    static ArraySize: UnityEditor.SerializedPropertyType;
    static Boolean: UnityEditor.SerializedPropertyType;
    static Bounds: UnityEditor.SerializedPropertyType;
    static BoundsInt: UnityEditor.SerializedPropertyType;
    static Character: UnityEditor.SerializedPropertyType;
    static Color: UnityEditor.SerializedPropertyType;
    static Enum: UnityEditor.SerializedPropertyType;
    static ExposedReference: UnityEditor.SerializedPropertyType;
    static FixedBufferSize: UnityEditor.SerializedPropertyType;
    static Float: UnityEditor.SerializedPropertyType;
    static Generic: UnityEditor.SerializedPropertyType;
    static Gradient: UnityEditor.SerializedPropertyType;
    static Integer: UnityEditor.SerializedPropertyType;
    static LayerMask: UnityEditor.SerializedPropertyType;
    static ObjectReference: UnityEditor.SerializedPropertyType;
    static Quaternion: UnityEditor.SerializedPropertyType;
    static Rect: UnityEditor.SerializedPropertyType;
    static RectInt: UnityEditor.SerializedPropertyType;
    static String: UnityEditor.SerializedPropertyType;
    value__: number;
    static Vector2: UnityEditor.SerializedPropertyType;
    static Vector2Int: UnityEditor.SerializedPropertyType;
    static Vector3: UnityEditor.SerializedPropertyType;
    static Vector3Int: UnityEditor.SerializedPropertyType;
    static Vector4: UnityEditor.SerializedPropertyType;
  }
}
declare namespace UnityEditor {
  class SerializedObject extends System.Object {
    constructor(obj: UnityEngine.Object);
    constructor(obj: UnityEngine.Object, context: UnityEngine.Object);
    constructor(objs: UnityEngine.Object[]);
    constructor(objs: UnityEngine.Object[], context: UnityEngine.Object);
    ApplyModifiedProperties(): boolean;
    ApplyModifiedPropertiesWithoutUndo(): boolean;
    CopyFromSerializedProperty(prop: UnityEditor.SerializedProperty): void;
    Dispose(): void;
    FindProperty(propertyPath: string): UnityEditor.SerializedProperty;
    GetIterator(): UnityEditor.SerializedProperty;
    SetIsDifferentCacheDirty(): void;
    Update(): void;
    UpdateIfDirtyOrScript(): void;
    UpdateIfRequiredOrScript(): boolean;
    readonly context: UnityEngine.Object;
    readonly isEditingMultipleObjects: boolean;
    maxArraySizeForMultiEditing: number;
    readonly targetObject: UnityEngine.Object;
    readonly targetObjects: UnityEngine.Object[];
  }
}
declare namespace UnityEditor {
  class SerializedProperty extends System.Object {
    protected constructor();
    ClearArray(): void;
    Copy(): UnityEditor.SerializedProperty;
    CountInProperty(): number;
    CountRemaining(): number;
    DeleteArrayElementAtIndex(index: number): void;
    DeleteCommand(): boolean;
    Dispose(): void;
    DuplicateCommand(): boolean;
    static EqualContents(x: UnityEditor.SerializedProperty, y: UnityEditor.SerializedProperty): boolean;
    FindPropertyRelative(relativePropertyPath: string): UnityEditor.SerializedProperty;
    GetArrayElementAtIndex(index: number): UnityEditor.SerializedProperty;
    GetEndProperty(): UnityEditor.SerializedProperty;
    GetEndProperty(includeInvisible: boolean): UnityEditor.SerializedProperty;
    GetEnumerator(): any;
    GetFixedBufferElementAtIndex(index: number): UnityEditor.SerializedProperty;
    InsertArrayElementAtIndex(index: number): void;
    MoveArrayElement(srcIndex: number, dstIndex: number): boolean;
    Next(enterChildren: boolean): boolean;
    NextVisible(enterChildren: boolean): boolean;
    Reset(): void;
    animationCurveValue: any;
    readonly arrayElementType: string;
    arraySize: number;
    boolValue: boolean;
    boundsIntValue: any;
    boundsValue: any;
    colorValue: any;
    readonly depth: number;
    readonly displayName: string;
    doubleValue: number;
    readonly editable: boolean;
    readonly enumDisplayNames: string[];
    readonly enumNames: string[];
    enumValueIndex: number;
    exposedReferenceValue: UnityEngine.Object;
    readonly fixedBufferSize: number;
    floatValue: number;
    readonly hasChildren: boolean;
    readonly hasMultipleDifferentValues: boolean;
    readonly hasVisibleChildren: boolean;
    intValue: number;
    readonly isAnimated: boolean;
    readonly isArray: boolean;
    isExpanded: boolean;
    readonly isFixedBuffer: boolean;
    readonly isInstantiatedPrefab: boolean;
    longValue: number;
    readonly name: string;
    objectReferenceInstanceIDValue: number;
    objectReferenceValue: UnityEngine.Object;
    prefabOverride: boolean;
    readonly propertyPath: string;
    readonly propertyType: UnityEditor.SerializedPropertyType;
    quaternionValue: any;
    rectIntValue: any;
    rectValue: any;
    readonly serializedObject: UnityEditor.SerializedObject;
    stringValue: string;
    readonly tooltip: string;
    readonly type: string;
    vector2IntValue: any;
    vector2Value: any;
    vector3IntValue: any;
    vector3Value: any;
    vector4Value: any;
  }
}
declare namespace UnityEditor {
  class MonoReloadableIntPtr extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class MonoReloadableIntPtrClear extends System.ValueType {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class ScriptReloadProperties extends UnityEngine.ScriptableObject {
    constructor();
    EditorGUI_Current_Editing_String: string;
    EditorGUI_DelayedControlThatHadFocusValue: string;
    EditorGUI_DelayedTextEditor_content: string;
    EditorGUI_DelayedTextEditor_controlID: number;
    EditorGUI_DelayedTextEditor_cursorIndex: number;
    EditorGUI_DelayedTextEditor_graphicalCursorPos: any;
    EditorGUI_DelayedTextEditor_hasFocus: boolean;
    EditorGUI_DelayedTextEditor_hasHorizontalCursorPos: boolean;
    EditorGUI_DelayedTextEditor_scrollOffset: any;
    EditorGUI_DelayedTextEditor_selectIndex: number;
    EditorGUI_IsActuallEditing: boolean;
    EditorGUI_TextEditor_content: string;
    EditorGUI_TextEditor_controlID: number;
    EditorGUI_TextEditor_cursorIndex: number;
    EditorGUI_TextEditor_graphicalCursorPos: any;
    EditorGUI_TextEditor_hasFocus: boolean;
    EditorGUI_TextEditor_hasHorizontalCursorPos: boolean;
    EditorGUI_TextEditor_scrollOffset: any;
    EditorGUI_TextEditor_selectIndex: number;
  }
}
declare namespace UnityEditor {
  class EditorSelectedRenderState extends System.Enum {
    protected constructor();
    static Hidden: UnityEditor.EditorSelectedRenderState;
    static Highlight: UnityEditor.EditorSelectedRenderState;
    value__: number;
    static Wireframe: UnityEditor.EditorSelectedRenderState;
  }
}
declare namespace UnityEditor {
  class EditorUtility extends System.Object {
    constructor();
    static BuildResourceFile(selection: UnityEngine.Object[], pathName: string): boolean;
    static ClearProgressBar(): void;
    static CollectDeepHierarchy(roots: UnityEngine.Object[]): UnityEngine.Object[];
    static CollectDependencies(roots: UnityEngine.Object[]): UnityEngine.Object[];
    static CompileCSharp(sources: string[], references: string[], defines: string[], outputFile: string): string[];
    static CompressCubemapTexture(texture: any, format: any, quality: number): void;
    static CompressCubemapTexture(texture: any, format: any, quality: any): void;
    static CompressTexture(texture: any, format: any, quality: number): void;
    static CompressTexture(texture: any, format: any, quality: any): void;
    static CopySerialized(source: UnityEngine.Object, dest: UnityEngine.Object): void;
    static CopySerializedIfDifferent(source: UnityEngine.Object, dest: UnityEngine.Object): void;
    static CreateEmptyPrefab(path: string): UnityEngine.Object;
    static CreateGameObjectWithHideFlags(name: string, flags: any, components: any[]): any;
    static DisplayCancelableProgressBar(title: string, info: string, progress: number): boolean;
    static DisplayCustomMenu(position: any, options: any[], selected: number, callback: ((userData: any, options: string[], selected: number) => void), userData: any): void;
    static DisplayCustomMenu(position: any, options: any[], selected: number, callback: ((userData: any, options: string[], selected: number) => void), userData: any, showHotkey: boolean): void;
    static DisplayDialog(title: string, message: string, ok: string): boolean;
    static DisplayDialog(title: string, message: string, ok: string, cancel: string): boolean;
    static DisplayDialogComplex(title: string, message: string, ok: string, cancel: string, alt: string): number;
    static DisplayPopupMenu(position: any, menuItemPath: string, command: UnityEditor.MenuCommand): void;
    static DisplayProgressBar(title: string, info: string, progress: number): void;
    static ExtractOggFile(obj: UnityEngine.Object, path: string): boolean;
    static FindAsset(path: string, type: any): UnityEngine.Object;
    static FindPrefabRoot(source: any): any;
    static FocusProjectWindow(): void;
    static FormatBytes(bytes: number): string;
    static FormatBytes(bytes: number): string;
    static GetAssetPath(asset: UnityEngine.Object): string;
    static GetObjectEnabled(target: UnityEngine.Object): number;
    static GetPrefabParent(source: UnityEngine.Object): UnityEngine.Object;
    static GetPrefabType(target: UnityEngine.Object): UnityEditor.PrefabType;
    static InstanceIDToObject(instanceID: number): UnityEngine.Object;
    static InstantiatePrefab(target: UnityEngine.Object): UnityEngine.Object;
    static InvokeDiffTool(leftTitle: string, leftFile: string, rightTitle: string, rightFile: string, ancestorTitle: string, ancestorFile: string): string;
    static IsPersistent(target: UnityEngine.Object): boolean;
    static LoadWindowLayout(path: string): boolean;
    static NaturalCompare(a: string, b: string): number;
    static OpenFilePanel(title: string, directory: string, extension: string): string;
    static OpenFilePanelWithFilters(title: string, directory: string, filters: string[]): string;
    static OpenFolderPanel(title: string, folder: string, defaultName: string): string;
    static OpenWithDefaultApp(fileName: string): void;
    static ReconnectToLastPrefab(go: any): boolean;
    static ReplacePrefab(go: any, targetPrefab: UnityEngine.Object): any;
    static ReplacePrefab(go: any, targetPrefab: UnityEngine.Object, options: UnityEditor.ReplacePrefabOptions): any;
    static ResetToPrefabState(source: UnityEngine.Object): boolean;
    static RevealInFinder(path: string): void;
    static SaveFilePanel(title: string, directory: string, defaultName: string, extension: string): string;
    static SaveFilePanelInProject(title: string, defaultName: string, extension: string, message: string): string;
    static SaveFilePanelInProject(title: string, defaultName: string, extension: string, message: string, path: string): string;
    static SaveFolderPanel(title: string, folder: string, defaultName: string): string;
    static SetDirty(target: UnityEngine.Object): void;
    static SetObjectEnabled(target: UnityEngine.Object, enabled: boolean): void;
    static SetSelectedRenderState(renderer: any, renderState: UnityEditor.EditorSelectedRenderState): void;
    static SetSelectedWireframeHidden(renderer: any, enabled: boolean): void;
    static UnloadUnusedAssets(): void;
    static UnloadUnusedAssetsIgnoreManagedReferences(): void;
    static UnloadUnusedAssetsImmediate(): void;
    static UnloadUnusedAssetsImmediate(includeMonoReferencesAsRoots: boolean): void;
    static WarnPrefab(target: UnityEngine.Object, title: string, warning: string, okButton: string): boolean;
    static audioMasterMute: boolean;
    static readonly scriptCompilationFailed: boolean;
  }
}
declare namespace UnityEditor {
  class SceneAsset extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class ShaderError extends System.ValueType {
    protected constructor();
    file: string;
    line: number;
    message: string;
    messageDetails: string;
    platform: string;
    warning: number;
  }
}
declare namespace UnityEditor {
  class ShaderUtil extends System.Object {
    constructor();
    static CreateShaderAsset(source: string): any;
    static GetPropertyCount(s: any): number;
    static GetPropertyDescription(s: any, propertyIdx: number): string;
    static GetPropertyName(s: any, propertyIdx: number): string;
    static GetPropertyType(s: any, propertyIdx: number): UnityEditor.ShaderUtil.ShaderPropertyType;
    static GetRangeLimits(s: any, propertyIdx: number, defminmax: number): number;
    static GetTexDim(s: any, propertyIdx: number): any;
    static IsShaderPropertyHidden(s: any, propertyIdx: number): boolean;
    static UpdateShaderAsset(shader: any, source: string): void;
    static readonly hardwareSupportsRectRenderTexture: boolean;
  }
}
declare namespace UnityEditor.ShaderUtil {
  class ShaderPropertyType extends System.Enum {
    protected constructor();
    static Color: UnityEditor.ShaderUtil.ShaderPropertyType;
    static Float: UnityEditor.ShaderUtil.ShaderPropertyType;
    static Range: UnityEditor.ShaderUtil.ShaderPropertyType;
    static TexEnv: UnityEditor.ShaderUtil.ShaderPropertyType;
    value__: number;
    static Vector: UnityEditor.ShaderUtil.ShaderPropertyType;
  }
}
declare namespace UnityEditor.ShaderUtil {
  class ShaderCompilerPlatformType extends System.Enum {
    protected constructor();
    static Count: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static D3D11: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static D3D11_9x: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static D3D9: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Flash: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Metal: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static N3DS: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGL: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLCore: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLES20: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLES20Desktop: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLES30: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PS3: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PS4: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PSM: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PSVita: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Switch: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    value__: number;
    static Vulkan: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static WiiU: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Xbox360: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static XboxOne: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
  }
}
declare namespace UnityEditor.ShaderUtil {
  class ShaderPropertyTexDim extends System.Enum {
    protected constructor();
    static TexDim2D: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDim3D: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDimAny: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDimCUBE: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDimNone: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    value__: number;
  }
}
declare namespace UnityEditor {
  class DragAndDropVisualMode extends System.Enum {
    protected constructor();
    static Copy: UnityEditor.DragAndDropVisualMode;
    static Generic: UnityEditor.DragAndDropVisualMode;
    static Link: UnityEditor.DragAndDropVisualMode;
    static Move: UnityEditor.DragAndDropVisualMode;
    static None: UnityEditor.DragAndDropVisualMode;
    static Rejected: UnityEditor.DragAndDropVisualMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class DragAndDrop extends System.Object {
    constructor();
    static AcceptDrag(): void;
    static GetGenericData(type: string): any;
    static PrepareStartDrag(): void;
    static SetGenericData(type: string, data: any): void;
    static StartDrag(title: string): void;
    static activeControlID: number;
    static objectReferences: UnityEngine.Object[];
    static paths: string[];
    static visualMode: UnityEditor.DragAndDropVisualMode;
  }
}
declare namespace UnityEditor {
  class GizmoType extends System.Enum {
    protected constructor();
    static Active: UnityEditor.GizmoType;
    static InSelectionHierarchy: UnityEditor.GizmoType;
    static NonSelected: UnityEditor.GizmoType;
    static NotInSelectionHierarchy: UnityEditor.GizmoType;
    static NotSelected: UnityEditor.GizmoType;
    static Pickable: UnityEditor.GizmoType;
    static Selected: UnityEditor.GizmoType;
    static SelectedOrChild: UnityEditor.GizmoType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class DrawGizmo extends System.Attribute {
    constructor(gizmo: UnityEditor.GizmoType);
    constructor(gizmo: UnityEditor.GizmoType, drawnGizmoType: any);
    drawnType: any;
    drawOptions: UnityEditor.GizmoType;
  }
}
declare namespace UnityEditor {
  class Help extends System.Object {
    constructor();
    static BrowseURL(url: string): void;
    static GetHelpURLForObject(obj: UnityEngine.Object): string;
    static HasHelpForObject(obj: UnityEngine.Object): boolean;
    static ShowHelpForObject(obj: UnityEngine.Object): void;
    static ShowHelpPage(page: string): void;
  }
}
declare namespace UnityEditor {
  class Menu extends System.Object {
    constructor();
    static GetChecked(menuPath: string): boolean;
    static SetChecked(menuPath: string, isChecked: boolean): void;
  }
}
declare namespace UnityEditor {
  class MenuItem extends System.Attribute {
    constructor(itemName: string);
    constructor(itemName: string, isValidateFunction: boolean);
    constructor(itemName: string, isValidateFunction: boolean, priority: number);
    menuItem: string;
    priority: number;
    validate: boolean;
  }
}
declare namespace UnityEditor {
  class MenuCommand extends System.Object {
    constructor(inContext: UnityEngine.Object, inUserData: number);
    constructor(inContext: UnityEngine.Object);
    context: UnityEngine.Object;
    userData: number;
  }
}
declare namespace UnityEditor {
  class SelectionMode extends System.Enum {
    protected constructor();
    static Assets: UnityEditor.SelectionMode;
    static Deep: UnityEditor.SelectionMode;
    static DeepAssets: UnityEditor.SelectionMode;
    static Editable: UnityEditor.SelectionMode;
    static ExcludePrefab: UnityEditor.SelectionMode;
    static OnlyUserModifiable: UnityEditor.SelectionMode;
    static TopLevel: UnityEditor.SelectionMode;
    static Unfiltered: UnityEditor.SelectionMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class Selection extends System.Object {
    constructor();
    static Contains(instanceID: number): boolean;
    static Contains(obj: UnityEngine.Object): boolean;
    static GetFiltered(type: any, mode: UnityEditor.SelectionMode): UnityEngine.Object[];
    static GetTransforms(mode: UnityEditor.SelectionMode): any[];
    static SetActiveObjectWithContext(obj: UnityEngine.Object, context: UnityEngine.Object): void;
    static readonly activeContext: UnityEngine.Object;
    static activeGameObject: any;
    static activeInstanceID: number;
    static activeObject: UnityEngine.Object;
    static activeTransform: any;
    static readonly assetGUIDs: string[];
    static readonly gameObjects: any[];
    static instanceIDs: number[];
    static objects: UnityEngine.Object[];
    static readonly transforms: any[];
    static selectionChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class EditorPrefs extends System.Object {
    constructor();
    static DeleteAll(): void;
    static DeleteKey(key: string): void;
    static GetBool(key: string): boolean;
    static GetBool(key: string, defaultValue: boolean): boolean;
    static GetFloat(key: string): number;
    static GetFloat(key: string, defaultValue: number): number;
    static GetInt(key: string): number;
    static GetInt(key: string, defaultValue: number): number;
    static GetString(key: string): string;
    static GetString(key: string, defaultValue: string): string;
    static HasKey(key: string): boolean;
    static SetBool(key: string, value: boolean): void;
    static SetFloat(key: string, value: number): void;
    static SetInt(key: string, value: number): void;
    static SetString(key: string, value: string): void;
  }
}
declare namespace UnityEditor {
  class Unsupported extends System.Object {
    constructor();
    static AreAllParametersInDestination(transition: UnityEngine.Object, controller: UnityEditor.Animations.AnimatorController, missingParameters: string[]): boolean;
    static CanPasteParametersToTransition(transition: UnityEngine.Object, controller: UnityEditor.Animations.AnimatorController): boolean;
    static CaptureScreenshotImmediate(filePath: string, x: number, y: number, width: number, height: number): void;
    static ClearSkinCache(): void;
    static CopyComponentToPasteboard(component: UnityEngine.Component): boolean;
    static CopyGameObjectsToPasteboard(): void;
    static CopyStateMachineDataToPasteboard(stateMachineObject: UnityEngine.Object, controller: UnityEditor.Animations.AnimatorController, layerIndex: number): void;
    static CopyStateMachineTransitionParametersToPasteboard(transition: UnityEngine.Object, controller: UnityEditor.Animations.AnimatorController): void;
    static DeleteGameObjectSelection(): void;
    static DestinationHasCompatibleParameterTypes(transition: UnityEngine.Object, controller: UnityEditor.Animations.AnimatorController, mismatchedParameters: string[]): boolean;
    static DuplicateGameObjectsUsingPasteboard(): void;
    static GetApplicationSettingCompressAssetsOnImport(): boolean;
    static GetBaseUnityDeveloperFolder(): string;
    static GetLocalIdentifierInFile(instanceID: number): number;
    static GetSerializedAssetInterfaceSingleton(className: string): UnityEngine.Object;
    static GetSubmenus(menuPath: string): string[];
    static GetSubmenusCommands(menuPath: string): string[];
    static GetSubmenusIncludingSeparators(menuPath: string): string[];
    static GetTypeFromFullName(fullName: string): any;
    static HasStateMachineDataInPasteboard(): boolean;
    static HasStateMachineTransitionDataInPasteboard(): boolean;
    static IsBleedingEdgeBuild(): boolean;
    static IsDestroyScriptableObject(target: UnityEngine.ScriptableObject): boolean;
    static IsDeveloperBuild(): boolean;
    static IsHiddenFile(path: string): boolean;
    static IsNativeCodeBuiltInReleaseMode(): boolean;
    static PasteComponentFromPasteboard(go: any): boolean;
    static PasteComponentValuesFromPasteboard(component: UnityEngine.Component): boolean;
    static PasteGameObjectsFromPasteboard(): void;
    static PasteToStateMachineFromPasteboard(sm: UnityEditor.Animations.AnimatorStateMachine, controller: UnityEditor.Animations.AnimatorController, layerIndex: number, position: any): void;
    static PasteToStateMachineTransitionParametersFromPasteboard(transition: UnityEngine.Object, controller: UnityEditor.Animations.AnimatorController, conditions: boolean, parameters: boolean): void;
    static PrepareObjectContextMenu(c: UnityEngine.Object, contextUserData: number): void;
    static ResolveSymlinks(path: string): string;
    static SceneTrackerFlushDirty(): void;
    static SetAllowCursorHide(allow: boolean): void;
    static SetAllowCursorLock(allow: boolean): void;
    static SetApplicationSettingCompressAssetsOnImport(value: boolean): void;
    static SetQualitySettingsShadowDistanceTemporarily(distance: number): void;
    static SetRenderSettingsUseFogNoDirty(fog: boolean): void;
    static SmartReset(obj: UnityEngine.Object): void;
    static StopPlayingImmediately(): void;
  }
}
declare namespace UnityEditor {
  class ObjectNames extends System.Object {
    constructor();
    static GetClassName(obj: UnityEngine.Object): string;
    static GetDragAndDropTitle(obj: UnityEngine.Object): string;
    static GetInspectorTitle(obj: UnityEngine.Object): string;
    static GetPropertyEditorTitle(obj: UnityEngine.Object): string;
    static GetUniqueName(existingNames: string[], name: string): string;
    static MangleVariableName(name: string): string;
    static NicifyVariableName(name: string): string;
    static SetNameSmart(obj: UnityEngine.Object, name: string): void;
  }
}
declare namespace UnityEditor {
  class UnityStats extends System.Object {
    constructor();
    static GetNetworkStats(i: number): string;
    static readonly audioClippingAmount: number;
    static readonly audioDSPLoad: number;
    static readonly audioLevel: number;
    static readonly audioStreamLoad: number;
    static readonly batches: number;
    static readonly drawCalls: number;
    static readonly dynamicBatchedDrawCalls: number;
    static readonly dynamicBatches: number;
    static readonly frameTime: number;
    static readonly ibUploadBytes: number;
    static readonly ibUploads: number;
    static readonly instancedBatchedDrawCalls: number;
    static readonly instancedBatches: number;
    static readonly renderTextureBytes: number;
    static readonly renderTextureChanges: number;
    static readonly renderTextureCount: number;
    static readonly renderTime: number;
    static readonly screenBytes: number;
    static readonly screenRes: string;
    static readonly setPassCalls: number;
    static readonly shadowCasters: number;
    static readonly staticBatchedDrawCalls: number;
    static readonly staticBatches: number;
    static readonly triangles: number;
    static readonly usedTextureCount: number;
    static readonly usedTextureMemorySize: number;
    static readonly vboTotal: number;
    static readonly vboTotalBytes: number;
    static readonly vboUploadBytes: number;
    static readonly vboUploads: number;
    static readonly vertices: number;
    static readonly visibleAnimations: number;
    static readonly visibleSkinnedMeshes: number;
  }
}
declare namespace UnityEditor {
  class MonoScript extends UnityEngine.TextAsset {
    constructor();
    static FromMonoBehaviour(behaviour: UnityEngine.MonoBehaviour): UnityEditor.MonoScript;
    static FromScriptableObject(scriptableObject: UnityEngine.ScriptableObject): UnityEditor.MonoScript;
    GetClass(): any;
  }
}
declare namespace UnityEngine {
  class TextAsset extends UnityEngine.Object {
    constructor();
    ToString(): string;
    readonly bytes: number[];
    readonly text: string;
  }
}
declare namespace UnityEditor {
  class AsyncProgressBar extends System.Object {
    constructor();
    static Clear(): void;
    static Display(progressInfo: string, progress: number): void;
    static readonly isShowing: boolean;
    static readonly progress: number;
    static readonly progressInfo: string;
  }
}
declare namespace UnityEditor {
  class OSColorPicker extends System.Object {
    constructor();
    static Close(): void;
    static Show(showAlpha: boolean): void;
    static color: any;
    static readonly visible: boolean;
  }
}
declare namespace UnityEditor {
  class SpeedTreeImporter extends UnityEditor.AssetImporter {
    constructor();
    GenerateMaterials(): void;
    alphaTestRef: number;
    animateCrossFading: boolean;
    readonly bestWindQuality: number;
    billboardTransitionCrossFadeWidth: number;
    castShadows: boolean[];
    enableBump: boolean[];
    enableHue: boolean[];
    enableSmoothLODTransition: boolean;
    fadeOutWidth: number;
    readonly hasBillboard: boolean;
    readonly hasImported: boolean;
    hueVariation: any;
    LODHeights: number[];
    mainColor: any;
    readonly materialFolderPath: string;
    receiveShadows: boolean[];
    reflectionProbeUsages: any[];
    scaleFactor: number;
    shininess: number;
    specColor: any;
    useLightProbes: boolean[];
    windQualities: number[];
    static windQualityNames: string[];
  }
}
declare namespace UnityEditor.Sprites {
  class AtlasSettings extends System.ValueType {
    protected constructor();
    allowsAlphaSplitting: boolean;
    anisoLevel: number;
    colorSpace: any;
    compressionQuality: number;
    enableRotation: boolean;
    filterMode: any;
    format: any;
    generateMipMaps: boolean;
    maxHeight: number;
    maxWidth: number;
    paddingPower: number;
  }
}
declare namespace UnityEditor.Sprites {
  class PackerJob extends System.Object {
    protected constructor();
    AddAtlas(atlasName: string, settings: UnityEditor.Sprites.AtlasSettings): void;
    AssignToAtlas(atlasName: string, sprite: any, packingMode: any, packingRotation: any): void;
  }
}
declare namespace UnityEditor.Sprites {
  class Packer extends System.Object {
    constructor();
    static GetAlphaTexturesForAtlas(atlasName: string): any[];
    static GetAtlasDataForSprite(sprite: any, atlasName: any, atlasTexture: any): void;
    static GetTexturesForAtlas(atlasName: string): any[];
    static RebuildAtlasCacheIfNeeded(target: UnityEditor.BuildTarget): void;
    static RebuildAtlasCacheIfNeeded(target: UnityEditor.BuildTarget, displayProgressBar: boolean): void;
    static RebuildAtlasCacheIfNeeded(target: UnityEditor.BuildTarget, displayProgressBar: boolean, execution: UnityEditor.Sprites.Packer.Execution): void;
    static readonly atlasNames: string[];
    static readonly Policies: string[];
    static SelectedPolicy: string;
    static kDefaultPolicy: string;
  }
}
declare namespace UnityEditor.Sprites.Packer {
  class Execution extends System.Enum {
    protected constructor();
    static ForceRegroup: UnityEditor.Sprites.Packer.Execution;
    static Normal: UnityEditor.Sprites.Packer.Execution;
    value__: number;
  }
}
declare namespace UnityEditor.Sprites {
  class SpriteUtility extends System.Object {
    constructor();
    static GetSpriteIndices(sprite: any, getAtlasData: boolean): number[];
    static GetSpriteMesh(sprite: any, getAtlasData: boolean): any[];
    static GetSpriteTexture(sprite: any, getAtlasData: boolean): any;
    static GetSpriteUVs(sprite: any, getAtlasData: boolean): any[];
  }
}
declare namespace UnityEditor.Sprites {
  class DataUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class InternalSpriteUtility extends System.Object {
    constructor();
    static GenerateAutomaticSpriteRectangles(texture: any, minRectSize: number, extrudeSize: number): any[];
    static GenerateGridSpriteRectangles(texture: any, offset: any, size: any, padding: any): any[];
  }
}
declare namespace UnityEditorInternal {
  class SpriteExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorConditionMode extends System.Enum {
    protected constructor();
    static Equals: UnityEditor.Animations.AnimatorConditionMode;
    static Greater: UnityEditor.Animations.AnimatorConditionMode;
    static If: UnityEditor.Animations.AnimatorConditionMode;
    static IfNot: UnityEditor.Animations.AnimatorConditionMode;
    static Less: UnityEditor.Animations.AnimatorConditionMode;
    static NotEqual: UnityEditor.Animations.AnimatorConditionMode;
    value__: number;
  }
}
declare namespace UnityEditor.Animations {
  class TransitionInterruptionSource extends System.Enum {
    protected constructor();
    static Destination: UnityEditor.Animations.TransitionInterruptionSource;
    static DestinationThenSource: UnityEditor.Animations.TransitionInterruptionSource;
    static None: UnityEditor.Animations.TransitionInterruptionSource;
    static Source: UnityEditor.Animations.TransitionInterruptionSource;
    static SourceThenDestination: UnityEditor.Animations.TransitionInterruptionSource;
    value__: number;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorCondition extends System.ValueType {
    protected constructor();
    mode: UnityEditor.Animations.AnimatorConditionMode;
    parameter: string;
    threshold: number;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorTransitionBase extends UnityEngine.Object {
    constructor();
    AddCondition(mode: UnityEditor.Animations.AnimatorConditionMode, threshold: number, parameter: string): void;
    GetDisplayName(source: UnityEngine.Object): string;
    RemoveCondition(condition: UnityEditor.Animations.AnimatorCondition): void;
    conditions: UnityEditor.Animations.AnimatorCondition[];
    destinationState: UnityEditor.Animations.AnimatorState;
    destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    isExit: boolean;
    mute: boolean;
    solo: boolean;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorTransition extends UnityEditor.Animations.AnimatorTransitionBase {
    constructor();
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorStateTransition extends UnityEditor.Animations.AnimatorTransitionBase {
    constructor();
    canTransitionToSelf: boolean;
    duration: number;
    exitTime: number;
    hasExitTime: boolean;
    hasFixedDuration: boolean;
    interruptionSource: UnityEditor.Animations.TransitionInterruptionSource;
    offset: number;
    orderedInterruption: boolean;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorState extends UnityEngine.Object {
    constructor();
    AddExitTransition(): UnityEditor.Animations.AnimatorStateTransition;
    AddExitTransition(defaultExitTime: boolean): UnityEditor.Animations.AnimatorStateTransition;
    AddStateMachineBehaviour(stateMachineBehaviourType: any): any;
    AddTransition(destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(destinationState: UnityEditor.Animations.AnimatorState, defaultExitTime: boolean): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine, defaultExitTime: boolean): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(transition: UnityEditor.Animations.AnimatorStateTransition): void;
    GetMotion(): UnityEngine.Motion;
    RemoveTransition(transition: UnityEditor.Animations.AnimatorStateTransition): void;
    behaviours: any[];
    cycleOffset: number;
    cycleOffsetParameter: string;
    cycleOffsetParameterActive: boolean;
    iKOnFeet: boolean;
    mirror: boolean;
    mirrorParameter: string;
    mirrorParameterActive: boolean;
    motion: UnityEngine.Motion;
    readonly nameHash: number;
    speed: number;
    speedParameter: string;
    speedParameterActive: boolean;
    tag: string;
    timeParameter: string;
    timeParameterActive: boolean;
    transitions: UnityEditor.Animations.AnimatorStateTransition[];
    readonly uniqueName: string;
    readonly uniqueNameHash: number;
    writeDefaultValues: boolean;
  }
}
declare namespace UnityEditor.Animations {
  class ChildAnimatorState extends System.ValueType {
    protected constructor();
    position: any;
    state: UnityEditor.Animations.AnimatorState;
  }
}
declare namespace UnityEditor.Animations {
  class ChildAnimatorStateMachine extends System.ValueType {
    protected constructor();
    position: any;
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorStateMachine extends UnityEngine.Object {
    constructor();
    AddAnyStateTransition(destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorStateTransition;
    AddAnyStateTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorStateTransition;
    AddEntryTransition(destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorTransition;
    AddEntryTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    AddState(name: string): UnityEditor.Animations.AnimatorState;
    AddState(name: string, position: any): UnityEditor.Animations.AnimatorState;
    AddState(state: UnityEditor.Animations.AnimatorState, position: any): void;
    AddStateMachine(name: string): UnityEditor.Animations.AnimatorStateMachine;
    AddStateMachine(name: string, position: any): UnityEditor.Animations.AnimatorStateMachine;
    AddStateMachine(stateMachine: UnityEditor.Animations.AnimatorStateMachine, position: any): void;
    AddStateMachineBehaviour(stateMachineBehaviourType: any): any;
    AddStateMachineExitTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    AddStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    AddStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorTransition;
    AddStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    GetStateMachineTransitions(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition[];
    MakeUniqueStateMachineName(name: string): string;
    MakeUniqueStateName(name: string): string;
    RemoveAnyStateTransition(transition: UnityEditor.Animations.AnimatorStateTransition): boolean;
    RemoveEntryTransition(transition: UnityEditor.Animations.AnimatorTransition): boolean;
    RemoveState(state: UnityEditor.Animations.AnimatorState): void;
    RemoveStateMachine(stateMachine: UnityEditor.Animations.AnimatorStateMachine): void;
    RemoveStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, transition: UnityEditor.Animations.AnimatorTransition): boolean;
    SetStateMachineTransitions(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, transitions: UnityEditor.Animations.AnimatorTransition[]): void;
    anyStatePosition: any;
    anyStateTransitions: UnityEditor.Animations.AnimatorStateTransition[];
    behaviours: any[];
    defaultState: UnityEditor.Animations.AnimatorState;
    entryPosition: any;
    entryTransitions: UnityEditor.Animations.AnimatorTransition[];
    exitPosition: any;
    parentStateMachinePosition: any;
    stateMachines: UnityEditor.Animations.ChildAnimatorStateMachine[];
    states: UnityEditor.Animations.ChildAnimatorState[];
  }
}
declare namespace UnityEditor {
  class StaticEditorFlags extends System.Enum {
    protected constructor();
    static BatchingStatic: UnityEditor.StaticEditorFlags;
    static LightmapStatic: UnityEditor.StaticEditorFlags;
    static NavigationStatic: UnityEditor.StaticEditorFlags;
    static OccludeeStatic: UnityEditor.StaticEditorFlags;
    static OccluderStatic: UnityEditor.StaticEditorFlags;
    static OffMeshLinkGeneration: UnityEditor.StaticEditorFlags;
    static ReflectionProbeStatic: UnityEditor.StaticEditorFlags;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SubstanceImporter extends UnityEditor.AssetImporter {
    constructor();
    CloneMaterial(material: any): string;
    DestroyMaterial(material: any): void;
    ExportBitmaps(material: any, exportPath: string, alphaRemap: boolean): void;
    ExportPreset(material: any, exportPath: string): void;
    GetAnimationUpdateRate(material: any): number;
    GetGenerateAllOutputs(material: any): boolean;
    GetGenerateMipMaps(material: any): boolean;
    GetMaterialCount(): number;
    GetMaterialOffset(material: any): any;
    GetMaterials(): any[];
    GetMaterialScale(material: any): any;
    GetPlatformTextureSettings(materialName: string, platform: string, maxTextureWidth: any, maxTextureHeight: any, textureFormat: any, loadBehavior: any): boolean;
    GetPrototypeNames(): string[];
    GetTextureAlphaSource(material: any, textureName: string): any;
    InstantiateMaterial(prototypeName: string): string;
    OnShaderModified(material: any): void;
    RenameMaterial(material: any, name: string): boolean;
    ResetMaterial(material: any): void;
    SetAnimationUpdateRate(material: any, animation_update_rate: number): void;
    SetGenerateAllOutputs(material: any, generated: boolean): void;
    SetGenerateMipMaps(material: any, mode: boolean): void;
    SetMaterialOffset(material: any, offset: any): void;
    SetMaterialScale(material: any, scale: any): void;
    SetPlatformTextureSettings(material: any, platform: string, maxTextureWidth: number, maxTextureHeight: number, textureFormat: number, loadBehavior: number): void;
    SetTextureAlphaSource(material: any, textureName: string, alphaSource: any): void;
  }
}
declare namespace UnityEditor {
  class SubstanceArchive extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class HighlightSearchMode extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.HighlightSearchMode;
    static Content: UnityEditor.HighlightSearchMode;
    static Identifier: UnityEditor.HighlightSearchMode;
    static None: UnityEditor.HighlightSearchMode;
    static PrefixLabel: UnityEditor.HighlightSearchMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class Highlighter extends System.Object {
    constructor();
    static Highlight(windowTitle: string, text: string): boolean;
    static Highlight(windowTitle: string, text: string, mode: UnityEditor.HighlightSearchMode): boolean;
    static HighlightIdentifier(position: any, identifier: string): void;
    static Stop(): void;
    static readonly active: boolean;
    static readonly activeRect: any;
    static readonly activeText: string;
    static readonly activeVisible: boolean;
  }
}
declare namespace UnityEditor {
  class UnityType extends System.Object {
    constructor();
    static FindTypeByName(name: string): UnityEditor.UnityType;
    static FindTypeByNameCaseInsensitive(name: string): UnityEditor.UnityType;
    static FindTypeByPersistentTypeID(id: number): UnityEditor.UnityType;
    static GetTypes(): any;
    IsDerivedFrom(baseClass: UnityEditor.UnityType): boolean;
    readonly baseClass: UnityEditor.UnityType;
    readonly flags: UnityEditor.UnityTypeFlags;
    readonly hasNativeNamespace: boolean;
    readonly isAbstract: boolean;
    readonly isEditorOnly: boolean;
    readonly isSealed: boolean;
    readonly name: string;
    readonly nativeNamespace: string;
    readonly persistentTypeID: number;
    readonly qualifiedName: string;
  }
}
declare namespace UnityEditor.UnityType {
  class UnityTypeTransport extends System.ValueType {
    protected constructor();
    baseClassIndex: number;
    className: string;
    classNamespace: string;
    descendantCount: number;
    flags: number;
    persistentTypeID: number;
    runtimeTypeIndex: number;
  }
}
declare namespace UnityEditor {
  class UndoPropertyModification extends System.ValueType {
    protected constructor();
    keepPrefabOverride: boolean;
    currentValue: UnityEditor.PropertyModification;
    previousValue: UnityEditor.PropertyModification;
  }
}
declare namespace UnityEditor {
  class Undo extends System.Object {
    constructor();
    static AddComponent(gameObject: any, type: any): UnityEngine.Component;
    static ClearAll(): void;
    static ClearSnapshotTarget(): void;
    static ClearUndo(identifier: UnityEngine.Object): void;
    static CollapseUndoOperations(groupIndex: number): void;
    static CreateSnapshot(): void;
    static DestroyObjectImmediate(objectToUndo: UnityEngine.Object): void;
    static FlushUndoRecordObjects(): void;
    static GetCurrentGroup(): number;
    static GetCurrentGroupName(): string;
    static IncrementCurrentGroup(): void;
    static MoveGameObjectToScene(go: any, scene: any, name: string): void;
    static PerformRedo(): void;
    static PerformUndo(): void;
    static RecordObject(objectToUndo: UnityEngine.Object, name: string): void;
    static RecordObjects(objectsToUndo: UnityEngine.Object[], name: string): void;
    static RegisterCompleteObjectUndo(objectToUndo: UnityEngine.Object, name: string): void;
    static RegisterCompleteObjectUndo(objectsToUndo: UnityEngine.Object[], name: string): void;
    static RegisterCreatedObjectUndo(objectToUndo: UnityEngine.Object, name: string): void;
    static RegisterFullObjectHierarchyUndo(objectToUndo: UnityEngine.Object): void;
    static RegisterFullObjectHierarchyUndo(objectToUndo: UnityEngine.Object, name: string): void;
    static RegisterSceneUndo(name: string): void;
    static RegisterSnapshot(): void;
    static RegisterUndo(objectToUndo: UnityEngine.Object, name: string): void;
    static RegisterUndo(objectsToUndo: UnityEngine.Object[], name: string): void;
    static RestoreSnapshot(): void;
    static RevertAllDownToGroup(group: number): void;
    static RevertAllInCurrentGroup(): void;
    static SetCurrentGroupName(name: string): void;
    static SetSnapshotTarget(objectToUndo: UnityEngine.Object, name: string): void;
    static SetSnapshotTarget(objectsToUndo: UnityEngine.Object[], name: string): void;
    static SetTransformParent(transform: any, newParent: any, name: string): void;
    static postprocessModifications: ((modifications: UnityEditor.UndoPropertyModification[]) => UnityEditor.UndoPropertyModification[]);
    static undoRedoPerformed: (() => void);
    static willFlushUndoRecord: (() => void);
  }
}
declare namespace UnityEditor {
  class UndoSnapshot extends System.Object {
    constructor(objectsToUndo: UnityEngine.Object[]);
    Dispose(): void;
    Restore(): void;
  }
}
declare namespace UnityEditorInternal {
  class WebURLs extends System.Object {
    protected constructor();
    static readonly betaLandingPage: string;
    static readonly cloudBuildPage: string;
    static readonly unity: string;
    static readonly unityAnswers: string;
    static readonly unityConnect: string;
    static readonly unityFeedback: string;
    static readonly unityForum: string;
    static readonly whatsNewPage: string;
  }
}
declare namespace UnityEditor.VersionControl {
  class Asset extends System.Object {
    constructor(clientPath: string);
    Dispose(): void;
    Edit(): void;
    IsChildOf(other: UnityEditor.VersionControl.Asset): boolean;
    IsOneOfStates(states: UnityEditor.VersionControl.Asset.States[]): boolean;
    IsState(state: UnityEditor.VersionControl.Asset.States): boolean;
    Load(): UnityEngine.Object;
    readonly fullName: string;
    readonly isFolder: boolean;
    readonly isInCurrentProject: boolean;
    readonly isMeta: boolean;
    readonly locked: boolean;
    readonly name: string;
    readonly path: string;
    readonly prettyPath: string;
    readonly readOnly: boolean;
    readonly state: UnityEditor.VersionControl.Asset.States;
  }
}
declare namespace UnityEditor.VersionControl.Asset {
  class States extends System.Enum {
    protected constructor();
    static AddedLocal: UnityEditor.VersionControl.Asset.States;
    static AddedRemote: UnityEditor.VersionControl.Asset.States;
    static CheckedOutLocal: UnityEditor.VersionControl.Asset.States;
    static CheckedOutRemote: UnityEditor.VersionControl.Asset.States;
    static Conflicted: UnityEditor.VersionControl.Asset.States;
    static DeletedLocal: UnityEditor.VersionControl.Asset.States;
    static DeletedRemote: UnityEditor.VersionControl.Asset.States;
    static Local: UnityEditor.VersionControl.Asset.States;
    static LockedLocal: UnityEditor.VersionControl.Asset.States;
    static LockedRemote: UnityEditor.VersionControl.Asset.States;
    static MetaFile: UnityEditor.VersionControl.Asset.States;
    static Missing: UnityEditor.VersionControl.Asset.States;
    static None: UnityEditor.VersionControl.Asset.States;
    static OutOfSync: UnityEditor.VersionControl.Asset.States;
    static ReadOnly: UnityEditor.VersionControl.Asset.States;
    static Synced: UnityEditor.VersionControl.Asset.States;
    static Updating: UnityEditor.VersionControl.Asset.States;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class ChangeSet extends System.Object {
    constructor();
    constructor(description: string);
    constructor(description: string, revision: string);
    constructor(other: UnityEditor.VersionControl.ChangeSet);
    Dispose(): void;
    readonly description: string;
    readonly id: string;
    static defaultID: string;
  }
}
declare namespace UnityEditor.VersionControl {
  class CommandContext extends System.Enum {
    protected constructor();
    static Global: UnityEditor.VersionControl.CommandContext;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class CustomCommand extends System.Object {
    protected constructor();
    StartTask(): UnityEditor.VersionControl.Task;
    readonly context: UnityEditor.VersionControl.CommandContext;
    readonly label: string;
    readonly name: string;
  }
}
declare namespace UnityEditor.VersionControl {
  class Message extends System.Object {
    protected constructor();
    Dispose(): void;
    Show(): void;
    readonly message: string;
    readonly severity: UnityEditor.VersionControl.Message.Severity;
  }
}
declare namespace UnityEditor.VersionControl.Message {
  class Severity extends System.Enum {
    protected constructor();
    static Data: UnityEditor.VersionControl.Message.Severity;
    static Error: UnityEditor.VersionControl.Message.Severity;
    static Info: UnityEditor.VersionControl.Message.Severity;
    value__: number;
    static Verbose: UnityEditor.VersionControl.Message.Severity;
    static Warning: UnityEditor.VersionControl.Message.Severity;
  }
}
declare namespace UnityEditor.VersionControl {
  class ConfigField extends System.Object {
    protected constructor();
    Dispose(): void;
    readonly description: string;
    readonly isPassword: boolean;
    readonly isRequired: boolean;
    readonly label: string;
    readonly name: string;
  }
}
declare namespace UnityEditor.VersionControl {
  class Plugin extends System.Object {
    protected constructor();
    Dispose(): void;
    static readonly availablePlugins: UnityEditor.VersionControl.Plugin[];
    readonly configFields: UnityEditor.VersionControl.ConfigField[];
    readonly name: string;
  }
}
declare namespace UnityEditor.VersionControl {
  class VCSProviderIdentifier extends System.Enum {
    protected constructor();
    static UnsetIdentifier: UnityEditor.VersionControl.VCSProviderIdentifier;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class Provider extends System.Object {
    constructor();
    static Add(asset: UnityEditor.VersionControl.Asset, recursive: boolean): UnityEditor.VersionControl.Task;
    static Add(assets: UnityEditor.VersionControl.AssetList, recursive: boolean): UnityEditor.VersionControl.Task;
    static AddIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static ChangeSetDescription(changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSetMove(asset: UnityEditor.VersionControl.Asset, changesetID: string): UnityEditor.VersionControl.Task;
    static ChangeSetMove(asset: UnityEditor.VersionControl.Asset, changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSetMove(assets: UnityEditor.VersionControl.AssetList, changesetID: string): UnityEditor.VersionControl.Task;
    static ChangeSetMove(assets: UnityEditor.VersionControl.AssetList, changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSets(): UnityEditor.VersionControl.Task;
    static ChangeSetStatus(changesetID: string): UnityEditor.VersionControl.Task;
    static ChangeSetStatus(changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static Checkout(asset: string, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(assets: string[], mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(asset: UnityEngine.Object, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(assets: UnityEngine.Object[], mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static CheckoutIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static CheckoutIsValid(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.CheckoutMode): boolean;
    static CheckoutIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static CheckoutIsValid(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.CheckoutMode): boolean;
    static ClearCache(): void;
    static Delete(assetProjectPath: string): UnityEditor.VersionControl.Task;
    static Delete(asset: UnityEditor.VersionControl.Asset): UnityEditor.VersionControl.Task;
    static Delete(assets: UnityEditor.VersionControl.AssetList): UnityEditor.VersionControl.Task;
    static DeleteChangeSets(changesets: UnityEditor.VersionControl.ChangeSets): UnityEditor.VersionControl.Task;
    static DeleteChangeSetsIsValid(changesets: UnityEditor.VersionControl.ChangeSets): boolean;
    static DiffHead(assets: UnityEditor.VersionControl.AssetList, includingMetaFiles: boolean): UnityEditor.VersionControl.Task;
    static DiffIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static GetActiveConfigFields(): UnityEditor.VersionControl.ConfigField[];
    static GetActivePlugin(): UnityEditor.VersionControl.Plugin;
    static GetAssetByGUID(guid: string): UnityEditor.VersionControl.Asset;
    static GetAssetByPath(unityPath: string): UnityEditor.VersionControl.Asset;
    static GetAssetListFromSelection(): UnityEditor.VersionControl.AssetList;
    static GetLatest(asset: UnityEditor.VersionControl.Asset): UnityEditor.VersionControl.Task;
    static GetLatest(assets: UnityEditor.VersionControl.AssetList): UnityEditor.VersionControl.Task;
    static GetLatestIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static GetLatestIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static Incoming(): UnityEditor.VersionControl.Task;
    static IncomingChangeSetAssets(changesetID: string): UnityEditor.VersionControl.Task;
    static IncomingChangeSetAssets(changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static IsOpenForEdit(asset: UnityEditor.VersionControl.Asset): boolean;
    static Lock(asset: UnityEditor.VersionControl.Asset, locked: boolean): UnityEditor.VersionControl.Task;
    static Lock(assets: UnityEditor.VersionControl.AssetList, locked: boolean): UnityEditor.VersionControl.Task;
    static LockIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static LockIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static Merge(assets: UnityEditor.VersionControl.AssetList, method: UnityEditor.VersionControl.MergeMethod): UnityEditor.VersionControl.Task;
    static Move(from: string, to: string): UnityEditor.VersionControl.Task;
    static Resolve(assets: UnityEditor.VersionControl.AssetList, resolveMethod: UnityEditor.VersionControl.ResolveMethod): UnityEditor.VersionControl.Task;
    static ResolveIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static Revert(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.RevertMode): UnityEditor.VersionControl.Task;
    static Revert(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.RevertMode): UnityEditor.VersionControl.Task;
    static RevertIsValid(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.RevertMode): boolean;
    static RevertIsValid(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.RevertMode): boolean;
    static Status(asset: string): UnityEditor.VersionControl.Task;
    static Status(asset: string, recursively: boolean): UnityEditor.VersionControl.Task;
    static Status(assets: string[]): UnityEditor.VersionControl.Task;
    static Status(assets: string[], recursively: boolean): UnityEditor.VersionControl.Task;
    static Status(asset: UnityEditor.VersionControl.Asset): UnityEditor.VersionControl.Task;
    static Status(asset: UnityEditor.VersionControl.Asset, recursively: boolean): UnityEditor.VersionControl.Task;
    static Status(assets: UnityEditor.VersionControl.AssetList): UnityEditor.VersionControl.Task;
    static Status(assets: UnityEditor.VersionControl.AssetList, recursively: boolean): UnityEditor.VersionControl.Task;
    static Submit(changeset: UnityEditor.VersionControl.ChangeSet, list: UnityEditor.VersionControl.AssetList, description: string, saveOnly: boolean): UnityEditor.VersionControl.Task;
    static SubmitIsValid(changeset: UnityEditor.VersionControl.ChangeSet, assets: UnityEditor.VersionControl.AssetList): boolean;
    static UnlockIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static UnlockIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static UpdateSettings(): UnityEditor.VersionControl.Task;
    static readonly activeTask: UnityEditor.VersionControl.Task;
    static readonly enabled: boolean;
    static readonly hasChangelistSupport: boolean;
    static readonly hasCheckoutSupport: boolean;
    static readonly isActive: boolean;
    static readonly isVersioningFolders: boolean;
    static readonly offlineReason: string;
    static readonly onlineState: UnityEditor.VersionControl.OnlineState;
    static readonly requiresNetwork: boolean;
  }
}
declare namespace UnityEditor.VersionControl {
  class CompletionAction extends System.Enum {
    protected constructor();
    static OnAddedChangeWindow: UnityEditor.VersionControl.CompletionAction;
    static OnChangeContentsPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnChangeSetsPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnCheckoutCompleted: UnityEditor.VersionControl.CompletionAction;
    static OnGotLatestPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnIncomingPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnSubmittedChangeWindow: UnityEditor.VersionControl.CompletionAction;
    static UpdatePendingWindow: UnityEditor.VersionControl.CompletionAction;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class SubmitResult extends System.Enum {
    protected constructor();
    static ConflictingFiles: UnityEditor.VersionControl.SubmitResult;
    static Error: UnityEditor.VersionControl.SubmitResult;
    static OK: UnityEditor.VersionControl.SubmitResult;
    static UnaddedFiles: UnityEditor.VersionControl.SubmitResult;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class Task extends System.Object {
    protected constructor();
    Dispose(): void;
    SetCompletionAction(action: UnityEditor.VersionControl.CompletionAction): void;
    Wait(): void;
    readonly assetList: UnityEditor.VersionControl.AssetList;
    readonly changeSets: UnityEditor.VersionControl.ChangeSets;
    readonly description: string;
    readonly messages: UnityEditor.VersionControl.Message[];
    readonly progressMessage: string;
    readonly progressPct: number;
    readonly resultCode: number;
    readonly secondsSpent: number;
    readonly success: boolean;
    readonly text: string;
    userIdentifier: number;
  }
}
declare namespace UnityEditor {
  class VertexChannelCompressionFlags extends System.Enum {
    protected constructor();
    static kColor: UnityEditor.VertexChannelCompressionFlags;
    static kNormal: UnityEditor.VertexChannelCompressionFlags;
    static kPosition: UnityEditor.VertexChannelCompressionFlags;
    static kTangent: UnityEditor.VertexChannelCompressionFlags;
    static kUV0: UnityEditor.VertexChannelCompressionFlags;
    static kUV1: UnityEditor.VertexChannelCompressionFlags;
    static kUV2: UnityEditor.VertexChannelCompressionFlags;
    static kUV3: UnityEditor.VertexChannelCompressionFlags;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class VisualStudioUtil extends System.Object {
    protected constructor();
    static CanVS2017BuildCppCode(): boolean;
    static FindVisualStudioDevEnvPaths(visualStudioVersion: number, requiredWorkload: string): string[];
  }
}
declare namespace UnityEditor {
  class WebView extends UnityEngine.ScriptableObject {
    constructor();
    AllowRightClickMenu(allowRightClickMenu: boolean): void;
    Back(): void;
    DefineScriptObject(path: string, obj: UnityEngine.ScriptableObject): boolean;
    ExecuteJavascript(scriptCode: string): void;
    Forward(): void;
    HasApplicationFocus(): boolean;
    Hide(): void;
    InitWebView(host: UnityEditor.GUIView, x: number, y: number, width: number, height: number, showResizeHandle: boolean): void;
    LoadFile(path: string): void;
    LoadURL(url: string): void;
    OnDestroy(): void;
    Reload(): void;
    SendOnEvent(jsonStr: string): void;
    SetApplicationFocus(applicationFocus: boolean): void;
    SetDelegateObject(value: UnityEngine.ScriptableObject): void;
    SetFocus(value: boolean): void;
    SetHostView(view: UnityEditor.GUIView): void;
    SetSizeAndPosition(x: number, y: number, width: number, height: number): void;
    Show(): void;
    ShowDevTools(): void;
    ToggleMaximize(): void;
  }
}
declare namespace UnityEditor {
  class WebViewV8CallbackCSharp extends System.Object {
    constructor();
    Callback(result: string): void;
    OnDestroy(): void;
  }
}
declare namespace UnityEditor.U2D {
  class SpriteAtlasUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.U2D {
  class SpriteAtlasTextureSettings extends System.Object {
    constructor();
    anisoLevel: number;
    colorSpace: any;
    compressionQuality: number;
    crunchedCompression: boolean;
    filterMode: any;
    generateMipMaps: boolean;
    maxTextureSize: number;
    readable: boolean;
    textureCompression: UnityEditor.TextureImporterCompression;
  }
}
declare namespace UnityEditor.U2D {
  class SpriteAtlasPackingParameters extends System.Object {
    constructor();
    allowAlphaSplitting: boolean;
    blockOffset: number;
    enableRotation: boolean;
    enableTightPacking: boolean;
    padding: number;
  }
}
declare namespace UnityEditor.U2D {
  class SpriteAtlasExtensions extends System.Object {
    protected constructor();
    static Add(spriteAtlas: any, objects: UnityEngine.Object[]): void;
    static CopyMasterAtlasSettings(spriteAtlas: any): void;
    static CopyPackingParametersTo(spriteAtlas: any, dest: UnityEditor.U2D.SpriteAtlasPackingParameters): void;
    static CopyPlatformSettingsIfAvailable(spriteAtlas: any, buildTarget: string, dest: UnityEditor.TextureImporterPlatformSettings): boolean;
    static CopyTextureSettingsTo(spriteAtlas: any, dest: UnityEditor.U2D.SpriteAtlasTextureSettings): void;
    static Remove(spriteAtlas: any, objects: UnityEngine.Object[]): void;
    static SetIncludeInBuild(spriteAtlas: any, value: boolean): void;
    static SetIsVariant(spriteAtlas: any, value: boolean): void;
    static SetMasterAtlas(spriteAtlas: any, value: any): void;
    static SetPackingParameters(spriteAtlas: any, src: UnityEditor.U2D.SpriteAtlasPackingParameters): void;
    static SetPlatformSettings(spriteAtlas: any, src: UnityEditor.TextureImporterPlatformSettings): void;
    static SetTextureSettings(spriteAtlas: any, src: UnityEditor.U2D.SpriteAtlasTextureSettings): void;
    static SetVariantMultiplier(spriteAtlas: any, value: number): void;
  }
}
declare namespace UnityEditorInternal {
  class RenderDoc extends System.Object {
    constructor();
    static IsInstalled(): boolean;
    static IsLoaded(): boolean;
    static IsSupported(): boolean;
    static Load(): void;
  }
}
declare namespace UnityEditor {
  class RemoveAssetOptions extends System.Enum {
    protected constructor();
    static DeleteAssets: UnityEditor.RemoveAssetOptions;
    static MoveAssetToTrash: UnityEditor.RemoveAssetOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ImportAssetOptions extends System.Enum {
    protected constructor();
    static Default: UnityEditor.ImportAssetOptions;
    static DontDownloadFromCacheServer: UnityEditor.ImportAssetOptions;
    static ForceSynchronousImport: UnityEditor.ImportAssetOptions;
    static ForceUncompressedImport: UnityEditor.ImportAssetOptions;
    static ForceUpdate: UnityEditor.ImportAssetOptions;
    static ImportRecursive: UnityEditor.ImportAssetOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class StatusQueryOptions extends System.Enum {
    protected constructor();
    static ForceUpdate: UnityEditor.StatusQueryOptions;
    static UseCachedIfPossible: UnityEditor.StatusQueryOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssetDatabase extends System.Object {
    constructor();
    static AddObjectToAsset(objectToAdd: UnityEngine.Object, path: string): void;
    static AddObjectToAsset(objectToAdd: UnityEngine.Object, assetObject: UnityEngine.Object): void;
    static AssetPathToGUID(path: string): string;
    static ClearLabels(obj: UnityEngine.Object): void;
    static Contains(instanceID: number): boolean;
    static Contains(obj: UnityEngine.Object): boolean;
    static CopyAsset(path: string, newPath: string): boolean;
    static CreateAsset(asset: UnityEngine.Object, path: string): void;
    static CreateFolder(parentFolder: string, newFolderName: string): string;
    static DeleteAsset(path: string): boolean;
    static ExportPackage(assetPathName: string, fileName: string): void;
    static ExportPackage(assetPathName: string, fileName: string, flags: UnityEditor.ExportPackageOptions): void;
    static ExportPackage(assetPathNames: string[], fileName: string): void;
    static ExportPackage(assetPathNames: string[], fileName: string, flags: UnityEditor.ExportPackageOptions): void;
    static ExtractAsset(asset: UnityEngine.Object, newPath: string): string;
    static FindAssets(filter: string): string[];
    static FindAssets(filter: string, searchInFolders: string[]): string[];
    static GenerateUniqueAssetPath(path: string): string;
    static GetAllAssetBundleNames(): string[];
    static GetAllAssetPaths(): string[];
    static GetAssetBundleDependencies(assetBundleName: string, recursive: boolean): string[];
    GetAssetBundleNames(): string[];
    static GetAssetDependencyHash(path: string): any;
    static GetAssetOrScenePath(assetObject: UnityEngine.Object): string;
    static GetAssetPath(instanceID: number): string;
    static GetAssetPath(assetObject: UnityEngine.Object): string;
    static GetAssetPathFromTextMetaFilePath(path: string): string;
    static GetAssetPathsFromAssetBundle(assetBundleName: string): string[];
    static GetAssetPathsFromAssetBundleAndAssetName(assetBundleName: string, assetName: string): string[];
    static GetBuiltinExtraResource(type: any, path: string): UnityEngine.Object;
    static GetCachedIcon(path: string): any;
    static GetDependencies(pathName: string): string[];
    static GetDependencies(pathName: string, recursive: boolean): string[];
    static GetDependencies(pathNames: string[]): string[];
    static GetDependencies(pathNames: string[], recursive: boolean): string[];
    static GetImplicitAssetBundleName(assetPath: string): string;
    static GetImplicitAssetBundleVariantName(assetPath: string): string;
    static GetLabels(obj: UnityEngine.Object): string[];
    static GetMainAssetTypeAtPath(assetPath: string): any;
    static GetSubFolders(path: string): string[];
    static GetTextMetaDataPathFromAssetPath(path: string): string;
    static GetTextMetaFilePathFromAssetPath(path: string): string;
    static GetUnusedAssetBundleNames(): string[];
    static GUIDToAssetPath(guid: string): string;
    static ImportAsset(path: string): void;
    static ImportAsset(path: string, options: UnityEditor.ImportAssetOptions): void;
    static ImportPackage(packagePath: string, interactive: boolean): void;
    static IsForeignAsset(instanceID: number): boolean;
    static IsForeignAsset(obj: UnityEngine.Object): boolean;
    static IsMainAsset(instanceID: number): boolean;
    static IsMainAsset(obj: UnityEngine.Object): boolean;
    static IsMainAssetAtPathLoaded(assetPath: string): boolean;
    static IsMetaFileOpenForEdit(assetObject: UnityEngine.Object): boolean;
    static IsMetaFileOpenForEdit(assetObject: UnityEngine.Object, message: any): boolean;
    static IsMetaFileOpenForEdit(assetObject: UnityEngine.Object, message: any, statusOptions: UnityEditor.StatusQueryOptions): boolean;
    static IsMetaFileOpenForEdit(assetObject: UnityEngine.Object, statusOptions: UnityEditor.StatusQueryOptions): boolean;
    static IsNativeAsset(instanceID: number): boolean;
    static IsNativeAsset(obj: UnityEngine.Object): boolean;
    static IsOpenForEdit(assetOrMetaFilePath: string): boolean;
    static IsOpenForEdit(assetOrMetaFilePath: string, message: any): boolean;
    static IsOpenForEdit(assetOrMetaFilePath: string, message: any, statusOptions: UnityEditor.StatusQueryOptions): boolean;
    static IsOpenForEdit(assetOrMetaFilePath: string, StatusQueryOptions: UnityEditor.StatusQueryOptions): boolean;
    static IsOpenForEdit(assetObject: UnityEngine.Object): boolean;
    static IsOpenForEdit(assetObject: UnityEngine.Object, message: any): boolean;
    static IsOpenForEdit(assetObject: UnityEngine.Object, message: any, statusOptions: UnityEditor.StatusQueryOptions): boolean;
    static IsOpenForEdit(assetObject: UnityEngine.Object, StatusQueryOptions: UnityEditor.StatusQueryOptions): boolean;
    static IsPackagedAsset(instanceID: number): boolean;
    static IsPackagedAsset(obj: UnityEngine.Object): boolean;
    static IsSubAsset(instanceID: number): boolean;
    static IsSubAsset(obj: UnityEngine.Object): boolean;
    static IsValidFolder(path: string): boolean;
    static LoadAllAssetRepresentationsAtPath(assetPath: string): UnityEngine.Object[];
    static LoadAllAssetsAtPath(assetPath: string): UnityEngine.Object[];
    static LoadAssetAtPath(assetPath: string, type: any): UnityEngine.Object;
    static LoadMainAssetAtPath(assetPath: string): UnityEngine.Object;
    static MoveAsset(oldPath: string, newPath: string): string;
    static MoveAssetToTrash(path: string): boolean;
    static OpenAsset(instanceID: number): boolean;
    static OpenAsset(instanceID: number, lineNumber: number): boolean;
    static OpenAsset(target: UnityEngine.Object): boolean;
    static OpenAsset(target: UnityEngine.Object, lineNumber: number): boolean;
    static OpenAsset(objects: UnityEngine.Object[]): boolean;
    static Refresh(): void;
    static Refresh(options: UnityEditor.ImportAssetOptions): void;
    static RefreshDelayed(): void;
    static RefreshDelayed(options: UnityEditor.ImportAssetOptions): void;
    static RemoveAssetBundleName(assetBundleName: string, forceRemove: boolean): boolean;
    static RemoveUnusedAssetBundleNames(): void;
    static RenameAsset(pathName: string, newName: string): string;
    static SaveAssets(): void;
    static SetLabels(obj: UnityEngine.Object, labels: string[]): void;
    static SetMainObject(mainObject: UnityEngine.Object, assetPath: string): void;
    static StartAssetEditing(): void;
    static StopAssetEditing(): void;
    static ValidateMoveAsset(oldPath: string, newPath: string): string;
    static WriteImportSettingsIfDirty(path: string): boolean;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerViewType extends System.Enum {
    protected constructor();
    static Hierarchy: UnityEditorInternal.ProfilerViewType;
    static RawHierarchy: UnityEditorInternal.ProfilerViewType;
    static Timeline: UnityEditorInternal.ProfilerViewType;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerMemoryView extends System.Enum {
    protected constructor();
    static Detailed: UnityEditorInternal.ProfilerMemoryView;
    static Simple: UnityEditorInternal.ProfilerMemoryView;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerAudioView extends System.Enum {
    protected constructor();
    static Channels: UnityEditorInternal.ProfilerAudioView;
    static ChannelsAndGroups: UnityEditorInternal.ProfilerAudioView;
    static Clips: UnityEditorInternal.ProfilerAudioView;
    static DSPGraph: UnityEditorInternal.ProfilerAudioView;
    static Groups: UnityEditorInternal.ProfilerAudioView;
    static Stats: UnityEditorInternal.ProfilerAudioView;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerColumn extends System.Enum {
    protected constructor();
    static Calls: UnityEditorInternal.ProfilerColumn;
    static DontSort: UnityEditorInternal.ProfilerColumn;
    static DrawCalls: UnityEditorInternal.ProfilerColumn;
    static FunctionName: UnityEditorInternal.ProfilerColumn;
    static GCMemory: UnityEditorInternal.ProfilerColumn;
    static ObjectName: UnityEditorInternal.ProfilerColumn;
    static SelfGPUPercent: UnityEditorInternal.ProfilerColumn;
    static SelfGPUTime: UnityEditorInternal.ProfilerColumn;
    static SelfPercent: UnityEditorInternal.ProfilerColumn;
    static SelfTime: UnityEditorInternal.ProfilerColumn;
    static TotalGPUPercent: UnityEditorInternal.ProfilerColumn;
    static TotalGPUTime: UnityEditorInternal.ProfilerColumn;
    static TotalPercent: UnityEditorInternal.ProfilerColumn;
    static TotalTime: UnityEditorInternal.ProfilerColumn;
    value__: number;
    static WarningCount: UnityEditorInternal.ProfilerColumn;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerMemoryRecordMode extends System.Enum {
    protected constructor();
    static AllAllocationsFast: UnityEditorInternal.ProfilerMemoryRecordMode;
    static AllAllocationsFull: UnityEditorInternal.ProfilerMemoryRecordMode;
    static ManagedAllocations: UnityEditorInternal.ProfilerMemoryRecordMode;
    static None: UnityEditorInternal.ProfilerMemoryRecordMode;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerArea extends System.Enum {
    protected constructor();
    static AreaCount: UnityEditorInternal.ProfilerArea;
    static Audio: UnityEditorInternal.ProfilerArea;
    static CPU: UnityEditorInternal.ProfilerArea;
    static GlobalIllumination: UnityEditorInternal.ProfilerArea;
    static GPU: UnityEditorInternal.ProfilerArea;
    static Memory: UnityEditorInternal.ProfilerArea;
    static NetworkMessages: UnityEditorInternal.ProfilerArea;
    static NetworkOperations: UnityEditorInternal.ProfilerArea;
    static Physics: UnityEditorInternal.ProfilerArea;
    static Physics2D: UnityEditorInternal.ProfilerArea;
    static Rendering: UnityEditorInternal.ProfilerArea;
    static UI: UnityEditorInternal.ProfilerArea;
    static UIDetails: UnityEditorInternal.ProfilerArea;
    value__: number;
    static Video: UnityEditorInternal.ProfilerArea;
  }
}
declare namespace UnityEditorInternal {
  class InstrumentedAssemblyTypes extends System.Enum {
    protected constructor();
    static All: UnityEditorInternal.InstrumentedAssemblyTypes;
    static None: UnityEditorInternal.InstrumentedAssemblyTypes;
    static Plugins: UnityEditorInternal.InstrumentedAssemblyTypes;
    static Script: UnityEditorInternal.InstrumentedAssemblyTypes;
    static System: UnityEditorInternal.InstrumentedAssemblyTypes;
    static Unity: UnityEditorInternal.InstrumentedAssemblyTypes;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class MemoryInfoGCReason extends System.Enum {
    protected constructor();
    static AssetMarkedDirtyInEditor: UnityEditorInternal.MemoryInfoGCReason;
    static AssetReferenced: UnityEditorInternal.MemoryInfoGCReason;
    static AssetReferencedByNativeCodeOnly: UnityEditorInternal.MemoryInfoGCReason;
    static BuiltinResource: UnityEditorInternal.MemoryInfoGCReason;
    static MarkedDontSave: UnityEditorInternal.MemoryInfoGCReason;
    static NotApplicable: UnityEditorInternal.MemoryInfoGCReason;
    static SceneAssetReferenced: UnityEditorInternal.MemoryInfoGCReason;
    static SceneAssetReferencedByNativeCodeOnly: UnityEditorInternal.MemoryInfoGCReason;
    static SceneObject: UnityEditorInternal.MemoryInfoGCReason;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ObjectMemoryInfo extends System.Object {
    constructor();
    className: string;
    count: number;
    instanceId: number;
    memorySize: number;
    name: string;
    reason: number;
  }
}
declare namespace UnityEditorInternal {
  class ObjectMemoryStackInfo extends System.Object {
    constructor();
    allocated: number;
    callerSites: UnityEditorInternal.ObjectMemoryStackInfo[];
    expanded: boolean;
    name: string;
    ownedAllocated: number;
    sorted: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupInfo extends System.ValueType {
    protected constructor();
    assetInstanceId: number;
    assetNameOffset: number;
    audibility: number;
    distanceToListener: number;
    duration: number;
    flags: number;
    frequency: number;
    maxDist: number;
    minDist: number;
    objectInstanceId: number;
    objectNameOffset: number;
    parentId: number;
    playCount: number;
    time: number;
    uniqueId: number;
    volume: number;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerDSPInfo extends System.ValueType {
    protected constructor();
    cpuLoad: number;
    flags: number;
    id: number;
    level1: number;
    level2: number;
    nameOffset: number;
    numChannels: number;
    numLevels: number;
    target: number;
    targetPort: number;
    weight: number;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipInfo extends System.ValueType {
    protected constructor();
    age: number;
    assetInstanceId: number;
    assetNameOffset: number;
    disposed: number;
    internalLoadState: number;
    loadState: number;
    numChannelInstances: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerCaptureFlags extends System.Enum {
    protected constructor();
    static All: UnityEditorInternal.ProfilerCaptureFlags;
    static Channels: UnityEditorInternal.ProfilerCaptureFlags;
    static Clips: UnityEditorInternal.ProfilerCaptureFlags;
    static DSPNodes: UnityEditorInternal.ProfilerCaptureFlags;
    static None: UnityEditorInternal.ProfilerCaptureFlags;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class BatchBreakingReason extends System.Enum {
    protected constructor();
    static CanvasInjectionIndex: UnityEditorInternal.BatchBreakingReason;
    static DifferentA8TextureUsage: UnityEditorInternal.BatchBreakingReason;
    static DifferentClipRect: UnityEditorInternal.BatchBreakingReason;
    static DifferentMaterialInstance: UnityEditorInternal.BatchBreakingReason;
    static DifferentRectClipping: UnityEditorInternal.BatchBreakingReason;
    static DifferentTexture: UnityEditorInternal.BatchBreakingReason;
    static NoBreaking: UnityEditorInternal.BatchBreakingReason;
    static NotCoplanarWithCanvas: UnityEditorInternal.BatchBreakingReason;
    static Unknown: UnityEditorInternal.BatchBreakingReason;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class UISystemProfilerInfo extends System.ValueType {
    protected constructor();
    batchBreakingReason: UnityEditorInternal.BatchBreakingReason;
    batchCount: number;
    instanceIDsCount: number;
    instanceIDsIndex: number;
    isBatch: boolean;
    objectInstanceId: number;
    objectNameOffset: number;
    parentId: number;
    renderDataCount: number;
    renderDataIndex: number;
    totalBatchCount: number;
    totalVertexCount: number;
    vertexCount: number;
  }
}
declare namespace UnityEditorInternal {
  class EventMarker extends System.ValueType {
    protected constructor();
    frame: number;
    nameOffset: number;
    objectInstanceId: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerDriver extends System.Object {
    constructor();
    static BeginFrame(): void;
    static BeginInstrumentFunction(fullName: string): void;
    static ClearAllFrames(): void;
    static DirectIPConnect(IP: string): void;
    static DirectURLConnect(url: string): void;
    static EndFrame(): void;
    static EndInstrumentFunction(fullName: string): void;
    static GetAllStatisticsProperties(): string[];
    static GetAvailableProfilers(): number[];
    static GetConnectionIdentifier(guid: number): string;
    static GetFormattedStatisticsValue(frame: number, identifier: number): string;
    static GetGraphStatisticsPropertiesForArea(area: UnityEditorInternal.ProfilerArea): string[];
    static GetNextFrameIndex(frame: number): number;
    static GetOverviewText(profilerArea: UnityEditorInternal.ProfilerArea, frame: number): string;
    static GetPreviousFrameIndex(frame: number): number;
    static GetStatisticsIdentifier(propertyName: string): number;
    static GetStatisticsValues(identifier: number, firstFrame: number, scale: number, buffer: number[], maxValue: any): void;
    static GetUISystemEventMarkersBatch(firstFrame: number, frameCount: number, buffer: UnityEditorInternal.EventMarker[], names: string[]): void;
    static GetUISystemEventMarkersCount(firstFrame: number, frameCount: number): number;
    static IsIdentifierConnectable(guid: number): boolean;
    static LoadProfile(filename: string, keepExistingData: boolean): boolean;
    static QueryFunctionCallees(fullName: string): void;
    static QueryInstrumentableFunctions(): void;
    static RequestMemorySnapshot(): void;
    static RequestObjectMemoryInfo(gatherObjectReferences: boolean): void;
    static ResetHistory(): void;
    static SaveProfile(filename: string): void;
    static SetAudioCaptureFlags(flags: number): void;
    static SetAutoInstrumentedAssemblies(value: UnityEditorInternal.InstrumentedAssemblyTypes): void;
    static connectedProfiler: number;
    static deepProfiling: boolean;
    static readonly directConnectionUrl: string;
    static readonly firstFrameIndex: number;
    static readonly isGPUProfilerBuggyOnDriver: boolean;
    static readonly isGPUProfilerSupported: boolean;
    static readonly isGPUProfilerSupportedByOS: boolean;
    static readonly lastFrameIndex: number;
    static readonly maxHistoryLength: number;
    static memoryRecordMode: UnityEditorInternal.ProfilerMemoryRecordMode;
    static readonly miniMemoryOverview: string;
    static readonly objectCount: number;
    static profileEditor: boolean;
    static profileGPU: boolean;
    static selectedPropertyPath: string;
    static readonly usedHeapSize: number;
    static directConnectionPort: string;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerProperty extends System.Object {
    constructor();
    Cleanup(): void;
    Dispose(): void;
    GetAudioProfilerClipInfo(): UnityEditorInternal.AudioProfilerClipInfo[];
    GetAudioProfilerDSPInfo(): UnityEditorInternal.AudioProfilerDSPInfo[];
    GetAudioProfilerGroupInfo(): UnityEditorInternal.AudioProfilerGroupInfo[];
    GetAudioProfilerNameByOffset(offset: number): string;
    GetColumn(column: UnityEditorInternal.ProfilerColumn): string;
    GetColumnAsSingle(column: UnityEditorInternal.ProfilerColumn): number;
    GetTooltip(column: UnityEditorInternal.ProfilerColumn): string;
    GetUISystemBatchInstanceIDs(): number[];
    GetUISystemEventMarkerNameByOffset(offset: number): string;
    GetUISystemEventMarkers(): UnityEditorInternal.EventMarker[];
    GetUISystemProfilerInfo(): UnityEditorInternal.UISystemProfilerInfo[];
    GetUISystemProfilerNameByOffset(offset: number): string;
    InitializeDetailProperty(source: UnityEditorInternal.ProfilerProperty): void;
    Next(enterChildren: boolean): boolean;
    static ReleaseUISystemProfilerRender(t: any): void;
    ResetToRoot(): void;
    SetRoot(frame: number, profilerSortColumn: UnityEditorInternal.ProfilerColumn, viewType: UnityEditorInternal.ProfilerViewType): void;
    static UISystemProfilerRender(renderDataIndex: number, renderDataCount: number, renderOverdraw: boolean): any;
    readonly depth: number;
    readonly frameDataReady: boolean;
    readonly frameFPS: string;
    readonly frameGpuTime: string;
    readonly frameTime: string;
    readonly HasChildren: boolean;
    readonly instanceIDs: number[];
    onlyShowGPUSamples: boolean;
    readonly propertyName: string;
    readonly propertyPath: string;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerFrameDataIterator extends System.Object {
    constructor();
    Dispose(): void;
    GetFrameStartS(frame: number): number;
    GetGroupCount(frame: number): number;
    GetGroupName(): string;
    GetThreadCount(frame: number): number;
    GetThreadName(): string;
    Next(enterChildren: boolean): boolean;
    SetRoot(frame: number, threadIdx: number): void;
    readonly depth: number;
    readonly durationMS: number;
    readonly extraTooltipInfo: string;
    readonly frameTimeMS: number;
    readonly group: number;
    readonly id: number;
    readonly instanceId: number;
    readonly name: string;
    readonly path: string;
    readonly sampleId: number;
    readonly startTimeMS: number;
  }
}
declare namespace UnityEditorInternal {
  class NativeProfilerTimeline_InitializeArgs extends System.ValueType {
    protected constructor();
    Reset(): void;
    allocationSampleColor: any;
    ghostAlpha: number;
    guiStyle: any;
    internalSampleColor: any;
    lineHeight: number;
    nonSelectedAlpha: number;
    profilerColors: any[];
    textFadeOutWidth: number;
    textFadeStartWidth: number;
  }
}
declare namespace UnityEditorInternal {
  class NativeProfilerTimeline_DrawArgs extends System.ValueType {
    protected constructor();
    Reset(): void;
    frameIndex: number;
    mousedOverEntryIndex: number;
    selectedEntryIndex: number;
    shownAreaRect: any;
    threadIndex: number;
    threadRect: any;
    timeOffset: number;
  }
}
declare namespace UnityEditorInternal {
  class NativeProfilerTimeline_GetEntryAtPositionArgs extends System.ValueType {
    protected constructor();
    Reset(): void;
    frameIndex: number;
    out_EntryIndex: number;
    out_EntryName: string;
    out_EntryYMaxPos: number;
    position: any;
    shownAreaRect: any;
    threadIndex: number;
    threadRect: any;
    timeOffset: number;
  }
}
declare namespace UnityEditorInternal {
  class NativeProfilerTimeline_GetEntryInstanceInfoArgs extends System.ValueType {
    protected constructor();
    Reset(): void;
    entryIndex: number;
    frameIndex: number;
    out_CallstackInfo: string;
    out_Id: number;
    out_MetaData: string;
    out_Path: string;
    threadIndex: number;
  }
}
declare namespace UnityEditorInternal {
  class NativeProfilerTimeline_GetEntryTimingInfoArgs extends System.ValueType {
    protected constructor();
    Reset(): void;
    calculateFrameData: boolean;
    entryIndex: number;
    frameIndex: number;
    out_Duration: number;
    out_InstanceCountForFrame: number;
    out_LocalStartTime: number;
    out_TotalDurationForFrame: number;
    threadIndex: number;
  }
}
declare namespace UnityEditorInternal {
  class NativeProfilerTimeline extends System.Object {
    constructor();
    static Draw(args: any): void;
    static GetEntryAtPosition(args: any): boolean;
    static GetEntryInstanceInfo(args: any): boolean;
    static GetEntryTimingInfo(args: any): boolean;
    static Initialize(args: any): void;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabInfo extends System.ValueType {
    protected constructor();
    readonly conflict: boolean;
    readonly dirty: boolean;
    readonly inProgress: boolean;
    readonly maintenance: boolean;
    readonly publish: boolean;
    readonly ready: boolean;
    readonly refresh: boolean;
    readonly seat: boolean;
    readonly tip: string;
    readonly update: boolean;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabSettingType extends System.Enum {
    protected constructor();
    static InProgressEnabled: UnityEditor.Collaboration.CollabSettingType;
    static InProgressGlobalEnabled: UnityEditor.Collaboration.CollabSettingType;
    static InProgressProjectEnabled: UnityEditor.Collaboration.CollabSettingType;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabSettingStatus extends System.Enum {
    protected constructor();
    static Available: UnityEditor.Collaboration.CollabSettingStatus;
    static None: UnityEditor.Collaboration.CollabSettingStatus;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabSettingsManager extends System.Object {
    constructor();
    static IsAvailable(type: UnityEditor.Collaboration.CollabSettingType): boolean;
    static readonly inProgressEnabled: boolean;
    static statusNotifier: any;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabTempFolder extends System.Enum {
    protected constructor();
    static Base: UnityEditor.Collaboration.CollabTempFolder;
    static Download: UnityEditor.Collaboration.CollabTempFolder;
    static External: UnityEditor.Collaboration.CollabTempFolder;
    static Merge: UnityEditor.Collaboration.CollabTempFolder;
    static None: UnityEditor.Collaboration.CollabTempFolder;
    static Original: UnityEditor.Collaboration.CollabTempFolder;
    static Temp: UnityEditor.Collaboration.CollabTempFolder;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class Collab extends UnityEditor.AssetPostprocessor {
    constructor();
    AnyJobRunning(): boolean;
    AreTestsRunning(): boolean;
    CancelJob(jobId: number): void;
    CancelJob(jobId: number, forceCancel: boolean): void;
    CancelJobByType(jobType: number): void;
    CancelJobByType(jobType: number, forceCancel: boolean): void;
    CancelJobWithoutException(jobType: number): void;
    CheckConflictsResolvedExternal(): void;
    ClearAllFailures(): void;
    ClearConflictResolved(path: string): boolean;
    ClearConflictsResolved(paths: string[]): boolean;
    ClearError(errorCode: number): void;
    ClearErrors(): void;
    ClearNextOperationFailure(): void;
    ClearNextOperationFailureForFile(path: string): void;
    DeleteTempFile(path: string, folderMask: UnityEditor.Collaboration.CollabTempFolder): void;
    Disconnect(): void;
    DoInitialCommit(): void;
    FailNextOperation(operation: number, code: number): void;
    FailNextOperationForFile(path: string, operation: number, code: number): void;
    GetAssetState(guid: string): UnityEditor.Collaboration.Collab.CollabStates;
    GetChangesToPublish(): UnityEditor.Collaboration.PublishInfo;
    GetCollabConflicts(): UnityEditor.Collaboration.Change[];
    GetCollabInfo(): UnityEditor.Collaboration.CollabInfo;
    GetError(filter: number, code: any, priority: any, behaviour: any, errorMsg: any, errorShortMsg: any): boolean;
    GetGUIDForTests(): string;
    GetJobProgress(jobId: number): UnityEditor.Collaboration.ProgressInfo;
    GetJobProgressByType(jobType: number): UnityEditor.Collaboration.ProgressInfo;
    static GetProjectClientType(): string;
    GetProjectGUID(): string;
    GetProjectPath(): string;
    GetRevisions(): UnityEditor.Collaboration.Revision[];
    GetSelectedAssetState(): UnityEditor.Collaboration.Collab.CollabStates;
    GetSoftLocks(assetGuid: string): UnityEditor.Collaboration.SoftLock[];
    GoBackToRevision(revisionID: string, updateToRevision: boolean): void;
    static InitializeSoftlocksViewController(): boolean;
    IsCollabEnabledForCurrentProject(): boolean;
    IsConnected(): boolean;
    static IsDiffToolsAvailable(): boolean;
    JobRunning(a_jobID: number): boolean;
    LaunchConflictExternalMerge(path: string): void;
    NewGUIDForTests(): void;
    OnPostprocessAssetbundleNameChanged(assetPath: string, previousAssetBundleName: string, newAssetBundleName: string): void;
    static OnProgressEnabledSettingStatusChanged(type: UnityEditor.Collaboration.CollabSettingType, status: UnityEditor.Collaboration.CollabSettingStatus): void;
    static OnSettingStatusChanged(type: UnityEditor.Collaboration.CollabSettingType, status: UnityEditor.Collaboration.CollabSettingStatus): void;
    Publish(comment: string): void;
    Publish(comment: string, useSelectedAssets: boolean): void;
    Publish(comment: string, useSelectedAssets: boolean, confirmMatchesPrevious: boolean): void;
    ResyncSnapshot(): void;
    ResyncToRevision(revisionID: string): void;
    RevertFile(path: string, forceOverwrite: boolean): void;
    SaveAssets(): void;
    SendNotification(): void;
    SetCollabEnabledForCurrentProject(enabled: boolean): void;
    SetConflictResolvedMine(path: string): boolean;
    SetConflictResolvedTheirs(path: string): boolean;
    SetConflictsResolvedMine(paths: string[]): boolean;
    SetConflictsResolvedTheirs(paths: string[]): boolean;
    SetError(errorCode: number): void;
    SetSeat(value: boolean): void;
    SetTestsRunning(running: boolean): void;
    ShouldDoInitialCommit(): boolean;
    ShowConflictDifferences(path: string): void;
    ShowDifferences(path: string): void;
    ShowInProjectBrowser(filterString: string): void;
    static SwitchToDefaultMode(): void;
    TestClearSoftLockAsCollaborator(projectGuid: string, projectPath: string, machineGuid: string, softLockHash: string): void;
    static TestGetRevisions(): void;
    TestPostSoftLockAsCollaborator(projectGuid: string, projectPath: string, machineGuid: string, assetGuid: string): void;
    TimeOutNextOperation(operation: number, timeOutSec: number): void;
    TimeOutNextOperationForFile(path: string, operation: number, timeOutSec: number): void;
    Update(revisionID: string, updateToRevision: boolean): void;
    UpdateEditorSelectionCache(): void;
    ValidateSelectiveCommit(): boolean;
    readonly collabInfo: UnityEditor.Collaboration.CollabInfo;
    static readonly instance: UnityEditor.Collaboration.Collab;
    projectBrowserSingleMetaSelectionPath: string;
    projectBrowserSingleSelectionPath: string;
    static clientType: string[];
    collabFilters: UnityEditor.Collaboration.CollabFilters;
    currentProjectBrowserSelection: string[];
  }
}
declare namespace UnityEditor.Collaboration.Collab {
  class CollabStates extends System.Enum {
    protected constructor();
    static kAnyLocalChanged: UnityEditor.Collaboration.Collab.CollabStates;
    static kAnyLocalEdited: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabAddedLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabAddedRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabCheckedOutLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabCheckedOutRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabConflicted: UnityEditor.Collaboration.Collab.CollabStates;
    static KCollabContentChanged: UnityEditor.Collaboration.Collab.CollabStates;
    static KCollabContentConflicted: UnityEditor.Collaboration.Collab.CollabStates;
    static KCollabContentDeleted: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabDeletedLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabDeletedRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabFolderMetaFile: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabIgnored: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabInvalidState: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMerged: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMetaFile: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMovedLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMovedRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabNone: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabOutOfSync: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabPendingMerge: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabReadOnly: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabSynced: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabUpdating: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabUseMine: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabUseTheir: UnityEditor.Collaboration.Collab.CollabStates;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration.Collab {
  class CollabStateID extends System.Enum {
    protected constructor();
    static Initialized: UnityEditor.Collaboration.Collab.CollabStateID;
    static None: UnityEditor.Collaboration.Collab.CollabStateID;
    static Uninitialized: UnityEditor.Collaboration.Collab.CollabStateID;
    value__: number;
  }
}
declare namespace UnityEditor.Connect {
  class CloudConfigUrl extends System.Enum {
    protected constructor();
    static CloudCollab: UnityEditor.Connect.CloudConfigUrl;
    static CloudCore: UnityEditor.Connect.CloudConfigUrl;
    static CloudIdentity: UnityEditor.Connect.CloudConfigUrl;
    static CloudLogin: UnityEditor.Connect.CloudConfigUrl;
    static CloudPerfEvents: UnityEditor.Connect.CloudConfigUrl;
    static CloudPortal: UnityEditor.Connect.CloudConfigUrl;
    static CloudWebauth: UnityEditor.Connect.CloudConfigUrl;
    value__: number;
  }
}
declare namespace UnityEditor.Connect {
  class COPPACompliance extends System.Enum {
    protected constructor();
    static COPPACompliant: UnityEditor.Connect.COPPACompliance;
    static COPPANotCompliant: UnityEditor.Connect.COPPACompliance;
    static COPPAUndefined: UnityEditor.Connect.COPPACompliance;
    value__: number;
  }
}
declare namespace UnityEditor.Connect {
  class ProjectInfo extends System.ValueType {
    protected constructor();
    readonly buildAllowed: boolean;
    readonly COPPA: UnityEditor.Connect.COPPACompliance;
    readonly coppaLock: boolean;
    readonly moveLock: boolean;
    readonly organizationForeignKey: string;
    readonly organizationId: string;
    readonly organizationName: string;
    readonly projectBound: boolean;
    readonly projectGUID: string;
    readonly projectName: string;
    readonly valid: boolean;
  }
}
declare namespace UnityEditor.Connect {
  class UserInfo extends System.ValueType {
    protected constructor();
    readonly accessToken: string;
    readonly accessTokenValiditySeconds: number;
    readonly displayName: string;
    readonly organizationForeignKeys: string;
    readonly primaryOrg: string;
    readonly userId: string;
    readonly userName: string;
    readonly valid: boolean;
    readonly whitelisted: boolean;
  }
}
declare namespace UnityEditor.Connect {
  class ConnectInfo extends System.ValueType {
    protected constructor();
    readonly error: boolean;
    readonly initialized: boolean;
    readonly lastErrorMsg: string;
    readonly loggedIn: boolean;
    readonly maintenance: boolean;
    readonly online: boolean;
    readonly ready: boolean;
    readonly showLoginWindow: boolean;
    readonly workOffline: boolean;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnect extends System.Object {
    protected constructor();
    BindProject(projectGUID: string, projectName: string, organizationId: string): void;
    ClearCache(): void;
    ClearError(errorCode: number): void;
    ClearErrors(): void;
    ComputerDidWakeUp(): void;
    ComputerGoesToSleep(): void;
    DisplayDialog(title: string, message: string, okBtn: string, cancelBtn: string): boolean;
    GetAccessToken(): string;
    GetAPIVersion(): string;
    GetConfigurationURL(config: UnityEditor.Connect.CloudConfigUrl): string;
    GetConfigurationUrlByIndex(index: number): string;
    GetConnectInfo(): UnityEditor.Connect.ConnectInfo;
    GetCoreConfigurationUrl(): string;
    GetEnvironment(): string;
    GetOrganizationForeignKey(): string;
    GetOrganizationId(): string;
    GetOrganizationName(): string;
    GetProjectGUID(): string;
    GetProjectInfo(): UnityEditor.Connect.ProjectInfo;
    GetProjectName(): string;
    GetUserId(): string;
    GetUserInfo(): UnityEditor.Connect.UserInfo;
    GetUserName(): string;
    GoToHub(page: string): void;
    Logout(): void;
    OpenAuthorizedURLInWebBrowser(url: string): void;
    RefreshProject(): void;
    SetCOPPACompliance(compliance: number): boolean;
    SetCOPPACompliance(compliance: UnityEditor.Connect.COPPACompliance): boolean;
    SetError(errorCode: number): void;
    ShowLogin(): void;
    static TestComputerDidWakeUp(): void;
    static TestComputerGoesToSleep(): void;
    UnbindProject(): void;
    UnhandledError(request: string, responseCode: number, response: string): void;
    WorkOffline(rememberDecision: boolean): void;
    readonly canBuildWithUPID: boolean;
    readonly configuration: string;
    readonly connectInfo: UnityEditor.Connect.ConnectInfo;
    static readonly instance: UnityEditor.Connect.UnityConnect;
    readonly lastErrorCode: number;
    readonly lastErrorMessage: string;
    readonly loggedIn: boolean;
    readonly online: boolean;
    static readonly preferencesEnabled: boolean;
    readonly projectInfo: UnityEditor.Connect.ProjectInfo;
    readonly projectValid: boolean;
    readonly shouldShowServicesWindow: boolean;
    static readonly skipMissingUPID: boolean;
    readonly userInfo: UnityEditor.Connect.UserInfo;
    readonly workingOffline: boolean;
  }
}
declare namespace UnityEditor.Connect.UnityConnect {
  class UnityErrorPriority extends System.Enum {
    protected constructor();
    static Critical: UnityEditor.Connect.UnityConnect.UnityErrorPriority;
    static Error: UnityEditor.Connect.UnityConnect.UnityErrorPriority;
    static Info: UnityEditor.Connect.UnityConnect.UnityErrorPriority;
    static None: UnityEditor.Connect.UnityConnect.UnityErrorPriority;
    value__: number;
    static Warning: UnityEditor.Connect.UnityConnect.UnityErrorPriority;
  }
}
declare namespace UnityEditor.Connect.UnityConnect {
  class UnityErrorBehaviour extends System.Enum {
    protected constructor();
    static Alert: UnityEditor.Connect.UnityConnect.UnityErrorBehaviour;
    static Automatic: UnityEditor.Connect.UnityConnect.UnityErrorBehaviour;
    static ConsoleOnly: UnityEditor.Connect.UnityConnect.UnityErrorBehaviour;
    static Hidden: UnityEditor.Connect.UnityConnect.UnityErrorBehaviour;
    static Reconnect: UnityEditor.Connect.UnityConnect.UnityErrorBehaviour;
    value__: number;
  }
}
declare namespace UnityEditor.Connect.UnityConnect {
  class UnityErrorFilter extends System.Enum {
    protected constructor();
    static All: UnityEditor.Connect.UnityConnect.UnityErrorFilter;
    static ByChild: UnityEditor.Connect.UnityConnect.UnityErrorFilter;
    static ByContext: UnityEditor.Connect.UnityConnect.UnityErrorFilter;
    static ByParent: UnityEditor.Connect.UnityConnect.UnityErrorFilter;
    value__: number;
  }
}
declare namespace UnityEditor.Web {
  class EditorProjectAccess extends System.Object {
    constructor();
    CloseToolbarWindow(): void;
    CloseToolbarWindowImmediately(): void;
    EnableCloud(enable: boolean): void;
    EnterPlayMode(): void;
    GetBuildTarget(): string;
    GetEditorSkinIndex(): number;
    GetEnvironment(): string;
    GetOrganizationID(): string;
    GetProjectEditorVersion(): string;
    GetProjectGUID(): string;
    GetProjectIcon(): string;
    GetProjectName(): string;
    GetProjectPath(): string;
    GetRESTServiceURI(): string;
    GetUserAccessToken(): string;
    GetUserDisplayName(): string;
    GetUserName(): string;
    GetUserPrimaryOrganizationId(): string;
    GoToHistory(): void;
    IsLoggedIn(): boolean;
    IsOnline(): boolean;
    IsPlayMode(): boolean;
    IsProjectBound(): boolean;
    OpenLink(link: string): void;
    SaveCurrentModifiedScenesIfUserWantsTo(): boolean;
    static ShowToolbarDropdown(): void;
  }
}
declare namespace UnityEditor {
  class LightmapConvergence extends System.ValueType {
    protected constructor();
    IsConverged(): boolean;
    IsValid(): boolean;
    avgDirectSamples: number;
    avgGISamples: number;
    convergedDirectTexelCount: number;
    convergedGITexelCount: number;
    cullingHash: any;
    maxDirectSamples: number;
    maxGISamples: number;
    minDirectSamples: number;
    minGISamples: number;
    occupiedTexelCount: number;
    progress: number;
    visibleConvergedDirectTexelCount: number;
    visibleConvergedGITexelCount: number;
    visibleTexelCount: number;
  }
}
declare namespace UnityEditor {
  class Lightmapping extends System.Object {
    constructor();
    static Bake(): boolean;
    static BakeAsync(): boolean;
    static BakeLightProbesOnly(): boolean;
    static BakeLightProbesOnlyAsync(): boolean;
    static BakeMultipleScenes(paths: string[]): void;
    static BakeReflectionProbe(probe: any, path: string): boolean;
    static BakeSelected(): boolean;
    static BakeSelectedAsync(): boolean;
    static Cancel(): void;
    static Clear(): void;
    static ClearDiskCache(): void;
    static ClearLightingDataAsset(): void;
    static ForceStop(): void;
    static GetTerrainGIChunks(terrain: any, numChunksX: any, numChunksY: any): void;
    static Tetrahedralize(positions: any[], outIndices: any, outPositions: any): void;
    static bakedGI: boolean;
    static bounceBoost: number;
    static readonly buildProgress: number;
    static giWorkflowMode: UnityEditor.Lightmapping.GIWorkflowMode;
    static indirectOutputScale: number;
    static readonly isRunning: boolean;
    static lightingDataAsset: UnityEditor.LightingDataAsset;
    static lightmapSnapshot: UnityEditor.LightmapSnapshot;
    static realtimeGI: boolean;
    static completed: (() => void);
  }
}
declare namespace UnityEditor.Lightmapping {
  class ConcurrentJobsType extends System.Enum {
    protected constructor();
    static High: UnityEditor.Lightmapping.ConcurrentJobsType;
    static Low: UnityEditor.Lightmapping.ConcurrentJobsType;
    static Min: UnityEditor.Lightmapping.ConcurrentJobsType;
    value__: number;
  }
}
declare namespace UnityEditor.Lightmapping {
  class GIWorkflowMode extends System.Enum {
    protected constructor();
    static Iterative: UnityEditor.Lightmapping.GIWorkflowMode;
    static Legacy: UnityEditor.Lightmapping.GIWorkflowMode;
    static OnDemand: UnityEditor.Lightmapping.GIWorkflowMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightingDataAsset extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class LightingStats extends System.ValueType {
    protected constructor();
    bakedLightsCount: number;
    dynamicMeshesCount: number;
    lightProbeGroupsCount: number;
    mixedLightsCount: number;
    realtimeLightsCount: number;
    reflectionProbesCount: number;
    staticMeshesBakedEmissive: number;
    staticMeshesCount: number;
    staticMeshesRealtimeEmissive: number;
  }
}
declare namespace UnityEditor {
  class LightmapEditorSettings extends System.Object {
    constructor();
    static aoAmount: number;
    static aoContrast: number;
    static aoExponentDirect: number;
    static aoExponentIndirect: number;
    static aoMaxDistance: number;
    static bakeResolution: number;
    static bounceBoost: number;
    static bounceIntensity: number;
    static bounces: number;
    static enableAmbientOcclusion: boolean;
    static filterTypeAO: UnityEditor.LightmapEditorSettings.FilterType;
    static filterTypeDirect: UnityEditor.LightmapEditorSettings.FilterType;
    static filterTypeIndirect: UnityEditor.LightmapEditorSettings.FilterType;
    static finalGatherContrastThreshold: number;
    static finalGatherGradientThreshold: number;
    static finalGatherInterpolationPoints: number;
    static finalGatherRays: number;
    static giBakeBackend: UnityEditor.LightmapEditorSettings.GIBakeBackend;
    static giPathTracerFilter: UnityEditor.LightmapEditorSettings.PathTracerFilter;
    static giPathTracerSampling: UnityEditor.LightmapEditorSettings.PathTracerSampling;
    static lastUsedResolution: number;
    static lightmapper: UnityEditor.LightmapEditorSettings.Lightmapper;
    static lockAtlas: boolean;
    static maxAtlasHeight: number;
    static maxAtlasWidth: number;
    static padding: number;
    static quality: UnityEditor.LightmapBakeQuality;
    static realtimeResolution: number;
    static reflectionCubemapCompression: any;
    static resolution: number;
    static sampling: UnityEditor.LightmapEditorSettings.Sampling;
    static skyLightColor: any;
    static skyLightIntensity: number;
    static textureCompression: boolean;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class Lightmapper extends System.Enum {
    protected constructor();
    static PathTracer: UnityEditor.LightmapEditorSettings.Lightmapper;
    static Radiosity: UnityEditor.LightmapEditorSettings.Lightmapper;
    value__: number;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class Sampling extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.LightmapEditorSettings.Sampling;
    static Fixed: UnityEditor.LightmapEditorSettings.Sampling;
    value__: number;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class FilterMode extends System.Enum {
    protected constructor();
    static Advanced: UnityEditor.LightmapEditorSettings.FilterMode;
    static Auto: UnityEditor.LightmapEditorSettings.FilterMode;
    static None: UnityEditor.LightmapEditorSettings.FilterMode;
    value__: number;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class FilterType extends System.Enum {
    protected constructor();
    static ATrous: UnityEditor.LightmapEditorSettings.FilterType;
    static Gaussian: UnityEditor.LightmapEditorSettings.FilterType;
    static None: UnityEditor.LightmapEditorSettings.FilterType;
    value__: number;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class GIBakeBackend extends System.Enum {
    protected constructor();
    static PathTracer: UnityEditor.LightmapEditorSettings.GIBakeBackend;
    static Radiosity: UnityEditor.LightmapEditorSettings.GIBakeBackend;
    value__: number;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class PathTracerSampling extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.LightmapEditorSettings.PathTracerSampling;
    static Fixed: UnityEditor.LightmapEditorSettings.PathTracerSampling;
    value__: number;
  }
}
declare namespace UnityEditor.LightmapEditorSettings {
  class PathTracerFilter extends System.Enum {
    protected constructor();
    static ATrous: UnityEditor.LightmapEditorSettings.PathTracerFilter;
    static Gaussian: UnityEditor.LightmapEditorSettings.PathTracerFilter;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightProbeVisualization extends System.Object {
    constructor();
    static dynamicUpdateLightProbes: boolean;
    static lightProbeVisualizationMode: UnityEditor.LightProbeVisualization.LightProbeVisualizationMode;
    static showInterpolationWeights: boolean;
    static showOcclusions: boolean;
  }
}
declare namespace UnityEditor.LightProbeVisualization {
  class LightProbeVisualizationMode extends System.Enum {
    protected constructor();
    static AllProbesNoCells: UnityEditor.LightProbeVisualization.LightProbeVisualizationMode;
    static AllProbesWithCells: UnityEditor.LightProbeVisualization.LightProbeVisualizationMode;
    static None: UnityEditor.LightProbeVisualization.LightProbeVisualizationMode;
    static OnlyProbesUsedBySelection: UnityEditor.LightProbeVisualization.LightProbeVisualizationMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightmapVisualization extends System.Object {
    constructor();
    static enabled: boolean;
    static showResolution: boolean;
    static useLightmaps: boolean;
  }
}
declare namespace UnityEditor {
  class LightmapVisualizationUtility extends System.Object {
    constructor();
    static DrawTextureWithUVOverlay(texture: any, gameObject: any, drawableArea: any, position: any, textureType: any): void;
    static GetGITexture(textureType: any): any;
    static GetLightmapTilingOffset(lightmapType: any): any;
  }
}
declare namespace UnityEditor {
  class LightmapParameters extends UnityEngine.Object {
    constructor();
    antiAliasingSamples: number;
    AOAntiAliasingSamples: number;
    AOQuality: number;
    backFaceTolerance: number;
    bakedLightmapTag: number;
    blurRadius: number;
    clusterResolution: number;
    directLightQuality: number;
    edgeStitching: number;
    irradianceBudget: number;
    irradianceQuality: number;
    isTransparent: boolean;
    modellingTolerance: number;
    resolution: number;
    stitchEdges: boolean;
    systemTag: number;
  }
}
declare namespace UnityEditor.AI {
  class NavMeshBuilder extends System.Object {
    constructor();
    static BuildNavMesh(): void;
    static BuildNavMeshAsync(): void;
    static BuildNavMeshForMultipleScenes(paths: string[]): void;
    static Cancel(): void;
    static ClearAllNavMeshes(): void;
    static readonly isRunning: boolean;
    static readonly navMeshSettingsObject: UnityEngine.Object;
  }
}
declare namespace UnityEditor.AI {
  class NavMeshVisualizationSettings extends System.Object {
    constructor();
    static showNavigation: number;
  }
}
declare namespace UnityEditor.AI {
  class NavMeshEditorHelpers extends System.Object {
    protected constructor();
    static DrawAgentDiagram(rect: any, agentRadius: number, agentHeight: number, agentClimb: number, agentSlope: number): void;
    static DrawBuildDebug(navMeshData: any): void;
    static DrawBuildDebug(navMeshData: any, flags: any): void;
    static OpenAgentSettings(agentTypeID: number): void;
    static OpenAreaSettings(): void;
  }
}
declare namespace UnityEditor.RestService {
  class AssetRestHandler extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.RestService.AssetRestHandler {
  class AssetHandler extends UnityEditor.RestService.JSONHandler {
    constructor();
  }
}
declare namespace UnityEditor.RestService {
  class JSONHandler extends UnityEditor.RestService.Handler {
    protected constructor();
  }
}
declare namespace UnityEditor.RestService {
  class Handler extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.RestService.AssetRestHandler {
  class LibraryHandler extends UnityEditor.RestService.JSONHandler {
    constructor();
  }
}
declare namespace UnityEditor.RestService {
  class PairingRestHandler extends UnityEditor.RestService.JSONHandler {
    constructor();
  }
}
declare namespace UnityEditor.RestService {
  class PlayModeRestHandler extends UnityEditor.RestService.JSONHandler {
    constructor();
  }
}
declare namespace UnityEditor.RestService {
  class ProjectStateRestHandler extends UnityEditor.RestService.JSONHandler {
    constructor();
  }
}
declare namespace UnityEditor.RestService.ProjectStateRestHandler {
  class Island extends System.Object {
    constructor();
    MonoIsland: UnityEditor.Scripting.MonoIsland;
    Name: string;
    References: string[];
  }
}
declare namespace UnityEditor.RestService {
  class RestRequest extends System.Object {
    constructor();
    static Send(endpoint: string, payload: string, timeout: number): boolean;
  }
}
declare namespace UnityEditor.RestService {
  class ScriptEditorSettings extends System.Object {
    constructor();
    static Load(): void;
    static Save(): void;
    static Name: string;
    static OpenDocuments: string[];
    static ProcessId: number;
    static ServerURL: string;
  }
}
declare namespace UnityEditor.RestService {
  class RestServiceRegistration extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.RestService {
  class OpenDocumentsRestHandler extends UnityEditor.RestService.JSONHandler {
    constructor();
  }
}
declare namespace UnityEditor.RestService {
  class HttpStatusCode extends System.Enum {
    protected constructor();
    static Accepted: UnityEditor.RestService.HttpStatusCode;
    static BadRequest: UnityEditor.RestService.HttpStatusCode;
    static Created: UnityEditor.RestService.HttpStatusCode;
    static Forbidden: UnityEditor.RestService.HttpStatusCode;
    static InternalServerError: UnityEditor.RestService.HttpStatusCode;
    static MethodNotAllowed: UnityEditor.RestService.HttpStatusCode;
    static NoContent: UnityEditor.RestService.HttpStatusCode;
    static NotFound: UnityEditor.RestService.HttpStatusCode;
    static NotImplemented: UnityEditor.RestService.HttpStatusCode;
    static Ok: UnityEditor.RestService.HttpStatusCode;
    value__: number;
  }
}
declare namespace UnityEditor.RestService {
  class Logger extends System.Object {
    constructor();
    static Log(an_exception: System.Exception): void;
    static Log(a_message: string): void;
  }
}
declare namespace UnityEditor.RestService {
  class RestRequestException extends System.Exception {
    constructor();
    constructor(httpStatusCode: UnityEditor.RestService.HttpStatusCode, restErrorString: string);
    constructor(httpStatusCode: UnityEditor.RestService.HttpStatusCode, restErrorString: string, restErrorDescription: string);
    HttpStatusCode: UnityEditor.RestService.HttpStatusCode;
    RestErrorDescription: string;
    RestErrorString: string;
  }
}
declare namespace System {
  class Exception extends System.Object {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
    GetBaseException(): System.Exception;
    GetObjectData(info: any, context: any): void;
    GetType(): any;
    GetType(): any;
    ToString(): string;
    readonly Data: any;
    HelpLink: string;
    readonly HResult: number;
    readonly InnerException: System.Exception;
    readonly Message: string;
    Source: string;
    readonly StackTrace: string;
    readonly TargetSite: any;
  }
}
declare namespace UnityEditor.RestService {
  class Request extends System.Object {
    constructor();
    GetParam(paramName: string): string;
    readonly Depth: number;
    readonly Info: boolean;
    readonly MessageType: number;
    readonly Payload: string;
    readonly Url: string;
  }
}
declare namespace UnityEditor.RestService {
  class Response extends System.Object {
    constructor();
    AppendHeaders(headerFields: string): void;
    BeginTransport(): void;
    EnqueueBodyData(data: number[], size: number): void;
    SetContentLength(contentLength: number): void;
    SetContentType(contentType: string): void;
    SetStatusCode(statusCode: number): void;
    SimpleResponse(status: UnityEditor.RestService.HttpStatusCode, contentType: string, payload: string): void;
    Submit(): void;
    static kCalcContentLength: number;
    static kChunkedContent: number;
  }
}
declare namespace UnityEditor.RestService {
  class Router extends System.Object {
    constructor();
    static RegisterHandler(route: string, handler: UnityEditor.RestService.Handler): boolean;
    static UnregisterHandler(route: string): void;
  }
}
declare namespace UnityEditor {
  class ColliderUtil extends System.Object {
    constructor();
    static CalculateCapsuleTransform(cc: any): any;
    static GetCapsuleExtents(cc: any): any;
  }
}
declare namespace UnityEditor {
  class PhysicsVisualizationSettings extends System.Object {
    protected constructor();
    static ClearMouseHighlight(): void;
    static DeinitDebugDraw(): void;
    static GetShowBoxColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowCapsuleColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowCollisionLayer(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, layer: number): boolean;
    static GetShowCollisionLayerMask(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): number;
    static GetShowKinematicBodies(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowMeshColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, colliderType: UnityEditor.PhysicsVisualizationSettings.MeshColliderType): boolean;
    static GetShowRigidbodies(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowSleepingBodies(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowSphereColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowStaticColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowTerrainColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static GetShowTriggers(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow): boolean;
    static HasMouseHighlight(): boolean;
    static InitDebugDraw(): void;
    static PickClosestGameObject(cam: any, layers: number, position: any, ignore: any[], filter: any[], materialIndex: any): any;
    static Reset(): void;
    static SetShowBoxColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowCapsuleColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowCollisionLayer(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, layer: number, show: boolean): void;
    static SetShowCollisionLayerMask(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, mask: number): void;
    static SetShowForAllFilters(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, selected: boolean): void;
    static SetShowKinematicBodies(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowMeshColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, colliderType: UnityEditor.PhysicsVisualizationSettings.MeshColliderType, show: boolean): void;
    static SetShowRigidbodies(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowSleepingBodies(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowSphereColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowStaticColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowTerrainColliders(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static SetShowTriggers(filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow, show: boolean): void;
    static UpdateMouseHighlight(pos: any): void;
    static baseAlpha: number;
    static colorVariance: number;
    static devOptions: boolean;
    static readonly dirtyCount: number;
    static dotAlpha: number;
    static enableMouseSelect: boolean;
    static filterWorkflow: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow;
    static forceDot: boolean;
    static forceOverdraw: boolean;
    static kinematicColor: any;
    static rigidbodyColor: any;
    static showCollisionGeometry: boolean;
    static sleepingBodyColor: any;
    static staticColor: any;
    static terrainTilesMax: number;
    static triggerColor: any;
    static useSceneCam: boolean;
    static viewDistance: number;
  }
}
declare namespace UnityEditor.PhysicsVisualizationSettings {
  class FilterWorkflow extends System.Enum {
    protected constructor();
    static HideSelectedItems: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow;
    static ShowSelectedItems: UnityEditor.PhysicsVisualizationSettings.FilterWorkflow;
    value__: number;
  }
}
declare namespace UnityEditor.PhysicsVisualizationSettings {
  class MeshColliderType extends System.Enum {
    protected constructor();
    static Convex: UnityEditor.PhysicsVisualizationSettings.MeshColliderType;
    static NonConvex: UnityEditor.PhysicsVisualizationSettings.MeshColliderType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class FontTextureCase extends System.Enum {
    protected constructor();
    static ASCII: UnityEditor.FontTextureCase;
    static ASCIILowerCase: UnityEditor.FontTextureCase;
    static ASCIIUpperCase: UnityEditor.FontTextureCase;
    static CustomSet: UnityEditor.FontTextureCase;
    static Dynamic: UnityEditor.FontTextureCase;
    static Unicode: UnityEditor.FontTextureCase;
    value__: number;
  }
}
declare namespace UnityEditor {
  class FontRenderingMode extends System.Enum {
    protected constructor();
    static HintedRaster: UnityEditor.FontRenderingMode;
    static HintedSmooth: UnityEditor.FontRenderingMode;
    static OSDefault: UnityEditor.FontRenderingMode;
    static Smooth: UnityEditor.FontRenderingMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AscentCalculationMode extends System.Enum {
    protected constructor();
    static FaceAscender: UnityEditor.AscentCalculationMode;
    static FaceBoundingBox: UnityEditor.AscentCalculationMode;
    static Legacy2x: UnityEditor.AscentCalculationMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TrueTypeFontImporter extends UnityEditor.AssetImporter {
    constructor();
    GenerateEditableFont(path: string): any;
    ascentCalculationMode: UnityEditor.AscentCalculationMode;
    characterPadding: number;
    characterSpacing: number;
    customCharacters: string;
    fontNames: string[];
    fontReferences: any[];
    fontRenderingMode: UnityEditor.FontRenderingMode;
    fontSize: number;
    fontTextureCase: UnityEditor.FontTextureCase;
    readonly fontTTFName: string;
    includeFontData: boolean;
  }
}
declare namespace UnityEditor.BuildReporting {
  class BuildReportHelper extends System.Object {
    protected constructor();
    static OnAddedExecutable(report: UnityEditor.BuildReporting.BuildReport, fileIndex: number): void;
  }
}
declare namespace UnityEditor.BuildReporting {
  class BuildResult extends System.Enum {
    protected constructor();
    static Canceled: UnityEditor.BuildReporting.BuildResult;
    static Failed: UnityEditor.BuildReporting.BuildResult;
    static Succeeded: UnityEditor.BuildReporting.BuildResult;
    static Unknown: UnityEditor.BuildReporting.BuildResult;
    value__: number;
  }
}
declare namespace UnityEditor.BuildReporting {
  class BuildReport extends UnityEngine.Object {
    constructor();
    AddAppendix(obj: UnityEngine.Object): void;
    AddFile(path: string, role: string): void;
    AddFilesRecursive(rootDir: string, role: string): void;
    AddMessage(messageType: any, message: string): void;
    BeginBuildStep(stepName: string): void;
    BeginBuildStepNoTiming(stepName: string): void;
    DeleteFile(path: string): void;
    DeleteFilesRecursive(rootDir: string): void;
    GetAppendices(type: any): UnityEngine.Object[];
    static GetLatestReport(): UnityEditor.BuildReporting.BuildReport;
    RelocateFiles(originalPathPrefix: string, newPathPrefix: string): void;
    SendChanged(): void;
    SummarizeErrors(): string;
    readonly buildGUID: string;
    readonly buildOptions: UnityEditor.BuildOptions;
    readonly buildResult: UnityEditor.BuildReporting.BuildResult;
    readonly buildTarget: UnityEditor.BuildTarget;
    readonly crc: number;
    readonly outputPath: string;
    readonly succeeded: boolean;
    readonly totalErrors: number;
    readonly totalSize: number;
    readonly totalTimeMS: number;
    readonly totalWarnings: number;
  }
}
declare namespace UnityEditor {
  class EditorAnalytics extends System.Object {
    constructor();
    static SendEventServiceInfo(parameters: any): boolean;
    static SendEventShowService(parameters: any): boolean;
    static SendEventTimelineInfo(parameters: any): boolean;
  }
}
declare namespace UnityEditor {
  class UsabilityAnalytics extends System.Object {
    protected constructor();
    static Event(category: string, action: string, label: string, value: number): void;
    static Track(page: string): void;
  }
}
declare namespace UnityEditor.Analytics {
  class CoreStats extends System.Object {
    protected constructor();
    static RequiresCoreStatsInBuild(): boolean;
  }
}
declare namespace UnityEditor.Connect {
  class PackageUtils extends System.Object {
    constructor();
    GetCurrentVersion(packageName: string): string;
    GetLatestVersion(packageName: string): string;
    RetrievePackageInfo(): void;
    UpdateLatest(packageName: string): boolean;
    static readonly instance: UnityEditor.Connect.PackageUtils;
  }
}
declare namespace UnityEditor.CrashReporting {
  class CrashReporting extends System.Object {
    constructor();
    static GetUsymUploadAuthToken(): string;
    static UploadSymbolsInPath(authToken: string, symbolPath: string, includeFilter: string, excludeFilter: string, waitForExit: boolean): void;
    static readonly NativeCrashSubmissionUrl: string;
    static readonly ServiceBaseUrl: string;
    static readonly ServiceTokenUrl: string;
    static readonly SignedUrlSourceUrl: string;
  }
}
declare namespace UnityEditor.CrashReporting.CrashReporting {
  class UploadPlatformConfig extends System.Object {
    constructor();
    LogFilePath: string;
    LzmaPath: string;
    UsymtoolPath: string;
  }
}
declare namespace UnityEditor.Advertisements {
  class AdvertisementSettings extends System.Object {
    protected constructor();
    static GetGameId(platform: any): string;
    static GetPlatformGameId(platformName: string): string;
    static IsPlatformEnabled(platform: any): boolean;
    static SetGameId(platform: any, gameId: string): void;
    static SetPlatformEnabled(platform: any, value: boolean): void;
    static SetPlatformGameId(platformName: string, gameId: string): void;
    static enabled: boolean;
    static initializeOnStartup: boolean;
    static testMode: boolean;
  }
}
declare namespace UnityEditor.Analytics {
  class AnalyticsSettings extends System.Object {
    protected constructor();
    static enabled: boolean;
    static testMode: boolean;
  }
}
declare namespace UnityEditor.CrashReporting {
  class CrashReportingSettings extends System.Object {
    protected constructor();
    static captureEditorExceptions: boolean;
    static enabled: boolean;
  }
}
declare namespace UnityEditor.Purchasing {
  class PurchasingSettings extends System.Object {
    protected constructor();
    static enabled: boolean;
  }
}
declare namespace UnityEditor.Analytics {
  class PerformanceReportingSettings extends System.Object {
    protected constructor();
    static enabled: boolean;
  }
}
declare namespace UnityEditorInternal.VR {
  class SimulatedBody extends System.Object {
    protected constructor();
    height: number;
    position: any;
    rotation: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class SimulatedHead extends System.Object {
    protected constructor();
    diameter: number;
    eulerAngles: any;
  }
}
declare namespace UnityEditorInternal.VR {
  class SimulatedHand extends System.Object {
    protected constructor();
    EnsureVisible(): void;
    PerformGesture(gesture: UnityEditorInternal.VR.SimulatedGesture): void;
    activated: boolean;
    position: any;
    readonly visible: boolean;
  }
}
declare namespace UnityEditorInternal.VR {
  class HolographicEmulation extends System.Object {
    constructor();
    static LoadRoom(id: string): void;
    static Reset(): void;
    static readonly simulatedBody: UnityEditorInternal.VR.SimulatedBody;
    static readonly simulatedHead: UnityEditorInternal.VR.SimulatedHead;
    static readonly simulatedLeftHand: UnityEditorInternal.VR.SimulatedHand;
    static readonly simulatedRightHand: UnityEditorInternal.VR.SimulatedHand;
  }
}
declare namespace UnityEditorInternal.VR {
  class HolographicEmulationHelpers extends System.Object {
    protected constructor();
    static CalcExpectedCameraPosition(head: UnityEditorInternal.VR.SimulatedHead, body: UnityEditorInternal.VR.SimulatedBody): any;
    static k_DefaultBodyHeight: number;
    static k_DefaultHeadDiameter: number;
    static k_ForwardOffset: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class PlayerSettingsEditorVR extends System.Object {
    constructor(settingsEditor: UnityEditor.PlayerSettingsEditor);
  }
}
declare namespace UnityEditorInternal.VR.PlayerSettingsEditorVR {
  class Styles extends System.Object {
    protected constructor();
    static kAndroidStereoRenderingPaths: any[];
    static kDefaultStereoRenderingPaths: any[];
    static listHeader: any;
    static singlepassAndroidWarning: any;
    static singlepassAndroidWarning2: any;
    static singlePassInstancedWarning: any;
    static supportedCheckbox: any;
    static xrSettingsTitle: any;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRDeviceInfoEditor extends System.ValueType {
    protected constructor();
    deviceNameKey: string;
    deviceNameUI: string;
    externalPluginName: string;
    inListByDefault: boolean;
    supportsEditorMode: boolean;
  }
}
declare namespace UnityEditorInternal.VR {
  class VREditor extends System.Object {
    constructor();
    static GetAllVRDeviceInfo(targetGroup: UnityEditor.BuildTargetGroup): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetAllVRDeviceInfoByTarget(target: UnityEditor.BuildTarget): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetEnabledVRDeviceInfo(target: UnityEditor.BuildTarget): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetEnabledVRDeviceInfo(targetGroup: UnityEditor.BuildTargetGroup): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetVREnabled(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static GetVREnabledDevices(targetGroup: UnityEditor.BuildTargetGroup): string[];
    static GetVREnabledDevicesOnTarget(target: UnityEditor.BuildTarget): string[];
    static GetVREnabledDevicesOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup): string[];
    static GetVREnabledOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static IsVRDeviceEnabledForBuildTarget(target: UnityEditor.BuildTarget, deviceName: string): boolean;
    static SetVREnabled(targetGroup: UnityEditor.BuildTargetGroup, value: boolean): void;
    static SetVREnabledDevices(targetGroup: UnityEditor.BuildTargetGroup, devices: string[]): void;
    static SetVREnabledDevicesOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup, devices: string[]): void;
    static SetVREnabledOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup, value: boolean): void;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRModule extends System.Object {
    constructor();
    static SetupBuildSettings(target: UnityEditor.BuildTarget, osVerMajor: number): void;
    static ShouldInjectVRDependenciesForBuildTarget(target: UnityEditor.BuildTarget): boolean;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptions extends System.Object {
    protected constructor();
    Draw(rect: any): any;
    GetHeight(): number;
    Initialize(settings: UnityEditor.SerializedObject): void;
    Initialize(settings: UnityEditor.SerializedObject, propertyName: string): void;
    IsExpanded: boolean;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptionsNone extends UnityEditorInternal.VR.VRCustomOptions {
    constructor();
    Draw(rect: any): any;
    GetHeight(): number;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptionsHololens extends UnityEditorInternal.VR.VRCustomOptions {
    constructor();
    Draw(rect: any): any;
    GetHeight(): number;
    Initialize(settings: UnityEditor.SerializedObject): void;
    Initialize(settings: UnityEditor.SerializedObject, propertyName: string): void;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptionsGoogleVR extends UnityEditorInternal.VR.VRCustomOptions {
    constructor();
    Draw(rect: any): any;
    GetHeight(): number;
    Initialize(settings: UnityEditor.SerializedObject): void;
    Initialize(settings: UnityEditor.SerializedObject, propertyName: string): void;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptionsCardboard extends UnityEditorInternal.VR.VRCustomOptionsGoogleVR {
    constructor();
    Draw(rect: any): any;
    GetHeight(): number;
    Initialize(settings: UnityEditor.SerializedObject): void;
    Initialize(settings: UnityEditor.SerializedObject, propertyName: string): void;
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptionsDaydream extends UnityEditorInternal.VR.VRCustomOptionsGoogleVR {
    constructor();
    Draw(rect: any): any;
    GetHeight(): number;
    Initialize(settings: UnityEditor.SerializedObject): void;
    Initialize(settings: UnityEditor.SerializedObject, propertyName: string): void;
  }
}
declare namespace UnityEditorInternal.VR {
  class HolographicStreamerConnectionState extends System.Enum {
    protected constructor();
    static Connected: UnityEditorInternal.VR.HolographicStreamerConnectionState;
    static Connecting: UnityEditorInternal.VR.HolographicStreamerConnectionState;
    static Disconnected: UnityEditorInternal.VR.HolographicStreamerConnectionState;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class HolographicStreamerConnectionFailureReason extends System.Enum {
    protected constructor();
    static ConnectionLost: UnityEditorInternal.VR.HolographicStreamerConnectionFailureReason;
    static HandshakeFailed: UnityEditorInternal.VR.HolographicStreamerConnectionFailureReason;
    static None: UnityEditorInternal.VR.HolographicStreamerConnectionFailureReason;
    static ProtocolVersionMismatch: UnityEditorInternal.VR.HolographicStreamerConnectionFailureReason;
    static Unknown: UnityEditorInternal.VR.HolographicStreamerConnectionFailureReason;
    static Unreachable: UnityEditorInternal.VR.HolographicStreamerConnectionFailureReason;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class EmulationMode extends System.Enum {
    protected constructor();
    static None: UnityEditorInternal.VR.EmulationMode;
    static RemoteDevice: UnityEditorInternal.VR.EmulationMode;
    static Simulated: UnityEditorInternal.VR.EmulationMode;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class GestureHand extends System.Enum {
    protected constructor();
    static Left: UnityEditorInternal.VR.GestureHand;
    static Right: UnityEditorInternal.VR.GestureHand;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class SimulatedGesture extends System.Enum {
    protected constructor();
    static FingerPressed: UnityEditorInternal.VR.SimulatedGesture;
    static FingerReleased: UnityEditorInternal.VR.SimulatedGesture;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VR {
  class PerceptionRemotingPlugin extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class FileType extends System.Enum {
    protected constructor();
    static DeprecatedCachedAssetType: UnityEditor.Experimental.Build.AssetBundle.FileType;
    static MetaAssetType: UnityEditor.Experimental.Build.AssetBundle.FileType;
    static NonAssetType: UnityEditor.Experimental.Build.AssetBundle.FileType;
    static SerializedAssetType: UnityEditor.Experimental.Build.AssetBundle.FileType;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class ObjectIdentifier extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    readonly filePath: string;
    readonly fileType: UnityEditor.Experimental.Build.AssetBundle.FileType;
    readonly guid: UnityEditor.GUID;
    readonly localIdentifierInFile: number;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class CompressionType extends System.Enum {
    protected constructor();
    static Lz4: UnityEditor.Experimental.Build.AssetBundle.CompressionType;
    static Lz4HC: UnityEditor.Experimental.Build.AssetBundle.CompressionType;
    static Lzma: UnityEditor.Experimental.Build.AssetBundle.CompressionType;
    static None: UnityEditor.Experimental.Build.AssetBundle.CompressionType;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class CompressionLevel extends System.Enum {
    protected constructor();
    static Fast: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
    static Fastest: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
    static High: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
    static Maximum: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
    static None: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
    static Normal: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class BuildCompression extends System.ValueType {
    protected constructor();
    blockSize: number;
    compression: UnityEditor.Experimental.Build.AssetBundle.CompressionType;
    static DefaultLZ4: UnityEditor.Experimental.Build.AssetBundle.BuildCompression;
    static DefaultLZMA: UnityEditor.Experimental.Build.AssetBundle.BuildCompression;
    static DefaultUncompressed: UnityEditor.Experimental.Build.AssetBundle.BuildCompression;
    level: UnityEditor.Experimental.Build.AssetBundle.CompressionLevel;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class BuildSettings extends System.ValueType {
    protected constructor();
    group: UnityEditor.BuildTargetGroup;
    outputFolder: string;
    target: UnityEditor.BuildTarget;
    typeDB: UnityEditor.Experimental.Build.Player.TypeDB;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class BuildInput extends System.ValueType {
    protected constructor();
    definitions: UnityEditor.Experimental.Build.AssetBundle.BuildInput.Definition[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildInput {
  class AddressableAsset extends System.ValueType {
    protected constructor();
    address: string;
    asset: UnityEditor.GUID;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildInput {
  class Definition extends System.ValueType {
    protected constructor();
    assetBundleName: string;
    explicitAssets: UnityEditor.Experimental.Build.AssetBundle.BuildInput.AddressableAsset[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class BuildCommandSet extends System.ValueType {
    protected constructor();
    commands: UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet.Command[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet {
  class AssetLoadInfo extends System.ValueType {
    protected constructor();
    address: string;
    asset: UnityEditor.GUID;
    includedObjects: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier[];
    referencedObjects: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet {
  class SerializationInfo extends System.ValueType {
    protected constructor();
    serializationIndex: number;
    serializationObject: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet {
  class Command extends System.ValueType {
    protected constructor();
    assetBundleDependencies: string[];
    assetBundleName: string;
    assetBundleObjects: UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet.SerializationInfo[];
    explicitAssets: UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet.AssetLoadInfo[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class BuildOutput extends System.ValueType {
    protected constructor();
    results: UnityEditor.Experimental.Build.AssetBundle.BuildOutput.Result[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildOutput {
  class ResourceFile extends System.ValueType {
    protected constructor();
    fileAlias: string;
    fileName: string;
    serializedFile: boolean;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildOutput {
  class ObjectLocation extends System.ValueType {
    protected constructor();
    fileName: string;
    offset: number;
    size: number;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildOutput {
  class SerializedObject extends System.ValueType {
    protected constructor();
    header: UnityEditor.Experimental.Build.AssetBundle.BuildOutput.ObjectLocation;
    rawData: UnityEditor.Experimental.Build.AssetBundle.BuildOutput.ObjectLocation;
    serializedObject: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier;
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle.BuildOutput {
  class Result extends System.ValueType {
    protected constructor();
    assetBundleName: string;
    assetBundleObjects: UnityEditor.Experimental.Build.AssetBundle.BuildOutput.SerializedObject[];
    resourceFiles: UnityEditor.Experimental.Build.AssetBundle.BuildOutput.ResourceFile[];
  }
}
declare namespace UnityEditor.Experimental.Build.AssetBundle {
  class BuildInterface extends System.Object {
    constructor();
    static ArchiveAndCompress(resourceFiles: UnityEditor.Experimental.Build.AssetBundle.BuildOutput.ResourceFile[], outputBundlePath: string, compression: UnityEditor.Experimental.Build.AssetBundle.BuildCompression): number;
    static GenerateBuildInput(): UnityEditor.Experimental.Build.AssetBundle.BuildInput;
    static GetPlayerDependenciesForObject(objectID: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier, target: UnityEditor.BuildTarget): UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier[];
    static GetPlayerDependenciesForObjects(objectIDs: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier[], target: UnityEditor.BuildTarget): UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier[];
    static GetPlayerObjectIdentifiersInAsset(asset: UnityEditor.GUID, target: UnityEditor.BuildTarget): UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier[];
    static GetTypeForObject(objectID: UnityEditor.Experimental.Build.AssetBundle.ObjectIdentifier): any;
    static WriteResourceFiles(commands: UnityEditor.Experimental.Build.AssetBundle.BuildCommandSet, settings: UnityEditor.Experimental.Build.AssetBundle.BuildSettings): UnityEditor.Experimental.Build.AssetBundle.BuildOutput;
  }
}
declare namespace UnityEditor.Build {
  class BuildDefines extends System.Object {
    constructor();
    static GetScriptCompilationDefines(target: UnityEditor.BuildTarget, defines: string[]): string[];
  }
}
declare namespace UnityEditor.Experimental.Build.Player {
  class ScriptCompilationOptions extends System.Enum {
    protected constructor();
    static Assertions: UnityEditor.Experimental.Build.Player.ScriptCompilationOptions;
    static DevelopmentBuild: UnityEditor.Experimental.Build.Player.ScriptCompilationOptions;
    static None: UnityEditor.Experimental.Build.Player.ScriptCompilationOptions;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.Build.Player {
  class ScriptCompilationSettings extends System.ValueType {
    protected constructor();
    options: UnityEditor.Experimental.Build.Player.ScriptCompilationOptions;
    outputFolder: string;
    target: UnityEditor.BuildTarget;
    targetGroup: UnityEditor.BuildTargetGroup;
  }
}
declare namespace UnityEditor.Experimental.Build.Player {
  class ScriptCompilationResult extends System.ValueType {
    protected constructor();
    assemblies: string[];
    typeDB: UnityEditor.Experimental.Build.Player.TypeDB;
  }
}
declare namespace UnityEditor.Experimental.Build.Player {
  class PlayerBuildInterface extends System.Object {
    constructor();
    static CompilePlayerScripts(input: UnityEditor.Experimental.Build.Player.ScriptCompilationSettings): UnityEditor.Experimental.Build.Player.ScriptCompilationResult;
  }
}
declare namespace UnityEditor.Experimental.Build.Player {
  class TypeDB extends System.Object {
    protected constructor();
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetObjectData(info: any, context: any): void;
  }
}
declare namespace UnityEditor.NScreen {
  class NScreenManager {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class ScriptableSingleton<T> extends UnityEngine.ScriptableObject {
    protected constructor();
    static readonly instance: T;
  }
}
declare namespace UnityEditor.NScreen {
  class RemoteGame extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    SizeSelectionCallback(indexClicked: number, objectSelected: any): void;
    readonly forceLowResolutionAspectRatios: boolean;
    lowResolutionForAspectRatios: boolean;
    readonly showLowResolutionToggle: boolean;
    bridge: UnityEngine.NScreenBridge;
    id: number;
    shouldBuild: boolean;
    shouldExit: boolean;
  }
}
declare namespace UnityEngine {
  class NScreenBridge extends UnityEngine.Object {
    constructor();
    GetScreenTexture(): any;
    InitServer(id: number): void;
    ResetInput(): void;
    SetInput(x: number, y: number, button: number, key: number, type: number): void;
    SetResolution(x: number, y: number): void;
    Shutdown(): void;
    StartWatchdogForPid(pid: number): void;
    Update(): void;
  }
}
declare namespace UnityEditor.PackageManager {
  class StatusCode extends System.Enum {
    protected constructor();
    static Done: UnityEditor.PackageManager.StatusCode;
    static Error: UnityEditor.PackageManager.StatusCode;
    static InProgress: UnityEditor.PackageManager.StatusCode;
    static InQueue: UnityEditor.PackageManager.StatusCode;
    static NotFound: UnityEditor.PackageManager.StatusCode;
    value__: number;
  }
}
declare namespace UnityEditor.PackageManager {
  class ErrorCode extends System.Enum {
    protected constructor();
    static Forbidden: UnityEditor.PackageManager.ErrorCode;
    static InvalidParameter: UnityEditor.PackageManager.ErrorCode;
    static NotFound: UnityEditor.PackageManager.ErrorCode;
    static Success: UnityEditor.PackageManager.ErrorCode;
    static Unknown: UnityEditor.PackageManager.ErrorCode;
    value__: number;
  }
}
declare namespace UnityEditor.PackageManager {
  class OriginType extends System.Enum {
    protected constructor();
    static Path: UnityEditor.PackageManager.OriginType;
    static Registry: UnityEditor.PackageManager.OriginType;
    static Unknown: UnityEditor.PackageManager.OriginType;
    static Url: UnityEditor.PackageManager.OriginType;
    value__: number;
  }
}
declare namespace UnityEditor.PackageManager {
  class RelationType extends System.Enum {
    protected constructor();
    static Excluded: UnityEditor.PackageManager.RelationType;
    static Internalized: UnityEditor.PackageManager.RelationType;
    static ReadOnly: UnityEditor.PackageManager.RelationType;
    static Unknown: UnityEditor.PackageManager.RelationType;
    value__: number;
  }
}
declare namespace UnityEditor.PackageManager {
  class OperationStatus extends System.Object {
    protected constructor();
    readonly id: string;
    readonly packageList: UnityEditor.PackageManager.UpmPackageInfo[];
    readonly progress: number;
    readonly status: UnityEditor.PackageManager.StatusCode;
    readonly type: string;
  }
}
declare namespace UnityEditor.PackageManager {
  class Error extends System.Object {
    protected constructor();
    readonly errorCode: UnityEditor.PackageManager.ErrorCode;
    readonly message: string;
  }
}
declare namespace UnityEditor.PackageManager {
  class UpmPackageInfo extends System.Object {
    constructor(packageId: string);
    readonly originLocation: string;
    readonly originType: UnityEditor.PackageManager.OriginType;
    readonly packageId: string;
    readonly relationType: UnityEditor.PackageManager.RelationType;
    readonly resolvedPath: string;
    readonly tag: string;
    readonly version: string;
  }
}
declare namespace UnityEditor.PackageManager {
  class OutdatedPackage extends System.Object {
    protected constructor();
    readonly current: UnityEditor.PackageManager.UpmPackageInfo;
    readonly latest: UnityEditor.PackageManager.UpmPackageInfo;
  }
}
declare namespace UnityEditor.PackageManager {
  class Utilities extends System.Object {
    constructor();
    static GetFreePort(): number;
  }
}
declare namespace UnityEditor.PackageManager {
  class Client extends System.Object {
    constructor();
    static Add(operationId: any, packageId: string): UnityEditor.PackageManager.StatusCode;
    static GetAddOperationData(operationId: number): UnityEditor.PackageManager.UpmPackageInfo;
    static GetListOperationData(operationId: number): UnityEditor.PackageManager.OperationStatus;
    static GetOperationError(operationId: number): UnityEditor.PackageManager.Error;
    static GetOperationStatus(operationId: number): UnityEditor.PackageManager.StatusCode;
    static GetOutdatedOperationData(operationId: number): any;
    static GetRemoveOperationData(operationId: number): string;
    static GetSearchOperationData(operationId: number): UnityEditor.PackageManager.UpmPackageInfo[];
    static List(operationId: any): UnityEditor.PackageManager.StatusCode;
    static Outdated(operationId: any): UnityEditor.PackageManager.StatusCode;
    static Remove(operationId: any, packageId: string): UnityEditor.PackageManager.StatusCode;
    static Resolve(operationId: any): UnityEditor.PackageManager.StatusCode;
    static Search(operationId: any, packageName: string): UnityEditor.PackageManager.StatusCode;
  }
}
declare namespace UnityEditor {
  class SketchUpNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, info: UnityEditor.SketchUpNodeInfo);
    Enabled: boolean;
    Info: UnityEditor.SketchUpNodeInfo;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewItem extends System.Object {
    constructor();
    constructor(id: number);
    constructor(id: number, depth: number);
    constructor(id: number, depth: number, displayName: string);
    AddChild(child: UnityEditor.IMGUI.Controls.TreeViewItem): void;
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    children: UnityEditor.IMGUI.Controls.TreeViewItem[];
    depth: number;
    displayName: string;
    readonly hasChildren: boolean;
    icon: any;
    id: number;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
  }
}
declare namespace UnityEditor {
  class SketchUpDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, nodes: UnityEditor.SketchUpNodeInfo[]);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    FetchEnableNodes(): number[];
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewDataSource extends System.Object {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetExpandedIDs(): number[];
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRow(id: number): number;
    GetRows(): UnityEditor.IMGUI.Controls.TreeViewItem[];
    HasFakeItem(): boolean;
    InitIfNeeded(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpanded(id: number): boolean;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRevealed(id: number): boolean;
    OnExpandedStateChanged(): void;
    OnInitialize(): void;
    OnSearchChanged(): void;
    ReloadData(): void;
    RemoveFakeItem(): void;
    RevealItem(id: number): void;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedIDs(ids: number[]): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly isInitialized: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    rootIsCollapsable: boolean;
    readonly rowCount: number;
    showRootItem: boolean;
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class SketchUpTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewGUI extends System.Object {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, useHorizontalScroll: boolean);
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    BeginRowGUI(): void;
    DoRenameOverlay(): void;
    EndPingItem(): void;
    EndRename(): void;
    EndRowGUI(): void;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetRectForFraming(row: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    OnInitialize(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    readonly bottomRowMargin: number;
    extraSpaceBeforeIconAndLabel: number;
    readonly halfDropBetweenHeight: number;
    iconLeftPadding: number;
    iconOverlayGUI: ((arg1: UnityEditor.IMGUI.Controls.TreeViewItem, arg2: any) => void);
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    readonly indentWidth: number;
    labelOverlayGUI: ((arg1: UnityEditor.IMGUI.Controls.TreeViewItem, arg2: any) => void);
    readonly topRowMargin: number;
    customFoldoutYOffset: number;
    extraInsertionMarkerIndent: number;
    k_BaseIndent: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    k_IconWidth: number;
    k_IndentWidth: number;
    k_LineHeight: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
  }
}
declare namespace UnityEditor {
  class SketchUpImportDlg extends UnityEditor.EditorWindow {
    constructor();
    Init(nodes: UnityEditor.SketchUpNodeInfo[], suModelEditor: UnityEditor.SketchUpImporterModelEditor): void;
    OnTreeSelectionChanged(selection: number[]): void;
  }
}
declare namespace UnityEditor.SketchUpImportDlg {
  class Styles extends System.Object {
    constructor();
    static readonly styles: UnityEditor.SketchUpImportDlg.Styles;
    boxBackground: any;
    buttonWidth: number;
    cancelButton: any;
    headerStyle: any;
    nodesLabel: any;
    okButton: any;
    toggleStyle: any;
    windowTitle: any;
  }
}
declare namespace UnityEditor {
  class SketchUpImporterEditor extends UnityEditor.ModelImporterEditor {
    constructor();
    OnEnable(): void;
    readonly showImportedObject: boolean;
  }
}
declare namespace UnityEditor {
  class ModelImporterEditor extends UnityEditor.AssetImporterTabbedEditor {
    constructor();
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    readonly showImportedObject: boolean;
  }
}
declare namespace UnityEditor {
  class AssetImporterTabbedEditor extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    protected constructor();
    HasPreviewGUI(): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    readonly activeTab: UnityEditor.BaseAssetImporterTabUI;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters {
  class AssetImporterEditor extends UnityEditor.Editor {
    protected constructor();
    HasModified(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    readonly showImportedObject: boolean;
  }
}
declare namespace UnityEditor {
  class SketchUpImporterModelEditor extends UnityEditor.ModelImporterModelEditor {
    constructor(panelContainer: UnityEditor.Experimental.AssetImporters.AssetImporterEditor);
    OnInspectorGUI(): void;
    SetSelectedNodes(selectedNodes: number[]): void;
  }
}
declare namespace UnityEditor {
  class ModelImporterModelEditor extends UnityEditor.BaseAssetImporterTabUI {
    constructor(panelContainer: UnityEditor.Experimental.AssetImporters.AssetImporterEditor);
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class BaseAssetImporterTabUI extends System.Object {
    protected constructor();
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    referenceTargetIndex: number;
    readonly serializedObject: UnityEditor.SerializedObject;
    readonly target: UnityEngine.Object;
    readonly targets: UnityEngine.Object[];
  }
}
declare namespace UnityEditor.SketchUpImporterModelEditor {
  class EFileUnit extends System.Enum {
    protected constructor();
    static Centimeters: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Feet: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Inches: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Meters: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Millimeters: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    value__: number;
  }
}
declare namespace UnityEditor.SketchUpImporterModelEditor {
  class Styles extends System.Object {
    constructor();
    static fileUnitLabel: any;
    static generateBackFaceLabel: any;
    static latitudeLabel: any;
    static longitudeLabel: any;
    static measurementOptions: any[];
    static mergeCoplanarFaces: any;
    static northCorrectionLabel: any;
    static selectNodeButton: any;
    static sketchUpLabel: any;
  }
}
declare namespace UnityEditor {
  class SketchUpImportCamera extends System.ValueType {
    protected constructor();
    aspectRatio: number;
    fieldOfView: number;
    isPerspective: boolean;
    lookAt: any;
    orthoSize: number;
    position: any;
    up: any;
  }
}
declare namespace UnityEditor {
  class SketchUpImportScene extends System.ValueType {
    protected constructor();
    camera: UnityEditor.SketchUpImportCamera;
    name: string;
  }
}
declare namespace UnityEditor {
  class SketchUpNodeInfo extends System.ValueType {
    protected constructor();
    enabled: boolean;
    name: string;
    nodeIndex: number;
    parent: number;
  }
}
declare namespace UnityEditor {
  class SketchUpImporter extends UnityEditor.ModelImporter {
    constructor();
    GetDefaultCamera(): UnityEditor.SketchUpImportCamera;
    GetScenes(): UnityEditor.SketchUpImportScene[];
    readonly latitude: number;
    readonly longitude: number;
    readonly northCorrection: number;
  }
}
declare namespace UnityEditor {
  class EditorPreviewTilemap extends UnityEngine.Tilemaps.ITilemap {
    protected constructor();
    GetColor(position: any): any;
    GetSprite(position: any): any;
    GetTile(position: any): any;
    GetTileFlags(position: any): any;
    GetTransformMatrix(position: any): any;
  }
}
declare namespace UnityEngine.Tilemaps {
  class ITilemap extends System.Object {
    protected constructor();
    GetColor(position: any): any;
    GetSprite(position: any): any;
    GetTile(position: any): any;
    GetTileFlags(position: any): any;
    GetTransformMatrix(position: any): any;
    RefreshTile(position: any): void;
    readonly cellBounds: any;
    readonly localBounds: any;
    readonly origin: any;
    readonly size: any;
  }
}
declare namespace UnityEditor {
  class TileEditor extends UnityEditor.Editor {
    constructor();
    static DoTilePreview(sprite: any, color: any, transform: any): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    static TransformMatrixOnGUI(matrix: any): any;
  }
}
declare namespace UnityEditor.TileEditor {
  class Styles extends System.Object {
    protected constructor();
    static invalidMatrixLabel: any;
    static positionLabel: any;
    static previewLabel: any;
    static resetMatrixLabel: any;
    static rotationLabel: any;
    static scaleLabel: any;
  }
}
declare namespace UnityEditor {
  class TilemapCollider2DEditor extends UnityEditor.Collider2DEditorBase {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class Collider2DEditorBase extends UnityEditor.ColliderEditorBase {
    protected constructor();
    FinalizeInspectorGUI(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class ColliderEditorBase extends UnityEditor.Editor {
    protected constructor();
    OnDisable(): void;
    OnEnable(): void;
    readonly editingCollider: boolean;
  }
}
declare namespace UnityEditor {
  class TilemapEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.TilemapEditor {
  class Styles extends System.Object {
    protected constructor();
    static animationFrameRateLabel: any;
    static orientationLabel: any;
    static tileAnchorLabel: any;
    static tilemapColorLabel: any;
  }
}
declare namespace UnityEditor {
  class TilemapRendererEditor extends UnityEditor.RendererEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class RendererEditorBase extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
  }
}
declare namespace UnityEditor.TilemapRendererEditor {
  class Styles extends System.Object {
    protected constructor();
    static materialLabel: any;
  }
}
declare namespace UnityEditorInternal {
  class TileUtility extends System.Object {
    constructor();
    static CreateNewTile(): void;
  }
}
declare namespace UnityEditor {
  class GridBrush extends UnityEngine.GridBrushBase {
    constructor();
    BoxErase(gridLayout: any, brushTarget: any, position: any): void;
    BoxFill(gridLayout: any, brushTarget: any, position: any): void;
    Erase(gridLayout: any, brushTarget: any, position: any): void;
    Flip(flip: any, layout: any): void;
    FloodFill(gridLayout: any, brushTarget: any, position: any): void;
    GetCellIndex(x: number, y: number, z: number): number;
    GetCellIndex(x: number, y: number, z: number, sizex: number, sizey: number, sizez: number): number;
    GetCellIndex(brushPosition: any): number;
    GetCellIndexWrapAround(x: number, y: number, z: number): number;
    GetHashCode(): number;
    Init(size: any): void;
    Init(size: any, pivot: any): void;
    MoveEnd(gridLayout: any, brushTarget: any, position: any): void;
    MoveStart(gridLayout: any, brushTarget: any, position: any): void;
    Paint(gridLayout: any, brushTarget: any, position: any): void;
    Pick(gridLayout: any, brushTarget: any, position: any, pickStart: any): void;
    Reset(): void;
    Rotate(direction: any, layout: any): void;
    SetColor(position: any, color: any): void;
    SetMatrix(position: any, matrix: any): void;
    SetTile(position: any, tile: any): void;
    UpdateSizeAndPivot(size: any, pivot: any): void;
    readonly cellCount: number;
    readonly cells: UnityEditor.GridBrush.BrushCell[];
    pivot: any;
    size: any;
  }
}
declare namespace UnityEngine {
  class GridBrushBase extends UnityEngine.ScriptableObject {
    protected constructor();
    BoxErase(gridLayout: any, brushTarget: any, position: any): void;
    BoxFill(gridLayout: any, brushTarget: any, position: any): void;
    Erase(gridLayout: any, brushTarget: any, position: any): void;
    Flip(flip: any, layout: any): void;
    FloodFill(gridLayout: any, brushTarget: any, position: any): void;
    Move(gridLayout: any, brushTarget: any, from: any, to: any): void;
    MoveEnd(gridLayout: any, brushTarget: any, position: any): void;
    MoveStart(gridLayout: any, brushTarget: any, position: any): void;
    Paint(gridLayout: any, brushTarget: any, position: any): void;
    Pick(gridLayout: any, brushTarget: any, position: any, pivot: any): void;
    Rotate(direction: any, layout: any): void;
    Select(gridLayout: any, brushTarget: any, position: any): void;
  }
}
declare namespace UnityEditor.GridBrush {
  class BrushCell extends System.Object {
    constructor();
    GetHashCode(): number;
    color: any;
    matrix: any;
    tile: any;
  }
}
declare namespace UnityEditor {
  class GridBrushEditor extends UnityEditor.GridBrushEditorBase {
    constructor();
    BoxFillPreview(gridLayout: any, brushTarget: any, position: any): void;
    ClearPreview(): void;
    FloodFillPreview(gridLayout: any, brushTarget: any, position: any): void;
    OnMouseLeave(): void;
    OnPaintSceneGUI(gridLayout: any, brushTarget: any, position: any, tool: any, executing: boolean): void;
    OnSelectionInspectorGUI(): void;
    OnToolDeactivated(tool: any): void;
    PaintPreview(gridLayout: any, brushTarget: any, position: any): void;
    RegisterUndo(brushTarget: any, tool: any): void;
    readonly brush: UnityEditor.GridBrush;
    readonly validTargets: any[];
  }
}
declare namespace UnityEditor {
  class GridBrushEditorBase extends UnityEditor.Editor {
    constructor();
    OnMouseEnter(): void;
    OnMouseLeave(): void;
    OnPaintInspectorGUI(): void;
    OnPaintSceneGUI(gridLayout: any, brushTarget: any, position: any, tool: any, executing: boolean): void;
    OnSelectionInspectorGUI(): void;
    OnToolActivated(tool: any): void;
    OnToolDeactivated(tool: any): void;
    RegisterUndo(brushTarget: any, tool: any): void;
    readonly validTargets: any[];
  }
}
declare namespace UnityEditor.GridBrushEditor {
  class Styles extends System.Object {
    protected constructor();
    static colliderTypeLabel: any;
    static colorLabel: any;
    static floodFillPreviewEditorPref: string;
    static floodFillPreviewLabel: any;
    static gameObjectLabel: any;
    static gridPositionLabel: any;
    static instantiateGameObjectRuntimeOnlyLabel: any;
    static lockColorLabel: any;
    static lockTransformLabel: any;
    static multieditingNotSupported: any;
    static spriteLabel: any;
    static tileLabel: any;
  }
}
declare namespace UnityEditor.GridBrushEditorBase {
  class Styles extends System.Object {
    protected constructor();
    static activeColor: any;
    static executingColor: any;
  }
}
declare namespace UnityEditor {
  class GridBrushesDropdown extends UnityEditor.FlexibleMenu {
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, itemClickedCallback: ((arg1: number, arg2: any) => void), minWidth: number);
  }
}
declare namespace UnityEditor {
  class FlexibleMenu extends UnityEditor.PopupWindowContent {
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, itemClickedCallback: ((arg1: number, arg2: any) => void));
    static DrawRect(rect: any, color: any): void;
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    selectedIndex: number;
  }
}
declare namespace UnityEditor {
  class PopupWindowContent extends System.Object {
    protected constructor();
    GetWindowSize(): any;
    OnClose(): void;
    OnGUI(rect: any): void;
    OnOpen(): void;
    readonly editorWindow: UnityEditor.EditorWindow;
  }
}
declare namespace UnityEditor.GridBrushesDropdown {
  class MenuItemProvider extends System.Object {
    constructor();
    Add(obj: any): number;
    Count(): number;
    Create(): any;
    GetItem(index: number): any;
    GetName(index: number): string;
    GetSeperatorIndices(): number[];
    IsModificationAllowed(index: number): boolean;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
  }
}
declare namespace UnityEditor {
  class GridPaintingState {
    constructor();
    static AutoSelectPaintTarget(): void;
    Equals(other: any): boolean;
    static FlushCache(): void;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    GetWorldBoundsOfTargets(): any;
    ModeSurvivesSelectionChange(toolMode: number): boolean;
    SetDirty(): void;
    ToString(): string;
    static ValidatePaintTarget(candidate: any): boolean;
    static readonly activeBrushEditor: UnityEditor.GridBrushEditorBase;
    static activeGrid: UnityEditor.PaintableGrid;
    readonly areToolModesAvailable: boolean;
    static defaultBrush: UnityEditor.GridBrush;
    static readonly fallbackEditor: UnityEditor.Editor;
    static gridBrush: UnityEngine.GridBrushBase;
    hideFlags: any;
    name: string;
    static savingPalette: boolean;
    static scenePaintTarget: any;
    static readonly validTargets: any[];
  }
}
declare namespace UnityEditor {
  class GridPaintPaletteClipboard extends UnityEditor.PaintableGrid {
    constructor();
    ClampZoomAndPan(): void;
    FrameEntirePalette(): void;
    GridToScreen(gridPosition: any): any;
    HandleDragAndDrop(): void;
    OnAfterPaletteSelectionChanged(): void;
    OnBeforePaletteSelectionChanged(): void;
    OnGUI(): void;
    OnViewSizeChanged(oldSize: any, newSize: any): void;
    Repaint(): void;
    ResetPreviewMesh(): void;
    ScreenToLocal(screenPosition: any): any;
    SetEditorPreviewTile(tilemap: any, position: any, tile: any, color: any, matrix: any): void;
    SetTile(tilemap: any, position: any, tile: any, color: any, matrix: any): void;
    SetupPreviewCameraOnInit(): void;
    readonly activeDragAndDrop: boolean;
    readonly activeTile: any;
    guiRect: any;
    readonly invalidClipboard: boolean;
    readonly isReceivingDragAndDrop: boolean;
    readonly palette: any;
    readonly paletteInstance: any;
    pingTileAsset: boolean;
    readonly previewUtility: UnityEditor.PreviewRenderUtility;
    readonly showNewEmptyClipboardInfo: boolean;
    readonly tilemap: any;
    unlocked: boolean;
    m_CameraOrthographicSize: number;
    m_CameraPosition: any;
    m_CameraPositionSaved: boolean;
  }
}
declare namespace UnityEditor {
  class PaintableGrid extends UnityEngine.ScriptableObject {
    protected constructor();
    static BrushToolToEditMode(tool: any): UnityEditorInternal.EditMode.SceneViewEditMode;
    static EditModeToBrushTool(editMode: UnityEditorInternal.EditMode.SceneViewEditMode): any;
    static InGridEditMode(): boolean;
    OnGUI(): void;
    Repaint(): void;
    readonly cellLayout: any;
    readonly isBoxing: boolean;
    readonly isPicking: boolean;
    readonly mouseGridPosition: any;
  }
}
declare namespace UnityEditor.GridPaintPaletteClipboard {
  class Styles extends System.Object {
    protected constructor();
    static background: any;
  }
}
declare namespace UnityEditor {
  class GridPaintPaletteWindow extends UnityEditor.EditorWindow {
    constructor();
    ChangeToTool(tool: any): void;
    DestroyPreviewInstance(): void;
    InitPreviewUtility(): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEditModeEnd(owner: UnityEditor.IToolModeOwner): void;
    OnEditModeStart(owner: UnityEditor.IToolModeOwner, editMode: UnityEditorInternal.EditMode.SceneViewEditMode): void;
    OnEnable(): void;
    OnUndoRedoPerformed(): void;
    static OpenTilemapPalette(): void;
    ResetPreviewInstance(): void;
    SavePalette(): void;
    readonly clipboardView: UnityEditor.GridPaintPaletteClipboard;
    static readonly instances: UnityEditor.GridPaintPaletteWindow[];
    readonly paintableSceneViewGrid: UnityEditor.PaintableGrid;
    palette: any;
    readonly paletteInstance: any;
    readonly previewUtility: UnityEditor.PreviewRenderUtility;
    m_Target: any;
    static tilePalette: any;
  }
}
declare namespace UnityEditor.GridPaintPaletteWindow {
  class Styles extends System.Object {
    protected constructor();
    static activeTargetLabel: any;
    static createNewPalette: any;
    static edit: any;
    static emptyClipboardInfo: any;
    static emptyProjectInfo: any;
    static focusLabel: any;
    static invalidClipboardInfo: any;
    static lockButton: any;
    static lockPaletteEditing: any;
    static mouseCursorOSHotspot: any[];
    static mouseCursorOSPath: string[];
    static mouseCursorTexturePaths: string[];
    static mouseCursorTextures: any[];
    static pingTileButton: any;
    static rendererOverlayTitleLabel: any;
    static sceneViewEditModes: UnityEditorInternal.EditMode.SceneViewEditMode[];
    static selectPaintTarget: any;
    static selectPalettePrefab: any;
    static selectTileAsset: any;
    static ToolbarStyle: any;
    static ToolbarTitleStyle: any;
    static toolbarWidth: number;
    static toolContents: any[];
    static unlockPaletteEditing: any;
  }
}
declare namespace UnityEditor.GridPaintPaletteWindow {
  class AssetProcessor extends UnityEditor.AssetPostprocessor {
    constructor();
    GetPostprocessOrder(): number;
  }
}
declare namespace UnityEditor {
  class GridPaintTargetsDropdown extends UnityEditor.FlexibleMenu {
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, itemClickedCallback: ((arg1: number, arg2: any) => void), minWidth: number);
  }
}
declare namespace UnityEditor.GridPaintTargetsDropdown {
  class MenuItemProvider extends System.Object {
    constructor();
    Add(obj: any): number;
    Count(): number;
    Create(): any;
    GetItem(index: number): any;
    GetName(index: number): string;
    GetSeperatorIndices(): number[];
    IsModificationAllowed(index: number): boolean;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
  }
}
declare namespace UnityEditor {
  class GridPalette extends UnityEngine.ScriptableObject {
    constructor();
    cellSizing: UnityEditor.GridPalette.CellSizing;
  }
}
declare namespace UnityEditor.GridPalette {
  class CellSizing extends System.Enum {
    protected constructor();
    static Automatic: UnityEditor.GridPalette.CellSizing;
    static Manual: UnityEditor.GridPalette.CellSizing;
    value__: number;
  }
}
declare namespace UnityEditor {
  class GridPaletteAddPopup extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.GridPaletteAddPopup {
  class Styles extends System.Object {
    protected constructor();
    static cancel: any;
    static gridLabel: any;
    static header: any;
    static nameLabel: any;
    static ok: any;
    static sizeLabel: any;
  }
}
declare namespace UnityEditor {
  class GridPaletteBrushes {
    constructor();
    static ActiveGridBrushAssetChanged(): void;
    Equals(other: any): boolean;
    static GetDefaultBrushType(): any;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    static readonly brushes: UnityEngine.GridBrushBase[];
    static readonly brushNames: string[];
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor.GridPaletteBrushes {
  class AssetProcessor extends UnityEditor.AssetPostprocessor {
    constructor();
    GetPostprocessOrder(): number;
  }
}
declare namespace UnityEditor {
  class GridPalettes {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
    static readonly palettes: any[];
  }
}
declare namespace UnityEditor.GridPalettes {
  class AssetProcessor extends UnityEditor.AssetPostprocessor {
    constructor();
    GetPostprocessOrder(): number;
  }
}
declare namespace UnityEditor {
  class GridPalettesDropdown extends UnityEditor.FlexibleMenu {
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, itemClickedCallback: ((arg1: number, arg2: any) => void), minWidth: number);
  }
}
declare namespace UnityEditor.GridPalettesDropdown {
  class MenuItemProvider extends System.Object {
    constructor();
    Add(obj: any): number;
    Count(): number;
    Create(): any;
    GetItem(index: number): any;
    GetName(index: number): string;
    GetSeperatorIndices(): number[];
    IsModificationAllowed(index: number): boolean;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
  }
}
declare namespace UnityEditor {
  class GridPaletteUtility extends System.Object {
    protected constructor();
    static CalculateAutoCellSize(grid: any, defaultValue: any): any;
    static CreateNewLayer(paletteGO: any, name: string, layout: any): any;
    static CreateNewPalette(folderPath: string, name: string, layout: any, cellSizing: UnityEditor.GridPalette.CellSizing, cellSize: any): any;
    static CreateNewPaletteNamed(name: string, layout: any, cellSizing: UnityEditor.GridPalette.CellSizing, cellSize: any): any;
    static GetBounds(palette: any): any;
  }
}
declare namespace UnityEditor {
  class GridSelection extends UnityEngine.ScriptableObject {
    constructor();
    static Clear(): void;
    static Select(target: UnityEngine.Object, bounds: any): void;
    static readonly active: boolean;
    static readonly grid: any;
    static position: any;
    static readonly target: any;
  }
}
declare namespace UnityEditor {
  class GridSelectionEditor extends UnityEditor.Editor {
    constructor();
    HasFrameBounds(): boolean;
    OnGetFrameBounds(): any;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.GridSelectionEditor {
  class Styles extends System.Object {
    protected constructor();
    static gridSelectionLabel: any;
    static header: any;
  }
}
declare namespace UnityEditor.PaintableGrid {
  class MarqueeType extends System.Enum {
    protected constructor();
    static Box: UnityEditor.PaintableGrid.MarqueeType;
    static None: UnityEditor.PaintableGrid.MarqueeType;
    static Pick: UnityEditor.PaintableGrid.MarqueeType;
    static Select: UnityEditor.PaintableGrid.MarqueeType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PaintableSceneViewGrid extends UnityEditor.PaintableGrid {
    constructor();
    OnSceneGUI(sceneView: UnityEditor.SceneView): void;
    Repaint(): void;
    readonly tilemap: any;
  }
}
declare namespace UnityEditor {
  class TileDragAndDrop extends System.Object {
    protected constructor();
    static AllSpritesAreSameSize(sprites: any[]): boolean;
    static ConvertToTileSheet(sheet: any): any;
    static CreateHoverData(sheetTextures: any[], singleSprites: any[], tiles: any[]): any;
    static CreateHoverData(sheet: any): any;
    static CreateTile(sprite: any): any;
    static EstimateGridPixelSize(sprites: any[]): any;
    static GetGridPosition(sprite: any, cellPixelSize: any): any;
    static GetMinMaxRect(positions: any[]): any;
    static GetSpritesFromTexture(texture: any): any[];
    static GetValidSingleSprites(objects: UnityEngine.Object[]): any[];
    static GetValidSpritesheets(objects: UnityEngine.Object[]): any[];
    static GetValidTiles(objects: UnityEngine.Object[]): any[];
  }
}
declare namespace UnityEditor {
  class TileDragAndDropManager {
    constructor();
    Equals(other: any): boolean;
    static GetActiveGrid(): any;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class TilemapEditorUserSettings extends System.Object {
    constructor();
    static focusMode: UnityEditor.TilemapEditorUserSettings.FocusMode;
    static lastUsedPalette: any;
  }
}
declare namespace UnityEditor.TilemapEditorUserSettings {
  class FocusMode extends System.Enum {
    protected constructor();
    static Grid: UnityEditor.TilemapEditorUserSettings.FocusMode;
    static None: UnityEditor.TilemapEditorUserSettings.FocusMode;
    static Tilemap: UnityEditor.TilemapEditorUserSettings.FocusMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssembleEditorSkin extends UnityEditor.EditorWindow {
    constructor();
    static DoIt(): void;
  }
}
declare namespace UnityEditor {
  class AssemblyHelper extends System.Object {
    constructor();
    static CheckForAssemblyFileNameMismatch(assemblyPath: string): void;
    static ExtractAllClassesThatAreUserExtendedScripts(path: string, classNamesArray: any, classNameSpacesArray: any): void;
    static ExtractAssemblyTypeInfo(targetPlatform: UnityEditor.BuildTarget, isEditor: boolean, assemblyPathName: string, searchDirs: string[]): UnityEditor.AssemblyTypeInfoGenerator.ClassInfo[];
    static ExtractInternalAssemblyName(path: string): string;
    static FindAssembliesReferencedBy(path: string, foldersToSearch: string[], target: UnityEditor.BuildTarget): string[];
    static FindAssembliesReferencedBy(paths: string[], foldersToSearch: string[], target: UnityEditor.BuildTarget): string[];
    static FindLoadedAssemblyWithName(s: string): any;
    static GetNamesOfAssembliesLoadedInCurrentDomain(): string[];
    static IsInternalAssembly(file: string): boolean;
    static IsManagedAssembly(file: string): boolean;
    static IsUnityEngineModule(assemblyName: string): boolean;
  }
}
declare namespace UnityEditor {
  class AssemblyReloadEvents extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class AssetModificationProcessorInternal extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.AssetModificationProcessorInternal {
  class FileMode extends System.Enum {
    protected constructor();
    static Binary: UnityEditor.AssetModificationProcessorInternal.FileMode;
    static Text: UnityEditor.AssetModificationProcessorInternal.FileMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssetPostprocessingInternal extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.AssetPostprocessingInternal {
  class CompareAssetImportPriority extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.AssetPostprocessingInternal {
  class PostprocessStack extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class AssetPreviewUpdater extends System.Object {
    constructor();
    static CreatePreviewForAsset(obj: UnityEngine.Object, subAssets: UnityEngine.Object[], assetPath: string): any;
  }
}
declare namespace UnityEditor {
  class AttributeHelper extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.AttributeHelper {
  class MonoGizmoMethod extends System.ValueType {
    protected constructor();
    drawGizmo: any;
    drawnType: any;
    options: number;
  }
}
declare namespace UnityEditor.AttributeHelper {
  class MonoCreateAssetItem extends System.ValueType {
    protected constructor();
    fileName: string;
    menuItem: string;
    order: number;
    type: any;
  }
}
declare namespace UnityEditor {
  class BuildPlayerSceneTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, path: string, state: boolean);
    UpdateName(): void;
    active: boolean;
    counter: number;
    fullName: string;
    guid: UnityEditor.GUID;
    static kInvalidCounter: number;
  }
}
declare namespace UnityEditor {
  class BuildPlayerSceneTreeView extends UnityEditor.IMGUI.Controls.TreeView {
    constructor(state: UnityEditor.IMGUI.Controls.TreeViewState);
    GetSceneList(): UnityEditor.EditorBuildSettingsScene[];
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeView extends System.Object {
    constructor(state: UnityEditor.IMGUI.Controls.TreeViewState);
    constructor(state: UnityEditor.IMGUI.Controls.TreeViewState, multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader);
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    CollapseAll(): void;
    EndRename(): void;
    ExpandAll(): void;
    FrameItem(id: number): void;
    GetExpanded(): number[];
    GetRows(): UnityEditor.IMGUI.Controls.TreeViewItem[];
    GetSelection(): number[];
    HasFocus(): boolean;
    HasSelection(): boolean;
    IsExpanded(id: number): boolean;
    IsSelected(id: number): boolean;
    OnGUI(rect: any): void;
    Reload(): void;
    Repaint(): void;
    SelectAllRows(): void;
    SetExpanded(id: number, expanded: boolean): boolean;
    SetExpanded(ids: number[]): void;
    SetExpandedRecursive(id: number, expanded: boolean): void;
    SetFocus(): void;
    SetFocusAndEnsureSelectedItem(): void;
    SetSelection(selectedIDs: number[]): void;
    SetSelection(selectedIDs: number[], options: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions): void;
    readonly hasSearch: boolean;
    multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader;
    searchString: string;
    readonly state: UnityEditor.IMGUI.Controls.TreeViewState;
    readonly totalHeight: number;
    treeViewControlID: number;
  }
}
declare namespace UnityEditor {
  class BuildPlayerWindow extends UnityEditor.EditorWindow {
    constructor();
    static GetPlaybackEngineDownloadURL(moduleName: string): string;
    static RegisterBuildPlayerHandler(func: ((obj: UnityEditor.BuildPlayerOptions) => void)): void;
    static RegisterGetBuildPlayerOptionsHandler(func: ((arg: UnityEditor.BuildPlayerOptions) => UnityEditor.BuildPlayerOptions)): void;
    static ShowBuildPlayerWindow(): void;
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class Styles extends System.Object {
    constructor();
    GetDownloadErrorForTarget(target: UnityEditor.BuildTarget): any;
    GetTargetNotInstalled(index: number, item: number): any;
    activePlatformIcon: any;
    allowDebugging: any;
    box: any;
    build: any;
    buildAndRun: any;
    buildScriptsOnly: any;
    compressionMethod: any;
    compressionStrings: any[];
    compressionTypes: UnityEditor.Compression[];
    debugBuild: any;
    enableHeadlessMode: any;
    evenRow: any;
    explicitDivideByZeroChecks: any;
    explicitNullChecks: any;
    export: any;
    static invalidColorSpaceMessage: any;
    static kButtonWidth: number;
    learnAboutUnityCloudBuild: any;
    levelString: any;
    levelStringCounter: any;
    noSessionDialogText: any;
    notLicensedMessages: any[];
    oddRow: any;
    platformSelector: any;
    platformTitle: any;
    profileBuild: any;
    scenesInBuild: any;
    selected: any;
    switchPlatform: any;
    symlinkiOSLibraries: any;
    title: any;
    toggle: any;
    toggleSize: any;
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class BuildMethodException extends System.Exception {
    constructor();
    constructor(message: string);
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class DefaultBuildMethods extends System.Object {
    protected constructor();
    static BuildPlayer(options: UnityEditor.BuildPlayerOptions): void;
    static GetBuildPlayerOptions(defaultBuildPlayerOptions: UnityEditor.BuildPlayerOptions): UnityEditor.BuildPlayerOptions;
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class PackmanOperationType extends System.Enum {
    protected constructor();
    static Add: UnityEditor.BuildPlayerWindow.PackmanOperationType;
    static List: UnityEditor.BuildPlayerWindow.PackmanOperationType;
    static None: UnityEditor.BuildPlayerWindow.PackmanOperationType;
    static Outdated: UnityEditor.BuildPlayerWindow.PackmanOperationType;
    static Remove: UnityEditor.BuildPlayerWindow.PackmanOperationType;
    static Search: UnityEditor.BuildPlayerWindow.PackmanOperationType;
    value__: number;
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class PublishStyles extends System.Object {
    constructor();
    static kIconSize: number;
    static kRowHeight: number;
    learnAboutXiaomiInstallation: any;
    publishTitle: any;
    xiaomiIcon: any;
  }
}
declare namespace UnityEditor {
  class CallbackOrderAttribute extends System.Attribute {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class PostProcessAttribute extends UnityEditor.CallbackOrderAttribute {
    protected constructor();
  }
}
declare namespace UnityEditor.Callbacks {
  class RegisterPluginsAttribute extends UnityEditor.CallbackOrderAttribute {
    constructor();
    constructor(callbackOrder: number);
  }
}
declare namespace UnityEditor.Callbacks {
  class PostProcessBuildAttribute extends UnityEditor.CallbackOrderAttribute {
    constructor();
    constructor(callbackOrder: number);
  }
}
declare namespace UnityEditor.Callbacks {
  class PostProcessSceneAttribute extends UnityEditor.CallbackOrderAttribute {
    constructor();
    constructor(callbackOrder: number);
    constructor(callbackOrder: number, version: number);
  }
}
declare namespace UnityEditor.Callbacks {
  class DidReloadScripts extends UnityEditor.CallbackOrderAttribute {
    constructor();
    constructor(callbackOrder: number);
  }
}
declare namespace UnityEditor.Callbacks {
  class OnOpenAssetAttribute extends UnityEditor.CallbackOrderAttribute {
    constructor();
    constructor(callbackOrder: number);
  }
}
declare namespace UnityEditor {
  class Empty extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class ConsoleWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    DoLogChanged(): void;
    static GetConsoleErrorPause(): boolean;
    static LogChanged(): void;
    static SetConsoleErrorPause(enabled: boolean): void;
    static ShowConsoleWindow(immediate: boolean): void;
    ToggleLogStackTraces(userData: any): void;
    ToggleLogStackTracesForAll(userData: any): void;
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class Constants extends System.Object {
    constructor();
    static Init(): void;
    static Box: any;
    static Button: any;
    static CountBadge: any;
    static ErrorStyle: any;
    static EvenBackground: any;
    static LogStyle: any;
    static MessageStyle: any;
    static MiniButton: any;
    static MiniButtonLeft: any;
    static MiniButtonMiddle: any;
    static MiniButtonRight: any;
    static ms_Loaded: boolean;
    static OddBackground: any;
    static StatusError: any;
    static StatusLog: any;
    static StatusWarn: any;
    static Toolbar: any;
    static WarningStyle: any;
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class Mode extends System.Enum {
    protected constructor();
    static Assert: UnityEditor.ConsoleWindow.Mode;
    static AssetImportError: UnityEditor.ConsoleWindow.Mode;
    static AssetImportWarning: UnityEditor.ConsoleWindow.Mode;
    static DisplayPreviousErrorInStatusBar: UnityEditor.ConsoleWindow.Mode;
    static DontExtractStacktrace: UnityEditor.ConsoleWindow.Mode;
    static DontPreprocessCondition: UnityEditor.ConsoleWindow.Mode;
    static Error: UnityEditor.ConsoleWindow.Mode;
    static Fatal: UnityEditor.ConsoleWindow.Mode;
    static GraphCompileError: UnityEditor.ConsoleWindow.Mode;
    static Log: UnityEditor.ConsoleWindow.Mode;
    static MayIgnoreLineNumber: UnityEditor.ConsoleWindow.Mode;
    static ReportBug: UnityEditor.ConsoleWindow.Mode;
    static ScriptCompileError: UnityEditor.ConsoleWindow.Mode;
    static ScriptCompileWarning: UnityEditor.ConsoleWindow.Mode;
    static ScriptingAssertion: UnityEditor.ConsoleWindow.Mode;
    static ScriptingError: UnityEditor.ConsoleWindow.Mode;
    static ScriptingException: UnityEditor.ConsoleWindow.Mode;
    static ScriptingLog: UnityEditor.ConsoleWindow.Mode;
    static ScriptingWarning: UnityEditor.ConsoleWindow.Mode;
    static ShouldClearOnPlay: UnityEditor.ConsoleWindow.Mode;
    static StickyError: UnityEditor.ConsoleWindow.Mode;
    value__: number;
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class ConsoleFlags extends System.Enum {
    protected constructor();
    static Autoscroll: UnityEditor.ConsoleWindow.ConsoleFlags;
    static ClearOnPlay: UnityEditor.ConsoleWindow.ConsoleFlags;
    static Collapse: UnityEditor.ConsoleWindow.ConsoleFlags;
    static ErrorPause: UnityEditor.ConsoleWindow.ConsoleFlags;
    static LogLevelError: UnityEditor.ConsoleWindow.ConsoleFlags;
    static LogLevelLog: UnityEditor.ConsoleWindow.ConsoleFlags;
    static LogLevelWarning: UnityEditor.ConsoleWindow.ConsoleFlags;
    static StopForAssert: UnityEditor.ConsoleWindow.ConsoleFlags;
    static StopForError: UnityEditor.ConsoleWindow.ConsoleFlags;
    value__: number;
    static Verbose: UnityEditor.ConsoleWindow.ConsoleFlags;
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class StackTraceLogTypeData extends System.ValueType {
    protected constructor();
    logType: any;
    stackTraceLogType: any;
  }
}
declare namespace UnityEditor {
  class ManagedEditorCodeRebuilder extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class CustomEditorAttributes extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.CustomEditorAttributes {
  class MonoEditorType extends System.Object {
    constructor();
    m_EditorForChildClasses: boolean;
    m_InspectedType: any;
    m_InspectorType: any;
    m_IsFallback: boolean;
  }
}
declare namespace UnityEditor {
  class DataWatchHandle extends System.Object {
    constructor(id: number, service: UnityEditor.DataWatchService, watched: UnityEngine.Object);
    Dispose(): void;
    readonly disposed: boolean;
    readonly watched: UnityEngine.Object;
    id: number;
    service: any;
  }
}
declare namespace UnityEditor {
  class DataWatchService extends System.Object {
    constructor();
    AddWatch(watcher: UnityEngine.Experimental.UIElements.VisualElement, watched: UnityEngine.Object, onDataChanged: (() => void)): any;
    PollNativeData(): void;
    PostProcessUndo(modifications: UnityEditor.UndoPropertyModification[]): UnityEditor.UndoPropertyModification[];
    ProcessNotificationQueue(): void;
    RemoveWatch(handle: any): void;
  }
}
declare namespace UnityEditor.DataWatchService {
  class Spy extends System.ValueType {
    protected constructor();
    handleID: number;
    onDataChanged: (() => void);
    watcher: UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEditor.DataWatchService {
  class Watchers extends System.ValueType {
    protected constructor();
    spyList: UnityEditor.DataWatchService.Spy[];
    tracker: UnityEditor.ChangeTrackerHandle;
  }
}
declare namespace UnityEditor {
  class DisplayUtility extends System.Object {
    constructor();
    static GetDisplayIndices(): number[];
    static GetDisplayNames(): any[];
    static GetGenericDisplayNames(): any[];
  }
}
declare namespace UnityEditor {
  class DrivenRectTransformUndo extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class DropInfo extends System.Object {
    constructor(source: UnityEditor.IDropArea);
    dropArea: UnityEditor.IDropArea;
    rect: any;
    type: UnityEditor.DropInfo.Type;
    userData: any;
  }
}
declare namespace UnityEditor.DropInfo {
  class Type extends System.Enum {
    protected constructor();
    static Pane: UnityEditor.DropInfo.Type;
    static Tab: UnityEditor.DropInfo.Type;
    value__: number;
    static Window: UnityEditor.DropInfo.Type;
  }
}
declare namespace UnityEditor {
  class PlayModeStateChange extends System.Enum {
    protected constructor();
    static EnteredEditMode: UnityEditor.PlayModeStateChange;
    static EnteredPlayMode: UnityEditor.PlayModeStateChange;
    static ExitingEditMode: UnityEditor.PlayModeStateChange;
    static ExitingPlayMode: UnityEditor.PlayModeStateChange;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PauseState extends System.Enum {
    protected constructor();
    static Paused: UnityEditor.PauseState;
    static Unpaused: UnityEditor.PauseState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class InitializeOnLoadAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEditor {
  class InitializeOnLoadMethodAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEditor {
  class EditorAssemblies extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Rendering {
  class ShaderQuality extends System.Enum {
    protected constructor();
    static High: UnityEditor.Rendering.ShaderQuality;
    static Low: UnityEditor.Rendering.ShaderQuality;
    static Medium: UnityEditor.Rendering.ShaderQuality;
    value__: number;
  }
}
declare namespace UnityEditor.Rendering {
  class TierSettings extends System.ValueType {
    protected constructor();
    cascadedShadowMaps: boolean;
    detailNormalMap: boolean;
    enableLPPV: boolean;
    hdr: boolean;
    hdrMode: any;
    prefer32BitShadowMaps: boolean;
    realtimeGICPUUsage: any;
    reflectionProbeBlending: boolean;
    reflectionProbeBoxProjection: boolean;
    renderingPath: any;
    semitransparentShadows: boolean;
    standardShaderQuality: UnityEditor.Rendering.ShaderQuality;
  }
}
declare namespace UnityEditor.Rendering {
  class PlatformShaderSettings extends System.ValueType {
    protected constructor();
    cascadedShadowMaps: boolean;
    reflectionProbeBlending: boolean;
    reflectionProbeBoxProjection: boolean;
    standardShaderQuality: UnityEditor.Rendering.ShaderQuality;
  }
}
declare namespace UnityEditor {
  class EditorWindowTitleAttribute extends System.Attribute {
    constructor();
    icon: string;
    title: string;
    useTypeNameAsIconName: boolean;
  }
}
declare namespace UnityEditor.Experimental.UIElements {
  class UIElementsEntryPoint extends System.Object {
    protected constructor();
    static GetRootVisualContainer(window: UnityEditor.EditorWindow): any;
  }
}
declare namespace UnityEditor {
  class GameObjectUtility extends System.Object {
    constructor();
    static AreStaticEditorFlagsSet(go: any, flags: UnityEditor.StaticEditorFlags): boolean;
    static GetNavMeshArea(go: any): number;
    static GetNavMeshAreaFromName(name: string): number;
    static GetNavMeshAreaNames(): string[];
    static GetNavMeshLayer(go: any): number;
    static GetNavMeshLayerFromName(name: string): number;
    static GetNavMeshLayerNames(): string[];
    static GetStaticEditorFlags(go: any): UnityEditor.StaticEditorFlags;
    static GetUniqueNameForSibling(parent: any, name: string): string;
    static SetNavMeshArea(go: any, areaIndex: number): void;
    static SetNavMeshLayer(go: any, areaIndex: number): void;
    static SetParentAndAlign(child: any, parent: any): void;
    static SetStaticEditorFlags(go: any, flags: UnityEditor.StaticEditorFlags): void;
  }
}
declare namespace UnityEditor.GameObjectUtility {
  class ShouldIncludeChildren extends System.Enum {
    protected constructor();
    static Cancel: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    static DontIncludeChildren: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    static HasNoChildren: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    static IncludeChildren: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    value__: number;
  }
}
declare namespace UnityEditor {
  class GameViewGUI extends System.Object {
    constructor();
    static GameViewStatsGUI(): void;
  }
}
declare namespace UnityEditorInternal {
  class GenerateIconsWithMipLevels extends System.Object {
    constructor();
    static GenerateAllIconsWithMipLevels(): void;
    static GenerateIconWithMipLevels(assetPath: string, mipTextures: any, fileInfo: any): void;
    static GenerateSelectedIconsWithMips(): void;
    static MipLevelForAssetPath(assetPath: string, separator: string): number;
    static VerifyIconPath(assetPath: string, logError: boolean): boolean;
  }
}
declare namespace UnityEditorInternal.GenerateIconsWithMipLevels {
  class InputData extends System.Object {
    constructor();
    GetMipFileName(baseName: string, mipResolution: number): string;
    generatedFileNames: string[];
    mipFileExtension: string;
    mipIdentifier: string;
    sourceFolder: string;
    targetFolder: string;
  }
}
declare namespace UnityEditor {
  class GUID extends System.ValueType {
    protected constructor();
    CompareTo(obj: any): number;
    CompareTo(rhs: UnityEditor.GUID): number;
    Empty(): boolean;
    Equals(obj: any): boolean;
    static Generate(): UnityEditor.GUID;
    GetHashCode(): number;
    ParseExact(hex: string): boolean;
    ToString(): string;
    static TryParse(hex: string, result: any): boolean;
  }
}
declare namespace UnityEditor {
  class HomeWindow extends System.Object {
    protected constructor();
    static Show(mode: UnityEditor.HomeWindow.HomeMode): boolean;
  }
}
declare namespace UnityEditor.HomeWindow {
  class HomeMode extends System.Enum {
    protected constructor();
    static Launching: UnityEditor.HomeWindow.HomeMode;
    static License: UnityEditor.HomeWindow.HomeMode;
    static Login: UnityEditor.HomeWindow.HomeMode;
    static ManageLicense: UnityEditor.HomeWindow.HomeMode;
    static NewProjectOnly: UnityEditor.HomeWindow.HomeMode;
    static OpenProjectOnly: UnityEditor.HomeWindow.HomeMode;
    static Tutorial: UnityEditor.HomeWindow.HomeMode;
    value__: number;
    static Welcome: UnityEditor.HomeWindow.HomeMode;
  }
}
declare namespace UnityEditor {
  class HostView extends UnityEditor.GUIView {
    constructor();
    static BeginOffsetArea(screenRect: any, content: any, style: any): void;
    static EndOffsetArea(): void;
    InvokeOnGUI(onGUIPosition: any): void;
    PopupGenericMenu(view: UnityEditor.EditorWindow, pos: any): void;
  }
}
declare namespace UnityEditor {
  class ICleanuppable {
    protected constructor();
    Cleanup(): void;
  }
}
declare namespace UnityEditor {
  class IconSelector extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.IconSelector {
  class Styles extends System.Object {
    constructor();
    background: any;
    noneButton: any;
    selection: any;
    selectionLabel: any;
    seperator: any;
  }
}
declare namespace UnityEditor {
  class IDropArea {
    protected constructor();
    DragOver(w: UnityEditor.EditorWindow, screenPos: any): UnityEditor.DropInfo;
    PerformDrop(w: UnityEditor.EditorWindow, dropInfo: UnityEditor.DropInfo, screenPos: any): boolean;
  }
}
declare namespace UnityEditor {
  class IHasCustomMenu {
    protected constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
  }
}
declare namespace UnityEditor {
  class MaterialProperty extends System.Object {
    constructor();
    ReadFromMaterialPropertyBlock(block: any): void;
    WriteToMaterialPropertyBlock(materialblock: any, changedPropertyMask: number): void;
    applyPropertyCallback: ((prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) => boolean);
    colorValue: any;
    readonly displayName: string;
    readonly flags: UnityEditor.MaterialProperty.PropFlags;
    floatValue: number;
    readonly hasMixedValue: boolean;
    readonly name: string;
    readonly rangeLimits: any;
    readonly targets: UnityEngine.Object[];
    readonly textureDimension: any;
    textureScaleAndOffset: any;
    textureValue: any;
    readonly type: UnityEditor.MaterialProperty.PropType;
    vectorValue: any;
  }
}
declare namespace UnityEditor.MaterialProperty {
  class PropType extends System.Enum {
    protected constructor();
    static Color: UnityEditor.MaterialProperty.PropType;
    static Float: UnityEditor.MaterialProperty.PropType;
    static Range: UnityEditor.MaterialProperty.PropType;
    static Texture: UnityEditor.MaterialProperty.PropType;
    value__: number;
    static Vector: UnityEditor.MaterialProperty.PropType;
  }
}
declare namespace UnityEditor.MaterialProperty {
  class TexDim extends System.Enum {
    protected constructor();
    static Any: UnityEditor.MaterialProperty.TexDim;
    static Cube: UnityEditor.MaterialProperty.TexDim;
    static None: UnityEditor.MaterialProperty.TexDim;
    static Tex2D: UnityEditor.MaterialProperty.TexDim;
    static Tex3D: UnityEditor.MaterialProperty.TexDim;
    static Unknown: UnityEditor.MaterialProperty.TexDim;
    value__: number;
  }
}
declare namespace UnityEditor.MaterialProperty {
  class PropFlags extends System.Enum {
    protected constructor();
    static HDR: UnityEditor.MaterialProperty.PropFlags;
    static HideInInspector: UnityEditor.MaterialProperty.PropFlags;
    static None: UnityEditor.MaterialProperty.PropFlags;
    static Normal: UnityEditor.MaterialProperty.PropFlags;
    static NoScaleOffset: UnityEditor.MaterialProperty.PropFlags;
    static PerRendererData: UnityEditor.MaterialProperty.PropFlags;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ObjectListAreaState extends System.Object {
    constructor();
    OnAwake(): void;
    m_CreateAssetUtility: UnityEditor.CreateAssetUtility;
    m_ExpandedInstanceIDs: number[];
    m_GridSize: number;
    m_HadKeyboardFocusLastEvent: boolean;
    m_LastClickedInstanceID: number;
    m_NewAssetIndexInList: number;
    m_RenameOverlay: UnityEditor.RenameOverlay;
    m_ScrollPosition: any;
    m_SelectedInstanceIDs: number[];
  }
}
declare namespace UnityEditor {
  class ObjectListArea extends System.Object {
    constructor(state: UnityEditor.ObjectListAreaState, owner: UnityEditor.EditorWindow, showNoneItem: boolean);
    BeginPing(instanceID: number): void;
    BeginRename(delay: number): boolean;
    CanShowThumbnails(): boolean;
    EndPing(): void;
    EndRename(acceptChanges: boolean): void;
    Frame(instanceID: number, frame: boolean, ping: boolean): boolean;
    GetAssetStoreButtonText(): string;
    GetCurrentVisibleNames(): string[];
    GetInstanceIDByIndex(index: number): number;
    GetSelection(): number[];
    HandleKeyboard(checkKeyboardControl: boolean): void;
    Init(rect: any, hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, checkThumbnails: boolean): void;
    InitSelection(selectedInstanceIDs: number[]): void;
    IsLastClickedItemVisible(): boolean;
    IsSelected(instanceID: number): boolean;
    IsShowing(instanceID: number): boolean;
    IsShowingAny(instanceIDs: number[]): boolean;
    OffsetSelection(selectionOffset: number): void;
    OnEvent(): void;
    OnGUI(position: any, keyboardControlID: number): void;
    OnInspectorUpdate(): void;
    SelectAll(): void;
    SelectFirst(): void;
    ShowAssetStoreHitCountWhileSearchingLocalAssetsChanged(): void;
    ShowObjectsInList(instanceIDs: number[]): void;
    allowBuiltinResources: boolean;
    allowDeselection: boolean;
    allowDragging: boolean;
    allowFindNextShortcut: boolean;
    allowFocusRendering: boolean;
    allowMultiSelect: boolean;
    allowRenaming: boolean;
    allowUserRenderingHook: boolean;
    assetStoreSearchEnded: (() => void);
    drawLocalAssetHeader: ((arg: any) => number);
    foldersFirst: boolean;
    gotKeyboardFocus: (() => void);
    gridSize: number;
    itemSelectedCallback: ((obj: boolean) => void);
    keyboardCallback: (() => void);
    readonly maxGridSize: number;
    readonly minGridSize: number;
    readonly numItemsDisplayed: number;
    repaintCallback: (() => void);
    m_BottomMargin: number;
    m_LeftMargin: number;
    m_RequeryAssetStore: boolean;
    m_RightMargin: number;
    m_SpaceBetween: number;
    m_TopMargin: number;
    selectedAssetStoreAsset: boolean;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class Styles extends System.Object {
    constructor();
    background: any;
    groupFoldout: any;
    groupHeaderLabel: any;
    groupHeaderLabelCount: any;
    groupHeaderMiddle: any;
    groupHeaderTop: any;
    iconAreaBg: any;
    iconDropShadow: any;
    m_AssetStoreNotAvailableText: any;
    miniPing: any;
    miniRenameField: any;
    ping: any;
    previewBg: any;
    previewTextureBackground: any;
    resultsFocusMarker: any;
    resultsGrid: any;
    resultsGridLabel: any;
    resultsLabel: any;
    subAssetBg: any;
    subAssetBgCloseEnded: any;
    subAssetBgDivider: any;
    subAssetBgMiddle: any;
    subAssetBgOpenEnded: any;
    subAssetExpandButton: any;
    textureIconDropShadow: any;
    toolbarBack: any;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class AssetStoreGroup extends UnityEditor.ObjectListArea.Group {
    constructor(owner: UnityEditor.ObjectListArea, groupTitle: string, groupName: string);
    AssetAtIndex(selectedIdx: number): UnityEditor.AssetStoreAsset;
    IndexOf(assetID: number): number;
    UpdateAssets(): void;
    UpdateFilter(hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, showFoldersFirst: boolean): void;
    UpdateHeight(): void;
    Assets: UnityEditor.AssetStoreAsset[];
    readonly ItemCount: number;
    ListMode: boolean;
    readonly Name: string;
    readonly NeedItems: boolean;
    readonly NeedsRepaint: boolean;
    static kDefaultRowsShown: number;
    static kDefaultRowsShownListMode: number;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class Group extends System.Object {
    constructor(owner: UnityEditor.ObjectListArea, groupTitle: string);
    Draw(yOffset: number, scrollPos: any, rowsInUse: any): void;
    UpdateAssets(): void;
    UpdateFilter(hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, showFoldersFirst: boolean): void;
    UpdateHeight(): void;
    readonly Height: number;
    readonly ItemCount: number;
    ListMode: boolean;
    readonly NeedsRepaint: boolean;
    visiblePreference: boolean;
    ItemsAvailable: number;
    ItemsWantedShown: number;
    m_Grid: UnityEditor.VerticalGrid;
    m_Height: number;
    m_LastClickedDrawTime: number;
    m_Owner: UnityEditor.ObjectListArea;
    Visible: boolean;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class LocalGroup extends UnityEditor.ObjectListArea.Group {
    constructor(owner: UnityEditor.ObjectListArea, groupTitle: string, showNone: boolean);
    ChangeExpandedState(instanceID: number, expanded: boolean): void;
    DoCharacterOffsetSelection(): boolean;
    DoDrag(dragToInstanceID: number, perform: boolean): UnityEditor.DragAndDropVisualMode;
    static DrawIconAndLabel(rect: any, filterItem: UnityEditor.FilteredHierarchy.FilterResult, label: string, icon: any, selected: boolean, focus: boolean): void;
    GetInstanceIDs(): number[];
    GetNameOfLocalAsset(instanceID: number): string;
    GetNewSelection(clickedInstanceID: number, beginOfDrag: boolean, useShiftAsActionKey: boolean): number[];
    GetVisibleNameAndInstanceIDs(): any[];
    IndexOf(instanceID: number): number;
    IndexOfNewText(newText: string, isCreatingNewFolder: boolean, foldersFirst: boolean): number;
    InitBuiltinResources(): void;
    InstanceIdAtIndex(index: number, instanceID: any): boolean;
    IsAnyLastRenderedAssetsDirty(): boolean;
    IsBuiltinAsset(instanceID: number): boolean;
    LookupByInstanceID(instanceID: number): UnityEditor.FilteredHierarchy.FilterResult;
    PrintBuiltinResourcesAvailable(): void;
    ShowObjectsInList(instanceIDs: number[]): void;
    StartDrag(draggedInstanceID: number, selectedInstanceIDs: number[]): void;
    UpdateAssets(): void;
    UpdateFilter(hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, foldersFirst: boolean): void;
    UpdateHeight(): void;
    readonly HasBuiltinResources: boolean;
    readonly ItemCount: number;
    ListMode: boolean;
    readonly NeedsRepaint: boolean;
    readonly searchFilter: UnityEditor.SearchFilter;
    readonly ShowNone: boolean;
    static k_ListModeLeftPadding: number;
    static k_ListModeLeftPaddingForSubAssets: number;
    static k_ListModeVersionControlOverlayPadding: number;
    m_ListMode: boolean;
  }
}
declare namespace UnityEditor.ObjectListArea.LocalGroup {
  class ItemFader extends System.Object {
    constructor();
    GetAlpha(instanceID: number): number;
    Start(instanceIDs: number[]): void;
  }
}
declare namespace UnityEditor {
  class ObjectSelectorReceiver extends UnityEngine.ScriptableObject {
    protected constructor();
    OnSelectionChanged(selection: UnityEngine.Object): void;
    OnSelectionClosed(selection: UnityEngine.Object): void;
  }
}
declare namespace UnityEditor {
  class ObjectSelector extends UnityEditor.EditorWindow {
    constructor();
    static GetCurrentObject(): UnityEngine.Object;
    static GetInitialObject(): UnityEngine.Object;
    SetupPreview(): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    Show(obj: UnityEngine.Object, requiredType: any, property: UnityEditor.SerializedProperty, allowSceneObjects: boolean): void;
    readonly allowedInstanceIDs: number[];
    static readonly get: UnityEditor.ObjectSelector;
    static readonly isVisible: boolean;
    objectSelectorReceiver: UnityEditor.ObjectSelectorReceiver;
  }
}
declare namespace UnityEditor.ObjectSelector {
  class Styles extends System.Object {
    constructor();
    bottomResize: any;
    largeStatus: any;
    previewBackground: any;
    previewTextureBackground: any;
    smallStatus: any;
    tab: any;
    toolbarBack: any;
  }
}
declare namespace UnityEditor {
  class ObjectTreeForSelector extends System.Object {
    constructor();
    Clear(): void;
    GetSelection(): number[];
    Init(position: any, owner: UnityEditor.EditorWindow, treeViewNeededCallback: ((arg0: UnityEditor.ObjectTreeForSelector.TreeSelectorData) => void), selectionCallback: ((arg0: UnityEditor.IMGUI.Controls.TreeViewItem) => void), doubleClickedCallback: (() => void), initialSelectedTreeViewItemID: number, userData: number): void;
    IsInitialized(): boolean;
    OnGUI(position: any): void;
    SetTreeView(treeView: UnityEditor.IMGUI.Controls.TreeViewController): void;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class TreeSelectorData extends System.Object {
    constructor();
    editorWindow: UnityEditor.EditorWindow;
    objectTreeForSelector: UnityEditor.ObjectTreeForSelector;
    state: UnityEditor.IMGUI.Controls.TreeViewState;
    treeViewRect: any;
    userData: number;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class SelectionEvent {
    constructor();
    AddListener(call: ((arg0: UnityEditor.IMGUI.Controls.TreeViewItem) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: UnityEditor.IMGUI.Controls.TreeViewItem): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: UnityEditor.IMGUI.Controls.TreeViewItem) => void)): void;
    SetPersistentListenerState(index: number, state: any): void;
    ToString(): string;
  }
}
declare namespace UnityEngine.Events {
  class UnityEvent<T0> extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: ((arg0: T0) => void)): void;
    Invoke(arg0: T0): void;
    RemoveListener(call: ((arg0: T0) => void)): void;
  }
}
declare namespace UnityEngine.Events {
  class UnityEventBase extends System.Object {
    protected constructor();
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    static GetValidMethodInfo(obj: any, functionName: string, argumentTypes: any[]): any;
    RemoveAllListeners(): void;
    SetPersistentListenerState(index: number, state: any): void;
    ToString(): string;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class TreeViewNeededEvent {
    constructor();
    AddListener(call: ((arg0: UnityEditor.ObjectTreeForSelector.TreeSelectorData) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetPersistentEventCount(): number;
    GetPersistentMethodName(index: number): string;
    GetPersistentTarget(index: number): UnityEngine.Object;
    GetType(): any;
    Invoke(arg0: UnityEditor.ObjectTreeForSelector.TreeSelectorData): void;
    RemoveAllListeners(): void;
    RemoveListener(call: ((arg0: UnityEditor.ObjectTreeForSelector.TreeSelectorData) => void)): void;
    SetPersistentListenerState(index: number, state: any): void;
    ToString(): string;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class DoubleClickedEvent extends UnityEngine.Events.UnityEvent {
    constructor();
  }
}
declare namespace UnityEngine.Events {
  class UnityEvent extends UnityEngine.Events.UnityEventBase {
    constructor();
    AddListener(call: (() => void)): void;
    Invoke(): void;
    RemoveListener(call: (() => void)): void;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class Styles extends System.Object {
    constructor();
    bottomBarBg: any;
    searchBg: any;
  }
}
declare namespace UnityEditor {
  class TargetGlesGraphics extends System.Enum {
    protected constructor();
    static Automatic: UnityEditor.TargetGlesGraphics;
    static OpenGLES_1_x: UnityEditor.TargetGlesGraphics;
    static OpenGLES_2_0: UnityEditor.TargetGlesGraphics;
    static OpenGLES_3_0: UnityEditor.TargetGlesGraphics;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TargetIOSGraphics extends System.Enum {
    protected constructor();
    static Automatic: UnityEditor.TargetIOSGraphics;
    static Metal: UnityEditor.TargetIOSGraphics;
    static OpenGLES_2_0: UnityEditor.TargetIOSGraphics;
    static OpenGLES_3_0: UnityEditor.TargetIOSGraphics;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSTargetResolution extends System.Enum {
    protected constructor();
    static Native: UnityEditor.iOSTargetResolution;
    static Resolution320p: UnityEditor.iOSTargetResolution;
    static Resolution640p: UnityEditor.iOSTargetResolution;
    static Resolution768p: UnityEditor.iOSTargetResolution;
    static ResolutionAutoPerformance: UnityEditor.iOSTargetResolution;
    static ResolutionAutoQuality: UnityEditor.iOSTargetResolution;
    value__: number;
  }
}
declare namespace UnityEditor {
  class iOSTargetOSVersion extends System.Enum {
    protected constructor();
    static iOS_4_0: UnityEditor.iOSTargetOSVersion;
    static iOS_4_1: UnityEditor.iOSTargetOSVersion;
    static iOS_4_2: UnityEditor.iOSTargetOSVersion;
    static iOS_4_3: UnityEditor.iOSTargetOSVersion;
    static iOS_5_0: UnityEditor.iOSTargetOSVersion;
    static iOS_5_1: UnityEditor.iOSTargetOSVersion;
    static iOS_6_0: UnityEditor.iOSTargetOSVersion;
    static iOS_7_0: UnityEditor.iOSTargetOSVersion;
    static iOS_7_1: UnityEditor.iOSTargetOSVersion;
    static iOS_8_0: UnityEditor.iOSTargetOSVersion;
    static iOS_8_1: UnityEditor.iOSTargetOSVersion;
    static Unknown: UnityEditor.iOSTargetOSVersion;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class PluginDesc extends System.ValueType {
    protected constructor();
    architecture: UnityEditorInternal.CPUArch;
    pluginPath: string;
  }
}
declare namespace UnityEditorInternal {
  class CPUArch extends System.Enum {
    protected constructor();
    static Any: UnityEditorInternal.CPUArch;
    static ARMv7: UnityEditorInternal.CPUArch;
    value__: number;
    static x86: UnityEditorInternal.CPUArch;
  }
}
declare namespace UnityEditor {
  class PluginImporter extends UnityEditor.AssetImporter {
    constructor();
    ClearSettings(): void;
    static GetAllImporters(): UnityEditor.PluginImporter[];
    GetCompatibleWithAnyPlatform(): boolean;
    GetCompatibleWithEditor(): boolean;
    GetCompatibleWithEditor(buildTargetGroup: string, buildTarget: string): boolean;
    GetCompatibleWithPlatform(platformName: string): boolean;
    GetCompatibleWithPlatform(platform: UnityEditor.BuildTarget): boolean;
    GetEditorData(key: string): string;
    GetExcludeEditorFromAnyPlatform(): boolean;
    GetExcludeFromAnyPlatform(platformName: string): boolean;
    GetExcludeFromAnyPlatform(platform: UnityEditor.BuildTarget): boolean;
    static GetImporters(platformName: string): UnityEditor.PluginImporter[];
    static GetImporters(buildTargetGroup: string, buildTarget: string): UnityEditor.PluginImporter[];
    static GetImporters(platform: UnityEditor.BuildTarget): UnityEditor.PluginImporter[];
    static GetImporters(buildTargetGroup: UnityEditor.BuildTargetGroup, buildTarget: UnityEditor.BuildTarget): UnityEditor.PluginImporter[];
    GetIsOverridable(): boolean;
    GetPlatformData(platformName: string, key: string): string;
    GetPlatformData(platform: UnityEditor.BuildTarget, key: string): string;
    SetCompatibleWithAnyPlatform(enable: boolean): void;
    SetCompatibleWithEditor(enable: boolean): void;
    SetCompatibleWithPlatform(platformName: string, enable: boolean): void;
    SetCompatibleWithPlatform(platform: UnityEditor.BuildTarget, enable: boolean): void;
    SetEditorData(key: string, value: string): void;
    SetExcludeEditorFromAnyPlatform(excludedFromAny: boolean): void;
    SetExcludeFromAnyPlatform(platformName: string, excludedFromAny: boolean): void;
    SetExcludeFromAnyPlatform(platform: UnityEditor.BuildTarget, excludedFromAny: boolean): void;
    SetIncludeInBuildDelegate(includeInBuildDelegate: ((path: string) => boolean)): void;
    SetPlatformData(platformName: string, key: string, value: string): void;
    SetPlatformData(platform: UnityEditor.BuildTarget, key: string, value: string): void;
    ShouldIncludeInBuild(): boolean;
    readonly isNativePlugin: boolean;
  }
}
declare namespace UnityEditor {
  class IEditablePoint {
    protected constructor();
    GetDefaultColor(): any;
    GetPointScale(): number;
    GetPosition(idx: number): any;
    GetPositions(): any;
    GetSelectedColor(): any;
    GetSelectedPositions(): any[];
    GetUnselectedPositions(): any[];
    SetPosition(idx: number, position: any): void;
    readonly Count: number;
  }
}
declare namespace UnityEditor {
  class PointEditor extends System.Object {
    constructor();
    static Draw(points: UnityEditor.IEditablePoint, cloudTransform: any, selection: number[], twoPassDrawing: boolean): void;
    static FindNearest(point: any, cloudTransform: any, points: UnityEditor.IEditablePoint): number;
    static MovePoints(points: UnityEditor.IEditablePoint, cloudTransform: any, selection: number[]): boolean;
    static SelectPoints(points: UnityEditor.IEditablePoint, cloudTransform: any, selection: any, firstSelect: boolean): boolean;
  }
}
declare namespace UnityEditor {
  class UnityBuildPostprocessor extends System.Object {
    constructor();
    OnProcessScene(scene: any): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor {
  class ProjectBrowser extends UnityEditor.EditorWindow {
    protected constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    AssetLabelListCallback(element: UnityEditor.PopupList.ListElement): void;
    FrameObject(instanceID: number, ping: boolean): void;
    static GetAllProjectBrowsers(): UnityEditor.ProjectBrowser[];
    GetCurrentVisibleNames(): string[];
    Init(): void;
    Initialized(): boolean;
    SetSearch(searchString: string): void;
    SetSearch(searchFilter: UnityEditor.SearchFilter): void;
    static ShowAssetStoreHitsWhileSearchingLocalAssetsChanged(): void;
    TypeListCallback(element: UnityEditor.PopupList.ListElement): void;
    readonly listAreaGridSize: number;
    m_SearchAllAssets: any;
    m_SearchAssetStore: any;
    m_SearchInFolders: any;
    static s_LastInteractedProjectBrowser: UnityEditor.ProjectBrowser;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class ItemType extends System.Enum {
    protected constructor();
    static Asset: UnityEditor.ProjectBrowser.ItemType;
    static SavedFilter: UnityEditor.ProjectBrowser.ItemType;
    value__: number;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class ViewMode extends System.Enum {
    protected constructor();
    static OneColumn: UnityEditor.ProjectBrowser.ViewMode;
    static TwoColumns: UnityEditor.ProjectBrowser.ViewMode;
    value__: number;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class SearchViewState extends System.Enum {
    protected constructor();
    static AllAssets: UnityEditor.ProjectBrowser.SearchViewState;
    static AssetStore: UnityEditor.ProjectBrowser.SearchViewState;
    static NotSearching: UnityEditor.ProjectBrowser.SearchViewState;
    static SubFolders: UnityEditor.ProjectBrowser.SearchViewState;
    value__: number;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class Styles extends System.Object {
    constructor();
    background: any;
    bottomBarBg: any;
    bottomResize: any;
    exposablePopup: any;
    exposablePopupItem: any;
    foldout: any;
    largeStatus: any;
    lockButton: any;
    m_CreateDropdownContent: any;
    m_EmptyFolderText: any;
    m_FilterByLabel: any;
    m_FilterByType: any;
    m_SaveFilterContent: any;
    m_SearchIn: any;
    m_ShowChildAssetsContent: any;
    previewBackground: any;
    previewTextureBackground: any;
    selectedPathLabel: any;
    smallStatus: any;
    tab: any;
    toolbarBack: any;
    topBarBg: any;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class SavedFiltersContextMenu extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class BreadCrumbListMenu extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class AssetStoreItemContextMenu extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class SearchFilterTreeItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, isFolder: boolean);
    readonly isFolder: boolean;
  }
}
declare namespace UnityEditor {
  class ProjectBrowserColumnOneTreeViewGUI extends UnityEditor.AssetsTreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    static GetListAreaGridSize(): number;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
  }
}
declare namespace UnityEditor {
  class AssetsTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    BeginCreateNewAsset(instanceID: number, endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, pathName: string, icon: any, resourceFile: string): void;
    BeginRowGUI(): void;
  }
}
declare namespace UnityEditor {
  class ProjectBrowserColumnOneTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    static GetAssetsFolderInstanceID(): number;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsVisibleRootNode(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
  }
}
declare namespace UnityEditor {
  class ProjectBrowserColumnOneTreeViewDragging extends UnityEditor.AssetsTreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor {
  class AssetsTreeViewDragging extends UnityEditor.IMGUI.Controls.TreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewDragging extends System.Object {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[], mouseDownPosition: any): boolean;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPosition: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    DragCleanup(revertExpanded: boolean): void;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, row: number): boolean;
    GetCurrentExpanded(): number[];
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    OnInitialize(): void;
    RestoreExpanded(ids: number[]): void;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
    drawRowMarkerAbove: boolean;
  }
}
declare namespace UnityEditor {
  class PopupList extends UnityEditor.PopupWindowContent {
    constructor(inputData: UnityEditor.PopupList.InputData);
    constructor(inputData: UnityEditor.PopupList.InputData, initialSelectionLabel: string);
    GetWindowHeight(): number;
    GetWindowSize(): any;
    GetWindowWidth(): number;
    OnClose(): void;
    OnGUI(windowRect: any): void;
  }
}
declare namespace UnityEditor.PopupList {
  class Gravity extends System.Enum {
    protected constructor();
    static Bottom: UnityEditor.PopupList.Gravity;
    static Top: UnityEditor.PopupList.Gravity;
    value__: number;
  }
}
declare namespace UnityEditor.PopupList {
  class ListElement extends System.Object {
    constructor(text: string, selected: boolean, score: number);
    constructor(text: string, selected: boolean);
    constructor(text: string);
    ResetScore(): void;
    enabled: boolean;
    filterScore: number;
    partiallySelected: boolean;
    selected: boolean;
    text: string;
    m_Content: any;
  }
}
declare namespace UnityEditor.PopupList {
  class InputData extends System.Object {
    constructor();
    BuildQuery(prefix: string): any;
    DeselectAll(): void;
    GetFilteredCount(prefix: string): number;
    GetFilteredList(prefix: string): any;
    NewOrMatchingElement(label: string): UnityEditor.PopupList.ListElement;
    ResetScores(): void;
    m_AllowCustom: boolean;
    m_CloseOnSelection: boolean;
    m_EnableAutoCompletion: boolean;
    m_ListElements: UnityEditor.PopupList.ListElement[];
    m_MaxCount: number;
    m_OnSelectCallback: ((element: UnityEditor.PopupList.ListElement) => void);
    m_SortAlphabetically: boolean;
  }
}
declare namespace UnityEditor.PopupList {
  class Styles extends System.Object {
    constructor();
    background: any;
    customTextField: any;
    customTextFieldCancelButton: any;
    customTextFieldCancelButtonEmpty: any;
    label: any;
    menuItem: any;
    menuItemMixed: any;
  }
}
declare namespace UnityEditorInternal {
  class iOSEditorPrefKeys extends System.Object {
    constructor();
    static kDefaultiOSAutomaticallySignBuild: string;
    static kDefaultiOSAutomaticSignTeamId: string;
    static kDefaultiOSProvisioningProfileUUID: string;
    static kDefaulttvOSProvisioningProfileUUID: string;
  }
}
declare namespace UnityEditorInternal {
  class ProvisioningProfile extends System.Object {
    protected constructor();
    UUID: string;
  }
}
declare namespace UnityEditorInternal {
  class ProvisioningProfileGUI extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class RagdollBuilder extends UnityEditor.ScriptableWizard {
    constructor();
    flipForward: boolean;
    head: any;
    leftArm: any;
    leftElbow: any;
    leftFoot: any;
    leftHips: any;
    leftKnee: any;
    middleSpine: any;
    pelvis: any;
    rightArm: any;
    rightElbow: any;
    rightFoot: any;
    rightHips: any;
    rightKnee: any;
    strength: number;
    totalMass: number;
  }
}
declare namespace UnityEditor.RagdollBuilder {
  class BoneInfo extends System.Object {
    constructor();
    anchor: any;
    axis: any;
    children: any;
    colliderType: any;
    density: number;
    joint: any;
    maxLimit: number;
    minLimit: number;
    name: string;
    normalAxis: any;
    parent: UnityEditor.RagdollBuilder.BoneInfo;
    radiusScale: number;
    summedMass: number;
    swingLimit: number;
  }
}
declare namespace UnityEditor {
  class RetainedMode extends UnityEditor.AssetPostprocessor {
    constructor();
    static FlagStyleSheetChange(): void;
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeMethodInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeClassInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeOnLoadManager extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class SceneHierarchySortingWindow extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.SceneHierarchySortingWindow {
  class Styles extends System.Object {
    constructor();
    background: any;
    menuItem: any;
  }
}
declare namespace UnityEditor.SceneHierarchySortingWindow {
  class InputData extends System.Object {
    constructor();
    m_Name: string;
    m_Selected: boolean;
    m_TypeName: string;
  }
}
declare namespace UnityEditor {
  class SceneHierarchyWindow extends UnityEditor.SearchableEditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    DirtySortingMethods(): void;
    FrameObject(instanceID: number, ping: boolean): void;
    static GetAllSceneHierarchyWindows(): UnityEditor.SceneHierarchyWindow[];
    GetCurrentVisibleObjects(): string[];
    static IsSceneHeaderInHierarchyWindow(scene: any): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    ReloadData(): void;
    SearchChanged(): void;
    SetCurrentRootInstanceID(instanceID: number): void;
    SetExpandedRecursive(id: number, expand: boolean): void;
    SetSortFunction(sortType: any): void;
    static readonly lastInteractedHierarchyWindow: UnityEditor.SceneHierarchyWindow;
    static s_Debug: boolean;
  }
}
declare namespace UnityEditor {
  class SearchableEditorWindow extends UnityEditor.EditorWindow {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
  }
}
declare namespace UnityEditor.SceneHierarchyWindow {
  class Styles extends System.Object {
    constructor();
    createContent: any;
    defaultSortingContent: any;
    fetchWarning: any;
    lockButton: any;
    MiniButton: any;
  }
}
declare namespace UnityEditor {
  class HierarchySorting extends System.Object {
    protected constructor();
    readonly content: any;
  }
}
declare namespace UnityEditor {
  class TransformSorting extends UnityEditor.HierarchySorting {
    constructor();
    readonly content: any;
  }
}
declare namespace UnityEditor {
  class AlphabeticalSorting extends UnityEditor.HierarchySorting {
    constructor();
    readonly content: any;
  }
}
declare namespace UnityEditor {
  class TransformSort extends UnityEditor.BaseHierarchySort {
    constructor();
    readonly content: any;
  }
}
declare namespace UnityEditor {
  class BaseHierarchySort extends System.Object {
    protected constructor();
    Compare(lhs: any, rhs: any): number;
    readonly content: any;
  }
}
declare namespace UnityEditor {
  class AlphabeticalSort extends UnityEditor.BaseHierarchySort {
    constructor();
    readonly content: any;
  }
}
declare namespace UnityEditor {
  class FilePathAttribute extends System.Attribute {
    constructor(relativePath: string, location: UnityEditor.FilePathAttribute.Location);
    filepath: string;
  }
}
declare namespace UnityEditor.FilePathAttribute {
  class Location extends System.Enum {
    protected constructor();
    static PreferencesFolder: UnityEditor.FilePathAttribute.Location;
    static ProjectFolder: UnityEditor.FilePathAttribute.Location;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ScriptEditorUtility extends System.Object {
    constructor();
    static GetExternalScriptEditor(): string;
    static GetExternalScriptEditorArgs(): string;
    static GetFoundScriptEditorPaths(platform: any): string[];
    static GetScriptEditorFromPath(path: string): UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static GetScriptEditorFromPreferences(): UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static IsScriptEditorSpecial(path: string): boolean;
    static SetExternalScriptEditor(path: string): void;
    static SetExternalScriptEditorArgs(args: string): void;
  }
}
declare namespace UnityEditorInternal.ScriptEditorUtility {
  class ScriptEditor extends System.Enum {
    protected constructor();
    static Internal: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static MonoDevelop: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static Other: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static Rider: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    value__: number;
    static VisualStudio: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static VisualStudioCode: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
    static VisualStudioExpress: UnityEditorInternal.ScriptEditorUtility.ScriptEditor;
  }
}
declare namespace UnityEditor {
  class SearchUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class IPrefType {
    protected constructor();
    FromUniqueString(sstr: string): void;
    Load(): void;
    ToUniqueString(): string;
  }
}
declare namespace UnityEditor {
  class PrefColor extends System.Object {
    constructor();
    constructor(name: string, defaultRed: number, defaultGreen: number, defaultBlue: number, defaultAlpha: number);
    constructor(name: string, defaultRed: number, defaultGreen: number, defaultBlue: number, defaultAlpha: number, defaultRed2: number, defaultGreen2: number, defaultBlue2: number, defaultAlpha2: number);
    FromUniqueString(s: string): void;
    Load(): void;
    ToUniqueString(): string;
    Color: any;
    readonly Name: string;
  }
}
declare namespace UnityEditor {
  class PrefKey extends System.Object {
    constructor();
    constructor(name: string, shortcut: string);
    FromUniqueString(s: string): void;
    Load(): void;
    ToUniqueString(): string;
    readonly activated: boolean;
    KeyboardEvent: any;
    readonly Name: string;
  }
}
declare namespace UnityEditor {
  class Settings extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class SavedInt extends System.Object {
    constructor(name: string, value: number);
    value: number;
  }
}
declare namespace UnityEditor {
  class SavedFloat extends System.Object {
    constructor(name: string, value: number);
    value: number;
  }
}
declare namespace UnityEditor {
  class SavedBool extends System.Object {
    constructor(name: string, value: boolean);
    value: boolean;
  }
}
declare namespace UnityEditor {
  class ScriptingProceduralMaterialInformation extends System.ValueType {
    protected constructor();
    animationUpdateRate: number;
    generateAllOutputs: boolean;
    generateMipMaps: boolean;
    offset: any;
    scale: any;
  }
}
declare namespace UnityEditor {
  class SupportedRenderingFeatures extends System.ValueType {
    protected constructor();
    static active: UnityEditor.SupportedRenderingFeatures;
    static readonly Default: UnityEditor.SupportedRenderingFeatures;
    reflectionProbe: UnityEditor.SupportedRenderingFeatures.ReflectionProbe;
  }
}
declare namespace UnityEditor.SupportedRenderingFeatures {
  class ReflectionProbe extends System.Enum {
    protected constructor();
    static None: UnityEditor.SupportedRenderingFeatures.ReflectionProbe;
    static Rotation: UnityEditor.SupportedRenderingFeatures.ReflectionProbe;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VisualStudioVersion extends System.Enum {
    protected constructor();
    static Invalid: UnityEditor.VisualStudioVersion;
    value__: number;
    static VisualStudio2008: UnityEditor.VisualStudioVersion;
    static VisualStudio2010: UnityEditor.VisualStudioVersion;
    static VisualStudio2012: UnityEditor.VisualStudioVersion;
    static VisualStudio2013: UnityEditor.VisualStudioVersion;
    static VisualStudio2015: UnityEditor.VisualStudioVersion;
    static VisualStudio2017: UnityEditor.VisualStudioVersion;
  }
}
declare namespace UnityEditor {
  class VisualStudioPath extends System.Object {
    constructor(path: string, edition?: string);
    Edition: string;
    Path: string;
  }
}
declare namespace UnityEditor {
  class SyncVS extends UnityEditor.AssetPostprocessor {
    constructor();
    static CreateIfDoesntExist(): void;
    static FindBestVisualStudio(): string;
    static PostprocessSyncProject(importedAssets: string[], addedAssets: string[], deletedAssets: string[], movedAssets: string[], movedFromAssetPaths: string[]): void;
    static ProjectExists(): boolean;
    static SyncIfFirstFileOpenSinceDomainLoad(): void;
    static SyncSolution(): void;
    static SyncVisualStudioProjectIfItAlreadyExists(): void;
  }
}
declare namespace UnityEditor.SyncVS {
  class SolutionSynchronizationSettings extends UnityEditor.VisualStudioIntegration.DefaultSolutionSynchronizationSettings {
    constructor();
    GetProjectFooterTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    GetProjectHeaderTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    readonly Defines: string[];
    readonly EditorAssemblyPath: string;
    readonly EngineAssemblyPath: string;
    readonly SolutionTemplate: string;
    readonly VisualStudioVersion: number;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class DefaultSolutionSynchronizationSettings extends System.Object {
    constructor();
    GetProjectFooterTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    GetProjectHeaderTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    readonly Defines: string[];
    readonly EditorAssemblyPath: string;
    readonly EngineAssemblyPath: string;
    readonly MonoLibFolder: string;
    readonly SolutionProjectConfigurationTemplate: string;
    readonly SolutionProjectEntryTemplate: string;
    readonly SolutionTemplate: string;
    readonly VisualStudioVersion: number;
  }
}
declare namespace UnityEditor.SyncVS {
  class BuildTargetChangedHandler extends System.Object {
    constructor();
    OnActiveBuildTargetChanged(oldTarget: UnityEditor.BuildTarget, newTarget: UnityEditor.BuildTarget): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.U2D.Common {
  class TexturePlatformSettingsViewController extends System.Object {
    constructor();
    HandleDefaultSettings(platformSettings: UnityEditor.TextureImporterPlatformSettings[], view: UnityEditor.U2D.Interface.ITexturePlatformSettingsView): boolean;
    HandlePlatformSettings(buildTarget: UnityEditor.BuildTarget, platformSettings: UnityEditor.TextureImporterPlatformSettings[], view: UnityEditor.U2D.Interface.ITexturePlatformSettingsView, formatHelper: UnityEditor.U2D.Interface.ITexturePlatformSettingsFormatHelper): boolean;
  }
}
declare namespace UnityEditor.U2D.Common {
  class TexturePlatformSettingsFormatHelper extends System.Object {
    constructor();
    AcquireTextureFormatValuesAndStrings(buildTarget: UnityEditor.BuildTarget, formatValues: any, formatStrings: any): void;
    TextureFormatRequireCompressionQualityInput(format: UnityEditor.TextureImporterFormat): boolean;
  }
}
declare namespace UnityEditor.U2D.Common {
  class TexturePlatformSettingsView extends System.Object {
    protected constructor();
    DrawCompression(defaultValue: UnityEditor.TextureImporterCompression, isMixedValue: boolean, changed: any): UnityEditor.TextureImporterCompression;
    DrawCompressionQualityPopup(defaultValue: number, isMixedValue: boolean, changed: any): number;
    DrawCompressionQualitySlider(defaultValue: number, isMixedValue: boolean, changed: any): number;
    DrawFormat(defaultValue: UnityEditor.TextureImporterFormat, displayValues: number[], displayStrings: string[], isMixedValue: boolean, isDisabled: boolean, changed: any): UnityEditor.TextureImporterFormat;
    DrawMaxSize(defaultValue: number, isMixedValue: boolean, changed: any): number;
    DrawOverride(defaultValue: boolean, isMixedValue: boolean, changed: any): boolean;
    DrawUseCrunchedCompression(defaultValue: boolean, isMixedValue: boolean, changed: any): boolean;
    buildPlatformTitle: string;
  }
}
declare namespace UnityEditor.U2D.Common.TexturePlatformSettingsView {
  class Styles extends System.Object {
    constructor();
    compressionLabel: any;
    compressionQualityLabel: any;
    compressionQualitySliderLabel: any;
    kMaxTextureSizeStrings: any[];
    kMaxTextureSizeValues: number[];
    kMobileCompressionQualityOptions: any[];
    kTextureCompressionOptions: any[];
    kTextureCompressionValues: number[];
    maxTextureSizeLabel: any;
    textureFormatLabel: any;
    useCrunchedCompressionLabel: any;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class IAssetDatabase {
    protected constructor();
    GetAssetImporterFromPath(path: string): UnityEditor.U2D.Interface.ITextureImporter;
    GetAssetPath(o: UnityEngine.Object): string;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class AssetDatabaseSystem extends System.Object {
    constructor();
    GetAssetImporterFromPath(path: string): UnityEditor.U2D.Interface.ITextureImporter;
    GetAssetPath(o: UnityEngine.Object): string;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class ITextureImporter extends System.Object {
    protected constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetWidthAndHeight(width: any, height: any): void;
    readonly assetPath: string;
    readonly spriteBorder: any;
    readonly spriteImportMode: UnityEditor.SpriteImportMode;
    readonly spritePivot: any;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class TextureImporter extends UnityEditor.U2D.Interface.ITextureImporter {
    constructor(textureImporter: UnityEditor.TextureImporter);
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetWidthAndHeight(width: any, height: any): void;
    readonly assetPath: string;
    readonly spriteBorder: any;
    readonly spriteImportMode: UnityEditor.SpriteImportMode;
    readonly spritePivot: any;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class IEvent {
    protected constructor();
    GetTypeForControl(id: number): any;
    Use(): void;
    readonly alt: boolean;
    readonly button: number;
    readonly commandName: string;
    readonly control: boolean;
    readonly keyCode: any;
    readonly modifiers: any;
    readonly mousePosition: any;
    readonly shift: boolean;
    readonly type: any;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class Event extends System.Object {
    constructor();
    GetTypeForControl(id: number): any;
    Use(): void;
    readonly alt: boolean;
    readonly button: number;
    readonly commandName: string;
    readonly control: boolean;
    readonly keyCode: any;
    readonly modifiers: any;
    readonly mousePosition: any;
    readonly shift: boolean;
    readonly type: any;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class IEventSystem {
    protected constructor();
    readonly current: UnityEngine.U2D.Interface.IEvent;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class EventSystem extends System.Object {
    constructor();
    readonly current: UnityEngine.U2D.Interface.IEvent;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class IGL {
    protected constructor();
    Begin(mode: number): void;
    Color(c: any): void;
    End(): void;
    MultMatrix(m: any): void;
    PopMatrix(): void;
    PushMatrix(): void;
    Vertex(v: any): void;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class GLSystem extends System.Object {
    constructor();
    Begin(mode: number): void;
    Color(c: any): void;
    End(): void;
    MultMatrix(m: any): void;
    PopMatrix(): void;
    PushMatrix(): void;
    Vertex(v: any): void;
  }
}
declare namespace UnityEngine {
  class IGUIUtility {
    protected constructor();
    GetControlID(hint: number, focus: any): number;
    GetPermanentControlID(): number;
    hotControl: number;
    keyboardControl: number;
  }
}
declare namespace UnityEngine {
  class GUIUtilitySystem extends System.Object {
    constructor();
    GetControlID(hint: number, focus: any): number;
    GetPermanentControlID(): number;
    hotControl: number;
    keyboardControl: number;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class IHandles {
    protected constructor();
    DrawAAPolyLine(lineTex: UnityEngine.U2D.Interface.ITexture2D, width: number, points: any[]): void;
    DrawAAPolyLine(lineTex: UnityEngine.U2D.Interface.ITexture2D, points: any[]): void;
    DrawLine(p1: any, p2: any): void;
    MakeBezierPoints(startPosition: any, endPosition: any, startTangent: any, endTangent: any, division: number): any[];
    SetDiscSectionPoints(dest: any[], center: any, normal: any, from: any, angle: number, radius: number): void;
    color: any;
    matrix: any;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class HandlesSystem extends System.Object {
    constructor();
    DrawAAPolyLine(lineTex: UnityEngine.U2D.Interface.ITexture2D, width: number, points: any[]): void;
    DrawAAPolyLine(lineTex: UnityEngine.U2D.Interface.ITexture2D, points: any[]): void;
    DrawLine(p1: any, p2: any): void;
    static GetSystem(): UnityEditor.U2D.Interface.IHandles;
    MakeBezierPoints(startPosition: any, endPosition: any, startTangent: any, endTangent: any, division: number): any[];
    SetDiscSectionPoints(dest: any[], center: any, normal: any, from: any, angle: number, radius: number): void;
    static SetSystem(system: UnityEditor.U2D.Interface.IHandles): void;
    color: any;
    matrix: any;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class ITexture2D extends System.Object {
    protected constructor();
    Apply(): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetPixels32(): any[];
    SetPixels(c: any[]): void;
    filterMode: any;
    readonly format: any;
    readonly height: number;
    readonly mipMapBias: number;
    readonly name: string;
    readonly width: number;
  }
}
declare namespace UnityEngine.U2D.Interface {
  class Texture2D extends UnityEngine.U2D.Interface.ITexture2D {
    constructor(texture: any);
    Apply(): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetPixels32(): any[];
    SetPixels(c: any[]): void;
    filterMode: any;
    readonly format: any;
    readonly height: number;
    readonly mipMapBias: number;
    readonly name: string;
    readonly width: number;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class ITexturePlatformSettingsView {
    protected constructor();
    DrawCompression(defaultValue: UnityEditor.TextureImporterCompression, isMixedValue: boolean, changed: any): UnityEditor.TextureImporterCompression;
    DrawCompressionQualityPopup(defaultValue: number, isMixedValue: boolean, changed: any): number;
    DrawCompressionQualitySlider(defaultValue: number, isMixedValue: boolean, changed: any): number;
    DrawFormat(defaultValue: UnityEditor.TextureImporterFormat, displayValues: number[], displayStrings: string[], isMixedValue: boolean, isDisabled: boolean, changed: any): UnityEditor.TextureImporterFormat;
    DrawMaxSize(defaultValue: number, isMixedValue: boolean, changed: any): number;
    DrawOverride(defaultValue: boolean, isMixedValue: boolean, changed: any): boolean;
    DrawUseCrunchedCompression(defaultValue: boolean, isMixedValue: boolean, changed: any): boolean;
    buildPlatformTitle: string;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class ITexturePlatformSettingsFormatHelper {
    protected constructor();
    AcquireTextureFormatValuesAndStrings(buildTarget: UnityEditor.BuildTarget, displayValues: any, displayStrings: any): void;
    TextureFormatRequireCompressionQualityInput(format: UnityEditor.TextureImporterFormat): boolean;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class ITexturePlatformSettingsController {
    protected constructor();
    HandleDefaultSettings(platformSettings: UnityEditor.TextureImporterPlatformSettings[], view: UnityEditor.U2D.Interface.ITexturePlatformSettingsView): boolean;
    HandlePlatformSettings(buildTarget: UnityEditor.BuildTarget, platformSettings: UnityEditor.TextureImporterPlatformSettings[], view: UnityEditor.U2D.Interface.ITexturePlatformSettingsView, formatHelper: UnityEditor.U2D.Interface.ITexturePlatformSettingsFormatHelper): boolean;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class IUndoableObject {
    protected constructor();
  }
}
declare namespace UnityEditor.U2D.Interface {
  class IUndoSystem {
    protected constructor();
    ClearUndo(obj: UnityEditor.U2D.Interface.IUndoableObject): void;
    RegisterCompleteObjectUndo(obj: UnityEditor.U2D.Interface.IUndoableObject, undoText: string): void;
    RegisterUndoCallback(undoCallback: (() => void)): void;
    UnregisterUndoCallback(undoCallback: (() => void)): void;
  }
}
declare namespace UnityEditor.U2D.Interface {
  class UndoSystem extends System.Object {
    constructor();
    ClearUndo(obj: UnityEditor.U2D.Interface.IUndoableObject): void;
    RegisterCompleteObjectUndo(obj: UnityEditor.U2D.Interface.IUndoableObject, undoText: string): void;
    RegisterUndoCallback(undoCallback: (() => void)): void;
    UnregisterUndoCallback(undoCallback: (() => void)): void;
  }
}
declare namespace UnityEditor.U2D {
  class SpriteAtlasInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
  }
}
declare namespace UnityEditor.U2D.SpriteAtlasInspector {
  class SpriteAtlasInspectorPlatformSettingView extends UnityEditor.U2D.Common.TexturePlatformSettingsView {
    constructor(showMaxSizeOption: boolean);
    DrawMaxSize(defaultValue: number, isMixedValue: boolean, changed: any): number;
  }
}
declare namespace UnityEditor.U2D.SpriteAtlasInspector {
  class Styles extends System.Object {
    constructor();
    alphaIcon: any;
    atlasTypeLabel: any;
    atlasTypeOptions: any[];
    atlasTypeValues: number[];
    bindAsDefaultLabel: any;
    copyMasterButton: any;
    defaultPlatformLabel: any;
    disabledPackLabel: any;
    dropzoneStyle: any;
    enableRotationLabel: any;
    enableTightPackingLabel: any;
    generateMipMapLabel: any;
    largeZoom: any;
    masterAtlasLabel: any;
    packableElementHash: number;
    packableListLabel: any;
    packableSelectorHash: number;
    packButton: any;
    packingParametersLabel: any;
    paddingLabel: any;
    paddingOptions: any[];
    paddingValues: number[];
    preDropDown: any;
    previewButton: any;
    previewLabel: any;
    previewSlider: any;
    previewSliderThumb: any;
    readWrite: any;
    RGBIcon: any;
    smallZoom: any;
    sRGBLabel: any;
    textureSettingLabel: any;
    variantMultiplierLabel: any;
    variantSettingLabel: any;
  }
}
declare namespace UnityEditor.U2D.SpriteAtlasInspector {
  class AtlasType extends System.Enum {
    protected constructor();
    static Master: UnityEditor.U2D.SpriteAtlasInspector.AtlasType;
    static Undefined: UnityEditor.U2D.SpriteAtlasInspector.AtlasType;
    value__: number;
    static Variant: UnityEditor.U2D.SpriteAtlasInspector.AtlasType;
  }
}
declare namespace UnityEditor {
  class ISpriteEditorModule {
    protected constructor();
    CanBeActivated(): boolean;
    DoTextureGUI(): void;
    DrawToolbarGUI(drawArea: any): void;
    OnModuleActivate(): void;
    OnModuleDeactivate(): void;
    OnPostGUI(): void;
    readonly moduleName: string;
  }
}
declare namespace UnityEditor {
  class ISpriteEditor {
    protected constructor();
    ApplyOrRevertModification(apply: boolean): void;
    ClearProgressBar(): void;
    DisplayProgressBar(title: string, content: string, progress: number): void;
    GetReadableTexture2D(): UnityEngine.U2D.Interface.ITexture2D;
    HandleSpriteSelection(): void;
    RequestRepaint(): void;
    SetDataModified(): void;
    readonly editingDisabled: boolean;
    readonly previewTexture: UnityEngine.U2D.Interface.ITexture2D;
    selectedSpriteRect: UnityEditor.SpriteRect;
    readonly selectedTexture: UnityEngine.U2D.Interface.ITexture2D;
    readonly spriteRects: UnityEditor.ISpriteRectCache;
    readonly windowDimension: any;
  }
}
declare namespace UnityEditor {
  class ISpriteRectCache {
    protected constructor();
    AddRect(r: UnityEditor.SpriteRect): void;
    ClearAll(): void;
    Contains(spriteRect: UnityEditor.SpriteRect): boolean;
    GetIndex(spriteRect: UnityEditor.SpriteRect): number;
    RectAt(i: number): UnityEditor.SpriteRect;
    RemoveRect(r: UnityEditor.SpriteRect): void;
    readonly Count: number;
  }
}
declare namespace UnityEditor.U2D {
  class SpriteOutlineModule extends System.Object {
    constructor(sem: UnityEditor.ISpriteEditor, es: UnityEngine.U2D.Interface.IEventSystem, us: UnityEditor.U2D.Interface.IUndoSystem, ad: UnityEditor.U2D.Interface.IAssetDatabase, gu: UnityEngine.IGUIUtility, sef: UnityEditor.IShapeEditorFactory, outlineTexture: UnityEngine.U2D.Interface.ITexture2D);
    CanBeActivated(): boolean;
    CreateNewOutline(rectOutline: any): void;
    DoTextureGUI(): void;
    DrawToolbarGUI(drawArea: any): void;
    GetPointPosition(outlineIndex: number, pointIndex: number): any;
    GetPointsCount(outlineIndex: number): number;
    InsertPointAt(outlineIndex: number, pointIndex: number, position: any): void;
    OnModuleActivate(): void;
    OnModuleDeactivate(): void;
    OnPostGUI(): void;
    RemovePointAt(outlineIndex: number, i: number): void;
    SetPointPosition(outlineIndex: number, pointIndex: number, position: any): void;
    SetupShapeEditor(): void;
    SnapPoint(position: any): any;
    UpdateShapeEditors(): void;
    readonly moduleName: string;
  }
}
declare namespace UnityEditor.U2D.SpriteOutlineModule {
  class Styles extends System.Object {
    constructor();
    generateOutlineLabel: any;
    generatingOutlineDialogContent: any;
    generatingOutlineDialogTitle: any;
    outlineTolerance: any;
    snapButtonLabel: any;
    spriteBorderColor: any;
  }
}
declare namespace UnityEditor.U2D {
  class SpritePhysicsShapeModule extends UnityEditor.U2D.SpriteOutlineModule {
    constructor(sem: UnityEditor.ISpriteEditor, ege: UnityEngine.U2D.Interface.IEventSystem, us: UnityEditor.U2D.Interface.IUndoSystem, ad: UnityEditor.U2D.Interface.IAssetDatabase, gu: UnityEngine.IGUIUtility, sef: UnityEditor.IShapeEditorFactory, outlineTexture: UnityEngine.U2D.Interface.ITexture2D);
    readonly moduleName: string;
  }
}
declare namespace UnityEditor {
  class SpriteFrameModule extends UnityEditor.SpriteFrameModuleBase {
    constructor(sw: UnityEditor.ISpriteEditor, es: UnityEngine.U2D.Interface.IEventSystem, us: UnityEditor.U2D.Interface.IUndoSystem, ad: UnityEditor.U2D.Interface.IAssetDatabase);
    AddSpriteWithUniqueName(rect: any, alignment: number, pivot: any, colliderAlphaCutoff: number, colliderDetail: number, nameIndexingHint: number): UnityEditor.SpriteRect;
    CanBeActivated(): boolean;
    CreateSprite(rect: any): void;
    DeleteSprite(): void;
    DoAutomaticSlicing(minimumSpriteSize: number, alignment: number, pivot: any, slicingMethod: UnityEditor.SpriteFrameModule.AutoSlicingMethod): void;
    DoGridSlicing(size: any, offset: any, padding: any, alignment: number, pivot: any): void;
    DoTextureGUI(): void;
    DrawToolbarGUI(toolbarRect: any): void;
    DuplicateSprite(): void;
    OnModuleActivate(): void;
    OnModuleDeactivate(): void;
    ScaleSpriteRect(r: any): void;
    TrimAlpha(): void;
  }
}
declare namespace UnityEditor {
  class SpriteFrameModuleBase extends System.Object {
    protected constructor();
    CanBeActivated(): boolean;
    CurrentSelectedSpriteIndex(): number;
    DoTextureGUI(): void;
    DrawToolbarGUI(drawArea: any): void;
    GetSpriteBorderAt(i: number): any;
    GetSpriteOutlineAt(i: number): UnityEditor.SpriteOutline[];
    GetSpriteRectAt(i: number): any;
    OnModuleActivate(): void;
    OnModuleDeactivate(): void;
    OnPostGUI(): void;
    SetSpritePivotAndAlignment(pivot: any, alignment: any): void;
    readonly containsMultipleSprites: boolean;
    readonly hasSelected: boolean;
    readonly moduleName: string;
    readonly selectedSpriteAlignment: any;
    selectedSpriteBorder: any;
    selectedSpriteName: string;
    readonly selectedSpritePivot: any;
    selectedSpriteRect: any;
    readonly spriteCount: number;
  }
}
declare namespace UnityEditor.SpriteFrameModule {
  class AutoSlicingMethod extends System.Enum {
    protected constructor();
    static DeleteAll: UnityEditor.SpriteFrameModule.AutoSlicingMethod;
    static Safe: UnityEditor.SpriteFrameModule.AutoSlicingMethod;
    static Smart: UnityEditor.SpriteFrameModule.AutoSlicingMethod;
    value__: number;
  }
}
declare namespace UnityEditor.SpriteFrameModule {
  class SpriteFrameModuleStyles extends System.Object {
    protected constructor();
    static cancelButtonLabel: any;
    static okButtonLabel: any;
    static sliceButtonLabel: any;
    static trimButtonLabel: any;
  }
}
declare namespace UnityEditor.SpriteFrameModuleBase {
  class GizmoMode extends System.Enum {
    protected constructor();
    static BorderEditing: UnityEditor.SpriteFrameModuleBase.GizmoMode;
    static RectEditing: UnityEditor.SpriteFrameModuleBase.GizmoMode;
    value__: number;
  }
}
declare namespace UnityEditor.SpriteFrameModuleBase {
  class Styles extends System.Object {
    constructor();
    bLabel: any;
    borderLabel: any;
    createRect: any;
    customPivotLabel: any;
    dragBorderdot: any;
    dragBorderDotActive: any;
    dragdot: any;
    dragdotactive: any;
    hLabel: any;
    lLabel: any;
    nameLabel: any;
    pivotdot: any;
    pivotdotactive: any;
    pivotLabel: any;
    positionLabel: any;
    rLabel: any;
    spriteAlignmentOptions: any[];
    spriteLabel: any;
    tLabel: any;
    toolbar: any;
    wLabel: any;
    xLabel: any;
    yLabel: any;
  }
}
declare namespace UnityEditor {
  class SpritePolygonModeModule extends UnityEditor.SpriteFrameModuleBase {
    constructor(sw: UnityEditor.ISpriteEditor, es: UnityEngine.U2D.Interface.IEventSystem, us: UnityEditor.U2D.Interface.IUndoSystem, ad: UnityEditor.U2D.Interface.IAssetDatabase);
    CanBeActivated(): boolean;
    DoTextureGUI(): void;
    DrawToolbarGUI(toolbarRect: any): void;
    GeneratePolygonOutline(): void;
    GetPolygonSideCount(): number;
    OnModuleActivate(): void;
    OnModuleDeactivate(): void;
    OnPostGUI(): void;
    polygonSides: number;
    showChangeShapeWindow: boolean;
  }
}
declare namespace UnityEditor.SpritePolygonModeModule {
  class SpritePolygonModeStyles extends System.Object {
    protected constructor();
    static changeButtonLabel: any;
    static changeShapeLabel: any;
    static polygonChangeShapeHelpBoxContent: any;
    static sidesLabel: any;
  }
}
declare namespace UnityEditor.Accessibility {
  class ColorBlindCondition extends System.Enum {
    protected constructor();
    static Default: UnityEditor.Accessibility.ColorBlindCondition;
    static Deuteranopia: UnityEditor.Accessibility.ColorBlindCondition;
    static Protanopia: UnityEditor.Accessibility.ColorBlindCondition;
    static Tritanopia: UnityEditor.Accessibility.ColorBlindCondition;
    value__: number;
  }
}
declare namespace UnityEditor.Accessibility {
  class UserAccessiblitySettings extends System.Object {
    protected constructor();
    static colorBlindCondition: UnityEditor.Accessibility.ColorBlindCondition;
    static colorBlindConditionChanged: (() => void);
  }
}
declare namespace UnityEditor.Experimental.Animations {
  class GameObjectRecorder extends UnityEngine.Object {
    constructor();
    Bind(binding: UnityEditor.EditorCurveBinding): void;
    BindAll(target: any, recursive: boolean): void;
    BindComponent(target: any, componentType: any, recursive: boolean): void;
    GetBindings(): UnityEditor.EditorCurveBinding[];
    ResetRecording(): void;
    SaveToClip(clip: any): void;
    TakeSnapshot(dt: number): void;
    readonly currentTime: number;
    readonly isRecording: boolean;
    root: any;
  }
}
declare namespace UnityEditorInternal {
  class MaterialAnimationUtility extends System.Object {
    protected constructor();
    static ApplyMaterialModificationToAnimationRecording(materialProp: UnityEditor.MaterialProperty, changedMask: number, target: any, oldValue: any): boolean;
    static MaterialPropertyToPropertyModifications(materialProp: UnityEditor.MaterialProperty, target: any): UnityEditor.PropertyModification[];
    static OverridePropertyColor(materialProp: UnityEditor.MaterialProperty, target: any, color: any): boolean;
    static SetupMaterialPropertyBlock(materialProp: UnityEditor.MaterialProperty, changedMask: number, target: any): void;
    static TearDownMaterialPropertyBlock(target: any): void;
  }
}
declare namespace UnityEditor.Animations {
  class MecanimUtilities extends System.Object {
    constructor();
    static StateMachineRelativePath(parent: UnityEditor.Animations.AnimatorStateMachine, toFind: UnityEditor.Animations.AnimatorStateMachine, hierarchy: any): boolean;
  }
}
  class SerializedStringTable extends System.Object {
    constructor();
    Contains(key: string): boolean;
    Get(key: string): number;
    Remove(key: string): void;
    Set(key: string): void;
    Set(key: string, value: number): void;
    readonly hashtable: any;
    readonly Length: number;
  }
declare namespace UnityEditor.Animations {
  class PushUndoIfNeeded extends System.ValueType {
    protected constructor();
    DoUndo(target: UnityEngine.Object, undoOperation: string): void;
    pushUndo: boolean;
  }
}
declare namespace UnityEditor.Animations.PushUndoIfNeeded {
  class PushUndoIfNeededImpl extends System.Object {
    constructor(pushUndo: boolean);
    DoUndo(target: UnityEngine.Object, undoOperation: string): void;
    m_PushUndo: boolean;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorDefaultTransition extends UnityEngine.ScriptableObject {
    constructor();
  }
}
declare namespace UnityEditor {
  class TickHandler extends System.Object {
    constructor();
    GetLevelWithMinSeparation(pixelSeparation: number): number;
    GetPeriodOfLevel(level: number): number;
    GetStrengthOfLevel(level: number): number;
    GetTicksAtLevel(level: number, excludeTicksFromHigherlevels: boolean): number[];
    SetRanges(minValue: number, maxValue: number, minPixel: number, maxPixel: number): void;
    SetTickModulos(tickModulos: number[]): void;
    SetTickModulosForFrameRate(frameRate: number): void;
    SetTickStrengths(tickMinSpacing: number, tickMaxSpacing: number, sqrt: boolean): void;
    readonly tickLevels: number;
  }
}
declare namespace UnityEditor {
  class TickStyle extends System.Object {
    constructor();
    centerLabel: boolean;
    distFull: number;
    distLabel: number;
    distMin: number;
    labelColor: UnityEditor.EditorGUIUtility.SkinnedColor;
    stubs: boolean;
    tickColor: UnityEditor.EditorGUIUtility.SkinnedColor;
    unit: string;
  }
}
declare namespace UnityEditor {
  class TransitionPreview extends System.Object {
    constructor();
    DoTransitionPreview(): void;
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    SetTransition(transition: UnityEditor.Animations.AnimatorStateTransition, sourceState: UnityEditor.Animations.AnimatorState, destinationState: UnityEditor.Animations.AnimatorState, srcLayer: UnityEditor.Animations.AnimatorControllerLayer, previewObject: any): void;
    mustResample: boolean;
  }
}
declare namespace UnityEditor.TransitionPreview {
  class ParameterInfo extends System.Object {
    constructor();
    m_Name: string;
    m_Value: number;
  }
}
declare namespace UnityEditor.TransitionPreview {
  class TransitionInfo extends System.Object {
    constructor();
    IsEqual(info: UnityEditor.TransitionPreview.TransitionInfo): boolean;
    Set(transition: UnityEditor.Animations.AnimatorStateTransition, srcState: UnityEditor.Animations.AnimatorState, dstState: UnityEditor.Animations.AnimatorState): void;
  }
}
declare namespace UnityEditor {
  class ZoomableArea extends System.Object {
    constructor();
    constructor(minimalGUI: boolean);
    constructor(minimalGUI: boolean, enableSliderZoom: boolean);
    BeginViewGUI(): void;
    DrawingToViewTransformPoint(lhs: any): any;
    DrawingToViewTransformPoint(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    EndViewGUI(): void;
    EnforceScaleAndRange(): void;
    HandleZoomAndPanEvents(area: any): void;
    NormalizeInViewSpace(vec: any): any;
    PixelDeltaToTime(rect: any): number;
    PixelToTime(pixelX: number, rect: any): number;
    SetScaleFocused(focalPoint: any, newScale: any): void;
    SetScaleFocused(focalPoint: any, newScale: any, lockHorizontal: boolean, lockVertical: boolean): void;
    SetShownHRange(min: number, max: number): void;
    SetShownHRangeInsideMargins(min: number, max: number): void;
    SetShownVRange(min: number, max: number): void;
    SetShownVRangeInsideMargins(min: number, max: number): void;
    SetTransform(newTranslation: any, newScale: any): void;
    TimeToPixel(time: number, rect: any): number;
    ViewToDrawingTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    bottommargin: number;
    readonly drawingBounds: any;
    readonly drawingToViewMatrix: any;
    readonly drawRect: any;
    enableMouseInput: boolean;
    hAllowExceedBaseRangeMax: boolean;
    hAllowExceedBaseRangeMin: boolean;
    hBaseRangeMax: number;
    hBaseRangeMin: number;
    hRangeLocked: boolean;
    hRangeMax: number;
    hRangeMin: number;
    hScaleMax: number;
    hScaleMin: number;
    hSlider: boolean;
    ignoreScrollWheelUntilClicked: boolean;
    leftmargin: number;
    readonly mousePositionInDrawing: any;
    rect: any;
    rightmargin: number;
    readonly scale: any;
    scaleWithWindow: boolean;
    shownArea: any;
    shownAreaInsideMargins: any;
    topmargin: number;
    readonly translation: any;
    uniformScale: boolean;
    upDirection: UnityEditor.ZoomableArea.YDirection;
    vAllowExceedBaseRangeMax: boolean;
    vAllowExceedBaseRangeMin: boolean;
    vBaseRangeMax: number;
    vBaseRangeMin: number;
    vRangeLocked: boolean;
    vRangeMax: number;
    vRangeMin: number;
    vScaleMax: number;
    vScaleMin: number;
    vSlider: boolean;
    m_UniformScale: boolean;
  }
}
declare namespace UnityEditor.ZoomableArea {
  class YDirection extends System.Enum {
    protected constructor();
    static Negative: UnityEditor.ZoomableArea.YDirection;
    static Positive: UnityEditor.ZoomableArea.YDirection;
    value__: number;
  }
}
declare namespace UnityEditor.ZoomableArea {
  class Styles extends System.Object {
    constructor(minimalGUI: boolean);
    InitGUIStyles(minimalGUI: boolean, enableSliderZoom: boolean): void;
    horizontalMinMaxScrollbarThumb: any;
    horizontalScrollbar: any;
    horizontalScrollbarLeftButton: any;
    horizontalScrollbarRightButton: any;
    sliderWidth: number;
    verticalMinMaxScrollbarThumb: any;
    verticalScrollbar: any;
    verticalScrollbarDownButton: any;
    verticalScrollbarUpButton: any;
    visualSliderWidth: number;
  }
}
declare namespace UnityEditor {
  class TimeArea extends UnityEditor.ZoomableArea {
    constructor(minimalGUI: boolean);
    BrowseRuler(position: any, id: number, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    BrowseRuler(position: any, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    DrawMajorTicks(position: any, frameRate: number): void;
    static DrawPlayhead(x: number, yMin: number, yMax: number, thickness: number, alpha: number): void;
    static DrawVerticalLine(x: number, minY: number, maxY: number, color: any): void;
    static DrawVerticalLineFast(x: number, minY: number, maxY: number, color: any): void;
    FormatTime(time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): string;
    FormatValue(value: number): string;
    FrameToPixel(i: number, frameRate: number, rect: any): number;
    SetTickMarkerRanges(): void;
    SnapTimeToWholeFPS(time: number, frameRate: number): number;
    TimeField(rect: any, id: number, time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): number;
    TimeRuler(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number, timeFormat: UnityEditor.TimeArea.TimeFormat): void;
    ValueField(rect: any, id: number, value: number): number;
    hTicks: UnityEditor.TickHandler;
    vTicks: UnityEditor.TickHandler;
  }
}
declare namespace UnityEditor.TimeArea {
  class TimeFormat extends System.Enum {
    protected constructor();
    static Frame: UnityEditor.TimeArea.TimeFormat;
    static None: UnityEditor.TimeArea.TimeFormat;
    static TimeFrame: UnityEditor.TimeArea.TimeFormat;
    value__: number;
  }
}
declare namespace UnityEditor.TimeArea {
  class Styles2 extends System.Object {
    constructor();
    labelTickMarks: any;
    playhead: any;
    timelineTick: any;
  }
}
declare namespace UnityEditor.TimeArea {
  class TimeRulerDragMode extends System.Enum {
    protected constructor();
    static Cancel: UnityEditor.TimeArea.TimeRulerDragMode;
    static Dragging: UnityEditor.TimeArea.TimeRulerDragMode;
    static End: UnityEditor.TimeArea.TimeRulerDragMode;
    static None: UnityEditor.TimeArea.TimeRulerDragMode;
    static Start: UnityEditor.TimeArea.TimeRulerDragMode;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopup extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupHierarchy extends System.Object {
    constructor();
    InitIfNeeded(owner: UnityEditor.EditorWindow, rect: any): void;
    OnGUI(position: any, owner: UnityEditor.EditorWindow): void;
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupHierarchyDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    FetchData(): void;
    UpdateData(): void;
    static showEntireHierarchy: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupGameObjectNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(gameObject: any, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupObjectNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(parent: UnityEditor.IMGUI.Controls.TreeViewItem, path: string, className: string);
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupPropertyNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(parent: UnityEditor.IMGUI.Controls.TreeViewItem, selectionItem: UnityEditorInternal.AnimationWindowSelectionItem, curveBindings: UnityEditor.EditorCurveBinding[]);
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    curveBindings: UnityEditor.EditorCurveBinding[];
    selectionItem: UnityEditorInternal.AnimationWindowSelectionItem;
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupHierarchyGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.EditorWindow);
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    showPlusButton: boolean;
    owner: UnityEditor.EditorWindow;
  }
}
declare namespace UnityEditorInternal {
  class AnimationClipSelectionItem extends UnityEditorInternal.AnimationWindowSelectionItem {
    constructor();
    static Create(animationClip: any, sourceObject: UnityEngine.Object): UnityEditorInternal.AnimationClipSelectionItem;
    readonly canChangeAnimationClip: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    readonly canSyncSceneSelection: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowSelectionItem extends UnityEngine.ScriptableObject {
    constructor();
    ClearCache(): void;
    static Create(): UnityEditorInternal.AnimationWindowSelectionItem;
    Equals(other: any): boolean;
    Equals(other: UnityEditorInternal.AnimationWindowSelectionItem): boolean;
    GetEditorCurveValueType(curveBinding: UnityEditor.EditorCurveBinding): any;
    GetRefreshHash(): number;
    Synchronize(): void;
    animationClip: any;
    readonly animationIsEditable: boolean;
    readonly animationPlayer: UnityEngine.Component;
    readonly canAddCurves: boolean;
    readonly canChangeAnimationClip: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    readonly canSyncSceneSelection: boolean;
    readonly clipIsEditable: boolean;
    readonly curves: UnityEditorInternal.AnimationWindowCurve[];
    gameObject: any;
    id: number;
    readonly objectIsOptimized: boolean;
    readonly objectIsPrefab: boolean;
    readonly rootGameObject: any;
    scriptableObject: UnityEngine.ScriptableObject;
    readonly sourceObject: UnityEngine.Object;
    timeOffset: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationPropertyContextualMenu extends System.Object {
    constructor();
    IsResponder(responder: UnityEditorInternal.IAnimationContextualResponder): boolean;
    SetResponder(responder: UnityEditorInternal.IAnimationContextualResponder): void;
    static Instance: UnityEditorInternal.AnimationPropertyContextualMenu;
  }
}
declare namespace UnityEditorInternal {
  class AnimationKeyTime extends System.ValueType {
    protected constructor();
    ContainsTime(time: number): boolean;
    Equals(obj: any): boolean;
    Equals(key: UnityEditorInternal.AnimationKeyTime): boolean;
    static Frame(frame: number, frameRate: number): UnityEditorInternal.AnimationKeyTime;
    static Time(time: number, frameRate: number): UnityEditorInternal.AnimationKeyTime;
    readonly frame: number;
    readonly frameCeiling: number;
    readonly frameFloor: number;
    readonly frameRate: number;
    readonly time: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationRecording extends System.Object {
    constructor();
    static Process(state: UnityEditorInternal.IAnimationRecordingState, modifications: UnityEditor.UndoPropertyModification[]): UnityEditor.UndoPropertyModification[];
    static ProcessModifications(state: UnityEditorInternal.IAnimationRecordingState, modifications: UnityEditor.UndoPropertyModification[]): UnityEditor.UndoPropertyModification[];
    static SaveModifiedCurve(curve: UnityEditorInternal.AnimationWindowCurve, clip: any): void;
  }
}
declare namespace UnityEditorInternal.AnimationRecording {
  class RotationModification extends System.Object {
    constructor();
    eulerX: UnityEditor.UndoPropertyModification;
    eulerY: UnityEditor.UndoPropertyModification;
    eulerZ: UnityEditor.UndoPropertyModification;
    lastQuatModification: UnityEditor.UndoPropertyModification;
    useEuler: boolean;
    w: UnityEditor.UndoPropertyModification;
    x: UnityEditor.UndoPropertyModification;
    y: UnityEditor.UndoPropertyModification;
    z: UnityEditor.UndoPropertyModification;
  }
}
declare namespace UnityEditor {
  class AnimationWindow extends UnityEditor.EditorWindow {
    constructor();
    EditAnimationClip(animationClip: any): boolean;
    EditGameObject(gameObject: any): boolean;
    EditSequencerClip(animationClip: any, sourceObject: UnityEngine.Object, controlInterface: UnityEditorInternal.IAnimationWindowControl): boolean;
    ForceRefresh(): void;
    static GetAllAnimationWindows(): UnityEditor.AnimationWindow[];
    OnControllerChange(): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnFocus(): void;
    OnGUI(): void;
    OnLostFocus(): void;
    OnSelectionChange(): void;
    UnlinkSequencer(): void;
    Update(): void;
  }
}
declare namespace UnityEditor {
  class AnimationWindowClipPopup extends System.Object {
    constructor();
    OnGUI(): void;
    state: UnityEditorInternal.AnimationWindowState;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowControl extends UnityEditorInternal.IAnimationWindowControl {
    constructor();
    AddAnimatedKeys(): void;
    AddCandidateKeys(): void;
    AddKey(modifications: UnityEditor.PropertyModification[]): void;
    AddKey(property: UnityEditor.SerializedProperty): void;
    CandidateExists(modifications: UnityEditor.PropertyModification[]): boolean;
    ClearCandidates(): void;
    CurveExists(modifications: UnityEditor.PropertyModification[]): boolean;
    EndScrubTime(): void;
    GoToFirstKeyframe(): void;
    GoToFrame(frame: number): void;
    GoToLastKeyframe(): void;
    GoToNextFrame(): void;
    GoToNextKeyframe(): void;
    GoToNextKeyframe(modifications: UnityEditor.PropertyModification[]): void;
    GoToPreviousFrame(): void;
    GoToPreviousKeyframe(): void;
    GoToPreviousKeyframe(modifications: UnityEditor.PropertyModification[]): void;
    GoToTime(time: number): void;
    HasAnyCandidates(): boolean;
    HasAnyCurves(): boolean;
    IsAnimatable(modifications: UnityEditor.PropertyModification[]): boolean;
    IsEditable(targetObject: UnityEngine.Object): boolean;
    KeyExists(modifications: UnityEditor.PropertyModification[]): boolean;
    OnDisable(): void;
    OnEnable(): void;
    OnSelectionChanged(): void;
    PlaybackUpdate(): boolean;
    ProcessCandidates(): void;
    RemoveCurve(modifications: UnityEditor.PropertyModification[]): void;
    RemoveCurve(property: UnityEditor.SerializedProperty): void;
    RemoveKey(modifications: UnityEditor.PropertyModification[]): void;
    RemoveKey(property: UnityEditor.SerializedProperty): void;
    ResampleAnimation(): void;
    ScrubTime(time: number): void;
    StartPlayback(): boolean;
    StartPreview(): boolean;
    StartRecording(targetObject: UnityEngine.Object): boolean;
    StartScrubTime(): void;
    StopPlayback(): void;
    StopPreview(): void;
    StopRecording(): void;
    readonly animEditor: UnityEditor.AnimEditor;
    readonly canPlay: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    readonly playing: boolean;
    readonly previewing: boolean;
    readonly recording: boolean;
    readonly time: UnityEditorInternal.AnimationKeyTime;
    state: UnityEditorInternal.AnimationWindowState;
  }
}
declare namespace UnityEditorInternal {
  class IAnimationWindowControl extends UnityEngine.ScriptableObject {
    protected constructor();
    ClearCandidates(): void;
    EndScrubTime(): void;
    GoToFirstKeyframe(): void;
    GoToFrame(frame: number): void;
    GoToLastKeyframe(): void;
    GoToNextFrame(): void;
    GoToNextKeyframe(): void;
    GoToPreviousFrame(): void;
    GoToPreviousKeyframe(): void;
    GoToTime(time: number): void;
    OnEnable(): void;
    OnSelectionChanged(): void;
    PlaybackUpdate(): boolean;
    ProcessCandidates(): void;
    ResampleAnimation(): void;
    ScrubTime(time: number): void;
    StartPlayback(): boolean;
    StartPreview(): boolean;
    StartRecording(targetObject: UnityEngine.Object): boolean;
    StartScrubTime(): void;
    StopPlayback(): void;
    StopPreview(): void;
    StopRecording(): void;
    readonly canPlay: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    readonly playing: boolean;
    readonly previewing: boolean;
    readonly recording: boolean;
    readonly time: UnityEditorInternal.AnimationKeyTime;
  }
}
declare namespace UnityEditorInternal.AnimationWindowControl {
  class CandidateRecordingState extends System.Object {
    constructor(state: UnityEditorInternal.AnimationWindowState, candidateClip: any);
    AddPropertyModification(binding: UnityEditor.EditorCurveBinding, propertyModification: UnityEditor.PropertyModification, keepPrefabOverride: boolean): void;
    DiscardModification(modification: UnityEditor.PropertyModification): boolean;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    readonly activeAnimationClip: any;
    readonly activeGameObject: any;
    readonly activeRootGameObject: any;
    readonly addZeroFrame: boolean;
    readonly currentFrame: number;
  }
}
declare namespace UnityEditorInternal.AnimationWindowControl {
  class RecordingStateMode extends System.Enum {
    protected constructor();
    static AutoKey: UnityEditorInternal.AnimationWindowControl.RecordingStateMode;
    static ManualKey: UnityEditorInternal.AnimationWindowControl.RecordingStateMode;
    value__: number;
  }
}
declare namespace UnityEditorInternal.AnimationWindowControl {
  class RecordingState extends System.Object {
    constructor(state: UnityEditorInternal.AnimationWindowState, mode: UnityEditorInternal.AnimationWindowControl.RecordingStateMode);
    AddPropertyModification(binding: UnityEditor.EditorCurveBinding, propertyModification: UnityEditor.PropertyModification, keepPrefabOverride: boolean): void;
    DiscardModification(modification: UnityEditor.PropertyModification): boolean;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    readonly activeAnimationClip: any;
    readonly activeGameObject: any;
    readonly activeRootGameObject: any;
    readonly addPropertyModification: boolean;
    readonly addZeroFrame: boolean;
    readonly currentFrame: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowCurve extends System.Object {
    constructor(clip: any, binding: UnityEditor.EditorCurveBinding, valueType: any);
    AddKeyframe(key: UnityEditorInternal.AnimationWindowKeyframe, keyTime: UnityEditorInternal.AnimationKeyTime): void;
    CompareTo(obj: UnityEditorInternal.AnimationWindowCurve): number;
    Evaluate(time: number): any;
    FindKeyAtTime(keyTime: UnityEditorInternal.AnimationKeyTime): UnityEditorInternal.AnimationWindowKeyframe;
    GetBindingHashCode(): number;
    GetHashCode(): number;
    GetKeyframeIndex(time: UnityEditorInternal.AnimationKeyTime): number;
    HasKeyframe(time: UnityEditorInternal.AnimationKeyTime): boolean;
    LoadKeyframes(clip: any): void;
    RemoveKeyframe(time: UnityEditorInternal.AnimationKeyTime): void;
    RemoveKeysAtRange(startTime: number, endTime: number): void;
    ToAnimationCurve(): any;
    ToObjectCurve(): UnityEditor.ObjectReferenceKeyframe[];
    readonly animationIsEditable: boolean;
    readonly binding: UnityEditor.EditorCurveBinding;
    readonly clip: any;
    readonly clipIsEditable: boolean;
    readonly depth: number;
    readonly isPhantom: boolean;
    readonly isPPtrCurve: boolean;
    readonly length: number;
    readonly path: string;
    readonly propertyName: string;
    readonly rootGameObject: any;
    readonly scriptableObject: UnityEngine.ScriptableObject;
    selectionBinding: UnityEditorInternal.AnimationWindowSelectionItem;
    readonly selectionID: number;
    readonly timeOffset: number;
    readonly type: any;
    readonly valueType: any;
    m_Keyframes: UnityEditorInternal.AnimationWindowKeyframe[];
    static timeEpsilon: number;
  }
}
declare namespace UnityEditor {
  class AnimationWindowEventMethod extends System.ValueType {
    protected constructor();
    name: string;
    parameterType: any;
  }
}
declare namespace UnityEditor {
  class AnimationWindowEvent extends UnityEngine.ScriptableObject {
    constructor();
    static CreateAndEdit(root: any, clip: any, time: number): UnityEditor.AnimationWindowEvent;
    static Edit(clipInfo: UnityEditor.AnimationClipInfoProperties, eventIndex: number): UnityEditor.AnimationWindowEvent;
    static Edit(root: any, clip: any, eventIndex: number): UnityEditor.AnimationWindowEvent;
    clip: any;
    clipInfo: UnityEditor.AnimationClipInfoProperties;
    eventIndex: number;
    root: any;
  }
}
declare namespace UnityEditor {
  class AnimationWindowEventInspector extends UnityEditor.Editor {
    constructor();
    static CollectSupportedMethods(gameObject: any): UnityEditor.AnimationWindowEventMethod[];
    static FormatEvent(root: any, evt: any): string;
    static OnDisabledAnimationEvent(): void;
    static OnEditAnimationEvent(awe: UnityEditor.AnimationWindowEvent): void;
    static OnEditAnimationEvents(awEvents: UnityEditor.AnimationWindowEvent[]): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.AnimationWindowEventInspector {
  class AnimationWindowEventData extends System.ValueType {
    protected constructor();
    clip: any;
    clipInfo: UnityEditor.AnimationClipInfoProperties;
    events: any[];
    root: any;
    selectedEvents: any[];
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyState extends UnityEditor.IMGUI.Controls.TreeViewState {
    constructor();
    AddTallInstance(id: number): void;
    GetTallInstancesCount(): number;
    GetTallMode(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    SetTallMode(node: UnityEditorInternal.AnimationWindowHierarchyNode, tallMode: boolean): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewState extends System.Object {
    constructor();
    expandedIDs: number[];
    lastClickedID: number;
    searchString: string;
    selectedIDs: number[];
    scrollPos: any;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchy extends System.Object {
    constructor(state: UnityEditorInternal.AnimationWindowState, owner: UnityEditor.EditorWindow, position: any);
    EndNameEditing(acceptChanges: boolean): void;
    GetContentSize(): any;
    GetTotalRect(): any;
    Init(owner: UnityEditor.EditorWindow, rect: any): void;
    IsIDVisible(id: number): boolean;
    OnGUI(position: any): void;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, animationWindowState: UnityEditorInternal.AnimationWindowState);
    CreateTreeFromCurves(): UnityEditorInternal.AnimationWindowHierarchyNode[];
    FetchData(): void;
    GetIcon(selectedItem: UnityEditorInternal.AnimationWindowSelectionItem, curveBinding: UnityEditor.EditorCurveBinding): any;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    UpdateData(): void;
    showAll: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, state: UnityEditorInternal.AnimationWindowState);
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    BeginRowGUI(): void;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetNodeHeight(node: UnityEditorInternal.AnimationWindowHierarchyNode): number;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    state: UnityEditorInternal.AnimationWindowState;
    static k_AddCurveButtonNodeHeight: number;
    static k_DopeSheetRowHeight: number;
    static k_DopeSheetRowHeightTall: number;
    static k_RowBackgroundColorBrightness: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(instanceID: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, animatableObjectType: any, propertyName: string, path: string, displayName: string);
    animatableObjectType: any;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    indent: number;
    path: string;
    propertyName: string;
    topPixel: any;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyPropertyGroupNode extends UnityEditorInternal.AnimationWindowHierarchyNode {
    constructor(animatableObjectType: any, setId: number, propertyName: string, path: string, parent: UnityEditor.IMGUI.Controls.TreeViewItem);
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyPropertyNode extends UnityEditorInternal.AnimationWindowHierarchyNode {
    constructor(animatableObjectType: any, setId: number, propertyName: string, path: string, parent: UnityEditor.IMGUI.Controls.TreeViewItem, binding: UnityEditor.EditorCurveBinding, isPptrNode: boolean);
    isPptrNode: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyClipNode extends UnityEditorInternal.AnimationWindowHierarchyNode {
    constructor(parent: UnityEditor.IMGUI.Controls.TreeViewItem, setId: number, name: string);
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyMasterNode extends UnityEditorInternal.AnimationWindowHierarchyNode {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyAddButtonNode extends UnityEditorInternal.AnimationWindowHierarchyNode {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowKeyframe extends System.Object {
    constructor();
    constructor(key: UnityEditorInternal.AnimationWindowKeyframe);
    constructor(curve: UnityEditorInternal.AnimationWindowCurve, key: any);
    constructor(curve: UnityEditorInternal.AnimationWindowCurve, key: UnityEditor.ObjectReferenceKeyframe);
    GetHash(): number;
    GetIndex(): number;
    curve: UnityEditorInternal.AnimationWindowCurve;
    inTangent: number;
    readonly isPPtrCurve: boolean;
    outTangent: number;
    time: number;
    value: any;
    m_InTangent: number;
    m_OutTangent: number;
    m_TangentMode: number;
    m_TimeHash: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowKeySelection extends UnityEngine.ScriptableObject {
    constructor();
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    SaveSelection(undoLabel: string): void;
    selectedKeyHashes: any;
  }
}
declare namespace UnityEditor {
  class AnimationWindowManipulator extends System.Object {
    constructor();
    HandleEvents(): void;
    IgnoreEvents(): void;
    controlID: number;
    onDrag: ((manipulator: UnityEditor.AnimationWindowManipulator, evt: any) => boolean);
    onEndDrag: ((manipulator: UnityEditor.AnimationWindowManipulator, evt: any) => boolean);
    onStartDrag: ((manipulator: UnityEditor.AnimationWindowManipulator, evt: any) => boolean);
    rect: any;
  }
}
declare namespace UnityEditor {
  class AreaManipulator extends UnityEditor.AnimationWindowManipulator {
    constructor(style: any, cursor: UnityEditor.MouseCursor);
    constructor(style: any);
    OnGUI(widgetRect: any): void;
  }
}
declare namespace UnityEditor {
  class TimeCursorManipulator extends UnityEditor.AnimationWindowManipulator {
    constructor(style: any);
    OnGUI(windowRect: any, pixelTime: number): void;
    alignment: UnityEditor.TimeCursorManipulator.Alignment;
    dottedLine: boolean;
    drawHead: boolean;
    drawLine: boolean;
    headColor: any;
    lineColor: any;
    tooltip: string;
  }
}
declare namespace UnityEditor.TimeCursorManipulator {
  class Alignment extends System.Enum {
    protected constructor();
    static Center: UnityEditor.TimeCursorManipulator.Alignment;
    static Left: UnityEditor.TimeCursorManipulator.Alignment;
    static Right: UnityEditor.TimeCursorManipulator.Alignment;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowSelection extends System.Object {
    constructor();
    Add(newItem: UnityEditorInternal.AnimationWindowSelectionItem): void;
    BeginOperations(): void;
    Clear(): void;
    ClearCache(): void;
    EndOperations(): void;
    Exists(predicate: ((obj: UnityEditorInternal.AnimationWindowSelectionItem) => boolean)): boolean;
    Exists(itemToFind: UnityEditorInternal.AnimationWindowSelectionItem): boolean;
    Find(predicate: ((obj: UnityEditorInternal.AnimationWindowSelectionItem) => boolean)): UnityEditorInternal.AnimationWindowSelectionItem;
    First(): UnityEditorInternal.AnimationWindowSelectionItem;
    GetRefreshHash(): number;
    Notify(): void;
    RangeAdd(newItemArray: UnityEditorInternal.AnimationWindowSelectionItem[]): void;
    Refresh(): void;
    Set(newItem: UnityEditorInternal.AnimationWindowSelectionItem): void;
    Synchronize(): void;
    ToArray(): UnityEditorInternal.AnimationWindowSelectionItem[];
    UpdateClip(itemToUpdate: UnityEditorInternal.AnimationWindowSelectionItem, newClip: any): void;
    UpdateTimeOffset(itemToUpdate: UnityEditorInternal.AnimationWindowSelectionItem, timeOffset: number): void;
    readonly canAddCurves: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    readonly count: number;
    readonly curves: UnityEditorInternal.AnimationWindowCurve[];
    readonly disabled: boolean;
    onSelectionChanged: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowState extends UnityEngine.ScriptableObject {
    constructor();
    AnyKeyIsSelected(dopeline: UnityEditorInternal.DopeLine): boolean;
    ClearHierarchySelection(): void;
    ClearKeySelections(): void;
    ClearSelections(): void;
    CopyAllActiveCurves(): void;
    CopyKeys(): void;
    DeleteKeys(keys: UnityEditorInternal.AnimationWindowKeyframe[]): void;
    DeleteSelectedKeys(): void;
    EndLiveEdit(): void;
    ForceRefresh(): void;
    FormatFrame(frame: number, frameDigits: number): string;
    FrameDeltaToPixel(rect: any): number;
    FrameToPixel(i: number, rect: any): number;
    FrameToTime(frame: number): number;
    GetAffectedCurves(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): UnityEditorInternal.AnimationWindowCurve[];
    GetAffectedDopelines(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): UnityEditorInternal.DopeLine[];
    GetAffectedHierarchyIDs(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): number[];
    GetAggregateKeys(hierarchyNode: UnityEditorInternal.AnimationWindowHierarchyNode): UnityEditorInternal.AnimationWindowKeyframe[];
    GetDopeline(selectedInstanceID: number): UnityEditorInternal.DopeLine;
    HandleHierarchySelectionChanged(selectedInstanceIDs: number[], triggerSceneSelectionSync: boolean): void;
    HasHierarchySelection(): boolean;
    InLiveEdit(): boolean;
    KeyIsSelected(keyframe: UnityEditorInternal.AnimationWindowKeyframe): boolean;
    MoveSelectedKeys(deltaTime: number, snapToFrame: boolean): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    OnHierarchySelectionChanged(selectedInstanceIDs: number[]): void;
    OnSelectionChanged(): void;
    PasteKeys(): void;
    PixelDeltaToTime(rect: any): number;
    PixelToTime(pixel: number): number;
    PixelToTime(pixel: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    PixelToTime(pixelX: number, rect: any): number;
    RemoveCurve(curve: UnityEditorInternal.AnimationWindowCurve, undoLabel: string): void;
    Repaint(): void;
    ResampleAnimation(): void;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve, undoLabel: string): void;
    SaveKeySelection(undoLabel: string): void;
    SelectHierarchyItem(hierarchyNodeID: number, additive: boolean, triggerSceneSelectionSync: boolean): void;
    SelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine, additive: boolean): void;
    SelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine, additive: boolean, triggerSceneSelectionSync: boolean): void;
    SelectKey(keyframe: UnityEditorInternal.AnimationWindowKeyframe): void;
    SelectKeysFromDopeline(dopeline: UnityEditorInternal.DopeLine): void;
    SnapToFrame(time: number, fps: number): number;
    SnapToFrame(time: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    StartLiveEdit(): void;
    StartPlayback(): void;
    StartPreview(): void;
    StartRecording(): void;
    StopPlayback(): void;
    StopPreview(): void;
    StopRecording(): void;
    TimeToFrame(time: number): number;
    TimeToFrameFloor(time: number): number;
    TimeToFrameRound(time: number): number;
    TimeToPixel(time: number): number;
    TimeToPixel(time: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    TimeToPixel(time: number, rect: any): number;
    TransformRippleKeys(matrix: any, t1: number, t2: number, flipX: boolean, snapToFrame: boolean): void;
    TransformSelectedKeys(matrix: any, flipX: boolean, flipY: boolean, snapToFrame: boolean): void;
    UndoRedoPerformed(): void;
    UnSelectHierarchyItem(hierarchyNodeID: number): void;
    UnSelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine): void;
    UnselectKey(keyframe: UnityEditorInternal.AnimationWindowKeyframe): void;
    UnselectKeysFromDopeline(dopeline: UnityEditorInternal.DopeLine): void;
    readonly activeAnimationClip: any;
    readonly activeAnimationPlayer: UnityEngine.Component;
    readonly activeCurves: UnityEditorInternal.AnimationWindowCurve[];
    readonly activeCurveWrappers: UnityEditor.CurveWrapper[];
    readonly activeGameObject: any;
    activeKeyframe: UnityEditorInternal.AnimationWindowKeyframe;
    readonly activeRootGameObject: any;
    readonly allCurves: UnityEditorInternal.AnimationWindowCurve[];
    readonly animatorIsOptimized: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    clipFrameRate: number;
    readonly controlInterface: UnityEditorInternal.IAnimationWindowControl;
    currentFrame: number;
    currentTime: number;
    readonly disabled: boolean;
    readonly dopelines: UnityEditorInternal.DopeLine[];
    frameRate: number;
    readonly maxTime: number;
    readonly maxVisibleFrame: number;
    readonly maxVisibleTime: number;
    readonly minTime: number;
    readonly minVisibleFrame: number;
    readonly minVisibleTime: number;
    overrideControlInterface: UnityEditorInternal.IAnimationWindowControl;
    readonly pixelPerSecond: number;
    readonly playing: boolean;
    readonly previewing: boolean;
    readonly recording: boolean;
    refresh: UnityEditorInternal.AnimationWindowState.RefreshType;
    readonly selectedHierarchyNodes: UnityEditorInternal.AnimationWindowHierarchyNode[];
    selectedItem: UnityEditorInternal.AnimationWindowSelectionItem;
    readonly selectedKeys: UnityEditorInternal.AnimationWindowKeyframe[];
    readonly selection: UnityEditorInternal.AnimationWindowSelection;
    readonly selectionBounds: any;
    readonly time: UnityEditorInternal.AnimationKeyTime;
    timeArea: UnityEditor.TimeArea;
    timeFormat: UnityEditor.TimeArea.TimeFormat;
    readonly timeRange: any;
    readonly visibleFrameSpan: number;
    readonly visibleTimeSpan: number;
    readonly zeroTimePixel: number;
    animEditor: UnityEditor.AnimEditor;
    hierarchyData: UnityEditorInternal.AnimationWindowHierarchyDataSource;
    hierarchyState: UnityEditorInternal.AnimationWindowHierarchyState;
    static kDefaultFrameRate: number;
    static kEditCurveUndoLabel: string;
    linkedWithSequencer: boolean;
    onEndLiveEdit: (() => void);
    onFrameRateChange: ((obj: number) => void);
    onStartLiveEdit: (() => void);
    showCurveEditor: boolean;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class RefreshType extends System.Enum {
    protected constructor();
    static CurvesOnly: UnityEditorInternal.AnimationWindowState.RefreshType;
    static Everything: UnityEditorInternal.AnimationWindowState.RefreshType;
    static None: UnityEditorInternal.AnimationWindowState.RefreshType;
    value__: number;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class SnapMode extends System.Enum {
    protected constructor();
    static Disabled: UnityEditorInternal.AnimationWindowState.SnapMode;
    static SnapToClipFrame: UnityEditorInternal.AnimationWindowState.SnapMode;
    static SnapToFrame: UnityEditorInternal.AnimationWindowState.SnapMode;
    value__: number;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class LiveEditKeyframe extends System.ValueType {
    protected constructor();
    key: UnityEditorInternal.AnimationWindowKeyframe;
    keySnapshot: UnityEditorInternal.AnimationWindowKeyframe;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class LiveEditCurve extends System.Object {
    constructor();
    curve: UnityEditorInternal.AnimationWindowCurve;
    selectedKeys: UnityEditorInternal.AnimationWindowState.LiveEditKeyframe[];
    unselectedKeys: UnityEditorInternal.AnimationWindowState.LiveEditKeyframe[];
  }
}
declare namespace UnityEditor {
  class AnimationWindowStyles extends System.Object {
    constructor();
    static Initialize(): void;
    static addEventContent: any;
    static addKeyframeContent: any;
    static animationClip: any;
    static animatorAndAnimationClip: any;
    static animatorOptimizedText: any;
    static create: any;
    static createNewClip: any;
    static curveEditorBackground: any;
    static curveEditorLabelTickmarks: any;
    static curves: any;
    static dopesheet: any;
    static dopeSheetBackground: any;
    static dopeSheetKeyframe: any;
    static eventBackground: any;
    static eventTooltip: any;
    static eventTooltipArrow: any;
    static firstKeyContent: any;
    static formatIsMissing: any;
    static keyframeBackground: any;
    static lastKeyContent: any;
    static miniToolbar: any;
    static miniToolbarButton: any;
    static nextKeyContent: any;
    static noAnimatableObjectSelectedText: any;
    static playContent: any;
    static playHead: any;
    static pointIcon: any;
    static popupCurveDropdown: any;
    static popupCurveEditorBackground: any;
    static popupCurveEditorSwatch: any;
    static popupCurveSwatchBackground: any;
    static previewContent: any;
    static prevKeyContent: any;
    static recordContent: any;
    static samples: any;
    static sequencerLinkContent: any;
    static timelineTick: any;
    static toolbarLabel: any;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowUtility extends System.Object {
    protected constructor();
    static AddClipToAnimationComponent(animation: any, newClip: any): boolean;
    static AddClipToAnimationPlayerComponent(animationPlayer: UnityEngine.Component, newClip: any): boolean;
    static AddClipToAnimatorComponent(animator: any, newClip: any): boolean;
    static AddKeyframes(state: UnityEditorInternal.AnimationWindowState, curves: UnityEditorInternal.AnimationWindowCurve[], time: UnityEditorInternal.AnimationKeyTime): void;
    static AddKeyframeToCurve(curve: UnityEditorInternal.AnimationWindowCurve, value: any, type: any, time: UnityEditorInternal.AnimationKeyTime): UnityEditorInternal.AnimationWindowKeyframe;
    static AddSelectedKeyframes(state: UnityEditorInternal.AnimationWindowState, time: UnityEditorInternal.AnimationKeyTime): void;
    static AnimationWindowKeyframeToCurveSelection(keyframe: UnityEditorInternal.AnimationWindowKeyframe, curveEditor: UnityEditor.CurveEditor): UnityEditor.CurveSelection;
    static BestMatchForPaste(binding: UnityEditor.EditorCurveBinding, clipboardCurves: UnityEditorInternal.AnimationWindowCurve[], targetCurves: UnityEditorInternal.AnimationWindowCurve[]): UnityEditorInternal.AnimationWindowCurve;
    static ContainsFloatKeyframes(keyframes: UnityEditorInternal.AnimationWindowKeyframe[]): boolean;
    static ControllerChanged(): void;
    static CreateDefaultCurve(selectionItem: UnityEditorInternal.AnimationWindowSelectionItem, binding: UnityEditor.EditorCurveBinding): UnityEditorInternal.AnimationWindowCurve;
    static CreateDefaultCurves(state: UnityEditorInternal.AnimationWindowState, selectionItem: UnityEditorInternal.AnimationWindowSelectionItem, properties: UnityEditor.EditorCurveBinding[]): void;
    static CurveExists(binding: UnityEditor.EditorCurveBinding, curves: UnityEditorInternal.AnimationWindowCurve[]): boolean;
    static CurveSelectionToAnimationWindowKeyframe(curveSelection: UnityEditor.CurveSelection, allCurves: UnityEditorInternal.AnimationWindowCurve[]): UnityEditorInternal.AnimationWindowKeyframe;
    static DrawInRangeOverlay(rect: any, color: any, startOfClipPixel: number, endOfClipPixel: number): void;
    static DrawOutOfRangeOverlay(rect: any, color: any, startOfClipPixel: number, endOfClipPixel: number): void;
    static DrawRect(rect: any, color: any): void;
    static DrawSelectionOverlay(rect: any, color: any, startPixel: number, endPixel: number): void;
    static EnsureActiveAnimationPlayer(animatedObject: any): UnityEngine.Component;
    static FilterCurves(curves: UnityEditorInternal.AnimationWindowCurve[], path: string, entireHierarchy: boolean): UnityEditorInternal.AnimationWindowCurve[];
    static FilterCurves(curves: UnityEditorInternal.AnimationWindowCurve[], path: string, animatableObjectType: any): UnityEditorInternal.AnimationWindowCurve[];
    static FilterCurves(curves: UnityEditorInternal.AnimationWindowCurve[], path: string, animatableObjectType: any, propertyName: string): UnityEditorInternal.AnimationWindowCurve[];
    static ForceGrouping(binding: UnityEditor.EditorCurveBinding): boolean;
    static GetAnimatableProperties(gameObject: any, root: any, valueType: any): UnityEditor.EditorCurveBinding[];
    static GetAnimatableProperties(gameObject: any, root: any, objectType: any, valueType: any): UnityEditor.EditorCurveBinding[];
    static GetAnimatableProperties(scriptableObject: UnityEngine.ScriptableObject, valueType: any): UnityEditor.EditorCurveBinding[];
    static GetClosestAnimationInParents(tr: any): any;
    static GetClosestAnimationPlayerComponentInParents(tr: any): UnityEngine.Component;
    static GetClosestAnimatorInParents(tr: any): any;
    static GetComponentIndex(name: string): number;
    static GetCurrentValue(rootGameObject: any, curveBinding: UnityEditor.EditorCurveBinding): any;
    static GetCurveWrapper(curve: UnityEditorInternal.AnimationWindowCurve, clip: any): UnityEditor.CurveWrapper;
    static GetNextKeyframeTime(curves: UnityEditorInternal.AnimationWindowCurve[], currentTime: number, frameRate: number): number;
    static GetNicePropertyDisplayName(animatableObjectType: any, propertyName: string): string;
    static GetNicePropertyGroupDisplayName(animatableObjectType: any, propertyGroupName: string): string;
    static GetPreviousKeyframeTime(curves: UnityEditorInternal.AnimationWindowCurve[], currentTime: number, frameRate: number): number;
    static GetPropertyDisplayName(propertyName: string): string;
    static GetPropertyGroupName(propertyName: string): string;
    static GetPropertyNodeID(setId: number, path: string, type: any, propertyName: string): number;
    static GetRenamedBinding(binding: UnityEditor.EditorCurveBinding, newPath: string): UnityEditor.EditorCurveBinding;
    static InitializeGameobjectForAnimation(animatedObject: any): boolean;
    static IsCurveCreated(clip: any, binding: UnityEditor.EditorCurveBinding): boolean;
    static IsNodeAmbiguous(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    static IsNodeLeftOverCurve(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    static IsNodePhantom(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    static IsRectTransformPosition(curveBinding: UnityEditor.EditorCurveBinding): boolean;
    static IsTransformType(type: any): boolean;
    static NicifyPropertyGroupName(animatableObjectType: any, propertyGroupName: string): string;
    static PropertyIsAnimatable(targetObject: UnityEngine.Object, propertyPath: string, rootObject: UnityEngine.Object): boolean;
    static PropertyModificationsToEditorCurveBindings(modifications: UnityEditor.PropertyModification[], rootGameObject: any, animationClip: any): UnityEditor.EditorCurveBinding[];
    static RemoveKeyframes(state: UnityEditorInternal.AnimationWindowState, curves: UnityEditorInternal.AnimationWindowCurve[], time: UnityEditorInternal.AnimationKeyTime): void;
    static RenameCurvePath(curve: UnityEditorInternal.AnimationWindowCurve, newBinding: UnityEditor.EditorCurveBinding, clip: any): void;
    static SerializedPropertyToEditorCurveBindings(property: UnityEditor.SerializedProperty, rootGameObject: any, animationClip: any): UnityEditor.EditorCurveBinding[];
    static SerializedPropertyToPropertyModifications(property: UnityEditor.SerializedProperty): UnityEditor.PropertyModification[];
    static ShouldPrefixWithTypeName(animatableObjectType: any, propertyName: string): boolean;
    static ShouldShowAnimationWindowCurve(curveBinding: UnityEditor.EditorCurveBinding): boolean;
    static SyncTimeArea(from: UnityEditor.TimeArea, to: UnityEditor.TimeArea): void;
  }
}
declare namespace UnityEditor {
  class WrapModeFixed extends System.Enum {
    protected constructor();
    static ClampForever: UnityEditor.WrapModeFixed;
    static Default: UnityEditor.WrapModeFixed;
    static Loop: UnityEditor.WrapModeFixed;
    static Once: UnityEditor.WrapModeFixed;
    static PingPong: UnityEditor.WrapModeFixed;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AnimEditor extends UnityEngine.ScriptableObject {
    constructor();
    BeginKeyModification(): void;
    EndKeyModification(): void;
    static GetAllAnimationWindows(): UnityEditor.AnimEditor[];
    HandleGlobalHotkeys(): void;
    OnAnimEditorGUI(parent: UnityEditor.EditorWindow, position: any): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnEndLiveEdit(): void;
    OnLostFocus(): void;
    OnSelectionChanged(): void;
    OnStartLiveEdit(): void;
    Repaint(): void;
    Update(): void;
    readonly controlInterface: UnityEditorInternal.IAnimationWindowControl;
    overrideControlInterface: UnityEditorInternal.IAnimationWindowControl;
    selectedItem: UnityEditorInternal.AnimationWindowSelectionItem;
    readonly selection: UnityEditorInternal.AnimationWindowSelection;
    readonly state: UnityEditorInternal.AnimationWindowState;
    readonly stateDisabled: boolean;
  }
}
declare namespace UnityEditor.AnimEditor {
  class ChangedCurvesPerClip extends System.ValueType {
    protected constructor();
    bindings: UnityEditor.EditorCurveBinding[];
    curves: any[];
  }
}
declare namespace UnityEditorInternal {
  class AnimEditorOverlay extends System.Object {
    constructor();
    HandleEvents(): void;
    Initialize(): void;
    MousePositionToTime(evt: any): number;
    MousePositionToValue(evt: any): number;
    OnGUI(rect: any, contentRect: any): void;
    TimeToPixel(time: number): number;
    ValueToPixel(value: number): number;
    readonly contentRect: any;
    readonly rect: any;
    state: UnityEditorInternal.AnimationWindowState;
  }
}
declare namespace UnityEditor {
  class ControlPointRenderer extends System.Object {
    constructor(icon: any);
    AddPoint(rect: any, color: any): void;
    Clear(): void;
    FlushCache(): void;
    Render(): void;
    static readonly material: any;
  }
}
declare namespace UnityEditor.ControlPointRenderer {
  class RenderChunk extends System.Object {
    constructor();
    colors: any[];
    indices: number[];
    isDirty: boolean;
    mesh: any;
    uvs: any[];
    vertices: any[];
  }
}
declare namespace UnityEditorInternal {
  class CurveBindingUtility extends System.Object {
    protected constructor();
    static GetCurrentValue(state: UnityEditorInternal.AnimationWindowState, curve: UnityEditorInternal.AnimationWindowCurve): any;
    static GetCurrentValue(rootGameObject: any, curveBinding: UnityEditor.EditorCurveBinding): any;
  }
}
declare namespace UnityEditor {
  class ISelectionBinding {
    protected constructor();
    readonly animationClip: any;
    readonly animationIsEditable: boolean;
    readonly clipIsEditable: boolean;
    readonly id: number;
    readonly rootGameObject: any;
    readonly timeOffset: number;
  }
}
declare namespace UnityEditor {
  class ICurveEditorState {
    protected constructor();
    readonly timeFormat: UnityEditor.TimeArea.TimeFormat;
  }
}
declare namespace UnityEditor {
  class CurveWrapper extends System.Object {
    constructor();
    readonly animationClip: any;
    readonly animationIsEditable: boolean;
    readonly bounds: any;
    changed: boolean;
    readonly clipIsEditable: boolean;
    readonly curve: any;
    renderer: UnityEditor.CurveRenderer;
    readonly rootGameObjet: any;
    selectionBindingInterface: UnityEditor.ISelectionBinding;
    readonly selectionID: number;
    readonly timeOffset: number;
    binding: UnityEditor.EditorCurveBinding;
    color: any;
    getAxisUiScalarsCallback: (() => any);
    groupId: number;
    hidden: boolean;
    id: number;
    listIndex: number;
    readOnly: boolean;
    regionId: number;
    selected: UnityEditor.CurveWrapper.SelectionMode;
    setAxisUiScalarsCallback: ((newAxisScalars: any) => void);
    vRangeMax: number;
    vRangeMin: number;
    wrapColorMultiplier: any;
  }
}
declare namespace UnityEditor.CurveWrapper {
  class SelectionMode extends System.Enum {
    protected constructor();
    static None: UnityEditor.CurveWrapper.SelectionMode;
    static Selected: UnityEditor.CurveWrapper.SelectionMode;
    static SemiSelected: UnityEditor.CurveWrapper.SelectionMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveControlPointRenderer extends System.Object {
    constructor();
    AddPoint(rect: any, color: any): void;
    AddSelectedPoint(rect: any, color: any): void;
    AddSemiSelectedPoint(rect: any, color: any): void;
    Clear(): void;
    FlushCache(): void;
    Render(): void;
  }
}
declare namespace UnityEditor {
  class CurveEditor extends UnityEditor.TimeArea {
    constructor(rect: any, curves: UnityEditor.CurveWrapper[], minimalGUI: boolean);
    AddKey(cw: UnityEditor.CurveWrapper, key: any): void;
    BeginTimeRangeSelection(time: number, addToSelection: boolean): void;
    CancelTimeRangeSelection(): void;
    CurveGUI(): void;
    DrawRegion(curve1: UnityEditor.CurveWrapper, curve2: UnityEditor.CurveWrapper, hasFocus: boolean): void;
    EndLiveEdit(): void;
    EndTimeRangeSelection(): void;
    FrameClip(horizontally: boolean, vertically: boolean): void;
    FrameSelected(horizontally: boolean, vertically: boolean): void;
    GetTopMostCurveID(curveID: any): boolean;
    GridGUI(): void;
    InLiveEdit(): boolean;
    InvalidateBounds(): void;
    InvalidateSelectionBounds(): void;
    IsDraggingCurve(cw: UnityEditor.CurveWrapper): boolean;
    IsDraggingCurveOrRegion(): boolean;
    IsDraggingKey(): boolean;
    IsDraggingRegion(cw1: UnityEditor.CurveWrapper, cw2: UnityEditor.CurveWrapper): boolean;
    MovePoints(): any;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    SaveKeySelection(undoLabel: string): void;
    SelectAll(): void;
    SelectNone(): void;
    StartLiveEdit(): void;
    TimeRangeSelectTo(time: number): void;
    UpdateCurves(curveIds: number[], undoText: string): void;
    UpdateCurves(changedCurves: UnityEditor.ChangedCurve[], undoText: string): void;
    animationCurves: UnityEditor.CurveWrapper[];
    readonly curveBounds: any;
    readonly drawingBounds: any;
    readonly hasSelection: boolean;
    readonly selectionBounds: any;
    settings: UnityEditor.CurveEditorSettings;
    tangentColor: any;
    readonly timeFormat: UnityEditor.TimeArea.TimeFormat;
    curvesUpdated: (() => void);
    invSnap: number;
    state: UnityEditor.ICurveEditorState;
  }
}
declare namespace UnityEditor.CurveEditor {
  class SavedCurve extends System.Object {
    constructor();
    curveId: number;
    keys: UnityEditor.CurveEditor.SavedCurve.SavedKeyFrame[];
  }
}
declare namespace UnityEditor.CurveEditor.SavedCurve {
  class SavedKeyFrame extends System.Object {
    constructor(key: any, selected: UnityEditor.CurveWrapper.SelectionMode);
    Clone(): UnityEditor.CurveEditor.SavedCurve.SavedKeyFrame;
    key: any;
    selected: UnityEditor.CurveWrapper.SelectionMode;
  }
}
declare namespace UnityEditor.CurveEditor.SavedCurve {
  class SavedKeyFrameComparer extends System.Object {
    constructor();
    Compare(time1: number, time2: number): number;
    static Instance: UnityEditor.CurveEditor.SavedCurve.SavedKeyFrameComparer;
  }
}
declare namespace UnityEditor.CurveEditor {
  class AxisLock extends System.Enum {
    protected constructor();
    static None: UnityEditor.CurveEditor.AxisLock;
    value__: number;
    static X: UnityEditor.CurveEditor.AxisLock;
    static Y: UnityEditor.CurveEditor.AxisLock;
  }
}
declare namespace UnityEditor.CurveEditor {
  class KeyFrameCopy extends System.ValueType {
    protected constructor();
    idx: number;
    inTangent: number;
    outTangent: number;
    selectionIdx: number;
    time: number;
    value: number;
  }
}
declare namespace UnityEditor.CurveEditor {
  class Styles extends System.Object {
    protected constructor();
    static axisLabelNumberField: any;
    static dragLabel: any;
    static labelTickMarksX: any;
    static labelTickMarksY: any;
    static none: any;
    static pointIcon: any;
    static pointIconSelected: any;
    static pointIconSelectedOverlay: any;
    static pointIconSemiSelectedOverlay: any;
    static rightAlignedLabel: any;
    static selectionRect: any;
    static wrapModeMenuIcon: any;
  }
}
declare namespace UnityEditor.CurveEditor {
  class PickMode extends System.Enum {
    protected constructor();
    static Click: UnityEditor.CurveEditor.PickMode;
    static Marquee: UnityEditor.CurveEditor.PickMode;
    static None: UnityEditor.CurveEditor.PickMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveEditorRectangleTool extends UnityEditor.RectangleTool {
    constructor();
    HandleEvents(): void;
    HandleOverlayEvents(): void;
    Initialize(timeArea: UnityEditor.TimeArea): void;
    OnGUI(): void;
    OverlayOnGUI(): void;
  }
}
declare namespace UnityEditor {
  class RectangleTool extends System.Object {
    constructor();
    CalculateScaleTimeMatrix(fromTime: number, toTime: number, offsetTime: number, pivotTime: number, frameRate: number, transform: any, flipKeys: any): boolean;
    CalculateScaleValueMatrix(fromValue: number, toValue: number, offsetValue: number, pivotValue: number, transform: any, flipKeys: any): boolean;
    HandleClutchKeys(): void;
    Initialize(timeArea: UnityEditor.TimeArea): void;
    PixelToTime(pixelTime: number, frameRate: number): number;
    PixelToValue(pixelValue: number): number;
    TimeToPixel(time: number): number;
    ToolCoordToPosition(coord: UnityEditor.RectangleTool.ToolCoord, bounds: any): any;
    ValueToPixel(value: number): number;
    readonly contentRect: any;
    readonly rippleTimeClutch: boolean;
    readonly styles: UnityEditor.RectangleTool.Styles;
    readonly timeArea: UnityEditor.TimeArea;
  }
}
declare namespace UnityEditor.CurveEditorRectangleTool {
  class ToolLayout extends System.ValueType {
    protected constructor();
    bottomLabelAnchor: any;
    displayHScale: boolean;
    displayVScale: boolean;
    hBarLeftRect: any;
    hBarRect: any;
    hBarRightRect: any;
    leftLabelAnchor: any;
    rightLabelAnchor: any;
    scaleBottomRect: any;
    scaleLeftRect: any;
    scaleRightRect: any;
    scaleTopRect: any;
    selectionLeftRect: any;
    selectionRect: any;
    selectionTopRect: any;
    topLabelAnchor: any;
    underlayLeftRect: any;
    underlayTopRect: any;
    vBarBottomRect: any;
    vBarRect: any;
    vBarTopRect: any;
  }
}
declare namespace UnityEditor.CurveEditorRectangleTool {
  class DragMode extends System.Enum {
    protected constructor();
    static MoveBothAxis: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveHorizontal: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveScaleHorizontal: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveScaleVertical: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveVertical: UnityEditor.CurveEditorRectangleTool.DragMode;
    static None: UnityEditor.CurveEditorRectangleTool.DragMode;
    static ScaleBothAxis: UnityEditor.CurveEditorRectangleTool.DragMode;
    static ScaleHorizontal: UnityEditor.CurveEditorRectangleTool.DragMode;
    static ScaleVertical: UnityEditor.CurveEditorRectangleTool.DragMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveEditorSelection extends UnityEngine.ScriptableObject {
    constructor();
    selectedCurves: UnityEditor.CurveSelection[];
  }
}
declare namespace UnityEditor {
  class CurveSelection extends System.Object {
    protected constructor();
    CompareTo(_other: any): number;
    Equals(_other: any): boolean;
    GetHashCode(): number;
    curveID: number;
    key: number;
    semiSelected: boolean;
    type: UnityEditor.CurveSelection.SelectionType;
  }
}
declare namespace UnityEditor.CurveSelection {
  class SelectionType extends System.Enum {
    protected constructor();
    static Count: UnityEditor.CurveSelection.SelectionType;
    static InTangent: UnityEditor.CurveSelection.SelectionType;
    static Key: UnityEditor.CurveSelection.SelectionType;
    static OutTangent: UnityEditor.CurveSelection.SelectionType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveEditorSettings extends System.Object {
    constructor();
    readonly hasUnboundedRanges: boolean;
    hRangeMax: number;
    hRangeMin: number;
    hSlider: boolean;
    vRangeMax: number;
    vRangeMin: number;
    vSlider: boolean;
    allowDeleteLastKeyInCurve: boolean;
    allowDraggingCurvesAndRegions: boolean;
    hTickLabelOffset: number;
    showAxisLabels: boolean;
    showWrapperPopups: boolean;
    undoRedoSelection: boolean;
    useFocusColors: boolean;
    wrapColor: UnityEditor.EditorGUIUtility.SkinnedColor;
  }
}
declare namespace UnityEditor.CurveEditorSettings {
  class RectangleToolFlags extends System.Enum {
    protected constructor();
    static FullRectangleTool: UnityEditor.CurveEditorSettings.RectangleToolFlags;
    static MiniRectangleTool: UnityEditor.CurveEditorSettings.RectangleToolFlags;
    static NoRectangleTool: UnityEditor.CurveEditorSettings.RectangleToolFlags;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WrapModeFixedCurve extends System.Enum {
    protected constructor();
    static Clamp: UnityEditor.WrapModeFixedCurve;
    static Loop: UnityEditor.WrapModeFixedCurve;
    static PingPong: UnityEditor.WrapModeFixedCurve;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveEditorWindow extends UnityEditor.EditorWindow {
    constructor();
    Show(): void;
    Show(immediateDisplay: boolean): void;
    Show(onCurveChanged: ((obj: any) => void), settings: UnityEditor.CurveEditorSettings): void;
    Show(viewToUpdate: UnityEditor.GUIView, settings: UnityEditor.CurveEditorSettings): void;
    UpdateCurve(): void;
    static color: any;
    currentPresetLibrary: string;
    static curve: any;
    static readonly instance: UnityEditor.CurveEditorWindow;
    static property: UnityEditor.SerializedProperty;
    static readonly visible: boolean;
  }
}
declare namespace UnityEditor.CurveEditorWindow {
  class NormalizationMode extends System.Enum {
    protected constructor();
    static Denormalize: UnityEditor.CurveEditorWindow.NormalizationMode;
    static None: UnityEditor.CurveEditorWindow.NormalizationMode;
    static Normalize: UnityEditor.CurveEditorWindow.NormalizationMode;
    value__: number;
  }
}
declare namespace UnityEditor.CurveEditorWindow {
  class Styles extends System.Object {
    constructor();
    curveEditorBackground: any;
    curveSwatch: any;
    curveSwatchArea: any;
    curveWrapPopup: any;
    miniToolbarButton: any;
    miniToolbarPopup: any;
  }
}
declare namespace UnityEditor {
  class ChangedCurve extends System.Object {
    constructor(curve: any, curveId: number, binding: UnityEditor.EditorCurveBinding);
    GetHashCode(): number;
    binding: UnityEditor.EditorCurveBinding;
    curve: any;
    curveId: number;
  }
}
declare namespace UnityEditor {
  class KeyIdentifier extends System.Object {
    constructor(_curve: any, _curveId: number, _keyIndex: number);
    constructor(_curve: any, _curveId: number, _keyIndex: number, _binding: UnityEditor.EditorCurveBinding);
    readonly keyframe: any;
    binding: UnityEditor.EditorCurveBinding;
    curve: any;
    curveId: number;
    key: number;
  }
}
declare namespace UnityEditor {
  class CurveUpdater {
    protected constructor();
    UpdateCurves(curve: UnityEditor.ChangedCurve[], undoText: string): void;
  }
}
declare namespace UnityEditor {
  class CurveMenuManager extends System.Object {
    constructor(updater: UnityEditor.CurveUpdater);
    AddTangentMenuItems(menu: UnityEditor.GenericMenu, keyList: UnityEditor.KeyIdentifier[]): void;
    Flatten(keysToSet: UnityEditor.KeyIdentifier[]): void;
    SetAuto(keysToSet: any): void;
    SetBoth(mode: UnityEditor.AnimationUtility.TangentMode, keysToSet: UnityEditor.KeyIdentifier[]): void;
    SetBothConstant(keysToSet: any): void;
    SetBothEditable(keysToSet: any): void;
    SetBothLinear(keysToSet: any): void;
    SetBroken(_keysToSet: any): void;
    SetClampedAuto(keysToSet: any): void;
    SetEditable(keysToSet: any): void;
    SetFlat(keysToSet: any): void;
    SetLeftConstant(keysToSet: any): void;
    SetLeftEditable(keysToSet: any): void;
    SetLeftLinear(keysToSet: any): void;
    SetRightConstant(keysToSet: any): void;
    SetRightEditable(keysToSet: any): void;
    SetRightLinear(keysToSet: any): void;
    SetTangent(leftRight: number, mode: UnityEditor.AnimationUtility.TangentMode, keysToSet: UnityEditor.KeyIdentifier[]): void;
  }
}
declare namespace UnityEditorInternal {
  class DopeLine extends System.Object {
    constructor(hierarchyNodeID: number, curves: UnityEditorInternal.AnimationWindowCurve[]);
    InvalidateKeyframes(): void;
    readonly curves: UnityEditorInternal.AnimationWindowCurve[];
    readonly hierarchyNodeID: number;
    readonly isEditable: boolean;
    readonly isPptrDopeline: boolean;
    readonly keys: UnityEditorInternal.AnimationWindowKeyframe[];
    readonly valueType: any;
    static dopekeyStyle: any;
    hasChildren: boolean;
    isMasterDopeline: boolean;
    objectType: any;
    position: any;
    tallMode: boolean;
  }
}
declare namespace UnityEditorInternal {
  class DopeSheetEditor extends UnityEditor.TimeArea {
    constructor(owner: UnityEditor.EditorWindow);
    DrawMasterDopelineBackground(position: any): void;
    FrameClip(): void;
    FrameSelected(): void;
    Init(): void;
    OnDisable(): void;
    OnGUI(position: any, scrollPosition: any): void;
    RecalculateBounds(): void;
    UpdateCurves(changedCurves: UnityEditor.ChangedCurve[], undoText: string): void;
    readonly contentHeight: number;
    readonly drawingBounds: any;
    readonly isDragging: boolean;
    readonly spritePreviewLoading: boolean;
    m_Bounds: any;
    m_Owner: UnityEditor.EditorWindow;
    state: UnityEditorInternal.AnimationWindowState;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class DrawElement extends System.ValueType {
    protected constructor();
    color: any;
    position: any;
    texture: any;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class DopeSheetControlPointRenderer extends System.Object {
    constructor();
    AddDragDropKey(element: UnityEditorInternal.DopeSheetEditor.DrawElement): void;
    AddSelectedKey(element: UnityEditorInternal.DopeSheetEditor.DrawElement): void;
    AddUnselectedKey(element: UnityEditorInternal.DopeSheetEditor.DrawElement): void;
    Clear(): void;
    FlushCache(): void;
    Render(): void;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class AddKeyToDopelineContext extends System.ValueType {
    protected constructor();
    dopeline: UnityEditorInternal.DopeLine;
    time: UnityEditorInternal.AnimationKeyTime;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class DopeSheetSelectionRect extends System.Object {
    constructor(owner: UnityEditorInternal.DopeSheetEditor);
    GetCurrentPixelRect(): any;
    GetCurrentTimeRect(): any;
    OnGUI(position: any): void;
    createRect: any;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect {
  class SelectionType extends System.Enum {
    protected constructor();
    static Additive: UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect.SelectionType;
    static Normal: UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect.SelectionType;
    static Subtractive: UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect.SelectionType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class DopeSheetEditorRectangleTool extends UnityEditor.RectangleTool {
    constructor();
    HandleEvents(): void;
    Initialize(timeArea: UnityEditor.TimeArea): void;
    OnGUI(): void;
  }
}
declare namespace UnityEditor.DopeSheetEditorRectangleTool {
  class ToolLayout extends System.ValueType {
    protected constructor();
    displayHScale: boolean;
    displayVScale: boolean;
    hBarLeftRect: any;
    hBarOverlayRect: any;
    hBarRect: any;
    hBarRightRect: any;
    leftLabelAnchor: any;
    rightLabelAnchor: any;
    scaleBottomRect: any;
    scaleLeftRect: any;
    scaleRightRect: any;
    scaleTopRect: any;
    selectionLeftRect: any;
    selectionRect: any;
    selectionTopRect: any;
    summaryRect: any;
    underlayLeftRect: any;
    underlayTopRect: any;
    vBarBottomRect: any;
    vBarOverlayRect: any;
    vBarRect: any;
    vBarTopRect: any;
  }
}
declare namespace UnityEditorInternal {
  class GameObjectSelectionItem extends UnityEditorInternal.AnimationWindowSelectionItem {
    constructor();
    static Create(gameObject: any): UnityEditorInternal.GameObjectSelectionItem;
    Synchronize(): void;
    animationClip: any;
  }
}
declare namespace UnityEditorInternal {
  class IAnimationContextualResponder {
    protected constructor();
    AddAnimatedKeys(): void;
    AddCandidateKeys(): void;
    AddKey(modifications: UnityEditor.PropertyModification[]): void;
    CandidateExists(modifications: UnityEditor.PropertyModification[]): boolean;
    CurveExists(modifications: UnityEditor.PropertyModification[]): boolean;
    GoToNextKeyframe(modifications: UnityEditor.PropertyModification[]): void;
    GoToPreviousKeyframe(modifications: UnityEditor.PropertyModification[]): void;
    HasAnyCandidates(): boolean;
    HasAnyCurves(): boolean;
    IsAnimatable(modifications: UnityEditor.PropertyModification[]): boolean;
    IsEditable(targetObject: UnityEngine.Object): boolean;
    KeyExists(modifications: UnityEditor.PropertyModification[]): boolean;
    RemoveCurve(modifications: UnityEditor.PropertyModification[]): void;
    RemoveKey(modifications: UnityEditor.PropertyModification[]): void;
  }
}
declare namespace UnityEditorInternal {
  class IAnimationRecordingState {
    protected constructor();
    AddPropertyModification(binding: UnityEditor.EditorCurveBinding, propertyModification: UnityEditor.PropertyModification, keepPrefabOverride: boolean): void;
    DiscardModification(modification: UnityEditor.PropertyModification): boolean;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    readonly activeAnimationClip: any;
    readonly activeGameObject: any;
    readonly activeRootGameObject: any;
    readonly addZeroFrame: boolean;
    readonly currentFrame: number;
  }
}
declare namespace UnityEditor.RectangleTool {
  class ToolCoord extends System.Enum {
    protected constructor();
    static Bottom: UnityEditor.RectangleTool.ToolCoord;
    static BottomLeft: UnityEditor.RectangleTool.ToolCoord;
    static BottomRight: UnityEditor.RectangleTool.ToolCoord;
    static Center: UnityEditor.RectangleTool.ToolCoord;
    static Left: UnityEditor.RectangleTool.ToolCoord;
    static Right: UnityEditor.RectangleTool.ToolCoord;
    static Top: UnityEditor.RectangleTool.ToolCoord;
    static TopLeft: UnityEditor.RectangleTool.ToolCoord;
    static TopRight: UnityEditor.RectangleTool.ToolCoord;
    value__: number;
  }
}
declare namespace UnityEditor.RectangleTool {
  class Styles extends System.Object {
    constructor();
    dopesheetScaleLeft: any;
    dopesheetScaleRight: any;
    dragLabel: any;
    rectangleToolHBar: any;
    rectangleToolHBarLeft: any;
    rectangleToolHBarRight: any;
    rectangleToolHighlight: any;
    rectangleToolScaleBottom: any;
    rectangleToolScaleLeft: any;
    rectangleToolScaleRight: any;
    rectangleToolScaleTop: any;
    rectangleToolSelection: any;
    rectangleToolVBar: any;
    rectangleToolVBarBottom: any;
    rectangleToolVBarTop: any;
  }
}
declare namespace UnityEditor {
  class RotationCurveInterpolation extends System.Object {
    constructor();
    static ExtractComponentCharacter(name: string): any;
    static GetCurveIndexFromName(name: string): number;
    static GetCurveState(clip: any, selection: UnityEditor.EditorCurveBinding[]): UnityEditor.RotationCurveInterpolation.State;
    static GetModeFromCurveData(data: UnityEditor.EditorCurveBinding): UnityEditor.RotationCurveInterpolation.Mode;
    static GetPrefixForInterpolation(newInterpolationMode: UnityEditor.RotationCurveInterpolation.Mode): string;
    static RemapAnimationBindingForAddKey(binding: UnityEditor.EditorCurveBinding, clip: any): UnityEditor.EditorCurveBinding[];
    static RemapAnimationBindingForRotationAddKey(binding: UnityEditor.EditorCurveBinding, clip: any): UnityEditor.EditorCurveBinding[];
    static RemapAnimationBindingForRotationCurves(curveBinding: UnityEditor.EditorCurveBinding, clip: any): UnityEditor.EditorCurveBinding;
    static kPostFix: any[];
  }
}
declare namespace UnityEditor.RotationCurveInterpolation {
  class State extends System.ValueType {
    protected constructor();
    allAreBaked: boolean;
    allAreNonBaked: boolean;
    allAreRaw: boolean;
    allAreRotations: boolean;
  }
}
declare namespace UnityEditor.RotationCurveInterpolation {
  class Mode extends System.Enum {
    protected constructor();
    static Baked: UnityEditor.RotationCurveInterpolation.Mode;
    static NonBaked: UnityEditor.RotationCurveInterpolation.Mode;
    static RawEuler: UnityEditor.RotationCurveInterpolation.Mode;
    static RawQuaternions: UnityEditor.RotationCurveInterpolation.Mode;
    static Undefined: UnityEditor.RotationCurveInterpolation.Mode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveRenderer {
    protected constructor();
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, wrapColor: any): void;
    EvaluateCurveDeltaSlow(time: number): number;
    EvaluateCurveSlow(time: number): number;
    FlushCache(): void;
    GetBounds(): any;
    GetBounds(minTime: number, maxTime: number): any;
    GetCurve(): any;
    RangeEnd(): number;
    RangeStart(): number;
    SetCustomRange(start: number, end: number): void;
    SetWrap(wrap: any): void;
    SetWrap(preWrap: any, postWrap: any): void;
  }
}
declare namespace UnityEditor {
  class EulerCurveCombinedRenderer extends System.Object {
    constructor(quaternionX: any, quaternionY: any, quaternionZ: any, quaternionW: any, eulerX: any, eulerY: any, eulerZ: any);
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, component: number, wrapColor: any): void;
    EvaluateCurveDeltaSlow(time: number, component: number): number;
    EvaluateCurveSlow(time: number, component: number): number;
    GetBounds(minTime: number, maxTime: number, component: number): any;
    GetCurveOfComponent(component: number): any;
    PostWrapMode(): any;
    PreWrapMode(): any;
    RangeEnd(): number;
    RangeStart(): number;
    SetCustomRange(start: number, end: number): void;
    SetWrap(wrap: any): void;
    SetWrap(preWrap: any, postWrap: any): void;
  }
}
declare namespace UnityEditor {
  class EulerCurveRenderer extends System.Object {
    constructor(component: number, renderer: UnityEditor.EulerCurveCombinedRenderer);
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, wrapColor: any): void;
    EvaluateCurveDeltaSlow(time: number): number;
    EvaluateCurveSlow(time: number): number;
    FlushCache(): void;
    GetBounds(): any;
    GetBounds(minTime: number, maxTime: number): any;
    GetCurve(): any;
    RangeEnd(): number;
    RangeStart(): number;
    SetCustomRange(start: number, end: number): void;
    SetWrap(wrap: any): void;
    SetWrap(preWrapMode: any, postWrapMode: any): void;
  }
}
declare namespace UnityEditor {
  class NormalCurveRenderer extends System.Object {
    constructor(curve: any);
    static CalculateRanges(minTime: number, maxTime: number, rangeStart: number, rangeEnd: number, preWrapMode: any, postWrapMode: any): number[];
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, wrapColor: any): void;
    static DrawCurveWrapped(minTime: number, maxTime: number, rangeStart: number, rangeEnd: number, preWrap: any, postWrap: any, color: any, transform: any, points: any[], wrapColor: any): void;
    static DrawCurveWrapped(minTime: number, maxTime: number, rangeStart: number, rangeEnd: number, preWrap: any, postWrap: any, mesh: any, firstPoint: any, lastPoint: any, transform: any, color: any, wrapColor: any): void;
    static DrawPolyLine(transform: any, minDistance: number, points: any[]): void;
    EvaluateCurveDeltaSlow(time: number): number;
    EvaluateCurveSlow(time: number): number;
    FlushCache(): void;
    GetBounds(): any;
    GetBounds(minTime: number, maxTime: number): any;
    GetCurve(): any;
    RangeEnd(): number;
    RangeStart(): number;
    SetCustomRange(start: number, end: number): void;
    SetWrap(wrap: any): void;
    SetWrap(preWrap: any, postWrap: any): void;
    static readonly curveMaterial: any;
  }
}
declare namespace UnityEditor {
  class AnimationEventTimeLine extends System.Object {
    constructor(owner: UnityEditor.EditorWindow);
    AddEvent(time: number, gameObject: any, animationClip: any): void;
    ClearSelection(): void;
    DeleteEvents(clip: any, deleteIndices: boolean[]): void;
    DrawInstantTooltip(position: any): void;
    EditEvent(gameObject: any, clip: any, index: number): void;
    EditEvents(gameObject: any, clip: any, selectedIndices: boolean[]): void;
    EventLineContextMenuAdd(obj: any): void;
    EventLineContextMenuDelete(obj: any): void;
    EventLineContextMenuEdit(obj: any): void;
    EventLineGUI(rect: any, state: UnityEditorInternal.AnimationWindowState): void;
  }
}
declare namespace UnityEditor.AnimationEventTimeLine {
  class EventComparer extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.AnimationEventTimeLine {
  class EventLineContextMenuObject extends System.Object {
    constructor(animated: any, clip: any, time: number, index: number, selected: boolean[]);
    m_Animated: any;
    m_Clip: any;
    m_Index: number;
    m_Selected: boolean[];
    m_Time: number;
  }
}
declare namespace UnityEditor {
  class EditorGUIExt extends System.Object {
    constructor();
    static DragSelection(positions: any[], selections: any, style: any): boolean;
    static MinMaxScroller(position: any, id: number, value: any, size: any, visualStart: number, visualEnd: number, startLimit: number, endLimit: number, slider: any, thumb: any, leftButton: any, rightButton: any, horiz: boolean): void;
    static MinMaxSlider(position: any, value: any, size: any, visualStart: number, visualEnd: number, startLimit: number, endLimit: number, slider: any, thumb: any, horiz: boolean): void;
    static MultiSelection(rect: any, positions: any[], content: any, hitPositions: any[], selections: any, readOnly: boolean[], clickedIndex: any, offset: any, startSelect: any, endSelect: any, style: any): UnityEditor.HighLevelEvent;
  }
}
declare namespace UnityEditor.EditorGUIExt {
  class Styles extends System.Object {
    constructor();
    selectionRect: any;
  }
}
declare namespace UnityEditor.EditorGUIExt {
  class MinMaxSliderState extends System.Object {
    constructor();
    dragEndLimit: number;
    dragStartLimit: number;
    dragStartPos: number;
    dragStartSize: number;
    dragStartValue: number;
    dragStartValuesPerPixel: number;
    whereWeDrag: number;
  }
}
declare namespace UnityEditor.EditorGUIExt {
  class DragSelectionState extends System.Enum {
    protected constructor();
    static Dragging: UnityEditor.EditorGUIExt.DragSelectionState;
    static DragSelecting: UnityEditor.EditorGUIExt.DragSelectionState;
    static None: UnityEditor.EditorGUIExt.DragSelectionState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class HighLevelEvent extends System.Enum {
    protected constructor();
    static BeginDrag: UnityEditor.HighLevelEvent;
    static Click: UnityEditor.HighLevelEvent;
    static ContextClick: UnityEditor.HighLevelEvent;
    static Delete: UnityEditor.HighLevelEvent;
    static DoubleClick: UnityEditor.HighLevelEvent;
    static Drag: UnityEditor.HighLevelEvent;
    static EndDrag: UnityEditor.HighLevelEvent;
    static None: UnityEditor.HighLevelEvent;
    static SelectionChanged: UnityEditor.HighLevelEvent;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurveUtility extends System.Object {
    protected constructor();
    static CalculateSmoothTangent(key: any): number;
    static GetBalancedColor(c: any): any;
    static GetClipName(clip: any): string;
    static GetIconCurve(): any;
    static GetIconKey(): any;
    static GetPathAndTypeID(path: string, type: any): number;
    static GetPropertyColor(name: string): any;
    static HaveKeysInRange(curve: any, beginTime: number, endTime: number): boolean;
    static RemoveKeysInRange(curve: any, beginTime: number, endTime: number): void;
    static SetKeyModeFromContext(curve: any, keyIndex: number): void;
  }
}
declare namespace UnityEditor {
  class QuaternionCurveTangentCalculation extends System.ValueType {
    protected constructor();
    CalculateLinearTangent(fromIndex: number, toIndex: number, componentIndex: number): number;
    CalculateLinearTangent(from: any, to: any, component: number): number;
    CalculateSmoothTangent(index: number, component: number): number;
    GetCurve(index: number): any;
    static GetEquivalentEulerAngles(quat: any): any[];
    static GetEulerFromQuaternion(q: any, refEuler: any): any;
    static SafeDeltaDivide(dy: number, dx: number): number;
    SetCurve(index: number, curve: any): void;
    UpdateTangentsFromMode(componentIndex: number): void;
    UpdateTangentsFromMode(index: number, componentIndex: number): void;
    static UpdateTangentsFromMode(curve: any, clip: any, curveBinding: UnityEditor.EditorCurveBinding): void;
  }
}
declare namespace UnityEditor {
  class AnnotationWindow extends UnityEditor.EditorWindow {
    constructor();
    static IconChanged(): void;
    MonoScriptIconChanged(monoScript: UnityEditor.MonoScript): void;
  }
}
declare namespace UnityEditor.AnnotationWindow {
  class Styles extends System.Object {
    constructor();
    background: any;
    columnHeaderStyle: any;
    iconDropDown: any;
    listEvenBg: any;
    listHeaderStyle: any;
    listOddBg: any;
    listTextStyle: any;
    seperator: any;
    texelWorldSizeStyle: any;
    toggle: any;
  }
}
declare namespace UnityEditor {
  class AInfo extends System.Object {
    constructor(gizmoEnabled: boolean, iconEnabled: boolean, flags: number, classID: number, scriptClass: string);
    CompareTo(obj: any): number;
    Equals(obj: any): boolean;
    Equals(other: UnityEditor.AInfo): boolean;
    HasGizmo(): boolean;
    HasIcon(): boolean;
    m_ClassID: number;
    m_DisplayText: string;
    m_Flags: number;
    m_GizmoEnabled: boolean;
    m_IconEnabled: boolean;
    m_ScriptClass: string;
  }
}
declare namespace UnityEditor.AInfo {
  class Flags extends System.Enum {
    protected constructor();
    static kHasGizmo: UnityEditor.AInfo.Flags;
    static kHasIcon: UnityEditor.AInfo.Flags;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LayerVisibilityWindow extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.LayerVisibilityWindow {
  class Styles extends System.Object {
    constructor();
    background: any;
    listEvenBg: any;
    listHeaderStyle: any;
    listOddBg: any;
    listTextStyle: any;
    lockButton: any;
    menuItem: any;
    separator: any;
    visibleOff: any;
    visibleOn: any;
  }
}
declare namespace UnityEditor {
  class SceneFXWindow extends UnityEditor.PopupWindowContent {
    constructor(sceneView: UnityEditor.SceneView);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor.SceneFXWindow {
  class Styles extends System.Object {
    constructor();
    menuItem: any;
  }
}
declare namespace UnityEditor {
  class DrawCameraMode extends System.Enum {
    protected constructor();
    static Albedo: UnityEditor.DrawCameraMode;
    static AlphaChannel: UnityEditor.DrawCameraMode;
    static Baked: UnityEditor.DrawCameraMode;
    static BakedAlbedo: UnityEditor.DrawCameraMode;
    static BakedCharting: UnityEditor.DrawCameraMode;
    static BakedDirectionality: UnityEditor.DrawCameraMode;
    static BakedEmissive: UnityEditor.DrawCameraMode;
    static BakedIndices: UnityEditor.DrawCameraMode;
    static BakedLightmap: UnityEditor.DrawCameraMode;
    static BakedTexelValidity: UnityEditor.DrawCameraMode;
    static Charting: UnityEditor.DrawCameraMode;
    static Clustering: UnityEditor.DrawCameraMode;
    static DeferredDiffuse: UnityEditor.DrawCameraMode;
    static DeferredNormal: UnityEditor.DrawCameraMode;
    static DeferredSmoothness: UnityEditor.DrawCameraMode;
    static DeferredSpecular: UnityEditor.DrawCameraMode;
    static Directionality: UnityEditor.DrawCameraMode;
    static Emissive: UnityEditor.DrawCameraMode;
    static Irradiance: UnityEditor.DrawCameraMode;
    static LightOverlap: UnityEditor.DrawCameraMode;
    static LitClustering: UnityEditor.DrawCameraMode;
    static Mipmaps: UnityEditor.DrawCameraMode;
    static Normal: UnityEditor.DrawCameraMode;
    static Overdraw: UnityEditor.DrawCameraMode;
    static RealtimeAlbedo: UnityEditor.DrawCameraMode;
    static RealtimeCharting: UnityEditor.DrawCameraMode;
    static RealtimeDirectionality: UnityEditor.DrawCameraMode;
    static RealtimeEmissive: UnityEditor.DrawCameraMode;
    static RealtimeIndirect: UnityEditor.DrawCameraMode;
    static RenderPaths: UnityEditor.DrawCameraMode;
    static ShadowCascades: UnityEditor.DrawCameraMode;
    static ShadowMasks: UnityEditor.DrawCameraMode;
    static SpriteMask: UnityEditor.DrawCameraMode;
    static Systems: UnityEditor.DrawCameraMode;
    static Textured: UnityEditor.DrawCameraMode;
    static TexturedWire: UnityEditor.DrawCameraMode;
    static ValidateAlbedo: UnityEditor.DrawCameraMode;
    static ValidateMetalSpecular: UnityEditor.DrawCameraMode;
    value__: number;
    static Wireframe: UnityEditor.DrawCameraMode;
  }
}
declare namespace UnityEditor {
  class SceneRenderModeWindow extends UnityEditor.PopupWindowContent {
    constructor(sceneView: UnityEditor.SceneView);
    static GetGUIContent(drawCameraMode: UnityEditor.DrawCameraMode): any;
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
  }
}
declare namespace UnityEditor.SceneRenderModeWindow {
  class Styles extends System.Object {
    constructor();
    static sBakedGIHeader: any;
    static sDeferredHeader: any;
    static sGlobalIlluminationHeader: any;
    static sMaterialValidationHeader: any;
    static sMenuItem: any;
    static sMiscellaneous: any;
    static sRealtimeGIHeader: any;
    static sRenderModeOptions: any[];
    static sRenderModeUIOrder: UnityEditor.DrawCameraMode[];
    static sResolutionToggle: any;
    static sSeparator: any;
    static sShadedHeader: any;
  }
}
declare namespace UnityEditor {
  class AssetStatus extends System.Enum {
    protected constructor();
    static BadState: UnityEditor.AssetStatus;
    static Calculating: UnityEditor.AssetStatus;
    static ClientOnly: UnityEditor.AssetStatus;
    static Conflict: UnityEditor.AssetStatus;
    static Ignored: UnityEditor.AssetStatus;
    static NewLocalVersion: UnityEditor.AssetStatus;
    static NewVersionAvailable: UnityEditor.AssetStatus;
    static RestoredFromTrash: UnityEditor.AssetStatus;
    static Same: UnityEditor.AssetStatus;
    static ServerOnly: UnityEditor.AssetStatus;
    static Unchanged: UnityEditor.AssetStatus;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssetsItem extends System.Object {
    constructor();
    assetIsDir: number;
    changeFlags: number;
    enabled: number;
    exists: number;
    exportedAssetPath: string;
    guid: string;
    guidFolder: string;
    message: string;
    pathName: string;
    previewPath: string;
  }
}
declare namespace UnityEditor {
  class LocalCacheServer {
    constructor();
    static CheckCacheLocationExists(): boolean;
    static CheckValidCacheLocation(path: string): boolean;
    static Clear(): void;
    static CreateCacheDirectory(): void;
    static CreateIfNeeded(): void;
    Equals(other: any): boolean;
    static GetCacheLocation(): string;
    GetHashCode(): number;
    GetInstanceID(): number;
    static GetLocalCacheServerPort(): number;
    static GetRandomUnusedPort(): number;
    GetType(): any;
    static Kill(): void;
    static PingHost(host: string, port: number, timeout: number): boolean;
    SetDirty(): void;
    static Setup(): void;
    ToString(): string;
    static WaitForServerToComeAlive(port: number): boolean;
    hideFlags: any;
    name: string;
    static CustomPathKey: string;
    path: string;
    static PathKey: string;
    pid: number;
    port: number;
    size: number;
    static SizeKey: string;
    time: string;
  }
}
declare namespace UnityEditor {
  class ClipAnimationMaskType extends System.Enum {
    protected constructor();
    static CopyFromOther: UnityEditor.ClipAnimationMaskType;
    static CreateFromThisModel: UnityEditor.ClipAnimationMaskType;
    static None: UnityEditor.ClipAnimationMaskType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TransformMaskElement extends System.ValueType {
    protected constructor();
    path: string;
    weight: number;
  }
}
declare namespace UnityEditor {
  class ClipAnimationInfoCurve extends System.ValueType {
    protected constructor();
    curve: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class ModelImporterClipAnimation extends System.Object {
    constructor();
    ConfigureClipFromMask(mask: any): void;
    ConfigureMaskFromClip(mask: any): void;
    Equals(o: any): boolean;
    GetHashCode(): number;
    additiveReferencePoseFrame: number;
    curves: UnityEditor.ClipAnimationInfoCurve[];
    cycleOffset: number;
    events: any[];
    firstFrame: number;
    hasAdditiveReferencePose: boolean;
    heightFromFeet: boolean;
    heightOffset: number;
    keepOriginalOrientation: boolean;
    keepOriginalPositionXZ: boolean;
    keepOriginalPositionY: boolean;
    lastFrame: number;
    lockRootHeightY: boolean;
    lockRootPositionXZ: boolean;
    lockRootRotation: boolean;
    loop: boolean;
    loopPose: boolean;
    loopTime: boolean;
    readonly maskNeedsUpdating: boolean;
    maskSource: any;
    maskType: UnityEditor.ClipAnimationMaskType;
    mirror: boolean;
    name: string;
    rotationOffset: number;
    takeName: string;
    wrapMode: any;
  }
}
declare namespace UnityEditor {
  class ModelImporterGenerateMaterials extends System.Enum {
    protected constructor();
    static None: UnityEditor.ModelImporterGenerateMaterials;
    static PerSourceMaterial: UnityEditor.ModelImporterGenerateMaterials;
    static PerTexture: UnityEditor.ModelImporterGenerateMaterials;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterMaterialName extends System.Enum {
    protected constructor();
    static BasedOnMaterialName: UnityEditor.ModelImporterMaterialName;
    static BasedOnModelNameAndMaterialName: UnityEditor.ModelImporterMaterialName;
    static BasedOnTextureName: UnityEditor.ModelImporterMaterialName;
    static BasedOnTextureName_Or_ModelNameAndMaterialName: UnityEditor.ModelImporterMaterialName;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterMaterialSearch extends System.Enum {
    protected constructor();
    static Everywhere: UnityEditor.ModelImporterMaterialSearch;
    static Local: UnityEditor.ModelImporterMaterialSearch;
    static RecursiveUp: UnityEditor.ModelImporterMaterialSearch;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterTangentSpaceMode extends System.Enum {
    protected constructor();
    static Calculate: UnityEditor.ModelImporterTangentSpaceMode;
    static Import: UnityEditor.ModelImporterTangentSpaceMode;
    static None: UnityEditor.ModelImporterTangentSpaceMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterNormals extends System.Enum {
    protected constructor();
    static Calculate: UnityEditor.ModelImporterNormals;
    static Import: UnityEditor.ModelImporterNormals;
    static None: UnityEditor.ModelImporterNormals;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterNormalCalculationMode extends System.Enum {
    protected constructor();
    static AngleWeighted: UnityEditor.ModelImporterNormalCalculationMode;
    static AreaAndAngleWeighted: UnityEditor.ModelImporterNormalCalculationMode;
    static AreaWeighted: UnityEditor.ModelImporterNormalCalculationMode;
    static Unweighted: UnityEditor.ModelImporterNormalCalculationMode;
    static Unweighted_Legacy: UnityEditor.ModelImporterNormalCalculationMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterTangents extends System.Enum {
    protected constructor();
    static CalculateLegacy: UnityEditor.ModelImporterTangents;
    static CalculateLegacyWithSplitTangents: UnityEditor.ModelImporterTangents;
    static CalculateMikk: UnityEditor.ModelImporterTangents;
    static Import: UnityEditor.ModelImporterTangents;
    static None: UnityEditor.ModelImporterTangents;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterMeshCompression extends System.Enum {
    protected constructor();
    static High: UnityEditor.ModelImporterMeshCompression;
    static Low: UnityEditor.ModelImporterMeshCompression;
    static Medium: UnityEditor.ModelImporterMeshCompression;
    static Off: UnityEditor.ModelImporterMeshCompression;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterAnimationCompression extends System.Enum {
    protected constructor();
    static KeyframeReduction: UnityEditor.ModelImporterAnimationCompression;
    static KeyframeReductionAndCompression: UnityEditor.ModelImporterAnimationCompression;
    static Off: UnityEditor.ModelImporterAnimationCompression;
    static Optimal: UnityEditor.ModelImporterAnimationCompression;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterGenerateAnimations extends System.Enum {
    protected constructor();
    static GenerateAnimations: UnityEditor.ModelImporterGenerateAnimations;
    static InNodes: UnityEditor.ModelImporterGenerateAnimations;
    static InOriginalRoots: UnityEditor.ModelImporterGenerateAnimations;
    static InRoot: UnityEditor.ModelImporterGenerateAnimations;
    static None: UnityEditor.ModelImporterGenerateAnimations;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterAnimationType extends System.Enum {
    protected constructor();
    static Generic: UnityEditor.ModelImporterAnimationType;
    static Human: UnityEditor.ModelImporterAnimationType;
    static Legacy: UnityEditor.ModelImporterAnimationType;
    static None: UnityEditor.ModelImporterAnimationType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ModelImporterHumanoidOversampling extends System.Enum {
    protected constructor();
    value__: number;
    static X1: UnityEditor.ModelImporterHumanoidOversampling;
    static X2: UnityEditor.ModelImporterHumanoidOversampling;
    static X4: UnityEditor.ModelImporterHumanoidOversampling;
    static X8: UnityEditor.ModelImporterHumanoidOversampling;
  }
}
declare namespace UnityEditor {
  class HumanTemplate extends UnityEngine.Object {
    constructor();
    ClearTemplate(): void;
    Find(name: string): string;
    Insert(name: string, templateName: string): void;
  }
}
declare namespace UnityEditor {
  class TakeInfo extends System.ValueType {
    protected constructor();
    bakeStartTime: number;
    bakeStopTime: number;
    defaultClipName: string;
    name: string;
    sampleRate: number;
    startTime: number;
    stopTime: number;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters {
  class ImportedObject extends System.Object {
    constructor();
    asset: UnityEngine.Object;
    identifier: string;
    mainAsset: boolean;
    thumbnail: any;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters {
  class AssetImportContext extends System.Object {
    protected constructor();
    AddSubAsset(identifier: string, asset: UnityEngine.Object): void;
    AddSubAsset(identifier: string, asset: UnityEngine.Object, thumbnail: any): void;
    SetMainAsset(identifier: string, asset: UnityEngine.Object): void;
    SetMainAsset(identifier: string, asset: UnityEngine.Object, thumbnail: any): void;
    readonly assetPath: string;
    readonly selectedBuildTarget: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters {
  class ScriptedImporter extends UnityEditor.AssetImporter {
    protected constructor();
    OnImportAsset(ctx: UnityEditor.Experimental.AssetImporters.AssetImportContext): void;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters.ScriptedImporter {
  class ImportRequest extends System.ValueType {
    protected constructor();
    m_AssetSourcePath: string;
    m_SelectedBuildTarget: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters.ScriptedImporter {
  class ImportResult extends System.ValueType {
    protected constructor();
    m_AssetNames: string[];
    m_Assets: UnityEngine.Object[];
    m_Thumbnails: any[];
  }
}
declare namespace UnityEditor.Experimental.AssetImporters {
  class ScriptedImporterAttribute extends System.Attribute {
    constructor(version: number, exts: string[]);
    constructor(version: number, ext: string);
    constructor(version: number, exts: string[], importQueueOffset: number);
    constructor(version: number, ext: string, importQueueOffset: number);
    readonly fileExtensions: string[];
    readonly importQueuePriority: number;
    readonly version: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreAsset extends System.Object {
    constructor();
    Dispose(): void;
    readonly HasLivePreview: boolean;
    readonly Preview: UnityEngine.Object;
    className: string;
    displayName: string;
    dynamicPreviewURL: string;
    id: number;
    name: string;
    packageID: number;
    previewImage: any;
    price: string;
    staticPreviewURL: string;
  }
}
declare namespace UnityEditor.AssetStoreAsset {
  class PreviewInfo extends System.Object {
    constructor();
    buildProgress: number;
    categoryName: string;
    downloadProgress: number;
    encryptionKey: string;
    isDownloadable: boolean;
    isPurchased: boolean;
    packageAssetCount: number;
    packageName: string;
    packageRating: number;
    packageShortUrl: string;
    packageSize: number;
    packageUrl: string;
    packageVersion: string;
    publisherName: string;
  }
}
declare namespace UnityEditor {
  class AssetStoreAssetSelection extends System.Object {
    protected constructor();
    static AddAsset(searchResult: UnityEditor.AssetStoreAsset, placeholderPreviewImage: any): void;
    static Clear(): void;
    static ContainsAsset(id: number): boolean;
    static GetFirstAsset(): UnityEditor.AssetStoreAsset;
    static RefreshFromServer(callback: (() => void)): void;
    static readonly Count: number;
    static readonly Empty: boolean;
  }
}
declare namespace UnityEditor {
  class AssetStoreResponse extends System.Object {
    constructor();
    ToString(): string;
    readonly failed: boolean;
    readonly message: string;
    dict: any;
    ok: boolean;
  }
}
declare namespace UnityEditor {
  class AssetStoreSearchResults {
    constructor(c: ((res: UnityEditor.AssetStoreSearchResults) => void));
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    Parse(response: UnityEditor.AssetStoreResponse): void;
    ToString(): string;
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor {
  class AssetStoreResultBase<Derived> extends System.Object {
    constructor(cb: ((res: Derived) => void));
    Parse(response: UnityEditor.AssetStoreResponse): void;
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor.AssetStoreSearchResults {
  class Group extends System.ValueType {
    protected constructor();
    static Create(): UnityEditor.AssetStoreSearchResults.Group;
    assets: UnityEditor.AssetStoreAsset[];
    label: string;
    limit: number;
    name: string;
    offset: number;
    totalFound: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreAssetsInfo {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    Parse(response: UnityEditor.AssetStoreResponse): void;
    ToString(): string;
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor.AssetStoreAssetsInfo {
  class Status extends System.Enum {
    protected constructor();
    static AnonymousUser: UnityEditor.AssetStoreAssetsInfo.Status;
    static BasketNotEmpty: UnityEditor.AssetStoreAssetsInfo.Status;
    static Ok: UnityEditor.AssetStoreAssetsInfo.Status;
    static ServiceDisabled: UnityEditor.AssetStoreAssetsInfo.Status;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PurchaseResult {
    constructor(c: ((res: UnityEditor.PurchaseResult) => void));
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    Parse(response: UnityEditor.AssetStoreResponse): void;
    ToString(): string;
    error: string;
    message: string;
    packageID: number;
    status: UnityEditor.PurchaseResult.Status;
    warnings: string;
  }
}
declare namespace UnityEditor.PurchaseResult {
  class Status extends System.Enum {
    protected constructor();
    static AnonymousUser: UnityEditor.PurchaseResult.Status;
    static BasketNotEmpty: UnityEditor.PurchaseResult.Status;
    static Ok: UnityEditor.PurchaseResult.Status;
    static PasswordMissing: UnityEditor.PurchaseResult.Status;
    static PasswordWrong: UnityEditor.PurchaseResult.Status;
    static PurchaseDeclined: UnityEditor.PurchaseResult.Status;
    static ServiceDisabled: UnityEditor.PurchaseResult.Status;
    value__: number;
  }
}
declare namespace UnityEditor {
  class BuildPackageResult {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    Parse(response: UnityEditor.AssetStoreResponse): void;
    ToString(): string;
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor {
  class AssetStoreClient extends System.Object {
    constructor();
    static LoggedIn(): boolean;
    static LoggedOut(): boolean;
    static LoginError(): boolean;
    static LoginInProgress(): boolean;
    static Logout(): void;
    static readonly HasActiveSessionID: boolean;
    static readonly HasSavedSessionID: boolean;
    static readonly LoginErrorMessage: string;
    static RememberSession: boolean;
  }
}
declare namespace UnityEditor.AssetStoreClient {
  class LoginState extends System.Enum {
    protected constructor();
    static IN_PROGRESS: UnityEditor.AssetStoreClient.LoginState;
    static LOGGED_IN: UnityEditor.AssetStoreClient.LoginState;
    static LOGGED_OUT: UnityEditor.AssetStoreClient.LoginState;
    static LOGIN_ERROR: UnityEditor.AssetStoreClient.LoginState;
    value__: number;
  }
}
declare namespace UnityEditor.AssetStoreClient {
  class SearchCount extends System.ValueType {
    protected constructor();
    limit: number;
    name: string;
    offset: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreInstaBuyWindow extends UnityEditor.EditorWindow {
    constructor();
    OnDisable(): void;
    OnDownloadProgress(id: string, message: string, bytes: number, total: number): void;
    OnGUI(): void;
    OnInspectorUpdate(): void;
    static ShowAssetStoreInstaBuyWindow(asset: UnityEditor.AssetStoreAsset, purchaseMessage: string, paymentMethodCard: string, paymentMethodExpire: string, priceText: string): UnityEditor.AssetStoreInstaBuyWindow;
    static ShowAssetStoreInstaBuyWindowBuilding(asset: UnityEditor.AssetStoreAsset): void;
  }
}
declare namespace UnityEditor.AssetStoreInstaBuyWindow {
  class PurchaseStatus extends System.Enum {
    protected constructor();
    static Building: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Complete: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Declined: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Downloading: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Init: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static InProgress: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static StartBuild: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreLoginWindow extends UnityEditor.EditorWindow {
    constructor();
    static Login(loginReason: string, callback: ((errorMessage: string) => void)): void;
    static Logout(): void;
    OnDisable(): void;
    OnGUI(): void;
    static ShowAssetStoreLoginWindow(loginReason: string, callback: ((errorMessage: string) => void)): void;
    static readonly IsLoggedIn: boolean;
  }
}
declare namespace UnityEditor.AssetStoreLoginWindow {
  class Styles extends System.Object {
    constructor();
    link: any;
  }
}
declare namespace UnityEditor {
  class AssetStorePreviewManager extends System.Object {
    protected constructor();
    static AbortOlderThan(timestamp: number): void;
    static AbortSize(size: number): void;
    static CheckRepaint(): boolean;
    static StatsString(): string;
    static TextureFromUrl(url: string, label: string, textureSize: number, labelStyle: any, iconStyle: any, onlyCached: boolean): UnityEditor.AssetStorePreviewManager.CachedAssetStoreImage;
    static readonly CacheFull: boolean;
    static readonly Downloading: number;
    static MaxCachedImages: number;
  }
}
declare namespace UnityEditor.AssetStorePreviewManager {
  class CachedAssetStoreImage extends System.Object {
    constructor();
    readonly color: any;
    image: any;
    label: string;
    lastFetched: number;
    lastUsed: number;
    requestedWidth: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    static Init(): UnityEditor.AssetStoreWindow;
    Logout(): void;
    OnBecameInvisible(): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnDownloadProgress(id: string, message: string, bytes: number, total: number): void;
    OnEnable(): void;
    OnFocus(): void;
    OnGUI(): void;
    OnInitScripting(): void;
    OnLoadError(url: string): void;
    OnLostFocus(): void;
    OnOpenExternalLink(url: string): void;
    static OpenURL(url: string): void;
    Refresh(): void;
    Reload(): void;
    ToggleMaximize(): void;
    UpdateDockStatusIfNeeded(): void;
    readonly initialized: boolean;
  }
}
declare namespace UnityEditorInternal {
  class JSONValue extends System.ValueType {
    protected constructor();
    Add(value: boolean): void;
    Add(value: number): void;
    Add(value: string): void;
    AsBool(): boolean;
    AsBool(nothrow: boolean): boolean;
    AsDict(): any;
    AsDict(nothrow: boolean): any;
    AsFloat(): number;
    AsFloat(nothrow: boolean): number;
    AsList(): UnityEditorInternal.JSONValue[];
    AsList(nothrow: boolean): UnityEditorInternal.JSONValue[];
    AsObject(): any;
    AsString(): string;
    AsString(nothrow: boolean): string;
    ContainsKey(index: string): boolean;
    Get(key: string): UnityEditorInternal.JSONValue;
    IsBool(): boolean;
    IsDict(): boolean;
    IsFloat(): boolean;
    IsList(): boolean;
    IsNull(): boolean;
    IsString(): boolean;
    static NewBool(val: boolean): UnityEditorInternal.JSONValue;
    static NewDict(): UnityEditorInternal.JSONValue;
    static NewFloat(val: number): UnityEditorInternal.JSONValue;
    static NewList(): UnityEditorInternal.JSONValue;
    static NewNull(): UnityEditorInternal.JSONValue;
    static NewString(val: string): UnityEditorInternal.JSONValue;
    Set(key: string, value: boolean): void;
    Set(key: string, value: number): void;
    Set(key: string, value: string): void;
    ToString(): string;
    get_Item(index: string): UnityEditorInternal.JSONValue;
    set_Item(index: string, value: UnityEditorInternal.JSONValue): void;
  }
}
declare namespace UnityEditorInternal {
  class JSONParseException extends System.Exception {
    constructor(msg: string);
  }
}
declare namespace UnityEditorInternal {
  class JSONTypeException extends System.Exception {
    constructor(msg: string);
  }
}
declare namespace UnityEditorInternal {
  class JSONParser extends System.Object {
    constructor(jsondata: string);
    Parse(): UnityEditorInternal.JSONValue;
    static SimpleParse(jsondata: string): UnityEditorInternal.JSONValue;
  }
}
declare namespace UnityEditor {
  class StreamedAudioClipPreview extends UnityEditor.WaveformPreview {
    constructor(clip: any, initialSize: number);
  }
}
declare namespace UnityEditor {
  class WaveformPreview extends System.Object {
    protected constructor();
    ApplyModifications(): boolean;
    OptimizeForSize(newSize: any): void;
    Render(rect: any): void;
    SetChannelMode(mode: UnityEditor.WaveformPreview.ChannelMode): void;
    SetChannelMode(mode: UnityEditor.WaveformPreview.ChannelMode, specificChannelToRender: number): void;
    SetMMWaveData(interleavedOffset: number, data: number[]): void;
    SetTimeInfo(start: number, length: number): void;
    backgroundColor: any;
    readonly length: number;
    looping: boolean;
    optimized: boolean;
    readonly start: number;
    waveColor: any;
    presentedObject: UnityEngine.Object;
  }
}
declare namespace UnityEditor.StreamedAudioClipPreview {
  class AudioClipMinMaxOverview extends System.Object {
    protected constructor();
    static GetOverviewFor(clip: any): number[];
  }
}
declare namespace UnityEditor.StreamedAudioClipPreview {
  class ClipPreviewDetails extends System.ValueType {
    protected constructor();
    IsCandidateForStreaming(): boolean;
    clip: any;
    deltaStep: number;
    localLength: number;
    localStart: number;
    looping: boolean;
    normalizedDuration: number;
    normalizedStart: number;
    preview: number[];
    previewPixelsToRender: number;
    previewSamples: number;
  }
}
declare namespace UnityEditor.StreamedAudioClipPreview {
  class Segment extends System.ValueType {
    protected constructor();
    segmentLength: number;
    streamer: UnityEditor.WaveformStreamer;
    streamingIndexOffset: number;
    textureOffset: number;
  }
}
declare namespace UnityEditor.StreamedAudioClipPreview {
  class StreamingContext extends System.Object {
    constructor();
    index: number;
  }
}
declare namespace UnityEditor.WaveformPreview {
  class ChannelMode extends System.Enum {
    protected constructor();
    static MonoSum: UnityEditor.WaveformPreview.ChannelMode;
    static Separate: UnityEditor.WaveformPreview.ChannelMode;
    static SpecificChannel: UnityEditor.WaveformPreview.ChannelMode;
    value__: number;
  }
}
declare namespace UnityEditor.WaveformPreview {
  class MessageFlags extends System.Enum {
    protected constructor();
    static ContentsChanged: UnityEditor.WaveformPreview.MessageFlags;
    static Length: UnityEditor.WaveformPreview.MessageFlags;
    static Looping: UnityEditor.WaveformPreview.MessageFlags;
    static None: UnityEditor.WaveformPreview.MessageFlags;
    static Optimization: UnityEditor.WaveformPreview.MessageFlags;
    static Size: UnityEditor.WaveformPreview.MessageFlags;
    static Start: UnityEditor.WaveformPreview.MessageFlags;
    static TextureChanged: UnityEditor.WaveformPreview.MessageFlags;
    value__: number;
  }
}
declare namespace UnityEditor {
  class WaveformPreviewFactory extends System.Object {
    protected constructor();
    static Create(initialSize: number, clip: any): UnityEditor.WaveformPreview;
  }
}
declare namespace UnityEditor {
  class WaveformStreamer extends System.Object {
    constructor(clip: any, start: number, duration: number, numOutputSamples: number, onNewWaveformData: ((arg1: UnityEditor.WaveformStreamer, arg2: number[], arg3: number) => boolean));
    Stop(): void;
    readonly done: boolean;
  }
}
declare namespace UnityEditor {
  class AudioCurveRendering extends System.Object {
    constructor();
    static BeginCurveFrame(r: any): any;
    static DrawCurve(r: any, eval_: ((x: number) => number), curveColor: any): void;
    static DrawCurveBackground(r: any): void;
    static DrawCurveFrame(r: any): any;
    static DrawFilledCurve(r: any, eval_: ((x: number, col: any) => number)): void;
    static DrawFilledCurve(r: any, eval_: ((x: number) => number), curveColor: any): void;
    static DrawGradientRect(r: any, c1: any, c2: any, blend: number, horizontal: boolean): void;
    static DrawMinMaxFilledCurve(r: any, eval_: ((x: number, col: any, minValue: any, maxValue: any) => void)): void;
    static DrawSymmetricFilledCurve(r: any, eval_: ((x: number, col: any) => number)): void;
    static EndCurveFrame(): void;
    static kAudioOrange: any;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerEffectPlugin extends UnityEditor.IAudioEffectPlugin {
    constructor();
    GetFloatBuffer(name: string, data: any, numsamples: number): boolean;
    GetFloatParameter(name: string, value: any): boolean;
    GetFloatParameterInfo(name: string, minRange: any, maxRange: any, defaultValue: any): boolean;
    GetSampleRate(): number;
    IsPluginEditableAndEnabled(): boolean;
    SetFloatParameter(name: string, value: number): boolean;
  }
}
declare namespace UnityEditor {
  class IAudioEffectPlugin extends System.Object {
    protected constructor();
    GetFloatBuffer(name: string, data: any, numsamples: number): boolean;
    GetFloatParameter(name: string, value: any): boolean;
    GetFloatParameterInfo(name: string, minRange: any, maxRange: any, defaultValue: any): boolean;
    GetSampleRate(): number;
    IsPluginEditableAndEnabled(): boolean;
    SetFloatParameter(name: string, value: number): boolean;
  }
}
declare namespace UnityEditor {
  class ComplexD extends System.Object {
    constructor(real: number, imag: number);
    static Add(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Add(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Add(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Div(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Div(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Div(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Exp(omega: number): UnityEditor.ComplexD;
    Mag(): number;
    Mag2(): number;
    static Mul(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Mul(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Mul(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Pow(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Sub(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Sub(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Sub(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    imag: number;
    real: number;
  }
}
declare namespace UnityEditor {
  class DuckVolumeGUI extends UnityEditor.IAudioEffectPluginGUI {
    constructor();
    static BuildGUIStyleForLabel(color: any, fontSize: number, wrapText: boolean, fontstyle: any, anchor: any): any;
    static DrawLine(x1: number, y1: number, x2: number, y2: number, col: any): void;
    static DrawText(x: number, y: number, text: string): void;
    OnGUI(plugin: UnityEditor.IAudioEffectPlugin): boolean;
    readonly Description: string;
    readonly Name: string;
    readonly Vendor: string;
    static kAttackTimeName: string;
    static kKneeName: string;
    static kMakeupGainName: string;
    static kRatioName: string;
    static kReleaseTimeName: string;
    static kThresholdName: string;
    static textStyle10: any;
  }
}
declare namespace UnityEditor {
  class IAudioEffectPluginGUI extends System.Object {
    protected constructor();
    OnGUI(plugin: UnityEditor.IAudioEffectPlugin): boolean;
    readonly Description: string;
    readonly Name: string;
    readonly Vendor: string;
  }
}
declare namespace UnityEditor.DuckVolumeGUI {
  class DragType extends System.Enum {
    protected constructor();
    static MakeupGain: UnityEditor.DuckVolumeGUI.DragType;
    static None: UnityEditor.DuckVolumeGUI.DragType;
    static Ratio: UnityEditor.DuckVolumeGUI.DragType;
    static ThresholdAndKnee: UnityEditor.DuckVolumeGUI.DragType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class ParamEqGUI extends UnityEditor.IAudioEffectPluginGUI {
    constructor();
    static BuildGUIStyleForLabel(color: any, fontSize: number, wrapText: boolean, fontstyle: any, anchor: any): any;
    OnGUI(plugin: UnityEditor.IAudioEffectPlugin): boolean;
    readonly Description: string;
    readonly Name: string;
    readonly Vendor: string;
    static kCenterFreqName: string;
    static kFrequencyGainName: string;
    static kOctaveRangeName: string;
    static textStyle10: any;
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectDefinition extends System.Object {
    constructor(name: string, parameters: UnityEditor.Audio.MixerParameterDefinition[]);
    readonly name: string;
    readonly parameters: UnityEditor.Audio.MixerParameterDefinition[];
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectDefinitionReloader extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Audio {
  class AudioParameterPath extends System.Object {
    protected constructor();
    ResolveStringPath(getOnlyBasePath: boolean): string;
    parameter: UnityEditor.GUID;
  }
}
declare namespace UnityEditor.Audio {
  class AudioGroupParameterPath extends UnityEditor.Audio.AudioParameterPath {
    constructor(group: UnityEditor.Audio.AudioMixerGroupController, parameter: UnityEditor.GUID);
    ResolveStringPath(getOnlyBasePath: boolean): string;
    group: UnityEditor.Audio.AudioMixerGroupController;
  }
}
declare namespace UnityEditor.Audio {
  class AudioEffectParameterPath extends UnityEditor.Audio.AudioGroupParameterPath {
    constructor(group: UnityEditor.Audio.AudioMixerGroupController, effect: UnityEditor.Audio.AudioMixerEffectController, parameter: UnityEditor.GUID);
    ResolveStringPath(getOnlyBasePath: boolean): string;
    effect: UnityEditor.Audio.AudioMixerEffectController;
  }
}
declare namespace UnityEditor.Audio {
  class MixerGroupControllerCompareByName extends System.Object {
    constructor();
    Compare(x: UnityEditor.Audio.AudioMixerGroupController, y: UnityEditor.Audio.AudioMixerGroupController): number;
  }
}
declare namespace UnityEditor {
  class AudioMixerChannelStripView extends System.Object {
    constructor(state: UnityEditor.AudioMixerChannelStripView.State);
    static AddMenuItemsForReturns(pm: UnityEditor.GenericMenu, prefix: string, effectIndex: number, group: UnityEditor.Audio.AudioMixerGroupController, allGroups: UnityEditor.Audio.AudioMixerGroupController[], effectMap: any, effect: UnityEditor.Audio.AudioMixerEffectController, showCurrent: boolean): void;
    static ConnectSendPopupCallback(obj: any): void;
    static GetCableVertex(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, t: number, x: any, y: any): void;
    GetEffectBarStyle(effect: UnityEditor.Audio.AudioMixerEffectController): any;
    HorizontalFader(r: any, value: number, minValue: number, maxValue: number, direction: number, dragScale: number): number;
    static InsertEffectPopupCallback(obj: any): void;
    static Lerp(x1: number, x2: number, t: number): number;
    OnGUI(rect: any, showReferencedBuses: boolean, showBusConnections: boolean, showBusConnectionsOfSelection: boolean, allGroups: UnityEditor.Audio.AudioMixerGroupController[], effectMap: any, sortGroupsAlphabetically: boolean, showDeveloperOverlays: boolean, scrollToItem: UnityEditor.Audio.AudioMixerGroupController): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    RemoveEffectPopupCallback(obj: any): void;
    ShowDeveloperOverlays(rect: any, evt: any, show: boolean): void;
    VerticalFader(r: any, value: number, direction: number, dragScale: number, drawScaleValues: boolean, drawMarkerValue: boolean, tooltip: string, maxValue: number, style: any): number;
    VUMeter(group: UnityEditor.Audio.AudioMixerGroupController, r: any, level: number, peak: number): void;
    readonly requiresRepaint: boolean;
    static kEffectScaleMouseDrag: number;
    static kVolumeScaleMouseDrag: number;
    m_EffectInteractionControlID: number;
    m_FocusIndex: number;
    m_IndexCounter: number;
    m_MouseDragStartValue: number;
    m_MouseDragStartX: number;
    m_MouseDragStartY: number;
    m_RectSelectionControlID: number;
    m_RectSelectionRect: any;
    m_RectSelectionStartPos: any;
    sharedGuiStyle: any;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class State extends System.Object {
    constructor();
    m_LastClickedInstanceID: number;
    m_ScrollPos: any;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class EffectContext extends System.Object {
    constructor(controller: UnityEditor.Audio.AudioMixerController, groups: UnityEditor.Audio.AudioMixerGroupController[], index: number, name: string);
    controller: UnityEditor.Audio.AudioMixerController;
    groups: UnityEditor.Audio.AudioMixerGroupController[];
    index: number;
    name: string;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class ConnectSendContext extends System.Object {
    constructor(sendEffect: UnityEditor.Audio.AudioMixerEffectController, targetEffect: UnityEditor.Audio.AudioMixerEffectController);
    sendEffect: UnityEditor.Audio.AudioMixerEffectController;
    targetEffect: UnityEditor.Audio.AudioMixerEffectController;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class PatchSlot extends System.Object {
    constructor();
    group: UnityEditor.Audio.AudioMixerGroupController;
    x: number;
    y: number;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class BusConnection extends System.Object {
    constructor(srcX: number, srcY: number, targetEffect: UnityEditor.Audio.AudioMixerEffectController, mixLevel: number, col: any, isSend: boolean, isSelected: boolean);
    color: any;
    isSelected: boolean;
    isSend: boolean;
    mixLevel: number;
    srcX: number;
    srcY: number;
    targetEffect: UnityEditor.Audio.AudioMixerEffectController;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class ChannelStripParams extends System.Object {
    constructor();
    Init(controller: UnityEditor.Audio.AudioMixerController, channelStripRect: any, maxNumEffects: number): void;
    allGroups: UnityEditor.Audio.AudioMixerGroupController[];
    anySoloActive: boolean;
    bgRects: any[];
    busConnections: UnityEditor.AudioMixerChannelStripView.BusConnection[];
    drawingBuses: boolean;
    effectMap: any;
    group: UnityEditor.Audio.AudioMixerGroupController;
    index: number;
    kEffectStartIndex: number;
    kHeaderIndex: number;
    kSoloMuteBypassIndex: number;
    kTotalVULevelIndex: number;
    kVUMeterFaderIndex: number;
    maxEffects: number;
    numChannels: number;
    rectSelectionGroups: UnityEditor.Audio.AudioMixerGroupController[];
    shownGroups: UnityEditor.Audio.AudioMixerGroupController[];
    stripRect: any;
    visible: boolean;
    visibleRect: any;
    vuinfo_level: number[];
    vuinfo_peak: number[];
  }
}
declare namespace UnityEditor {
  class AudioMixerColorCodes extends System.Object {
    protected constructor();
    static AddColorItemsToGenericMenu(menu: UnityEditor.GenericMenu, groups: UnityEditor.Audio.AudioMixerGroupController[]): void;
    static GetColor(index: number): any;
  }
}
declare namespace UnityEditor.AudioMixerColorCodes {
  class ItemData extends System.ValueType {
    protected constructor();
    groups: UnityEditor.Audio.AudioMixerGroupController[];
    index: number;
  }
}
declare namespace UnityEditor {
  class AudioMixerDrawUtils extends System.Object {
    constructor();
    static AddTooltipOverlay(r: any, tooltip: string): void;
    static BuildGUIStyleForLabel(color: any, fontSize: number, wrapText: boolean, fontstyle: any, anchor: any): any;
    static DrawConnection(col: any, mixLevel: number, srcX: number, srcY: number, dstX: number, dstY: number, width: number): void;
    static DrawGradientRect(r: any, c1: any, c2: any): void;
    static DrawGradientRectHorizontal(r: any, c1: any, c2: any): void;
    static DrawLine(x1: number, y1: number, x2: number, y2: number, c: any): void;
    static DrawRect(rect: any, color: any): void;
    static DrawRegionBg(rect: any, headerRect: any, contentRect: any): void;
    static DrawScrollDropShadow(scrollViewRect: any, scrollY: number, contentHeight: number): void;
    static DrawSplitter(): void;
    static DrawVerticalShow(rect: any, fadeToTheRight: boolean): void;
    static GetAlpha(): number;
    static GetEffectColor(effect: UnityEditor.Audio.AudioMixerEffectController): any;
    static HeaderLabel(r: any, text: any, icon: any): void;
    static InitStyles(): void;
    static ReadOnlyLabel(r: any, text: string, style: any): void;
    static ReadOnlyLabel(r: any, text: string, style: any, tooltipText: string): void;
    static ReadOnlyLabel(r: any, content: any, style: any): void;
    static Vertex(x: number, y: number): void;
    static readonly styles: UnityEditor.AudioMixerDrawUtils.Styles;
    static kBackgroundHi: any;
    static kBackgroundHiHighlight: any;
    static kBackgroundLo: any;
    static kBackgroundLoHighlight: any;
  }
}
declare namespace UnityEditor.AudioMixerDrawUtils {
  class Styles extends System.Object {
    constructor();
    attenuationBar: any;
    attenuationFader: any;
    attenuationSlotGUIContent: any;
    bypassGUIContent: any;
    bypassToggle: any;
    channelStripAreaBackground: any;
    channelStripAttenuationMarkerSquare: any;
    channelStripBg: any;
    channelStripHeaderStyle: any;
    channelStripVUMeterBg: any;
    circularToggle: any;
    duckingFaderGUIContent: any;
    duckingMarker: any;
    duckVolumeSlotGUIContent: any;
    effectBar: any;
    effectName: any;
    effectSlotGUIContent: any;
    emptySendSlotGUIContent: any;
    headerStyle: any;
    leftToRightShadowTexture: any;
    mixerHeader: any;
    muteGUIContent: any;
    muteToggle: any;
    referencedGroups: any;
    regionBg: any;
    reorderableListLabel: any;
    returnSlotGUIContent: any;
    scrollShadowTexture: any;
    sendReturnBar: any;
    sendString: any;
    soloGUIContent: any;
    soloToggle: any;
    totalVULevel: any;
    vuMeterGUIContent: any;
    vuValue: any;
    warningOverlay: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerEffectGUI extends System.Object {
    protected constructor();
    static EffectHeader(text: string): void;
    static ExposePopupCallback(obj: any): void;
    static ParameterTransitionOverrideCallback(obj: any): void;
    static PopupButton(label: any, buttonContent: any, style: any, buttonRect: any, options: any[]): boolean;
    static Slider(label: any, value: any, displayScale: number, displayExponent: number, unit: string, leftValue: number, rightValue: number, controller: UnityEditor.Audio.AudioMixerController, path: UnityEditor.Audio.AudioParameterPath, options: any[]): boolean;
    static UnexposePopupCallback(obj: any): void;
  }
}
declare namespace UnityEditor.AudioMixerEffectGUI {
  class ExposedParamContext extends System.Object {
    constructor(controller: UnityEditor.Audio.AudioMixerController, path: UnityEditor.Audio.AudioParameterPath);
    controller: UnityEditor.Audio.AudioMixerController;
    path: UnityEditor.Audio.AudioParameterPath;
  }
}
declare namespace UnityEditor.AudioMixerEffectGUI {
  class ParameterTransitionOverrideContext extends System.Object {
    constructor(controller: UnityEditor.Audio.AudioMixerController, parameter: UnityEditor.GUID, type: UnityEditor.Audio.ParameterTransitionType);
    controller: UnityEditor.Audio.AudioMixerController;
    parameter: UnityEditor.GUID;
    type: UnityEditor.Audio.ParameterTransitionType;
  }
}
declare namespace UnityEditor.AudioMixerEffectGUI {
  class ParameterTransitionOverrideRemoveContext extends System.Object {
    constructor(controller: UnityEditor.Audio.AudioMixerController, parameter: UnityEditor.GUID);
    controller: UnityEditor.Audio.AudioMixerController;
    parameter: UnityEditor.GUID;
  }
}
declare namespace UnityEditor {
  class AudioMixerEffectView extends System.Object {
    constructor();
    DoEffectGUI(effectIndex: number, group: UnityEditor.Audio.AudioMixerGroupController, allGroups: UnityEditor.Audio.AudioMixerGroupController[], effectMap: any, highlightEffectIndex: any): void;
    static DoInitialModule(group: UnityEditor.Audio.AudioMixerGroupController, controller: UnityEditor.Audio.AudioMixerController, allGroups: UnityEditor.Audio.AudioMixerGroupController[]): number;
    OnGUI(group: UnityEditor.Audio.AudioMixerGroupController): void;
    RegisterCustomGUI(gui: UnityEditor.IAudioEffectPluginGUI): boolean;
  }
}
declare namespace UnityEditor.AudioMixerEffectView {
  class Texts extends System.Object {
    protected constructor();
    static addEffect: any;
    static bus: any;
    static cpuFormatString: string;
    static dB: string;
    static editInPlaymode: any;
    static none: any;
    static percentage: string;
    static pitch: any;
    static sendLevel: any;
    static volume: any;
    static wet: any;
  }
}
declare namespace UnityEditor.AudioMixerEffectView {
  class EffectDragging extends System.Object {
    constructor();
    HandleDragElement(effectIndex: number, effectRect: any, dragRect: any, group: UnityEditor.Audio.AudioMixerGroupController, allGroups: UnityEditor.Audio.AudioMixerGroupController[]): void;
    HandleDragging(totalRect: any, group: UnityEditor.Audio.AudioMixerGroupController, controller: UnityEditor.Audio.AudioMixerController): void;
    IsDraggingIndex(effectIndex: number): boolean;
    readonly dragControlID: number;
  }
}
declare namespace UnityEditor {
  class AudioMixerExposedParametersPopup extends UnityEditor.PopupWindowContent {
    protected constructor();
    GetWindowSize(): any;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor {
  class AudioMixerExposedParameterView extends System.Object {
    constructor(state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    CalcSize(): any;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    NameChanged(index: number, newName: string): void;
    OnContextClick(itemIndex: number): void;
    OnEvent(): void;
    OnGUI(rect: any): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    RecreateListControl(): void;
  }
}
declare namespace UnityEditor {
  class AudioMixerTreeViewNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(instanceID: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, group: UnityEditor.Audio.AudioMixerGroupController);
    group: UnityEditor.Audio.AudioMixerGroupController;
  }
}
declare namespace UnityEditor {
  class AudioGroupTreeViewDragging extends UnityEditor.AssetsTreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.AudioMixerGroupTreeView);
    DoDrag(parentNode: UnityEditor.IMGUI.Controls.TreeViewItem, targetNode: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dragPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor {
  class AudioGroupDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, controller: UnityEditor.Audio.AudioMixerController);
    FetchData(): void;
    static GetUniqueNodeID(group: UnityEditor.Audio.AudioMixerGroupController): number;
    IsRenamingItemAllowed(node: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    m_Controller: UnityEditor.Audio.AudioMixerController;
  }
}
declare namespace UnityEditor {
  class AudioGroupTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    m_Controller: UnityEditor.Audio.AudioMixerController;
    NodeWasToggled: ((arg1: UnityEditor.AudioMixerTreeViewNode, arg2: boolean) => void);
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupPopupContext extends System.Object {
    constructor(controller: UnityEditor.Audio.AudioMixerController, group: UnityEditor.Audio.AudioMixerGroupController);
    constructor(controller: UnityEditor.Audio.AudioMixerController, groups: UnityEditor.Audio.AudioMixerGroupController[]);
    controller: UnityEditor.Audio.AudioMixerController;
    groups: UnityEditor.Audio.AudioMixerGroupController[];
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupTreeView extends System.Object {
    constructor(mixerWindow: UnityEditor.AudioMixerWindow, treeState: UnityEditor.IMGUI.Controls.TreeViewState);
    AddAudioMixerGroup(parent: UnityEditor.Audio.AudioMixerGroupController): void;
    AddChildGroupPopupCallback(obj: any): void;
    AddSiblingGroupPopupCallback(obj: any): void;
    DeleteGroups(groups: UnityEditor.Audio.AudioMixerGroupController[], recordUndo: boolean): void;
    DuplicateGroups(groups: UnityEditor.Audio.AudioMixerGroupController[], recordUndo: boolean): void;
    EndRenaming(): void;
    GetTotalHeight(): number;
    InitSelection(revealSelectionAndFrameLastSelected: boolean): void;
    OnGUI(rect: any): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    OnTreeSelectionChanged(selection: number[]): void;
    OnTreeViewContextClick(index: number): void;
    OnUndoRedoPerformed(): void;
    ReloadTree(): void;
    ReloadTreeData(): void;
    UseScrollView(useScrollView: boolean): void;
    readonly Controller: UnityEditor.Audio.AudioMixerController;
    readonly ScrollToItem: UnityEditor.Audio.AudioMixerGroupController;
  }
}
declare namespace UnityEditor.AudioMixerGroupTreeView {
  class Styles extends System.Object {
    constructor();
    addText: any;
    audioMixerGroupIcon: any;
    header: any;
    optionsButton: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupViewList extends System.Object {
    constructor(state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    CustomDrawElement(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    GetTotalHeight(): number;
    NameChanged(index: number, newName: string): void;
    OnEvent(): void;
    OnGUI(rect: any): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    OnUndoRedoPerformed(): void;
    RecreateListControl(): void;
    SelectionChanged(selectedIndex: number): void;
  }
}
declare namespace UnityEditor.AudioMixerGroupViewList {
  class Styles extends System.Object {
    constructor();
    addButton: any;
    header: any;
    viewsIcon: any;
  }
}
declare namespace UnityEditor.AudioMixerGroupViewList {
  class ViewsContexttMenu extends System.Object {
    constructor();
    static Show(buttonRect: any, viewIndex: number, list: UnityEditor.AudioMixerGroupViewList): void;
  }
}
declare namespace UnityEditor.AudioMixerGroupViewList.ViewsContexttMenu {
  class data extends System.Object {
    constructor();
    list: UnityEditor.AudioMixerGroupViewList;
    viewIndex: number;
  }
}
declare namespace UnityEditor {
  class AudioMixerSelection extends System.Object {
    constructor(controller: UnityEditor.Audio.AudioMixerController);
    ClearChannelStrips(): void;
    HasSingleChannelStripSelection(): boolean;
    Sanitize(): void;
    SetChannelStrips(newSelection: UnityEditor.Audio.AudioMixerGroupController[]): void;
    SetSingleChannelStrip(group: UnityEditor.Audio.AudioMixerGroupController): void;
    SyncToUnitySelection(): void;
    ToggleChannelStrip(group: UnityEditor.Audio.AudioMixerGroupController): void;
    readonly ChannelStripSelection: UnityEditor.Audio.AudioMixerGroupController[];
  }
}
declare namespace UnityEditor {
  class AudioMixerSnapshotListView extends System.Object {
    constructor(state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    CustomDrawElement(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    GetTotalHeight(): number;
    LoadFromBackend(): void;
    NameChanged(index: number, newName: string): void;
    OnEvent(): void;
    OnGUI(rect: any): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    OnUndoRedoPerformed(): void;
    SelectionChanged(index: number): void;
  }
}
declare namespace UnityEditor.AudioMixerSnapshotListView {
  class Styles extends System.Object {
    constructor();
    addButton: any;
    header: any;
    snapshotsIcon: any;
    starIcon: any;
  }
}
declare namespace UnityEditor.AudioMixerSnapshotListView {
  class SnapshotMenu extends System.Object {
    constructor();
    static Show(buttonRect: any, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, list: UnityEditor.AudioMixerSnapshotListView): void;
  }
}
declare namespace UnityEditor.AudioMixerSnapshotListView.SnapshotMenu {
  class data extends System.Object {
    constructor();
    list: UnityEditor.AudioMixerSnapshotListView;
    snapshot: UnityEditor.Audio.AudioMixerSnapshotController;
  }
}
declare namespace UnityEditor {
  class AudioMixerItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, mixer: UnityEditor.Audio.AudioMixerController, infoText: string);
    UpdateSuspendedString(force: boolean): void;
    infoText: string;
    labelWidth: number;
    mixer: UnityEditor.Audio.AudioMixerController;
  }
}
declare namespace UnityEditor {
  class AudioMixerTreeViewDragging extends UnityEditor.IMGUI.Controls.TreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, mixerDroppedOnMixerCallback: ((arg1: UnityEditor.Audio.AudioMixerController[], arg2: UnityEditor.Audio.AudioMixerController) => void));
    DoDrag(parentNode: UnityEditor.IMGUI.Controls.TreeViewItem, targetNode: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dragPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, row: number): boolean;
    StartDrag(draggedNode: UnityEditor.IMGUI.Controls.TreeViewItem, draggedNodes: number[]): void;
  }
}
declare namespace UnityEditor.AudioMixerTreeViewDragging {
  class DragData extends System.Object {
    constructor(draggedItems: UnityEditor.AudioMixerItem[]);
    m_DraggedItems: UnityEditor.AudioMixerItem[];
  }
}
declare namespace UnityEditor {
  class AudioMixersDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, getAllControllersCallback: (() => UnityEditor.Audio.AudioMixerController[]));
    FetchData(): void;
    GetInsertAfterItemIDForNewItem(newName: string, parentItem: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditor {
  class AudioMixersTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    BeginCreateNewMixer(): void;
  }
}
declare namespace UnityEditor {
  class AudioMixersTreeView extends System.Object {
    constructor(mixerWindow: UnityEditor.AudioMixerWindow, treeState: UnityEditor.IMGUI.Controls.TreeViewState, getAllControllersCallback: (() => UnityEditor.Audio.AudioMixerController[]));
    DeleteAudioMixerCallback(obj: any): void;
    EndRenaming(): void;
    GetTotalHeight(): number;
    OnGUI(rect: any): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    OnTreeSelectionChanged(selection: number[]): void;
    OnTreeViewContextClick(index: number): void;
    OnUndoRedoPerformed(): void;
    ReloadTree(): void;
  }
}
declare namespace UnityEditor.AudioMixersTreeView {
  class Styles extends System.Object {
    constructor();
    addText: any;
    audioMixerIcon: any;
    header: any;
    optionsButton: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerUtility extends System.Object {
    constructor();
    static RepaintAudioMixerAndInspectors(): void;
    static VisitGroupsRecursivly(group: UnityEditor.Audio.AudioMixerGroupController, visitorCallback: ((obj: UnityEditor.Audio.AudioMixerGroupController) => void)): void;
  }
}
declare namespace UnityEditor.AudioMixerUtility {
  class VisitorFetchInstanceIDs extends System.Object {
    constructor();
    Visitor(group: UnityEditor.Audio.AudioMixerGroupController): void;
    instanceIDs: number[];
  }
}
declare namespace UnityEditor {
  class AudioMixerWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Awake(): void;
    static CreateAudioMixerWindow(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    ParamDef(name: string, desc: string, units: string, displayScale: number, minRange: number, maxRange: number, defaultValue: number): UnityEditor.Audio.MixerParameterDefinition;
    static RepaintAudioMixerWindow(): void;
    UndoRedoPerformed(): void;
    Update(): void;
    readonly controller: UnityEditor.Audio.AudioMixerController;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class SectionType extends System.Enum {
    protected constructor();
    static GroupTree: UnityEditor.AudioMixerWindow.SectionType;
    static MixerTree: UnityEditor.AudioMixerWindow.SectionType;
    static SnapshotList: UnityEditor.AudioMixerWindow.SectionType;
    value__: number;
    static ViewList: UnityEditor.AudioMixerWindow.SectionType;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class LayoutMode extends System.Enum {
    protected constructor();
    static Horizontal: UnityEditor.AudioMixerWindow.LayoutMode;
    value__: number;
    static Vertical: UnityEditor.AudioMixerWindow.LayoutMode;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class Layout extends System.Object {
    constructor();
    m_HorizontalSplitter: UnityEditor.SplitterState;
    m_VerticalSplitter: UnityEditor.SplitterState;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class GUIContents extends System.Object {
    constructor();
    editSnapShots: any;
    infoText: any;
    mixerHeader: any;
    output: any;
    rms: any;
    selectAudioMixer: any;
    toolbarLabel: any;
    toolbarObjectField: any;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class AudioMixerPostprocessor extends UnityEditor.AssetPostprocessor {
    constructor();
  }
}
declare namespace UnityEditor {
  class AssetSelectionPopupMenu extends System.Object {
    constructor();
    static Show(buttonRect: any, classNames: string[], initialSelectedInstanceID: number): void;
  }
}
declare namespace UnityEditorInternal {
  class ReorderableListWithRenameAndScrollView extends System.Object {
    constructor(list: UnityEditorInternal.ReorderableList, state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    BeginRename(index: number, delay: number): void;
    DoRenameOverlay(): void;
    DrawElement(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    DrawElementText(r: any, index: number, isActive: boolean, isSelected: boolean, isFocused: boolean): void;
    EndRename(acceptChanges: boolean): void;
    FrameItem(index: number): void;
    IsRenamingIndex(index: number): boolean;
    MouseUpCallback(list: UnityEditorInternal.ReorderableList): void;
    OnEvent(): void;
    OnGUI(rect: any): void;
    ReorderCallback(list: UnityEditorInternal.ReorderableList): void;
    SelectCallback(list: UnityEditorInternal.ReorderableList): void;
    readonly elementStyle: any;
    readonly elementStyleRightAligned: any;
    readonly list: UnityEditorInternal.ReorderableList;
    listElementStyle: any;
    onCustomDrawElement: ((rect: any, index: number, isActive: boolean, isFocused: boolean) => void);
    onDeleteItemAtIndex: ((obj: number) => void);
    onGetNameAtIndex: ((arg: number) => string);
    onNameChangedAtIndex: ((arg1: number, arg2: string) => void);
    onSelectionChanged: ((obj: number) => void);
    renameOverlayStyle: any;
  }
}
declare namespace UnityEditorInternal.ReorderableListWithRenameAndScrollView {
  class State extends System.Object {
    constructor();
    m_RenameOverlay: UnityEditor.RenameOverlay;
    m_ScrollPos: any;
  }
}
declare namespace UnityEditorInternal.ReorderableListWithRenameAndScrollView {
  class Styles extends System.Object {
    constructor();
    reorderableListLabel: any;
    reorderableListLabelRightAligned: any;
  }
}
declare namespace UnityEditor {
  class TreeViewForAudioMixerGroup extends System.Object {
    protected constructor();
    static CreateAndSetTreeView(data: UnityEditor.ObjectTreeForSelector.TreeSelectorData): void;
  }
}
declare namespace UnityEditor.TreeViewForAudioMixerGroup {
  class GroupTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    CalculateRowRects(): void;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
  }
}
declare namespace UnityEditor.TreeViewForAudioMixerGroup {
  class MixerTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, groupController: UnityEditor.Audio.AudioMixerGroupController);
    group: UnityEditor.Audio.AudioMixerGroupController;
  }
}
declare namespace UnityEditor.TreeViewForAudioMixerGroup {
  class TreeViewDataSourceForMixers extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, ignoreController: UnityEditor.Audio.AudioMixerController);
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    readonly ignoreThisController: UnityEditor.Audio.AudioMixerController;
  }
}
declare namespace UnityEditorInternal {
  class AssemblyStripper extends System.Object {
    constructor();
    static InvokeFromBuildPlayer(buildTarget: UnityEditor.BuildTarget, usedClasses: UnityEditor.RuntimeClassRegistry): void;
  }
}
declare namespace UnityEditor {
  class AssemblyTypeInfoGenerator extends System.Object {
    constructor(assembly: string, searchDirs: string[]);
    constructor(assembly: string, resolver: any);
    GatherClassInfo(): UnityEditor.AssemblyTypeInfoGenerator.ClassInfo[];
    readonly ClassInfoArray: UnityEditor.AssemblyTypeInfoGenerator.ClassInfo[];
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class FieldInfoFlags extends System.Enum {
    protected constructor();
    static FixedBuffer: UnityEditor.AssemblyTypeInfoGenerator.FieldInfoFlags;
    static None: UnityEditor.AssemblyTypeInfoGenerator.FieldInfoFlags;
    value__: number;
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class FieldInfo extends System.ValueType {
    protected constructor();
    fixedBufferLength: number;
    fixedBufferTypename: string;
    flags: UnityEditor.AssemblyTypeInfoGenerator.FieldInfoFlags;
    name: string;
    type: string;
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class ClassInfo extends System.ValueType {
    protected constructor();
    fields: UnityEditor.AssemblyTypeInfoGenerator.FieldInfo[];
    name: string;
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class AssemblyResolver extends Mono.Cecil.BaseAssemblyResolver {
    protected constructor();
    Resolve(name: any): any;
    Resolve(name: any, parameters: any): any;
    static WithSearchDirs(searchDirs: string[]): any;
  }
}
declare namespace Mono.Cecil {
  class BaseAssemblyResolver extends System.Object {
    protected constructor();
    AddSearchDirectory(directory: string): void;
    Dispose(): void;
    GetSearchDirectories(): string[];
    RemoveSearchDirectory(directory: string): void;
    Resolve(name: any): any;
    Resolve(name: any, parameters: any): any;
  }
}
  class AssemblyValidationRule extends System.Attribute {
    constructor(platform: any);
    readonly Platform: any;
    Priority: number;
  }
  class ValidationResult extends System.ValueType {
    protected constructor();
    CompilerMessages: any;
    Rule: IValidationRule;
    Success: boolean;
  }
  class IValidationRule {
    protected constructor();
    Validate(userAssemblies: any, options: any[]): ValidationResult;
  }
  class AssemblyValidation extends System.Object {
    constructor();
    static Validate(platform: any, userAssemblies: any, options: any[]): ValidationResult;
  }
declare namespace UnityEditor.Build {
  class BuildFailedException extends System.Exception {
    constructor(message: string);
    constructor(innerException: System.Exception);
  }
}
declare namespace UnityEditor.Build {
  class IOrderedCallback {
    protected constructor();
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.Build {
  class IPreprocessBuild {
    protected constructor();
    OnPreprocessBuild(target: UnityEditor.BuildTarget, path: string): void;
  }
}
declare namespace UnityEditor.Build {
  class IPostprocessBuild {
    protected constructor();
    OnPostprocessBuild(target: UnityEditor.BuildTarget, path: string): void;
  }
}
declare namespace UnityEditor.Build {
  class IProcessScene {
    protected constructor();
    OnProcessScene(scene: any): void;
  }
}
declare namespace UnityEditor.Build {
  class IActiveBuildTargetChanged {
    protected constructor();
    OnActiveBuildTargetChanged(previousTarget: UnityEditor.BuildTarget, newTarget: UnityEditor.BuildTarget): void;
  }
}
declare namespace UnityEditor.Build {
  class BuildPipelineInterfaces extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Build.BuildPipelineInterfaces {
  class BuildCallbacks extends System.Enum {
    protected constructor();
    static BuildProcessors: UnityEditor.Build.BuildPipelineInterfaces.BuildCallbacks;
    static BuildTargetProcessors: UnityEditor.Build.BuildPipelineInterfaces.BuildCallbacks;
    static None: UnityEditor.Build.BuildPipelineInterfaces.BuildCallbacks;
    static SceneProcessors: UnityEditor.Build.BuildPipelineInterfaces.BuildCallbacks;
    value__: number;
  }
}
declare namespace UnityEditor.Build.BuildPipelineInterfaces {
  class AttributeCallbackWrapper extends System.Object {
    constructor(m: any);
    OnActiveBuildTargetChanged(previousTarget: UnityEditor.BuildTarget, newTarget: UnityEditor.BuildTarget): void;
    OnPostprocessBuild(target: UnityEditor.BuildTarget, path: string): void;
    OnProcessScene(scene: any): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.Build {
  class BuildPlatform extends System.Object {
    constructor(locTitle: string, iconId: string, targetGroup: UnityEditor.BuildTargetGroup, forceShowTarget: boolean);
    constructor(locTitle: string, tooltip: string, iconId: string, targetGroup: UnityEditor.BuildTargetGroup, forceShowTarget: boolean);
    readonly defaultTarget: UnityEditor.BuildTarget;
    forceShowTarget: boolean;
    name: string;
    smallIcon: any;
    targetGroup: UnityEditor.BuildTargetGroup;
    title: any;
    tooltip: string;
  }
}
declare namespace UnityEditor.Build {
  class BuildPlatforms extends System.Object {
    protected constructor();
    BuildPlatformFromTargetGroup(group: UnityEditor.BuildTargetGroup): UnityEditor.Build.BuildPlatform;
    BuildPlatformIndexFromTargetGroup(group: UnityEditor.BuildTargetGroup): number;
    GetBuildTargetDisplayName(target: UnityEditor.BuildTarget): string;
    GetModuleDisplayName(buildTargetGroup: UnityEditor.BuildTargetGroup, buildTarget: UnityEditor.BuildTarget): string;
    GetValidPlatforms(): UnityEditor.Build.BuildPlatform[];
    GetValidPlatforms(includeMetaPlatforms: boolean): UnityEditor.Build.BuildPlatform[];
    static readonly instance: UnityEditor.Build.BuildPlatforms;
    buildPlatforms: UnityEditor.Build.BuildPlatform[];
  }
}
declare namespace UnityEditorInternal {
  class NativeProgram extends UnityEditor.Utils.Program {
    constructor(executable: string, arguments_: string);
  }
}
declare namespace UnityEditor.Utils {
  class Program extends System.Object {
    constructor(si: any);
    Dispose(): void;
    GetAllOutput(): string;
    GetErrorOutput(): string[];
    GetErrorOutputAsString(): string;
    GetProcessStartInfo(): any;
    GetStandardInput(): any;
    GetStandardOutput(): string[];
    GetStandardOutputAsString(): string;
    Kill(): void;
    LogProcessStartInfo(): void;
    Start(): void;
    Start(exitCallback: ((sender: any, e: System.EventArgs) => void)): void;
    WaitForExit(milliseconds: number): boolean;
    WaitForExit(): void;
    readonly ExitCode: number;
    readonly HasExited: boolean;
    readonly Id: number;
    _process: any;
  }
}
declare namespace UnityEditorInternal {
  class Runner extends System.Object {
    constructor();
    static RunNativeProgram(exe: string, args: string): void;
  }
}
declare namespace UnityEditor {
  class BuildVerifier extends System.Object {
    protected constructor();
    static VerifyBuild(target: UnityEditor.BuildTarget, managedDllFolder: string): void;
  }
}
declare namespace UnityEditor.BuildReporting {
  class StrippingInfo extends UnityEngine.ScriptableObject {
    constructor();
    AddModule(module: string): void;
    AddModuleSize(module: string, size: number): void;
    static GetBuildReportData(report: UnityEditor.BuildReporting.BuildReport): UnityEditor.BuildReporting.StrippingInfo;
    static ModuleName(module: string): string;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    RegisterDependency(obj: string, depends: string): void;
    SetIcon(dependency: string, icon: string): void;
    dependencies: any;
    icons: any;
    modules: string[];
    static RequiredByScripts: string;
    serializedDependencies: UnityEditor.BuildReporting.StrippingInfo.SerializedDependency[];
    serializedSizes: number[];
    sizes: any;
    totalSize: number;
  }
}
declare namespace UnityEditor.BuildReporting.StrippingInfo {
  class SerializedDependency extends System.ValueType {
    protected constructor();
    icon: string;
    key: string;
    value: string[];
  }
}
declare namespace UnityEditor {
  class CodeStrippingUtils extends System.Object {
    constructor();
    static GenerateDependencies(strippedAssemblyDir: string, icallsListFile: string, rcr: UnityEditor.RuntimeClassRegistry, doStripping: boolean, nativeClasses: any, nativeModules: any, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider): void;
    static GetDependentModules(moduleXml: string): string[];
    static GetModulesFromICalls(icallsListFile: string): any;
    static GetModuleWhitelist(module: string, moduleStrippingInformationFolder: string): string;
    static GetNativeModulesToRegister(nativeClasses: any, strippingInfo: UnityEditor.BuildReporting.StrippingInfo): any;
    static InjectCustomDependencies(target: UnityEditor.BuildTarget, strippingInfo: UnityEditor.BuildReporting.StrippingInfo, nativeClasses: any, nativeModules: any): void;
    static WriteModuleAndClassRegistrationFile(strippedAssemblyDir: string, icallsListFile: string, outputDir: string, rcr: UnityEditor.RuntimeClassRegistry, classesToSkip: any, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider): void;
    static readonly BlackListNativeClasses: UnityEditor.UnityType[];
    static readonly BlackListNativeClassesDependency: any;
    static readonly UserAssemblies: string[];
  }
}
  class DesktopStandaloneBuildWindowExtension extends UnityEditor.Modules.DefaultBuildWindowExtension {
    constructor();
    EnabledBuildAndRunButton(): boolean;
    EnabledBuildButton(): boolean;
    ShowPlatformBuildOptions(): void;
  }
declare namespace UnityEditor.Modules {
  class DefaultBuildWindowExtension extends System.Object {
    constructor();
    EnabledBuildAndRunButton(): boolean;
    EnabledBuildButton(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShouldDrawExplicitDivideByZeroCheckbox(): boolean;
    ShouldDrawExplicitNullCheckbox(): boolean;
    ShouldDrawForceOptimizeScriptsCheckbox(): boolean;
    ShouldDrawProfilerCheckbox(): boolean;
    ShouldDrawScriptDebuggingCheckbox(): boolean;
    ShowInternalPlatformBuildOptions(): void;
    ShowPlatformBuildOptions(): void;
  }
}
  class DesktopStandalonePostProcessor extends System.Object {
    protected constructor();
    PostProcess(): void;
    UpdateBootConfig(target: UnityEditor.BuildTarget, config: any, options: UnityEditor.BuildOptions): void;
  }
declare namespace DesktopStandalonePostProcessor {
  class ScriptingImplementations extends System.Object {
    constructor();
    Enabled(): UnityEditor.ScriptingImplementation[];
    Supported(): UnityEditor.ScriptingImplementation[];
  }
}
  class DesktopStandaloneUserBuildSettings extends System.Object {
    protected constructor();
  }
  class GendarmeOptions extends System.ValueType {
    protected constructor();
    ConfigFilePath: string;
    RuleSet: string;
    UserAssemblies: string[];
  }
  class GendarmeValidationRule extends System.Object {
    protected constructor();
    Validate(userAssemblies: any, options: any[]): ValidationResult;
  }
declare namespace UnityEditor {
  class MonoProcessRunner extends System.Object {
    constructor();
    Run(process: any): boolean;
    Error: any;
    Output: any;
  }
}
declare namespace UnityEditor {
  class MonoProcessUtility extends System.Object {
    constructor();
    static PrepareMonoProcess(workDir: string): any;
    static PrepareMonoProcessBleedingEdge(workDir: string): any;
    static ProcessToString(process: any): string;
    static RunMonoProcess(process: any, name: string, resultingFile: string): void;
  }
}
declare namespace UnityEditor {
  class MonoAssemblyStripping extends System.Object {
    constructor();
    static CollectAllAssemblies(librariesFolder: string, usedClasses: UnityEditor.RuntimeClassRegistry): any;
    static GenerateLinkXmlToPreserveDerivedTypes(stagingArea: string, librariesFolder: string, usedClasses: UnityEditor.RuntimeClassRegistry): string;
    static MonoCilStrip(buildTarget: UnityEditor.BuildTarget, managedLibrariesDirectory: string, fileNames: string[]): void;
    static ResolveAssemblyReference(resolver: any, assemblyName: any): any;
    static ResolveAssemblyReferences(assembly: any): any;
    static ResolveAssemblyReferences(resolver: any, assemblyReferences: any): any;
  }
}
declare namespace UnityEditor.MonoAssemblyStripping {
  class AssemblyDefinitionComparer extends System.Object {
    constructor();
    Equals(x: any, y: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetHashCode(obj: any): number;
  }
}
declare namespace UnityEditor {
  class CrossCompileOptions extends System.Enum {
    protected constructor();
    static Debugging: UnityEditor.CrossCompileOptions;
    static Dynamic: UnityEditor.CrossCompileOptions;
    static ExplicitNullChecks: UnityEditor.CrossCompileOptions;
    static FastICall: UnityEditor.CrossCompileOptions;
    static LoadSymbols: UnityEditor.CrossCompileOptions;
    static Static: UnityEditor.CrossCompileOptions;
    value__: number;
  }
}
declare namespace UnityEditor {
  class MonoCrossCompile extends System.Object {
    constructor();
    static CrossCompileAOTDirectory(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, additionalOptions: string): void;
    static CrossCompileAOTDirectory(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, pathExtension: string, additionalOptions: string): void;
    static CrossCompileAOTDirectoryParallel(crossCompilerPath: string, buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, additionalOptions: string): boolean;
    static CrossCompileAOTDirectoryParallel(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, additionalOptions: string): boolean;
    static CrossCompileAOTDirectoryParallel(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, pathExtension: string, additionalOptions: string): boolean;
    static DisplayAOTProgressBar(totalFiles: number, filesFinished: number): void;
    static ArtifactsPath: string;
  }
}
declare namespace UnityEditor.MonoCrossCompile {
  class JobCompileAOT extends System.Object {
    constructor(target: UnityEditor.BuildTarget, crossCompilerAbsolutePath: string, assembliesAbsoluteDirectory: string, crossCompileOptions: UnityEditor.CrossCompileOptions, input: string, output: string, additionalOptions: string);
    ThreadPoolCallback(threadContext: any): void;
    m_additionalOptions: string;
    m_doneEvent: any;
    m_Exception: System.Exception;
    m_input: string;
    m_output: string;
  }
}
declare namespace UnityEditor {
  class MonoAOTRegistration extends System.Object {
    constructor();
    static BuildReferencedTypeList(assemblies: any[]): any;
    static GenerateRegisterClasses(allClasses: any, output: any): void;
    static GenerateRegisterClassesForStripping(nativeClassesAndBaseClasses: any, output: any): void;
    static GenerateRegisterInternalCalls(assemblies: any[], output: any): void;
    static GenerateRegisterModules(nativeClasses: any, nativeModules: any, output: any, strippingEnabled: boolean): void;
    static WriteCPlusPlusFileForStaticAOTModuleRegistration(buildTarget: UnityEditor.BuildTarget, file: string, crossCompileOptions: UnityEditor.CrossCompileOptions, advancedLic: boolean, targetDevice: string, stripping: boolean, usedClassRegistry: UnityEditor.RuntimeClassRegistry, checker: UnityEditor.AssemblyReferenceChecker, stagingAreaDataManaged: string): void;
    static WriteCPlusPlusFileForStaticAOTModuleRegistration(buildTarget: UnityEditor.BuildTarget, file: string, crossCompileOptions: UnityEditor.CrossCompileOptions, advancedLic: boolean, targetDevice: string, stripping: boolean, usedClassRegistry: UnityEditor.RuntimeClassRegistry, checker: UnityEditor.AssemblyReferenceChecker, stagingAreaDataManaged: string, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider): void;
  }
}
declare namespace UnityEditor {
  class PostprocessBuildPlayer extends System.Object {
    constructor();
    static GetExtensionForBuildTarget(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static Launch(targetGroup: UnityEditor.BuildTargetGroup, buildTarget: UnityEditor.BuildTarget, path: string, productName: string, options: UnityEditor.BuildOptions, buildReport: UnityEditor.BuildReporting.BuildReport): void;
    static Postprocess(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget, installPath: string, companyName: string, productName: string, width: number, height: number, options: UnityEditor.BuildOptions, usedClassRegistry: UnityEditor.RuntimeClassRegistry, report: UnityEditor.BuildReporting.BuildReport): void;
    static PrepareForBuild(options: UnityEditor.BuildOptions, targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget): string;
    static SupportsInstallInBuildFolder(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget): boolean;
    static SupportsLz4Compression(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget): boolean;
    static SupportsScriptsOnlyBuild(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget): boolean;
    static UpdateBootConfig(targetGroup: UnityEditor.BuildTargetGroup, target: UnityEditor.BuildTarget, config: any, options: UnityEditor.BuildOptions): void;
    static readonly subDir32Bit: string;
    static readonly subDir64Bit: string;
  }
}
declare namespace UnityEditor.PostprocessBuildPlayer {
  class NoTargetsFoundException extends System.Exception {
    constructor();
    constructor(message: string);
  }
}
  class PostProcessStandalonePlayer extends System.Object {
    constructor();
  }
declare namespace UnityEditor {
  class RuntimeClassRegistry extends System.Object {
    constructor();
    AddNativeClassID(ID: number): void;
    static Create(): UnityEditor.RuntimeClassRegistry;
    GetAllManagedBaseClassesAsString(): string[];
    GetAllNativeClassesIncludingManagersAsString(): string[];
    GetScenesForClass(ID: number): string[];
    Initialize(nativeClassIDs: number[], buildTarget: UnityEditor.BuildTarget): void;
    IsDLLUsed(dll: string): boolean;
    SetSceneClasses(nativeClassIDs: number[], scene: string): void;
    SetUsedTypesInUserAssembly(typeNames: string[], assemblyName: string): void;
    readonly UsedTypePerUserAssembly: any;
  }
}
declare namespace UnityEditor.RuntimeClassRegistry {
  class MethodDescription extends System.Object {
    constructor();
    assembly: string;
    fullTypeName: string;
    methodName: string;
  }
}
declare namespace UnityEditorInternal {
  class FileMirroring extends System.Object {
    protected constructor();
    static CanSkipCopy(from: string, to: string): boolean;
    static MirrorFile(from: string, to: string): void;
    static MirrorFile(from: string, to: string, comparer: ((arg1: string, arg2: string) => boolean)): void;
    static MirrorFolder(from: string, to: string): void;
    static MirrorFolder(from: string, to: string, comparer: ((arg1: string, arg2: string) => boolean)): void;
  }
}
declare namespace UnityEditorInternal.FileMirroring {
  class FileEntryType extends System.Enum {
    protected constructor();
    static Directory: UnityEditorInternal.FileMirroring.FileEntryType;
    static File: UnityEditorInternal.FileMirroring.FileEntryType;
    static NotExisting: UnityEditorInternal.FileMirroring.FileEntryType;
    value__: number;
  }
}
  class ICompilerSettings {
    protected constructor();
    readonly CompilerPath: string;
    readonly LibPaths: string[];
    readonly LinkerPath: string;
    readonly MachineSpecification: string;
  }
declare namespace UnityEditorInternal {
  class Il2CppNativeCodeBuilder extends System.Object {
    protected constructor();
    ConvertIncludesToFullPaths(relativeIncludePaths: any): any;
    ConvertOutputFileToFullPath(outputFileRelativePath: string): string;
    SetupStartInfo(startInfo: any): void;
    readonly AdditionalIl2CPPArguments: any;
    readonly CacheDirectory: string;
    readonly CompilerArchitecture: string;
    readonly CompilerFlags: string;
    readonly CompilerPlatform: string;
    readonly LinkerFlags: string;
    readonly LinkLibIl2CppStatically: boolean;
    readonly PluginPath: string;
    readonly SetsUpEnvironment: boolean;
  }
}
declare namespace UnityEditorInternal {
  class Il2CppNativeCodeBuilderUtils extends System.Object {
    protected constructor();
    static AddBuilderArguments(builder: UnityEditorInternal.Il2CppNativeCodeBuilder, outputRelativePath: string, includeRelativePaths: any, debugBuild: boolean): any;
    static ClearAndPrepareCacheDirectory(builder: UnityEditorInternal.Il2CppNativeCodeBuilder): void;
    static ClearCacheIfEditorVersionDiffers(builder: UnityEditorInternal.Il2CppNativeCodeBuilder, currentEditorVersion: string): void;
    static ObjectFilePathInCacheDirectoryFor(builderCacheDirectory: string): string;
    static PrepareCacheDirectory(builder: UnityEditorInternal.Il2CppNativeCodeBuilder, currentEditorVersion: string): void;
  }
}
declare namespace UnityEditorInternal {
  class IL2CPPUtils extends System.Object {
    constructor();
    static BinaryMetadataSuffix: string;
  }
}
declare namespace UnityEditorInternal {
  class IL2CPPBuilder extends System.Object {
    constructor(tempFolder: string, stagingAreaData: string, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider, modifyOutputBeforeCompile: ((obj: string) => void), runtimeClassRegistry: UnityEditor.RuntimeClassRegistry, debugBuild: boolean);
    GetCppOutputDirectoryInStagingArea(): string;
    static GetCppOutputPath(tempFolder: string): string;
    static GetMapFileParserPath(): string;
    Run(): void;
    RunCompileAndLink(): void;
  }
}
declare namespace UnityEditorInternal {
  class IIl2CppPlatformProvider {
    protected constructor();
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    CreateIl2CppOutputParser(): UnityEditor.Scripting.Compilers.CompilerOutputParserBase;
    CreateNativeCompiler(): INativeCompiler;
    readonly buildReport: UnityEditor.BuildReporting.BuildReport;
    readonly developmentMode: boolean;
    readonly emitNullChecks: boolean;
    readonly enableArrayBoundsCheck: boolean;
    readonly enableDivideByZeroCheck: boolean;
    readonly enableStackTraces: boolean;
    readonly il2CppFolder: string;
    readonly includePaths: string[];
    readonly libraryPaths: string[];
    readonly moduleStrippingInformationFolder: string;
    readonly nativeLibraryFileName: string;
    readonly supportsEngineStripping: boolean;
    readonly target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditorInternal {
  class BaseIl2CppPlatformProvider extends System.Object {
    constructor(target: UnityEditor.BuildTarget, libraryFolder: string);
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    CreateIl2CppOutputParser(): UnityEditor.Scripting.Compilers.CompilerOutputParserBase;
    CreateNativeCompiler(): INativeCompiler;
    readonly buildReport: UnityEditor.BuildReporting.BuildReport;
    readonly developmentMode: boolean;
    readonly emitNullChecks: boolean;
    readonly enableArrayBoundsCheck: boolean;
    readonly enableDivideByZeroCheck: boolean;
    readonly enableStackTraces: boolean;
    readonly il2CppFolder: string;
    readonly includePaths: string[];
    readonly libraryFolder: string;
    readonly libraryPaths: string[];
    readonly moduleStrippingInformationFolder: string;
    readonly nativeLibraryFileName: string;
    readonly staticLibraryExtension: string;
    readonly supportsEngineStripping: boolean;
    readonly target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditorInternal {
  class LinkXmlReader extends System.Object {
    constructor();
    IsDLLUsed(assemblyFileName: string): boolean;
  }
}
  class INativeCompiler {
    protected constructor();
    CompileDynamicLibrary(outFile: string, sources: any, includePaths: any, libraries: any, libraryPaths: any): void;
  }
  class NativeCompiler extends System.Object {
    protected constructor();
    CompileDynamicLibrary(outFile: string, sources: any, includePaths: any, libraries: any, libraryPaths: any): void;
  }
declare namespace NativeCompiler {
  class Counter extends System.Object {
    constructor();
    index: number;
  }
}
  class WinRTUtils extends System.Object {
    constructor();
    static GetProcessorArchitecture(target: UnityEditor.BuildTarget): string;
  }
declare namespace UnityEditor.CloudBuild {
  class CloudBuild extends System.Object {
    constructor();
    GetScmCandidates(): any;
  }
}
declare namespace UnityEditor.Collaboration {
  class AssetAccess extends System.Object {
    protected constructor();
    static TryGetAssetFromGUID(assetGUID: string, asset: any): boolean;
    static TryGetAssetGUIDFromObject(objectWithGUID: UnityEngine.Object, assetGUID: any): boolean;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabOperation extends System.Enum {
    protected constructor();
    static ChooseMine: UnityEditor.Collaboration.CollabOperation;
    static ChooseTheirs: UnityEditor.Collaboration.CollabOperation;
    static ConflictDiff: UnityEditor.Collaboration.CollabOperation;
    static Diff: UnityEditor.Collaboration.CollabOperation;
    static Exclude: UnityEditor.Collaboration.CollabOperation;
    static ExternalMerge: UnityEditor.Collaboration.CollabOperation;
    static GoBack: UnityEditor.Collaboration.CollabOperation;
    static Include: UnityEditor.Collaboration.CollabOperation;
    static Noop: UnityEditor.Collaboration.CollabOperation;
    static Publish: UnityEditor.Collaboration.CollabOperation;
    static Restore: UnityEditor.Collaboration.CollabOperation;
    static Revert: UnityEditor.Collaboration.CollabOperation;
    static Update: UnityEditor.Collaboration.CollabOperation;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class Change extends System.Object {
    protected constructor();
    readonly isConflict: boolean;
    readonly isFolderMeta: boolean;
    readonly isMeta: boolean;
    readonly isResolved: boolean;
    readonly isRevertable: boolean;
    readonly localStatus: string;
    readonly path: string;
    readonly relatedTo: string;
    readonly remoteStatus: string;
    readonly resolveStatus: string;
    readonly revertableState: number;
    readonly state: number;
  }
}
declare namespace UnityEditor.Collaboration.Change {
  class RevertableStates extends System.Enum {
    protected constructor();
    static InvalidRevertableState: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_File: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_FileAdded: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_Folder: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_FolderAdded: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_FolderContainsAdd: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable_EmptyFolder: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable_File: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable_Folder: UnityEditor.Collaboration.Change.RevertableStates;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class PublishInfo extends System.Object {
    constructor();
    changes: UnityEditor.Collaboration.Change[];
    filter: boolean;
  }
}
declare namespace UnityEditor.Collaboration {
  class PublishDialogOptions extends System.ValueType {
    protected constructor();
    Comments: string;
    DoPublish: boolean;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabPublishDialog extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
    static ShowCollabWindow(changelist: string): UnityEditor.Collaboration.CollabPublishDialog;
    Changelist: string;
    Options: UnityEditor.Collaboration.PublishDialogOptions;
    scrollView: any;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabCannotPublishDialog extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
    static ShowCollabWindow(infoMessage: string): UnityEditor.Collaboration.CollabCannotPublishDialog;
    InfoMessage: string;
    scrollPosition: any;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabProjectHook extends System.Object {
    constructor();
    static GetAssetState(assetGuid: string): UnityEditor.Collaboration.Collab.CollabStates;
    static OnProjectBrowserNavPanelIconOverlay(iconRect: any, guid: string): void;
    static OnProjectWindowIconOverlay(iconRect: any, guid: string, isListMode: boolean): void;
  }
}
declare namespace UnityEditor.Collaboration {
  class Overlay extends System.Object {
    constructor();
    static DrawOverlays(assetState: UnityEditor.Collaboration.Collab.CollabStates, itemRect: any, isListMode: boolean): void;
    static GetRectForBottomRight(projectBrowserDrawRect: any, scale: number): any;
    static GetRectForTopRight(projectBrowserDrawRect: any, scale: number): any;
    static GetScale(rect: any, isListMode: boolean): number;
    static ScaleRect(rect: any, scale: number): any;
    static k_OverlaySizeOnLargeIcon: number;
    static k_OverlaySizeOnSmallIcon: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class TextureUtility extends System.Object {
    protected constructor();
    static LoadTextureFromApplicationContents(path: string): any;
  }
}
declare namespace UnityEditor.Collaboration {
  class AbstractFilters extends System.Object {
    protected constructor();
    ContainsSearchFilter(name: string, searchString: string): boolean;
    HideFromFavoriteSearchFilters(): void;
    InitializeFilters(): void;
    ShowInFavoriteSearchFilters(): void;
    filters: string[][];
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabFilters extends UnityEditor.Collaboration.AbstractFilters {
    constructor();
    InitializeFilters(): void;
    OnCollabStateChanged(info: UnityEditor.Collaboration.CollabInfo): void;
    ShowInProjectBrowser(filterString: string): void;
  }
}
declare namespace UnityEditor {
  class CollabHistoryWindow extends UnityEditor.Web.WebViewEditorWindowTabs {
    protected constructor();
    OnCollabStateChanged(info: UnityEditor.Collaboration.CollabInfo): void;
    OnDestroy(): void;
    OnDestroy(): void;
    OnEnable(): void;
    OnInitScripting(): void;
    OnInitScripting(): void;
    OnReceiveTitle(title: string): void;
    static ShowHistoryWindow(): UnityEditor.CollabHistoryWindow;
    ToggleMaximize(): void;
    ToggleMaximize(): void;
    static ValidateShowHistoryWindow(): boolean;
  }
}
declare namespace UnityEditor.Web {
  class WebViewEditorWindowTabs extends UnityEditor.Web.WebViewEditorWindow {
    protected constructor();
    GetWebViewFromURL(url: string): UnityEditor.WebView;
    Init(): void;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    OnDestroy(): void;
    OnInitScripting(): void;
  }
}
declare namespace UnityEditor.Web {
  class WebViewEditorWindow extends UnityEditor.EditorWindow {
    protected constructor();
    About(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Init(): void;
    OnBatchMode(): void;
    OnBecameInvisible(): void;
    OnDestroy(): void;
    OnEnable(): void;
    OnFocus(): void;
    OnGUI(): void;
    OnInitScripting(): void;
    OnLoadError(url: string): void;
    OnLocationChanged(url: string): void;
    OnLostFocus(): void;
    Refresh(): void;
    Reload(): void;
    ToggleMaximize(): void;
    initialOpenUrl: string;
  }
}
declare namespace UnityEditor.Collaboration {
  class ProgressInfo extends System.Object {
    protected constructor();
    readonly canCancel: boolean;
    readonly cancelled: boolean;
    readonly completed: boolean;
    readonly currentCount: number;
    readonly errorOccured: boolean;
    readonly extraInfo: string;
    readonly isProgressTypeCount: boolean;
    readonly isProgressTypePercent: boolean;
    readonly jobId: number;
    readonly lastError: number;
    readonly lastErrorString: string;
    readonly percentComplete: number;
    readonly title: string;
    readonly totalCount: number;
  }
}
declare namespace UnityEditor.Collaboration.ProgressInfo {
  class ProgressType extends System.Enum {
    protected constructor();
    static Both: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    static Count: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    static None: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    static Percent: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    value__: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class Revision extends System.Object {
    protected constructor();
    readonly author: string;
    readonly authorName: string;
    readonly comment: string;
    readonly reference: string;
    readonly revisionID: string;
    readonly timeStamp: number;
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabTesting extends System.Object {
    constructor();
    static End(): void;
    static Execute(): void;
    static OnChannelMessageHandled(): void;
    static OnCompleteJob(): void;
    static readonly IsRunning: boolean;
  }
}
declare namespace UnityEditor.Collaboration.CollabTesting {
  class AsyncState extends System.Enum {
    protected constructor();
    static NotWaiting: UnityEditor.Collaboration.CollabTesting.AsyncState;
    value__: number;
    static WaitForChannelMessageHandled: UnityEditor.Collaboration.CollabTesting.AsyncState;
    static WaitForJobComplete: UnityEditor.Collaboration.CollabTesting.AsyncState;
  }
}
declare namespace UnityEditor {
  class WebViewStatic {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    static GetWebView(): UnityEditor.WebView;
    SetDirty(): void;
    static SetWebView(webView: UnityEditor.WebView): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class CollabToolbarWindow extends UnityEditor.Web.WebViewEditorStaticWindow {
    constructor();
    static CloseToolbarWindows(): void;
    static CloseToolbarWindowsImmediately(): void;
    OnDestroy(): void;
    OnDestroy(): void;
    OnEnable(): void;
    OnInitScripting(): void;
    OnInitScripting(): void;
    OnReceiveTitle(title: string): void;
    static ShowToolbarWindow(): UnityEditor.CollabToolbarWindow;
    static ValidateShowToolbarWindow(): boolean;
    static s_ToolbarIsVisible: boolean;
  }
}
declare namespace UnityEditor.Web {
  class WebViewEditorStaticWindow extends UnityEditor.Web.WebViewEditorWindow {
    protected constructor();
    OnDestroy(): void;
    OnInitScripting(): void;
  }
}
declare namespace UnityEditor.Collaboration {
  class SoftLock extends System.Object {
    protected constructor();
    readonly displayName: string;
    readonly hash: string;
    readonly machineID: string;
    readonly timeStamp: number;
    readonly userID: string;
  }
}
declare namespace UnityEditor.Collaboration {
  class SoftLockData extends System.Object {
    protected constructor();
    static AllowsSoftLocks(unityObject: UnityEngine.Object): boolean;
    static IsPrefab(assetGUID: string): boolean;
    static IsPrefab(unityObject: UnityEngine.Object): boolean;
    static SetSoftlockChanges(assetGUIDs: string[]): void;
    static TryGetLocksOnAssetGUID(assetGuid: string, softLocks: any): boolean;
    static TryGetSoftlockCount(assetGuid: string, count: any): boolean;
    static TryGetSoftlockCount(objectWithGUID: UnityEngine.Object, count: any): boolean;
    static TryGetSoftlockCount(scene: any, count: any): boolean;
    static TryHasSoftLocks(assetGuid: string, hasSoftLocks: any): boolean;
    static TryHasSoftLocks(objectWithGUID: UnityEngine.Object, hasSoftLocks: any): boolean;
  }
}
declare namespace UnityEditor.Collaboration {
  class SoftLockFilters extends UnityEditor.Collaboration.AbstractFilters {
    constructor();
    InitializeFilters(): void;
    OnSettingStatusChanged(type: UnityEditor.Collaboration.CollabSettingType, status: UnityEditor.Collaboration.CollabSettingStatus): void;
  }
}
declare namespace UnityEditor.Collaboration {
  class SoftLockUIData extends System.Object {
    protected constructor();
    static CountOfLocksOnOpenScenes(): number;
    static GetIconForSection(section: UnityEditor.Collaboration.SoftLockUIData.SectionEnum): any;
    static GetLockNamesOnObject(objectWithGUID: UnityEngine.Object): string[];
    static GetLockNamesOnOpenScenes(): any;
    static GetLockNamesOnScenePath(scenePath: string): string[];
    static GetLockNamesOnScenes(scenes: any[]): string[][];
    static GetLocksNamesOnAsset(assetGuid: string): string[];
    static GetLocksNamesOnScene(scene: any): string[];
    static GetSceneNameFromPath(scenePath: string): string;
  }
}
declare namespace UnityEditor.Collaboration.SoftLockUIData {
  class SectionEnum extends System.Enum {
    protected constructor();
    static Inspector: UnityEditor.Collaboration.SoftLockUIData.SectionEnum;
    static None: UnityEditor.Collaboration.SoftLockUIData.SectionEnum;
    static ProjectBrowser: UnityEditor.Collaboration.SoftLockUIData.SectionEnum;
    static Scene: UnityEditor.Collaboration.SoftLockUIData.SectionEnum;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SoftlockViewController extends System.Object {
    protected constructor();
    DrawSceneUI(availableRect: any, scenePath: string): void;
    GetGUIContent(): any;
    GetStyle(): any;
    OnSoftlockUpdate(assetGUIDs: string[]): void;
    Repaint(): void;
    TurnOff(): void;
    TurnOn(): void;
    static readonly Instance: UnityEditor.SoftlockViewController;
    readonly softLockFilters: UnityEditor.Collaboration.SoftLockFilters;
    k_Content: any;
    k_Style: any;
    k_StyleEmpty: any;
  }
}
declare namespace UnityEditor.SoftlockViewController {
  class Cache extends System.Object {
    constructor();
    GetEditors(): UnityEditor.Editor[];
    InvalidateAssetGUIDs(assetGUIDs: string[]): void;
    StoreDisplayCount(count: number, displayText: string): void;
    StoreEditor(editor: UnityEditor.Editor): void;
    StoreEllipsedNames(allNames: string, ellipsedNames: string, characterLength: number): void;
    StoreTooltipForGUID(assetGUID: string, tooltipText: string): void;
    TryGetDisplayCount(count: number, displayText: any): boolean;
    TryGetEllipsedNames(allNames: string, characterLength: number, ellipsedNames: any): boolean;
    TryGetTooltipForGUID(assetGUID: string, tooltipText: any): boolean;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DefaultDeploymentTargetInfo extends System.Object {
    constructor();
    CheckBuild(buildReport: UnityEditor.BuildReporting.BuildReport): UnityEditor.DeploymentTargets.BuildCheckResult;
    GetSupportFlags(): any;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DefaultDeploymentTargetsExtension extends System.Object {
    protected constructor();
    GetKnownTargets(progressHandler?: UnityEditor.ProgressHandler): UnityEditor.DeploymentTargets.DeploymentTargetIdAndStatus[];
    GetTargetInfo(targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): UnityEditor.DeploymentTargets.IDeploymentTargetInfo;
    LaunchBuildOnTarget(buildReport: UnityEditor.BuildReporting.BuildReport, targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): void;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DeploymentTargetManager extends System.Object {
    constructor();
    static FindValidTargetsForLaunchBuild(targetGroup: UnityEditor.BuildTargetGroup, buildReport: UnityEditor.BuildReporting.BuildReport): UnityEditor.DeploymentTargets.DeploymentTargetId[];
    static GetKnownTargets(targetGroup: UnityEditor.BuildTargetGroup, buildTarget: UnityEditor.BuildTarget): UnityEditor.DeploymentTargets.DeploymentTargetIdAndStatus[];
    static GetTargetInfo(targetGroup: UnityEditor.BuildTargetGroup, buildTarget: UnityEditor.BuildTarget, targetId: UnityEditor.DeploymentTargets.DeploymentTargetId): UnityEditor.DeploymentTargets.IDeploymentTargetInfo;
    static LaunchBuildOnTarget(targetGroup: UnityEditor.BuildTargetGroup, buildReport: UnityEditor.BuildReporting.BuildReport, targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): void;
    static SupportsLaunchBuild(info: UnityEditor.DeploymentTargets.IDeploymentTargetInfo, buildReport: UnityEditor.BuildReporting.BuildReport): boolean;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DeploymentTargetId extends System.ValueType {
    protected constructor();
    id: string;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DeploymentTargetStatus extends System.Enum {
    protected constructor();
    static NotReady: UnityEditor.DeploymentTargets.DeploymentTargetStatus;
    static Ready: UnityEditor.DeploymentTargets.DeploymentTargetStatus;
    static Unavailable: UnityEditor.DeploymentTargets.DeploymentTargetStatus;
    static Unknown: UnityEditor.DeploymentTargets.DeploymentTargetStatus;
    value__: number;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DeploymentTargetIdAndStatus extends System.ValueType {
    protected constructor();
    id: UnityEditor.DeploymentTargets.DeploymentTargetId;
    status: UnityEditor.DeploymentTargets.DeploymentTargetStatus;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class DeploymentTargetSupportFlags extends System.Enum {
    protected constructor();
    static Launch: UnityEditor.DeploymentTargets.DeploymentTargetSupportFlags;
    static None: UnityEditor.DeploymentTargets.DeploymentTargetSupportFlags;
    value__: number;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class CheckStatus extends System.Enum {
    protected constructor();
    static Failed: UnityEditor.DeploymentTargets.CheckStatus;
    static Ok: UnityEditor.DeploymentTargets.CheckStatus;
    value__: number;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class CategoryCheckResult extends System.ValueType {
    protected constructor();
    failureMessage: string;
    status: UnityEditor.DeploymentTargets.CheckStatus;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class BuildCheckResult extends System.ValueType {
    protected constructor();
    Passed(): boolean;
    hardware: UnityEditor.DeploymentTargets.CategoryCheckResult;
    sdk: UnityEditor.DeploymentTargets.CategoryCheckResult;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class IDeploymentTargetInfo {
    protected constructor();
    CheckBuild(buildReport: UnityEditor.BuildReporting.BuildReport): UnityEditor.DeploymentTargets.BuildCheckResult;
    GetSupportFlags(): any;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class OperationAbortedException extends System.Exception {
    constructor();
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class OperationFailedException extends System.Exception {
    constructor(title: string, message: string);
    title: string;
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class UnknownDeploymentTargetException extends UnityEditor.DeploymentTargets.OperationFailedException {
    constructor(message?: string);
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class NoResponseFromDeploymentTargetException extends UnityEditor.DeploymentTargets.OperationFailedException {
    constructor(message?: string);
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class CorruptBuildException extends UnityEditor.DeploymentTargets.OperationFailedException {
    constructor(message?: string);
  }
}
declare namespace UnityEditor.DeploymentTargets {
  class IDeploymentTargetsExtension {
    protected constructor();
    GetKnownTargets(progressHandler?: UnityEditor.ProgressHandler): UnityEditor.DeploymentTargets.DeploymentTargetIdAndStatus[];
    GetTargetInfo(targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): UnityEditor.DeploymentTargets.IDeploymentTargetInfo;
    LaunchBuildOnTarget(buildReport: UnityEditor.BuildReporting.BuildReport, targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ArcHandle extends System.Object {
    constructor();
    DrawHandle(): void;
    SetColorWithoutRadiusHandle(color: any, fillColorAlpha: number): void;
    SetColorWithRadiusHandle(color: any, fillColorAlpha: number): void;
    angle: number;
    angleHandleColor: any;
    angleHandleDrawFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void);
    angleHandleSizeFunction: ((position: any) => number);
    fillColor: any;
    radius: number;
    radiusHandleColor: any;
    radiusHandleDrawFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void);
    radiusHandleSizeFunction: ((position: any) => number);
    wireframeColor: any;
  }
}
declare namespace UnityEditorInternal {
  class Button extends System.Object {
    constructor();
    static Do(id: number, position: any, direction: any, size: number, pickSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void)): boolean;
    static Do(id: number, position: any, direction: any, size: number, pickSize: number, capFunc: ((controlID: number, position: any, rotation: any, size: number) => void)): boolean;
  }
}
declare namespace UnityEditorInternal {
  class Disc extends System.Object {
    constructor();
    static Do(id: number, rotation: any, position: any, axis: any, size: number, cutoffPlane: boolean, snap: number): any;
  }
}
declare namespace UnityEditorInternal {
  class FreeMove extends System.Object {
    constructor();
    static Do(id: number, position: any, rotation: any, size: number, snap: any, handleFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void)): any;
    static Do(id: number, position: any, rotation: any, size: number, snap: any, capFunc: ((controlID: number, position: any, rotation: any, size: number) => void)): any;
  }
}
declare namespace UnityEditorInternal {
  class FreeRotate extends System.Object {
    constructor();
    static Do(id: number, rotation: any, position: any, size: number): any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class JointAngularLimitHandle extends System.Object {
    constructor();
    DrawHandle(): void;
    angleHandleDrawFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void);
    angleHandleSizeFunction: ((position: any) => number);
    fillAlpha: number;
    radius: number;
    wireframeAlpha: number;
    xHandleColor: any;
    xMax: number;
    xMin: number;
    xMotion: any;
    xRange: any;
    yHandleColor: any;
    yMax: number;
    yMin: number;
    yMotion: any;
    yRange: any;
    zHandleColor: any;
    zMax: number;
    zMin: number;
    zMotion: any;
    zRange: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.JointAngularLimitHandle {
  class ArcType extends System.Enum {
    protected constructor();
    static Solid: UnityEditor.IMGUI.Controls.JointAngularLimitHandle.ArcType;
    value__: number;
    static Wire: UnityEditor.IMGUI.Controls.JointAngularLimitHandle.ArcType;
  }
}
declare namespace UnityEditorInternal {
  class Slider1D extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class Slider2D extends System.Object {
    constructor();
    static Do(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: any, drawHelper: boolean): any;
  }
}
declare namespace UnityEditorInternal {
  class SliderScale extends System.Object {
    constructor();
    static DoAxis(id: number, scale: number, position: any, direction: any, rotation: any, size: number, snap: number): number;
    static DoCenter(id: number, value: number, position: any, rotation: any, size: number, capFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: number): number;
    static DoCenter(id: number, value: number, position: any, rotation: any, size: number, capFunc: ((controlID: number, position: any, rotation: any, size: number) => void), snap: number): number;
  }
}
declare namespace UnityEditor {
  class VertexSnapping extends System.Object {
    constructor();
    static HandleKeyAndMouseMove(id: number): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class BoxBoundsHandle extends UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle {
    constructor(controlIDHint: number);
    constructor();
    size: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class PrimitiveBoundsHandle extends System.Object {
    constructor(controlIDHint: number);
    constructor();
    DrawHandle(): void;
    SetColor(color: any): void;
    axes: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
    center: any;
    handleColor: any;
    midpointHandleDrawFunction: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void);
    midpointHandleSizeFunction: ((position: any) => number);
    wireframeColor: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class CapsuleBoundsHandle extends UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle {
    constructor(controlIDHint: number);
    constructor();
    height: number;
    heightAxis: UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis;
    radius: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls.CapsuleBoundsHandle {
  class HeightAxis extends System.Enum {
    protected constructor();
    value__: number;
    static X: UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis;
    static Y: UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis;
    static Z: UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis;
  }
}
declare namespace UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle {
  class Axes extends System.Enum {
    protected constructor();
    static All: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
    static None: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
    value__: number;
    static X: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
    static Y: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
    static Z: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
  }
}
declare namespace UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle {
  class HandleDirection extends System.Enum {
    protected constructor();
    static NegativeX: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection;
    static NegativeY: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection;
    static NegativeZ: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection;
    static PositiveX: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection;
    static PositiveY: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection;
    static PositiveZ: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection;
    value__: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class SphereBoundsHandle extends UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle {
    constructor(controlIDHint: number);
    constructor();
    radius: number;
  }
}
declare namespace UnityEditor {
  class GameView extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    IsShowingGizmos(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    static RepaintAll(): void;
    SizeSelectionCallback(indexClicked: number, objectSelected: any): void;
    readonly forceLowResolutionAspectRatios: boolean;
    lowResolutionForAspectRatios: boolean;
    maximizeOnPlay: boolean;
    readonly showLowResolutionToggle: boolean;
  }
}
declare namespace UnityEditor.GameView {
  class Styles extends System.Object {
    protected constructor();
    static clearEveryFrameContextMenuContent: any;
    static frameDebuggerOnContent: any;
    static gameViewBackgroundStyle: any;
    static gizmoButtonStyle: any;
    static gizmosContent: any;
    static loadRenderDocContent: any;
    static lowResAspectRatiosContextMenuContent: any;
    static maximizeOnPlayContent: any;
    static muteContent: any;
    static noCameraWarningContextMenuContent: any;
    static renderdocContent: any;
    static statsContent: any;
    static zoomSliderContent: any;
  }
}
declare namespace UnityEditor {
  class GameViewSizeType extends System.Enum {
    protected constructor();
    static AspectRatio: UnityEditor.GameViewSizeType;
    static FixedResolution: UnityEditor.GameViewSizeType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class GameViewSize extends System.Object {
    constructor(type: UnityEditor.GameViewSizeType, width: number, height: number, baseText: string);
    constructor(other: UnityEditor.GameViewSize);
    Set(other: UnityEditor.GameViewSize): void;
    readonly aspectRatio: number;
    baseText: string;
    readonly displayText: string;
    height: number;
    readonly isFreeAspectRatio: boolean;
    sizeType: UnityEditor.GameViewSizeType;
    width: number;
  }
}
declare namespace UnityEditor {
  class GameViewSizeGroup extends System.Object {
    constructor();
    AddBuiltinSize(size: UnityEditor.GameViewSize): void;
    AddBuiltinSizes(sizes: UnityEditor.GameViewSize[]): void;
    AddCustomSize(size: UnityEditor.GameViewSize): void;
    AddCustomSizes(sizes: UnityEditor.GameViewSize[]): void;
    GetBuiltinCount(): number;
    GetCustomCount(): number;
    GetDisplayTexts(): string[];
    GetGameViewSize(index: number): UnityEditor.GameViewSize;
    GetTotalCount(): number;
    IndexOf(view: UnityEditor.GameViewSize): number;
    IsCustomSize(index: number): boolean;
    RemoveCustomSize(index: number): void;
    TotalIndexToCustomIndex(index: number): number;
  }
}
declare namespace UnityEditor {
  class GameViewSizeMenu extends UnityEditor.FlexibleMenu {
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, gameView: UnityEditor.IGameViewSizeMenuUser);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor {
  class GameViewSizeGroupType extends System.Enum {
    protected constructor();
    static Android: UnityEditor.GameViewSizeGroupType;
    static HMD: UnityEditor.GameViewSizeGroupType;
    static iOS: UnityEditor.GameViewSizeGroupType;
    static N3DS: UnityEditor.GameViewSizeGroupType;
    static PS3: UnityEditor.GameViewSizeGroupType;
    static Standalone: UnityEditor.GameViewSizeGroupType;
    static Tizen: UnityEditor.GameViewSizeGroupType;
    value__: number;
    static WebPlayer: UnityEditor.GameViewSizeGroupType;
    static WiiU: UnityEditor.GameViewSizeGroupType;
    static WP8: UnityEditor.GameViewSizeGroupType;
  }
}
declare namespace UnityEditor {
  class GameViewSizes {
    constructor();
    static BuildTargetGroupToGameViewSizeGroup(buildTargetGroup: UnityEditor.BuildTargetGroup): UnityEditor.GameViewSizeGroupType;
    Changed(): void;
    Equals(other: any): boolean;
    GetChangeID(): number;
    static GetConstrainedRect(startRect: any, groupType: UnityEditor.GameViewSizeGroupType, gameViewSizeIndex: number, fitsInsideRect: any): any;
    GetDefaultStandaloneIndex(): number;
    GetGroup(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType): UnityEditor.GameViewSizeGroup;
    GetHashCode(): number;
    GetInstanceID(): number;
    static GetRenderTargetSize(startRect: any, groupType: UnityEditor.GameViewSizeGroupType, gameViewSizeIndex: number, clamped: any): any;
    GetType(): any;
    IsDefaultStandaloneScreenSize(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType, index: number): boolean;
    IsRemoteScreenSize(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType, index: number): boolean;
    RefreshRemoteScreenSize(width: number, height: number): void;
    RefreshStandaloneAndRemoteDefaultSizes(): void;
    RefreshStandaloneDefaultScreenSize(width: number, height: number): void;
    SaveToHDD(): void;
    SetDirty(): void;
    ToString(): string;
    readonly currentGroup: UnityEditor.GameViewSizeGroup;
    readonly currentGroupType: UnityEditor.GameViewSizeGroupType;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor.GameViewSizes {
  class BuildTargetChangedHandler extends System.Object {
    constructor();
    OnActiveBuildTargetChanged(oldTarget: UnityEditor.BuildTarget, newTarget: UnityEditor.BuildTarget): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor {
  class GameViewSizesMenuItemProvider extends System.Object {
    constructor(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType);
    Add(obj: any): number;
    Count(): number;
    Create(): any;
    GetItem(index: number): any;
    GetName(index: number): string;
    GetSeperatorIndices(): number[];
    IsModificationAllowed(index: number): boolean;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, obj: any): void;
  }
}
declare namespace UnityEditor {
  class GameViewSizesMenuModifyItemUI extends UnityEditor.FlexibleMenuModifyItemUI {
    constructor();
    GetWindowSize(): any;
    OnClose(): void;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor {
  class FlexibleMenuModifyItemUI extends UnityEditor.PopupWindowContent {
    protected constructor();
    Accepted(): void;
    Init(menuType: UnityEditor.FlexibleMenuModifyItemUI.MenuType, obj: any, acceptedCallback: ((obj: any) => void)): void;
    IsShowing(): boolean;
    OnClose(): void;
    m_Object: any;
  }
}
declare namespace UnityEditor.GameViewSizesMenuModifyItemUI {
  class Styles extends System.Object {
    constructor();
    cancel: any;
    headerAdd: any;
    headerEdit: any;
    ok: any;
    optionalText: any;
    typeName: any;
    typeNames: any[];
    widthHeightText: any;
  }
}
declare namespace UnityEditor {
  class IGameViewSizeMenuUser {
    protected constructor();
    SizeSelectionCallback(indexClicked: number, objectSelected: any): void;
    readonly forceLowResolutionAspectRatios: boolean;
    lowResolutionForAspectRatios: boolean;
    readonly showLowResolutionToggle: boolean;
  }
}
declare namespace UnityEditor {
  class LightmapBakeQuality extends System.Enum {
    protected constructor();
    static High: UnityEditor.LightmapBakeQuality;
    static Low: UnityEditor.LightmapBakeQuality;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightmapSnapshot extends UnityEngine.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal {
  class GridEditorUtility extends System.Object {
    protected constructor();
    static ClampToGrid(p: any, origin: any, gridSize: any): any;
    static DrawBatchedHorizontalLine(x1: number, x2: number, y: number): void;
    static DrawBatchedLine(p1: any, p2: any): void;
    static DrawBatchedVerticalLine(y1: number, y2: number, x: number): void;
    static DrawBox(r: any, color: any): void;
    static DrawFilledBox(r: any, color: any): void;
    static DrawGridGizmo(gridLayout: any, transform: any, color: any, gridMesh: any, gridMaterial: any): void;
    static DrawGridMarquee(gridLayout: any, area: any, color: any): void;
    static DrawLine(p1: any, p2: any, color: any): void;
    static GenerateCachedGridMesh(gridLayout: any, color: any, screenPixelSize: number, bounds: any, topology: any): any;
    static GetMarqueeBounds(p1: any, p2: any): any;
    static GetMarqueeRect(p1: any, p2: any): any;
    static GetPointsOnLine(p1: any, p2: any): any;
    static GetSpriteWorldSize(sprite: any): any;
    static ScreenToLocal(transform: any, screenPosition: any): any;
    static ScreenToLocal(transform: any, screenPosition: any, plane: any): any;
  }
}
declare namespace UnityEditor {
  class GridSnapping extends System.Object {
    protected constructor();
    static Snap(grid: any, position: any): any;
    static Snap(position: any): any;
    static readonly active: boolean;
    static readonly activeGrid: any;
  }
}
declare namespace UnityEditor {
  class AboutWindow extends UnityEditor.EditorWindow {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    UpdateScroll(): void;
  }
}
declare namespace UnityEditor {
  class AboutWindowNames extends System.Object {
    protected constructor();
    static Names(country_filter?: string, chunked?: boolean): string[];
    static ParseCredits(): void;
    static RemoveDiacritics(text: string): string;
    static s_Credits: UnityEditor.AboutWindowNames.CreditEntry[];
  }
}
declare namespace UnityEditor.AboutWindowNames {
  class CreditEntry extends System.Object {
    constructor();
    readonly FormattedName: string;
    alumni: boolean;
    country_code: string;
    gravatar_hash: string;
    name: string;
    nationality: string;
    normalizedName: string;
    office: string;
    region: string;
    twitter: string;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimFloat {
    constructor(value: number);
    constructor(value: number, callback: (() => void));
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    readonly isAnimating: boolean;
    target: number;
    value: number;
    speed: number;
    valueChanged: UnityEngine.Events.UnityEvent;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class BaseAnimValue<T> extends System.Object {
    protected constructor();
    readonly isAnimating: boolean;
    target: T;
    value: T;
    speed: number;
    valueChanged: UnityEngine.Events.UnityEvent;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimVector3 {
    constructor();
    constructor(value: any);
    constructor(value: any, callback: (() => void));
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    readonly isAnimating: boolean;
    target: any;
    value: any;
    speed: number;
    valueChanged: UnityEngine.Events.UnityEvent;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimBool {
    constructor();
    constructor(value: boolean);
    constructor(callback: (() => void));
    constructor(value: boolean, callback: (() => void));
    Equals(obj: any): boolean;
    Fade(from: number, to: number): number;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    readonly faded: number;
    readonly isAnimating: boolean;
    target: boolean;
    value: boolean;
    speed: number;
    valueChanged: UnityEngine.Events.UnityEvent;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimQuaternion {
    constructor(value: any);
    constructor(value: any, callback: (() => void));
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    readonly isAnimating: boolean;
    target: any;
    value: any;
    speed: number;
    valueChanged: UnityEngine.Events.UnityEvent;
  }
}
declare namespace UnityEditor {
  class AppStatusBar extends UnityEditor.GUIView {
    constructor();
    static StatusChanged(): void;
  }
}
declare namespace UnityEditor {
  class AssetPopupBackend extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class AssetSaveDialog extends UnityEditor.EditorWindow {
    constructor();
    static GetContentForAsset(path: string): any;
    static ShowWindow(inAssets: string[], assetsThatShouldBeSaved: any): void;
  }
}
declare namespace UnityEditor.AssetSaveDialog {
  class Styles extends System.Object {
    constructor();
    box: any;
    button: any;
    buttonWidth: number;
    close: any;
    dontSave: any;
    saveAll: any;
    saveSelected: any;
    selected: any;
  }
}
declare namespace UnityEditor {
  class BumpMapSettingsFixingWindow extends UnityEditor.EditorWindow {
    constructor();
    SetPaths(paths: string[]): void;
    static ShowWindow(paths: string[]): void;
  }
}
declare namespace UnityEditor.BumpMapSettingsFixingWindow {
  class Styles extends System.Object {
    constructor();
    box: any;
    button: any;
    overviewText: any;
    selected: any;
  }
}
declare namespace UnityEditor {
  class ButtonWithAnimatedIconRotation extends System.Object {
    constructor(angleCallback: (() => number), repaintCallback: (() => void), repaintsPerSecond: number, mouseDownButton: boolean);
    Clear(): void;
    OnGUI(rect: any, guiContent: any, animate: boolean, style: any): boolean;
  }
}
declare namespace UnityEditor {
  class CallbackController extends System.Object {
    constructor(callback: (() => void), callbacksPerSecond: number);
    Start(): void;
    Stop(): void;
    readonly active: boolean;
  }
}
declare namespace UnityEditor {
  class ColorClipboard extends System.Object {
    protected constructor();
    static HasColor(): boolean;
    static SetColor(color: any): void;
    static TryGetColor(allowHDR: boolean, color: any): boolean;
  }
}
declare namespace UnityEditor {
  class ColorPicker extends UnityEditor.EditorWindow {
    constructor();
    static GetGradientTextureWithAlpha0To1(): any;
    static GetGradientTextureWithAlpha1To0(): any;
    static MakeTexture(width: number, height: number): any;
    OnDestroy(): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(onColorChanged: ((obj: any) => void), col: any, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig): void;
    static Show(viewToUpdate: UnityEditor.GUIView, col: any): void;
    static Show(viewToUpdate: UnityEditor.GUIView, col: any, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig): void;
    static color: any;
    currentPresetLibrary: string;
    static readonly defaultHDRConfig: UnityEditor.ColorPickerHDRConfig;
    static readonly get: UnityEditor.ColorPicker;
    static readonly presetsEditorPrefID: string;
    static readonly visible: boolean;
  }
}
declare namespace UnityEditor.ColorPicker {
  class TonemappingType extends System.Enum {
    protected constructor();
    static Linear: UnityEditor.ColorPicker.TonemappingType;
    static Photographic: UnityEditor.ColorPicker.TonemappingType;
    value__: number;
  }
}
declare namespace UnityEditor.ColorPicker {
  class HDRValues extends System.Object {
    constructor();
    m_ExposureAdjustment: number;
    m_HDRScaleFactor: number;
    m_TonemappingType: UnityEditor.ColorPicker.TonemappingType;
  }
}
declare namespace UnityEditor.ColorPicker {
  class ColorBoxMode extends System.Enum {
    protected constructor();
    static BG_R: UnityEditor.ColorPicker.ColorBoxMode;
    static BR_G: UnityEditor.ColorPicker.ColorBoxMode;
    static EyeDropper: UnityEditor.ColorPicker.ColorBoxMode;
    static HS_V: UnityEditor.ColorPicker.ColorBoxMode;
    static HV_S: UnityEditor.ColorPicker.ColorBoxMode;
    static RG_B: UnityEditor.ColorPicker.ColorBoxMode;
    static SV_H: UnityEditor.ColorPicker.ColorBoxMode;
    value__: number;
  }
}
declare namespace UnityEditor.ColorPicker {
  class SliderMode extends System.Enum {
    protected constructor();
    static HSV: UnityEditor.ColorPicker.SliderMode;
    static RGB: UnityEditor.ColorPicker.SliderMode;
    value__: number;
  }
}
declare namespace UnityEditor.ColorPicker {
  class LabelLocation extends System.Enum {
    protected constructor();
    static Bottom: UnityEditor.ColorPicker.LabelLocation;
    static Left: UnityEditor.ColorPicker.LabelLocation;
    static Right: UnityEditor.ColorPicker.LabelLocation;
    static Top: UnityEditor.ColorPicker.LabelLocation;
    value__: number;
  }
}
declare namespace UnityEditor.ColorPicker {
  class Styles extends System.Object {
    constructor();
    axisLabelNumberField: any;
    background: any;
    colorCycle: any;
    colorPickerBox: any;
    colorToggle: any;
    eyeDropper: any;
    foldout: any;
    headerLine: any;
    label: any;
    pickerBox: any;
    presetsToggle: any;
    sliderCycle: any;
    sliderToggle: any;
    thumb2D: any;
    thumbHoriz: any;
    thumbVert: any;
    toggle: any;
    tonemappingToggle: any;
  }
}
declare namespace UnityEditor {
  class EyeDropper extends UnityEditor.GUIView {
    protected constructor();
    static DrawPreview(position: any): void;
    static GetLastPickedColor(): any;
    static GetPickedColor(): any;
    OnDestroy(): void;
    static Start(onColorPicked: ((obj: any) => void)): void;
    static Start(viewToUpdate: UnityEditor.GUIView): void;
    m_OnColorPicked: ((obj: any) => void);
  }
}
declare namespace UnityEditor.EyeDropper {
  class Styles extends System.Object {
    constructor();
    eyeDropperHorizontalLine: any;
    eyeDropperPickedPixel: any;
    eyeDropperVerticalLine: any;
  }
}
declare namespace UnityEditor {
  class ColorPickerHDRConfig extends System.Object {
    constructor(minBrightness: number, maxBrightness: number, minExposureValue: number, maxExposureValue: number);
    maxBrightness: number;
    maxExposureValue: number;
    minBrightness: number;
    minExposureValue: number;
  }
}
declare namespace UnityEditor {
  class ColumnViewElement extends System.Object {
    constructor(name: string, value: any);
    name: string;
    value: any;
  }
}
declare namespace UnityEditor {
  class ColumnView extends System.Object {
    constructor();
    OnGUI(elements: UnityEditor.ColumnViewElement[], previewColumnFunction: ((value: any) => void)): void;
    OnGUI(elements: UnityEditor.ColumnViewElement[], previewColumnFunction: ((value: any) => void), selectedSearchItemFunction: ((value: any) => void), selectedRegularItemFunction: ((value: any) => void), getDataForDraggingFunction: ((value: any) => any)): void;
    SetKeyboardFocusColumn(column: number): void;
    SetSelected(column: number, selectionIndex: number): void;
    readonly isSearching: boolean;
    readonly searchText: string;
    columnWidth: number;
    minimumNumberOfColumns: number;
  }
}
declare namespace UnityEditor.ColumnView {
  class Styles extends System.Object {
    constructor();
    background: any;
    categoryArrowIcon: any;
    selected: any;
  }
}
declare namespace UnityEditor {
  class CreateAssetUtility extends System.Object {
    constructor();
    BeginNewAssetCreation(instanceID: number, newAssetEndAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, filePath: string, icon: any, newAssetResourceFile: string): boolean;
    Clear(): void;
    EndNewAssetCreation(name: string): void;
    IsCreatingNewAsset(): boolean;
    readonly endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction;
    readonly extension: string;
    readonly folder: string;
    readonly icon: any;
    readonly instanceID: number;
    readonly originalName: string;
  }
}
declare namespace UnityEditor {
  class DockArea extends UnityEditor.HostView {
    constructor();
    AddTab(idx: number, pane: UnityEditor.EditorWindow): void;
    AddTab(pane: UnityEditor.EditorWindow): void;
    DragOver(window: UnityEditor.EditorWindow, mouseScreenPosition: any): UnityEditor.DropInfo;
    PerformDrop(w: UnityEditor.EditorWindow, info: UnityEditor.DropInfo, screenPos: any): boolean;
    RemoveTab(pane: UnityEditor.EditorWindow): void;
    RemoveTab(pane: UnityEditor.EditorWindow, killIfEmpty: boolean): void;
    selected: number;
  }
}
declare namespace UnityEditor {
  class MaximizedHostView extends UnityEditor.HostView {
    constructor();
  }
}
declare namespace UnityEditor {
  class DragRectGUI extends System.Object {
    constructor();
    static DragRect(position: any, value: number, minValue: number, maxValue: number): number;
  }
}
declare namespace UnityEditor {
  class EditorApplicationLayout extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class EditorFeatures extends System.Enum {
    protected constructor();
    static None: UnityEditor.EditorFeatures;
    static OnSceneDrag: UnityEditor.EditorFeatures;
    static PreviewGUI: UnityEditor.EditorFeatures;
    value__: number;
  }
}
declare namespace UnityEditor {
  class EditorWrapper extends System.Object {
    protected constructor();
    Dispose(): void;
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    static Make(obj: UnityEngine.Object, requirements: UnityEditor.EditorFeatures): UnityEditor.EditorWrapper;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(position: any, background: any): void;
    OnPreviewSettings(): void;
    readonly name: string;
    OnSceneDrag: ((sceneView: UnityEditor.SceneView) => void);
  }
}
declare namespace UnityEditor {
  class EditorCache extends System.Object {
    constructor();
    constructor(requirements: UnityEditor.EditorFeatures);
    CleanupAllEditors(): void;
    CleanupUntouchedEditors(): void;
    Dispose(): void;
    get_Item(o: UnityEngine.Object): UnityEditor.EditorWrapper;
  }
}
declare namespace UnityEditor {
  class EditorGUIInternal extends UnityEngine.GUI {
    constructor();
  }
}
declare namespace UnityEngine {
  class GUI extends System.Object {
    constructor();
    static BeginClip(position: any): void;
    static BeginClip(position: any, scrollOffset: any, renderOffset: any, resetOffset: boolean): void;
    static BeginGroup(position: any): void;
    static BeginGroup(position: any, text: string): void;
    static BeginGroup(position: any, text: string, style: any): void;
    static BeginGroup(position: any, content: any): void;
    static BeginGroup(position: any, content: any, style: any): void;
    static BeginGroup(position: any, style: any): void;
    static BeginGroup(position: any, image: any): void;
    static BeginGroup(position: any, image: any, style: any): void;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any): any;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean): any;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: any, verticalScrollbar: any): any;
    static BeginScrollView(position: any, scrollPosition: any, viewRect: any, horizontalScrollbar: any, verticalScrollbar: any): any;
    static Box(position: any, text: string): void;
    static Box(position: any, text: string, style: any): void;
    static Box(position: any, content: any): void;
    static Box(position: any, content: any, style: any): void;
    static Box(position: any, image: any): void;
    static Box(position: any, image: any, style: any): void;
    static BringWindowToBack(windowID: number): void;
    static BringWindowToFront(windowID: number): void;
    static Button(position: any, text: string): boolean;
    static Button(position: any, text: string, style: any): boolean;
    static Button(position: any, content: any): boolean;
    static Button(position: any, content: any, style: any): boolean;
    static Button(position: any, image: any): boolean;
    static Button(position: any, image: any, style: any): boolean;
    static DragWindow(): void;
    static DragWindow(position: any): void;
    static DrawTexture(position: any, image: any): void;
    static DrawTexture(position: any, image: any, scaleMode: any): void;
    static DrawTexture(position: any, image: any, scaleMode: any, alphaBlend: boolean): void;
    static DrawTexture(position: any, image: any, scaleMode: any, alphaBlend: boolean, imageAspect: number): void;
    static DrawTexture(position: any, image: any, scaleMode: any, alphaBlend: boolean, imageAspect: number, color: any, borderWidth: number, cornerRadius: number): void;
    static DrawTexture(position: any, image: any, scaleMode: any, alphaBlend: boolean, imageAspect: number, color: any, borderWidths: any, cornerRadius: number): void;
    static DrawTextureWithTexCoords(position: any, image: any, texCoords: any): void;
    static DrawTextureWithTexCoords(position: any, image: any, texCoords: any, alphaBlend: boolean): void;
    static EndClip(): void;
    static EndGroup(): void;
    static EndScrollView(): void;
    static EndScrollView(handleScrollWheel: boolean): void;
    static FocusControl(name: string): void;
    static FocusWindow(windowID: number): void;
    static GetNameOfFocusedControl(): string;
    static HorizontalScrollbar(position: any, value: number, size: number, leftValue: number, rightValue: number): number;
    static HorizontalScrollbar(position: any, value: number, size: number, leftValue: number, rightValue: number, style: any): number;
    static HorizontalSlider(position: any, value: number, leftValue: number, rightValue: number): number;
    static HorizontalSlider(position: any, value: number, leftValue: number, rightValue: number, slider: any, thumb: any): number;
    static Label(position: any, text: string): void;
    static Label(position: any, text: string, style: any): void;
    static Label(position: any, content: any): void;
    static Label(position: any, content: any, style: any): void;
    static Label(position: any, image: any): void;
    static Label(position: any, image: any, style: any): void;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), text: string): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), text: string, style: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), content: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), content: any, style: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), image: any): any;
    static ModalWindow(id: number, clientRect: any, func: ((id: number) => void), image: any, style: any): any;
    static PasswordField(position: any, password: string, maskChar: any): string;
    static PasswordField(position: any, password: string, maskChar: any, maxLength: number): string;
    static PasswordField(position: any, password: string, maskChar: any, maxLength: number, style: any): string;
    static PasswordField(position: any, password: string, maskChar: any, style: any): string;
    static RepeatButton(position: any, text: string): boolean;
    static RepeatButton(position: any, text: string, style: any): boolean;
    static RepeatButton(position: any, content: any): boolean;
    static RepeatButton(position: any, content: any, style: any): boolean;
    static RepeatButton(position: any, image: any): boolean;
    static RepeatButton(position: any, image: any, style: any): boolean;
    static ScrollTo(position: any): void;
    static ScrollTowards(position: any, maxDelta: number): boolean;
    static SelectionGrid(position: any, selected: number, texts: string[], xCount: number): number;
    static SelectionGrid(position: any, selected: number, texts: string[], xCount: number, style: any): number;
    static SelectionGrid(position: any, selected: number, content: any[], xCount: number): number;
    static SelectionGrid(position: any, selected: number, contents: any[], xCount: number, style: any): number;
    static SelectionGrid(position: any, selected: number, images: any[], xCount: number): number;
    static SelectionGrid(position: any, selected: number, images: any[], xCount: number, style: any): number;
    static SetNextControlName(name: string): void;
    static Slider(position: any, value: number, size: number, start: number, end: number, slider: any, thumb: any, horiz: boolean, id: number): number;
    static TextArea(position: any, text: string): string;
    static TextArea(position: any, text: string, maxLength: number): string;
    static TextArea(position: any, text: string, maxLength: number, style: any): string;
    static TextArea(position: any, text: string, style: any): string;
    static TextField(position: any, text: string): string;
    static TextField(position: any, text: string, maxLength: number): string;
    static TextField(position: any, text: string, maxLength: number, style: any): string;
    static TextField(position: any, text: string, style: any): string;
    static Toggle(position: any, value: boolean, text: string): boolean;
    static Toggle(position: any, value: boolean, text: string, style: any): boolean;
    static Toggle(position: any, value: boolean, content: any): boolean;
    static Toggle(position: any, value: boolean, content: any, style: any): boolean;
    static Toggle(position: any, value: boolean, image: any): boolean;
    static Toggle(position: any, value: boolean, image: any, style: any): boolean;
    static Toggle(position: any, id: number, value: boolean, content: any, style: any): boolean;
    static Toolbar(position: any, selected: number, texts: string[]): number;
    static Toolbar(position: any, selected: number, texts: string[], style: any): number;
    static Toolbar(position: any, selected: number, contents: any[]): number;
    static Toolbar(position: any, selected: number, contents: any[], style: any): number;
    static Toolbar(position: any, selected: number, contents: any[], style: any, buttonSize: any): number;
    static Toolbar(position: any, selected: number, images: any[]): number;
    static Toolbar(position: any, selected: number, images: any[], style: any): number;
    static UnfocusWindow(): void;
    static VerticalScrollbar(position: any, value: number, size: number, topValue: number, bottomValue: number): number;
    static VerticalScrollbar(position: any, value: number, size: number, topValue: number, bottomValue: number, style: any): number;
    static VerticalSlider(position: any, value: number, topValue: number, bottomValue: number): number;
    static VerticalSlider(position: any, value: number, topValue: number, bottomValue: number, slider: any, thumb: any): number;
    static Window(id: number, clientRect: any, func: ((id: number) => void), text: string): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), text: string, style: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), content: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), title: any, style: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), image: any): any;
    static Window(id: number, clientRect: any, func: ((id: number) => void), image: any, style: any): any;
    static backgroundColor: any;
    static changed: boolean;
    static color: any;
    static contentColor: any;
    static depth: number;
    static enabled: boolean;
    static matrix: any;
    static skin: any;
    static tooltip: string;
  }
}
declare namespace UnityEditor {
  class EditorGUILayoutUtilityInternal extends UnityEngine.GUILayoutUtility {
    constructor();
  }
}
declare namespace UnityEngine {
  class GUILayoutUtility extends System.Object {
    constructor();
    static BeginGroup(GroupName: string): void;
    static EndGroup(groupName: string): void;
    static GetAspectRect(aspect: number): any;
    static GetAspectRect(aspect: number, options: any[]): any;
    static GetAspectRect(aspect: number, style: any): any;
    static GetAspectRect(aspect: number, style: any, options: any[]): any;
    static GetLastRect(): any;
    static GetRect(width: number, height: number): any;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number): any;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, options: any[]): any;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: any): any;
    static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: any, options: any[]): any;
    static GetRect(width: number, height: number, options: any[]): any;
    static GetRect(width: number, height: number, style: any): any;
    static GetRect(width: number, height: number, style: any, options: any[]): any;
    static GetRect(content: any, style: any): any;
    static GetRect(content: any, style: any, options: any[]): any;
  }
}
declare namespace UnityEditor {
  class EditorStyles extends System.Object {
    constructor();
    static readonly boldFont: any;
    static readonly boldLabel: any;
    static readonly centeredGreyMiniLabel: any;
    static readonly colorField: any;
    static readonly foldout: any;
    static readonly foldoutPreDrop: any;
    static readonly helpBox: any;
    static readonly inspectorDefaultMargins: any;
    static readonly inspectorFullWidthMargins: any;
    static readonly label: any;
    static readonly largeLabel: any;
    static readonly layerMaskField: any;
    static readonly miniBoldFont: any;
    static readonly miniBoldLabel: any;
    static readonly miniButton: any;
    static readonly miniButtonLeft: any;
    static readonly miniButtonMid: any;
    static readonly miniButtonRight: any;
    static readonly miniFont: any;
    static readonly miniLabel: any;
    static readonly miniTextField: any;
    static readonly numberField: any;
    static readonly objectField: any;
    static readonly objectFieldMiniThumb: any;
    static readonly objectFieldThumb: any;
    static readonly popup: any;
    static readonly radioButton: any;
    static readonly standardFont: any;
    static readonly structHeadingLabel: any;
    static readonly textArea: any;
    static readonly textField: any;
    static readonly toggle: any;
    static readonly toggleGroup: any;
    static readonly toolbar: any;
    static readonly toolbarButton: any;
    static readonly toolbarDropDown: any;
    static readonly toolbarPopup: any;
    static readonly toolbarTextField: any;
    static readonly whiteBoldLabel: any;
    static readonly whiteLabel: any;
    static readonly whiteLargeLabel: any;
    static readonly whiteMiniLabel: any;
    static readonly wordWrappedLabel: any;
    static readonly wordWrappedMiniLabel: any;
  }
}
declare namespace UnityEditor {
  class EditorUpdateWindow extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
  }
}
declare namespace UnityEditor {
  class ExposablePopupMenu extends System.Object {
    constructor();
    Init(items: UnityEditor.ExposablePopupMenu.ItemData[], itemSpacing: number, minWidthOfPopup: number, popupButtonData: UnityEditor.ExposablePopupMenu.PopupButtonData, selectionChangedCallback: ((obj: UnityEditor.ExposablePopupMenu.ItemData) => void)): void;
    OnGUI(rect: any): number;
  }
}
declare namespace UnityEditor.ExposablePopupMenu {
  class ItemData extends System.Object {
    constructor(content: any, style: any, on: boolean, enabled: boolean, userData: any);
    m_Enabled: boolean;
    m_GUIContent: any;
    m_On: boolean;
    m_Style: any;
    m_UserData: any;
    m_Width: number;
  }
}
declare namespace UnityEditor.ExposablePopupMenu {
  class PopupButtonData extends System.Object {
    constructor(content: any, style: any);
    m_GUIContent: any;
    m_Style: any;
  }
}
declare namespace UnityEditor.ExposablePopupMenu {
  class PopUpMenu extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class FallbackEditorWindow extends UnityEditor.EditorWindow {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class FlowLayout extends UnityEngine.GUILayoutGroup {
    constructor();
    CalcHeight(): void;
    CalcWidth(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
  }
}
declare namespace UnityEditor.FlowLayout {
  class LineInfo extends System.ValueType {
    protected constructor();
    bottomBorder: number;
    maxSize: number;
    minSize: number;
    size: number;
    start: number;
    topBorder: number;
  }
}
declare namespace UnityEditor {
  class GUISlideGroup extends System.Object {
    constructor();
    Begin(): void;
    BeginHorizontal(id: number, options: any[]): any;
    End(): void;
    EndHorizontal(): void;
    GetRect(id: number, r: any): any;
    Reset(): void;
  }
}
declare namespace UnityEditor.GUISlideGroup {
  class SlideGroupInternal extends UnityEngine.GUILayoutGroup {
    constructor();
    SetHorizontal(x: number, width: number): void;
    SetID(owner: UnityEditor.GUISlideGroup, id: number): void;
    SetVertical(y: number, height: number): void;
  }
}
declare namespace UnityEditor {
  class GradientEditor extends System.Object {
    constructor();
    static CreateCheckerTexture(numCols: number, numRows: number, cellPixelWidth: number, col1: any, col2: any): any;
    static DrawGradientSwatch(position: any, property: UnityEditor.SerializedProperty, bgColor: any): void;
    static DrawGradientSwatch(position: any, gradient: any, bgColor: any): void;
    static DrawGradientWithBackground(position: any, gradient: any): void;
    static GetBackgroundTexture(): any;
    Init(gradient: any, numSteps: number, hdr: boolean): void;
    OnGUI(position: any): void;
    readonly target: any;
  }
}
declare namespace UnityEditor.GradientEditor {
  class Styles extends System.Object {
    constructor();
    alphaText: any;
    colorText: any;
    downSwatch: any;
    downSwatchOverlay: any;
    locationText: any;
    modeText: any;
    percentText: any;
    upSwatch: any;
    upSwatchOverlay: any;
  }
}
declare namespace UnityEditor.GradientEditor {
  class Swatch extends System.Object {
    constructor(time: number, value: any, isAlpha: boolean);
    m_IsAlpha: boolean;
    m_Time: number;
    m_Value: any;
  }
}
declare namespace UnityEditor {
  class GradientPicker extends UnityEditor.EditorWindow {
    constructor();
    static CloseWindow(): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    static RepaintWindow(): void;
    static SetCurrentGradient(gradient: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(newGradient: any, hdr: boolean): void;
    currentPresetLibrary: string;
    static readonly gradient: any;
    static readonly instance: UnityEditor.GradientPicker;
    static readonly presetsEditorPrefID: string;
    static readonly visible: boolean;
  }
}
declare namespace UnityEditor {
  class PropertyGUIData extends System.ValueType {
    protected constructor();
    color: any;
    property: UnityEditor.SerializedProperty;
    totalPosition: any;
    wasBoldDefaultFont: boolean;
    wasEnabled: boolean;
  }
}
declare namespace UnityEditor {
  class DebugUtils extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class KnobState extends System.Object {
    constructor();
    dragStartPos: number;
    dragStartValue: number;
    isDragging: boolean;
    isEditing: boolean;
  }
}
declare namespace UnityEditor {
  class ListViewElement extends System.ValueType {
    protected constructor();
    column: number;
    position: any;
    row: number;
  }
}
declare namespace UnityEditor {
  class ListViewGUI extends System.Object {
    constructor();
    static DoListView(pos: any, state: UnityEditor.ListViewState, colWidths: number[], dragTitle: string): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static HasMouseDown(r: any): boolean;
    static HasMouseDown(r: any, button: number): boolean;
    static HasMouseUp(r: any): boolean;
    static ListView(state: UnityEditor.ListViewState, colWidths: number[], style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, colWidths: number[], dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(pos: any, state: UnityEditor.ListViewState): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static MultiSelection(prevSelected: number, currSelected: number, initialSelected: any, selectedItems: any): boolean;
  }
}
declare namespace UnityEditor {
  class ListViewGUILayout extends System.Object {
    constructor();
    static HasMouseDown(r: any): boolean;
    static HasMouseDown(r: any, button: number): boolean;
    static HasMouseUp(r: any): boolean;
    static ListView(state: UnityEditor.ListViewState, dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static MultiSelection(prevSelected: number, currSelected: number, initialSelected: any, selectedItems: any): boolean;
  }
}
declare namespace UnityEditor.ListViewGUILayout {
  class GUILayoutedListViewGroup extends UnityEngine.GUILayoutGroup {
    constructor();
    AddY(): void;
    AddY(val: number): void;
    CalcHeight(): void;
    CalcWidth(): void;
  }
}
declare namespace UnityEditor {
  class ListViewOptions extends System.Enum {
    protected constructor();
    value__: number;
    static wantsExternalFiles: UnityEditor.ListViewOptions;
    static wantsReordering: UnityEditor.ListViewOptions;
    static wantsToAcceptCustomDrag: UnityEditor.ListViewOptions;
    static wantsToStartCustomDrag: UnityEditor.ListViewOptions;
  }
}
declare namespace UnityEditor {
  class ListViewShared extends System.Object {
    constructor();
    static OSX: boolean;
  }
}
declare namespace UnityEditor.ListViewShared {
  class InternalListViewState extends System.Object {
    constructor();
    beganHorizontal: boolean;
    dragItem: number;
    endRow: number;
    id: number;
    invisibleRows: number;
    rect: any;
    rectHeight: number;
    state: UnityEditor.ListViewState;
    wantsExternalFiles: boolean;
    wantsReordering: boolean;
    wantsToAcceptCustomDrag: boolean;
    wantsToStartCustomDrag: boolean;
  }
}
declare namespace UnityEditor.ListViewShared {
  class InternalLayoutedListViewState extends UnityEditor.ListViewShared.InternalListViewState {
    constructor();
    group: UnityEditor.ListViewGUILayout.GUILayoutedListViewGroup;
  }
}
declare namespace UnityEditor.ListViewShared {
  class Constants extends System.Object {
    constructor();
    static insertion: string;
  }
}
declare namespace UnityEditor.ListViewShared {
  class ListViewElementsEnumerator extends System.Object {
    protected constructor();
    Dispose(): void;
    GetEnumerator(): any;
    MoveNext(): boolean;
    Reset(): void;
  }
}
declare namespace UnityEditor {
  class ListViewState extends System.Object {
    constructor();
    constructor(totalRows: number);
    constructor(totalRows: number, rowHeight: number);
    column: number;
    customDraggedFromID: number;
    draggedFrom: number;
    draggedTo: number;
    drawDropHere: boolean;
    dropHereRect: any;
    fileNames: string[];
    ID: number;
    row: number;
    rowHeight: number;
    scrollPos: any;
    selectionChanged: boolean;
    totalRows: number;
  }
}
declare namespace UnityEditor {
  class MainView extends UnityEditor.View {
    constructor();
    Cleanup(): void;
    static MakeMain(): void;
  }
}
declare namespace UnityEditor {
  class MaskFieldGUI extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.MaskFieldGUI {
  class MaskCallbackInfo extends System.Object {
    constructor(controlID: number);
    static GetSelectedValueForControl(controlID: number, mask: number, changedFlags: any, changedToValue: any): number;
    static m_Instance: UnityEditor.MaskFieldGUI.MaskCallbackInfo;
  }
}
declare namespace UnityEditor {
  class ObjectPreviewPopup extends UnityEditor.PopupWindowContent {
    constructor(previewObject: UnityEngine.Object);
    GetWindowSize(): any;
    OnClose(): void;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor.ObjectPreviewPopup {
  class Styles extends System.Object {
    constructor();
    background: any;
    toolbar: any;
    toolbarText: any;
  }
}
declare namespace UnityEditor {
  class PackageExport extends UnityEditor.EditorWindow {
    constructor();
    OnDestroy(): void;
    OnGUI(): void;
    readonly items: UnityEditor.ExportPackageItem[];
  }
}
declare namespace UnityEditor.PackageExport {
  class Styles extends System.Object {
    protected constructor();
    static allText: any;
    static bottomBarBg: any;
    static header: any;
    static includeDependenciesText: any;
    static loadingTextStyle: any;
    static noneText: any;
    static title: any;
    static topBarBg: any;
  }
}
declare namespace UnityEditor {
  class PackageExportTreeView extends System.Object {
    constructor(packageExport: UnityEditor.PackageExport, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, startRect: any);
    OnGUI(rect: any): void;
    SetAllEnabled(enabled: UnityEditor.PackageExportTreeView.EnabledState): void;
    readonly items: UnityEditor.ExportPackageItem[];
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class EnabledState extends System.Enum {
    protected constructor();
    static All: UnityEditor.PackageExportTreeView.EnabledState;
    static Mixed: UnityEditor.PackageExportTreeView.EnabledState;
    static None: UnityEditor.PackageExportTreeView.EnabledState;
    static NotSet: UnityEditor.PackageExportTreeView.EnabledState;
    value__: number;
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class PackageExportTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(itemIn: UnityEditor.ExportPackageItem, id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    enabledState: UnityEditor.PackageExportTreeView.EnabledState;
    readonly isFolder: boolean;
    item: UnityEditor.ExportPackageItem;
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class PackageExportTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageExportTreeView);
    OnRowGUI(rowRect: any, tvItem: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    showPreviewForID: number;
    itemWasToggled: ((obj: UnityEditor.PackageExportTreeView.PackageExportTreeViewItem) => void);
  }
}
declare namespace UnityEditor.PackageExportTreeView.PackageExportTreeViewGUI {
  class Constants extends System.Object {
    protected constructor();
    static folderIcon: any;
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class PackageExportTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageExportTreeView);
    FetchData(): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditor {
  class PackageImport extends UnityEditor.EditorWindow {
    constructor();
    static DrawTexture(r: any, tex: any, useDropshadow: boolean): void;
    static GetPreview(previewPath: string): any;
    static HasInvalidCharInFilePath(filePath: string): boolean;
    OnGUI(): void;
    static ShowImportPackage(packagePath: string, items: UnityEditor.ImportPackageItem[], packageIconPath: string, allowReInstall: boolean): void;
    readonly canReInstall: boolean;
    readonly doReInstall: boolean;
    readonly packageItems: UnityEditor.ImportPackageItem[];
  }
}
declare namespace UnityEditor.PackageImport {
  class Constants extends System.Object {
    constructor();
    bottomBarBg: any;
    ConsoleEntryBackEven: any;
    ConsoleEntryBackOdd: any;
    lineColor: any;
    textureIconDropShadow: any;
    title: any;
    topBarBg: any;
  }
}
declare namespace UnityEditor {
  class PackageImportTreeView extends System.Object {
    constructor(packageImport: UnityEditor.PackageImport, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, startRect: any);
    OnGUI(rect: any): void;
    SetAllEnabled(state: UnityEditor.PackageImportTreeView.EnabledState): void;
    readonly canReInstall: boolean;
    readonly doReInstall: boolean;
    readonly packageItems: UnityEditor.ImportPackageItem[];
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class EnabledState extends System.Enum {
    protected constructor();
    static All: UnityEditor.PackageImportTreeView.EnabledState;
    static Mixed: UnityEditor.PackageImportTreeView.EnabledState;
    static None: UnityEditor.PackageImportTreeView.EnabledState;
    static NotSet: UnityEditor.PackageImportTreeView.EnabledState;
    value__: number;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PackageImportTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(itemIn: UnityEditor.ImportPackageItem, id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    enableState: UnityEditor.PackageImportTreeView.EnabledState;
    item: UnityEditor.ImportPackageItem;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PackageImportTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageImportTreeView);
    OnRowGUI(rowRect: any, tvItem: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    showPreviewForID: number;
    itemWasToggled: ((obj: UnityEditor.PackageImportTreeView.PackageImportTreeViewItem) => void);
  }
}
declare namespace UnityEditor.PackageImportTreeView.PackageImportTreeViewGUI {
  class Constants extends System.Object {
    protected constructor();
    static badgeChange: any;
    static badgeDelete: any;
    static badgeNew: any;
    static badgeWarn: any;
    static folderIcon: any;
    static paddinglessStyle: any;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PackageImportTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageImportTreeView);
    FetchData(): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PreviewPopup extends UnityEditor.PopupWindowContent {
    constructor(preview: any);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor {
  class PaneDragTab extends UnityEditor.GUIView {
    constructor();
    Close(): void;
    SetDropInfo(di: UnityEditor.DropInfo, mouseScreenPos: any, inFrontOf: UnityEditor.ContainerWindow): void;
    Show(pixelPos: any, content: any, viewSize: any, mouseScreenPosition: any): void;
    static readonly get: UnityEditor.PaneDragTab;
  }
}
declare namespace UnityEditor {
  class PingData extends System.Object {
    constructor();
    HandlePing(): void;
    readonly isPinging: boolean;
    m_AvailableWidth: number;
    m_ContentDraw: ((obj: any) => void);
    m_ContentRect: any;
    m_FadeOutTime: number;
    m_PeakScale: number;
    m_PingStyle: any;
    m_TimeStart: number;
    m_WaitTime: number;
    m_ZoomTime: number;
  }
}
declare namespace UnityEditor {
  class PopupLocationHelper extends System.Object {
    protected constructor();
    static GetDropDownRect(buttonRect: any, minSize: any, maxSize: any, popupContainerWindow: UnityEditor.ContainerWindow): any;
    static GetDropDownRect(buttonRect: any, minSize: any, maxSize: any, popupContainerWindow: UnityEditor.ContainerWindow, locationPriorityOrder: UnityEditor.PopupLocationHelper.PopupLocation[]): any;
  }
}
declare namespace UnityEditor.PopupLocationHelper {
  class PopupLocation extends System.Enum {
    protected constructor();
    static Above: UnityEditor.PopupLocationHelper.PopupLocation;
    static Below: UnityEditor.PopupLocationHelper.PopupLocation;
    static Left: UnityEditor.PopupLocationHelper.PopupLocation;
    static Right: UnityEditor.PopupLocationHelper.PopupLocation;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PopupWindow extends UnityEditor.EditorWindow {
    protected constructor();
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(activatorRect: any, windowContent: UnityEditor.PopupWindowContent): void;
  }
}
declare namespace UnityEditor {
  class PopupWindowWithoutFocus extends UnityEditor.EditorWindow {
    constructor();
    static Hide(): void;
    static IsVisible(): boolean;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(activatorRect: any, windowContent: UnityEditor.PopupWindowContent): void;
  }
}
declare namespace UnityEditor {
  class PragmaFixingWindow extends UnityEditor.EditorWindow {
    constructor();
    SetPaths(paths: string[]): void;
    static ShowWindow(paths: string[]): void;
  }
}
declare namespace UnityEditor.PragmaFixingWindow {
  class Styles extends System.Object {
    constructor();
    box: any;
    button: any;
    selected: any;
  }
}
declare namespace UnityEditor {
  class PreviewResizer extends System.Object {
    constructor();
    GetExpanded(): boolean;
    GetExpandedBeforeDragging(): boolean;
    GetPreviewSize(): number;
    Init(prefName: string): void;
    static PixelPreciseCollapsibleSlider(id: number, position: any, value: number, min: number, max: number, expanded: any): number;
    ResizeHandle(windowPosition: any, minSize: number, minRemainingSize: number, resizerHeight: number): number;
    ResizeHandle(windowPosition: any, minSize: number, minRemainingSize: number, resizerHeight: number, dragRect: any): number;
    SetExpanded(expanded: boolean): void;
    ToggleExpanded(): void;
  }
}
declare namespace UnityEditorInternal {
  class RectUtils extends System.Object {
    constructor();
    static Contains(a: any, b: any): boolean;
    static Encompass(a: any, b: any): any;
    static Inflate(a: any, factor: number): any;
    static Inflate(a: any, factorX: number, factorY: number): any;
    static Intersection(r1: any, r2: any, intersection: any): boolean;
    static Intersects(r1: any, r2: any): boolean;
    static IntersectsSegment(rect: any, p1: any, p2: any): boolean;
    static Move(r: any, delta: any): any;
    static Offset(r: any, offsetX: number, offsetY: number): any;
    static Offset(a: any, b: any): any;
    static OffsetX(r: any, offsetX: number): any;
  }
}
declare namespace UnityEditorInternal {
  class IBounds {
    protected constructor();
    readonly boundingRect: any;
  }
}
declare namespace UnityEditor {
  class RenameOverlay extends System.Object {
    constructor();
    BeginRename(name: string, userData: number, delay: number): boolean;
    Clear(): void;
    EndRename(acceptChanges: boolean): void;
    HasKeyboardFocus(): boolean;
    IsRenaming(): boolean;
    OnEvent(): boolean;
    OnGUI(): boolean;
    OnGUI(textFieldStyle: any): boolean;
    editFieldRect: any;
    isRenamingFilename: boolean;
    readonly isWaitingForDelay: boolean;
    readonly name: string;
    readonly originalName: string;
    readonly userAcceptedRename: boolean;
    readonly userData: number;
  }
}
declare namespace UnityEditor {
  class SerializableDelayedCallback extends UnityEngine.ScriptableObject {
    protected constructor();
    Cancel(): void;
    static SubscribeCallback(action: (() => void), delayUntilCallback: any): UnityEditor.SerializableDelayedCallback;
  }
}
declare namespace UnityEditor {
  class DelayedCallback extends System.Object {
    constructor(function_: (() => void), timeFromNow: number);
    Clear(): void;
  }
}
declare namespace UnityEditorInternal {
  class ReorderableList extends System.Object {
    constructor(elements: any, elementType: any);
    constructor(elements: any, elementType: any, draggable: boolean, displayHeader: boolean, displayAddButton: boolean, displayRemoveButton: boolean);
    constructor(serializedObject: UnityEditor.SerializedObject, elements: UnityEditor.SerializedProperty);
    constructor(serializedObject: UnityEditor.SerializedObject, elements: UnityEditor.SerializedProperty, draggable: boolean, displayHeader: boolean, displayAddButton: boolean, displayRemoveButton: boolean);
    DoLayoutList(): void;
    DoList(rect: any): void;
    GetHeight(): number;
    GrabKeyboardFocus(): void;
    HasKeyboardControl(): boolean;
    ReleaseKeyboardFocus(): void;
    readonly count: number;
    static readonly defaultBehaviours: UnityEditorInternal.ReorderableList.Defaults;
    draggable: boolean;
    index: number;
    list: any;
    serializedProperty: UnityEditor.SerializedProperty;
    displayAdd: boolean;
    displayRemove: boolean;
    drawElementBackgroundCallback: ((rect: any, index: number, isActive: boolean, isFocused: boolean) => void);
    drawElementCallback: ((rect: any, index: number, isActive: boolean, isFocused: boolean) => void);
    drawFooterCallback: ((rect: any) => void);
    drawHeaderCallback: ((rect: any) => void);
    elementHeight: number;
    elementHeightCallback: ((index: number) => number);
    footerHeight: number;
    headerHeight: number;
    onAddCallback: ((list: UnityEditorInternal.ReorderableList) => void);
    onAddDropdownCallback: ((buttonRect: any, list: UnityEditorInternal.ReorderableList) => void);
    onCanAddCallback: ((list: UnityEditorInternal.ReorderableList) => boolean);
    onCanRemoveCallback: ((list: UnityEditorInternal.ReorderableList) => boolean);
    onChangedCallback: ((list: UnityEditorInternal.ReorderableList) => void);
    onMouseUpCallback: ((list: UnityEditorInternal.ReorderableList) => void);
    onRemoveCallback: ((list: UnityEditorInternal.ReorderableList) => void);
    onReorderCallback: ((list: UnityEditorInternal.ReorderableList) => void);
    onSelectCallback: ((list: UnityEditorInternal.ReorderableList) => void);
    showDefaultBackground: boolean;
  }
}
declare namespace UnityEditorInternal.ReorderableList {
  class Defaults extends System.Object {
    constructor();
    DoAddButton(list: UnityEditorInternal.ReorderableList): void;
    DoRemoveButton(list: UnityEditorInternal.ReorderableList): void;
    DrawElement(rect: any, element: UnityEditor.SerializedProperty, listItem: any, selected: boolean, focused: boolean, draggable: boolean): void;
    DrawElementBackground(rect: any, index: number, selected: boolean, focused: boolean, draggable: boolean): void;
    DrawElementDraggingHandle(rect: any, index: number, selected: boolean, focused: boolean, draggable: boolean): void;
    DrawFooter(rect: any, list: UnityEditorInternal.ReorderableList): void;
    DrawHeader(headerRect: any, serializedObject: UnityEditor.SerializedObject, element: UnityEditor.SerializedProperty, elementList: any): void;
    DrawHeaderBackground(headerRect: any): void;
    DrawNoneElement(rect: any, draggable: boolean): void;
    boxBackground: any;
    draggingHandle: any;
    static dragHandleWidth: number;
    elementBackground: any;
    footerBackground: any;
    headerBackground: any;
    iconToolbarMinus: any;
    iconToolbarPlus: any;
    iconToolbarPlusMore: any;
    static padding: number;
    preButton: any;
  }
}
declare namespace UnityEditor {
  class ScreenShots extends System.Object {
    constructor();
    static SaveScreenShot(r: any, name: string): void;
    static SaveScreenShotWithBorder(r: any, borderColor: any, name: string): string;
    static ScreenGameViewContent(): void;
    static Screenshot(): void;
    static ScreenShotComponent(): void;
    static ScreenShotComponent(contentRect: any, target: UnityEngine.Object): void;
    static ScreenshotExtendedRight(): void;
    static ScreenshotToolbar(): void;
    static SetMainWindowSize(): void;
    static SetMainWindowSizeSmall(): void;
    static ToggleFakeNonDeveloperBuild(): void;
    static kToolbarBorderColor: any;
    static kWindowBorderColor: any;
    static s_TakeComponentScreenshot: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class SearchField extends System.Object {
    constructor();
    HasFocus(): boolean;
    OnGUI(text: string, options: any[]): string;
    OnGUI(rect: any, text: string): string;
    OnGUI(rect: any, text: string, style: any, cancelButtonStyle: any, emptyCancelButtonStyle: any): string;
    OnToolbarGUI(text: string, options: any[]): string;
    OnToolbarGUI(rect: any, text: string): string;
    SetFocus(): void;
    autoSetFocusOnFindCommand: boolean;
    searchFieldControlID: number;
  }
}
declare namespace UnityEditor {
  class SplitterState extends System.Object {
    constructor(relativeSizes: number[]);
    constructor(realSizes: number[], minSizes: number[], maxSizes: number[]);
    constructor(relativeSizes: number[], minSizes: number[], maxSizes: number[]);
    constructor(relativeSizes: number[], minSizes: number[], maxSizes: number[], splitSize: number);
    DoSplitter(i1: number, i2: number, diff: number): void;
    NormalizeRelativeSizes(): void;
    RealToRelativeSizes(): void;
    RelativeToRealSizes(totalSpace: number): void;
    currentActiveSplitter: number;
    ID: number;
    lastTotalSize: number;
    maxSizes: number[];
    minSizes: number[];
    realSizes: number[];
    relativeSizes: number[];
    splitSize: number;
    splitterInitialOffset: number;
    xOffset: number;
  }
}
declare namespace UnityEditor {
  class SplitterGUILayout extends System.Object {
    constructor();
    static BeginHorizontalSplit(state: UnityEditor.SplitterState, options: any[]): void;
    static BeginHorizontalSplit(state: UnityEditor.SplitterState, style: any, options: any[]): void;
    static BeginSplit(state: UnityEditor.SplitterState, style: any, vertical: boolean, options: any[]): void;
    static BeginVerticalSplit(state: UnityEditor.SplitterState, options: any[]): void;
    static BeginVerticalSplit(state: UnityEditor.SplitterState, style: any, options: any[]): void;
    static EndHorizontalSplit(): void;
    static EndVerticalSplit(): void;
  }
}
declare namespace UnityEditor.SplitterGUILayout {
  class GUISplitterGroup extends UnityEngine.GUILayoutGroup {
    constructor();
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    state: UnityEditor.SplitterState;
  }
}
declare namespace UnityEditor {
  class SplitView extends UnityEditor.View {
    constructor();
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    Cleanup(): void;
    DragOver(w: UnityEditor.EditorWindow, mouseScreenPosition: any): UnityEditor.DropInfo;
    DragOverRootView(mouseScreenPosition: any): UnityEditor.DropInfo;
    PerformDrop(dropWindow: UnityEditor.EditorWindow, dropInfo: UnityEditor.DropInfo, screenPos: any): boolean;
    RemoveChild(idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChildNice(child: UnityEditor.View): void;
    SplitGUI(evt: any): void;
    ToString(): string;
    controlID: number;
    vertical: boolean;
  }
}
declare namespace UnityEditor.SplitView {
  class ViewEdge extends System.Enum {
    protected constructor();
    static After: UnityEditor.SplitView.ViewEdge;
    static Before: UnityEditor.SplitView.ViewEdge;
    static Bottom: UnityEditor.SplitView.ViewEdge;
    static BottomLeft: UnityEditor.SplitView.ViewEdge;
    static BottomRight: UnityEditor.SplitView.ViewEdge;
    static FitsHorizontal: UnityEditor.SplitView.ViewEdge;
    static FitsVertical: UnityEditor.SplitView.ViewEdge;
    static Left: UnityEditor.SplitView.ViewEdge;
    static None: UnityEditor.SplitView.ViewEdge;
    static Right: UnityEditor.SplitView.ViewEdge;
    static Top: UnityEditor.SplitView.ViewEdge;
    static TopLeft: UnityEditor.SplitView.ViewEdge;
    static TopRight: UnityEditor.SplitView.ViewEdge;
    value__: number;
  }
}
declare namespace UnityEditor.SplitView {
  class ExtraDropInfo extends System.Object {
    constructor(rootWindow: boolean, edge: UnityEditor.SplitView.ViewEdge, index: number);
    edge: UnityEditor.SplitView.ViewEdge;
    index: number;
    rootWindow: boolean;
  }
}
declare namespace UnityEditor {
  class StructPropertyGUILayout extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class StructPropertyGUI extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TargetChoiceHandler extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class PropertyAndTargetHandler extends System.Object {
    constructor(property: UnityEditor.SerializedProperty, target: UnityEngine.Object, function_: ((property: UnityEditor.SerializedProperty, target: UnityEngine.Object) => void));
    "function": ((property: UnityEditor.SerializedProperty, target: UnityEngine.Object) => void);
    property: UnityEditor.SerializedProperty;
    target: UnityEngine.Object;
  }
}
declare namespace UnityEditor {
  class Toolbar extends UnityEditor.GUIView {
    constructor();
    CalcHeight(): number;
    OnCollabStateChanged(info: UnityEditor.Collaboration.CollabInfo): void;
    UpdateCollabToolbarState(): void;
    static get: UnityEditor.Toolbar;
    static requestShowCollabToolbar: boolean;
  }
}
declare namespace UnityEditor.Toolbar {
  class CollabToolbarState extends System.Enum {
    protected constructor();
    static Conflict: UnityEditor.Toolbar.CollabToolbarState;
    static Disabled: UnityEditor.Toolbar.CollabToolbarState;
    static FilesToPush: UnityEditor.Toolbar.CollabToolbarState;
    static InProgress: UnityEditor.Toolbar.CollabToolbarState;
    static NeedToEnableCollab: UnityEditor.Toolbar.CollabToolbarState;
    static Offline: UnityEditor.Toolbar.CollabToolbarState;
    static OperationError: UnityEditor.Toolbar.CollabToolbarState;
    static ServerHasChanges: UnityEditor.Toolbar.CollabToolbarState;
    static UpToDate: UnityEditor.Toolbar.CollabToolbarState;
    value__: number;
  }
}
declare namespace UnityEditor.Toolbar {
  class Styles extends System.Object {
    protected constructor();
    static appToolbar: any;
    static collabButtonStyle: any;
    static dropdown: any;
  }
}
declare namespace UnityEditor {
  class TypeSelectionList extends System.Object {
    constructor(objects: UnityEngine.Object[]);
    readonly typeSelections: UnityEditor.TypeSelection[];
  }
}
declare namespace UnityEditor {
  class TypeSelection extends System.Object {
    constructor(typeName: string, objects: UnityEngine.Object[]);
    CompareTo(o: any): number;
    label: any;
    objects: UnityEngine.Object[];
  }
}
declare namespace UnityEditor {
  class VerticalGrid extends System.Object {
    constructor();
    CalcColumns(): number;
    CalcRect(itemIdx: number, yOffset: number): any;
    CalcRows(itemCount: number): number;
    GetMaxVisibleItems(height: number): number;
    InitNumRowsAndColumns(itemCount: number, maxNumRows: number): void;
    IsVisibleInScrollView(scrollViewHeight: number, scrollPos: number, gridStartY: number, maxIndex: number, startIndex: any, endIndex: any): boolean;
    ToString(): string;
    bottomMargin: number;
    readonly columns: number;
    fixedHorizontalSpacing: number;
    fixedWidth: number;
    readonly height: number;
    readonly horizontalSpacing: number;
    itemSize: any;
    leftMargin: number;
    minHorizontalSpacing: number;
    rightMargin: number;
    readonly rows: number;
    topMargin: number;
    useFixedHorizontalSpacing: boolean;
    verticalSpacing: number;
  }
}
declare namespace UnityEditor {
  class VerticalGridWithSplitter extends System.Object {
    constructor();
    CalcRect(itemIdx: number, yOffset: number): any;
    CalcSplitRect(splitIndex: number, yOffset: number): any;
    CloseSplit(): void;
    GetMaxVisibleItems(height: number): number;
    InitNumRowsAndColumns(itemCount: number, maxNumRows: number): void;
    OpenSplit(splitAfterRowIndex: number, numItems: number): void;
    ResetSplit(): void;
    UpdateSplitAnimationOnGUI(): boolean;
    bottomMargin: number;
    readonly columns: number;
    fixedWidth: number;
    readonly height: number;
    readonly horizontalSpacing: number;
    itemSize: any;
    leftMargin: number;
    minHorizontalSpacing: number;
    rightMargin: number;
    readonly rows: number;
    topMargin: number;
    verticalSpacing: number;
  }
}
declare namespace UnityEditor {
  class WindowLayout extends System.Object {
    constructor();
    static AddSplitViewAndChildrenRecurse(splitview: UnityEditor.View, list: any): void;
    static CloseWindows(): void;
    static DeleteGUI(): void;
    static EnsureMainWindowHasBeenLoaded(): void;
    static LoadWindowLayout(path: string, newProjectLayoutWasCreated: boolean): boolean;
    static Maximize(win: UnityEditor.EditorWindow): void;
    static MaximizePrepare(win: UnityEditor.EditorWindow): boolean;
    static MaximizePresent(win: UnityEditor.EditorWindow): void;
    static SaveGUI(): void;
    static SaveSplitViewAndChildren(splitview: UnityEditor.View, win: UnityEditor.EditorWindow, path: string): void;
    static SaveWindowLayout(path: string): void;
    static Unmaximize(win: UnityEditor.EditorWindow): void;
  }
}
declare namespace UnityEditor {
  class SaveWindowLayout extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor {
  class DeleteWindowLayout extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor {
  class CreateBuiltinWindows extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class WindowFocusState extends UnityEngine.ScriptableObject {
    constructor();
  }
}
declare namespace UnityEditor.FlexibleMenu {
  class Styles extends System.Object {
    constructor();
    menuItem: any;
    plusButtonText: any;
  }
}
declare namespace UnityEditor.FlexibleMenu {
  class ItemContextMenu extends System.Object {
    protected constructor();
    static Show(itemIndex: number, caller: UnityEditor.FlexibleMenu): void;
  }
}
declare namespace UnityEditor.FlexibleMenuModifyItemUI {
  class MenuType extends System.Enum {
    protected constructor();
    static Add: UnityEditor.FlexibleMenuModifyItemUI.MenuType;
    static Edit: UnityEditor.FlexibleMenuModifyItemUI.MenuType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IFlexibleMenuItemProvider {
    protected constructor();
    Add(obj: any): number;
    Count(): number;
    Create(): any;
    GetItem(index: number): any;
    GetName(index: number): string;
    GetSeperatorIndices(): number[];
    IsModificationAllowed(index: number): boolean;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
  }
}
declare namespace UnityEditor {
  class ManipulationTool extends System.Object {
    protected constructor();
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
  }
}
declare namespace UnityEditor {
  class ManipulationToolUtility extends System.Object {
    constructor();
    static BeginDragging(handleName: string): void;
    static DetectDraggingBasedOnMouseDownUp(handleName: string, typeBefore: any): void;
    static DisableMinDragDifference(): void;
    static DisableMinDragDifferenceBasedOnSnapping(positionBeforeSnapping: any, positionAfterSnapping: any): void;
    static DisableMinDragDifferenceForAxis(axis: number): void;
    static EndDragging(handleName: string): void;
    static SetMinDragDifferenceForPos(position: any): void;
    static SetMinDragDifferenceForPos(position: any, multiplier: number): void;
    static minDragDifference: any;
    static handleDragChange: ((handleName: string, dragging: boolean) => void);
  }
}
declare namespace UnityEditor {
  class MoveTool extends UnityEditor.ManipulationTool {
    constructor();
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
  }
}
declare namespace UnityEditor {
  class RotateTool extends UnityEditor.ManipulationTool {
    constructor();
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
  }
}
declare namespace UnityEditor {
  class ScaleTool extends UnityEditor.ManipulationTool {
    constructor();
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
  }
}
declare namespace UnityEditor {
  class RectTool extends UnityEditor.ManipulationTool {
    constructor();
    static GetLocalRectPoint(rect: any, index: number): any;
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
  }
}
declare namespace UnityEditor {
  class SnapSettings extends UnityEditor.EditorWindow {
    constructor();
    static move: any;
    static rotation: number;
    static scale: number;
  }
}
declare namespace UnityEditor.SnapSettings {
  class Styles extends System.Object {
    constructor();
    buttonLeft: any;
    buttonMid: any;
    buttonRight: any;
    moveX: any;
    moveY: any;
    moveZ: any;
    rotation: any;
    scale: any;
    snapAllAxes: any;
    snapX: any;
    snapY: any;
    snapZ: any;
  }
}
declare namespace UnityEditor {
  class TransformManipulator extends System.Object {
    constructor();
    static BeginManipulationHandling(lockHandleWhileDragging: boolean): void;
    static DebugAlignment(targetRotation: any): void;
    static EndManipulationHandling(): any;
    static SetPositionDelta(positionDelta: any): void;
    static SetResizeDelta(scaleDelta: any, pivotPosition: any, pivotRotation: any): void;
    static SetScaleDelta(scaleDelta: any, pivotRotation: any): void;
    static readonly active: boolean;
    static readonly individualSpace: boolean;
    static readonly mouseDownHandlePosition: any;
  }
}
declare namespace UnityEditor.TransformManipulator {
  class TransformData extends System.ValueType {
    protected constructor();
    DebugAlignment(targetRotation: any): void;
    static GetData(t: any): UnityEditor.TransformManipulator.TransformData;
    SetPositionDelta(positionDelta: any, applySmartRounding: boolean): void;
    SetScaleDelta(scaleDelta: any, scalePivot: any, scaleRotation: any, preferRectResize: boolean): void;
    anchoredPosition: any;
    localPosition: any;
    position: any;
    rect: any;
    rectTransform: any;
    rotation: any;
    static s_Alignments: any[];
    scale: any;
    sizeDelta: any;
    transform: any;
  }
}
declare namespace UnityEditor {
  class GameObjectsTreeViewDragging extends UnityEditor.IMGUI.Controls.TreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    DragCleanup(revertExpanded: boolean): void;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor {
  class AssetsTreeViewDataSource extends UnityEditor.IMGUI.Controls.LazyTreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, rootInstanceID: number, showRootItem: boolean, rootItemIsCollapsable: boolean);
    FetchData(): void;
    GetInsertAfterItemIDForNewItem(newName: string, parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, isCreatingNewFolder: boolean, foldersFirst: boolean): number;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    foldersFirst: boolean;
    foldersOnly: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class LazyTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    static CreateChildListForCollapsedParent(): UnityEditor.IMGUI.Controls.TreeViewItem[];
    FindItem(itemID: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): UnityEditor.IMGUI.Controls.TreeViewItem[];
    InitIfNeeded(): void;
    static IsChildListForACollapsedParent(childList: UnityEditor.IMGUI.Controls.TreeViewItem[]): boolean;
    RevealItem(itemID: number): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
  }
}
declare namespace UnityEditor.AssetsTreeViewDataSource {
  class SemiNumericDisplayNameListComparer extends System.Object {
    constructor();
    Compare(x: UnityEditor.IMGUI.Controls.TreeViewItem, y: UnityEditor.IMGUI.Controls.TreeViewItem): number;
  }
}
declare namespace UnityEditor.AssetsTreeViewDataSource {
  class FolderTreeItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
  }
}
declare namespace UnityEditor.AssetsTreeViewDataSource {
  class NonFolderTreeItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
  }
}
declare namespace UnityEditor {
  class TreeViewStateWithAssetUtility extends UnityEditor.IMGUI.Controls.TreeViewState {
    constructor();
  }
}
declare namespace UnityEditor {
  class GameObjectTreeViewDataSource extends UnityEditor.IMGUI.Controls.LazyTreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, rootInstanceID: number, showRoot: boolean, rootItemIsCollapsable: boolean);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    EnsureFullyInitialized(): void;
    FetchData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRow(id: number): number;
    GetRows(): UnityEditor.IMGUI.Controls.TreeViewItem[];
    IsRevealed(id: number): boolean;
    OnInitialize(): void;
    RevealItem(itemID: number): void;
    readonly isFetchAIssue: boolean;
    readonly rowCount: number;
    readonly sceneHeaderItems: UnityEditor.GameObjectTreeViewItem[];
    searchMode: number;
    searchString: string;
    sortingState: UnityEditor.HierarchySorting;
  }
}
declare namespace UnityEditor {
  class GameObjectTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, useHorizontalScroll: boolean);
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRectForFraming(row: number): any;
    OnInitialize(): void;
  }
}
declare namespace UnityEditor.GameObjectTreeViewGUI {
  class GameObjectColorType extends System.Enum {
    protected constructor();
    static BrokenPrefab: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    static Count: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    static Normal: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    static Prefab: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    value__: number;
  }
}
declare namespace UnityEditor.GameObjectTreeViewGUI {
  class GameObjectStyles extends System.Object {
    protected constructor();
    static brokenPrefabLabel: any;
    static disabledBrokenPrefabLabel: any;
    static disabledLabel: any;
    static disabledPrefabLabel: any;
    static kSceneHeaderIconsInterval: number;
    static loadSceneGUIContent: any;
    static optionsButtonStyle: any;
    static prefabLabel: any;
    static saveSceneGUIContent: any;
    static sceneHeaderBg: any;
    static unloadSceneGUIContent: any;
  }
}
declare namespace UnityEditor {
  class GameObjectTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    colorCode: number;
    displayName: string;
    isSceneHeader: boolean;
    objectPPTR: UnityEngine.Object;
    scene: any;
    shouldDisplay: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ITreeViewDataSource {
    protected constructor();
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetExpandedIDs(): number[];
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRow(id: number): number;
    GetRows(): UnityEditor.IMGUI.Controls.TreeViewItem[];
    HasFakeItem(): boolean;
    InitIfNeeded(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpanded(id: number): boolean;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRevealed(id: number): boolean;
    OnInitialize(): void;
    OnSearchChanged(): void;
    ReloadData(): void;
    RemoveFakeItem(): void;
    RevealItem(id: number): void;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedIDs(ids: number[]): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ITreeViewDragging {
    protected constructor();
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[], mouseDownPosition: any): boolean;
    DragCleanup(revertExpanded: boolean): void;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, row: number): boolean;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    OnInitialize(): void;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
    drawRowMarkerAbove: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ITreeViewGUI {
    protected constructor();
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    BeginRowGUI(): void;
    EndPingItem(): void;
    EndRename(): void;
    EndRowGUI(): void;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetRectForFraming(row: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    OnInitialize(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    readonly bottomRowMargin: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class MultiColumnHeader extends System.Object {
    constructor(state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState);
    GetCellRect(visibleColumnIndex: number, rowRect: any): any;
    GetColumn(columnIndex: number): UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column;
    GetColumnRect(visibleColumnIndex: number): any;
    GetVisibleColumnIndex(columnIndex: number): number;
    IsColumnVisible(columnIndex: number): boolean;
    IsSortedAscending(columnIndex: number): boolean;
    OnGUI(rect: any, xScroll: number): void;
    Repaint(): void;
    ResizeToFit(): void;
    SetSortDirection(columnIndex: number, sortAscending: boolean): void;
    SetSorting(columnIndex: number, sortAscending: boolean): void;
    SetSortingColumns(columnIndices: number[], sortAscending: boolean[]): void;
    canSort: boolean;
    height: number;
    sortedColumnIndex: number;
    state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState;
  }
}
declare namespace UnityEditor.IMGUI.Controls.MultiColumnHeader {
  class DefaultGUI extends System.Object {
    protected constructor();
    static readonly columnContentMargin: number;
    static readonly defaultHeight: number;
    static readonly minimumHeight: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls.MultiColumnHeader {
  class DefaultStyles extends System.Object {
    protected constructor();
    static background: any;
    static columnHeader: any;
    static columnHeaderCenterAligned: any;
    static columnHeaderRightAligned: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class MultiColumnHeaderState extends System.Object {
    constructor(columns: UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column[]);
    static CanOverwriteSerializedFields(source: UnityEditor.IMGUI.Controls.MultiColumnHeaderState, destination: UnityEditor.IMGUI.Controls.MultiColumnHeaderState): boolean;
    static OverwriteSerializedFields(source: UnityEditor.IMGUI.Controls.MultiColumnHeaderState, destination: UnityEditor.IMGUI.Controls.MultiColumnHeaderState): void;
    readonly columns: UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column[];
    maximumNumberOfSortedColumns: number;
    sortedColumnIndex: number;
    sortedColumns: number[];
    visibleColumns: number[];
    readonly widthOfAllVisibleColumns: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls.MultiColumnHeaderState {
  class Column extends System.Object {
    constructor();
    allowToggleVisibility: boolean;
    autoResize: boolean;
    canSort: boolean;
    contextMenuText: string;
    headerContent: any;
    headerTextAlignment: any;
    maxWidth: number;
    minWidth: number;
    sortedAscending: boolean;
    sortingArrowAlignment: any;
    width: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewController extends System.Object {
    constructor(editorWindow: UnityEditor.EditorWindow, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState);
    BeginNameEditing(delay: number): boolean;
    EndNameEditing(acceptChanges: boolean): void;
    EndPing(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    Frame(id: number, frame: boolean, ping: boolean): void;
    Frame(id: number, frame: boolean, ping: boolean, animated: boolean): void;
    GetContentSize(): any;
    GetRowIDs(): number[];
    GetSelection(): number[];
    GetTotalRect(): any;
    GrabKeyboardFocus(): void;
    HandleUnusedMouseEventsForItem(rect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number): void;
    HasFocus(): boolean;
    HasSelection(): boolean;
    Init(rect: any, data: UnityEditor.IMGUI.Controls.ITreeViewDataSource, gui: UnityEditor.IMGUI.Controls.ITreeViewGUI, dragging: UnityEditor.IMGUI.Controls.ITreeViewDragging): void;
    IsItemDragSelectedOrSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsLastClickedPartOfRows(): boolean;
    IsSelected(id: number): boolean;
    NotifyListenersThatDragEnded(draggedIDs: number[], draggedItemsFromOwnTreeView: boolean): void;
    NotifyListenersThatSelectionChanged(): void;
    OffsetSelection(offset: number): void;
    OnEvent(): void;
    OnGUI(rect: any, keyboardControlID: number): void;
    ReloadData(): void;
    RemoveSelection(): void;
    Repaint(): void;
    SelectionClick(itemClicked: UnityEditor.IMGUI.Controls.TreeViewItem, keepMultiSelection: boolean): void;
    SetSelection(selectedIDs: number[], revealSelectionAndFrameLastSelected: boolean): void;
    SetSelection(selectedIDs: number[], revealSelectionAndFrameLastSelected: boolean, animatedFraming: boolean): void;
    SetTotalRect(rect: any): void;
    SetUseScrollView(useScrollView: boolean): void;
    SortIDsInVisiblityOrder(ids: number[]): number[];
    UserInputChangedExpandedState(item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, expand: boolean): void;
    readonly animatingExpansion: boolean;
    contextClickItemCallback: ((obj: number) => void);
    contextClickOutsideItemsCallback: (() => void);
    data: UnityEditor.IMGUI.Controls.ITreeViewDataSource;
    deselectOnUnhandledMouseDown: boolean;
    dragEndedCallback: ((arg1: number[], arg2: boolean) => void);
    dragging: UnityEditor.IMGUI.Controls.ITreeViewDragging;
    expandedStateChanged: (() => void);
    readonly expansionAnimator: UnityEditor.IMGUI.Controls.TreeViewItemExpansionAnimator;
    gui: UnityEditor.IMGUI.Controls.ITreeViewGUI;
    horizontalScrollbarStyle: any;
    readonly isDragging: boolean;
    readonly isSearching: boolean;
    itemDoubleClickedCallback: ((obj: number) => void);
    keyboardInputCallback: (() => void);
    onGUIRowCallback: ((arg1: number, arg2: any) => void);
    scrollChanged: ((obj: any) => void);
    searchChanged: ((obj: string) => void);
    searchString: string;
    selectionChangedCallback: ((obj: number[]) => void);
    readonly showingHorizontalScrollBar: boolean;
    readonly showingVerticalScrollBar: boolean;
    state: UnityEditor.IMGUI.Controls.TreeViewState;
    useExpansionAnimation: boolean;
    verticalScrollbarStyle: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeViewDragging {
  class DropData extends System.Object {
    constructor();
    dropTargetControlID: number;
    expandedArrayBeforeDrag: number[];
    expandItemBeginPosition: any;
    expandItemBeginTimer: number;
    lastControlID: number;
    rowMarkerControlID: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeViewDragging {
  class DropPosition extends System.Enum {
    protected constructor();
    static Above: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition;
    static Below: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition;
    static Upon: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition;
    value__: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewItemExpansionAnimator extends System.Object {
    constructor();
    BeginAnimating(setup: UnityEditor.IMGUI.Controls.TreeViewAnimationInput): void;
    CullRow(row: number, gui: UnityEditor.IMGUI.Controls.ITreeViewGUI): boolean;
    IsAnimating(itemID: number): boolean;
    OnAfterAllRowsGUI(): void;
    OnBeforeAllRowsGUI(): void;
    OnBeginRowGUI(row: number, rowRect: any): any;
    OnEndRowGUI(row: number): void;
    OnRowGUI(row: number): void;
    SkipAnimating(): void;
    readonly deltaHeight: number;
    readonly endRow: number;
    readonly expandedValueNormalized: number;
    readonly isAnimating: boolean;
    readonly isExpanding: boolean;
    readonly startRow: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewAnimationInput extends System.Object {
    constructor();
    CaptureTime(): void;
    FireAnimationEndedEvent(): void;
    ToString(): string;
    animationDuration: number;
    elapsedTime: number;
    readonly elapsedTimeNormalized: number;
    endRow: number;
    expanding: boolean;
    includeChildren: boolean;
    item: UnityEditor.IMGUI.Controls.TreeViewItem;
    rowsRect: any;
    startRow: number;
    startRowRect: any;
    startTime: number;
    timeCaptured: number;
    treeView: UnityEditor.IMGUI.Controls.TreeViewController;
    animationEnded: ((obj: UnityEditor.IMGUI.Controls.TreeViewAnimationInput) => void);
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeViewGUI {
  class Styles extends System.Object {
    protected constructor();
    static readonly foldoutWidth: number;
    static content: any;
    static foldout: any;
    static insertion: any;
    static lineBoldStyle: any;
    static lineStyle: any;
    static ping: any;
    static selectionStyle: any;
    static toolbarButton: any;
  }
}
declare namespace UnityEditor {
  class TreeViewGUIWithCustomItemsHeights extends System.Object {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    BeginRowGUI(): void;
    CalculateRowRects(): void;
    EndPingItem(): void;
    EndRename(): void;
    EndRowGUI(): void;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetRectForFraming(row: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    OnInitialize(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    readonly bottomRowMargin: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewItemAlphaNumericSort extends System.Object {
    constructor();
    Compare(lhs: UnityEditor.IMGUI.Controls.TreeViewItem, rhs: UnityEditor.IMGUI.Controls.TreeViewItem): number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewUtility extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class OverriddenMethods extends System.Object {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeView);
    hasBuildRows: boolean;
    hasGetCustomRowHeight: boolean;
    hasGetRenameRect: boolean;
    hasHandleDragAndDrop: boolean;
    hasRowGUI: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class RowGUIArgs extends System.ValueType {
    protected constructor();
    GetCellRect(visibleColumnIndex: number): any;
    GetColumn(visibleColumnIndex: number): number;
    GetNumVisibleColumns(): number;
    focused: boolean;
    isRenaming: boolean;
    item: UnityEditor.IMGUI.Controls.TreeViewItem;
    label: string;
    row: number;
    rowRect: any;
    selected: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs {
  class MultiColumnInfo extends System.ValueType {
    protected constructor();
    cellRects: any[];
    multiColumnHeaderState: UnityEditor.IMGUI.Controls.MultiColumnHeaderState;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DragAndDropArgs extends System.ValueType {
    protected constructor();
    dragAndDropPosition: UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition;
    insertAtIndex: number;
    parentItem: UnityEditor.IMGUI.Controls.TreeViewItem;
    performDrop: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class SetupDragAndDropArgs extends System.ValueType {
    protected constructor();
    draggedItemIDs: number[];
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class CanStartDragArgs extends System.ValueType {
    protected constructor();
    draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem;
    draggedItemIDs: number[];
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class RenameEndedArgs extends System.ValueType {
    protected constructor();
    acceptedRename: boolean;
    itemID: number;
    newName: string;
    originalName: string;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DragAndDropPosition extends System.Enum {
    protected constructor();
    static BetweenItems: UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition;
    static OutsideItems: UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition;
    static UponItem: UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition;
    value__: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class TreeViewControlDataSource extends UnityEditor.IMGUI.Controls.LazyTreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.IMGUI.Controls.TreeView);
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    ReloadData(): void;
    SearchFullTree(search: string, result: UnityEditor.IMGUI.Controls.TreeViewItem[]): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DefaultGUI extends System.Object {
    protected constructor();
    static BoldLabel(rect: any, label: string, selected: boolean, focused: boolean): void;
    static BoldLabelRightAligned(rect: any, label: string, selected: boolean, focused: boolean): void;
    static FoldoutLabel(rect: any, label: string, selected: boolean, focused: boolean): void;
    static Label(rect: any, label: string, selected: boolean, focused: boolean): void;
    static LabelRightAligned(rect: any, label: string, selected: boolean, focused: boolean): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DefaultStyles extends System.Object {
    protected constructor();
    static backgroundEven: any;
    static backgroundOdd: any;
    static boldLabel: any;
    static boldLabelRightAligned: any;
    static foldoutLabel: any;
    static label: any;
    static labelRightAligned: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class TreeViewControlDragging extends UnityEditor.IMGUI.Controls.TreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.IMGUI.Controls.TreeView);
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[], mouseDownPosition: any): boolean;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPosition: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class TreeViewControlGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.IMGUI.Controls.TreeView);
    BeginRowGUI(): void;
    DefaultRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    DoBorder(rect: any): any;
    DrawAlternatingRowBackgrounds(): void;
    EndRowGUI(): void;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetRectForFraming(row: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetTotalSize(): any;
    RefreshRowRects(rows: UnityEditor.IMGUI.Controls.TreeViewItem[]): void;
    cellMargin: number;
    columnIndexForTreeFoldouts: number;
    readonly foldoutWidth: number;
    readonly totalHeight: number;
    borderWidth: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewSelectionOptions extends System.Enum {
    protected constructor();
    static FireSelectionChanged: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions;
    static None: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions;
    static RevealAndFrame: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions;
    value__: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewStateWithColumns extends UnityEditor.IMGUI.Controls.TreeViewState {
    constructor();
    columnWidths: number[];
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewTest extends System.Object {
    constructor(editorWindow: UnityEditor.EditorWindow, lazy: boolean);
    GetNumItemsInData(): number;
    GetNumItemsInTree(): number;
    Init(rect: any, backendData: UnityEditor.TreeViewExamples.BackendData): void;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class BackendData extends System.Object {
    constructor();
    Find(id: number): UnityEditor.TreeViewExamples.BackendData.Foo;
    static FindItemRecursive(item: UnityEditor.TreeViewExamples.BackendData.Foo, id: number): UnityEditor.TreeViewExamples.BackendData.Foo;
    FindRecursive(id: number, parent: UnityEditor.TreeViewExamples.BackendData.Foo): UnityEditor.TreeViewExamples.BackendData.Foo;
    GenerateData(maxNumItems: number): void;
    GetParentsBelow(id: number): any;
    ReparentSelection(parentItem: UnityEditor.TreeViewExamples.BackendData.Foo, insertionIndex: number, draggedItems: UnityEditor.TreeViewExamples.BackendData.Foo[]): void;
    readonly IDCounter: number;
    readonly root: UnityEditor.TreeViewExamples.BackendData.Foo;
    m_RecursiveFindParentsBelow: boolean;
  }
}
declare namespace UnityEditor.TreeViewExamples.BackendData {
  class Foo extends System.Object {
    constructor(name: string, depth: number, id: number);
    children: UnityEditor.TreeViewExamples.BackendData.Foo[];
    depth: number;
    readonly hasChildren: boolean;
    id: number;
    name: string;
    parent: UnityEditor.TreeViewExamples.BackendData.Foo;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewColumnHeader extends System.Object {
    constructor();
    OnGUI(rect: any): void;
    columnRenderer: ((arg1: number, arg2: any) => void);
    columnWidths: number[];
    dragWidth: number;
    minColumnWidth: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, data: UnityEditor.TreeViewExamples.BackendData);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    readonly itemCounter: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestDragging extends UnityEditor.IMGUI.Controls.TreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, data: UnityEditor.TreeViewExamples.BackendData);
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor.TreeViewExamples.TestDragging {
  class FooDragData extends System.Object {
    constructor(draggedItems: UnityEditor.IMGUI.Controls.TreeViewItem[]);
    m_DraggedItems: UnityEditor.IMGUI.Controls.TreeViewItem[];
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class FooTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, foo: UnityEditor.TreeViewExamples.BackendData.Foo);
    readonly foo: UnityEditor.TreeViewExamples.BackendData.Foo;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestGUICustomItemHeights extends UnityEditor.TreeViewGUIWithCustomItemsHeights {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
  }
}
declare namespace UnityEditor.TreeViewExamples.TestGUICustomItemHeights {
  class Styles extends System.Object {
    constructor();
    static foldout: any;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class LazyTestDataSource extends UnityEditor.IMGUI.Controls.LazyTreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, data: UnityEditor.TreeViewExamples.BackendData);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    readonly itemCounter: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewTestWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
  }
}
declare namespace UnityEditor.TreeViewExamples.TreeViewTestWindow {
  class TestType extends System.Enum {
    protected constructor();
    static LargeTreesWithStandardGUI: UnityEditor.TreeViewExamples.TreeViewTestWindow.TestType;
    static TreeWithCustomItemHeight: UnityEditor.TreeViewExamples.TreeViewTestWindow.TestType;
    value__: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewTestWithCustomHeight extends System.Object {
    constructor(editorWindow: UnityEditor.EditorWindow, backendData: UnityEditor.TreeViewExamples.BackendData, rect: any);
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor {
  class IBaseInspectView {
    protected constructor();
    ClearRowSelection(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    SelectRow(index: number): void;
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor {
  class BaseInspectView extends System.Object {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ClearRowSelection(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    SelectRow(index: number): void;
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor.BaseInspectView {
  class Styles extends System.Object {
    protected constructor();
    static centeredLabel: any;
    static emptyViewLabel: any;
    static instructionsLabel: any;
  }
}
declare namespace UnityEditor {
  class GUIClipInspectView extends UnityEditor.BaseInspectView {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor {
  class GUILayoutInspectView extends UnityEditor.BaseInspectView {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor {
  class GUINamedControlInspectView extends UnityEditor.BaseInspectView {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor {
  class GUIPropertyInspectView extends UnityEditor.BaseInspectView {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor {
  class GUIViewDebuggerWindow extends UnityEditor.EditorWindow {
    protected constructor();
    ClearInstructionHighlighter(): void;
    HighlightInstruction(view: UnityEditor.GUIView, instructionRect: any, style: any): void;
    readonly inspected: UnityEditor.GUIView;
    readonly instructionModeView: UnityEditor.IBaseInspectView;
  }
}
declare namespace UnityEditor.GUIViewDebuggerWindow {
  class InstructionType extends System.Enum {
    protected constructor();
    static Clip: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Draw: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Layout: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static NamedControl: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Property: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Unified: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    value__: number;
  }
}
declare namespace UnityEditor.GUIViewDebuggerWindow {
  class Styles extends System.Object {
    protected constructor();
    static boxStyle: any;
    static centeredText: any;
    static contentHighlighterColor: any;
    static defaultWindowPopupText: string;
    static inspectedWindowLabel: any;
    static listBackgroundStyle: any;
    static listItem: any;
    static listItemBackground: any;
    static paddingHighlighterColor: any;
    static stackframeStyle: any;
    static stacktraceBackground: any;
  }
}
declare namespace UnityEditor {
  class StackFrame extends System.ValueType {
    protected constructor();
    lineNumber: number;
    methodName: string;
    moduleName: string;
    signature: string;
    sourceFile: string;
  }
}
declare namespace UnityEditor {
  class GUIStyleHolder extends UnityEngine.ScriptableObject {
    protected constructor();
    inspectedStyle: any;
  }
}
declare namespace UnityEditor {
  class StyleDrawInspectView extends UnityEditor.BaseInspectView {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ClearRowSelection(): void;
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor.StyleDrawInspectView {
  class CachedInstructionInfo extends System.Object {
    constructor();
    styleContainer: UnityEditor.GUIStyleHolder;
    styleContainerSerializedObject: UnityEditor.SerializedObject;
    styleSerializedProperty: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class UnifiedInspectView extends UnityEditor.BaseInspectView {
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    ShowOverlay(): void;
    UpdateInstructions(): void;
  }
}
declare namespace UnityEditor {
  class AnimationClipInfoProperties extends System.Object {
    constructor(prop: UnityEditor.SerializedProperty);
    AddCurve(): void;
    AddEvent(time: number): void;
    AssignToPreviewClip(clip: any): void;
    ClearCurves(): void;
    ClearEvents(): void;
    ExtractFromPreviewClip(clip: any): void;
    GetCurve(index: number): any;
    GetCurveCount(): number;
    GetCurveName(index: number): string;
    GetCurveProperty(index: number): UnityEditor.SerializedProperty;
    GetEvent(index: number): any;
    GetEventCount(): number;
    GetEvents(): any[];
    MaskFromClip(mask: any): void;
    MaskNeedsUpdating(): boolean;
    MaskToClip(mask: any): void;
    RemoveCurve(index: number): void;
    RemoveEvent(index: number): void;
    SetCurve(index: number, curveValue: any): void;
    SetCurveName(index: number, name: string): void;
    SetEvent(index: number, animationEvent: any): void;
    SetEvents(newEvents: any[]): void;
    additiveReferencePoseFrame: number;
    readonly bodyMaskProperty: UnityEditor.SerializedProperty;
    cycleOffset: number;
    firstFrame: number;
    hasAdditiveReferencePose: boolean;
    heightFromFeet: boolean;
    keepOriginalOrientation: boolean;
    keepOriginalPositionXZ: boolean;
    keepOriginalPositionY: boolean;
    lastFrame: number;
    level: number;
    loop: boolean;
    loopBlend: boolean;
    loopBlendOrientation: boolean;
    loopBlendPositionXZ: boolean;
    loopBlendPositionY: boolean;
    loopTime: boolean;
    maskSource: any;
    readonly maskSourceProperty: UnityEditor.SerializedProperty;
    maskType: UnityEditor.ClipAnimationMaskType;
    readonly maskTypeProperty: UnityEditor.SerializedProperty;
    mirror: boolean;
    name: string;
    orientationOffsetY: number;
    takeName: string;
    readonly transformMaskProperty: UnityEditor.SerializedProperty;
    wrapMode: number;
  }
}
declare namespace UnityEditor {
  class AudioImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    CurrentPlatformHasAutoTranslatedCompression(): boolean;
    CurrentSelectionContainsHardwareSounds(): boolean;
    HasModified(): boolean;
    IsHardwareSound(format: any): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
    m_Ambisonic: UnityEditor.SerializedProperty;
    m_CompSize: UnityEditor.SerializedProperty;
    m_ForceToMono: UnityEditor.SerializedProperty;
    m_LoadInBackground: UnityEditor.SerializedProperty;
    m_Normalize: UnityEditor.SerializedProperty;
    m_OrigSize: UnityEditor.SerializedProperty;
    m_PreloadAudioData: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class Styles extends System.Object {
    protected constructor();
    static kSampleRateStrings: string[];
    static kSampleRateValues: number[];
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class MultiValueStatus extends System.ValueType {
    protected constructor();
    multiCompressionFormat: boolean;
    multiConversionMode: boolean;
    multiLoadType: boolean;
    multiQuality: boolean;
    multiSampleRateOverride: boolean;
    multiSampleRateSetting: boolean;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class SampleSettingProperties extends System.ValueType {
    protected constructor();
    ClearChangedFlags(): void;
    HasModified(): boolean;
    compressionFormatChanged: boolean;
    conversionModeChanged: boolean;
    forcedOverrideState: boolean;
    loadTypeChanged: boolean;
    overrideIsForced: boolean;
    qualityChanged: boolean;
    sampleRateOverrideChanged: boolean;
    sampleRateSettingChanged: boolean;
    settings: UnityEditor.AudioImporterSampleSettings;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class OverrideStatus extends System.Enum {
    protected constructor();
    static AllOverrides: UnityEditor.AudioImporterInspector.OverrideStatus;
    static MixedOverrides: UnityEditor.AudioImporterInspector.OverrideStatus;
    static NoOverrides: UnityEditor.AudioImporterInspector.OverrideStatus;
    value__: number;
  }
}
declare namespace UnityEditor {
  class DesktopPluginImporterExtension extends UnityEditor.Modules.DefaultPluginImporterExtension {
    constructor();
    CalculateFinalPluginPath(platformName: string, imp: UnityEditor.PluginImporter): string;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    ValidateSingleCPUTargets(inspector: UnityEditor.PluginImporterInspector): void;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultPluginImporterExtension extends System.Object {
    constructor(properties: UnityEditor.Modules.DefaultPluginImporterExtension.Property[]);
    Apply(inspector: UnityEditor.PluginImporterInspector): void;
    CalculateFinalPluginPath(platformName: string, imp: UnityEditor.PluginImporter): string;
    CheckFileCollisions(buildTargetName: string): boolean;
    HasModified(inspector: UnityEditor.PluginImporterInspector): boolean;
    OnDisable(inspector: UnityEditor.PluginImporterInspector): void;
    OnEnable(inspector: UnityEditor.PluginImporterInspector): void;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    ResetValues(inspector: UnityEditor.PluginImporterInspector): void;
  }
}
declare namespace UnityEditor.DesktopPluginImporterExtension {
  class DesktopPluginCPUArchitecture extends System.Enum {
    protected constructor();
    static AnyCPU: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
    static None: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
    value__: number;
    static x86: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
    static x86_64: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
  }
}
declare namespace UnityEditor.DesktopPluginImporterExtension {
  class DesktopSingleCPUProperty extends UnityEditor.Modules.DefaultPluginImporterExtension.Property {
    constructor(name: any, platformName: string);
    constructor(name: any, platformName: string, architecture: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture);
  }
}
declare namespace UnityEditor.Modules.DefaultPluginImporterExtension {
  class Property extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class EditorPluginImporterExtension extends UnityEditor.Modules.DefaultPluginImporterExtension {
    constructor();
  }
}
declare namespace UnityEditor.EditorPluginImporterExtension {
  class EditorPluginCPUArchitecture extends System.Enum {
    protected constructor();
    static AnyCPU: UnityEditor.EditorPluginImporterExtension.EditorPluginCPUArchitecture;
    value__: number;
    static x86: UnityEditor.EditorPluginImporterExtension.EditorPluginCPUArchitecture;
    static x86_64: UnityEditor.EditorPluginImporterExtension.EditorPluginCPUArchitecture;
  }
}
declare namespace UnityEditor.EditorPluginImporterExtension {
  class EditorPluginOSArchitecture extends System.Enum {
    protected constructor();
    static AnyOS: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
    static Linux: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
    static OSX: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
    value__: number;
    static Windows: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
  }
}
declare namespace UnityEditor.EditorPluginImporterExtension {
  class EditorProperty extends UnityEditor.Modules.DefaultPluginImporterExtension.Property {
    constructor(name: any, key: string, defaultValue: any);
  }
}
declare namespace UnityEditor {
  class ExposeTransformEditor extends System.Object {
    constructor();
    OnEnable(transformPaths: string[], serializedObject: UnityEditor.SerializedObject): void;
    OnGUI(): void;
  }
}
declare namespace UnityEditor {
  class IHVImageFormatImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    IsReadableGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    TextureSettingsGUI(): void;
    readonly showImportedObject: boolean;
  }
}
declare namespace UnityEditor.IHVImageFormatImporterInspector {
  class Styles extends System.Object {
    constructor();
    static filterMode: any;
    static filterModeOptions: any[];
    static filterModeValues: number[];
    static readWrite: any;
    static wrapMode: any;
  }
}
declare namespace UnityEditor {
  class ModelImporterClipEditor extends UnityEditor.BaseAssetImporterTabUI {
    constructor(panelContainer: UnityEditor.Experimental.AssetImporters.AssetImporterEditor);
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    motionNodeIndex: number;
    pivotNodeIndex: number;
    selectedClipIndex: number;
    m_SelectedClipIndexDoNotUseDirectly: number;
  }
}
declare namespace UnityEditor.ModelImporterClipEditor {
  class Styles extends System.Object {
    constructor();
    AnimationCompressionHelp: any;
    AnimCompressionLabel: any;
    AnimCompressionOpt: any[];
    AnimCompressionOptLegacy: any[];
    AnimPositionErrorLabel: any;
    AnimRotationErrorLabel: any;
    AnimScaleErrorLabel: any;
    AnimWrapModeLabel: any;
    AnimWrapModeOpt: any[];
    BakeIK: any;
    clipMultiEditInfo: any;
    GenerateRetargetingWarnings: any;
    ImportAnimatedCustomProperties: any;
    ImportAnimations: any;
    ImportMessages: any;
    Mask: any;
    MotionNode: any;
    MotionSetting: any;
    numberStyle: any;
    ResampleCurves: any;
    updateMuscleDefinitionFromSource: any;
  }
}
declare namespace UnityEditor {
  class ModelImporterMaterialEditor extends UnityEditor.BaseAssetImporterTabUI {
    constructor(panelContainer: UnityEditor.Experimental.AssetImporters.AssetImporterEditor);
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.ModelImporterMaterialEditor {
  class Styles extends System.Object {
    constructor();
    AutoMapExternalMaterials: any;
    ExternalMaterialHelpEnd: any;
    ExternalMaterialHelpStart: any;
    ExternalMaterialMappings: any;
    ExternalMaterialNameHelp: any[];
    ExternalMaterialSearchHelp: any[];
    ExtractEmbeddedMaterials: any;
    ExtractEmbeddedTextures: any;
    ImportMaterials: any;
    InternalMaterialHelp: any;
    MaterialAssignmentsHelp: any;
    MaterialLocation: any;
    MaterialLocationOpt: any[];
    MaterialName: any;
    MaterialNameOptAll: any[];
    MaterialNameOptMain: any[];
    Materials: any;
    MaterialSearch: any;
    MaterialSearchOpt: any[];
    NoMaterialHelp: any;
    NoMaterialMappingsHelp: any;
    Textures: any;
  }
}
declare namespace UnityEditor.ModelImporterModelEditor {
  class Styles extends System.Object {
    constructor();
    FileScaleFactor: any;
    GenerateColliders: any;
    GenerateSecondaryUV: any;
    GenerateSecondaryUVAdvanced: any;
    ImportBlendShapes: any;
    ImportCameras: any;
    ImportLights: any;
    ImportVisibility: any;
    IsReadable: any;
    KeepQuads: any;
    MeshCompressionLabel: any;
    MeshCompressionOpt: any[];
    Meshes: any;
    NormalModeLabelsAll: any[];
    NormalOptionCalculate: any;
    NormalOptionImport: any;
    NormalOptionNone: any;
    OptimizeMeshForGPU: any;
    RecalculateNormalsLabel: any;
    RecalculateNormalsOpt: any[];
    ScaleFactor: any;
    secondaryUVAngleDistortion: any;
    secondaryUVAreaDistortion: any;
    secondaryUVDefaults: any;
    secondaryUVHardAngle: any;
    secondaryUVPackMargin: any;
    SmoothingAngle: any;
    SwapUVChannels: any;
    TangentSpace: any;
    TangentSpaceModeOptEnumsAll: UnityEditor.ModelImporterTangents[];
    TangentSpaceModeOptEnumsCalculate: UnityEditor.ModelImporterTangents[];
    TangentSpaceModeOptEnumsNone: UnityEditor.ModelImporterTangents[];
    TangentSpaceModeOptLabelsAll: any[];
    TangentSpaceModeOptLabelsCalculate: any[];
    TangentSpaceModeOptLabelsNone: any[];
    TangentSpaceNormalLabel: any;
    TangentSpaceOptionCalculate: any;
    TangentSpaceOptionCalculateLegacy: any;
    TangentSpaceOptionCalculateLegacySplit: any;
    TangentSpaceOptionImport: any;
    TangentSpaceOptionNone: any;
    TangentSpaceOptionNoneNoNormals: any;
    TangentSpaceTangentLabel: any;
    UseFileScale: any;
    UseFileUnits: any;
    WeldVertices: any;
  }
}
declare namespace UnityEditor {
  class ModelImporterRigEditor extends UnityEditor.BaseAssetImporterTabUI {
    constructor(panelContainer: UnityEditor.Experimental.AssetImporters.AssetImporterEditor);
    OnInspectorGUI(): void;
    readonly isLocked: boolean;
    rootIndex: number;
    m_SelectedClipIndex: number;
  }
}
declare namespace UnityEditor.ModelImporterRigEditor {
  class Styles extends System.Object {
    constructor();
    AnimationsOpt: any[];
    AnimationType: any;
    AnimationTypeOpt: any[];
    AnimLabel: any;
    avatar: any;
    AvatarDefinition: any;
    AvatarDefinitionOpt: any[];
    avatarInvalid: any;
    avatarPending: any;
    avatarValid: any;
    configureAvatar: any;
    helpText: any;
    ImportMessages: any;
    RootNode: any;
    UpdateMuscleDefinitionFromSource: any;
    UpdateReferenceClips: any;
  }
}
declare namespace UnityEditor.ModelImporterRigEditor {
  class MappingRelevantSettings extends System.ValueType {
    protected constructor();
    readonly usesOwnAvatar: boolean;
    copyAvatar: boolean;
    hasNoAnimation: boolean;
    humanoid: boolean;
  }
}
declare namespace UnityEditor {
  class MovieImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    HasModified(): boolean;
    OnInspectorGUI(): void;
    readonly showImportedObject: boolean;
    static linearTextureContent: any;
  }
}
  class PatchImportSettingRecycleID extends System.Object {
    constructor();
    static Patch(serializedObject: UnityEditor.SerializedObject, classID: number, oldName: string, newName: string): void;
    static PatchMultiple(serializedObject: UnityEditor.SerializedObject, classID: number, oldNames: string[], newNames: string[]): void;
  }
declare namespace UnityEditor {
  class PluginImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    HasModified(): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
    readonly showImportedObject: boolean;
  }
}
declare namespace UnityEditor.PluginImporterInspector {
  class Compatibility extends System.Enum {
    protected constructor();
    static Compatible: UnityEditor.PluginImporterInspector.Compatibility;
    static Mixed: UnityEditor.PluginImporterInspector.Compatibility;
    static NotCompatible: UnityEditor.PluginImporterInspector.Compatibility;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.AssetImporters {
  class ScriptedImporterEditor extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class SpeedTreeImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    CanUnifyLODConfig(): boolean;
    HasSameLODConfig(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.SpeedTreeImporterInspector {
  class Styles extends System.Object {
    constructor();
    static AlphaTestRef: any;
    static AnimateCrossFading: any;
    static ApplyAndGenerate: any;
    static CastShadows: any;
    static CrossFadeWidth: any;
    static EnableBump: any;
    static EnableHue: any;
    static FadeOutWidth: any;
    static HueVariation: any;
    static LODHeader: any;
    static MainColor: any;
    static MaterialsHeader: any;
    static MeshesHeader: any;
    static ReceiveShadows: any;
    static Regenerate: any;
    static ResetLOD: any;
    static ScaleFactor: any;
    static ScaleFactorHelp: any;
    static SmoothLOD: any;
    static UseLightProbes: any;
    static UseReflectionProbes: any;
    static WindQuality: any;
  }
}
declare namespace UnityEditor {
  class SubstanceImporterInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    InstanciatePrototype(prototypeName: any): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(position: any, style: any): void;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    lightMode: number;
    previewDir: any;
    selectedMesh: number;
  }
}
declare namespace UnityEditor.SubstanceImporterInspector {
  class SubstanceStyles extends System.Object {
    constructor();
    background: any;
    gridBackground: any;
    iconDuplicate: any;
    iconToolbarMinus: any;
    iconToolbarPlus: any;
    resultsGrid: any;
    resultsGridLabel: any;
    toolbar: any;
    toolbarButton: any;
    toolbarDropDown: any;
  }
}
declare namespace UnityEditor.SubstanceImporterInspector {
  class SubstanceNameComparer extends System.Object {
    constructor();
    Compare(o1: any, o2: any): number;
  }
}
declare namespace UnityEditor {
  class TextureImporterCubemapConvolution extends System.Enum {
    protected constructor();
    static Diffuse: UnityEditor.TextureImporterCubemapConvolution;
    static None: UnityEditor.TextureImporterCubemapConvolution;
    static Specular: UnityEditor.TextureImporterCubemapConvolution;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterRGBMMode extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.TextureImporterRGBMMode;
    static Encoded: UnityEditor.TextureImporterRGBMMode;
    static Off: UnityEditor.TextureImporterRGBMMode;
    static On: UnityEditor.TextureImporterRGBMMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TextureImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    BuildTargetList(): void;
    static GetBuildPlayerValidPlatforms(): UnityEditor.Build.BuildPlatform[];
    HasModified(): boolean;
    static IsCompressedDXTTextureFormat(format: UnityEditor.TextureImporterFormat): boolean;
    OnDisable(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    static SelectMainAssets(targets: UnityEngine.Object[]): void;
    readonly showImportedObject: boolean;
    static s_DefaultPlatformName: string;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class TextureInspectorGUIElement extends System.Enum {
    protected constructor();
    static AlphaHandling: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static ColorSpace: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static Cookie: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static CubeMapConvolution: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static CubeMapping: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static MipMaps: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static None: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static NormalMap: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static PowerOfTwo: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static Readable: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static Sprite: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    value__: number;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class TextureInspectorTypeGUIProperties extends System.ValueType {
    protected constructor();
    advancedElements: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    commonElements: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    shapeCaps: UnityEditor.TextureImporterShape;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class CookieMode extends System.Enum {
    protected constructor();
    static Directional: UnityEditor.TextureImporterInspector.CookieMode;
    static Point: UnityEditor.TextureImporterInspector.CookieMode;
    static Spot: UnityEditor.TextureImporterInspector.CookieMode;
    value__: number;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class Styles extends System.Object {
    constructor();
    alphaIsTransparency: any;
    alphaSource: any;
    alphaSourceOptions: any[];
    alphaSourceValues: number[];
    alphaTestReferenceValue: any;
    borderMipMaps: any;
    bumpFiltering: any;
    bumpFilteringOptions: any[];
    bumpiness: any;
    compressionQuality: any;
    compressionQualitySlider: any;
    cookieOptions: any[];
    cookieType: any;
    crunchedCompression: any;
    cubemap: any;
    cubemapConvolution: any;
    cubemapConvolutionOptions: any[];
    cubemapConvolutionValues: number[];
    cubemapOptions: any[];
    cubemapValues2: number[];
    defaultPlatform: any;
    etc1Compression: any;
    filterMode: any;
    filterModeOptions: any[];
    generateCubemap: any;
    generateFromBump: any;
    generateMipMaps: any;
    mipmapFadeOut: any;
    mipmapFadeOutToggle: any;
    mipMapFilter: any;
    mipMapFilterOptions: any[];
    mipMapsPreserveCoverage: any;
    mobileCompressionQualityOptions: any[];
    npot: any;
    readWrite: any;
    seamlessCubemap: any;
    showAdvanced: any;
    spriteAlignment: any;
    spriteAlignmentOptions: any[];
    spriteExtrude: any;
    spriteMeshType: any;
    spriteMeshTypeOptions: any[];
    spriteMode: any;
    spriteModeOptions: any[];
    spritePackingTag: any;
    spritePixelsPerUnit: any;
    sRGBTexture: any;
    textureFormat: any;
    textureShape: any;
    textureShapeOptionsDictionnary: any;
    textureShapeValuesDictionnary: any;
    textureTypeOptions: any[];
    textureTypeTitle: any;
    textureTypeValues: number[];
  }
}
declare namespace UnityEditor {
  class TextureImportPlatformSettings extends System.Object {
    constructor(name: string, target: UnityEditor.BuildTarget, inspector: UnityEditor.TextureImporterInspector);
    Apply(): void;
    GetSettings(importer: UnityEditor.TextureImporter): UnityEditor.TextureImporterSettings;
    HasChanged(): boolean;
    SetAllowsAlphaSplitForAll(value: boolean): void;
    SetChanged(): void;
    SetCompressionQualityForAll(quality: number): void;
    SetCrunchedCompressionForAll(crunched: boolean): void;
    SetMaxTextureSizeForAll(maxTextureSize: number): void;
    SetOverriddenForAll(overridden: boolean): void;
    SetResizeAlgorithmForAll(algorithm: UnityEditor.TextureResizeAlgorithm): void;
    SetTextureCompressionForAll(textureCompression: UnityEditor.TextureImporterCompression): void;
    SetTextureFormatForAll(format: UnityEditor.TextureImporterFormat): void;
    SupportsFormat(format: UnityEditor.TextureImporterFormat, importer: UnityEditor.TextureImporter): boolean;
    Sync(): void;
    readonly allAreOverridden: boolean;
    readonly allowsAlphaSplitIsDifferent: boolean;
    readonly allowsAlphaSplitting: boolean;
    readonly compressionQuality: number;
    readonly compressionQualityIsDifferent: boolean;
    readonly crunchedCompression: boolean;
    readonly crunchedCompressionIsDifferent: boolean;
    readonly format: UnityEditor.TextureImporterFormat;
    readonly importers: UnityEditor.TextureImporter[];
    readonly isDefault: boolean;
    readonly maxTextureSize: number;
    readonly maxTextureSizeIsDifferent: boolean;
    readonly name: string;
    readonly overridden: boolean;
    readonly overriddenIsDifferent: boolean;
    readonly platformTextureSettings: UnityEditor.TextureImporterPlatformSettings;
    readonly resizeAlgorithm: UnityEditor.TextureResizeAlgorithm;
    readonly resizeAlgorithmIsDifferent: boolean;
    readonly textureCompression: UnityEditor.TextureImporterCompression;
    readonly textureCompressionIsDifferent: boolean;
    readonly textureFormatIsDifferent: boolean;
    static kNormalFormatsValueDefault: number[];
    static kTextureFormatsValueAndroid: number[];
    static kTextureFormatsValueApplePVR: number[];
    static kTextureFormatsValueDefault: number[];
    static kTextureFormatsValueSingleChannel: number[];
    static kTextureFormatsValueSTV: number[];
    static kTextureFormatsValueTizen: number[];
    static kTextureFormatsValueWebGL: number[];
    static kTextureFormatsValueWiiU: number[];
    m_Target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor {
  class TrueTypeFontImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class VideoClipImporterSourcePreview extends UnityEditor.ObjectPreview {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor {
  class ObjectPreview extends System.Object {
    constructor();
    DrawPreview(previewArea: any): void;
    GetInfoString(): string;
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    MoveNextTarget(): boolean;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    ResetTarget(): void;
    readonly target: UnityEngine.Object;
  }
}
declare namespace UnityEditor.VideoClipImporterSourcePreview {
  class Styles extends System.Object {
    constructor();
    labelStyle: any;
  }
}
declare namespace UnityEditor {
  class VideoClipImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    GetPreviewTitle(): any;
    HasModified(): boolean;
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    readonly showImportedObject: boolean;
  }
}
declare namespace UnityEditor.VideoClipImporterInspector {
  class MultiTargetSettingState extends System.ValueType {
    protected constructor();
    Init(): void;
    firstAspectRatio: UnityEditor.VideoEncodeAspectRatio;
    firstBitrateMode: UnityEditor.VideoBitrateMode;
    firstCodec: UnityEditor.VideoCodec;
    firstCustomHeight: number;
    firstCustomWidth: number;
    firstResizeMode: UnityEditor.VideoResizeMode;
    firstSpatialQuality: UnityEditor.VideoSpatialQuality;
    firstTranscoding: boolean;
    mixedAspectRatio: boolean;
    mixedBitrateMode: boolean;
    mixedCodec: boolean;
    mixedCustomHeight: boolean;
    mixedCustomWidth: boolean;
    mixedResizeMode: boolean;
    mixedSpatialQuality: boolean;
    mixedTranscoding: boolean;
  }
}
declare namespace UnityEditor.VideoClipImporterInspector {
  class InspectorTargetSettings extends System.Object {
    constructor();
    overridePlatform: boolean;
    settings: UnityEditor.VideoImporterTargetSettings;
  }
}
declare namespace UnityEditor.VideoClipImporterInspector {
  class Styles extends System.Object {
    constructor();
    aspectRatioContent: any;
    bitrateContent: any;
    codecContent: any;
    deinterlaceContent: any;
    dimensionsContent: any;
    flipHorizontalContent: any;
    flipVerticalContent: any;
    heightContent: any;
    importAudioContent: any;
    importerVersionContent: any;
    importerVersionOptions: any[];
    keepAlphaContent: any;
    playIcons: any[];
    spatialQualityContent: any;
    transcodeContent: any;
    transcodeWarning: any;
    widthContent: any;
  }
}
declare namespace UnityEditor {
  class AddComponentWindow extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class Language extends System.Enum {
    protected constructor();
    static CSharp: UnityEditor.AddComponentWindow.Language;
    value__: number;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class Element extends System.Object {
    constructor();
    CompareTo(o: any): number;
    readonly name: string;
    content: any;
    level: number;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class ComponentElement extends UnityEditor.AddComponentWindow.Element {
    constructor(level: number, name: string, menuPath: string, commandString: string);
    CompareTo(o: any): number;
    readonly legacyContent: any;
    isLegacy: boolean;
    menuPath: string;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class GroupElement extends UnityEditor.AddComponentWindow.Element {
    constructor(level: number, name: string);
    scroll: any;
    selectedIndex: number;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class NewScriptElement extends UnityEditor.AddComponentWindow.GroupElement {
    constructor();
    CanCreate(): boolean;
    Create(): void;
    OnGUI(): void;
    TargetPath(): string;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class AnalyticsEventData extends System.Object {
    constructor();
    filter: string;
    isNewScript: boolean;
    name: string;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class Styles extends System.Object {
    constructor();
    background: any;
    componentButton: any;
    groupButton: any;
    header: any;
    leftArrow: any;
    previewHeader: any;
    previewText: any;
    rightArrow: any;
  }
}
declare namespace UnityEditor {
  class AnchoredJoint2DEditor extends UnityEditor.Joint2DEditor {
    constructor();
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class Joint2DEditor extends UnityEditor.Editor {
    constructor();
    static AnchorHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static ConnectedAnchorHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DrawAALine(start: any, end: any): void;
    static DrawDistanceGizmo(anchor: any, connectedAnchor: any, distance: number): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AnimationClipEditor extends UnityEditor.Editor {
    constructor();
    ClipRangeGUI(startFrame: any, stopFrame: any, changedStart: any, changedStop: any, showAdditivePoseFrame: boolean, additivePoseframe: any, changedAdditivePoseframe: any): void;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ShowRange(info: UnityEditor.AnimationClipInfoProperties): void;
    mask: any;
    needsToGenerateClipInfo: boolean;
    takeIndex: number;
    takeNames: string[];
    static s_EventTimelineMax: number;
  }
}
declare namespace UnityEditor.AnimationClipEditor {
  class Styles extends System.Object {
    protected constructor();
    static AddEventContent: any;
    static AdditiveReferencePoseFrame: any;
    static AddKeyframeContent: any;
    static BakeIntoPoseOrientation: any;
    static BakeIntoPosePositionXZ: any;
    static BakeIntoPosePositionY: any;
    static BasedUponOrientation: any;
    static BasedUponPositionXZ: any;
    static BasedUponPositionXZHumanOpt: any[];
    static BasedUponPositionXZOpt: any[];
    static BasedUponPositionY: any;
    static BasedUponPositionYHumanOpt: any[];
    static BasedUponPositionYOpt: any[];
    static BasedUponRotationHumanOpt: any[];
    static BasedUponRotationOpt: any[];
    static BasedUponStartOrientation: any;
    static BasedUponStartPositionXZ: any;
    static BasedUponStartPositionY: any;
    static Curves: any;
    static EndFrame: any;
    static GreenLightIcon: any;
    static HasAdditiveReferencePose: any;
    static LightRimIcon: any;
    static LoopCycleOffset: any;
    static LoopPose: any;
    static LoopTime: any;
    static Mirror: any;
    static MotionCurves: any;
    static NextKeyContent: any;
    static OrangeLightIcon: any;
    static OrientationOffsetY: any;
    static PositionOffsetY: any;
    static PrevKeyContent: any;
    static RedLightIcon: any;
    static StartFrame: any;
  }
}
declare namespace UnityEditor {
  class EventManipulationHandler extends System.Object {
    constructor(timeArea: UnityEditor.TimeArea);
    DeleteEvents(eventList: any, deleteIndices: boolean[]): boolean;
    Draw(window: any): void;
    EditEvents(clipInfo: UnityEditor.AnimationClipInfoProperties, selectedIndices: boolean[]): void;
    EventLineContextMenuAdd(obj: any): void;
    EventLineContextMenuDelete(obj: any): void;
    HandleEventManipulation(rect: any, events: any, clipInfo: UnityEditor.AnimationClipInfoProperties): boolean;
    SelectEvent(events: any[], index: number, clipInfo: UnityEditor.AnimationClipInfoProperties): void;
    UpdateEvents(clipInfo: UnityEditor.AnimationClipInfoProperties): void;
  }
}
declare namespace UnityEditor.EventManipulationHandler {
  class EventModificationContextMenuObject extends System.Object {
    constructor(info: UnityEditor.AnimationClipInfoProperties, time: number, index: number, selected: boolean[]);
    m_Index: number;
    m_Info: UnityEditor.AnimationClipInfoProperties;
    m_Selected: boolean[];
    m_Time: number;
  }
}
declare namespace UnityEditor {
  class AnimationEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AnimatorInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.AnimatorInspector {
  class Styles extends System.Object {
    constructor();
    applyRootMotion: any;
    cullingMode: any;
    updateMode: any;
  }
}
declare namespace UnityEditor {
  class AnimationClipOverrideComparer extends System.Object {
    constructor();
    Compare(x: any, y: any): number;
  }
}
declare namespace UnityEditor {
  class AnimatorOverrideControllerInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AreaEffector2DEditor extends UnityEditor.Effector2DEditor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class Effector2DEditor extends UnityEditor.Editor {
    constructor();
    static CheckEffectorWarnings(collider: any): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AssetBundleNameGUI extends System.Object {
    constructor();
    OnAssetBundleNameGUI(assets: any): void;
  }
}
declare namespace UnityEditor.AssetBundleNameGUI {
  class Styles extends System.Object {
    constructor();
    static cursorColor: any;
    static label: any;
    static popup: any;
    static textField: any;
  }
}
declare namespace UnityEditor {
  class AssetStoreAssetInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    OnDownloadProgress(id: string, message: string, bytes: number, total: number): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    static OpenItemInAssetStore(activeAsset: UnityEditor.AssetStoreAsset): void;
    Update(): void;
    static readonly Instance: UnityEditor.AssetStoreAssetInspector;
    static OfflineNoticeEnabled: boolean;
  }
}
declare namespace UnityEditor.AssetStoreAssetInspector {
  class Styles extends System.Object {
    constructor();
    link: any;
  }
}
declare namespace UnityEditor.AssetStoreAssetInspector {
  class PaymentAvailability extends System.Enum {
    protected constructor();
    static AnonymousUser: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    static BasketNotEmpty: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    static Ok: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    static ServiceDisabled: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AudioChorusFilterEditor extends UnityEditor.Editor {
    constructor();
  }
}
declare namespace UnityEditor {
  class AudioClipInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
  }
}
declare namespace UnityEditor {
  class AudioDistortionFilterEditor extends UnityEditor.Editor {
    constructor();
  }
}
declare namespace UnityEditor {
  class AudioEchoFilterEditor extends UnityEditor.Editor {
    constructor();
  }
}
declare namespace UnityEditor {
  class AudioExtensionEditor extends UnityEngine.ScriptableObject {
    constructor();
    FindAudioExtensionProperties(serializedObject: UnityEditor.SerializedObject): boolean;
    GetExtensionPropertyDefaultValue(index: number): number;
    GetExtensionPropertyName(index: number): any;
    GetNumExtensionProperties(): number;
    InitExtensionPropertyInfo(): void;
    OnEnable(): void;
  }
}
declare namespace UnityEditor.AudioExtensionEditor {
  class ExtensionPropertyInfo extends System.ValueType {
    protected constructor();
    defaultValue: number;
    propertyName: any;
    serializedProperty: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class AudioFilterGUI extends System.Object {
    constructor();
    DrawAudioFilterGUI(behaviour: UnityEngine.MonoBehaviour): void;
  }
}
declare namespace UnityEditor {
  class AudioHighPassFilterEditor extends UnityEditor.Editor {
    constructor();
  }
}
declare namespace UnityEditor {
  class AudioListenerExtensionEditor extends UnityEditor.AudioExtensionEditor {
    constructor();
    OnAudioListenerGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioListenerInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioLowPassFilterInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioManagerInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.AudioManagerInspector {
  class Styles extends System.Object {
    constructor();
    static AmbisonicDecoderPlugin: any;
    static DefaultSpeakerMode: any;
    static DisableAudio: any;
    static DopplerFactor: any;
    static DSPBufferSize: any;
    static RealVoiceCount: any;
    static RolloffScale: any;
    static SampleRate: any;
    static SpatializerPlugin: any;
    static VirtualizeEffects: any;
    static VirtualVoiceCount: any;
    static Volume: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerControllerInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.AudioMixerControllerInspector {
  class Texts extends System.Object {
    protected constructor();
    static dB: string;
    static m_EnableSuspendLabel: any;
    static m_SuspendThresholdLabel: any;
    static m_UpdateModeLabel: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
    Update(): void;
    UseDefaultMargins(): boolean;
    static kPrefKeyForShowCpuUsage: string;
  }
}
declare namespace UnityEditor {
  class AudioMixerSnapshotControllerInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioReverbFilterEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioReverbZoneEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AudioSourceExtensionEditor extends UnityEditor.AudioExtensionEditor {
    constructor();
    OnAudioSourceGUI(): void;
    OnAudioSourceSceneGUI(source: any): void;
  }
}
declare namespace UnityEditor {
  class AudioSourceInspector extends UnityEditor.Editor {
    constructor();
    GetAxisScalars(): any;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.AudioSourceInspector {
  class AudioCurveWrapper extends System.Object {
    constructor(type: UnityEditor.AudioSourceInspector.AudioCurveType, legend: string, id: number, color: any, curveProp: UnityEditor.SerializedProperty, rangeMin: number, rangeMax: number);
    color: any;
    curveProp: UnityEditor.SerializedProperty;
    id: number;
    legend: any;
    rangeMax: number;
    rangeMin: number;
    type: UnityEditor.AudioSourceInspector.AudioCurveType;
  }
}
declare namespace UnityEditor.AudioSourceInspector {
  class AudioCurveType extends System.Enum {
    protected constructor();
    static Lowpass: UnityEditor.AudioSourceInspector.AudioCurveType;
    static ReverbZoneMix: UnityEditor.AudioSourceInspector.AudioCurveType;
    static SpatialBlend: UnityEditor.AudioSourceInspector.AudioCurveType;
    static Spread: UnityEditor.AudioSourceInspector.AudioCurveType;
    value__: number;
    static Volume: UnityEditor.AudioSourceInspector.AudioCurveType;
  }
}
declare namespace UnityEditor.AudioSourceInspector {
  class Styles extends System.Object {
    constructor();
    addSpatializerExtensionLabel: any;
    audioClipLabel: any;
    controlledByCurveLabel: string;
    dopplerLevelLabel: any;
    labelStyle: any;
    outputMixerGroupLabel: any;
    panLeftLabel: any;
    panRightLabel: any;
    panStereoLabel: any;
    pitchLabel: any;
    priorityLabel: any;
    priorityLeftLabel: any;
    priorityRightLabel: any;
    reverbZoneMixLabel: any;
    rolloffLabel: any;
    spatialBlendLabel: any;
    spatializeLabel: any;
    spatializePostEffectsLabel: any;
    spatialLeftLabel: any;
    spatialRightLabel: any;
    spreadLabel: any;
    volumeLabel: any;
  }
}
declare namespace UnityEditor {
  class BodyMaskEditor extends System.Object {
    constructor();
    static Show(bodyMask: UnityEditor.SerializedProperty, count: number): void;
  }
}
declare namespace UnityEditor.BodyMaskEditor {
  class Styles extends System.Object {
    constructor();
    BodyPart: any[];
    PickingTexture: any;
    UnityDude: any;
  }
}
declare namespace UnityEditor {
  class AvatarMaskInspector extends UnityEditor.Editor {
    constructor();
    FillNodeInfos(): void;
    IsMaskEmpty(): boolean;
    IsMaskUpToDate(): boolean;
    OnBodyInspectorGUI(): void;
    OnInspectorGUI(): void;
    OnTransformInspectorGUI(): void;
    canImport: boolean;
    clipInfo: UnityEditor.AnimationClipInfoProperties;
    readonly humanTransforms: string[];
    showBody: boolean;
  }
}
declare namespace UnityEditor.AvatarMaskInspector {
  class Styles extends System.Object {
    protected constructor();
    static BodyMask: any;
    static foldoutStyle: any;
    static labelStyle: any;
    static MaskDefinition: any;
    static MaskDefinitionOpt: any[];
    static TransformMask: any;
  }
}
declare namespace UnityEditor.AvatarMaskInspector {
  class NodeInfo extends System.ValueType {
    protected constructor();
    m_ChildIndices: number[];
    m_Depth: number;
    m_Expanded: boolean;
    m_Name: string;
    m_ParentIndex: number;
    m_Path: UnityEditor.SerializedProperty;
    m_Show: boolean;
    m_State: UnityEditor.AvatarMaskInspector.NodeInfo.State;
    m_Weight: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor.AvatarMaskInspector.NodeInfo {
  class State extends System.Enum {
    protected constructor();
    static disabled: UnityEditor.AvatarMaskInspector.NodeInfo.State;
    static enabled: UnityEditor.AvatarMaskInspector.NodeInfo.State;
    static invalid: UnityEditor.AvatarMaskInspector.NodeInfo.State;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AvatarMaskUtility extends System.Object {
    constructor();
    static GetAvatarHumanAndActiveExtraTransforms(so: UnityEditor.SerializedObject, transformMaskProperty: UnityEditor.SerializedProperty, refTransformsPath: string[]): string[];
    static GetAvatarHumanTransform(so: UnityEditor.SerializedObject, refTransformsPath: string[]): string[];
    static GetAvatarInactiveTransformMaskPaths(transformMaskProperty: UnityEditor.SerializedProperty): string[];
    static SetActiveHumanTransforms(mask: any, humanTransforms: string[]): void;
    static UpdateTransformMask(transformMask: UnityEditor.SerializedProperty, refTransformsPath: string[], currentPaths: string[], areActivePaths?: boolean): void;
    static UpdateTransformMask(mask: any, refTransformsPath: string[], humanTransforms: string[]): void;
  }
}
declare namespace UnityEditor {
  class AvatarPreview extends System.Object {
    constructor(previewObjectInScene: any, objectOnSameAsset: UnityEngine.Motion);
    AvatarTimeControlGUI(rect: any): void;
    DoAvatarPreview(rect: any, background: any): void;
    DoAvatarPreviewDrag(type: any): void;
    DoAvatarPreviewFrame(evt: any, type: any, previewRect: any): void;
    DoAvatarPreviewOrbit(evt: any, previewRect: any): void;
    DoAvatarPreviewPan(evt: any): void;
    DoAvatarPreviewZoom(evt: any, delta: number): void;
    DoPreviewSettings(): void;
    DoRenderPreview(previewRect: any, background: any): void;
    DoSelectionChange(): void;
    static FindBestFittingRenderableGameObjectFromModelAsset(asset: UnityEngine.Object, animationType: UnityEditor.ModelImporterAnimationType): any;
    static GetAnimationType(go: any): UnityEditor.ModelImporterAnimationType;
    static GetAnimationType(motion: UnityEngine.Motion): UnityEditor.ModelImporterAnimationType;
    static IsValidPreviewGameObject(target: any, requiredClipType: UnityEditor.ModelImporterAnimationType): boolean;
    OnDestroy(): void;
    ResetPreviewInstance(): void;
    readonly animationClipType: UnityEditor.ModelImporterAnimationType;
    readonly Animator: any;
    readonly bodyPosition: any;
    readonly IKOnFeet: boolean;
    readonly PreviewObject: any;
    ShowIKOnFeetButton: boolean;
    fps: number;
    timeControl: UnityEditor.TimeControl;
  }
}
declare namespace UnityEditor.AvatarPreview {
  class Styles extends System.Object {
    constructor();
    avatarIcon: any;
    ik: any;
    pivot: any;
    preButton: any;
    preLabel: any;
    preSlider: any;
    preSliderThumb: any;
    speedScale: any;
  }
}
declare namespace UnityEditor.AvatarPreview {
  class PreviewPopupOptions extends System.Enum {
    protected constructor();
    static Auto: UnityEditor.AvatarPreview.PreviewPopupOptions;
    static DefaultModel: UnityEditor.AvatarPreview.PreviewPopupOptions;
    static Other: UnityEditor.AvatarPreview.PreviewPopupOptions;
    value__: number;
  }
}
declare namespace UnityEditor.AvatarPreview {
  class ViewTool extends System.Enum {
    protected constructor();
    static None: UnityEditor.AvatarPreview.ViewTool;
    static Orbit: UnityEditor.AvatarPreview.ViewTool;
    static Pan: UnityEditor.AvatarPreview.ViewTool;
    value__: number;
    static Zoom: UnityEditor.AvatarPreview.ViewTool;
  }
}
declare namespace UnityEditor {
  class AvatarPreviewSelection {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    static GetPreview(type: UnityEditor.ModelImporterAnimationType): any;
    GetType(): any;
    SetDirty(): void;
    static SetPreview(type: UnityEditor.ModelImporterAnimationType, go: any): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class BillboardAssetInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
  }
}
declare namespace UnityEditor.BillboardAssetInspector {
  class GUIStyles extends System.Object {
    constructor();
    m_DropdownButton: any;
    m_Geometry: any;
    m_Shaded: any;
  }
}
declare namespace UnityEditor {
  class BillboardRendererInspector extends UnityEditor.RendererEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class BlendTreeInspector extends UnityEditor.Editor {
    constructor();
    AddButton(rect: any, list: UnityEditorInternal.ReorderableList): void;
    ClickDragFloat(position: any, value: number): number;
    ClickDragFloat(position: any, value: number, alignRight: boolean): number;
    static DeleteBlendTreeDialog(toDelete: string): boolean;
    DrawChild(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RemoveButton(list: UnityEditorInternal.ReorderableList): void;
  }
}
declare namespace UnityEditor.BlendTreeInspector {
  class Styles extends System.Object {
    constructor();
    background: any;
    blendPosition: any;
    clickDragFloatFieldLeft: any;
    clickDragFloatFieldRight: any;
    clickDragFloatLabelLeft: any;
    clickDragFloatLabelRight: any;
    errorStyle: any;
    headerIcon: any;
    mirrorIcon: any;
    pointIcon: any;
    pointIconOverlay: any;
    pointIconSelected: any;
    samplerIcon: any;
    speedIcon: any;
    triangleLeft: any;
    triangleRight: any;
    visBgColor: any;
    visPointColor: any;
    visPointEmptyColor: any;
    visPointOverlayColor: any;
    visSamplerColor: any;
    visWeightColor: any;
    visWeightLineColor: any;
    visWeightShapeColor: any;
  }
}
declare namespace UnityEditor.BlendTreeInspector {
  class ChildPropertyToCompute extends System.Enum {
    protected constructor();
    static PositionX: UnityEditor.BlendTreeInspector.ChildPropertyToCompute;
    static PositionY: UnityEditor.BlendTreeInspector.ChildPropertyToCompute;
    static Threshold: UnityEditor.BlendTreeInspector.ChildPropertyToCompute;
    value__: number;
  }
}
declare namespace UnityEditor {
  class VisualizationBlendTree extends System.Object {
    constructor();
    Destroy(): void;
    Init(blendTree: UnityEditor.Animations.BlendTree, animator: any): void;
    Reset(): void;
    Update(): void;
    readonly animator: any;
    readonly controllerDirty: boolean;
  }
}
declare namespace UnityEditor {
  class PreviewBlendTree extends System.Object {
    constructor();
    CreateParameters(): void;
    HasPreviewGUI(): boolean;
    Init(blendTree: UnityEditor.Animations.BlendTree, animator: any): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ResetStateMachine(): void;
    TestForReset(): void;
    readonly PreviewAnimator: any;
  }
}
declare namespace UnityEditor {
  class BoxCollider2DEditor extends UnityEditor.Collider2DEditorBase {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class BoxColliderEditor extends UnityEditor.PrimitiveCollider3DEditor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class PrimitiveCollider3DEditor extends UnityEditor.Collider3DEditorBase {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class Collider3DEditorBase extends UnityEditor.ColliderEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class BuoyancyEffector2DEditor extends UnityEditor.Effector2DEditor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class CameraEditor extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnOverlayGUI(target: UnityEngine.Object, sceneView: UnityEditor.SceneView): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.CameraEditor {
  class Styles extends System.Object {
    constructor();
    static iconRemove: any;
    static invisibleButton: any;
  }
}
declare namespace UnityEditor.CameraEditor {
  class ProjectionType extends System.Enum {
    protected constructor();
    static Orthographic: UnityEditor.CameraEditor.ProjectionType;
    static Perspective: UnityEditor.CameraEditor.ProjectionType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CanvasEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.CanvasEditor {
  class Styles extends System.Object {
    protected constructor();
    static eventCamera: any;
    static m_ShaderChannel: any;
    static m_SortingLayerStyle: any;
    static m_SortingOrderStyle: any;
    static renderCamera: any;
    static s_RootAndNestedMessage: string;
    static sortingOrder: any;
    static targetDisplay: any;
  }
}
declare namespace UnityEditor.CanvasEditor {
  class PixelPerfect extends System.Enum {
    protected constructor();
    static Inherit: UnityEditor.CanvasEditor.PixelPerfect;
    static Off: UnityEditor.CanvasEditor.PixelPerfect;
    static On: UnityEditor.CanvasEditor.PixelPerfect;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CapsuleCollider2DEditor extends UnityEditor.PrimitiveCollider2DEditor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class PrimitiveCollider2DEditor extends UnityEditor.Collider2DEditorBase {
    protected constructor();
    OnEnable(): void;
  }
}
declare namespace UnityEditor {
  class CapsuleColliderEditor extends UnityEditor.PrimitiveCollider3DEditor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class CharacterControllerEditor extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class CharacterJointEditor {
    constructor();
    DrawDefaultInspector(): boolean;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInfoString(): string;
    GetInstanceID(): number;
    GetPreviewTitle(): any;
    GetType(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    MoveNextTarget(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    Repaint(): void;
    RequiresConstantRepaint(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    UseDefaultMargins(): boolean;
    hideFlags: any;
    name: string;
    readonly serializedObject: UnityEditor.SerializedObject;
    target: UnityEngine.Object;
    readonly targets: UnityEngine.Object[];
  }
}
declare namespace UnityEditor {
  class JointEditor<T> extends UnityEditor.Editor {
    protected constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class CircleCollider2DEditor extends UnityEditor.PrimitiveCollider2DEditor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class ClothInspectorState {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
    DrawMode: UnityEditor.ClothInspector.DrawMode;
    ManipulateBackfaces: boolean;
    PaintCollisionSphereDistance: number;
    PaintCollisionSphereDistanceEnabled: boolean;
    PaintMaxDistance: number;
    PaintMaxDistanceEnabled: boolean;
    ToolMode: UnityEditor.ClothInspector.ToolMode;
  }
}
declare namespace UnityEditor {
  class ClothInspector extends UnityEditor.Editor {
    constructor();
    DrawColorBox(gradientTex: any, col: any): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    VisualizationMenuSetCollisionSphereMode(): void;
    VisualizationMenuSetMaxDistanceMode(): void;
    VisualizationMenuToggleManipulateBackfaces(): void;
    readonly editing: boolean;
  }
}
declare namespace UnityEditor.ClothInspector {
  class DrawMode extends System.Enum {
    protected constructor();
    static CollisionSphereDistance: UnityEditor.ClothInspector.DrawMode;
    static MaxDistance: UnityEditor.ClothInspector.DrawMode;
    value__: number;
  }
}
declare namespace UnityEditor.ClothInspector {
  class ToolMode extends System.Enum {
    protected constructor();
    static Paint: UnityEditor.ClothInspector.ToolMode;
    static Select: UnityEditor.ClothInspector.ToolMode;
    value__: number;
  }
}
declare namespace UnityEditor.ClothInspector {
  class RectSelectionMode extends System.Enum {
    protected constructor();
    static Add: UnityEditor.ClothInspector.RectSelectionMode;
    static Replace: UnityEditor.ClothInspector.RectSelectionMode;
    static Substract: UnityEditor.ClothInspector.RectSelectionMode;
    value__: number;
  }
}
declare namespace UnityEditor.Collider2DEditorBase {
  class Styles extends System.Object {
    constructor();
    static s_AutoTilingLabel: any;
    static s_ColliderEditDisableHelp: any;
  }
}
declare namespace UnityEditor {
  class ColliderEditorUtility extends System.Object {
    constructor();
    static InspectorEditButtonGUI(editing: boolean): boolean;
  }
}
declare namespace UnityEditor {
  class ColorPresetLibraryEditor extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class CompositeCollider2DEditor extends UnityEditor.Collider2DEditorBase {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class ComputeShaderInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.ComputeShaderInspector {
  class KernelInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.ComputeShaderInspector {
  class Styles extends System.Object {
    constructor();
    static kernelsHeading: any;
    static showCompiled: any;
  }
}
declare namespace UnityEditor {
  class ConfigurableJointEditor {
    constructor();
    DrawDefaultInspector(): boolean;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInfoString(): string;
    GetInstanceID(): number;
    GetPreviewTitle(): any;
    GetType(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    MoveNextTarget(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    Repaint(): void;
    RequiresConstantRepaint(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    UseDefaultMargins(): boolean;
    hideFlags: any;
    name: string;
    readonly serializedObject: UnityEditor.SerializedObject;
    target: UnityEngine.Object;
    readonly targets: UnityEngine.Object[];
  }
}
declare namespace UnityEditor {
  class CubemapInspector extends UnityEditor.TextureInspector {
    constructor();
    static ObjectField(label: string, obj: UnityEngine.Object, objType: any, allowSceneObjects: boolean, options: any[]): UnityEngine.Object;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class TextureInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    GetMipLevelForRendering(): number;
    HasPreviewGUI(): boolean;
    static IsNormalMap(t: any): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    mipLevel: number;
  }
}
declare namespace UnityEditor {
  class CubemapPreview extends System.Object {
    constructor();
    GetMipLevelForRendering(texture: any): number;
    OnDisable(): void;
    OnPreviewGUI(t: any, r: any, background: any): void;
    OnPreviewSettings(targets: UnityEngine.Object[]): void;
    RenderStaticPreview(t: any, width: number, height: number): any;
    SetIntensity(intensity: number): void;
    mipLevel: number;
    m_PreviewDir: any;
  }
}
declare namespace UnityEditor.CubemapPreview {
  class PreviewType extends System.Enum {
    protected constructor();
    static Alpha: UnityEditor.CubemapPreview.PreviewType;
    static RGB: UnityEditor.CubemapPreview.PreviewType;
    value__: number;
  }
}
declare namespace UnityEditor.CubemapPreview {
  class Styles extends System.Object {
    protected constructor();
    static alphaIcon: any;
    static largeZoom: any;
    static preButton: any;
    static preLabel: any;
    static preSlider: any;
    static preSliderThumb: any;
    static RGBIcon: any;
    static smallZoom: any;
  }
}
declare namespace UnityEditor {
  class CurvePresetLibraryEditor extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class CustomPreviewAttribute extends System.Attribute {
    constructor(type: any);
  }
}
declare namespace UnityEditor {
  class CustomRenderTextureEditor extends UnityEditor.RenderTextureEditor {
    constructor();
    GetInfoString(): string;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class RenderTextureEditor extends UnityEditor.TextureInspector {
    constructor();
    GetInfoString(): string;
    static IsHDRFormat(format: any): boolean;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.CustomRenderTextureEditor {
  class Styles extends System.Object {
    constructor();
    cubemapFaces: any[];
    cubemapFacesLabel: any;
    doubleBuffered: any;
    initColor: any;
    initializationMode: any;
    initMaterial: any;
    initSource: any;
    initSourceStrings: any[];
    initSourceValues: number[];
    initTexture: any;
    materials: any;
    needSwap: any;
    saveButton: any;
    separator: any;
    shaderPass: any;
    updateMode: any;
    updateModeStrings: any[];
    updateModeValues: number[];
    updatePeriod: any;
    updateZoneCenter: any;
    updateZoneList: any;
    updateZoneRotation: any;
    updateZoneSize: any;
    updateZoneSpace: any;
    updateZoneSpaceStrings: any[];
    updateZoneSpaceValues: number[];
    wrapUpdateZones: any;
  }
}
declare namespace UnityEditor {
  class DirectorEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
  }
}
declare namespace UnityEditor.DirectorEditor {
  class Styles extends System.Object {
    protected constructor();
    static BindingsTitleContent: any;
    static InitialStateContent: any;
    static InitialTimeContent: any;
    static NoBindingsContent: any;
    static PlayableText: any;
    static TimeContent: any;
    static UpdateMethod: any;
    static WrapModeContent: any;
  }
}
declare namespace UnityEditor.DirectorEditor {
  class BindingPropertyPair extends System.ValueType {
    protected constructor();
    binding: any;
    property: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class DistanceJoint2DEditor extends UnityEditor.AnchoredJoint2DEditor {
    constructor();
    OnSceneGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class DoubleCurvePresetLibraryEditor extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class EdgeCollider2DEditor extends UnityEditor.Collider2DEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditorInternal {
  class EditMode extends System.Object {
    constructor();
    static ChangeEditMode(mode: UnityEditorInternal.EditMode.SceneViewEditMode, bounds: any, caller: UnityEditor.Editor): void;
    static DoEditModeInspectorModeButton(mode: UnityEditorInternal.EditMode.SceneViewEditMode, label: string, icon: any, getBoundsOfTargets: (() => any), caller: UnityEditor.Editor): void;
    static DoEditModeInspectorModeButton(mode: UnityEditorInternal.EditMode.SceneViewEditMode, label: string, icon: any, bounds: any, caller: UnityEditor.Editor): void;
    static DoInspectorToolbar(modes: UnityEditorInternal.EditMode.SceneViewEditMode[], guiContents: any[], getBoundsOfTargets: (() => any), caller: UnityEditor.Editor): void;
    static DoInspectorToolbar(modes: UnityEditorInternal.EditMode.SceneViewEditMode[], guiContents: any[], bounds: any, caller: UnityEditor.Editor): void;
    static IsOwner(editor: UnityEditor.Editor): boolean;
    static OnSelectionChange(): void;
    static QuitEditMode(): void;
    static ResetToolToPrevious(): void;
    static readonly editMode: UnityEditorInternal.EditMode.SceneViewEditMode;
    static onEditModeEndDelegate: ((editor: UnityEditor.Editor) => void);
    static onEditModeStartDelegate: ((editor: UnityEditor.Editor, mode: UnityEditorInternal.EditMode.SceneViewEditMode) => void);
  }
}
declare namespace UnityEditorInternal.EditMode {
  class Styles extends System.Object {
    protected constructor();
    static multiButtonStyle: any;
    static singleButtonStyle: any;
  }
}
declare namespace UnityEditorInternal.EditMode {
  class SceneViewEditMode extends System.Enum {
    protected constructor();
    static Cloth: UnityEditorInternal.EditMode.SceneViewEditMode;
    static Collider: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridBox: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridEraser: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridFloodFill: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridMove: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridPainting: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridPicking: UnityEditorInternal.EditMode.SceneViewEditMode;
    static GridSelect: UnityEditorInternal.EditMode.SceneViewEditMode;
    static JointAngularLimits: UnityEditorInternal.EditMode.SceneViewEditMode;
    static LightProbeGroup: UnityEditorInternal.EditMode.SceneViewEditMode;
    static LightProbeProxyVolumeBox: UnityEditorInternal.EditMode.SceneViewEditMode;
    static LightProbeProxyVolumeOrigin: UnityEditorInternal.EditMode.SceneViewEditMode;
    static None: UnityEditorInternal.EditMode.SceneViewEditMode;
    static ParticleSystemCollisionModulePlanesMove: UnityEditorInternal.EditMode.SceneViewEditMode;
    static ParticleSystemCollisionModulePlanesRotate: UnityEditorInternal.EditMode.SceneViewEditMode;
    static ReflectionProbeBox: UnityEditorInternal.EditMode.SceneViewEditMode;
    static ReflectionProbeOrigin: UnityEditorInternal.EditMode.SceneViewEditMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IPreviewable {
    protected constructor();
    DrawPreview(previewArea: any): void;
    GetInfoString(): string;
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    MoveNextTarget(): boolean;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    ResetTarget(): void;
    readonly target: UnityEngine.Object;
  }
}
declare namespace UnityEditor.ObjectPreview {
  class Styles extends System.Object {
    constructor();
    dropShadowLabelStyle: any;
    preBackground: any;
    preBackgroundSolid: any;
    previewMiniLabel: any;
  }
}
declare namespace UnityEditor {
  class IToolModeOwner {
    protected constructor();
    GetInstanceID(): number;
    GetWorldBoundsOfTargets(): any;
    ModeSurvivesSelectionChange(toolMode: number): boolean;
    readonly areToolModesAvailable: boolean;
  }
}
declare namespace UnityEditor {
  class EditorDragging extends System.Object {
    constructor(inspectorWindow: UnityEditor.InspectorWindow);
    HandleDraggingToBottomArea(bottomRect: any, tracker: UnityEditor.ActiveEditorTracker): void;
    HandleDraggingToEditor(editorIndex: number, dragRect: any, contentRect: any, tracker: UnityEditor.ActiveEditorTracker): void;
  }
}
declare namespace UnityEditor.EditorDragging {
  class DraggingMode extends System.Enum {
    protected constructor();
    static Component: UnityEditor.EditorDragging.DraggingMode;
    static NotApplicable: UnityEditor.EditorDragging.DraggingMode;
    static Script: UnityEditor.EditorDragging.DraggingMode;
    value__: number;
  }
}
declare namespace UnityEditor.EditorDragging {
  class Styles extends System.Object {
    protected constructor();
    static insertionMarker: any;
  }
}
declare namespace UnityEditor {
  class EditorSettingsInspector extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.EditorSettingsInspector {
  class PopupElement extends System.ValueType {
    protected constructor();
    readonly Enabled: boolean;
    content: any;
    id: string;
    requiresTeamLicense: boolean;
  }
}
declare namespace UnityEditor {
  class FontInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class GameObjectInspector extends UnityEditor.Editor {
    constructor();
    static GetRenderableBoundsRecurse(bounds: any, go: any): void;
    static GetRenderableCenterRecurse(go: any, minDepth: number, maxDepth: number): any;
    HasPreviewGUI(): boolean;
    static HasRenderableParts(go: any): boolean;
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    OnSceneDrag(sceneView: UnityEditor.SceneView): void;
    ReloadPreviewInstances(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    static dragObject: any;
  }
}
declare namespace UnityEditor.GameObjectInspector {
  class Styles extends System.Object {
    constructor();
    goIcon: any;
    goTypeLabel: any[];
    goTypeLabelMultiple: any;
    header: any;
    instanceManagementInfo: any;
    layerFieldWidth: number;
    layerPopup: any;
    modelIcon: any;
    prefabIcon: any;
    staticContent: any;
    staticDropdown: any;
    tagFieldWidth: number;
    typelessIcon: any;
  }
}
declare namespace UnityEditor.GameObjectInspector {
  class PreviewData extends System.Object {
    constructor(targetObject: UnityEngine.Object);
    Dispose(): void;
    UpdateGameObject(targetObject: UnityEngine.Object): void;
    readonly gameObject: any;
    renderUtility: UnityEditor.PreviewRenderUtility;
  }
}
declare namespace UnityEditor {
  class GenericInspector extends UnityEditor.Editor {
    constructor();
    MissingMonoBehaviourGUI(): boolean;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class GradientPresetLibraryEditor extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class GraphicsSettingsInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.GraphicsSettingsInspector {
  class Styles extends System.Object {
    constructor();
    static builtinSettings: any;
    static cameraSettings: any;
    static closeEditorWindow: any;
    static renderPipeLabel: any;
    static renderPipeSettings: any;
    static shaderPreloadSettings: any;
    static shaderStrippingSettings: any;
    static showEditorWindow: any;
    static tierSettings: any;
  }
}
declare namespace UnityEditor {
  class HingeJoint2DEditor extends UnityEditor.AnchoredJoint2DEditor {
    constructor();
    OnEnable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.HingeJoint2DEditor {
  class Styles extends System.Object {
    protected constructor();
    static editAngularLimitsButton: any;
    static editAngularLimitsUndoMessage: string;
    static handleColor: any;
    static handleRadius: number;
  }
}
declare namespace UnityEditor {
  class HingeJointEditor {
    constructor();
    DrawDefaultInspector(): boolean;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInfoString(): string;
    GetInstanceID(): number;
    GetPreviewTitle(): any;
    GetType(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    MoveNextTarget(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    Repaint(): void;
    RequiresConstantRepaint(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    UseDefaultMargins(): boolean;
    hideFlags: any;
    name: string;
    readonly serializedObject: UnityEditor.SerializedObject;
    target: UnityEngine.Object;
    readonly targets: UnityEngine.Object[];
  }
}
declare namespace UnityEditor {
  class InspectorWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    EditorHasLargeHeader(editorIndex: number, trackerActiveEditors: UnityEditor.Editor[]): boolean;
    static GetAllInspectorWindows(): UnityEditor.InspectorWindow[];
    GetEditorsWithPreviews(editors: UnityEditor.Editor[]): UnityEditor.IPreviewable[];
    GetEditorThatControlsPreview(editors: UnityEditor.IPreviewable[]): UnityEditor.IPreviewable;
    GetInspectedObject(): UnityEngine.Object;
    GetLastInteractedEditor(): UnityEditor.Editor;
    ShouldCullEditor(editors: UnityEditor.Editor[], editorIndex: number): boolean;
    isLocked: boolean;
    readonly tracker: UnityEditor.ActiveEditorTracker;
    m_InspectorMode: UnityEditor.InspectorMode;
    m_ScrollPosition: any;
    static s_CurrentInspectorWindow: UnityEditor.InspectorWindow;
  }
}
declare namespace UnityEditor.InspectorWindow {
  class Styles extends System.Object {
    constructor();
    addComponentArea: any;
    addComponentButtonStyle: any;
    addComponentLabel: any;
    dragHandle: any;
    insertionMarker: any;
    labelTitle: any;
    lockButton: any;
    lockedHeaderButton: any;
    preBackground: any;
    preDropDown: any;
    preTitle: any;
    preToolbar: any;
    preToolbar2: any;
    previewMiniLabel: any;
    stickyNote: any;
    stickyNoteArrow: any;
    stickyNoteLabel: any;
    stickyNotePerforce: any;
    typeSelection: any;
    VCS_NotConnectedMessage: any;
  }
}
declare namespace UnityEditor.Joint2DEditor {
  class Styles extends System.Object {
    constructor();
    anchor: any;
    anchorActive: any;
    connectedAnchor: any;
    connectedAnchorActive: any;
  }
}
declare namespace UnityEditor {
  class LabelGUI extends System.Object {
    constructor();
    AssetLabelListCallback(element: UnityEditor.PopupList.ListElement): void;
    AssetLabelsChangedForObject(asset: UnityEngine.Object): void;
    InitLabelCache(assets: UnityEngine.Object[]): void;
    InvalidateLabels(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnLabelGUI(assets: UnityEngine.Object[]): void;
    OnLostFocus(): void;
    SaveLabels(): void;
  }
}
declare namespace UnityEditor {
  class LayoutDropdownWindow extends UnityEditor.PopupWindowContent {
    constructor(so: UnityEditor.SerializedObject);
    GetWindowSize(): any;
    OnClose(): void;
    OnGUI(rect: any): void;
    OnOpen(): void;
  }
}
declare namespace UnityEditor.LayoutDropdownWindow {
  class Styles extends System.Object {
    constructor();
    anchorCornerColor: any;
    frame: any;
    label: any;
    parentColor: any;
    pivotColor: any;
    selfColor: any;
    simpleAnchorColor: any;
    stretchAnchorColor: any;
    tableHeaderColor: any;
    tableLineColor: any;
  }
}
declare namespace UnityEditor.LayoutDropdownWindow {
  class LayoutMode extends System.Enum {
    protected constructor();
    static Max: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Middle: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Min: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Stretch: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Undefined: UnityEditor.LayoutDropdownWindow.LayoutMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LegacyIlluminShaderGUI extends UnityEditor.ShaderGUI {
    constructor();
    OnGUI(materialEditor: UnityEditor.MaterialEditor, props: UnityEditor.MaterialProperty[]): void;
  }
}
declare namespace UnityEditor {
  class ShaderGUI extends System.Object {
    protected constructor();
    AssignNewShaderToMaterial(material: any, oldShader: any, newShader: any): void;
    OnGUI(materialEditor: UnityEditor.MaterialEditor, properties: UnityEditor.MaterialProperty[]): void;
    OnMaterialInteractivePreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialPreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialPreviewSettingsGUI(materialEditor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class LightEditor extends UnityEditor.Editor {
    constructor();
    DefaultOnInspectorGUI(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.LightEditor {
  class Styles extends System.Object {
    constructor();
    AreaHeight: any;
    AreaWidth: any;
    BakedShadowAngle: any;
    BakedShadowRadius: any;
    BakingWarning: any;
    Color: any;
    ColorFilter: any;
    ColorTemperature: any;
    Cookie: any;
    CookieSize: any;
    CookieWarning: any;
    CullingMask: any;
    DisabledLightWarning: any;
    DrawHalo: any;
    Flare: any;
    iconRemove: any;
    IndirectBounceShadowWarning: any;
    Intensity: any;
    invisibleButton: any;
    LightBounceIntensity: any;
    LightmappingMode: any;
    Range: any;
    RenderMode: any;
    ShadowBias: any;
    ShadowNearPlane: any;
    ShadowNormalBias: any;
    ShadowRealtimeSettings: any;
    ShadowResolution: any;
    ShadowStrength: any;
    ShadowType: any;
    static sliderBox: any;
    static sliderThumb: any;
    SpotAngle: any;
    Type: any;
    UseColorTemperature: any;
  }
}
declare namespace UnityEditor.Experimental {
  class ICustomLightEditor {
    protected constructor();
    OnInspectorGUI(lightEditor: UnityEditor.LightEditor): void;
  }
}
declare namespace UnityEditor.Experimental {
  class CustomLightEditorAttribute extends System.Attribute {
    constructor(renderPipelineType: any);
    readonly renderPipelineType: any;
  }
}
declare namespace UnityEditor {
  class LightingSettingsInspector extends System.Object {
    constructor(serializedObject: UnityEditor.SerializedObject);
    Begin(): boolean;
    End(): void;
    static LightmapParametersGUI(prop: UnityEditor.SerializedProperty, content: any): boolean;
    RenderMeshSettings(showLightmapSettings: boolean): void;
    RenderTerrainSettings(): void;
    showChartingSettings: boolean;
    showLightmapSettings: boolean;
    showSettings: boolean;
  }
}
declare namespace UnityEditor.LightingSettingsInspector {
  class Styles extends System.Object {
    constructor();
    Atlas: any;
    AtlasIndex: any;
    AtlasOffsetX: any;
    AtlasOffsetY: any;
    AtlasTilingX: any;
    AtlasTilingY: any;
    AutoUVMaxAngle: any;
    AutoUVMaxDistance: any;
    CastShadows: any;
    ClampedPackingResolution: any;
    ClampedSize: any;
    GINotEnabledInfo: any;
    IgnoreNormalsForChartDetection: any;
    ImportantGI: any;
    Lighting: any;
    LightmapInfoBox: any;
    LightmapParameters: any;
    LightmapSettings: any;
    LightmapStatic: any;
    MinimumChartSize: any;
    MinimumChartSizeStrings: any[];
    MinimumChartSizeValues: number[];
    MotionVectors: any;
    NoNormalsNoLightmapping: any;
    OptimizeRealtimeUVs: any;
    PVRAtlasHash: any;
    PVRAtlasInstanceOffset: any;
    PVRInstanceHash: any;
    RealtimeLM: any;
    RealtimeLMGeometryHash: any;
    RealtimeLMInputSystemHash: any;
    RealtimeLMInstanceHash: any;
    RealtimeLMInstanceResolution: any;
    RealtimeLMResolution: any;
    ReceiveShadows: any;
    ResolutionTooHighWarning: any;
    ResolutionTooLowWarning: any;
    ScaleInLightmap: any;
    StitchLightmapSeams: any;
    TerrainLightmapInfoBox: any;
    UVCharting: any;
    ZeroAreaPackingMesh: any;
  }
}
declare namespace UnityEditor {
  class LightProbeGroupEditor extends System.Object {
    constructor(group: any, inspector: UnityEditor.LightProbeGroupInspector);
    AddProbe(position: any): void;
    DeselectProbes(): void;
    DuplicateSelectedProbes(): void;
    GetDefaultColor(): any;
    GetPointScale(): number;
    GetPosition(idx: number): any;
    GetPositions(): any;
    GetSelectedColor(): any;
    GetSelectedPositions(): any[];
    GetUnselectedPositions(): any[];
    GetWorldPosition(idx: number): any;
    HandleEditMenuHotKeyCommands(): void;
    MarkTetrahedraDirty(): void;
    OnSceneGUI(transform: any): boolean;
    PullProbePositions(): void;
    PushProbePositions(): void;
    RemoveSelectedProbes(): void;
    SelectAllProbes(): void;
    SetEditing(editing: boolean): void;
    SetPosition(idx: number, position: any): void;
    static TetrahedralizeSceneProbes(positions: any, indices: any): void;
    UpdateSelectedPosition(idx: number, position: any): void;
    readonly bounds: any;
    readonly Count: number;
    drawTetrahedra: boolean;
    readonly SelectedCount: number;
    readonly selectedProbeBounds: any;
  }
}
declare namespace UnityEditor {
  class LightProbeGroupInspector extends UnityEditor.Editor {
    constructor();
    HasFrameBounds(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    OnGetFrameBounds(): any;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnSceneGUIDelegate(sceneView: UnityEditor.SceneView): void;
    StartEditMode(): void;
  }
}
declare namespace UnityEditor.LightProbeGroupInspector {
  class Styles extends System.Object {
    protected constructor();
    static addProbe: any;
    static deleteSelected: any;
    static duplicateSelected: any;
    static editModeButton: any;
    static selectAll: any;
    static selectedProbePosition: any;
    static showWireframe: any;
  }
}
declare namespace UnityEditor {
  class LightProbeProxyVolumeEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.LightProbeProxyVolumeEditor {
  class Styles extends System.Object {
    protected constructor();
    static baseSceneEditingToolText: string;
    static bbMode: any[];
    static bbModeText: any;
    static bbSettingsText: any;
    static componentUnsuportedOnTreesNote: any;
    static componentUnusedNote: any;
    static noLightProbes: any;
    static noRendererNode: any;
    static originText: any;
    static probePositionMode: any[];
    static probePositionText: any;
    static refreshMode: any[];
    static refreshModeText: any;
    static resMode: any[];
    static resModeText: any;
    static resolutionXText: any;
    static resolutionYText: any;
    static resolutionZText: any;
    static resProbesPerUnit: any;
    static richTextMiniLabel: any;
    static sceneViewEditModes: UnityEditorInternal.EditMode.SceneViewEditMode[];
    static sizeText: any;
    static toolContents: any[];
    static toolNames: any[];
    static volTextureSizes: any[];
    static volTextureSizesValues: number[];
    static volumeResolutionText: any;
  }
}
declare namespace UnityEditor {
  class LightProbesInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class LineRendererCurveEditor extends System.Object {
    constructor();
    CheckCurveChangedExternally(): void;
    GetAxisScalars(): any;
    OnDisable(): void;
    OnEnable(serializedObject: UnityEditor.SerializedObject): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.LineRendererCurveEditor {
  class Styles extends System.Object {
    constructor();
    static widthMultiplier: any;
  }
}
declare namespace UnityEditor {
  class LineRendererInspector extends UnityEditor.RendererEditorBase {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.LineRendererInspector {
  class Styles extends System.Object {
    constructor();
    static alignment: any;
    static colorGradient: any;
    static generateLightingData: any;
    static numCapVertices: any;
    static numCornerVertices: any;
    static textureMode: any;
  }
}
declare namespace UnityEditor {
  class LODGroupEditor extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnSceneGUI(): void;
    Update(): void;
  }
}
declare namespace UnityEditor.LODGroupEditor {
  class LODAction extends System.Object {
    constructor(lods: UnityEditor.LODGroupGUI.LODInfo[], percentage: number, clickedPosition: any, propLODs: UnityEditor.SerializedProperty, callback: (() => void));
    DeleteLOD(): void;
    InsertLOD(): void;
  }
}
declare namespace UnityEditor.LODGroupEditor {
  class LODLightmapScale extends System.Object {
    constructor(scale: number, renderers: UnityEditor.SerializedProperty[]);
    m_Renderers: UnityEditor.SerializedProperty[];
    m_Scale: number;
  }
}
declare namespace UnityEditor {
  class LODGroupGUI extends System.Object {
    protected constructor();
    static CalcLODButton(totalRect: any, percentage: number): any;
    static CreateLODInfos(numLODs: number, area: any, nameGen: ((arg: number) => string), heightGen: ((arg: number) => number)): UnityEditor.LODGroupGUI.LODInfo[];
    static DelinearizeScreenPercentage(percentage: number): number;
    static DrawLODSlider(area: any, lods: UnityEditor.LODGroupGUI.LODInfo[], selectedLevel: number): void;
    static DrawMixedValueLODSlider(area: any): void;
    static GetCameraPercent(position: any, sliderRect: any): number;
    static GetCulledBox(totalRect: any, previousLODPercentage: number): any;
    static LinearizeScreenPercentage(percentage: number): number;
    static SetSelectedLODLevelPercentage(newScreenPercentage: number, lod: number, lods: UnityEditor.LODGroupGUI.LODInfo[]): void;
    static readonly Styles: UnityEditor.LODGroupGUI.GUIStyles;
    static kButtonPadding: number;
    static kCulledLODColor: any;
    static kDeleteButtonSize: number;
    static kLODColors: any[];
    static kRenderAreaForegroundPadding: number;
    static kRenderersButtonHeight: number;
    static kSceneHeaderOffset: number;
    static kSceneLabelHalfWidth: number;
    static kSceneLabelHeight: number;
    static kSelectedLODRangePadding: number;
    static kSliderBarBottomMargin: number;
    static kSliderBarHeight: number;
    static kSliderBarTopMargin: number;
  }
}
declare namespace UnityEditor.LODGroupGUI {
  class GUIStyles extends System.Object {
    constructor();
    m_AnimateBetweenPreviousLOD: any;
    m_AnimatedCrossFadeInconsistentText: any;
    m_AnimatedCrossFadeInvalidText: any;
    m_CameraIcon: any;
    m_IconRendererMinus: any;
    m_IconRendererPlus: any;
    m_LightmapScale: any;
    m_LODBlackBox: any;
    m_LODCameraLine: any;
    m_LODLevelNotifyText: any;
    m_LODRendererAddButton: any;
    m_LODRendererButton: any;
    m_LODRendererRemove: any;
    m_LODRenderersText: any;
    m_LODSceneText: any;
    m_LODSliderBG: any;
    m_LODSliderRange: any;
    m_LODSliderRangeSelected: any;
    m_LODSliderText: any;
    m_LODSliderTextSelected: any;
    m_LODStandardButton: any;
    m_RecalculateBounds: any;
    m_RecalculateBoundsDisabled: any;
    m_RendersTitle: any;
    m_UploadToImporter: any;
    m_UploadToImporterDisabled: any;
  }
}
declare namespace UnityEditor.LODGroupGUI {
  class LODInfo extends System.Object {
    constructor(lodLevel: number, name: string, screenPercentage: number);
    readonly LODLevel: number;
    readonly LODName: string;
    RawScreenPercent: number;
    ScreenPercent: number;
    m_ButtonPosition: any;
    m_RangePosition: any;
  }
}
declare namespace UnityEditor {
  class MaterialEditor extends UnityEditor.Editor {
    constructor();
    static ApplyMaterialPropertyDrawers(material: any): void;
    static ApplyMaterialPropertyDrawers(targets: UnityEngine.Object[]): void;
    Awake(): void;
    BeginAnimatedCheck(prop: UnityEditor.MaterialProperty): void;
    BeginAnimatedCheck(totalPosition: any, prop: UnityEditor.MaterialProperty): void;
    ColorProperty(propertyName: string, label: string): any;
    ColorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    ColorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    DefaultPreviewGUI(r: any, background: any): void;
    DefaultPreviewSettingsGUI(): void;
    DefaultShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    DefaultShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    DoubleSidedGIField(): boolean;
    EmissionEnabledProperty(): boolean;
    EnableInstancingField(): boolean;
    EnableInstancingField(r: any): void;
    EndAnimatedCheck(): void;
    static FixupEmissiveFlag(col: any, flags: any): any;
    static FixupEmissiveFlag(mat: any): void;
    FloatProperty(propertyName: string, label: string): number;
    FloatProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    GetColor(propertyName: string, hasMixedValue: any): any;
    static GetDefaultPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    static GetFlexibleRectBetweenFieldAndRightEdge(r: any): any;
    static GetFlexibleRectBetweenLabelAndField(r: any): any;
    GetFloat(propertyName: string, hasMixedValue: any): number;
    static GetLeftAlignedFieldRect(r: any): any;
    static GetMaterialProperties(mats: UnityEngine.Object[]): UnityEditor.MaterialProperty[];
    static GetMaterialProperty(mats: UnityEngine.Object[], propertyIndex: number): UnityEditor.MaterialProperty;
    static GetMaterialProperty(mats: UnityEngine.Object[], name: string): UnityEditor.MaterialProperty;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string): number;
    static GetRectAfterLabelWidth(r: any): any;
    static GetRightAlignedFieldRect(r: any): any;
    GetTexture(propertyName: string, hasMixedValue: any): any;
    GetTextureOffset(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    GetTexturePropertyCustomArea(position: any): any;
    GetTextureScale(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    GetVector(propertyName: string, hasMixedValue: any): any;
    HasPreviewGUI(): boolean;
    HelpBoxWithButton(messageContent: any, buttonContent: any): boolean;
    LightmapEmissionFlagsProperty(indent: number, enabled: boolean): void;
    LightmapEmissionProperty(): void;
    LightmapEmissionProperty(labelIndent: number): void;
    LightmapEmissionProperty(position: any, labelIndent: number): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    static PrepareMaterialPropertiesForAnimationMode(properties: UnityEditor.MaterialProperty[], isMaterialEditable: boolean): any;
    PropertiesChanged(): void;
    PropertiesDefaultGUI(props: UnityEditor.MaterialProperty[]): void;
    PropertiesGUI(): boolean;
    RangeProperty(propertyName: string, label: string, v2: number, v3: number): number;
    RangeProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    RangeProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    RegisterPropertyChangeUndo(label: string): void;
    RenderQueueField(): void;
    RenderQueueField(r: any): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    RequiresConstantRepaint(): boolean;
    SetColor(propertyName: string, value: any): void;
    SetDefaultGUIWidths(): void;
    SetFloat(propertyName: string, value: number): void;
    SetShader(shader: any): void;
    SetShader(newShader: any, registerUndo: boolean): void;
    SetTexture(propertyName: string, value: any): void;
    SetTextureOffset(propertyName: string, value: any, coord: number): void;
    SetTextureScale(propertyName: string, value: any, coord: number): void;
    SetVector(propertyName: string, value: any): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(shader: any, propertyIndex: number): void;
    TextureCompatibilityWarning(prop: UnityEditor.MaterialProperty): void;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim, scaleOffset: boolean): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string, scaleOffset: boolean): any;
    TexturePropertyMiniThumbnail(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, extraProperty2: UnityEditor.MaterialProperty): any;
    TexturePropertyTwoLines(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, label2: any, extraProperty2: UnityEditor.MaterialProperty): any;
    TexturePropertyWithHDRColor(label: any, textureProp: UnityEditor.MaterialProperty, colorProperty: UnityEditor.MaterialProperty, hdrConfig: UnityEditor.ColorPickerHDRConfig, showAlpha: boolean): any;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty): number;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty, partOfTexturePropertyControl: boolean): number;
    static TextureScaleOffsetProperty(position: any, scaleOffset: any): any;
    static TextureScaleOffsetProperty(position: any, scaleOffset: any, partOfTexturePropertyControl: boolean): any;
    TextureScaleOffsetProperty(property: UnityEditor.MaterialProperty): void;
    UndoRedoPerformed(): void;
    VectorProperty(propertyName: string, label: string): any;
    VectorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    readonly isVisible: boolean;
    static kMiniTextureFieldLabelIndentLevel: number;
  }
}
declare namespace UnityEditor.MaterialEditor {
  class Styles extends System.Object {
    protected constructor();
    static customQueueNames: any[];
    static customQueueValues: number[];
    static doubleSidedGILabel: any;
    static emissionLabel: any;
    static enableInstancingLabel: any;
    static kCustomQueueIndex: number;
    static kNewShaderQueueValue: number;
    static kReflectionProbePickerStyle: any;
    static lightmapEmissiveLabel: any;
    static lightmapEmissiveStrings: any[];
    static lightmapEmissiveValues: number[];
    static propBlockInfo: string;
    static queueLabel: any;
    static queueNames: any[];
    static queueValues: number[];
  }
}
declare namespace UnityEditor.MaterialEditor {
  class PreviewType extends System.Enum {
    protected constructor();
    static Mesh: UnityEditor.MaterialEditor.PreviewType;
    static Plane: UnityEditor.MaterialEditor.PreviewType;
    static Skybox: UnityEditor.MaterialEditor.PreviewType;
    value__: number;
  }
}
declare namespace UnityEditor.MaterialEditor {
  class AnimatedCheckData extends System.ValueType {
    protected constructor();
    color: any;
    property: UnityEditor.MaterialProperty;
    totalPosition: any;
  }
}
declare namespace UnityEditor.MaterialEditor {
  class ReflectionProbePicker extends UnityEditor.PopupWindowContent {
    constructor();
    GetWindowSize(): any;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(rc: any): void;
    readonly Target: any;
  }
}
declare namespace UnityEditor.MaterialEditor {
  class ForwardApplyMaterialModification extends System.Object {
    constructor(r: any, inIsMaterialEditable: boolean);
    DidModifyAnimationModeMaterialProperty(property: UnityEditor.MaterialProperty, changedMask: number, previousValue: any): boolean;
  }
}
declare namespace UnityEditor {
  class MaterialPropertyHandler extends System.Object {
    constructor();
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    IsEmpty(): boolean;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    readonly propertyDrawer: UnityEditor.MaterialPropertyDrawer;
  }
}
declare namespace UnityEditor {
  class MaterialPropertyDrawer extends System.Object {
    protected constructor();
    Apply(prop: UnityEditor.MaterialProperty): void;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialToggleDrawer extends UnityEditor.MaterialPropertyDrawer {
    constructor();
    constructor(keyword: string);
    Apply(prop: UnityEditor.MaterialProperty): void;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialToggleOffDrawer extends UnityEditor.MaterialToggleDrawer {
    constructor();
    constructor(keyword: string);
  }
}
declare namespace UnityEditor {
  class MaterialPowerSliderDrawer extends UnityEditor.MaterialPropertyDrawer {
    constructor(power: number);
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialIntRangeDrawer extends UnityEditor.MaterialPropertyDrawer {
    constructor();
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialKeywordEnumDrawer extends UnityEditor.MaterialPropertyDrawer {
    constructor(kw1: string);
    constructor(kw1: string, kw2: string);
    constructor(kw1: string, kw2: string, kw3: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string, kw7: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string, kw7: string, kw8: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string, kw7: string, kw8: string, kw9: string);
    constructor(keywords: string[]);
    Apply(prop: UnityEditor.MaterialProperty): void;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialEnumDrawer extends UnityEditor.MaterialPropertyDrawer {
    constructor(enumName: string);
    constructor(n1: string, v1: number);
    constructor(n1: string, v1: number, n2: string, v2: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number, n5: string, v5: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number, n5: string, v5: number, n6: string, v6: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number, n5: string, v5: number, n6: string, v6: number, n7: string, v7: number);
    constructor(enumNames: string[], vals: number[]);
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialSpaceDecorator extends UnityEditor.MaterialPropertyDrawer {
    constructor();
    constructor(height: number);
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MaterialHeaderDecorator extends UnityEditor.MaterialPropertyDrawer {
    constructor(header: string);
    constructor(headerAsNumber: number);
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
  }
}
declare namespace UnityEditor {
  class MeshColliderEditor extends UnityEditor.Collider3DEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.MeshColliderEditor {
  class Texts extends System.Object {
    protected constructor();
    static convextText: any;
    static inflateMeshText: any;
    static isTriggerText: any;
    static skinWidthText: any;
  }
}
declare namespace UnityEditor {
  class MeshRendererEditor extends UnityEditor.RendererEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.MeshRendererEditor {
  class Styles extends System.Object {
    constructor();
    static MaterialWarning: string;
    static StaticBatchingWarning: string;
  }
}
declare namespace UnityEditor {
  class ModelInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
    previewDir: any;
  }
}
declare namespace UnityEditor {
  class MonoScriptImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class TextAssetInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class MonoScriptInspector extends UnityEditor.TextAssetInspector {
    constructor();
  }
}
declare namespace UnityEditor {
  class MovieTextureInspector extends UnityEditor.TextureInspector {
    constructor();
    GetInfoString(): string;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
  }
}
declare namespace UnityEditor {
  class NavMeshAgentInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.NavMeshAgentInspector {
  class Styles extends System.Object {
    constructor();
    m_AgentAvoidanceHeader: any;
    m_AgentPathFindingHeader: any;
    m_AgentSteeringHeader: any;
  }
}
declare namespace UnityEditor {
  class NavMeshObstacleInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class OcclusionAreaEditor extends UnityEditor.Editor {
    constructor();
  }
}
declare namespace UnityEditor {
  class OcclusionPortalEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class OffMeshLinkInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class Physics2DSettingsInspector extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class LayerMatrixGUI extends System.Object {
    constructor();
    static DoGUI(title: string, show: any, scrollPos: any, getValue: ((layerA: number, layerB: number) => boolean), setValue: ((layerA: number, layerB: number, val: boolean) => void)): void;
  }
}
declare namespace UnityEditor {
  class PhysicsManagerInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class PlatformEffector2DEditor extends UnityEditor.Effector2DEditor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class PointEffector2DEditor extends UnityEditor.Effector2DEditor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class PolygonCollider2DEditor extends UnityEditor.Collider2DEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class PolygonEditorUtility extends System.Object {
    constructor();
    OnSceneGUI(): void;
    Reset(): void;
    StartEditing(collider: any): void;
    StopEditing(): void;
  }
}
declare namespace UnityEditor {
  class PrefabInspector extends System.Object {
    constructor();
    static OnOverridenPrefabsInspector(gameObject: any): void;
  }
}
declare namespace UnityEditor {
  class PreviewScene extends System.Object {
    constructor(sceneName: string);
    AddGameObject(go: any): void;
    AddManagedGO(go: any): void;
    Dispose(): void;
    readonly camera: any;
    readonly scene: any;
  }
}
declare namespace UnityEditor {
  class PreviewRenderUtility extends System.Object {
    constructor(renderFullScene: boolean);
    constructor(renderFullScene: boolean, pixelPerfect: boolean);
    constructor();
    AddSingleGO(go: any): void;
    AddSingleGO(go: any, instantiateAtZero: boolean): void;
    BeginPreview(r: any, previewBackground: any): void;
    BeginPreviewHDR(r: any, previewBackground: any): void;
    BeginStaticPreview(r: any): void;
    BeginStaticPreviewHDR(r: any): void;
    Cleanup(): void;
    DrawMesh(mesh: any, matrix: any, mat: any, subMeshIndex: number): void;
    DrawMesh(mesh: any, matrix: any, mat: any, subMeshIndex: number, customProperties: any): void;
    DrawMesh(mesh: any, m: any, mat: any, subMeshIndex: number, customProperties: any, probeAnchor: any, useLightProbe: boolean): void;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number): void;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number, customProperties: any): void;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number, customProperties: any, probeAnchor: any): void;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number, customProperties: any, probeAnchor: any, useLightProbe: boolean): void;
    DrawMesh(mesh: any, pos: any, scale: any, rot: any, mat: any, subMeshIndex: number, customProperties: any, probeAnchor: any, useLightProbe: boolean): void;
    EndAndDrawPreview(r: any): void;
    EndPreview(): any;
    EndStaticPreview(): any;
    GetScaleFactor(width: number, height: number): number;
    InstantiatePrefabInScene(prefab: any): any;
    Render(allowScriptableRenderPipeline?: boolean, updatefov?: boolean): void;
    ambientColor: any;
    readonly camera: any;
    cameraFieldOfView: number;
    readonly lights: any[];
    m_Camera: any;
    m_CameraFieldOfView: number;
    m_Light: any[];
  }
}
declare namespace UnityEditor {
  class SavedRenderTargetState extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class PreviewWindow extends UnityEditor.InspectorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    GetLastInteractedEditor(): UnityEditor.Editor;
    SetParentInspector(inspector: UnityEditor.InspectorWindow): void;
  }
}
declare namespace UnityEditor {
  class ProceduralMaterialInspector extends UnityEditor.MaterialEditor {
    constructor();
    Awake(): void;
    BuildTargetList(): void;
    DisableReimportOnDisable(): void;
    static ExportBitmapsAlphaRemap(command: UnityEditor.MenuCommand): void;
    static ExportBitmapsNoAlphaRemap(command: UnityEditor.MenuCommand): void;
    static ExportPreset(command: UnityEditor.MenuCommand): void;
    GetInfoString(): string;
    HasProceduralTextureProperties(material: any): boolean;
    InputsGUI(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    ReimportSubstances(): void;
    ReimportSubstancesIfNeeded(): void;
    static ResetSubstance(command: UnityEditor.MenuCommand): void;
    static ShowIsGenerating(mat: any): boolean;
    ShowTextureSizeGUI(): void;
    UndoRedoPerformed(): void;
  }
}
declare namespace UnityEditor.ProceduralMaterialInspector {
  class Styles extends System.Object {
    constructor();
    animatedContent: any;
    defaultPlatform: any;
    generateAllOutputsContent: any;
    hslContent: any;
    loadBehavior: any;
    mipmapContent: any;
    randomizeButtonContent: any;
    randomSeedContent: any;
    targetHeight: any;
    targetWidth: any;
    textureFormat: any;
  }
}
declare namespace UnityEditor.ProceduralMaterialInspector {
  class ProceduralPlatformSetting extends System.Object {
    constructor(objects: UnityEngine.Object[], _name: string, _target: UnityEditor.BuildTarget, _icon: any);
    Apply(): void;
    ClearOverride(master: UnityEditor.ProceduralMaterialInspector.ProceduralPlatformSetting): void;
    HasChanged(): boolean;
    SetOverride(master: UnityEditor.ProceduralMaterialInspector.ProceduralPlatformSetting): void;
    readonly isDefault: boolean;
    readonly overridden: boolean;
    textureFormat: number;
    icon: any;
    m_LoadBehavior: number;
    m_Overridden: boolean;
    m_TextureFormat: number;
    maxTextureHeight: number;
    maxTextureWidth: number;
    name: string;
    target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor {
  class ProceduralTextureInspector extends UnityEditor.TextureInspector {
    constructor();
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor {
  class PropertyHandlerCache extends System.Object {
    constructor();
    Clear(): void;
  }
}
declare namespace UnityEditor {
  class QualitySettingsEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    static kMaxAsyncRingBufferSize: number;
    static kMaxAsyncUploadTimeSlice: number;
    static kMinAsyncRingBufferSize: number;
    static kMinAsyncUploadTimeSlice: number;
  }
}
declare namespace UnityEditor.QualitySettingsEditor {
  class Styles extends System.Object {
    protected constructor();
    static kAddQualityLevel: any;
    static kBillboardsFaceCameraPos: any;
    static kDefaultDropdown: any;
    static kDefaultToggle: any;
    static kHeaderRowHeight: number;
    static kIconTrash: any;
    static kLabelWidth: number;
    static kListEvenBg: any;
    static kListOddBg: any;
    static kMaxToggleWidth: number;
    static kMinToggleWidth: number;
    static kPlatformTooltip: any;
    static kSoftParticlesHint: any;
    static kToggle: any;
  }
}
declare namespace UnityEditor.QualitySettingsEditor {
  class QualitySetting extends System.ValueType {
    protected constructor();
    m_ExcludedPlatforms: string[];
    m_Name: string;
    m_PropertyPath: string;
  }
}
declare namespace UnityEditor.QualitySettingsEditor {
  class Dragging extends System.Object {
    constructor();
    m_Position: number;
    m_StartPosition: number;
  }
}
declare namespace UnityEditor {
  class RectHandles extends System.Object {
    constructor();
    static AngleAroundAxis(dirA: any, dirB: any, axis: any): number;
    static DrawDottedLineWithShadow(shadowColor: any, screenOffset: any, p1: any, p2: any, screenSpaceSize: number): void;
    static DrawPolyLineWithShadow(shadowColor: any, screenOffset: any, points: any[]): void;
    static PivotHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static RectScalingHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static RenderRectWithShadow(active: boolean, corners: any[]): void;
    static RotationSlider(id: number, cornerPos: any, rotation: number, pivot: any, handleDir: any, outwardsDir1: any, outwardsDir2: any, handleSize: number, drawFunc: ((controlID: number, position: any, rotation: any, size: number, eventType: any) => void), snap: any): number;
  }
}
declare namespace UnityEditor.RectHandles {
  class Styles extends System.Object {
    constructor();
    dragdot: any;
    dragdotactive: any;
    pivotdot: any;
    pivotdotactive: any;
  }
}
declare namespace UnityEditor {
  class RectTransformEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
    static SetAnchorSmart(rect: any, value: number, axis: number, isMax: boolean, smart: boolean): void;
    static SetAnchorSmart(rect: any, value: number, axis: number, isMax: boolean, smart: boolean, enforceExactValue: boolean): void;
    static SetAnchorSmart(rect: any, value: number, axis: number, isMax: boolean, smart: boolean, enforceExactValue: boolean, enforceMinNoLargerThanMax: boolean, moveTogether: boolean): void;
    static SetPivotSmart(rect: any, value: number, axis: number, smart: boolean, parentSpace: boolean): void;
  }
}
declare namespace UnityEditor.RectTransformEditor {
  class Styles extends System.Object {
    constructor();
    anchorMaxContent: any;
    anchorMinContent: any;
    anchorsContent: any;
    blueprintContent: any;
    measuringLabelStyle: any;
    pivotContent: any;
    rawEditContent: any;
    transformScaleContent: any;
  }
}
declare namespace UnityEditor.RectTransformEditor {
  class AnchorFusedState extends System.Enum {
    protected constructor();
    static All: UnityEditor.RectTransformEditor.AnchorFusedState;
    static Horizontal: UnityEditor.RectTransformEditor.AnchorFusedState;
    static None: UnityEditor.RectTransformEditor.AnchorFusedState;
    value__: number;
    static Vertical: UnityEditor.RectTransformEditor.AnchorFusedState;
  }
}
declare namespace UnityEditor {
  class SnapGuideCollection extends System.Object {
    constructor();
    AddGuide(guide: UnityEditor.SnapGuide): void;
    Clear(): void;
    DrawGuides(): void;
    OnGUI(): void;
    SnapToGuides(value: number, snapDistance: number): number;
  }
}
declare namespace UnityEditor {
  class SnapGuide extends System.Object {
    constructor(value: number, vertices: any[]);
    constructor(value: number, safe: boolean, vertices: any[]);
    Draw(): void;
    lineVertices: any[];
    safe: boolean;
    value: number;
  }
}
declare namespace UnityEditor {
  class RectTransformSnapping extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class ReflectionProbeEditor extends UnityEditor.Editor {
    constructor();
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(position: any, style: any): void;
    OnPreviewSettings(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.ReflectionProbeEditor {
  class Styles extends System.Object {
    protected constructor();
    static backgroundColorText: any;
    static bakeButtonsText: string[];
    static bakeButtonText: string;
    static bakeCustomButtonText: any;
    static bakeCustomOptionText: string[];
    static baseSceneEditingToolText: string;
    static blendDistanceText: any;
    static boxProjectionText: any;
    static captureCubemapHeaderText: any;
    static centerText: any;
    static clearFlags: any[];
    static clearFlagsText: any;
    static clearFlagsValues: number[];
    static customCubemapText: any;
    static importanceText: any;
    static intensityText: any;
    static reflectionProbeMode: any[];
    static reflectionProbeModeValues: number[];
    static refreshMode: any;
    static renderDynamicObjects: any;
    static renderTextureSizes: any[];
    static renderTextureSizesValues: number[];
    static resolutionText: any;
    static richTextMiniLabel: any;
    static runtimeSettingsHeader: any;
    static sceneViewEditModes: UnityEditorInternal.EditMode.SceneViewEditMode[];
    static sizeText: any;
    static timeSlicing: any;
    static toolContents: any[];
    static toolNames: any[];
    static typeText: any;
  }
}
declare namespace UnityEditor {
  class RelativeJoint2DEditor extends UnityEditor.Joint2DEditor {
    constructor();
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.RendererEditorBase {
  class Probes extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class RenderSettingsInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.RenderTextureEditor {
  class Styles extends System.Object {
    constructor();
    antiAliasing: any;
    autoGeneratesMipmaps: any;
    colorFormat: any;
    cross: any;
    depthBuffer: any;
    dimension: any;
    dimensionStrings: any[];
    dimensionValues: number[];
    enableMipmaps: any;
    renderTextureAntiAliasing: any[];
    renderTextureAntiAliasingValues: number[];
    size: any;
    sRGBTexture: any;
  }
}
declare namespace UnityEditor.RenderTextureEditor {
  class GUIElements extends System.Enum {
    protected constructor();
    static RenderTargetAAGUI: UnityEditor.RenderTextureEditor.GUIElements;
    static RenderTargetDepthGUI: UnityEditor.RenderTextureEditor.GUIElements;
    static RenderTargetNoneGUI: UnityEditor.RenderTextureEditor.GUIElements;
    value__: number;
  }
}
declare namespace UnityEditor {
  class Rigidbody2DEditor extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class RigidbodyEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class ScriptExecutionOrderInspector extends UnityEditor.Editor {
    constructor();
    DrawElement(r: any, obj: any, dragging: boolean): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    UseDefaultMargins(): boolean;
    static m_Styles: UnityEditor.ScriptExecutionOrderInspector.Styles;
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class SortMonoScriptNameOrder extends System.Object {
    constructor();
    Compare(x: UnityEditor.MonoScript, y: UnityEditor.MonoScript): number;
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class SortMonoScriptExecutionOrder extends UnityEditor.ScriptExecutionOrderInspector.SortMonoScriptNameOrder {
    constructor(inspector: UnityEditor.ScriptExecutionOrderInspector);
    Compare(x: UnityEditor.MonoScript, y: UnityEditor.MonoScript): number;
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class Styles extends System.Object {
    constructor();
    boxBackground: any;
    defaultTime: any;
    defaultTimeContent: any;
    draggingHandle: any;
    dropField: any;
    elementBackground: any;
    helpText: any;
    iconToolbarMinus: any;
    iconToolbarPlus: any;
    removeButton: any;
    toolbar: any;
    toolbarDropDown: any;
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class DragReorderGUI extends System.Object {
    constructor();
    static DragReorder(position: any, elementHeight: number, elements: UnityEditor.MonoScript[], drawElementDelegate: ((r: any, obj: any, dragging: boolean) => void)): number;
  }
}
declare namespace UnityEditor {
  class ShaderGUIUtility extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class ShaderImporterInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    HasModified(): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class ShaderInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.ShaderInspector {
  class Styles extends System.Object {
    constructor();
    static builtinShader: any;
    static errorIcon: any;
    static evenBackground: any;
    static messageStyle: any;
    static no: any;
    static showCurrent: any;
    static showFF: any;
    static showSurface: any;
    static warningIcon: any;
  }
}
declare namespace UnityEditor {
  class ShaderInspectorPlatformsPopup extends UnityEditor.PopupWindowContent {
    constructor(shader: any);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    static currentMode: number;
    static currentPlatformMask: number;
    static currentVariantStripping: number;
  }
}
declare namespace UnityEditor.ShaderInspectorPlatformsPopup {
  class Styles extends System.Object {
    constructor();
    static menuItem: any;
    static separator: any;
  }
}
declare namespace UnityEditor {
  class ShaderVariantCollectionInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.ShaderVariantCollectionInspector {
  class Styles extends System.Object {
    constructor();
    static iconAdd: any;
    static iconRemove: any;
    static invisibleButton: any;
  }
}
declare namespace UnityEditor {
  class AddShaderVariantWindow extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
    static ShowAddVariantWindow(data: UnityEditor.AddShaderVariantWindow.PopupData): void;
  }
}
declare namespace UnityEditor.AddShaderVariantWindow {
  class PopupData extends System.Object {
    constructor();
    collection: any;
    keywords: string[][];
    shader: any;
    types: number[];
  }
}
declare namespace UnityEditor.AddShaderVariantWindow {
  class Styles extends System.Object {
    constructor();
    static sMenuItem: any;
    static sSeparator: any;
  }
}
declare namespace UnityEditor {
  class ShadowCascadeSplitGUI extends System.Object {
    protected constructor();
    static HandleCascadeSliderGUI(normalizedCascadePartitions: any): void;
  }
}
declare namespace UnityEditor.ShadowCascadeSplitGUI {
  class DragCache extends System.Object {
    constructor(activePartition: number, normalizedPartitionSize: number, currentMousePos: any);
    m_ActivePartition: number;
    m_LastCachedMousePosition: any;
    m_NormalizedPartitionSize: number;
  }
}
declare namespace UnityEditor {
  class SkinnedMeshRendererEditor extends UnityEditor.RendererEditorBase {
    constructor();
    OnBlendShapeUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class SkyboxProceduralShaderGUI extends UnityEditor.ShaderGUI {
    constructor();
    OnGUI(materialEditor: UnityEditor.MaterialEditor, props: UnityEditor.MaterialProperty[]): void;
  }
}
declare namespace UnityEditor.SkyboxProceduralShaderGUI {
  class SunDiskMode extends System.Enum {
    protected constructor();
    static HighQuality: UnityEditor.SkyboxProceduralShaderGUI.SunDiskMode;
    static None: UnityEditor.SkyboxProceduralShaderGUI.SunDiskMode;
    static Simple: UnityEditor.SkyboxProceduralShaderGUI.SunDiskMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SliderJoint2DEditor extends UnityEditor.AnchoredJoint2DEditor {
    constructor();
    OnSceneGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class SortingGroupEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class SortingLayerEditorUtility extends System.Object {
    constructor();
    static RenderSortingLayerFields(sortingOrder: UnityEditor.SerializedProperty, sortingLayer: UnityEditor.SerializedProperty): void;
    static RenderSortingLayerFields(r: any, sortingOrder: UnityEditor.SerializedProperty, sortingLayer: UnityEditor.SerializedProperty): void;
  }
}
declare namespace UnityEditor.SortingLayerEditorUtility {
  class Styles extends System.Object {
    protected constructor();
    static m_SortingLayerStyle: any;
    static m_SortingOrderStyle: any;
  }
}
declare namespace UnityEditor {
  class SpeedTreeMaterialInspector extends UnityEditor.MaterialEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.SpeedTreeMaterialInspector {
  class SpeedTreeGeometryType extends System.Enum {
    protected constructor();
    static Branch: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static BranchDetail: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static Frond: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static Leaf: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static Mesh: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SphereColliderEditor extends UnityEditor.PrimitiveCollider3DEditor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class SpringJoint2DEditor extends UnityEditor.AnchoredJoint2DEditor {
    constructor();
    OnSceneGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class SpriteInspector extends UnityEditor.Editor {
    constructor();
    static BuildPreviewTexture(width: number, height: number, sprite: any, spriteRendererMaterial: any, isPolygon: boolean): any;
    DrawPreview(previewArea: any): void;
    static DrawPreview(r: any, frame: any, spriteRendererMaterial: any, isPolygon: boolean): void;
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    RenderStaticPreview(assetPath: string, subAssets: UnityEngine.Object[], width: number, height: number): any;
  }
}
declare namespace UnityEditor.SpriteInspector {
  class Styles extends System.Object {
    protected constructor();
    static spriteAlignment: any;
    static spriteAlignmentOptions: any[];
  }
}
declare namespace UnityEditor {
  class SpriteMaskEditor extends UnityEditor.RendererEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.SpriteMaskEditor {
  class Contents extends System.Object {
    protected constructor();
    static alphaCutoffLabel: any;
    static backLabel: any;
    static createSpriteMaskUndoString: any;
    static frontLabel: any;
    static isCustomRangeActive: any;
    static newSpriteMaskName: any;
    static spriteLabel: any;
  }
}
declare namespace UnityEditor {
  class SpriteRendererEditor extends UnityEditor.RendererEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.SpriteRendererEditor {
  class Contents extends System.Object {
    protected constructor();
    static colorLabel: any;
    static drawModeLabel: any;
    static flipLabel: any;
    static flipToggleHash: number;
    static flipXLabel: any;
    static flipYLabel: any;
    static fullTileLabel: any;
    static fullTileThresholdLabel: any;
    static heightLabel: any;
    static materialLabel: any;
    static notFullRectMultiEditWarningLabel: any;
    static notFullRectWarningLabel: any;
    static sizeFieldHash: number;
    static sizeLabel: any;
    static spriteLabel: any;
    static warningIcon: any;
    static widthLabel: any;
  }
}
declare namespace UnityEditor {
  class StandardRoughnessShaderGUI extends UnityEditor.ShaderGUI {
    constructor();
    AssignNewShaderToMaterial(material: any, oldShader: any, newShader: any): void;
    FindProperties(props: UnityEditor.MaterialProperty[]): void;
    OnGUI(materialEditor: UnityEditor.MaterialEditor, props: UnityEditor.MaterialProperty[]): void;
    static SetupMaterialWithBlendMode(material: any, blendMode: UnityEditor.StandardRoughnessShaderGUI.BlendMode): void;
    ShaderPropertiesGUI(material: any): void;
  }
}
declare namespace UnityEditor.StandardRoughnessShaderGUI {
  class BlendMode extends System.Enum {
    protected constructor();
    static Cutout: UnityEditor.StandardRoughnessShaderGUI.BlendMode;
    static Fade: UnityEditor.StandardRoughnessShaderGUI.BlendMode;
    static Opaque: UnityEditor.StandardRoughnessShaderGUI.BlendMode;
    static Transparent: UnityEditor.StandardRoughnessShaderGUI.BlendMode;
    value__: number;
  }
}
declare namespace UnityEditor.StandardRoughnessShaderGUI {
  class Styles extends System.Object {
    protected constructor();
    static advancedText: string;
    static albedoText: any;
    static alphaCutoffText: any;
    static blendNames: string[];
    static detailAlbedoText: any;
    static detailMaskText: any;
    static detailNormalMapText: any;
    static emissionText: any;
    static emissiveWarning: any;
    static forwardText: string;
    static heightMapText: any;
    static highlightsText: any;
    static metallicMapText: any;
    static normalMapText: any;
    static occlusionText: any;
    static primaryMapsText: string;
    static reflectionsText: any;
    static renderingMode: string;
    static roughnessText: any;
    static secondaryMapsText: string;
    static uvSetLabel: any;
  }
}
declare namespace UnityEditor {
  class StandardShaderGUI extends UnityEditor.ShaderGUI {
    constructor();
    AssignNewShaderToMaterial(material: any, oldShader: any, newShader: any): void;
    FindProperties(props: UnityEditor.MaterialProperty[]): void;
    OnGUI(materialEditor: UnityEditor.MaterialEditor, props: UnityEditor.MaterialProperty[]): void;
    static SetupMaterialWithBlendMode(material: any, blendMode: UnityEditor.StandardShaderGUI.BlendMode): void;
    ShaderPropertiesGUI(material: any): void;
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class WorkflowMode extends System.Enum {
    protected constructor();
    static Dielectric: UnityEditor.StandardShaderGUI.WorkflowMode;
    static Metallic: UnityEditor.StandardShaderGUI.WorkflowMode;
    static Specular: UnityEditor.StandardShaderGUI.WorkflowMode;
    value__: number;
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class BlendMode extends System.Enum {
    protected constructor();
    static Cutout: UnityEditor.StandardShaderGUI.BlendMode;
    static Fade: UnityEditor.StandardShaderGUI.BlendMode;
    static Opaque: UnityEditor.StandardShaderGUI.BlendMode;
    static Transparent: UnityEditor.StandardShaderGUI.BlendMode;
    value__: number;
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class SmoothnessMapChannel extends System.Enum {
    protected constructor();
    static AlbedoAlpha: UnityEditor.StandardShaderGUI.SmoothnessMapChannel;
    static SpecularMetallicAlpha: UnityEditor.StandardShaderGUI.SmoothnessMapChannel;
    value__: number;
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class Styles extends System.Object {
    protected constructor();
    static advancedText: string;
    static albedoText: any;
    static alphaCutoffText: any;
    static blendNames: string[];
    static detailAlbedoText: any;
    static detailMaskText: any;
    static detailNormalMapText: any;
    static emissionText: any;
    static emissiveWarning: any;
    static forwardText: string;
    static heightMapText: any;
    static highlightsText: any;
    static metallicMapText: any;
    static normalMapText: any;
    static occlusionText: any;
    static primaryMapsText: string;
    static reflectionsText: any;
    static renderingMode: string;
    static secondaryMapsText: string;
    static smoothnessMapChannelText: any;
    static smoothnessScaleText: any;
    static smoothnessText: any;
    static specularMapText: any;
    static uvSetLabel: any;
  }
}
declare namespace UnityEditor {
  class SurfaceEffector2DEditor extends UnityEditor.Effector2DEditor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class TabbedEditor extends UnityEditor.Editor {
    protected constructor();
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    readonly activeEditor: UnityEditor.Editor;
  }
}
declare namespace UnityEditor {
  class TagManagerInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    ReorderSortLayerList(list: UnityEditorInternal.ReorderableList): void;
    readonly tagManager: UnityEditor.TagManager;
  }
}
declare namespace UnityEditor.TagManagerInspector {
  class InitialExpansionState extends System.Enum {
    protected constructor();
    static Layers: UnityEditor.TagManagerInspector.InitialExpansionState;
    static None: UnityEditor.TagManagerInspector.InitialExpansionState;
    static SortingLayers: UnityEditor.TagManagerInspector.InitialExpansionState;
    static Tags: UnityEditor.TagManagerInspector.InitialExpansionState;
    value__: number;
  }
}
declare namespace UnityEditor.TagManagerInspector {
  class EnterNamePopup extends UnityEditor.PopupWindowContent {
    constructor(tags: UnityEditor.SerializedProperty, cb: ((str: string) => void));
    GetWindowSize(): any;
    OnGUI(windowRect: any): void;
  }
}
declare namespace UnityEditor {
  class TargetJoint2DEditor extends UnityEditor.Joint2DEditor {
    constructor();
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class TextMeshInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class Texture3DInspector extends UnityEditor.TextureInspector {
    constructor();
    GetInfoString(): string;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    m_PreviewDir: any;
  }
}
declare namespace UnityEditor {
  class PreviewHelpers extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.TextureInspector {
  class Styles extends System.Object {
    constructor();
    alphaIcon: any;
    largeZoom: any;
    previewButton: any;
    previewLabel: any;
    previewSlider: any;
    previewSliderThumb: any;
    RGBIcon: any;
    smallZoom: any;
    wrapModeContents: any[];
    wrapModeLabel: any;
    wrapModeValues: number[];
    wrapU: any;
    wrapV: any;
    wrapW: any;
  }
}
  class PreviewGUI extends System.Object {
    constructor();
    static CycleButton(selected: number, options: any[]): number;
    static Drag2D(scrollPosition: any, position: any): any;
    static EndScrollView(): any;
  }
declare namespace PreviewGUI {
  class Styles extends System.Object {
    constructor();
    static Init(): void;
    static preButton: any;
  }
}
declare namespace UnityEditor {
  class TimeControl extends System.Object {
    constructor();
    DoTimeControl(rect: any): void;
    OnDisable(): void;
    Update(): void;
    deltaTime: number;
    normalizedTime: number;
    playing: boolean;
    currentTime: number;
    loop: boolean;
    playbackSpeed: number;
    playSelection: boolean;
    startTime: number;
    stopTime: number;
  }
}
declare namespace UnityEditor.TimeControl {
  class Styles extends System.Object {
    constructor();
    pauseIcon: any;
    playButton: any;
    playIcon: any;
    timeScrubber: any;
  }
}
declare namespace UnityEditor {
  class TimelineControl extends System.Object {
    constructor();
    DoTimeline(timeRect: any): boolean;
    ResetRange(): void;
    readonly DstDuration: number;
    dstLoop: boolean;
    DstName: string;
    DstPivotList: UnityEditor.TimelineControl.PivotSample[];
    DstStartTime: number;
    DstStopTime: number;
    HasExitTime: boolean;
    SampleStopTime: number;
    readonly SrcDuration: number;
    srcLoop: boolean;
    SrcName: string;
    SrcPivotList: UnityEditor.TimelineControl.PivotSample[];
    SrcStartTime: number;
    SrcStopTime: number;
    StartTime: number;
    StopTime: number;
    Time: number;
    readonly TransitionDuration: number;
    TransitionStartTime: number;
    TransitionStopTime: number;
  }
}
declare namespace UnityEditor.TimelineControl {
  class DragStates extends System.Enum {
    protected constructor();
    static Destination: UnityEditor.TimelineControl.DragStates;
    static FullSelection: UnityEditor.TimelineControl.DragStates;
    static LeftSelection: UnityEditor.TimelineControl.DragStates;
    static None: UnityEditor.TimelineControl.DragStates;
    static Playhead: UnityEditor.TimelineControl.DragStates;
    static RightSelection: UnityEditor.TimelineControl.DragStates;
    static Source: UnityEditor.TimelineControl.DragStates;
    static TimeArea: UnityEditor.TimelineControl.DragStates;
    value__: number;
  }
}
declare namespace UnityEditor.TimelineControl {
  class Styles extends System.Object {
    constructor();
    background: any;
    block: any;
    handLeft: any;
    handLeftPrev: any;
    handRight: any;
    header: any;
    leftBlock: any;
    offLeft: any;
    offOn: any;
    offRight: any;
    onLeft: any;
    onOff: any;
    onRight: any;
    playhead: any;
    rightBlock: any;
    select: any;
    selectHead: any;
    timeBlockLeft: any;
    timeBlockRight: any;
  }
}
declare namespace UnityEditor.TimelineControl {
  class PivotSample extends System.Object {
    constructor();
    m_Time: number;
    m_Weight: number;
  }
}
declare namespace UnityEditor {
  class TrailRendererInspector extends UnityEditor.RendererEditorBase {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.TrailRendererInspector {
  class Styles extends System.Object {
    constructor();
    static alignment: any;
    static colorGradient: any;
    static generateLightingData: any;
    static numCapVertices: any;
    static numCornerVertices: any;
    static textureMode: any;
  }
}
declare namespace UnityEditor {
  class TransformInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.TransformInspector {
  class Contents extends System.Object {
    constructor();
    floatingPointWarning: string;
    positionContent: any;
    scaleContent: any;
  }
}
declare namespace UnityEditor {
  class TransformRotationGUI extends System.Object {
    constructor();
    OnEnable(m_Rotation: UnityEditor.SerializedProperty, label: any): void;
    RotationField(): void;
    RotationField(disabled: boolean): void;
  }
}
declare namespace UnityEditor {
  class TransformUtils extends System.Object {
    protected constructor();
    static GetInspectorRotation(t: any): any;
    static SetInspectorRotation(t: any, r: any): void;
  }
}
declare namespace UnityEditorInternal {
  class UnityEventDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    static IsPersistantListenerValid(dummyEvent: UnityEngine.Events.UnityEventBase, methodName: string, uObject: UnityEngine.Object, modeEnum: any, argumentType: any): boolean;
    OnGUI(position: any): void;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor {
  class PropertyDrawer extends UnityEditor.GUIDrawer {
    protected constructor();
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    readonly attribute: any;
    readonly fieldInfo: any;
  }
}
declare namespace UnityEditor {
  class GUIDrawer extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class State extends System.Object {
    constructor();
    lastSelectedIndex: number;
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class ValidMethodMap extends System.ValueType {
    protected constructor();
    methodInfo: any;
    mode: any;
    target: UnityEngine.Object;
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class UnityEventFunction extends System.ValueType {
    protected constructor();
    Assign(): void;
    Clear(): void;
  }
}
declare namespace UnityEditor {
  class VideoClipInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor {
  class VideoPlayerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.VideoPlayerEditor {
  class Styles extends System.Object {
    constructor();
    alphaContent: any;
    aspectRatioLabel: any;
    audioControlsNotEditableHelp: string;
    audioOutputModeContent: any;
    audioSourceContent: any;
    browseContent: any;
    cameraContent: any;
    controlledAudioTrackCountContent: any;
    dataSourceContent: any;
    enableDecodingTooltip: string;
    invalidTexPropSelectionHelp: string;
    loopContent: any;
    materialPropertyContent: any;
    materialRendererContent: any;
    muteLabel: any;
    oneInvalidTexPropSelectionHelp: string;
    playbackSpeedContent: any;
    playOnAwakeContent: any;
    rendererMaterialsHaveNoTexPropsHelp: string;
    renderModeContent: any;
    selectMovieFile: string;
    selectUniformAudioOutputModeHelp: string;
    selectUniformAudioTracksHelp: string;
    selectUniformVideoRenderModeHelp: string;
    selectUniformVideoSourceHelp: string;
    someInvalidTexPropSelectionsHelp: string;
    someRendererMaterialsHaveNoTexPropsHelp: string;
    texPropInAllMaterialsHelp: string;
    texPropInSomeMaterialsHelp: string;
    textureContent: any;
    urlContent: any;
    videoClipContent: any;
    volumeLabel: any;
    waitForFirstFrameContent: any;
  }
}
declare namespace UnityEditor.VideoPlayerEditor {
  class AudioTrackInfo extends System.Object {
    constructor();
    channelCount: number;
    content: any;
    language: string;
  }
}
declare namespace UnityEditor {
  class WebCamTextureInspector extends UnityEditor.Editor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
  }
}
declare namespace UnityEditor {
  class WheelColliderEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class WheelJoint2DEditor extends UnityEditor.AnchoredJoint2DEditor {
    constructor();
    OnSceneGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class WindInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.WindInspector {
  class Styles extends System.Object {
    constructor();
    static Mode: any;
    static Radius: any;
    static WindMain: any;
    static WindPulseFrequency: any;
    static WindPulseMagnitude: any;
    static WindTurbulence: any;
  }
}
declare namespace UnityEditor {
  class AvatarAutoMapper extends System.Object {
    constructor(validBones: any);
    static InitGlobalMappingData(): void;
    MapBones(root: any): any;
    static MapBones(root: any, validBones: any): any;
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class Side extends System.Enum {
    protected constructor();
    static Left: UnityEditor.AvatarAutoMapper.Side;
    static None: UnityEditor.AvatarAutoMapper.Side;
    static Right: UnityEditor.AvatarAutoMapper.Side;
    value__: number;
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class BoneMappingItem extends System.ValueType {
    protected constructor();
    GetChildren(mappingData: UnityEditor.AvatarAutoMapper.BoneMappingItem[]): number[];
    alwaysInclude: boolean;
    bone: number;
    dir: any;
    keywords: string[];
    lengthRatio: number;
    maxStep: number;
    minStep: number;
    optional: boolean;
    parent: number;
    side: UnityEditor.AvatarAutoMapper.Side;
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class BoneMatch extends System.Object {
    constructor(parent: UnityEditor.AvatarAutoMapper.BoneMatch, bone: any, item: UnityEditor.AvatarAutoMapper.BoneMappingItem);
    CompareTo(other: UnityEditor.AvatarAutoMapper.BoneMatch): number;
    readonly humanBoneParent: UnityEditor.AvatarAutoMapper.BoneMatch;
    readonly totalSiblingScore: number;
    bone: any;
    children: UnityEditor.AvatarAutoMapper.BoneMatch[];
    debugTracker: string[];
    doMap: boolean;
    item: UnityEditor.AvatarAutoMapper.BoneMappingItem;
    parent: UnityEditor.AvatarAutoMapper.BoneMatch;
    score: number;
    siblingScore: number;
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class QueuedBone extends System.ValueType {
    protected constructor();
    bone: any;
    level: number;
  }
}
declare namespace UnityEditor {
  class AvatarBipedMapper extends System.Object {
    constructor();
    static IsBiped(root: any, report: string[]): boolean;
    static MapBones(root: any): any;
  }
}
declare namespace UnityEditor.AvatarBipedMapper {
  class BipedBone extends System.ValueType {
    protected constructor();
    index: number;
    name: string;
  }
}
declare namespace UnityEditor {
  class AvatarColliderEditor extends UnityEditor.AvatarSubEditor {
    constructor();
  }
}
declare namespace UnityEditor {
  class AvatarSubEditor extends UnityEngine.ScriptableObject {
    constructor();
    ApplyAndImport(): void;
    Disable(): void;
    Enable(inspector: UnityEditor.AvatarEditor): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor {
  class BodyPart extends System.Enum {
    protected constructor();
    static Avatar: UnityEditor.BodyPart;
    static Body: UnityEditor.BodyPart;
    static Head: UnityEditor.BodyPart;
    static Last: UnityEditor.BodyPart;
    static LeftArm: UnityEditor.BodyPart;
    static LeftFingers: UnityEditor.BodyPart;
    static LeftLeg: UnityEditor.BodyPart;
    static None: UnityEditor.BodyPart;
    static RightArm: UnityEditor.BodyPart;
    static RightFingers: UnityEditor.BodyPart;
    static RightLeg: UnityEditor.BodyPart;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AvatarControl extends System.Object {
    constructor();
    static DrawBodyParts(rect: any, shownBodyView: number, bodyPartCallback: ((bodyPart: UnityEditor.BodyPart) => UnityEditor.AvatarControl.BodyPartColor)): void;
    static GetViewsThatContainBone(bone: number): number[];
    static ShowBoneMapping(shownBodyView: number, bodyPartCallback: ((bodyPart: UnityEditor.BodyPart) => UnityEditor.AvatarControl.BodyPartColor), bones: UnityEditor.AvatarSetupTool.BoneWrapper[], serializedObject: UnityEditor.SerializedObject, editor: UnityEditor.AvatarMappingEditor): number;
  }
}
declare namespace UnityEditor.AvatarControl {
  class Styles extends System.Object {
    constructor();
    BodyPart: any[];
    Silhouettes: any[];
  }
}
declare namespace UnityEditor.AvatarControl {
  class BodyPartColor extends System.Enum {
    protected constructor();
    static Green: UnityEditor.AvatarControl.BodyPartColor;
    static IKGreen: UnityEditor.AvatarControl.BodyPartColor;
    static IKRed: UnityEditor.AvatarControl.BodyPartColor;
    static Off: UnityEditor.AvatarControl.BodyPartColor;
    static Red: UnityEditor.AvatarControl.BodyPartColor;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AvatarEditor extends UnityEditor.Editor {
    constructor();
    HasFrameBounds(): boolean;
    OnGetFrameBounds(): any;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    Update(): void;
    UseDefaultMargins(): boolean;
    readonly prefab: any;
  }
}
declare namespace UnityEditor.AvatarEditor {
  class Styles extends System.Object {
    constructor();
    editCharacter: any;
    reset: any;
    tabs: any[];
  }
}
declare namespace UnityEditor.AvatarEditor {
  class EditMode extends System.Enum {
    protected constructor();
    static Editing: UnityEditor.AvatarEditor.EditMode;
    static NotEditing: UnityEditor.AvatarEditor.EditMode;
    static Starting: UnityEditor.AvatarEditor.EditMode;
    static Stopping: UnityEditor.AvatarEditor.EditMode;
    value__: number;
  }
}
declare namespace UnityEditor.AvatarEditor {
  class SceneStateCache extends System.Object {
    constructor();
    state: UnityEditor.SceneView.SceneViewState;
    view: UnityEditor.SceneView;
  }
}
declare namespace UnityEditor {
  class AvatarHandleEditor extends UnityEditor.AvatarSubEditor {
    constructor();
  }
}
declare namespace UnityEditor {
  class BoneState extends System.Enum {
    protected constructor();
    static BoneLenghtIsZero: UnityEditor.BoneState;
    static Duplicate: UnityEditor.BoneState;
    static InvalidHierarchy: UnityEditor.BoneState;
    static None: UnityEditor.BoneState;
    static NotFound: UnityEditor.BoneState;
    static Valid: UnityEditor.BoneState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class AvatarMappingEditor extends UnityEditor.AvatarSubEditor {
    constructor();
    Disable(): void;
    Enable(inspector: UnityEditor.AvatarEditor): void;
    static MatchName(transformName: string, boneName: string): boolean;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.AvatarMappingEditor {
  class Styles extends System.Object {
    constructor();
    autoMapping: any;
    bipedMapping: any;
    bipedPose: any;
    BodyPartMapping: any[];
    box: any;
    clearMapping: any;
    CloseError: any;
    DoneCharacter: any;
    dotFill: any;
    dotFrame: any;
    dotFrameDotted: any;
    dotSelection: any;
    enforceTPose: any;
    errorLabel: any;
    loadMapping: any;
    mapping: any;
    pose: any;
    RequiredBone: any;
    resetPose: any;
    sampleBindPose: any;
    saveMapping: any;
    ShowError: any;
    toolbar: any;
    toolbarDropDown: any;
  }
}
declare namespace UnityEditor {
  class AvatarMuscleEditor extends UnityEditor.AvatarSubEditor {
    constructor();
    DrawMuscleHandle(t: any, humanId: number): void;
    Enable(inspector: UnityEditor.AvatarEditor): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
  }
}
declare namespace UnityEditor.AvatarMuscleEditor {
  class Styles extends System.Object {
    constructor();
    armStretch: any;
    armTwist: any;
    box: any;
    feetSpacing: any;
    foreArmTwist: any;
    hasTranslationDoF: any;
    legStretch: any;
    legTwist: any;
    muscle: any;
    muscleBodyGroup: any[];
    muscleTypeGroup: any[];
    resetMuscle: any;
    title: any;
    toolbar: any;
    toolbarDropDown: any;
    upperLegTwist: any;
  }
}
declare namespace UnityEditor {
  class AvatarSetupTool extends System.Object {
    protected constructor();
    static AutoSetup(modelPrefab: any, modelInstance: any, modelImporterSerializedObject: UnityEditor.SerializedObject): void;
    static AutoSetupOnInstance(modelPrefab: any, modelImporterSerializedObject: UnityEditor.SerializedObject): void;
    static AvatarComputeOrientation(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): any;
    static AvatarComputeOrientation(leftUpLeg: any, rightUpLeg: any, leftArm: any, rightArm: any): any;
    static ClearAll(serializedObject: UnityEditor.SerializedObject): void;
    static ClearHumanBoneArray(serializedObject: UnityEditor.SerializedObject): void;
    static ClearSkeletonBoneArray(serializedObject: UnityEditor.SerializedObject): void;
    static CopyPose(go: any, source: any): void;
    static DebugTransformTree(tr: any, bones: any, level: number): void;
    static FindSkeletonBone(serializedObject: UnityEditor.SerializedObject, t: any, createMissing: boolean, isRoot: boolean): UnityEditor.SerializedProperty;
    static FindSkeletonBone(skeletonBoneArray: UnityEditor.SerializedProperty, t: any, createMissing: boolean, isRoot: boolean): UnityEditor.SerializedProperty;
    static GetBindPoseBonePositionRotation(skinMatrix: any, boneMatrix: any, bone: any, position: any, rotation: any): void;
    static GetBoneAlignmentError(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], avatarOrientation: any, boneIndex: number): number;
    static GetFirstHumanBoneAncestor(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], boneIndex: number): number;
    static GetHumanBoneChild(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], boneIndex: number): number;
    static GetHumanBones(serializedObject: UnityEditor.SerializedObject, actualBones: any): UnityEditor.AvatarSetupTool.BoneWrapper[];
    static GetModelBones(root: any, includeAll: boolean, humanBones: UnityEditor.AvatarSetupTool.BoneWrapper[]): any;
    static GetPoseError(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): number;
    static IsPoseValid(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): boolean;
    static IsPoseValidOnInstance(modelPrefab: any, modelImporterSerializedObject: UnityEditor.SerializedObject): boolean;
    static MakeBoneAlignmentValid(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], avatarOrientation: any, boneIndex: number): void;
    static MakePoseValid(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): void;
    static SampleBindPose(go: any): void;
    static ShowBindPose(skin: any): void;
    static TestAndValidateAutoSetup(modelAsset: any): boolean;
    static TransferDescriptionToPose(serializedObject: UnityEditor.SerializedObject, root: any): void;
    static TransferPoseToDescription(serializedObject: UnityEditor.SerializedObject, root: any): void;
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class BoneWrapper extends System.Object {
    constructor(humanBoneName: string, serializedObject: UnityEditor.SerializedObject, bones: any);
    BoneDotGUI(rect: any, selectRect: any, boneIndex: number, doClickSelect: boolean, doDragDrop: boolean, doDeleteKey: boolean, serializedObject: UnityEditor.SerializedObject, editor: UnityEditor.AvatarMappingEditor): void;
    GetSerializedProperty(serializedObject: UnityEditor.SerializedObject, createIfMissing: boolean): UnityEditor.SerializedProperty;
    HandleClickSelection(keyboardID: number, selectRect: any, boneIndex: number): void;
    HandleDeleteSelection(keyboardID: number, serializedObject: UnityEditor.SerializedObject, editor: UnityEditor.AvatarMappingEditor): void;
    Reset(serializedObject: UnityEditor.SerializedObject, bones: any): void;
    Serialize(serializedObject: UnityEditor.SerializedObject): void;
    readonly humanBoneName: string;
    readonly messageName: string;
    bone: any;
    error: string;
    static kIconSize: number;
    state: UnityEditor.BoneState;
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class BonePoseData extends System.Object {
    constructor(dir: any, globalSpace: boolean, maxAngleDiff: number);
    constructor(dir: any, globalSpace: boolean, maxAngleDiff: number, children: number[]);
    constructor(dir: any, globalSpace: boolean, maxAngleDiff: number, planeNormal: any, children: number[]);
    childIndices: number[];
    compareInGlobalSpace: boolean;
    direction: any;
    maxAngle: number;
    planeNormal: any;
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class SkinTransformHierarchySorter extends System.Object {
    constructor();
    Compare(skinA: any, skinB: any): number;
  }
}
declare namespace UnityEditor {
  class AvatarSkeletonDrawer extends System.Object {
    constructor();
    static DrawSkeleton(reference: any, actualBones: any): void;
    static DrawSkeleton(reference: any, actualBones: any, bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): void;
  }
}
declare namespace UnityEditor {
  class LightmapParametersEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.LightmapParametersEditor {
  class Styles extends System.Object {
    constructor();
    static antiAliasingSamplesContent: any;
    static aoAntiAliasingSamplesContent: any;
    static aoQualityContent: any;
    static backFaceToleranceContent: any;
    static bakedAOContent: any;
    static bakedGIContent: any;
    static bakedLightmapTagContent: any;
    static blurRadiusContent: any;
    static clusterResolutionContent: any;
    static directLightQualityContent: any;
    static edgeStitchingContent: any;
    static generalGIContent: any;
    static irradianceBudgetContent: any;
    static irradianceQualityContent: any;
    static isTransparent: any;
    static modellingToleranceContent: any;
    static precomputedRealtimeGIContent: any;
    static pushoffContent: any;
    static resolutionContent: any;
    static systemTagContent: any;
  }
}
declare namespace UnityEditor {
  class GridEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class PlayerSettingsEditor extends UnityEditor.Editor {
    constructor();
    BeginSettingsBox(nr: number, header: any): boolean;
    BrowseablePathProperty(propertyLabel: string, property: UnityEditor.SerializedProperty, browsePanelTitle: string, extension: string, dir: string): void;
    static BuildDisabledEnumPopup(selected: any, uiString: any): void;
    DebugAndCrashReportingGUI(platform: UnityEditor.Build.BuildPlatform, targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension, sectionIndex?: number): void;
    EndSettingsBox(): void;
    FindPropertyAssert(name: string): UnityEditor.SerializedProperty;
    IsMobileTarget(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    OnInspectorGUI(): void;
    OtherSectionGUI(platform: UnityEditor.Build.BuildPlatform, targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension, sectionIndex?: number): void;
    PublishSectionGUI(targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension, sectionIndex?: number): void;
    ResolutionSectionGUI(targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension, sectionIndex?: number): void;
    ShowSharedNote(): void;
    static SyncColorGamuts(): void;
    static SyncPlatformAPIsList(target: UnityEditor.BuildTarget): void;
    UseDefaultMargins(): boolean;
    m_VRSettings: UnityEditorInternal.VR.PlayerSettingsEditorVR;
  }
}
declare namespace UnityEditor.PlayerSettingsEditor {
  class Styles extends System.Object {
    protected constructor();
    static readonly undoChangedBatchingString: string;
    static readonly undoChangedBuildNumberString: string;
    static readonly undoChangedBundleIdentifierString: string;
    static readonly undoChangedGraphicsAPIString: string;
    static readonly undoChangedIconString: string;
    static accelerometerFrequency: any;
    static actionOnDotNetUnhandledException: any;
    static activeColorSpace: any;
    static activeInputHandling: any;
    static activeInputHandlingOptions: any[];
    static allowedAutoRotateToLandscapeLeft: any;
    static allowedAutoRotateToLandscapeRight: any;
    static allowedAutoRotateToPortrait: any;
    static allowedAutoRotateToPortraitUpsideDown: any;
    static allowedOrientationTitle: any;
    static allowFullscreenSwitch: any;
    static androidShowActivityIndicatorOnLoading: any;
    static aotOptions: any;
    static apiCompatibilityLevel: any;
    static apiCompatibilityLevel_NET_2_0: any;
    static apiCompatibilityLevel_NET_2_0_Subset: any;
    static apiCompatibilityLevel_NET_4_6: any;
    static apiCompatibilityLevel_WiiUSubset: any;
    static appleDeveloperTeamID: any;
    static applicationBuildNumber: any;
    static bakeCollisionMeshes: any;
    static cameraUsageDescription: any;
    static categoryBox: any;
    static colorGamut: any;
    static colorGamutForMac: any;
    static colorSpaceAndroidWarning: any;
    static colorSpaceIOSWarning: any;
    static colorSpaceTVOSWarning: any;
    static colorSpaceWebGLWarning: any;
    static configurationTitle: any;
    static crashReportingTitle: any;
    static cursorHotspot: any;
    static D3D11FullscreenMode: any;
    static D3D9FullscreenMode: any;
    static debuggingCrashReportingTitle: any;
    static debuggingTitle: any;
    static defaultCursor: any;
    static defaultIcon: any;
    static defaultIsFullScreen: any;
    static defaultScreenHeight: any;
    static defaultScreenOrientation: any;
    static defaultScreenWidth: any;
    static disableDepthAndStencilBuffers: any;
    static disableStatistics: any;
    static dynamicBatching: any;
    static enableCrashReportAPI: any;
    static enableInternalProfiler: any;
    static forceIOSSpeakersWhenRecording: any;
    static graphicsJobs: any;
    static graphicsJobsMode: any;
    static iconTitle: any;
    static identificationTitle: any;
    static IL2CPPAndroidExperimentalInfo: any;
    static iOSAllowHTTPDownload: any;
    static iosShowActivityIndicatorOnLoading: any;
    static iOSURLSchemes: any;
    static iPhoneScriptCallOptimization: any;
    static iPhoneStrippingLevel: any;
    static keepLoadedShadersAlive: any;
    static locationUsageDescription: any;
    static loggingTitle: any;
    static logObjCUncaughtExceptions: any;
    static macAppStoreCategory: any;
    static macAppStoreTitle: any;
    static macRetinaSupport: any;
    static metalAPIValidation: any;
    static metalEditorSupport: any;
    static metalForceHardShadows: any;
    static metalFramebufferOnly: any;
    static microphoneUsageDescription: any;
    static mTRendering: any;
    static multitaskingSupportTitle: any;
    static muteOtherAudioSources: any;
    static notApplicableInfo: any;
    static optimizationTitle: any;
    static orientationTitle: any;
    static otherSettingsTitle: any;
    static preloadedAssets: any;
    static prepareIOSForRecording: any;
    static protectGraphicsMemory: any;
    static publishingSettingsTitle: any;
    static recordingInfo: any;
    static renderingTitle: any;
    static require31: any;
    static requireAEP: any;
    static resolutionPresentationTitle: any;
    static resolutionTitle: any;
    static runInBackground: any;
    static scriptingBackend: any;
    static scriptingDefault: any;
    static scriptingDefineSymbols: any;
    static scriptingIL2CPP: any;
    static scriptingMono2x: any;
    static scriptingRuntimeVersion: any;
    static scriptingRuntimeVersionLatest: any;
    static scriptingRuntimeVersionLegacy: any;
    static scriptingWinRTDotNET: any;
    static sharedBetweenPlatformsInfo: any;
    static skinOnGPU: any;
    static skinOnGPUAndroidWarning: any;
    static skinOnGPUPS4: any;
    static standalonePlayerOptionsTitle: any;
    static staticBatching: any;
    static statusBarTitle: any;
    static stripEngineCode: any;
    static stripUnusedMeshComponents: any;
    static UIPrerenderedIcon: any;
    static UIRequiresFullScreen: any;
    static UIRequiresPersistentWiFi: any;
    static UIStatusBarHidden: any;
    static UIStatusBarStyle: any;
    static use32BitDisplayBuffer: any;
    static useMacAppStoreValidation: any;
    static useOnDemandResources: any;
    static useOSAutoRotation: any;
    static vertexChannelCompressionMask: any;
    static videoMemoryForVertexBuffers: any;
    static visibleInBackground: any;
    static vrSettingsMoved: any;
    static VRSupportOverridenInfo: any;
  }
}
declare namespace UnityEditor.PlayerSettingsEditor {
  class ChangeGraphicsApiAction extends System.ValueType {
    protected constructor();
    changeList: boolean;
    reloadGfx: boolean;
  }
}
declare namespace UnityEditor.PlayerSettingsEditor {
  class HwStatsServiceState extends System.ValueType {
    protected constructor();
    hwstats: boolean;
  }
}
declare namespace UnityEditor {
  class WebTemplate extends System.Object {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    ToGUIContent(defaultIcon: any): any;
    ToString(): string;
    readonly CustomKeys: string[];
    m_CustomKeys: string[];
    m_Name: string;
    m_Path: string;
    m_Thumbnail: any;
  }
}
declare namespace UnityEditor {
  class WebTemplateManagerBase extends System.Object {
    protected constructor();
    ClearTemplates(): void;
    GetTemplateIndex(path: string): number;
    SelectionUI(templateProp: UnityEditor.SerializedProperty): void;
    readonly builtinTemplatesFolder: string;
    readonly customTemplatesFolder: string;
    readonly defaultIcon: any;
    readonly TemplateGUIThumbnails: any[];
    readonly Templates: UnityEditor.WebTemplate[];
  }
}
declare namespace UnityEditor.WebTemplateManagerBase {
  class Styles extends System.Object {
    constructor();
    thumbnail: any;
    thumbnailLabel: any;
  }
}
declare namespace UnityEditorInternal {
  class MonoScripts extends System.Object {
    protected constructor();
    static CreateMonoScript(scriptContents: string, className: string, nameSpace: string, assemblyName: string, isEditorScript: boolean): UnityEditor.MonoScript;
  }
}
declare namespace UnityEditor.Web {
  class ClipboardAccess extends System.Object {
    protected constructor();
    CopyToClipboard(value: string): void;
    PasteFromClipboard(): string;
  }
}
declare namespace UnityEditor.Web {
  class JspmPropertyInfo extends System.Object {
    constructor(name: string, value: any);
    name: string;
    value: any;
  }
}
declare namespace UnityEditor.Web {
  class JspmMethodInfo extends System.Object {
    constructor(name: string, parameters: string[]);
    name: string;
    parameters: string[];
  }
}
declare namespace UnityEditor.Web {
  class JspmStubInfo extends System.Object {
    constructor(properties: UnityEditor.Web.JspmPropertyInfo[], methods: UnityEditor.Web.JspmMethodInfo[], events: string[]);
    events: string[];
    methods: UnityEditor.Web.JspmMethodInfo[];
    properties: UnityEditor.Web.JspmPropertyInfo[];
  }
}
declare namespace UnityEditor.Web {
  class JspmResult extends System.Object {
    constructor();
    constructor(messageID: number, status: number);
    messageID: number;
    status: number;
    version: number;
  }
}
declare namespace UnityEditor.Web {
  class JspmError extends UnityEditor.Web.JspmResult {
    constructor(messageID: number, status: number, errorClass: string, message: string);
    errorClass: string;
    message: string;
  }
}
declare namespace UnityEditor.Web {
  class JspmSuccess extends UnityEditor.Web.JspmResult {
    constructor(messageID: number, result: any, type: string);
    result: any;
    type: string;
  }
}
declare namespace UnityEditor.Web {
  class JspmStubInfoSuccess extends UnityEditor.Web.JspmSuccess {
    constructor(messageID: number, reference: string, properties: UnityEditor.Web.JspmPropertyInfo[], methods: UnityEditor.Web.JspmMethodInfo[], events: string[]);
    reference: string;
  }
}
declare namespace UnityEditor.Web {
  class JSProxyMgr extends System.Object {
    protected constructor();
    AddGlobalObject(referenceName: string, obj: any): void;
    DoMessage(jsonRequest: string, callback: ((result: any) => void), webView: UnityEditor.WebView): boolean;
    static DoTasks(): void;
    static FormatError(messageID: number, status: number, errorClass: string, message: string): UnityEditor.Web.JspmError;
    static FormatSuccess(messageID: number, result: any): UnityEditor.Web.JspmSuccess;
    GetDestinationObject(reference: string): any;
    static GetInstance(): UnityEditor.Web.JSProxyMgr;
    ParseParams(method: any, data: any[]): any[];
    RemoveGlobalObject(referenceName: string): void;
    Stringify(target: any): string;
    static kErrInvalidMessageFormat: number;
    static kErrInvocationFailed: number;
    static kErrNone: number;
    static kErrUnknownEvent: number;
    static kErrUnknownMethod: number;
    static kErrUnknownObject: number;
    static kErrUnsupportedProtocol: number;
    static kInvalidMessageID: number;
    static kProtocolVersion: number;
    static kTypeGetStubInfo: string;
    static kTypeInvoke: string;
    static kTypeOnEvent: string;
  }
}
declare namespace UnityEditor.Web {
  class PreviewGenerator extends System.Object {
    constructor();
    GeneratePreview(assetPath: string, width: number, height: number): number[];
    static GetInstance(): UnityEditor.Web.PreviewGenerator;
  }
}
declare namespace UnityEditor.Web {
  class TroubleshooterAccess extends System.Object {
    protected constructor();
    GetUserId(): string;
    GetUserName(): string;
    SignIn(): void;
    SignOut(): void;
    StartBugReporter(): void;
  }
}
declare namespace UnityEditor.Web {
  class WebScriptObject extends UnityEngine.ScriptableObject {
    protected constructor();
    processMessage(jsonRequest: string, callback: UnityEditor.WebViewV8CallbackCSharp): boolean;
    ProcessMessage(jsonRequest: string, callback: UnityEditor.WebViewV8CallbackCSharp): boolean;
    webView: UnityEditor.WebView;
  }
}
declare namespace UnityEditor {
  class CameraController extends System.Object {
    protected constructor();
    Update(cameraState: UnityEditor.CameraState, cam: any): void;
  }
}
declare namespace UnityEditor {
  class CameraControllerStandard extends UnityEditor.CameraController {
    constructor();
    Update(cameraState: UnityEditor.CameraState, cam: any): void;
    readonly currentViewTool: UnityEditor.ViewTool;
  }
}
declare namespace UnityEditor {
  class CameraState extends System.Object {
    constructor();
    Clone(): UnityEditor.CameraState;
    Copy(cameraStateIn: UnityEditor.CameraState): void;
    FixNegativeSize(): void;
    GetCameraDistance(): number;
    UpdateCamera(camera: any): void;
    pivot: UnityEditor.AnimatedValues.AnimVector3;
    rotation: UnityEditor.AnimatedValues.AnimQuaternion;
    viewSize: UnityEditor.AnimatedValues.AnimFloat;
  }
}
declare namespace UnityEditor {
  class LookDevConfig extends UnityEngine.ScriptableObject {
    constructor();
    Cleanup(): void;
    GetFloatProperty(property: UnityEditor.LookDevProperty, context: UnityEditor.LookDevEditionContext): number;
    GetIntProperty(property: UnityEditor.LookDevProperty, context: UnityEditor.LookDevEditionContext): number;
    GetObjectLoDCount(context: UnityEditor.LookDevEditionContext): number;
    IsPropertyLinked(type: UnityEditor.LookDevProperty): boolean;
    OnDestroy(): void;
    OnEnable(): void;
    ResynchronizeObjects(): void;
    SetCurrentPreviewObject(go: any): boolean;
    SetCurrentPreviewObject(go: any, context: UnityEditor.LookDevEditionContext): void;
    SetLookDevView(lookDevView: UnityEditor.LookDevView): void;
    UpdateCurrentObjectArray(): void;
    UpdateFloatProperty(type: UnityEditor.LookDevProperty, value: number): void;
    UpdateFloatProperty(type: UnityEditor.LookDevProperty, value: number, recordUndo: boolean): void;
    UpdateFloatProperty(property: UnityEditor.LookDevProperty, value: number, recordUndo: boolean, forceLinked: boolean): void;
    UpdateFocus(context: UnityEditor.LookDevEditionContext): void;
    UpdateIntProperty(property: UnityEditor.LookDevProperty, value: number): void;
    UpdateIntProperty(property: UnityEditor.LookDevProperty, value: number, recordUndo: boolean): void;
    UpdateIntProperty(property: UnityEditor.LookDevProperty, value: number, recordUndo: boolean, forceLinked: boolean): void;
    UpdatePropertyLink(property: UnityEditor.LookDevProperty, value: boolean): void;
    allowDifferentObjects: boolean;
    readonly cameraState: UnityEditor.CameraState[];
    cameraStateCommon: UnityEditor.CameraState;
    cameraStateLeft: UnityEditor.CameraState;
    cameraStateRight: UnityEditor.CameraState;
    readonly currentEditionContext: UnityEditor.LookDevEditionContext;
    readonly currentEditionContextIndex: number;
    readonly currentLookDevContext: UnityEditor.LookDevContext;
    readonly currentObjectInstances: any[][];
    dualViewBlendFactor: number;
    enableShadowCubemap: boolean;
    enableToneMap: boolean;
    envRotationSpeed: number;
    exposureRange: number;
    gizmo: UnityEditor.GizmoInfo;
    readonly lookDevContexts: UnityEditor.LookDevContext[];
    lookDevMode: UnityEditor.LookDevMode;
    objRotationSpeed: number;
    readonly previewObjects: any[][];
    rotateEnvMode: boolean;
    rotateObjectMode: boolean;
    shadowDistance: number;
    showBalls: boolean;
    showControlWindows: boolean;
    sideBySideCameraLinked: boolean;
  }
}
declare namespace UnityEditor {
  class LookDevContext extends System.Object {
    constructor();
    GetProperty(property: UnityEditor.LookDevProperty): UnityEditor.LookDevContext.LookDevPropertyValue;
    UpdateProperty(property: UnityEditor.LookDevProperty, value: number): void;
    UpdateProperty(property: UnityEditor.LookDevProperty, value: number): void;
    currentHDRIIndex: number;
    envRotation: number;
    readonly exposureValue: number;
    readonly lodIndex: number;
    readonly shadingMode: number;
  }
}
declare namespace UnityEditor.LookDevContext {
  class LookDevPropertyValue extends System.Object {
    constructor();
    floatValue: number;
    intValue: number;
  }
}
declare namespace UnityEditor {
  class LookDevEnvironmentLibrary extends UnityEngine.ScriptableObject {
    constructor();
    CleanupDeletedHDRI(): void;
    InsertHDRI(cubemap: any): void;
    InsertHDRI(cubemap: any, insertionIndex: number): void;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    RemoveHDRI(cubemap: any): boolean;
    SetLookDevView(lookDevView: UnityEditor.LookDevView): void;
    dirty: boolean;
    readonly hdriCount: number;
    readonly hdriList: UnityEditor.CubemapInfo[];
  }
}
declare namespace UnityEditor {
  class LookDevEnvironmentLibraryInspector extends UnityEditor.Experimental.AssetImporters.AssetImporterEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class LookDevEnvironmentWindow extends System.Object {
    constructor(lookDevView: UnityEditor.LookDevView);
    CancelSelection(): void;
    GetCurrentSelection(): any;
    GetSelectedPositionOffset(): any;
    OnGUI(windowID: number): void;
    static PositionToLatLong(position: any): any;
    ResetShadowCubemap(): void;
    SetRects(positionInLookDev: any, GUIRect: any, displayRect: any): void;
    static readonly styles: UnityEditor.LookDevEnvironmentWindow.Styles;
    static m_HDRIHeaderHeight: number;
    static m_HDRIHeight: number;
    static m_HDRIWidth: number;
    static m_latLongHeight: number;
  }
}
declare namespace UnityEditor.LookDevEnvironmentWindow {
  class EnvSettingsWindow extends UnityEditor.PopupWindowContent {
    constructor(lookDevView: UnityEditor.LookDevView, infos: UnityEditor.CubemapInfo);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    static readonly styles: UnityEditor.LookDevEnvironmentWindow.EnvSettingsWindow.Styles;
  }
}
declare namespace UnityEditor.LookDevEnvironmentWindow.EnvSettingsWindow {
  class Styles extends System.Object {
    constructor();
    sAngleOffset: any;
    sBrightest: any;
    sEnvironment: any;
    sMenuItem: any;
    sResetEnv: any;
    sResetShadow: any;
    sSeparator: any;
    sShadowColor: any;
    sShadowIntensity: any;
    sShadows: any;
  }
}
declare namespace UnityEditor.LookDevEnvironmentWindow {
  class Styles extends System.Object {
    constructor();
    sCloseIcon: any;
    sDragAndDropHDRIText: any;
    sEnvControlIcon: any;
    sLabelStyleBothContext: any;
    sLabelStyleFirstContext: any;
    sLabelStyleSecondContext: any;
    sLatlongFrameTexture: any;
    sLightTexture: any;
    sSeparatorStyle: any;
    sTitle: any;
  }
}
declare namespace UnityEditor {
  class LookDevPropertyType extends System.Enum {
    protected constructor();
    static Float: UnityEditor.LookDevPropertyType;
    static Int: UnityEditor.LookDevPropertyType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LookDevProperty extends System.Enum {
    protected constructor();
    static Count: UnityEditor.LookDevProperty;
    static EnvRotation: UnityEditor.LookDevProperty;
    static ExposureValue: UnityEditor.LookDevProperty;
    static HDRI: UnityEditor.LookDevProperty;
    static LoDIndex: UnityEditor.LookDevProperty;
    static ShadingMode: UnityEditor.LookDevProperty;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LookDevMode extends System.Enum {
    protected constructor();
    static Count: UnityEditor.LookDevMode;
    static SideBySide: UnityEditor.LookDevMode;
    static Single1: UnityEditor.LookDevMode;
    static Single2: UnityEditor.LookDevMode;
    static Split: UnityEditor.LookDevMode;
    value__: number;
    static Zone: UnityEditor.LookDevMode;
  }
}
declare namespace UnityEditor {
  class LookDevEditionContext extends System.Enum {
    protected constructor();
    static Left: UnityEditor.LookDevEditionContext;
    static None: UnityEditor.LookDevEditionContext;
    static Right: UnityEditor.LookDevEditionContext;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LookDevOperationType extends System.Enum {
    protected constructor();
    static BlendFactor: UnityEditor.LookDevOperationType;
    static GizmoAll: UnityEditor.LookDevOperationType;
    static GizmoRotationZone1: UnityEditor.LookDevOperationType;
    static GizmoRotationZone2: UnityEditor.LookDevOperationType;
    static GizmoTranslation: UnityEditor.LookDevOperationType;
    static None: UnityEditor.LookDevOperationType;
    static RotateEnvironment: UnityEditor.LookDevOperationType;
    static RotateLight: UnityEditor.LookDevOperationType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class GizmoInfo extends System.Object {
    constructor();
    Update(center: any, length: number, angle: number): void;
    Update(point1: any, point2: any): void;
    readonly angle: number;
    readonly center: any;
    readonly length: number;
    readonly plane: any;
    readonly planeOrtho: any;
    readonly point1: any;
    readonly point2: any;
  }
}
declare namespace UnityEditor {
  class LookDevPropertyInfo extends System.Object {
    constructor(type: UnityEditor.LookDevPropertyType);
    linked: boolean;
    readonly propertyType: UnityEditor.LookDevPropertyType;
  }
}
declare namespace UnityEditor {
  class ShadowInfo extends System.Object {
    constructor();
    latitude: number;
    longitude: number;
    shadowColor: any;
    shadowIntensity: number;
  }
}
declare namespace UnityEditor {
  class CubemapInfo extends System.Object {
    constructor();
    ResetEnvInfos(): void;
    SetCubemapShadowInfo(newCubemapShadowInfo: UnityEditor.CubemapInfo): void;
    alreadyComputed: boolean;
    ambientProbe: any;
    angleOffset: number;
    cubemap: any;
    cubemapShadowInfo: UnityEditor.CubemapInfo;
    serialIndexMain: number;
    serialIndexShadow: number;
    shadowInfo: UnityEditor.ShadowInfo;
  }
}
declare namespace UnityEditor {
  class LookDevResources extends System.Object {
    constructor();
    static Cleanup(): void;
    static Initialize(): void;
    static UpdateShadowInfoWithBrightestSpot(cubemapInfo: UnityEditor.CubemapInfo): void;
    static m_BrightestPointRT: any;
    static m_BrightestPointTexture: any;
    static m_DefaultHDRI: any;
    static m_DeferredOverlayMaterial: any;
    static m_DrawBallsMaterial: any;
    static m_GBufferPatchMaterial: any;
    static m_LookDevCompositing: any;
    static m_LookDevCubeToLatlong: any;
    static m_ScreenQuadMesh: any;
    static m_SelectionTexture: any;
    static m_SkyboxMaterial: any;
    static m_ZeroAmbientProbe: any;
  }
}
declare namespace UnityEditor {
  class LookDevSettingsWindow extends UnityEditor.PopupWindowContent {
    constructor(lookDevView: UnityEditor.LookDevView);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    static readonly styles: UnityEditor.LookDevSettingsWindow.Styles;
  }
}
declare namespace UnityEditor.LookDevSettingsWindow {
  class Styles extends System.Object {
    constructor();
    sAllowDifferentObjects: any;
    sAnimation: any;
    sCamera: any;
    sCreateNewLibrary: any;
    sEnableAutoExp: any;
    sEnableEnvRotationIcon: any;
    sEnableEnvRotationTexture: any;
    sEnableObjRotationIcon: any;
    sEnableObjRotationTexture: any;
    sEnableShadowIcon: any;
    sEnableShadows: any;
    sEnableShadowTexture: any;
    sEnableToneMap: any;
    sEnvLibrary: any;
    sEnvRotationSpeed: any;
    sExposureRange: any;
    sLighting: any;
    sMenuItem: any;
    sMisc: any;
    sMultiView: any;
    sMultiViewMode: any[];
    sMultiViewTextures: any[];
    sObjRotationSpeed: any;
    sResetCamera: any;
    sResetView: any;
    sResyncObjects: any;
    sRotateEnvMode: any;
    sRotateObjectMode: any;
    sSaveCurrentLibrary: any;
    sSeparator: any;
    sShadowDistance: any;
    sShowBalls: any;
    sShowControlWindows: any;
    sTitle: any;
    sViewport: any;
  }
}
declare namespace UnityEditor.LookDevSettingsWindow {
  class UINumElement extends System.Enum {
    protected constructor();
    static UINumButton: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumDrawHeader: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumSeparator: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumSlider: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumToggle: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UITotalElement: UnityEditor.LookDevSettingsWindow.UINumElement;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LookDevView extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    CreateNewLibrary(assetPath: string): void;
    static DrawFullScreenQuad(previewRect: any): void;
    Frame(): void;
    Frame(animate: boolean): void;
    HandleKeyboardShortcut(): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    static OpenInLookDevTool(go: UnityEngine.Object): void;
    ResetView(): void;
    SaveLookDevConfig(): void;
    SaveLookDevLibrary(): boolean;
    Update(): void;
    UpdateFocus(position: any): void;
    UpdateLookDevModeToggle(lookDevMode: UnityEditor.LookDevMode, value: boolean): void;
    readonly config: UnityEditor.LookDevConfig;
    envLibrary: UnityEditor.LookDevEnvironmentLibrary;
    readonly hotControl: number;
    static readonly styles: UnityEditor.LookDevView.Styles;
    readonly userEnvLibrary: UnityEditor.LookDevEnvironmentLibrary;
    static m_FirstViewGizmoColor: any;
    static m_SecondViewGizmoColor: any;
  }
}
declare namespace UnityEditor.LookDevView {
  class Styles extends System.Object {
    constructor();
    sBigTitleInnerStyle: any;
    sDragAndDropObjsText: any;
    sLinkActive: any;
    sLinkInactive: any;
    sPropertyLabelStyle: any[];
    sSideBySideMode: any;
    sSingleMode1: any;
    sSingleMode2: any;
    sSplitMode: any;
    sToolBarButton: any;
    sZoneMode: any;
  }
}
declare namespace UnityEditor.LookDevView {
  class PreviewContextCB extends System.Object {
    constructor();
    m_drawBallCB: any;
    m_drawBallPB: any;
    m_patchGBufferCB: any;
  }
}
declare namespace UnityEditor.LookDevView {
  class PreviewContext extends System.Object {
    constructor();
    Cleanup(): void;
    m_PreviewCB: UnityEditor.LookDevView.PreviewContextCB[];
    m_PreviewResult: any[];
    m_PreviewUtility: UnityEditor.PreviewRenderUtility[];
  }
}
declare namespace UnityEditor.LookDevView.PreviewContext {
  class PreviewContextPass extends System.Enum {
    protected constructor();
    static kCount: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    static kShadow: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    static kView: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    static kViewWithShadow: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LookDevViewsWindow extends UnityEditor.PopupWindowContent {
    constructor(lookDevView: UnityEditor.LookDevView);
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    static readonly styles: UnityEditor.LookDevViewsWindow.Styles;
  }
}
declare namespace UnityEditor.LookDevViewsWindow {
  class Styles extends System.Object {
    constructor();
    sEnvironment: any;
    sExposure: any;
    sHeaderStyle: any;
    sLinkActive: any;
    sLinkInactive: any;
    sLoD: any;
    sLoDAuto: any;
    sMenuItem: any;
    sRotation: any;
    sShadingMode: any;
    sShadingModeStrings: string[];
    sShadingModeValues: number[];
    sTitle: any;
    sToolBarButton: any;
    sViewTitle: any[];
    sViewTitleStyles: any[];
    sZero: any;
  }
}
declare namespace UnityEditor.Macros {
  class MacroEvaluator extends System.Object {
    protected constructor();
    static Eval(macro: string): string;
  }
}
declare namespace UnityEditor.Macros.MacroEvaluator {
  class EditorEvaluationDomainProvider extends UnityScript.Scripting.SimpleEvaluationDomainProvider {
    constructor();
    GetAssemblyReferences(): any[];
  }
}
declare namespace UnityScript.Scripting {
  class SimpleEvaluationDomainProvider extends System.Object {
    constructor();
    constructor(imports: string[]);
    GetAssemblyReferences(): any[];
    GetEvaluationDomain(): any;
    GetImports(): string[];
  }
}
declare namespace UnityEditor.Macros {
  class MethodEvaluator extends System.Object {
    protected constructor();
    static Eval(assemblyFile: string, typeName: string, methodName: string, paramTypes: any[], args: any[]): any;
    static ExecuteExternalCode(parcel: string): any;
  }
}
declare namespace UnityEditor.Macros.MethodEvaluator {
  class AssemblyResolver extends System.Object {
    constructor(assemblyDirectory: string);
    AssemblyResolve(sender: any, args: any): any;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultBuildPostprocessor extends System.Object {
    protected constructor();
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PostProcessScriptsOnly(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    SupportsInstallInBuildFolder(): boolean;
    SupportsLz4Compression(): boolean;
    SupportsScriptsOnlyBuild(): boolean;
    UpdateBootConfig(target: UnityEditor.BuildTarget, config: any, options: UnityEditor.BuildOptions): void;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultCompilationExtension extends System.Object {
    constructor();
    GetAdditionalAssemblyReferences(): any;
    GetAdditionalDefines(): any;
    GetAdditionalSourceFiles(): any;
    GetAssemblyResolver(buildingForEditor: boolean, assemblyPath: string, searchDirectories: string[]): any;
    GetCompilerExtraAssemblyPaths(isEditor: boolean, assemblyPathName: string): string[];
    GetCsCompiler(buildingForEditor: boolean, assemblyName: string): UnityEditor.Modules.CSharpCompiler;
    GetWindowsMetadataReferences(): any;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultPlatformSupportModule extends System.Object {
    protected constructor();
    CreateBuildAnalyzer(): UnityEditor.Modules.IBuildAnalyzer;
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreateCompilationExtension(): UnityEditor.Modules.ICompilationExtension;
    CreateDeploymentTargetsExtension(): UnityEditor.DeploymentTargets.IDeploymentTargetsExtension;
    CreateDevice(id: string): UnityEditor.Modules.IDevice;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreatePreferenceWindowExtension(): UnityEditor.Modules.IPreferenceWindowExtension;
    CreateProjectGeneratorExtension(): UnityEditor.Modules.IProjectGeneratorExtension;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    CreateSettingsEditorExtension(): UnityEditor.Modules.ISettingEditorExtension;
    CreateTextureImportSettingsExtension(): UnityEditor.Modules.ITextureImportSettingsExtension;
    CreateUserAssembliesValidatorExtension(): UnityEditor.Modules.IUserAssembliesValidator;
    GetDisplayNames(): any[];
    OnActivate(): void;
    OnDeactivate(): void;
    OnLoad(): void;
    OnUnload(): void;
    RegisterAdditionalUnityExtensions(): void;
    readonly AssemblyReferencesForEditorCsharpProject: string[];
    readonly AssemblyReferencesForUserScripts: string[];
    readonly ExtensionVersion: string;
    readonly JamTarget: string;
    readonly NativeLibraries: string[];
    readonly TargetName: string;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultPlayerSettingsEditorExtension extends System.Object {
    protected constructor();
    CanShowUnitySplashScreen(): boolean;
    ConfigurationSectionGUI(): void;
    FixTargetOSVersion(version: string): string;
    HasBundleIdentifier(): boolean;
    HasIdentificationGUI(): boolean;
    HasPublishSection(): boolean;
    HasResolutionSection(): boolean;
    IconSectionGUI(): void;
    IdentificationSectionGUI(): void;
    MultithreadedRenderingGUI(targetGroup: UnityEditor.BuildTargetGroup): void;
    OnEnable(settingsEditor: UnityEditor.PlayerSettingsEditor): void;
    PublishSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    ResolutionSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    SplashSectionGUI(): void;
    SupportsDynamicBatching(): boolean;
    SupportsGfxJobModes(): boolean;
    SupportsHighDynamicRangeDisplays(): boolean;
    SupportsMultithreadedRendering(): boolean;
    SupportsOrientation(): boolean;
    SupportsStaticBatching(): boolean;
    UsesStandardIcons(): boolean;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultProjectGeneratorExtension extends System.Object {
    protected constructor();
    GenerateCSharpProject(project: UnityEditor.Modules.CSharpProject, assemblyName: string, sourceFiles: any, defines: any, additionalProjectReferences: any): void;
  }
}
declare namespace UnityEditor.Modules {
  class DefaultTextureImportSettingsExtension extends System.Object {
    constructor();
    ShowImportSettings(baseEditor: UnityEditor.Editor, platformSettings: UnityEditor.TextureImportPlatformSettings): void;
  }
}
declare namespace UnityEditor.Modules {
  class ModuleManager extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Modules.ModuleManager {
  class BuildTargetChangedHandler extends System.Object {
    constructor();
    OnActiveBuildTargetChanged(oldTarget: UnityEditor.BuildTarget, newTarget: UnityEditor.BuildTarget): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.Modules {
  class ModuleUtils extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Modules {
  class IPlatformSupportModule {
    protected constructor();
    CreateBuildAnalyzer(): UnityEditor.Modules.IBuildAnalyzer;
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreateCompilationExtension(): UnityEditor.Modules.ICompilationExtension;
    CreateDeploymentTargetsExtension(): UnityEditor.DeploymentTargets.IDeploymentTargetsExtension;
    CreateDevice(id: string): UnityEditor.Modules.IDevice;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreatePreferenceWindowExtension(): UnityEditor.Modules.IPreferenceWindowExtension;
    CreateProjectGeneratorExtension(): UnityEditor.Modules.IProjectGeneratorExtension;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    CreateSettingsEditorExtension(): UnityEditor.Modules.ISettingEditorExtension;
    CreateTextureImportSettingsExtension(): UnityEditor.Modules.ITextureImportSettingsExtension;
    CreateUserAssembliesValidatorExtension(): UnityEditor.Modules.IUserAssembliesValidator;
    GetDisplayNames(): any[];
    OnActivate(): void;
    OnDeactivate(): void;
    OnLoad(): void;
    OnUnload(): void;
    RegisterAdditionalUnityExtensions(): void;
    readonly AssemblyReferencesForEditorCsharpProject: string[];
    readonly AssemblyReferencesForUserScripts: string[];
    readonly ExtensionVersion: string;
    readonly JamTarget: string;
    readonly NativeLibraries: string[];
    readonly TargetName: string;
  }
}
declare namespace UnityEditor.Modules {
  class IBuildPostprocessor {
    protected constructor();
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PostProcessScriptsOnly(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    SupportsInstallInBuildFolder(): boolean;
    SupportsLz4Compression(): boolean;
    SupportsScriptsOnlyBuild(): boolean;
    UpdateBootConfig(target: UnityEditor.BuildTarget, config: any, options: UnityEditor.BuildOptions): void;
  }
}
declare namespace UnityEditor.Modules {
  class IScriptingImplementations {
    protected constructor();
    Enabled(): UnityEditor.ScriptingImplementation[];
    Supported(): UnityEditor.ScriptingImplementation[];
  }
}
declare namespace UnityEditor.Modules {
  class ISettingEditorExtension {
    protected constructor();
    CanShowUnitySplashScreen(): boolean;
    ConfigurationSectionGUI(): void;
    HasBundleIdentifier(): boolean;
    HasIdentificationGUI(): boolean;
    HasPublishSection(): boolean;
    HasResolutionSection(): boolean;
    IconSectionGUI(): void;
    IdentificationSectionGUI(): void;
    MultithreadedRenderingGUI(targetGroup: UnityEditor.BuildTargetGroup): void;
    OnEnable(settingsEditor: UnityEditor.PlayerSettingsEditor): void;
    PublishSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    ResolutionSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    SplashSectionGUI(): void;
    SupportsDynamicBatching(): boolean;
    SupportsGfxJobModes(): boolean;
    SupportsHighDynamicRangeDisplays(): boolean;
    SupportsMultithreadedRendering(): boolean;
    SupportsOrientation(): boolean;
    SupportsStaticBatching(): boolean;
    UsesStandardIcons(): boolean;
  }
}
declare namespace UnityEditor.Modules {
  class IPreferenceWindowExtension {
    protected constructor();
    HasExternalApplications(): boolean;
    ReadPreferences(): void;
    ShowExternalApplications(): void;
    WritePreferences(): void;
  }
}
declare namespace UnityEditor.Modules {
  class IBuildWindowExtension {
    protected constructor();
    EnabledBuildAndRunButton(): boolean;
    EnabledBuildButton(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShouldDrawExplicitDivideByZeroCheckbox(): boolean;
    ShouldDrawExplicitNullCheckbox(): boolean;
    ShouldDrawForceOptimizeScriptsCheckbox(): boolean;
    ShouldDrawProfilerCheckbox(): boolean;
    ShouldDrawScriptDebuggingCheckbox(): boolean;
    ShowInternalPlatformBuildOptions(): void;
    ShowPlatformBuildOptions(): void;
  }
}
declare namespace UnityEditor.Modules {
  class IBuildAnalyzer {
    protected constructor();
    OnAddedExecutable(report: UnityEditor.BuildReporting.BuildReport, fileIndex: number): void;
  }
}
declare namespace UnityEditor.Modules {
  class ITextureImportSettingsExtension {
    protected constructor();
    ShowImportSettings(baseEditor: UnityEditor.Editor, platformSettings: UnityEditor.TextureImportPlatformSettings): void;
  }
}
declare namespace UnityEditor.Modules {
  class IDevice {
    protected constructor();
    StartPlayerConnectionSupport(): UnityEditor.Modules.RemoteAddress;
    StartRemoteSupport(): UnityEditor.Modules.RemoteAddress;
    StopPlayerConnectionSupport(): void;
    StopRemoteSupport(): void;
  }
}
declare namespace UnityEditor.Modules {
  class RemoteAddress extends System.ValueType {
    protected constructor();
    ip: string;
    port: number;
  }
}
declare namespace UnityEditor.Modules {
  class IPluginImporterExtension {
    protected constructor();
    Apply(inspector: UnityEditor.PluginImporterInspector): void;
    CalculateFinalPluginPath(buildTargetName: string, imp: UnityEditor.PluginImporter): string;
    CheckFileCollisions(buildTargetName: string): boolean;
    HasModified(inspector: UnityEditor.PluginImporterInspector): boolean;
    OnDisable(inspector: UnityEditor.PluginImporterInspector): void;
    OnEnable(inspector: UnityEditor.PluginImporterInspector): void;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    ResetValues(inspector: UnityEditor.PluginImporterInspector): void;
  }
}
declare namespace UnityEditor.Modules {
  class BuildLaunchPlayerArgs extends System.ValueType {
    protected constructor();
    installPath: string;
    options: UnityEditor.BuildOptions;
    playerPackage: string;
    productName: string;
    target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor.Modules {
  class BuildPostProcessArgs extends System.ValueType {
    protected constructor();
    companyName: string;
    installPath: string;
    options: UnityEditor.BuildOptions;
    playerPackage: string;
    productGUID: any;
    productName: string;
    report: UnityEditor.BuildReporting.BuildReport;
    stagingArea: string;
    stagingAreaData: string;
    stagingAreaDataManaged: string;
    target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor.Modules {
  class IUserAssembliesValidator {
    protected constructor();
    Cleanup(): void;
    Validate(userAssemblies: string[]): void;
    readonly canRunInBackground: boolean;
  }
}
declare namespace UnityEditor.Modules {
  class CSharpCompiler extends System.Enum {
    protected constructor();
    static Microsoft: UnityEditor.Modules.CSharpCompiler;
    static Mono: UnityEditor.Modules.CSharpCompiler;
    value__: number;
  }
}
declare namespace UnityEditor.Modules {
  class ICompilationExtension {
    protected constructor();
    GetAdditionalAssemblyReferences(): any;
    GetAdditionalDefines(): any;
    GetAdditionalSourceFiles(): any;
    GetAssemblyResolver(buildingForEditor: boolean, assemblyPath: string, searchDirectories: string[]): any;
    GetCompilerExtraAssemblyPaths(isEditor: boolean, assemblyPathName: string): string[];
    GetCsCompiler(buildingForEditor: boolean, assemblyName: string): UnityEditor.Modules.CSharpCompiler;
    GetWindowsMetadataReferences(): any;
  }
}
declare namespace UnityEditor.Modules {
  class CSharpProject extends System.Object {
    constructor();
    Guid: any;
    Path: string;
  }
}
declare namespace UnityEditor.Modules {
  class IProjectGeneratorExtension {
    protected constructor();
    GenerateCSharpProject(project: UnityEditor.Modules.CSharpProject, assemblyName: string, sourceFiles: any, defines: any, additionalProjectReferences: any): void;
  }
}
declare namespace UnityEditor.Networking.PlayerConnection {
  class ConnectedPlayer extends System.Object {
    constructor();
    constructor(playerId: number);
    readonly PlayerId: number;
  }
}
declare namespace UnityEditor.Networking.PlayerConnection {
  class EditorConnection {
    constructor();
    DisconnectAll(): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    Initialize(): void;
    Register(messageId: any, callback: ((arg0: any) => void)): void;
    RegisterConnection(callback: ((arg0: number) => void)): void;
    RegisterDisconnection(callback: ((arg0: number) => void)): void;
    Send(messageId: any, data: number[]): void;
    Send(messageId: any, data: number[], playerId: number): void;
    SetDirty(): void;
    ToString(): string;
    Unregister(messageId: any, callback: ((arg0: any) => void)): void;
    readonly ConnectedPlayers: UnityEditor.Networking.PlayerConnection.ConnectedPlayer[];
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class ParticleEffectUIOwner {
    protected constructor();
    Repaint(): void;
    readonly customEditor: UnityEditor.Editor;
  }
}
declare namespace UnityEditor {
  class ParticleEffectUI extends System.Object {
    constructor(owner: UnityEditor.ParticleEffectUIOwner);
    Clear(): void;
    CreateParticleSystem(parentOfNewParticleSystem: any, defaultType: UnityEditor.SubModuleUI.SubEmitterType): any;
    static GetMinSize(): any;
    GetNextParticleSystemName(): string;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    InitializeIfNeeded(systems: any): boolean;
    IsParticleSystemUIVisible(psUI: UnityEditor.ParticleSystemUI): boolean;
    OnGUI(): void;
    OnSceneViewGUI(): void;
    PlayOnAwakeChanged(newPlayOnAwake: boolean): void;
    Refresh(): void;
    readonly multiEdit: boolean;
    m_Emitters: UnityEditor.ParticleSystemUI[];
    m_Owner: UnityEditor.ParticleEffectUIOwner;
    static m_ShowBounds: boolean;
    static m_ShowWireframe: boolean;
    static m_VerticalLayout: boolean;
  }
}
declare namespace UnityEditor.ParticleEffectUI {
  class PlayState extends System.Enum {
    protected constructor();
    static Paused: UnityEditor.ParticleEffectUI.PlayState;
    static Playing: UnityEditor.ParticleEffectUI.PlayState;
    static Stopped: UnityEditor.ParticleEffectUI.PlayState;
    value__: number;
  }
}
declare namespace UnityEditor.ParticleEffectUI {
  class OwnerType extends System.Enum {
    protected constructor();
    static Inspector: UnityEditor.ParticleEffectUI.OwnerType;
    static ParticleSystemWindow: UnityEditor.ParticleEffectUI.OwnerType;
    value__: number;
  }
}
declare namespace UnityEditor.ParticleEffectUI {
  class Texts extends System.Object {
    constructor();
    addParticleSystem: any;
    bounds: any;
    particleCount: any;
    particleSpeeds: any;
    pause: any;
    play: any;
    previewSpeed: any;
    previewTime: any;
    resimulation: any;
    restart: any;
    secondsFloatFieldFormatString: string;
    speedFloatFieldFormatString: string;
    stop: any;
    subEmitterParticleCount: any;
    wireframe: any;
  }
}
declare namespace UnityEditor {
  class ParticleRendererEditor extends UnityEditor.RendererEditorBase {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class ParticleSystemClipboard extends System.Object {
    constructor();
    static CopyAnimationCurves(animCurve: any, animCurve2: any, scalar: number): void;
    static CopyGradient(gradient1: any, gradient2: any): void;
    static HasDoubleAnimationCurve(): boolean;
    static HasDoubleGradient(): boolean;
    static HasSingleAnimationCurve(): boolean;
    static HasSingleGradient(): boolean;
    static PasteAnimationCurves(animCurveProperty: UnityEditor.SerializedProperty, animCurveProperty2: UnityEditor.SerializedProperty, scalarProperty: UnityEditor.SerializedProperty, curveRanges: any, particleSystemCurveEditor: ParticleSystemCurveEditor): void;
    static PasteGradient(gradientProperty: UnityEditor.SerializedProperty, gradientProperty2: UnityEditor.SerializedProperty): void;
  }
}
declare namespace UnityEditor {
  class GradientContextMenu extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class AnimationCurveContextMenu extends System.Object {
    protected constructor();
  }
}
  class ParticleSystemCurveEditor extends System.Object {
    constructor();
    AddCurve(curveData: ParticleSystemCurveEditor.CurveData): void;
    AddCurveDataIfNeeded(curveName: string, curveData: ParticleSystemCurveEditor.CurveData): void;
    GetAvailableColor(): any;
    GetCurveColor(max: UnityEditor.SerializedProperty): any;
    Init(): void;
    IsAdded(max: UnityEditor.SerializedProperty): boolean;
    IsAdded(min: UnityEditor.SerializedProperty, max: UnityEditor.SerializedProperty): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnGUI(rect: any): void;
    Refresh(): void;
    RemoveCurve(max: UnityEditor.SerializedProperty): void;
    RemoveCurve(min: UnityEditor.SerializedProperty, max: UnityEditor.SerializedProperty): void;
    SetVisible(curveProp: UnityEditor.SerializedProperty, visible: boolean): void;
    static k_PresetsHeight: number;
  }
declare namespace ParticleSystemCurveEditor {
  class Styles extends System.Object {
    constructor();
    curveEditorBackground: any;
    curveLibraryPopup: any;
    curveSwatch: any;
    curveSwatchArea: any;
    minus: any;
    optimizeCurveText: any;
    plus: any;
    presetTooltip: any;
    removeCurveText: any;
    yAxisHeader: any;
  }
}
declare namespace ParticleSystemCurveEditor {
  class CurveData extends System.Object {
    constructor(name: string, displayName: any, min: UnityEditor.SerializedProperty, max: UnityEditor.SerializedProperty, color: any, signedRange: boolean, getAxisScalars: (() => any), setAxisScalars: ((newAxisScalars: any) => void), visible: boolean);
    IsRegion(): boolean;
    m_Color: any;
    m_DisplayName: any;
    m_GetAxisScalarsCallback: (() => any);
    m_Max: UnityEditor.SerializedProperty;
    m_MaxId: number;
    m_Min: UnityEditor.SerializedProperty;
    m_MinId: number;
    m_SetAxisScalarsCallback: ((newAxisScalars: any) => void);
    m_SignedRange: boolean;
    m_UniqueName: string;
    m_Visible: boolean;
  }
}
declare namespace UnityEditor {
  class ParticleSystemInspector extends UnityEditor.Editor {
    constructor();
    DrawPreview(previewArea: any): void;
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    UseDefaultMargins(): boolean;
    readonly customEditor: UnityEditor.Editor;
    static readonly playBackTitle: any;
  }
}
declare namespace UnityEditor {
  class ParticleSystemStyles extends System.Object {
    protected constructor();
    static Get(): UnityEditor.ParticleSystemStyles;
    checkmark: any;
    checkmarkMixed: any;
    editableLabel: any;
    effectBgStyle: any;
    emitterHeaderStyle: any;
    label: any;
    minMaxCurveStateDropDown: any;
    minus: any;
    moduleBgStyle: any;
    moduleHeaderStyle: any;
    modulePadding: any;
    numberField: any;
    objectField: any;
    plus: any;
    popup: any;
    selectionMarker: any;
    toggle: any;
    toggleMixed: any;
    toolbarButtonLeftAlignText: any;
    warningIcon: any;
  }
}
declare namespace UnityEditor {
  class ParticleSystemUI extends System.Object {
    constructor();
    ApplyProperties(): void;
    GetEmitterDuration(): number;
    static GetUIModuleNames(): string[];
    Init(owner: UnityEditor.ParticleEffectUI, systems: any[]): void;
    OnGUI(width: number, fixedWidth: boolean): void;
    OnSceneViewGUI(): void;
    UpdateProperties(): void;
    readonly multiEdit: boolean;
    m_Modules: UnityEditor.ModuleUI[];
    m_ParticleEffectUI: UnityEditor.ParticleEffectUI;
    m_ParticleSystems: any[];
    m_ParticleSystemSerializedObject: UnityEditor.SerializedObject;
    m_RendererSerializedObject: UnityEditor.SerializedObject;
  }
}
declare namespace UnityEditor.ParticleSystemUI {
  class DefaultTypes extends System.Enum {
    protected constructor();
    static Root: UnityEditor.ParticleSystemUI.DefaultTypes;
    static SubBirth: UnityEditor.ParticleSystemUI.DefaultTypes;
    static SubCollision: UnityEditor.ParticleSystemUI.DefaultTypes;
    static SubDeath: UnityEditor.ParticleSystemUI.DefaultTypes;
    value__: number;
  }
}
declare namespace UnityEditor.ParticleSystemUI {
  class Texts extends System.Object {
    constructor();
    addModules: any;
    bulletPoint: string;
  }
}
declare namespace UnityEditor {
  class ParticleSystemWindow extends UnityEditor.EditorWindow {
    protected constructor();
    static CreateWindow(): void;
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    customEditor: UnityEditor.Editor;
  }
}
declare namespace UnityEditor.ParticleSystemWindow {
  class Texts extends System.Object {
    constructor();
    lockParticleSystem: any;
    previewAll: any;
  }
}
declare namespace UnityEditor {
  class SerializedMinMaxColor extends System.Object {
    constructor(m: UnityEditor.SerializedModule);
    constructor(m: UnityEditor.SerializedModule, name: string);
    maxColor: UnityEditor.SerializedProperty;
    minColor: UnityEditor.SerializedProperty;
    minMax: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class MinMaxCurveState extends System.Enum {
    protected constructor();
    static k_Curve: UnityEditor.MinMaxCurveState;
    static k_Scalar: UnityEditor.MinMaxCurveState;
    static k_TwoCurves: UnityEditor.MinMaxCurveState;
    static k_TwoScalars: UnityEditor.MinMaxCurveState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SerializedMinMaxCurve extends System.Object {
    constructor(m: UnityEditor.ModuleUI, displayName: any);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string);
    constructor(m: UnityEditor.ModuleUI, displayName: any, signedRange: boolean);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string, signedRange: boolean);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string, signedRange: boolean, useProp0: boolean);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string, signedRange: boolean, useProp0: boolean, addCurveIfNeeded: boolean);
    CreateCurveData(color: any): ParticleSystemCurveEditor.CurveData;
    GetAxisScalars(): any;
    GetUniqueCurveName(): string;
    OnCurveAreaMouseDown(button: number, drawRect: any, curveRanges: any): boolean;
    RemoveCurveFromEditor(): void;
    SetAxisScalars(axisScalars: any): void;
    SetMinMaxState(newState: UnityEditor.MinMaxCurveState, addToCurveEditor: boolean): void;
    SupportsProcedural(failureReason: any): boolean;
    ToggleCurveInEditor(): void;
    maxConstant: number;
    minConstant: number;
    readonly signedRange: boolean;
    state: UnityEditor.MinMaxCurveState;
    readonly stateHasMultipleDifferentValues: boolean;
    m_AllowConstant: boolean;
    m_AllowCurves: boolean;
    m_AllowRandom: boolean;
    m_DefaultCurveScalar: number;
    m_DisplayName: any;
    m_Module: UnityEditor.ModuleUI;
    m_RemapValue: number;
    maxCurve: UnityEditor.SerializedProperty;
    minCurve: UnityEditor.SerializedProperty;
    minScalar: UnityEditor.SerializedProperty;
    scalar: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class MinMaxGradientState extends System.Enum {
    protected constructor();
    static k_Color: UnityEditor.MinMaxGradientState;
    static k_Gradient: UnityEditor.MinMaxGradientState;
    static k_RandomBetweenTwoColors: UnityEditor.MinMaxGradientState;
    static k_RandomBetweenTwoGradients: UnityEditor.MinMaxGradientState;
    static k_RandomColor: UnityEditor.MinMaxGradientState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SerializedMinMaxGradient extends System.Object {
    constructor(m: UnityEditor.SerializedModule);
    constructor(m: UnityEditor.SerializedModule, name: string);
    static GetGradientAsColor(gradientProp: UnityEditor.SerializedProperty): any;
    static SetGradientAsColor(gradientProp: UnityEditor.SerializedProperty, color: any): void;
    state: UnityEditor.MinMaxGradientState;
    readonly stateHasMultipleDifferentValues: boolean;
    m_AllowColor: boolean;
    m_AllowGradient: boolean;
    m_AllowRandomBetweenTwoColors: boolean;
    m_AllowRandomBetweenTwoGradients: boolean;
    m_AllowRandomColor: boolean;
    m_MaxColor: UnityEditor.SerializedProperty;
    m_MaxGradient: UnityEditor.SerializedProperty;
    m_MinColor: UnityEditor.SerializedProperty;
    m_MinGradient: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class ClampVelocityModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor {
  class ModuleUI extends UnityEditor.SerializedModule {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, name: string, displayName: string);
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, name: string, displayName: string, initialVisibilityState: UnityEditor.ModuleUI.VisibilityState);
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    static FloatDraggable(rect: any, floatValue: number, remap: number, dragWidth: number, formatString: string): number;
    static FloatDraggable(rect: any, floatProp: UnityEditor.SerializedProperty, remap: number, dragWidth: number, formatString: string): number;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    GetXAxisScalar(): number;
    static GUIBoolAsPopup(label: any, boolProp: UnityEditor.SerializedProperty, options: string[], layoutOptions: any[]): boolean;
    static GUIButtonGroup(modes: UnityEditorInternal.EditMode.SceneViewEditMode[], guiContents: any[], getBoundsOfTargets: (() => any), caller: UnityEditor.Editor): void;
    static GUIEnumMask(label: any, enumValue: System.Enum, layoutOptions: any[]): System.Enum;
    static GUIFloat(label: string, floatProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static GUIFloat(guiContent: any, floatValue: number, formatString: string, layoutOptions: any[]): number;
    static GUIFloat(guiContent: any, floatProp: UnityEditor.SerializedProperty, formatString: string, layoutOptions: any[]): number;
    static GUIFloat(guiContent: any, floatProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static GUIInt(guiContent: any, intProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static GUIIntDraggableX2(mainLabel: any, label1: any, intProp1: UnityEditor.SerializedProperty, label2: any, intProp2: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUILayerMask(guiContent: any, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((references: UnityEngine.Object[], objType: any, property: UnityEditor.SerializedProperty, options: UnityEditor.EditorGUI.ObjectFieldValidatorOptions) => UnityEngine.Object), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    static GUIMask(label: any, intProp: UnityEditor.SerializedProperty, options: string[], layoutOptions: any[]): void;
    static GUIMinMaxCurve(label: string, mmCurve: UnityEditor.SerializedMinMaxCurve, layoutOptions: any[]): void;
    static GUIMinMaxCurve(editableLabel: UnityEditor.SerializedProperty, mmCurve: UnityEditor.SerializedMinMaxCurve, layoutOptions: any[]): void;
    static GUIMinMaxCurve(label: any, mmCurve: UnityEditor.SerializedMinMaxCurve, layoutOptions: any[]): void;
    static GUIMinMaxCurveInline(rect: any, mmCurve: UnityEditor.SerializedMinMaxCurve, dragWidth: number): any;
    GUIMinMaxGradient(editableLabel: UnityEditor.SerializedProperty, minMaxGradient: UnityEditor.SerializedMinMaxGradient, hdr: boolean, layoutOptions: any[]): void;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, hdr: boolean, layoutOptions: any[]): void;
    static GUIMinMaxRange(label: any, vec2Prop: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIMinMaxSlider(label: any, vec2Prop: UnityEditor.SerializedProperty, a: number, b: number, layoutOptions: any[]): void;
    static GUIMMColorPopUp(rect: any, boolProp: UnityEditor.SerializedProperty): void;
    static GUIMMCurveStateList(rect: any, minMaxCurves: UnityEditor.SerializedMinMaxCurve): void;
    static GUIMMCurveStateList(rect: any, minMaxCurves: UnityEditor.SerializedMinMaxCurve[]): void;
    static GUIMMGradientPopUp(rect: any, gradientProp: UnityEditor.SerializedMinMaxGradient): void;
    static GUIObject(label: any, objectProp: UnityEditor.SerializedProperty, objType: any, layoutOptions: any[]): void;
    static GUIObject(label: any, objectProp: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIObjectFieldAndToggle(label: any, objectProp: UnityEditor.SerializedProperty, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIPopup(label: any, intValue: number, options: any[], layoutOptions: any[]): number;
    static GUIPopup(label: any, intProp: UnityEditor.SerializedProperty, options: any[], layoutOptions: any[]): number;
    static GUISlider(name: string, floatProp: UnityEditor.SerializedProperty, a: number, b: number, remap: number): void;
    static GUISlider(floatProp: UnityEditor.SerializedProperty, a: number, b: number, remap: number): void;
    static GUIToggle(label: string, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): boolean;
    static GUIToggle(guiContent: any, boolValue: boolean, layoutOptions: any[]): boolean;
    static GUIToggle(guiContent: any, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): boolean;
    static GUIToggleWithFloatField(name: string, boolProp: UnityEditor.SerializedProperty, floatProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIToggleWithFloatField(guiContent: any, boolProp: UnityEditor.SerializedProperty, floatProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIToggleWithIntField(name: string, boolProp: UnityEditor.SerializedProperty, floatProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIToggleWithIntField(guiContent: any, boolProp: UnityEditor.SerializedProperty, intProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIVector3Field(guiContent: any, vecProp: UnityEditor.SerializedProperty, layoutOptions: any[]): any;
    static IntDraggable(rect: any, label: any, value: number, dragWidth: number): number;
    static IntDraggable(rect: any, label: any, intProp: UnityEditor.SerializedProperty, dragWidth: number): number;
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    OnSceneViewGUI(): void;
    UndoRedoPerformed(): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    readonly displayName: string;
    enabled: boolean;
    readonly enabledHasMultipleDifferentValues: boolean;
    foldout: boolean;
    readonly isWindowView: boolean;
    readonly toolTip: string;
    visibleUI: boolean;
    static k_CompactFixedModuleWidth: number;
    static k_SpaceBetweenModules: number;
    m_ModuleCurves: UnityEditor.SerializedProperty[];
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    static s_ControlRectStyle: any;
  }
}
declare namespace UnityEditor {
  class SerializedModule extends System.Object {
    constructor(o: UnityEditor.SerializedObject, name: string);
    static Concat(a: string, b: string): string;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(o: UnityEngine.Object): string;
  }
}
declare namespace UnityEditor.ClampVelocityModuleUI {
  class Texts extends System.Object {
    constructor();
    dampen: any;
    drag: any;
    magnitude: any;
    multiplyDragByParticleSize: any;
    multiplyDragByParticleVelocity: any;
    separateAxes: any;
    space: any;
    spaces: string[];
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class CollisionModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    OnSceneViewGUI(): void;
    UndoRedoPerformed(): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class CollisionTypes extends System.Enum {
    protected constructor();
    static Plane: UnityEditor.CollisionModuleUI.CollisionTypes;
    value__: number;
    static World: UnityEditor.CollisionModuleUI.CollisionTypes;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class CollisionModes extends System.Enum {
    protected constructor();
    static Mode2D: UnityEditor.CollisionModuleUI.CollisionModes;
    static Mode3D: UnityEditor.CollisionModuleUI.CollisionModes;
    value__: number;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class ForceModes extends System.Enum {
    protected constructor();
    static Constant: UnityEditor.CollisionModuleUI.ForceModes;
    static None: UnityEditor.CollisionModuleUI.ForceModes;
    static SizeBased: UnityEditor.CollisionModuleUI.ForceModes;
    value__: number;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class PlaneVizType extends System.Enum {
    protected constructor();
    static Grid: UnityEditor.CollisionModuleUI.PlaneVizType;
    static Solid: UnityEditor.CollisionModuleUI.PlaneVizType;
    value__: number;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class Texts extends System.Object {
    constructor();
    bounce: any;
    colliderForce: any;
    collidesWith: any;
    collidesWithDynamic: any;
    collisionMessages: any;
    collisionMode: any;
    collisionModes: any[];
    collisionType: any;
    collisionTypes: any[];
    createPlane: any;
    dampen: any;
    lifetimeLoss: any;
    maxCollisionShapes: any;
    maxKillSpeed: any;
    minKillSpeed: any;
    multiplyColliderForceByCollisionAngle: any;
    multiplyColliderForceByParticleSize: any;
    multiplyColliderForceByParticleSpeed: any;
    planes: any;
    planeVizTypes: any[];
    quality: any;
    qualitySettings: any[];
    radiusScale: any;
    scalePlane: any;
    sceneViewEditModes: UnityEditorInternal.EditMode.SceneViewEditMode[];
    toolContents: any[];
    visualization: any;
    visualizeBounds: any;
    voxelSize: any;
  }
}
declare namespace UnityEditor {
  class ColorByVelocityModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.ColorByVelocityModuleUI {
  class Texts extends System.Object {
    constructor();
    color: any;
    velocityRange: any;
  }
}
declare namespace UnityEditor {
  class ColorModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.ColorModuleUI {
  class Texts extends System.Object {
    constructor();
    color: any;
  }
}
declare namespace UnityEditor {
  class CustomDataModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.CustomDataModuleUI {
  class Mode extends System.Enum {
    protected constructor();
    static Color: UnityEditor.CustomDataModuleUI.Mode;
    static Disabled: UnityEditor.CustomDataModuleUI.Mode;
    value__: number;
    static Vector: UnityEditor.CustomDataModuleUI.Mode;
  }
}
declare namespace UnityEditor.CustomDataModuleUI {
  class Texts extends System.Object {
    constructor();
    mode: any;
    modes: any[];
    vectorComponentCount: any;
  }
}
declare namespace UnityEditor {
  class EmissionModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    m_Distance: UnityEditor.SerializedMinMaxCurve;
    m_Time: UnityEditor.SerializedMinMaxCurve;
  }
}
declare namespace UnityEditor.EmissionModuleUI {
  class Texts extends System.Object {
    constructor();
    burst: any;
    burstCount: any;
    burstCycleCount: any;
    burstCycleCountInfinite: any;
    burstRepeatInterval: any;
    burstTime: any;
    rateOverDistance: any;
    rateOverTime: any;
  }
}
declare namespace UnityEditor.EmissionModuleUI {
  class ModeCallbackData extends System.Object {
    constructor(i: number, p: UnityEditor.SerializedProperty);
    modeProp: UnityEditor.SerializedProperty;
    selectedState: number;
  }
}
declare namespace UnityEditor {
  class ExternalForcesModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.ExternalForcesModuleUI {
  class Texts extends System.Object {
    constructor();
    multiplier: any;
  }
}
declare namespace UnityEditor {
  class ForceModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.ForceModuleUI {
  class Texts extends System.Object {
    constructor();
    randomizePerFrame: any;
    space: any;
    spaces: string[];
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class InheritVelocityModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.InheritVelocityModuleUI {
  class Modes extends System.Enum {
    protected constructor();
    static Current: UnityEditor.InheritVelocityModuleUI.Modes;
    static Initial: UnityEditor.InheritVelocityModuleUI.Modes;
    value__: number;
  }
}
declare namespace UnityEditor.InheritVelocityModuleUI {
  class Texts extends System.Object {
    constructor();
    mode: any;
    modes: any[];
    velocity: any;
  }
}
declare namespace UnityEditor {
  class InitialModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    GetXAxisScalar(): number;
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    m_AutoRandomSeed: UnityEditor.SerializedProperty;
    m_Color: UnityEditor.SerializedMinMaxGradient;
    m_CustomSimulationSpace: UnityEditor.SerializedProperty;
    m_EmitterVelocity: UnityEditor.SerializedProperty;
    m_GravityModifier: UnityEditor.SerializedMinMaxCurve;
    m_LengthInSec: UnityEditor.SerializedProperty;
    m_LifeTime: UnityEditor.SerializedMinMaxCurve;
    m_Looping: UnityEditor.SerializedProperty;
    m_MaxNumParticles: UnityEditor.SerializedProperty;
    m_PlayOnAwake: UnityEditor.SerializedProperty;
    m_Prewarm: UnityEditor.SerializedProperty;
    m_RandomizeRotationDirection: UnityEditor.SerializedProperty;
    m_RandomSeed: UnityEditor.SerializedProperty;
    m_Rotation3D: UnityEditor.SerializedProperty;
    m_RotationX: UnityEditor.SerializedMinMaxCurve;
    m_RotationY: UnityEditor.SerializedMinMaxCurve;
    m_RotationZ: UnityEditor.SerializedMinMaxCurve;
    m_ScalingMode: UnityEditor.SerializedProperty;
    m_SimulationSpace: UnityEditor.SerializedProperty;
    m_SimulationSpeed: UnityEditor.SerializedProperty;
    m_Size3D: UnityEditor.SerializedProperty;
    m_SizeX: UnityEditor.SerializedMinMaxCurve;
    m_SizeY: UnityEditor.SerializedMinMaxCurve;
    m_SizeZ: UnityEditor.SerializedMinMaxCurve;
    m_Speed: UnityEditor.SerializedMinMaxCurve;
    m_StartDelay: UnityEditor.SerializedMinMaxCurve;
    m_StopAction: UnityEditor.SerializedProperty;
    m_UseUnscaledTime: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor.InitialModuleUI {
  class Texts extends System.Object {
    constructor();
    autoplay: any;
    autoRandomSeed: any;
    color: any;
    customSimulationSpace: any;
    deltaTime: any;
    duration: any;
    emitterVelocity: any;
    gravity: any;
    lifetime: any;
    looping: any;
    maxParticles: any;
    prewarm: any;
    randomizeRotationDirection: any;
    randomSeed: any;
    rotation: any;
    rotation3D: any;
    scalingMode: any;
    scalingModes: any[];
    simulationSpace: any;
    simulationSpaces: any[];
    simulationSpeed: any;
    size: any;
    size3D: any;
    speed: any;
    startDelay: any;
    stopAction: any;
    stopActions: any[];
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class LightsModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.LightsModuleUI {
  class Texts extends System.Object {
    constructor();
    color: any;
    intensity: any;
    intensityCurve: any;
    light: any;
    maxLights: any;
    randomDistribution: any;
    range: any;
    rangeCurve: any;
    ratio: any;
  }
}
declare namespace UnityEditor.ModuleUI {
  class VisibilityState extends System.Enum {
    protected constructor();
    static NotVisible: UnityEditor.ModuleUI.VisibilityState;
    value__: number;
    static VisibleAndFolded: UnityEditor.ModuleUI.VisibilityState;
    static VisibleAndFoldedOut: UnityEditor.ModuleUI.VisibilityState;
  }
}
declare namespace UnityEditor.ModuleUI {
  class CurveStateCallbackData extends System.Object {
    constructor(state: UnityEditor.MinMaxCurveState, curves: UnityEditor.SerializedMinMaxCurve[]);
    minMaxCurves: UnityEditor.SerializedMinMaxCurve[];
    selectedState: UnityEditor.MinMaxCurveState;
  }
}
declare namespace UnityEditor.ModuleUI {
  class GradientCallbackData extends System.Object {
    constructor(state: UnityEditor.MinMaxGradientState, p: UnityEditor.SerializedMinMaxGradient);
    gradientProp: UnityEditor.SerializedMinMaxGradient;
    selectedState: UnityEditor.MinMaxGradientState;
  }
}
declare namespace UnityEditor.ModuleUI {
  class ColorCallbackData extends System.Object {
    constructor(state: boolean, bp: UnityEditor.SerializedProperty);
    boolProp: UnityEditor.SerializedProperty;
    selectedState: boolean;
  }
}
declare namespace UnityEditor {
  class NoiseModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.NoiseModuleUI {
  class Texts extends System.Object {
    constructor();
    damping: any;
    frequency: any;
    octaveMultiplier: any;
    octaves: any;
    octaveScale: any;
    positionAmount: any;
    previewTexture: any;
    previewTextureMultiEdit: any;
    quality: any;
    qualityDropdown: any[];
    remap: any;
    remapCurve: any;
    rotationAmount: any;
    scrollSpeed: any;
    separateAxes: any;
    sizeAmount: any;
    strength: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class RendererModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    OnSceneViewGUI(): void;
  }
}
declare namespace UnityEditor.RendererModuleUI {
  class RenderMode extends System.Enum {
    protected constructor();
    static Billboard: UnityEditor.RendererModuleUI.RenderMode;
    static BillboardFixedHorizontal: UnityEditor.RendererModuleUI.RenderMode;
    static BillboardFixedVertical: UnityEditor.RendererModuleUI.RenderMode;
    static Mesh: UnityEditor.RendererModuleUI.RenderMode;
    static None: UnityEditor.RendererModuleUI.RenderMode;
    static Stretch3D: UnityEditor.RendererModuleUI.RenderMode;
    value__: number;
  }
}
declare namespace UnityEditor.RendererModuleUI {
  class Texts extends System.Object {
    constructor();
    cameraSpeedScale: any;
    castShadows: any;
    channels: string;
    lengthScale: any;
    localSpace: any[];
    maskingMode: any;
    maskInteractions: any[];
    material: any;
    maxParticleSize: any;
    mesh: any;
    minParticleSize: any;
    motionVectorOptions: any[];
    motionVectors: any;
    normalDirection: any;
    particleTypes: any[];
    pivot: any;
    receiveShadows: any;
    renderMode: any;
    rotation: any;
    sortingFudge: any;
    sortingLayer: any;
    sortingOrder: any;
    sortMode: any;
    sortTypes: any[];
    space: any;
    spaces: any[];
    speedScale: any;
    trailMaterial: any;
    useCustomVertexStreams: any;
    vertexStreamPackedTypes: string[];
    vertexStreamsMenuContent: any[];
    vertexStreamsPacked: string[];
    vertexStreamTexCoordChannels: number[];
    visualizePivot: any;
  }
}
declare namespace UnityEditor.RendererModuleUI {
  class StreamCallbackData extends System.Object {
    constructor(l: UnityEditorInternal.ReorderableList, prop: UnityEditor.SerializedProperty, s: number);
    list: UnityEditorInternal.ReorderableList;
    stream: number;
    streamProp: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class RotationByVelocityModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.RotationByVelocityModuleUI {
  class Texts extends System.Object {
    constructor();
    rotation: any;
    separateAxes: any;
    velocityRange: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class RotationModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.RotationModuleUI {
  class Texts extends System.Object {
    constructor();
    rotation: any;
    separateAxes: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class ShapeModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    GetXAxisScalar(): number;
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    OnSceneViewGUI(): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.ShapeModuleUI {
  class MultiModeParameter extends System.ValueType {
    protected constructor();
    static GetProperty(ui: UnityEditor.ModuleUI, name: string, speed: any): UnityEditor.ShapeModuleUI.MultiModeParameter;
    OnInspectorGUI(text: UnityEditor.ShapeModuleUI.MultiModeTexts): void;
    m_Mode: UnityEditor.SerializedProperty;
    m_Speed: UnityEditor.SerializedMinMaxCurve;
    m_Spread: UnityEditor.SerializedProperty;
    m_Value: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor.ShapeModuleUI.MultiModeParameter {
  class ValueMode extends System.Enum {
    protected constructor();
    static BurstSpread: UnityEditor.ShapeModuleUI.MultiModeParameter.ValueMode;
    static Loop: UnityEditor.ShapeModuleUI.MultiModeParameter.ValueMode;
    static PingPong: UnityEditor.ShapeModuleUI.MultiModeParameter.ValueMode;
    static Random: UnityEditor.ShapeModuleUI.MultiModeParameter.ValueMode;
    value__: number;
  }
}
declare namespace UnityEditor.ShapeModuleUI {
  class Texts extends System.Object {
    constructor();
    alignToDirection: any;
    boxThickness: any;
    boxTypes: any[];
    coneAngle: any;
    coneLength: any;
    coneTypes: any[];
    donutRadius: any;
    emissionModes: any[];
    emitFrom: any;
    mesh: any;
    meshMaterialIndex: any;
    meshNormalOffset: any;
    meshRenderer: any;
    meshType: any;
    meshTypes: any[];
    position: any;
    radius: any;
    radiusThickness: any;
    randomDirectionAmount: any;
    randomPositionAmount: any;
    rotation: any;
    scale: any;
    shape: any;
    shapeTypes: any[];
    skinnedMeshRenderer: any;
    sphericalDirectionAmount: any;
    useMeshColors: any;
  }
}
declare namespace UnityEditor.ShapeModuleUI {
  class MultiModeTexts extends System.Object {
    constructor(_value: string, _mode: string, _spread: string, _speed: string);
    mode: any;
    speed: any;
    spread: any;
    value: any;
  }
}
declare namespace UnityEditor {
  class SizeByVelocityModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.SizeByVelocityModuleUI {
  class Texts extends System.Object {
    constructor();
    separateAxes: any;
    size: any;
    velocityRange: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class SizeModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.SizeModuleUI {
  class Texts extends System.Object {
    constructor();
    separateAxes: any;
    size: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class SubModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.SubModuleUI {
  class SubEmitterType extends System.Enum {
    protected constructor();
    static Birth: UnityEditor.SubModuleUI.SubEmitterType;
    static Collision: UnityEditor.SubModuleUI.SubEmitterType;
    static Death: UnityEditor.SubModuleUI.SubEmitterType;
    static None: UnityEditor.SubModuleUI.SubEmitterType;
    static TypesMax: UnityEditor.SubModuleUI.SubEmitterType;
    value__: number;
  }
}
declare namespace UnityEditor.SubModuleUI {
  class Texts extends System.Object {
    constructor();
    create: any;
    inherit: any;
    propertyTypes: string[];
    subEmitterTypes: any[];
  }
}
declare namespace UnityEditor {
  class TrailModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.TrailModuleUI {
  class Texts extends System.Object {
    constructor();
    colorOverLifetime: any;
    colorOverTrail: any;
    dieWithParticles: any;
    generateLightingData: any;
    inheritParticleColor: any;
    lifetime: any;
    minVertexDistance: any;
    ratio: any;
    sizeAffectsLifetime: any;
    sizeAffectsWidth: any;
    textureMode: any;
    textureModeOptions: any[];
    widthOverTrail: any;
    worldSpace: any;
  }
}
declare namespace UnityEditor {
  class TriggerModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    OnSceneViewGUI(): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.TriggerModuleUI {
  class OverlapOptions extends System.Enum {
    protected constructor();
    static Callback: UnityEditor.TriggerModuleUI.OverlapOptions;
    static Ignore: UnityEditor.TriggerModuleUI.OverlapOptions;
    static Kill: UnityEditor.TriggerModuleUI.OverlapOptions;
    value__: number;
  }
}
declare namespace UnityEditor.TriggerModuleUI {
  class Texts extends System.Object {
    constructor();
    collisionShapes: any;
    createCollisionShape: any;
    enter: any;
    exit: any;
    inside: any;
    outside: any;
    overlapOptions: any[];
    radiusScale: any;
    visualizeBounds: any;
  }
}
declare namespace UnityEditor {
  class UVModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
  }
}
declare namespace UnityEditor.UVModuleUI {
  class AnimationMode extends System.Enum {
    protected constructor();
    static Grid: UnityEditor.UVModuleUI.AnimationMode;
    static Sprites: UnityEditor.UVModuleUI.AnimationMode;
    value__: number;
  }
}
declare namespace UnityEditor.UVModuleUI {
  class AnimationType extends System.Enum {
    protected constructor();
    static SingleRow: UnityEditor.UVModuleUI.AnimationType;
    value__: number;
    static WholeSheet: UnityEditor.UVModuleUI.AnimationType;
  }
}
declare namespace UnityEditor.UVModuleUI {
  class Texts extends System.Object {
    constructor();
    animation: any;
    cycles: any;
    flipU: any;
    flipV: any;
    frame: any;
    frameOverTime: any;
    mode: any;
    modes: any[];
    randomRow: any;
    row: any;
    sprites: any;
    startFrame: any;
    tiles: any;
    tilesX: any;
    tilesY: any;
    types: any[];
    uvChannelMask: any;
  }
}
declare namespace UnityEditor {
  class VelocityModuleUI extends UnityEditor.ModuleUI {
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    OnInspectorGUI(initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
  }
}
declare namespace UnityEditor.VelocityModuleUI {
  class Texts extends System.Object {
    constructor();
    space: any;
    spaces: string[];
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditorInternal.VR {
  class HolographicEmulationWindow extends UnityEditor.EditorWindow {
    constructor();
    emulationMode: UnityEditorInternal.VR.EmulationMode;
  }
}
declare namespace UnityEditorInternal {
  class FrameEventType extends System.Enum {
    protected constructor();
    static ClearAll: UnityEditorInternal.FrameEventType;
    static ClearColor: UnityEditorInternal.FrameEventType;
    static ClearColorDepth: UnityEditorInternal.FrameEventType;
    static ClearColorStencil: UnityEditorInternal.FrameEventType;
    static ClearDepth: UnityEditorInternal.FrameEventType;
    static ClearDepthStencil: UnityEditorInternal.FrameEventType;
    static ClearNone: UnityEditorInternal.FrameEventType;
    static ClearStencil: UnityEditorInternal.FrameEventType;
    static ComputeDispatch: UnityEditorInternal.FrameEventType;
    static DrawProcedural: UnityEditorInternal.FrameEventType;
    static DynamicBatch: UnityEditorInternal.FrameEventType;
    static DynamicGeometry: UnityEditorInternal.FrameEventType;
    static GLDraw: UnityEditorInternal.FrameEventType;
    static GrabIntoRT: UnityEditorInternal.FrameEventType;
    static InstancedMesh: UnityEditorInternal.FrameEventType;
    static Mesh: UnityEditorInternal.FrameEventType;
    static PluginEvent: UnityEditorInternal.FrameEventType;
    static ResolveDepth: UnityEditorInternal.FrameEventType;
    static ResolveRT: UnityEditorInternal.FrameEventType;
    static SetRenderTarget: UnityEditorInternal.FrameEventType;
    static SkinOnGPU: UnityEditorInternal.FrameEventType;
    static StaticBatch: UnityEditorInternal.FrameEventType;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ShowAdditionalInfo extends System.Enum {
    protected constructor();
    static Preview: UnityEditorInternal.ShowAdditionalInfo;
    static ShaderProperties: UnityEditorInternal.ShowAdditionalInfo;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class ShaderFloatInfo extends System.ValueType {
    protected constructor();
    flags: number;
    name: string;
    value: number;
  }
}
declare namespace UnityEditorInternal {
  class ShaderVectorInfo extends System.ValueType {
    protected constructor();
    flags: number;
    name: string;
    value: any;
  }
}
declare namespace UnityEditorInternal {
  class ShaderMatrixInfo extends System.ValueType {
    protected constructor();
    flags: number;
    name: string;
    value: any;
  }
}
declare namespace UnityEditorInternal {
  class ShaderTextureInfo extends System.ValueType {
    protected constructor();
    flags: number;
    name: string;
    textureName: string;
    value: any;
  }
}
declare namespace UnityEditorInternal {
  class ShaderBufferInfo extends System.ValueType {
    protected constructor();
    flags: number;
    name: string;
  }
}
declare namespace UnityEditorInternal {
  class ShaderProperties extends System.ValueType {
    protected constructor();
    buffers: UnityEditorInternal.ShaderBufferInfo[];
    floats: UnityEditorInternal.ShaderFloatInfo[];
    matrices: UnityEditorInternal.ShaderMatrixInfo[];
    textures: UnityEditorInternal.ShaderTextureInfo[];
    vectors: UnityEditorInternal.ShaderVectorInfo[];
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerEventData extends System.ValueType {
    protected constructor();
    batchBreakCause: number;
    blendState: UnityEditorInternal.FrameDebuggerBlendState;
    csInstanceID: number;
    csKernel: string;
    csName: string;
    csThreadGroupsX: number;
    csThreadGroupsY: number;
    csThreadGroupsZ: number;
    depthState: UnityEditorInternal.FrameDebuggerDepthState;
    frameEventIndex: number;
    indexCount: number;
    instanceCount: number;
    mesh: any;
    meshInstanceID: number;
    meshSubset: number;
    passLightMode: string;
    passName: string;
    rasterState: UnityEditorInternal.FrameDebuggerRasterState;
    rendererInstanceID: number;
    rtCount: number;
    rtDim: number;
    rtFace: number;
    rtFormat: number;
    rtHasDepthTexture: number;
    rtHeight: number;
    rtName: string;
    rtWidth: number;
    shaderInstanceID: number;
    shaderKeywords: string;
    shaderName: string;
    shaderPassIndex: number;
    shaderProperties: UnityEditorInternal.ShaderProperties;
    stencilRef: number;
    stencilState: UnityEditorInternal.FrameDebuggerStencilState;
    subShaderIndex: number;
    vertexCount: number;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerEvent extends System.ValueType {
    protected constructor();
    gameObject: any;
    type: UnityEditorInternal.FrameEventType;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerBlendState extends System.ValueType {
    protected constructor();
    blendOp: any;
    blendOpAlpha: any;
    dstBlend: any;
    dstBlendAlpha: any;
    srcBlend: any;
    srcBlendAlpha: any;
    writeMask: number;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerRasterState extends System.ValueType {
    protected constructor();
    cullMode: any;
    depthBias: number;
    depthClip: boolean;
    slopeScaledDepthBias: number;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerDepthState extends System.ValueType {
    protected constructor();
    depthFunc: any;
    depthWrite: number;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerStencilState extends System.ValueType {
    protected constructor();
    padding: number;
    readMask: number;
    stencilEnable: boolean;
    stencilFailOpBack: any;
    stencilFailOpFront: any;
    stencilFuncBack: any;
    stencilFuncFront: any;
    stencilPassOpBack: any;
    stencilPassOpFront: any;
    stencilZFailOpBack: any;
    stencilZFailOpFront: any;
    writeMask: number;
  }
}
declare namespace UnityEditor {
  class FrameDebuggerWindow extends UnityEditor.EditorWindow {
    constructor();
    EnableIfNeeded(): void;
    static ShowFrameDebuggerWindow(): UnityEditor.FrameDebuggerWindow;
    static readonly styles: UnityEditor.FrameDebuggerWindow.Styles;
    m_PreviewDir: any;
    static s_FrameEventTypeNames: string[];
  }
}
declare namespace UnityEditor.FrameDebuggerWindow {
  class EventDataStrings extends System.ValueType {
    protected constructor();
    pass: string;
    shader: string;
    stencilComp: string;
    stencilFail: string;
    stencilPass: string;
    stencilReadMask: string;
    stencilRef: string;
    stencilWriteMask: string;
    stencilZFail: string;
    texturePropertyTooltips: string[];
  }
}
declare namespace UnityEditor.FrameDebuggerWindow {
  class Styles extends System.Object {
    constructor();
    static arrayValuePopupButton: any;
    batchBreakCauses: string[];
    static causeOfNewDrawCallLabel: any;
    static channelHeader: any;
    static channelLabels: any[];
    static copyToClipboardTooltip: any;
    static depthLabel: any;
    entryEven: any;
    entryOdd: any;
    header: any;
    headerContent: any[];
    static levelsHeader: any;
    static mrtLabels: any[];
    nextFrame: any;
    prevFrame: any;
    recordButton: any;
    rowText: any;
    rowTextRight: any;
    static s_ColumnNames: string[];
    static selectShaderTooltip: any;
  }
}
declare namespace UnityEditor.FrameDebuggerWindow {
  class ArrayValuePopup extends UnityEditor.PopupWindowContent {
    constructor(startIndex: number, numValues: number, windowWidth: number, getValueString: ((index: number, highPrecision: boolean) => string));
    GetWindowSize(): any;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerTreeView extends System.Object {
    constructor(frameEvents: UnityEditorInternal.FrameDebuggerEvent[], treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, window: UnityEditor.FrameDebuggerWindow, startRect: any);
    OnGUI(rect: any): void;
    SelectFrameEventIndex(eventIndex: number): void;
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView {
  class FDTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditorInternal.FrameDebuggerTreeView.FDTreeViewItem, displayName: string);
    m_ChildEventCount: number;
    m_EventIndex: number;
    m_FrameEvent: UnityEditorInternal.FrameDebuggerEvent;
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView {
  class FDTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView {
  class FDTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, frameEvents: UnityEditorInternal.FrameDebuggerEvent[]);
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    SetEvents(frameEvents: UnityEditorInternal.FrameDebuggerEvent[]): void;
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView.FDTreeViewDataSource {
  class FDTreeHierarchyLevel extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditorInternal {
  class PluginsHelper extends System.Object {
    constructor();
    static CheckFileCollisions(buildTarget: UnityEditor.BuildTarget): boolean;
  }
}
declare namespace UnityEditor {
  class CacheServerPreferences extends System.Object {
    constructor();
    static OnGUI(): void;
    static ReadPreferences(): void;
    static WritePreferences(): void;
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class Styles extends System.Object {
    constructor();
    static browse: any;
    static browseCacheLocation: any;
    static cacheFolderLocation: any;
    static cleanCache: any;
    static customCacheLocation: any;
    static enumerateCache: any;
    static maxCacheSize: any;
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class Constants extends System.Object {
    constructor();
    cacheFolderLocation: any;
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class ConnectionState extends System.Enum {
    protected constructor();
    static Failure: UnityEditor.CacheServerPreferences.ConnectionState;
    static Success: UnityEditor.CacheServerPreferences.ConnectionState;
    static Unknown: UnityEditor.CacheServerPreferences.ConnectionState;
    value__: number;
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class CacheServerMode extends System.Enum {
    protected constructor();
    static Disabled: UnityEditor.CacheServerPreferences.CacheServerMode;
    static Local: UnityEditor.CacheServerPreferences.CacheServerMode;
    static Remote: UnityEditor.CacheServerPreferences.CacheServerMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class DiagnosticSwitchPreferences extends System.Object {
    protected constructor();
    static OnGUI(): void;
  }
}
declare namespace UnityEditor.DiagnosticSwitchPreferences {
  class Resources extends System.Object {
    constructor();
    restartNeededWarning: any;
    scrollArea: any;
    smallWarningIcon: any;
    title: any;
  }
}
declare namespace UnityEditor {
  class PreferencesWindow extends UnityEditor.EditorWindow {
    constructor();
    ApplyChangesToPrefs(force?: boolean): void;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class Constants extends System.Object {
    constructor();
    cacheFolderLocation: any;
    errorLabel: any;
    evenRow: any;
    keysElement: any;
    oddRow: any;
    sectionElement: any;
    sectionHeader: any;
    sectionScrollView: any;
    selected: any;
    settingsBox: any;
    settingsBoxTitle: any;
    warningIcon: any;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class Styles extends System.Object {
    constructor();
    static browse: any;
    static browseGICacheLocation: any;
    static cacheCompression: any;
    static cacheFolderLocation: any;
    static cacheSizeIs: any;
    static cantChangeCacheSettings: any;
    static cleanCache: any;
    static customCacheLocation: any;
    static maxCacheSize: any;
    static pleaseWait: any;
    static spriteMaxCacheSize: any;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class Section extends System.Object {
    constructor(name: string, guiFunc: (() => void));
    constructor(name: string, icon: any, guiFunc: (() => void));
    constructor(content: any, guiFunc: (() => void));
    content: any;
    guiFunc: (() => void);
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class GICacheSettings extends System.ValueType {
    protected constructor();
    m_CachePath: string;
    m_CompressionLevel: number;
    m_EnableCustomPath: boolean;
    m_MaximumSize: number;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class RefString extends System.Object {
    constructor(s: string);
    ToString(): string;
    str: string;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class AppsListUserData extends System.Object {
    constructor(paths: string[], str: UnityEditor.PreferencesWindow.RefString, onChanged: (() => void));
    onChanged: (() => void);
    paths: string[];
    str: UnityEditor.PreferencesWindow.RefString;
  }
}
declare namespace UnityEditor {
  class ColorPresetLibrary extends UnityEditor.PresetLibrary {
    constructor();
    Add(presetObject: any, presetName: string): void;
    Count(): number;
    CreateDebugColors(): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    GetPreset(index: number): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
    SetName(index: number, presetName: string): void;
    static kMiniSwatchSize: number;
    static kSwatchSize: number;
  }
}
declare namespace UnityEditor {
  class PresetLibrary extends UnityEngine.ScriptableObject {
    protected constructor();
    Add(presetObject: any, presetName: string): void;
    Count(): number;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    GetPreset(index: number): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
    SetName(index: number, name: string): void;
  }
}
declare namespace UnityEditor.ColorPresetLibrary {
  class ColorPreset extends System.Object {
    constructor(preset: any, presetName: string);
    constructor(preset: any, preset2: any, presetName: string);
    color: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class CurvePresetLibrary extends UnityEditor.PresetLibrary {
    constructor();
    Add(presetObject: any, presetName: string): void;
    Count(): number;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    GetPreset(index: number): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
    SetName(index: number, presetName: string): void;
  }
}
declare namespace UnityEditor.CurvePresetLibrary {
  class CurvePreset extends System.Object {
    constructor(preset: any, presetName: string);
    constructor(preset: any, preset2: any, presetName: string);
    curve: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class CurveLibraryType extends System.Enum {
    protected constructor();
    static NormalizedZeroToOne: UnityEditor.CurveLibraryType;
    static Unbounded: UnityEditor.CurveLibraryType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class CurvePresetsContentsForPopupWindow extends UnityEditor.PopupWindowContent {
    constructor(animCurve: any, curveLibraryType: UnityEditor.CurveLibraryType, presetSelectedCallback: ((obj: any) => void));
    static GetBasePrefText(curveLibraryType: UnityEditor.CurveLibraryType): string;
    GetPresetLibraryEditor(): any;
    GetWindowSize(): any;
    InitIfNeeded(): void;
    OnClose(): void;
    OnGUI(rect: any): void;
    currentPresetLibrary: string;
    curveToSaveAsPreset: any;
  }
}
declare namespace UnityEditor {
  class DoubleCurve extends System.Object {
    constructor(minCurve: any, maxCurve: any, signedRange: boolean);
    IsSingleCurve(): boolean;
    maxCurve: any;
    minCurve: any;
    signedRange: boolean;
  }
}
declare namespace UnityEditor {
  class DoubleCurvePresetLibrary extends UnityEditor.PresetLibrary {
    constructor();
    Add(presetObject: any, presetName: string): void;
    Count(): number;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    GetPreset(index: number): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
    SetName(index: number, presetName: string): void;
  }
}
declare namespace UnityEditor.DoubleCurvePresetLibrary {
  class DoubleCurvePreset extends System.Object {
    constructor(doubleCurvePreset: UnityEditor.DoubleCurve, presetName: string);
    doubleCurve: UnityEditor.DoubleCurve;
    name: string;
  }
}
declare namespace UnityEditor {
  class DoubleCurvePresetsContentsForPopupWindow extends UnityEditor.PopupWindowContent {
    constructor(doubleCurveToSave: UnityEditor.DoubleCurve, presetSelectedCallback: ((obj: UnityEditor.DoubleCurve) => void));
    GetPresetLibraryEditor(): any;
    GetWindowSize(): any;
    InitIfNeeded(): void;
    OnClose(): void;
    OnGUI(rect: any): void;
    doubleCurveToSave: UnityEditor.DoubleCurve;
  }
}
declare namespace UnityEditor {
  class GradientPresetLibrary extends UnityEditor.PresetLibrary {
    constructor();
    Add(presetObject: any, presetName: string): void;
    Count(): number;
    DebugCreateTonsOfPresets(): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    GetPreset(index: number): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Remove(index: number): void;
    Replace(index: number, newPresetObject: any): void;
    SetName(index: number, presetName: string): void;
  }
}
declare namespace UnityEditor.GradientPresetLibrary {
  class GradientPreset extends System.Object {
    constructor(preset: any, presetName: string);
    gradient: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class PopupWindowContentForNewLibrary extends UnityEditor.PopupWindowContent {
    constructor(createLibraryCallback: ((arg1: string, arg2: UnityEditor.PresetFileLocation) => string));
    GetWindowSize(): any;
    OnGUI(rect: any): void;
  }
}
declare namespace UnityEditor.PopupWindowContentForNewLibrary {
  class Texts extends System.Object {
    constructor();
    fileLocationOrder: UnityEditor.PresetFileLocation[];
    fileLocations: any[];
    header: any;
    location: any;
    name: any;
  }
}
declare namespace UnityEditor {
  class PresetLibraryHelpers extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class PresetLibraryEditorState extends System.Object {
    constructor(prefix: string);
    static GetItemViewMode(prefix: string): UnityEditor.PresetLibraryEditorState.ItemViewMode;
    TransferEditorPrefsState(load: boolean): void;
    itemViewMode: UnityEditor.PresetLibraryEditorState.ItemViewMode;
    m_CurrrentLibrary: string;
    m_HoverIndex: number;
    m_Prefix: string;
    m_PreviewHeight: number;
    m_RenameOverlay: UnityEditor.RenameOverlay;
    m_ScrollPosition: any;
  }
}
declare namespace UnityEditor.PresetLibraryEditorState {
  class ItemViewMode extends System.Enum {
    protected constructor();
    static Grid: UnityEditor.PresetLibraryEditorState.ItemViewMode;
    static List: UnityEditor.PresetLibraryEditorState.ItemViewMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PresetFileLocation extends System.Enum {
    protected constructor();
    static PreferencesFolder: UnityEditor.PresetFileLocation;
    static ProjectFolder: UnityEditor.PresetFileLocation;
    value__: number;
  }
}
declare namespace UnityEditor {
  class PresetLibraryLocations extends System.Object {
    protected constructor();
    static GetAvailableFilesWithExtensionOnTheHDD(fileLocation: UnityEditor.PresetFileLocation, fileExtensionWithoutDot: string): string[];
    static GetCurveLibraryExtension(normalized: boolean): string;
    static GetDefaultFilePathForFileLocation(fileLocation: UnityEditor.PresetFileLocation): string;
    static GetFileLocationFromPath(path: string): UnityEditor.PresetFileLocation;
    static GetParticleCurveLibraryExtension(singleCurve: boolean, signedRange: boolean): string;
    static readonly defaultLibraryLocation: string;
    static readonly defaultLibraryName: string;
    static readonly defaultPresetLibraryPath: string;
  }
}
declare namespace UnityEditor {
  class PresetLibraryManager {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetLastError(): string;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor.PresetLibraryManager {
  class LibraryCache extends System.Object {
    constructor(identifier: string);
    UnloadScriptableObjects(): void;
    readonly identifier: string;
    readonly loadedLibraries: UnityEngine.ScriptableObject[];
    readonly loadedLibraryIDs: string[];
  }
}
declare namespace UnityEditor {
  class SaveType extends System.Enum {
    protected constructor();
    static Binary: UnityEditor.SaveType;
    static Text: UnityEditor.SaveType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SavedFilter extends System.Object {
    constructor(name: string, filter: UnityEditor.SearchFilter, depth: number, previewSize: number);
    m_Depth: number;
    m_Filter: UnityEditor.SearchFilter;
    m_ID: number;
    m_Name: string;
    m_PreviewSize: number;
  }
}
declare namespace UnityEditor {
  class SavedSearchFilters {
    constructor();
    static AddChangeListener(callback: (() => void)): void;
    static AddSavedFilter(displayName: string, filter: UnityEditor.SearchFilter, previewSize: number): number;
    static AddSavedFilterAfterInstanceID(displayName: string, filter: UnityEditor.SearchFilter, previewSize: number, insertAfterID: number, addAsChild: boolean): number;
    static AllowsHierarchy(): boolean;
    static CanMoveSavedFilter(instanceID: number, parentInstanceID: number, targetInstanceID: number, after: boolean): boolean;
    static ConvertToTreeView(): UnityEditor.IMGUI.Controls.TreeViewItem;
    Equals(other: any): boolean;
    static GetFilter(instanceID: number): UnityEditor.SearchFilter;
    static GetFilterInstanceID(name: string, searchFieldString: string): number;
    GetHashCode(): number;
    GetInstanceID(): number;
    static GetName(instanceID: number): string;
    static GetPreviewSize(instanceID: number): number;
    static GetRootInstanceID(): number;
    GetType(): any;
    static IsSavedFilter(instanceID: number): boolean;
    static MoveSavedFilter(instanceID: number, parentInstanceID: number, targetInstanceID: number, after: boolean): void;
    static RefreshSavedFilters(): void;
    static RemoveSavedFilter(instanceID: number): void;
    SetDirty(): void;
    static SetName(instanceID: number, name: string): void;
    ToString(): string;
    static UpdateExistingSavedFilter(instanceID: number, filter: UnityEditor.SearchFilter, previewSize: number): void;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class ObjectCopier extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class FilteredHierarchy extends System.Object {
    constructor(type: UnityEditor.HierarchyType);
    AddSubItemsOfMainRepresentation(mainRepresentionIndex: number, visibleItems: UnityEditor.FilteredHierarchy.FilterResult[]): number;
    GetSubAssetInstanceIDs(mainAssetInstanceID: number): number[];
    RefreshVisibleItems(expandedInstanceIDs: number[]): void;
    ResultsChanged(): void;
    SetResults(instanceIDs: number[]): void;
    foldersFirst: boolean;
    readonly hierarchyType: UnityEditor.HierarchyType;
    readonly results: UnityEditor.FilteredHierarchy.FilterResult[];
    searchFilter: UnityEditor.SearchFilter;
  }
}
declare namespace UnityEditor.FilteredHierarchy {
  class FilterResult extends System.Object {
    constructor();
    readonly guid: string;
    icon: any;
    colorCode: number;
    hasChildren: boolean;
    hasFullPreviewImage: boolean;
    iconDrawStyle: UnityEditor.IconDrawStyle;
    instanceID: number;
    isFolder: boolean;
    isMainRepresentation: boolean;
    name: string;
    type: UnityEditor.HierarchyType;
  }
}
declare namespace UnityEditor {
  class FilteredHierarchyProperty extends System.Object {
    constructor(filter: UnityEditor.FilteredHierarchy);
    CountRemaining(expanded: number[]): number;
    static CreateHierarchyPropertyForFilter(filteredHierarchy: UnityEditor.FilteredHierarchy): UnityEditor.IHierarchyProperty;
    Find(_instanceID: number, expanded: number[]): boolean;
    FindAllAncestors(instanceIDs: number[]): number[];
    IsExpanded(expanded: number[]): boolean;
    Next(expanded: number[]): boolean;
    NextWithDepthCheck(expanded: number[], minDepth: number): boolean;
    Parent(): boolean;
    Previous(expanded: number[]): boolean;
    Reset(): void;
    Skip(count: number, expanded: number[]): boolean;
    readonly ancestors: number[];
    readonly colorCode: number;
    readonly depth: number;
    readonly guid: string;
    readonly hasChildren: boolean;
    readonly hasFullPreviewImage: boolean;
    readonly icon: any;
    readonly iconDrawStyle: UnityEditor.IconDrawStyle;
    readonly instanceID: number;
    readonly isFolder: boolean;
    readonly isMainRepresentation: boolean;
    readonly isValid: boolean;
    readonly name: string;
    readonly pptrValue: UnityEngine.Object;
    readonly row: number;
  }
}
declare namespace UnityEditor {
  class DragAndDropDelay extends System.Object {
    constructor();
    CanStartDrag(): boolean;
    mouseDownPosition: any;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class EndNameEditAction extends UnityEngine.ScriptableObject {
    protected constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    CleanUp(): void;
    OnEnable(): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateNewAsset extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateFolder extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateScene extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreatePrefab extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateScriptAsset extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateAnimatorController extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateAudioMixer extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateSpritePolygon extends UnityEditor.ProjectWindowCallback.EndNameEditAction {
    constructor();
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    sides: number;
  }
}
declare namespace UnityEditor {
  class ProjectWindowUtil extends System.Object {
    constructor();
    static CreateAsset(asset: UnityEngine.Object, pathName: string): void;
    static CreateFolder(): void;
    static CreateNewGUISkin(): void;
    static CreatePrefab(): void;
    static CreateScene(): void;
    static GetAncestors(instanceID: number): number[];
    static GetBaseFolders(folders: string[]): string[];
    static GetContainingFolder(path: string): string;
    static IsFolder(instanceID: number): boolean;
    static ShowCreatedAsset(o: UnityEngine.Object): void;
    static StartNameEditingIfProjectWindowExists(instanceID: number, endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, pathName: string, icon: any, resourceFile: string): void;
  }
}
declare namespace UnityEditor.SearchableEditorWindow {
  class SearchMode extends System.Enum {
    protected constructor();
    static All: UnityEditor.SearchableEditorWindow.SearchMode;
    static AssetBundleName: UnityEditor.SearchableEditorWindow.SearchMode;
    static Label: UnityEditor.SearchableEditorWindow.SearchMode;
    static Name: UnityEditor.SearchableEditorWindow.SearchMode;
    static Type: UnityEditor.SearchableEditorWindow.SearchMode;
    value__: number;
  }
}
declare namespace UnityEditor.SearchableEditorWindow {
  class SearchModeHierarchyWindow extends System.Enum {
    protected constructor();
    static All: UnityEditor.SearchableEditorWindow.SearchModeHierarchyWindow;
    static Name: UnityEditor.SearchableEditorWindow.SearchModeHierarchyWindow;
    static Type: UnityEditor.SearchableEditorWindow.SearchModeHierarchyWindow;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SearchFilter extends System.Object {
    constructor();
    ClearSearch(): void;
    GetState(): UnityEditor.SearchFilter.State;
    IsSearching(): boolean;
    SetNewFilter(newFilter: UnityEditor.SearchFilter): boolean;
    static Split(text: string): string[];
    ToString(): string;
    assetBundleNames: string[];
    assetLabels: string[];
    classNames: string[];
    folders: string[];
    nameFilter: string;
    referencingInstanceIDs: number[];
    scenePaths: string[];
    searchArea: UnityEditor.SearchFilter.SearchArea;
    showAllHits: boolean;
    softLockControlStates: string[];
    versionControlStates: string[];
  }
}
declare namespace UnityEditor.SearchFilter {
  class SearchArea extends System.Enum {
    protected constructor();
    static AllAssets: UnityEditor.SearchFilter.SearchArea;
    static AssetStore: UnityEditor.SearchFilter.SearchArea;
    static SelectedFolders: UnityEditor.SearchFilter.SearchArea;
    value__: number;
  }
}
declare namespace UnityEditor.SearchFilter {
  class State extends System.Enum {
    protected constructor();
    static EmptySearchFilter: UnityEditor.SearchFilter.State;
    static FolderBrowsing: UnityEditor.SearchFilter.State;
    static SearchingInAllAssets: UnityEditor.SearchFilter.State;
    static SearchingInAssetStore: UnityEditor.SearchFilter.State;
    static SearchingInFolders: UnityEditor.SearchFilter.State;
    value__: number;
  }
}
declare namespace UnityEditor.SceneManagement {
  class SceneSetup extends System.Object {
    constructor();
    isActive: boolean;
    isLoaded: boolean;
    path: string;
  }
}
declare namespace UnityEditor {
  class LightingExplorerWindow extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.LightingExplorerWindow {
  class Styles extends System.Object {
    protected constructor();
    static TabTypes: any[];
  }
}
declare namespace UnityEditor.LightingExplorerWindow {
  class TabType extends System.Enum {
    protected constructor();
    static Count: UnityEditor.LightingExplorerWindow.TabType;
    static Emissives: UnityEditor.LightingExplorerWindow.TabType;
    static LightProbes: UnityEditor.LightingExplorerWindow.TabType;
    static Lights: UnityEditor.LightingExplorerWindow.TabType;
    static Reflections: UnityEditor.LightingExplorerWindow.TabType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightingExplorerWindowTab extends System.Object {
    constructor(lightTable: UnityEditor.SerializedPropertyTable);
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    OnHierarchyChange(): void;
    OnInspectorUpdate(): void;
    OnSelectionChange(): void;
    OnSelectionChange(instanceIDs: number[]): void;
  }
}
declare namespace UnityEditor {
  class LightingWindow extends UnityEditor.EditorWindow {
    constructor();
    static kButtonWidth: number;
    m_LightingTab: UnityEditor.LightingWindowLightingTab;
  }
}
declare namespace UnityEditor.LightingWindow {
  class Mode extends System.Enum {
    protected constructor();
    static LightingSettings: UnityEditor.LightingWindow.Mode;
    static ObjectSettings: UnityEditor.LightingWindow.Mode;
    static OutputMaps: UnityEditor.LightingWindow.Mode;
    value__: number;
  }
}
declare namespace UnityEditor.LightingWindow {
  class BakeMode extends System.Enum {
    protected constructor();
    static BakeReflectionProbes: UnityEditor.LightingWindow.BakeMode;
    static Clear: UnityEditor.LightingWindow.BakeMode;
    value__: number;
  }
}
declare namespace UnityEditor.LightingWindow {
  class Styles extends System.Object {
    protected constructor();
    static BuildLabel: any;
    static ButtonStyle: any;
    static ContinuousBakeLabel: any;
    static LabelStyle: any;
    static ModeToggles: any[];
    static ToolbarStyle: any;
    static ToolbarTitleStyle: any;
  }
}
declare namespace UnityEditor {
  class LightingWindowBakeSettings extends System.Object {
    constructor();
    DeveloperBuildSettingsGUI(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
  }
}
declare namespace UnityEditor.LightingWindowBakeSettings {
  class Styles extends System.Object {
    protected constructor();
    static AlbedoBoost: any;
    static AmbientOcclusion: any;
    static AmbientOcclusionContribution: any;
    static AmbientOcclusionContributionDirect: any;
    static AOMaxDistance: any;
    static BakeBackend: any;
    static BakedGIDisabledInfo: any;
    static BounceScale: any;
    static BouncesStrings: any[];
    static BouncesValues: number[];
    static ConcurrentJobs: any;
    static ConcurrentJobsTypeStrings: any[];
    static ConcurrentJobsTypeValues: number[];
    static DefaultLightmapParameters: any;
    static FinalGather: any;
    static FinalGatherFiltering: any;
    static FinalGatherRayCount: any;
    static ForceUpdates: any;
    static ForceWhiteAlbedo: any;
    static GeneralLightmapLabel: any;
    static HelpStringsMixed: any[];
    static IndirectOutputScale: any;
    static IndirectResolution: any;
    static LabelStyle: any;
    static LightmapDirectionalMode: any;
    static LightmapDirectionalModeStrings: any[];
    static LightmapDirectionalModeValues: number[];
    static LightmapResolution: any;
    static LightmapSize: any;
    static LightmapSizeStrings: any[];
    static LightmapSizeValues: number[];
    static MixedLightMode: any;
    static MixedLightsLabel: any;
    static MixedModeStrings: any[];
    static MixedModeValues: number[];
    static NoDirectionalInSM2AndGLES2: any;
    static NoShadowMaskInProgressive: any;
    static Padding: any;
    static PVRBounces: any;
    static PVRCulling: any;
    static PVRDirectSampleCount: any;
    static PVRFiltering: any;
    static PVRFilteringAdvanced: any;
    static PVRFilteringAtrousPositionSigmaAO: any;
    static PVRFilteringAtrousPositionSigmaDirect: any;
    static PVRFilteringAtrousPositionSigmaIndirect: any;
    static PVRFilteringGaussRadiusAO: any;
    static PVRFilteringGaussRadiusDirect: any;
    static PVRFilteringGaussRadiusIndirect: any;
    static PVRFilteringMode: any;
    static PVRFilterTypeAO: any;
    static PVRFilterTypeDirect: any;
    static PVRFilterTypeIndirect: any;
    static PVRIndirectSampleCount: any;
    static RealtimeLightsLabel: any;
    static SubtractiveShadowColor: any;
    static TextureCompression: any;
    static UpdateThreshold: any;
    static UseRealtimeGI: any;
  }
}
declare namespace UnityEditor {
  class LightingWindowLightingTab extends System.Object {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    StatisticsPreview(r: any): void;
  }
}
declare namespace UnityEditor.LightingWindowLightingTab {
  class Styles extends System.Object {
    protected constructor();
    static BakedEmissiveMaterials: any;
    static BakedLights: any;
    static DebugSettings: any;
    static DynamicMeshes: any;
    static LightProbeGroups: any;
    static LightProbeVisualization: any;
    static MixedLights: any;
    static OtherSettings: any;
    static RealtimeEmissiveMaterials: any;
    static RealtimeLights: any;
    static ReflectionProbes: any;
    static StaticMeshes: any;
    static StaticMeshesIconWarning: any;
    static StatisticsCategory: any;
    static StatisticsDisabled: any;
    static StatisticsEnabled: any;
    static StatisticsInactive: any;
    static StatisticsWarning: string;
    static StatsTableContent: any;
    static StatsTableHeader: any;
    static UpdateStatistics: any;
  }
}
declare namespace UnityEditor {
  class LightingWindowLightmapPreviewTab extends System.Object {
    constructor();
    LightmapPreview(r: any): void;
    Maps(): void;
    UpdateLightmapSelection(): void;
  }
}
declare namespace UnityEditor.LightingWindowLightmapPreviewTab {
  class Styles extends System.Object {
    constructor();
    LightingDataAsset: any;
    LightProbes: any;
    MapsArraySize: any;
    selectedLightmapHighlight: any;
  }
}
declare namespace UnityEditor {
  class LightingWindowObjectTab extends System.Object {
    constructor();
    ObjectPreview(r: any): void;
    OnDisable(): void;
    OnEnable(window: UnityEditor.EditorWindow): void;
  }
}
declare namespace UnityEditor {
  class LightModeUtil extends System.Object {
    protected constructor();
    AnalyzeScene(stats: any): void;
    AreBakedLightmapsEnabled(): boolean;
    DrawBakedGIElement(): void;
    DrawElement(property: UnityEditor.SerializedProperty, label: any): void;
    DrawElement(r: any, property: UnityEditor.SerializedProperty, dependency: UnityEditor.SerializedProperty): void;
    Flush(): boolean;
    static Get(): UnityEditor.LightModeUtil;
    GetAmbientLightingMode(mode: any): boolean;
    GetAmbientLightingMode(): number;
    GetModes(realtimeMode: any, mixedMode: any): void;
    GetProps(o_enableRealtimeGI: any, o_enableBakedGI: any, o_mixedBakeMode: any, o_useShadowMask: any): void;
    IsAnyGIEnabled(): boolean;
    IsRealtimeGIEnabled(): boolean;
    IsSubtractiveModeEnabled(): boolean;
    IsWorkflowAuto(): boolean;
    Load(): boolean;
    SetWorkflow(bAutoEnabled: boolean): void;
    Store(realtimeMode: number, mixedMode: number): void;
    static s_enableBaked: any;
    static s_typenames: string[];
  }
}
declare namespace UnityEditor.LightModeUtil {
  class LightmapMixedBakeMode extends System.Enum {
    protected constructor();
    static IndirectOnly: UnityEditor.LightModeUtil.LightmapMixedBakeMode;
    static LightmapsWithSubtractiveShadows: UnityEditor.LightModeUtil.LightmapMixedBakeMode;
    static ShadowmaskAndIndirect: UnityEditor.LightModeUtil.LightmapMixedBakeMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightModeValidator extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.LightModeValidator {
  class Receivers extends System.Enum {
    protected constructor();
    static LightProbe: UnityEditor.LightModeValidator.Receivers;
    static None: UnityEditor.LightModeValidator.Receivers;
    static StaticMesh: UnityEditor.LightModeValidator.Receivers;
    value__: number;
  }
}
declare namespace UnityEditor.LightModeValidator {
  class Emitters extends System.Enum {
    protected constructor();
    static Baked: UnityEditor.LightModeValidator.Emitters;
    static BakedAmbient: UnityEditor.LightModeValidator.Emitters;
    static BakedEmissive: UnityEditor.LightModeValidator.Emitters;
    static BakedLight: UnityEditor.LightModeValidator.Emitters;
    static None: UnityEditor.LightModeValidator.Emitters;
    static Realtime: UnityEditor.LightModeValidator.Emitters;
    static RealtimeAmbient: UnityEditor.LightModeValidator.Emitters;
    static RealtimeEmissive: UnityEditor.LightModeValidator.Emitters;
    static RealtimeLight: UnityEditor.LightModeValidator.Emitters;
    value__: number;
  }
}
declare namespace UnityEditor.LightModeValidator {
  class Stats extends System.ValueType {
    protected constructor();
    Reset(): void;
    active: UnityEditor.LightingStats;
    ambientMode: number;
    bakedMode: number;
    emitterMask: UnityEditor.LightModeValidator.Emitters;
    enabled: UnityEditor.LightingStats;
    inactive: UnityEditor.LightingStats;
    mixedMode: number;
    realtimeMode: number;
    receiverMask: UnityEditor.LightModeValidator.Receivers;
    requiresLightmaps: boolean;
    requiresRealtimeGI: boolean;
  }
}
declare namespace UnityEditor {
  class LightTableColumns extends System.Object {
    constructor();
    static CreateEmissivesColumns(propNames: any): UnityEditor.SerializedPropertyTreeView.Column[];
    static CreateLightColumns(propNames: any): UnityEditor.SerializedPropertyTreeView.Column[];
    static CreateLightProbeColumns(propNames: any): UnityEditor.SerializedPropertyTreeView.Column[];
    static CreateReflectionColumns(propNames: any): UnityEditor.SerializedPropertyTreeView.Column[];
  }
}
declare namespace UnityEditor.LightTableColumns {
  class Styles extends System.Object {
    protected constructor();
    static Color: any;
    static FarPlane: any;
    static GlobalIllumination: any;
    static HDR: any;
    static IndirectMultiplier: any;
    static Intensity: any;
    static LightmapEmissiveStrings: any[];
    static Mode: any;
    static Name: any;
    static NearPlane: any;
    static On: any;
    static Projection: any;
    static ProjectionStrings: any[];
    static SelectObjects: any;
    static SelectObjectsButton: any;
    static ShadowDistance: any;
    static ShadowType: any;
    static Type: any;
  }
}
declare namespace UnityEditor {
  class NavMeshEditorWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    static BackgroundTaskStatusChanged(): void;
    OnBecameInvisible(): void;
    OnBecameVisible(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    static OpenAgentSettings(agentTypeID: number): void;
    static OpenAreaSettings(): void;
    static SetupWindow(): void;
  }
}
declare namespace UnityEditor.NavMeshEditorWindow {
  class Mode extends System.Enum {
    protected constructor();
    static AgentSettings: UnityEditor.NavMeshEditorWindow.Mode;
    static AreaSettings: UnityEditor.NavMeshEditorWindow.Mode;
    static ObjectSettings: UnityEditor.NavMeshEditorWindow.Mode;
    static SceneBakeSettings: UnityEditor.NavMeshEditorWindow.Mode;
    value__: number;
  }
}
declare namespace UnityEditor.NavMeshEditorWindow {
  class Styles extends System.Object {
    constructor();
    m_AdvancedHeader: any;
    m_AgentClimbContent: any;
    m_AgentDropContent: any;
    m_AgentHeightContent: any;
    m_AgentJumpContent: any;
    m_AgentPlacementContent: any;
    m_AgentRadiusContent: any;
    m_AgentSizeHeader: any;
    m_AgentSlopeContent: any;
    m_AgentTypesHeader: any;
    m_CellSizeContent: any;
    m_CostLabel: any;
    m_LearnAboutComponent: any;
    m_ManualCellSizeContent: any;
    m_MinRegionAreaContent: any;
    m_ModeToggles: any[];
    m_NameLabel: any;
    m_OffmeshHeader: any;
  }
}
declare namespace UnityEditor {
  class OcclusionCullingWindow extends UnityEditor.EditorWindow {
    constructor();
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
  }
}
declare namespace UnityEditor.OcclusionCullingWindow {
  class Styles extends System.Object {
    constructor();
    backfaceThreshold: any;
    defaultParameterText: any;
    emptyAreaSelection: any;
    emptyCameraSelection: any;
    farClipPlane: any;
    labelStyle: any;
    ModeToggles: any[];
    noOcclusionData: any;
    seeVisualizationInScene: any;
    smallestHole: any;
    smallestOccluder: any;
    visualizationNote: any;
  }
}
declare namespace UnityEditor.OcclusionCullingWindow {
  class Mode extends System.Enum {
    protected constructor();
    static AreaSettings: UnityEditor.OcclusionCullingWindow.Mode;
    static BakeSettings: UnityEditor.OcclusionCullingWindow.Mode;
    value__: number;
    static Visualization: UnityEditor.OcclusionCullingWindow.Mode;
  }
}
declare namespace UnityEditor {
  class PhysicsDebugWindow extends UnityEditor.EditorWindow {
    constructor();
    static ShowWindow(): UnityEditor.PhysicsDebugWindow;
  }
}
declare namespace UnityEditor.PhysicsDebugWindow {
  class Contents extends System.Object {
    protected constructor();
    static devOptions: any;
    static enableMouseSelect: any;
    static forceDot: any;
    static forceOverdraw: any;
    static kinematicColor: any;
    static physicsDebug: any;
    static pickerConfig: UnityEditor.ColorPickerHDRConfig;
    static rigidbodyColor: any;
    static showCollisionGeometry: any;
    static sleepingBodyColor: any;
    static staticColor: any;
    static terrainTilesMax: any;
    static toolsHidden: any;
    static triggerColor: any;
    static useSceneCam: any;
    static viewDistance: any;
    static workflow: any;
  }
}
declare namespace UnityEditor {
  class SceneModeUtility extends System.Object {
    protected constructor();
    static GetObjects(gameObjects: UnityEngine.Object[], includeChildren: boolean): any[];
    static SearchBar(types: any[]): any;
    static SearchForType(type: any): void;
    static SetStaticFlags(targetObjects: UnityEngine.Object[], changedFlags: number, flagValue: boolean): boolean;
    static StaticFlagField(label: string, property: UnityEditor.SerializedProperty, flag: number): boolean;
  }
}
declare namespace UnityEditor.SceneModeUtility {
  class Styles extends System.Object {
    constructor();
    typeButton: any;
  }
}
declare namespace UnityEditor {
  class TierSettingsWindow extends UnityEditor.EditorWindow {
    constructor();
    static CreateWindow(): void;
  }
}
declare namespace UnityEditor {
  class RectSelection extends System.Object {
    constructor(window: UnityEditor.EditorWindow);
    OnGUI(): void;
  }
}
declare namespace UnityEditor.RectSelection {
  class SelectionType extends System.Enum {
    protected constructor();
    static Additive: UnityEditor.RectSelection.SelectionType;
    static Normal: UnityEditor.RectSelection.SelectionType;
    static Subtractive: UnityEditor.RectSelection.SelectionType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SceneView extends UnityEditor.SearchableEditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    AlignViewToObject(t: any): void;
    AlignWithView(): void;
    FixNegativeSize(): void;
    Frame(bounds: any, instant?: boolean): boolean;
    static FrameLastActiveSceneView(): boolean;
    static FrameLastActiveSceneViewWithLock(): boolean;
    FrameSelected(): boolean;
    FrameSelected(lockView: boolean): boolean;
    static GetAllSceneCameras(): any[];
    LookAt(pos: any): void;
    LookAt(pos: any, rot: any): void;
    LookAt(pos: any, rot: any, newSize: number): void;
    LookAt(pos: any, rot: any, newSize: number, ortho: boolean): void;
    LookAt(pos: any, rot: any, newSize: number, ortho: boolean, instant: boolean): void;
    LookAtDirect(pos: any, rot: any): void;
    LookAtDirect(pos: any, rot: any, newSize: number): void;
    MoveToView(): void;
    MoveToView(target: any): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnSelectionChange(): void;
    static RepaintAll(): void;
    SetSceneViewFiltering(enable: boolean): void;
    SetSceneViewShaderReplace(shader: any, replaceString: string): void;
    static ShowCompileErrorNotification(): void;
    readonly camera: any;
    readonly cameraDistance: number;
    static readonly currentDrawingSceneView: UnityEditor.SceneView;
    in2DMode: boolean;
    isRotationLocked: boolean;
    static readonly lastActiveSceneView: UnityEditor.SceneView;
    lastSceneViewRotation: any;
    orthographic: boolean;
    pivot: any;
    renderMode: UnityEditor.DrawCameraMode;
    rotation: any;
    static readonly sceneViews: any;
    readonly sceneViewState: UnityEditor.SceneView.SceneViewState;
    size: number;
    lastFramingTime: number;
    m_AudioPlay: boolean;
    m_RenderMode: UnityEditor.DrawCameraMode;
    m_SceneLighting: boolean;
    m_ValidateTrueMetals: boolean;
    static onSceneGUIDelegate: ((sceneView: UnityEditor.SceneView) => void);
  }
}
declare namespace UnityEditor.SceneView {
  class SceneViewState extends System.Object {
    constructor();
    constructor(other: UnityEditor.SceneView.SceneViewState);
    IsAllOn(): boolean;
    Toggle(value: boolean): void;
    showFlares: boolean;
    showFog: boolean;
    showImageEffects: boolean;
    showMaterialUpdate: boolean;
    showSkybox: boolean;
  }
}
declare namespace UnityEditor.SceneView {
  class CursorRect extends System.ValueType {
    protected constructor();
    cursor: UnityEditor.MouseCursor;
    rect: any;
  }
}
declare namespace UnityEditor.SceneView {
  class DraggingLockedState extends System.Enum {
    protected constructor();
    static Dragging: UnityEditor.SceneView.DraggingLockedState;
    static LookAt: UnityEditor.SceneView.DraggingLockedState;
    static NotDragging: UnityEditor.SceneView.DraggingLockedState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SceneViewGrid extends System.Object {
    constructor();
    PrepareGridRender(camera: any, pivot: any, rotation: any, size: number, orthoMode: boolean, gridVisible: boolean): UnityEditor.DrawGridParameters;
    Register(source: UnityEditor.SceneView): void;
  }
}
declare namespace UnityEditor {
  class SceneViewGridManager {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor {
  class SceneViewMotion extends System.Object {
    constructor();
    static ArrowKeys(sv: UnityEditor.SceneView): void;
    static DoViewTool(view: UnityEditor.SceneView): void;
    static ResetMotion(): void;
  }
}
declare namespace UnityEditor.SceneViewMotion {
  class MotionState extends System.Enum {
    protected constructor();
    static kActive: UnityEditor.SceneViewMotion.MotionState;
    static kDragging: UnityEditor.SceneViewMotion.MotionState;
    static kInactive: UnityEditor.SceneViewMotion.MotionState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SceneViewRotation extends System.Object {
    constructor();
    Register(view: UnityEditor.SceneView): void;
  }
}
declare namespace UnityEditor.SceneViewRotation {
  class Styles extends System.Object {
    constructor();
    lockedRotationIcon: any;
    lockStyle: any;
    unlockedRotationIcon: any;
    viewAxisLabelStyle: any;
    viewLabelStyleCentered: any;
    viewLabelStyleLeftAligned: any;
  }
}
declare namespace UnityEditor {
  class SceneViewOverlay extends System.Object {
    constructor(sceneView: UnityEditor.SceneView);
    Begin(): void;
    End(): void;
    static Window(title: any, sceneViewFunc: ((target: UnityEngine.Object, sceneView: UnityEditor.SceneView) => void), order: number, target: UnityEngine.Object, option: UnityEditor.SceneViewOverlay.WindowDisplayOption): void;
    static Window(title: any, sceneViewFunc: ((target: UnityEngine.Object, sceneView: UnityEditor.SceneView) => void), order: number, option: UnityEditor.SceneViewOverlay.WindowDisplayOption): void;
  }
}
declare namespace UnityEditor.SceneViewOverlay {
  class Ordering extends System.Enum {
    protected constructor();
    static Camera: UnityEditor.SceneViewOverlay.Ordering;
    static Cloth: UnityEditor.SceneViewOverlay.Ordering;
    static Lightmapping: UnityEditor.SceneViewOverlay.Ordering;
    static NavMesh: UnityEditor.SceneViewOverlay.Ordering;
    static OcclusionCulling: UnityEditor.SceneViewOverlay.Ordering;
    static ParticleEffect: UnityEditor.SceneViewOverlay.Ordering;
    static PhysicsDebug: UnityEditor.SceneViewOverlay.Ordering;
    static TilemapRenderer: UnityEditor.SceneViewOverlay.Ordering;
    value__: number;
  }
}
declare namespace UnityEditor.SceneViewOverlay {
  class WindowDisplayOption extends System.Enum {
    protected constructor();
    static MultipleWindowsPerTarget: UnityEditor.SceneViewOverlay.WindowDisplayOption;
    static OneWindowPerTarget: UnityEditor.SceneViewOverlay.WindowDisplayOption;
    static OneWindowPerTitle: UnityEditor.SceneViewOverlay.WindowDisplayOption;
    value__: number;
  }
}
declare namespace UnityEditor.SceneViewOverlay {
  class OverlayWindow extends System.Object {
    constructor();
    CompareTo(other: UnityEditor.SceneViewOverlay.OverlayWindow): number;
    m_PrimaryOrder: number;
    m_SceneViewFunc: ((target: UnityEngine.Object, sceneView: UnityEditor.SceneView) => void);
    m_SecondaryOrder: number;
    m_Target: UnityEngine.Object;
    m_Title: any;
  }
}
declare namespace UnityEditor {
  class SceneViewPicking extends System.Object {
    constructor();
    static PickGameObject(mousePosition: any): any;
  }
}
declare namespace UnityEditor {
  class CustomPropertyDrawer extends System.Attribute {
    constructor(type: any);
    constructor(type: any, useForChildren: boolean);
  }
}
declare namespace UnityEditor {
  class DecoratorDrawer extends UnityEditor.GUIDrawer {
    protected constructor();
    GetHeight(): number;
    OnGUI(position: any): void;
    readonly attribute: any;
  }
}
declare namespace UnityEditor {
  class PropertyHandler extends System.Object {
    constructor();
    AddMenuItems(property: UnityEditor.SerializedProperty, menu: UnityEditor.GenericMenu): void;
    CallMenuCallback(targets: any[], method: any): void;
    GetHeight(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): number;
    HandleAttribute(attribute: any, field: any, propertyType: any): void;
    HandleDrawnType(drawnType: any, propertyType: any, field: any, attribute: any): void;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): boolean;
    OnGUILayout(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean, options: any[]): boolean;
    readonly empty: boolean;
    readonly hasPropertyDrawer: boolean;
    contextMenuItems: any[];
    tooltip: string;
  }
}
declare namespace UnityEditor {
  class ScriptAttributeUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.ScriptAttributeUtility {
  class DrawerKeySet extends System.ValueType {
    protected constructor();
    drawer: any;
    type: any;
  }
}
declare namespace UnityEditor {
  class SpaceDrawer extends UnityEditor.DecoratorDrawer {
    constructor();
    GetHeight(): number;
  }
}
declare namespace UnityEditor {
  class HeaderDrawer extends UnityEditor.DecoratorDrawer {
    constructor();
    GetHeight(): number;
    OnGUI(position: any): void;
  }
}
  class BaseExposedPropertyDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    OnGUI(position: any, prop: UnityEditor.SerializedProperty, label: any): void;
  }
declare namespace BaseExposedPropertyDrawer {
  class ExposedPropertyMode extends System.Enum {
    protected constructor();
    static DefaultValue: BaseExposedPropertyDrawer.ExposedPropertyMode;
    static Named: BaseExposedPropertyDrawer.ExposedPropertyMode;
    static NamedGUID: BaseExposedPropertyDrawer.ExposedPropertyMode;
    value__: number;
  }
}
declare namespace BaseExposedPropertyDrawer {
  class OverrideState extends System.Enum {
    protected constructor();
    static DefaultValue: BaseExposedPropertyDrawer.OverrideState;
    static MissingOverride: BaseExposedPropertyDrawer.OverrideState;
    static Overridden: BaseExposedPropertyDrawer.OverrideState;
    value__: number;
  }
}
  class ExposedReferencePropertyDrawer extends BaseExposedPropertyDrawer {
    constructor();
  }
declare namespace UnityEditor {
  class RangeDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor {
  class MultilineDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor {
  class TextAreaDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor {
  class ColorUsageDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor {
  class DelayedDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.Scripting {
  class APIUpdaterHelper extends System.Object {
    constructor();
    static DoesAssemblyRequireUpgrade(assemblyFullPath: string): boolean;
    static IsReferenceToMissingObsoleteMember(namespaceName: string, className: string): boolean;
    static IsReferenceToTypeWithChangedNamespace(normalizedErrorMessage: string): boolean;
    static Run(commaSeparatedListOfAssemblies: string): void;
  }
}
declare namespace UnityEditor.Scripting {
  class InvalidTypeOrNamespaceErrorTypeMapper extends ICSharpCode.NRefactory.Visitors.AbstractAstVisitor {
    protected constructor();
    static IsTypeMovedToNamespaceError(cu: any, line: number, column: number): string;
    VisitTypeReference(typeReference: any, data: any): any;
    readonly Found: string;
  }
}
declare namespace ICSharpCode.NRefactory.Visitors {
  class AbstractAstVisitor extends System.Object {
    protected constructor();
    VisitAddHandlerStatement(addHandlerStatement: any, data: any): any;
    VisitAddressOfExpression(addressOfExpression: any, data: any): any;
    VisitAnonymousMethodExpression(anonymousMethodExpression: any, data: any): any;
    VisitArrayCreateExpression(arrayCreateExpression: any, data: any): any;
    VisitAssignmentExpression(assignmentExpression: any, data: any): any;
    VisitAttribute(attribute: any, data: any): any;
    VisitAttributeSection(attributeSection: any, data: any): any;
    VisitBaseReferenceExpression(baseReferenceExpression: any, data: any): any;
    VisitBinaryOperatorExpression(binaryOperatorExpression: any, data: any): any;
    VisitBlockStatement(blockStatement: any, data: any): any;
    VisitBreakStatement(breakStatement: any, data: any): any;
    VisitCaseLabel(caseLabel: any, data: any): any;
    VisitCastExpression(castExpression: any, data: any): any;
    VisitCatchClause(catchClause: any, data: any): any;
    VisitCheckedExpression(checkedExpression: any, data: any): any;
    VisitCheckedStatement(checkedStatement: any, data: any): any;
    VisitClassReferenceExpression(classReferenceExpression: any, data: any): any;
    VisitCollectionInitializerExpression(collectionInitializerExpression: any, data: any): any;
    VisitCompilationUnit(compilationUnit: any, data: any): any;
    VisitConditionalExpression(conditionalExpression: any, data: any): any;
    VisitConstructorDeclaration(constructorDeclaration: any, data: any): any;
    VisitConstructorInitializer(constructorInitializer: any, data: any): any;
    VisitContinueStatement(continueStatement: any, data: any): any;
    VisitDeclareDeclaration(declareDeclaration: any, data: any): any;
    VisitDefaultValueExpression(defaultValueExpression: any, data: any): any;
    VisitDelegateDeclaration(delegateDeclaration: any, data: any): any;
    VisitDestructorDeclaration(destructorDeclaration: any, data: any): any;
    VisitDirectionExpression(directionExpression: any, data: any): any;
    VisitDoLoopStatement(doLoopStatement: any, data: any): any;
    VisitElseIfSection(elseIfSection: any, data: any): any;
    VisitEmptyStatement(emptyStatement: any, data: any): any;
    VisitEndStatement(endStatement: any, data: any): any;
    VisitEraseStatement(eraseStatement: any, data: any): any;
    VisitErrorStatement(errorStatement: any, data: any): any;
    VisitEventAddRegion(eventAddRegion: any, data: any): any;
    VisitEventDeclaration(eventDeclaration: any, data: any): any;
    VisitEventRaiseRegion(eventRaiseRegion: any, data: any): any;
    VisitEventRemoveRegion(eventRemoveRegion: any, data: any): any;
    VisitExitStatement(exitStatement: any, data: any): any;
    VisitExpressionRangeVariable(expressionRangeVariable: any, data: any): any;
    VisitExpressionStatement(expressionStatement: any, data: any): any;
    VisitExternAliasDirective(externAliasDirective: any, data: any): any;
    VisitFieldDeclaration(fieldDeclaration: any, data: any): any;
    VisitFixedStatement(fixedStatement: any, data: any): any;
    VisitForeachStatement(foreachStatement: any, data: any): any;
    VisitForNextStatement(forNextStatement: any, data: any): any;
    VisitForStatement(forStatement: any, data: any): any;
    VisitGotoCaseStatement(gotoCaseStatement: any, data: any): any;
    VisitGotoStatement(gotoStatement: any, data: any): any;
    VisitIdentifierExpression(identifierExpression: any, data: any): any;
    VisitIfElseStatement(ifElseStatement: any, data: any): any;
    VisitIndexerDeclaration(indexerDeclaration: any, data: any): any;
    VisitIndexerExpression(indexerExpression: any, data: any): any;
    VisitInnerClassTypeReference(innerClassTypeReference: any, data: any): any;
    VisitInterfaceImplementation(interfaceImplementation: any, data: any): any;
    VisitInvocationExpression(invocationExpression: any, data: any): any;
    VisitLabelStatement(labelStatement: any, data: any): any;
    VisitLambdaExpression(lambdaExpression: any, data: any): any;
    VisitLocalVariableDeclaration(localVariableDeclaration: any, data: any): any;
    VisitLockStatement(lockStatement: any, data: any): any;
    VisitMemberReferenceExpression(memberReferenceExpression: any, data: any): any;
    VisitMethodDeclaration(methodDeclaration: any, data: any): any;
    VisitNamedArgumentExpression(namedArgumentExpression: any, data: any): any;
    VisitNamespaceDeclaration(namespaceDeclaration: any, data: any): any;
    VisitObjectCreateExpression(objectCreateExpression: any, data: any): any;
    VisitOnErrorStatement(onErrorStatement: any, data: any): any;
    VisitOperatorDeclaration(operatorDeclaration: any, data: any): any;
    VisitOptionDeclaration(optionDeclaration: any, data: any): any;
    VisitParameterDeclarationExpression(parameterDeclarationExpression: any, data: any): any;
    VisitParenthesizedExpression(parenthesizedExpression: any, data: any): any;
    VisitPointerReferenceExpression(pointerReferenceExpression: any, data: any): any;
    VisitPrimitiveExpression(primitiveExpression: any, data: any): any;
    VisitPropertyDeclaration(propertyDeclaration: any, data: any): any;
    VisitPropertyGetRegion(propertyGetRegion: any, data: any): any;
    VisitPropertySetRegion(propertySetRegion: any, data: any): any;
    VisitQueryExpression(queryExpression: any, data: any): any;
    VisitQueryExpressionAggregateClause(queryExpressionAggregateClause: any, data: any): any;
    VisitQueryExpressionDistinctClause(queryExpressionDistinctClause: any, data: any): any;
    VisitQueryExpressionFromClause(queryExpressionFromClause: any, data: any): any;
    VisitQueryExpressionGroupClause(queryExpressionGroupClause: any, data: any): any;
    VisitQueryExpressionGroupJoinVBClause(queryExpressionGroupJoinVBClause: any, data: any): any;
    VisitQueryExpressionGroupVBClause(queryExpressionGroupVBClause: any, data: any): any;
    VisitQueryExpressionJoinClause(queryExpressionJoinClause: any, data: any): any;
    VisitQueryExpressionJoinConditionVB(queryExpressionJoinConditionVB: any, data: any): any;
    VisitQueryExpressionJoinVBClause(queryExpressionJoinVBClause: any, data: any): any;
    VisitQueryExpressionLetClause(queryExpressionLetClause: any, data: any): any;
    VisitQueryExpressionLetVBClause(queryExpressionLetVBClause: any, data: any): any;
    VisitQueryExpressionOrderClause(queryExpressionOrderClause: any, data: any): any;
    VisitQueryExpressionOrdering(queryExpressionOrdering: any, data: any): any;
    VisitQueryExpressionPartitionVBClause(queryExpressionPartitionVBClause: any, data: any): any;
    VisitQueryExpressionSelectClause(queryExpressionSelectClause: any, data: any): any;
    VisitQueryExpressionSelectVBClause(queryExpressionSelectVBClause: any, data: any): any;
    VisitQueryExpressionWhereClause(queryExpressionWhereClause: any, data: any): any;
    VisitRaiseEventStatement(raiseEventStatement: any, data: any): any;
    VisitReDimStatement(reDimStatement: any, data: any): any;
    VisitRemoveHandlerStatement(removeHandlerStatement: any, data: any): any;
    VisitResumeStatement(resumeStatement: any, data: any): any;
    VisitReturnStatement(returnStatement: any, data: any): any;
    VisitSizeOfExpression(sizeOfExpression: any, data: any): any;
    VisitStackAllocExpression(stackAllocExpression: any, data: any): any;
    VisitStopStatement(stopStatement: any, data: any): any;
    VisitSwitchSection(switchSection: any, data: any): any;
    VisitSwitchStatement(switchStatement: any, data: any): any;
    VisitTemplateDefinition(templateDefinition: any, data: any): any;
    VisitThisReferenceExpression(thisReferenceExpression: any, data: any): any;
    VisitThrowStatement(throwStatement: any, data: any): any;
    VisitTryCatchStatement(tryCatchStatement: any, data: any): any;
    VisitTypeDeclaration(typeDeclaration: any, data: any): any;
    VisitTypeOfExpression(typeOfExpression: any, data: any): any;
    VisitTypeOfIsExpression(typeOfIsExpression: any, data: any): any;
    VisitTypeReference(typeReference: any, data: any): any;
    VisitTypeReferenceExpression(typeReferenceExpression: any, data: any): any;
    VisitUnaryOperatorExpression(unaryOperatorExpression: any, data: any): any;
    VisitUncheckedExpression(uncheckedExpression: any, data: any): any;
    VisitUncheckedStatement(uncheckedStatement: any, data: any): any;
    VisitUnsafeStatement(unsafeStatement: any, data: any): any;
    VisitUsing(using: any, data: any): any;
    VisitUsingDeclaration(usingDeclaration: any, data: any): any;
    VisitUsingStatement(usingStatement: any, data: any): any;
    VisitVariableDeclaration(variableDeclaration: any, data: any): any;
    VisitWithStatement(withStatement: any, data: any): any;
    VisitYieldStatement(yieldStatement: any, data: any): any;
  }
}
declare namespace UnityEditor.Scripting {
  class APIUpdaterLogger extends System.Object {
    constructor();
    static WriteErrorToConsole(msg: string, args: any[]): void;
    static WriteInfoToConsole(line: string): void;
    static WriteToFile(msg: string, args: any[]): void;
  }
}
declare namespace UnityEditor.Scripting {
  class PragmaFixing30 extends System.Object {
    constructor();
    static FixFiles(filesToFix: string[]): void;
  }
}
declare namespace UnityEditor.Scripting {
  class SupportedLanguageStruct extends System.ValueType {
    protected constructor();
    extension: string;
    languageName: string;
  }
}
declare namespace UnityEditor.Scripting {
  class MonoIsland extends System.ValueType {
    protected constructor();
    GetExtensionOfSourceFiles(): string;
    _api_compatibility_level: UnityEditor.ApiCompatibilityLevel;
    _defines: string[];
    _development_player: boolean;
    _editor: boolean;
    _files: string[];
    _output: string;
    _references: string[];
    _target: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor.Scripting {
  class ScriptCompilers extends System.Object {
    protected constructor();
    static GetExtensionOfSourceFile(file: string): string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class APIUpdaterHelper extends System.Object {
    constructor();
    static UpdateScripts(responseFile: string, sourceExtension: string): void;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class BooCompiler extends UnityEditor.Scripting.Compilers.MonoScriptCompilerBase {
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MonoScriptCompilerBase extends UnityEditor.Scripting.Compilers.ScriptCompilerBase {
    protected constructor();
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class ScriptCompilerBase extends System.Object {
    protected constructor();
    BeginCompiling(): void;
    Dispose(): void;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    static GetResponseFileDefinesFromFile(responseFileName: string): string[];
    static GetResponseFileDefinesFromText(responseFileText: string): string[];
    Poll(): boolean;
    WaitForCompilationToFinish(): void;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class BooCompilerOutputParser extends UnityEditor.Scripting.Compilers.CompilerOutputParserBase {
    constructor();
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CompilerOutputParserBase extends System.Object {
    protected constructor();
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class BooLanguage extends UnityEditor.Scripting.Compilers.SupportedLanguage {
    constructor();
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    GetNamespace(fileName: string, definedSymbols: string): string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class SupportedLanguage extends System.Object {
    protected constructor();
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    GetNamespace(fileName: string, definedSymbols: string): string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class Cil2AsOutputParser extends UnityEditor.Scripting.Compilers.UnityScriptCompilerOutputParser {
    constructor();
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UnityScriptCompilerOutputParser extends UnityEditor.Scripting.Compilers.CompilerOutputParserBase {
    constructor();
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CommandLineFormatter extends System.Object {
    protected constructor();
    static EscapeCharsQuote(input: string): string;
    static EscapeCharsWindows(input: string): string;
    static PrepareFileName(input: string): string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CSharpLanguage extends UnityEditor.Scripting.Compilers.SupportedLanguage {
    constructor();
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    GetNamespace(fileName: string, definedSymbols: string): string;
  }
}
declare namespace UnityEditor.Scripting.Compilers.CSharpLanguage {
  class VisitorData extends System.Object {
    constructor();
    CurrentNamespaces: any;
    DiscoveredNamespace: string;
    TargetClassName: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers.CSharpLanguage {
  class NamespaceVisitor extends ICSharpCode.NRefactory.Visitors.AbstractAstVisitor {
    constructor();
    VisitNamespaceDeclaration(namespaceDeclaration: any, data: any): any;
    VisitTypeDeclaration(typeDeclaration: any, data: any): any;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class GendarmeRuleData extends System.Object {
    constructor();
    Details: string;
    File: string;
    IsAssemblyError: boolean;
    LastIndex: number;
    Line: number;
    Location: string;
    Problem: string;
    Severity: string;
    Source: string;
    Target: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class GendarmeOutputParser extends UnityEditor.Scripting.Compilers.UnityScriptCompilerOutputParser {
    constructor();
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class Il2CppOutputParser extends UnityEditor.Scripting.Compilers.CompilerOutputParserBase {
    constructor();
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MicrosoftCSharpCompiler extends UnityEditor.Scripting.Compilers.ScriptCompilerBase {
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MicrosoftCSharpCompilerOutputParser extends UnityEditor.Scripting.Compilers.CompilerOutputParserBase {
    constructor();
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MonoCSharpCompiler extends UnityEditor.Scripting.Compilers.MonoScriptCompilerBase {
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
    static Compile(sources: string[], references: string[], defines: string[], outputFile: string): string[];
    static ReponseFilename: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MonoCSharpCompilerOutputParser extends UnityEditor.Scripting.Compilers.CompilerOutputParserBase {
    constructor();
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class NuGetPackageResolver extends System.Object {
    constructor();
    Resolve(): string[];
    PackagesDirectory: string;
    ProjectLockFile: string;
    readonly ResolvedReferences: string[];
    TargetMoniker: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class NormalizedCompilerStatusCode extends System.Enum {
    protected constructor();
    static MemberNotFound: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    static NotNormalized: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    static UnknownTypeOrNamespace: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    value__: number;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class NormalizedCompilerStatus extends System.ValueType {
    protected constructor();
    code: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    details: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CompilerMessageType extends System.Enum {
    protected constructor();
    static Error: UnityEditor.Scripting.Compilers.CompilerMessageType;
    value__: number;
    static Warning: UnityEditor.Scripting.Compilers.CompilerMessageType;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CompilerMessage extends System.ValueType {
    protected constructor();
    column: number;
    file: string;
    line: number;
    message: string;
    normalizedStatus: UnityEditor.Scripting.Compilers.NormalizedCompilerStatus;
    type: UnityEditor.Scripting.Compilers.CompilerMessageType;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UnityScriptCompiler extends UnityEditor.Scripting.Compilers.MonoScriptCompilerBase {
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UnityScriptLanguage extends UnityEditor.Scripting.Compilers.SupportedLanguage {
    constructor();
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UWPExtensionSDK extends System.ValueType {
    protected constructor();
    ManifestPath: string;
    Name: string;
    Version: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UWPReferences extends System.Object {
    protected constructor();
    static GetExtensionSDKs(sdkVersion: any): any;
    static GetInstalledSDKVersions(): any;
    static GetReferences(sdkVersion: any): string[];
  }
}
declare namespace UnityEditor.Scripting.Compilers.UWPReferences {
  class UWPExtension extends System.Object {
    constructor(manifest: string, windowsKitsFolder: string, sdkVersion: string);
    readonly Name: string;
    readonly References: string[];
  }
}
declare namespace UnityEditor.Compilation {
  class AssemblyBuilderStatus extends System.Enum {
    protected constructor();
    static Finished: UnityEditor.Compilation.AssemblyBuilderStatus;
    static IsCompiling: UnityEditor.Compilation.AssemblyBuilderStatus;
    static NotStarted: UnityEditor.Compilation.AssemblyBuilderStatus;
    value__: number;
  }
}
declare namespace UnityEditor.Compilation {
  class AssemblyBuilderFlags extends System.Enum {
    protected constructor();
    static DevelopmentBuild: UnityEditor.Compilation.AssemblyBuilderFlags;
    static EditorAssembly: UnityEditor.Compilation.AssemblyBuilderFlags;
    static None: UnityEditor.Compilation.AssemblyBuilderFlags;
    value__: number;
  }
}
declare namespace UnityEditor.Compilation {
  class AssemblyBuilder extends System.Object {
    constructor(assemblyPath: string, scriptPaths: string[]);
    Build(): boolean;
    additionalDefines: string[];
    additionalReferences: string[];
    readonly assemblyPath: string;
    buildTarget: UnityEditor.BuildTarget;
    buildTargetGroup: UnityEditor.BuildTargetGroup;
    flags: UnityEditor.Compilation.AssemblyBuilderFlags;
    readonly scriptPaths: string[];
    readonly status: UnityEditor.Compilation.AssemblyBuilderStatus;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class AssemblyFlags extends System.Enum {
    protected constructor();
    static EditorOnly: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    static FirstPass: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    static None: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    static UseForDotNet: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    static UseForMono: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    value__: number;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class AssetPath extends System.Object {
    protected constructor();
    static Combine(path1: string, path2: string): string;
    static GetDirectoryName(path: string): string;
    static GetExtension(path: string): string;
    static GetFileName(path: string): string;
    static GetFileNameWithoutExtension(path: string): string;
    static GetFullPath(path: string): string;
    static IsPathRooted(path: string): boolean;
    static ReplaceSeparators(path: string): string;
    static Separator: any;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class CompilationTask extends System.Object {
    constructor(scriptAssemblies: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly[], buildOutputDirectory: string, options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions, maxConcurrentCompilers: number);
    Poll(): boolean;
    Stop(): void;
    readonly CompileErrors: boolean;
    readonly CompilerMessages: any;
    readonly IsCompiling: boolean;
    readonly Stopped: boolean;
  }
}
declare namespace UnityEditor.Compilation {
  class CompilerMessageType extends System.Enum {
    protected constructor();
    static Error: UnityEditor.Compilation.CompilerMessageType;
    value__: number;
    static Warning: UnityEditor.Compilation.CompilerMessageType;
  }
}
declare namespace UnityEditor.Compilation {
  class CompilerMessage extends System.ValueType {
    protected constructor();
    column: number;
    file: string;
    line: number;
    message: string;
    type: UnityEditor.Compilation.CompilerMessageType;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class CustomScriptAssemblyData extends System.Object {
    constructor();
    static FromJson(json: string): UnityEditor.Scripting.ScriptCompilation.CustomScriptAssemblyData;
    excludePlatforms: string[];
    includePlatforms: string[];
    name: string;
    references: string[];
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class CustomScriptAssemblyPlatform extends System.ValueType {
    protected constructor();
    BuildTarget: UnityEditor.BuildTarget;
    Name: string;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class CustomScriptAssembly extends System.Object {
    constructor();
    static Create(name: string, directory: string): UnityEditor.Scripting.ScriptCompilation.CustomScriptAssembly;
    static FromCustomScriptAssemblyData(path: string, customScriptAssemblyData: UnityEditor.Scripting.ScriptCompilation.CustomScriptAssemblyData): UnityEditor.Scripting.ScriptCompilation.CustomScriptAssembly;
    static GetPlatformFromBuildTarget(buildTarget: UnityEditor.BuildTarget): UnityEditor.Scripting.ScriptCompilation.CustomScriptAssemblyPlatform;
    static GetPlatformFromName(name: string): UnityEditor.Scripting.ScriptCompilation.CustomScriptAssemblyPlatform;
    IsCompatibleWith(buildTarget: UnityEditor.BuildTarget, options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions): boolean;
    IsCompatibleWithEditor(): boolean;
    readonly AssemblyFlags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    ExcludePlatforms: UnityEditor.Scripting.ScriptCompilation.CustomScriptAssemblyPlatform[];
    FilePath: string;
    IncludePlatforms: UnityEditor.Scripting.ScriptCompilation.CustomScriptAssemblyPlatform[];
    Name: string;
    PathPrefix: string;
    References: string[];
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class EditorBuildRules extends System.Object {
    protected constructor();
    static CreateEditorCompiledAssembly(path: string): UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly;
    static CreateTargetAssemblies(customScriptAssemblies: any): UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly[];
    static CreateUserCompiledAssembly(path: string): UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly;
    static GenerateChangedScriptAssemblies(args: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.GenerateChangedScriptAssembliesArgs): UnityEditor.Scripting.ScriptCompilation.ScriptAssembly[];
    static GetAllScriptAssemblies(allSourceFiles: any, projectDirectory: string, settings: UnityEditor.Scripting.ScriptCompilation.ScriptAssemblySettings, assemblies: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.CompilationAssemblies): UnityEditor.Scripting.ScriptCompilation.ScriptAssembly[];
    static GetCompiledCustomAssembliesReferences(scriptAssembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly, customTargetAssemblies: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly[], outputDirectory: string, filenameSuffix: string): string[];
    static GetPrecompiledReferences(scriptAssembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly, precompiledAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[]): string[];
    static GetPredefinedTargetAssemblies(): UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly[];
    static GetUnityReferences(scriptAssembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly, unityAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[], options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions): string[];
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorBuildRules {
  class TargetAssemblyType extends System.Enum {
    protected constructor();
    static Custom: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssemblyType;
    static Predefined: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssemblyType;
    static Undefined: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssemblyType;
    value__: number;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorBuildRules {
  class TargetAssembly extends System.Object {
    constructor();
    constructor(name: string, language: UnityEditor.Scripting.Compilers.SupportedLanguage, flags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags, type: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssemblyType);
    constructor(name: string, language: UnityEditor.Scripting.Compilers.SupportedLanguage, flags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags, type: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssemblyType, pathFilter: ((arg: string) => number), compatFunc: ((arg1: UnityEditor.BuildTarget, arg2: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions) => boolean));
    FilenameWithSuffix(filenameSuffix: string): string;
    FullPath(outputDirectory: string, filenameSuffix: string): string;
    readonly Filename: string;
    readonly Flags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    readonly IsCompatibleFunc: ((arg1: UnityEditor.BuildTarget, arg2: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions) => boolean);
    Language: UnityEditor.Scripting.Compilers.SupportedLanguage;
    readonly PathFilter: ((arg: string) => number);
    readonly References: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly[];
    readonly Type: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssemblyType;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorBuildRules {
  class CompilationAssemblies extends System.Object {
    constructor();
    CustomTargetAssemblies: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly[];
    EditorAssemblyReferences: string[];
    PrecompiledAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[];
    UnityAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[];
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorBuildRules {
  class GenerateChangedScriptAssembliesArgs extends System.Object {
    constructor();
    AllSourceFiles: any;
    Assemblies: UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.CompilationAssemblies;
    DirtySourceFiles: any;
    NotCompiledTargetAssemblies: any;
    ProjectDirectory: string;
    RunUpdaterAssemblies: any;
    Settings: UnityEditor.Scripting.ScriptCompilation.ScriptAssemblySettings;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class EditorCompilation extends System.Object {
    constructor();
    AddAssemblyBuilder(assemblyBuilder: UnityEditor.Compilation.AssemblyBuilder): void;
    CleanScriptAssemblies(): void;
    CompileScripts(options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions, platformGroup: UnityEditor.BuildTargetGroup, platform: UnityEditor.BuildTarget): boolean;
    CreateScriptAssembly(assemblyBuilder: UnityEditor.Compilation.AssemblyBuilder): UnityEditor.Scripting.ScriptCompilation.ScriptAssembly;
    DeleteUnusedAssemblies(): void;
    DirtyAllScripts(): void;
    DirtyScript(path: string): void;
    DoesProjectFolderHaveAnyDirtyScripts(): boolean;
    DoesProjectFolderHaveAnyScripts(): boolean;
    GetAllCompiledAndResolvedCustomTargetAssemblies(): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.TargetAssemblyInfo[];
    GetAllMonoIslands(): UnityEditor.Scripting.MonoIsland[];
    GetAllMonoIslands(unityAssembliesArg: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[], precompiledAssembliesArg: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[], options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions): UnityEditor.Scripting.MonoIsland[];
    GetAllPrecompiledAssemblies(): UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[];
    GetCompileMessages(): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.AssemblyCompilerMessages[];
    GetCompileScriptsOutputDirectory(): string;
    GetCustomTargetAssemblies(): UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly[];
    GetTargetAssemblies(): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.TargetAssemblyInfo[];
    GetTargetAssembly(scriptPath: string): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.TargetAssemblyInfo;
    GetTargetAssemblyDetails(scriptPath: string): UnityEditor.Scripting.ScriptCompilation.EditorBuildRules.TargetAssembly;
    GetUnityAssemblies(): UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[];
    IsAnyAssemblyBuilderCompiling(): boolean;
    IsCompilationPending(): boolean;
    IsCompilationTaskCompiling(): boolean;
    IsCompiling(): boolean;
    IsExtensionSupportedByCompiler(extension: string): boolean;
    IsRuntimeScriptAssembly(assemblyNameOrPath: string): boolean;
    RunScriptUpdaterOnAssembly(assemblyFilename: string): void;
    SetAllCustomScriptAssemblyJsons(paths: string[]): void;
    SetAllPackageAssemblies(packageAssemblies: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.PackageAssembly[]): void;
    SetAllPrecompiledAssemblies(precompiledAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[]): void;
    SetAllScripts(allScripts: string[]): void;
    SetAllUnityAssemblies(unityAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[]): void;
    SetCompileScriptsOutputDirectory(directory: string): void;
    StopAllCompilation(): void;
    TickCompilationPipeline(options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions, platformGroup: UnityEditor.BuildTargetGroup, platform: UnityEditor.BuildTarget): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorCompilation {
  class CompileStatus extends System.Enum {
    protected constructor();
    static CompilationComplete: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
    static CompilationFailed: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
    static CompilationStarted: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
    static Compiling: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
    static Idle: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
    value__: number;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorCompilation {
  class DeleteFileOptions extends System.Enum {
    protected constructor();
    static LogError: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.DeleteFileOptions;
    static NoLogError: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.DeleteFileOptions;
    value__: number;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorCompilation {
  class TargetAssemblyInfo extends System.ValueType {
    protected constructor();
    Flags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    Name: string;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorCompilation {
  class AssemblyCompilerMessages extends System.ValueType {
    protected constructor();
    assemblyFilename: string;
    messages: UnityEditor.Scripting.Compilers.CompilerMessage[];
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation.EditorCompilation {
  class PackageAssembly extends System.ValueType {
    protected constructor();
    DirectoryPath: string;
    Name: string;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class EditorCompilationInterface extends System.Object {
    protected constructor();
    static CompileScripts(definesOptions: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions, platformGroup: UnityEditor.BuildTargetGroup, platform: UnityEditor.BuildTarget): boolean;
    static DeleteUnusedAssemblies(): void;
    static DirtyAllScripts(): void;
    static DirtyScript(path: string): void;
    static DoesProjectFolderHaveAnyDirtyScripts(): boolean;
    static DoesProjectFolderHaveAnyScripts(): boolean;
    static GetAllCompiledAndResolvedCustomTargetAssemblies(): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.TargetAssemblyInfo[];
    static GetAllMonoIslands(): UnityEditor.Scripting.MonoIsland[];
    static GetCompileMessages(): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.AssemblyCompilerMessages[];
    static GetCompileScriptsOutputDirectory(): string;
    static GetTargetAssemblies(): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.TargetAssemblyInfo[];
    static GetTargetAssembly(scriptPath: string): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.TargetAssemblyInfo;
    static IsCompilationPending(): boolean;
    static IsCompiling(): boolean;
    static IsExtensionSupportedByCompiler(extension: string): boolean;
    static RunScriptUpdaterOnAssembly(assemblyFilename: string): void;
    static SetAllCustomScriptAssemblyJsons(allAssemblyJsons: string[]): void;
    static SetAllPackageAssemblies(packageAssemblies: UnityEditor.Scripting.ScriptCompilation.EditorCompilation.PackageAssembly[]): void;
    static SetAllPrecompiledAssemblies(precompiledAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[]): void;
    static SetAllScripts(allScripts: string[]): void;
    static SetAllUnityAssemblies(unityAssemblies: UnityEditor.Scripting.ScriptCompilation.PrecompiledAssembly[]): void;
    static SetAssemblySuffix(suffix: string): void;
    static SetCompileScriptsOutputDirectory(directory: string): void;
    static StopAllCompilation(): void;
    static TickCompilationPipeline(options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions, platformGroup: UnityEditor.BuildTargetGroup, platform: UnityEditor.BuildTarget): UnityEditor.Scripting.ScriptCompilation.EditorCompilation.CompileStatus;
    static readonly Instance: UnityEditor.Scripting.ScriptCompilation.EditorCompilation;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class EditorScriptCompilationOptions extends System.Enum {
    protected constructor();
    static BuildingDevelopmentBuild: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    static BuildingEditorOnlyAssembly: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    static BuildingEmpty: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    static BuildingForEditor: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    static BuildingForIl2Cpp: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    static BuildingWithAsserts: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    value__: number;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class PrecompiledAssembly extends System.ValueType {
    protected constructor();
    Flags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    Path: string;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class ScriptAssemblySettings extends System.Object {
    constructor();
    ApiCompatibilityLevel: UnityEditor.ApiCompatibilityLevel;
    readonly BuildingDevelopmentBuild: boolean;
    readonly BuildingForEditor: boolean;
    BuildTarget: UnityEditor.BuildTarget;
    BuildTargetGroup: UnityEditor.BuildTargetGroup;
    CompilationOptions: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions;
    Defines: string[];
    FilenameSuffix: string;
    OutputDirectory: string;
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class ScriptAssembly extends System.Object {
    constructor();
    GetAllReferences(): string[];
    ToMonoIsland(options: UnityEditor.Scripting.ScriptCompilation.EditorScriptCompilationOptions, buildOutputDirectory: string): UnityEditor.Scripting.MonoIsland;
    ApiCompatibilityLevel: UnityEditor.ApiCompatibilityLevel;
    BuildTarget: UnityEditor.BuildTarget;
    Defines: string[];
    Filename: string;
    Files: string[];
    Flags: UnityEditor.Scripting.ScriptCompilation.AssemblyFlags;
    readonly FullPath: string;
    Language: UnityEditor.Scripting.Compilers.SupportedLanguage;
    OutputDirectory: string;
    References: string[];
    RunUpdater: boolean;
    ScriptAssemblyReferences: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly[];
  }
}
declare namespace UnityEditor.Scripting.ScriptCompilation {
  class WSAHelpers extends System.Object {
    protected constructor();
    static IsCSharpAssembly(scriptAssembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly): boolean;
    static IsCSharpFirstPassAssembly(scriptAssembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly): boolean;
    static UseDotNetCore(scriptAssembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly): boolean;
  }
}
declare namespace UnityEditor.Scripting.Serialization {
  class Weaver extends System.Object {
    protected constructor();
    static WeaveUnetFromEditor(assembly: UnityEditor.Scripting.ScriptCompilation.ScriptAssembly, assemblyDirectory: string, outputDirectory: string, unityEngine: string, unityUNet: string, buildingForEditor: boolean): boolean;
  }
}
declare namespace UnityEditor {
  class SerializedPropertyFilters extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.SerializedPropertyFilters {
  class IFilter {
    protected constructor();
    Active(): boolean;
    DeserializeState(state: string): void;
    Filter(prop: UnityEditor.SerializedProperty): boolean;
    OnGUI(r: any): void;
    SerializeState(): string;
  }
}
declare namespace UnityEditor.SerializedPropertyFilters {
  class SerializableFilter extends System.Object {
    protected constructor();
    Active(): boolean;
    DeserializeState(state: string): void;
    Filter(prop: UnityEditor.SerializedProperty): boolean;
    OnGUI(r: any): void;
    SerializeState(): string;
  }
}
declare namespace UnityEditor.SerializedPropertyFilters {
  class String extends UnityEditor.SerializedPropertyFilters.SerializableFilter {
    constructor();
    Active(): boolean;
    Filter(prop: UnityEditor.SerializedProperty): boolean;
    OnGUI(r: any): void;
  }
}
declare namespace UnityEditor.SerializedPropertyFilters.String {
  class Styles extends System.Object {
    protected constructor();
    static searchField: any;
    static searchFieldCancelButton: any;
    static searchFieldCancelButtonEmpty: any;
  }
}
declare namespace UnityEditor.SerializedPropertyFilters {
  class Name extends UnityEditor.SerializedPropertyFilters.String {
    constructor();
    Filter(str: string): boolean;
    Filter(prop: UnityEditor.SerializedProperty): boolean;
  }
}
declare namespace UnityEditor.SerializedPropertyFilters {
  class None extends System.Object {
    constructor();
    Active(): boolean;
    DeserializeState(state: string): void;
    Filter(prop: UnityEditor.SerializedProperty): boolean;
    OnGUI(r: any): void;
    SerializeState(): string;
  }
}
declare namespace UnityEditor {
  class SerializedPropertyTable extends System.Object {
    constructor(serializationUID: string, gatherDelegate: (() => UnityEngine.Object[]), headerDelegate: ((propNames: any) => UnityEditor.SerializedPropertyTreeView.Column[]));
    OnDisable(): void;
    OnEnable(): void;
    OnGUI(): void;
    OnHierarchyChange(): void;
    OnInspectorUpdate(): void;
    OnSelectionChange(): void;
    OnSelectionChange(instanceIDs: number[]): void;
    dragHandleEnabled: boolean;
  }
}
declare namespace UnityEditor.SerializedPropertyTable {
  class Styles extends System.Object {
    protected constructor();
    static DragHandle: any;
  }
}
declare namespace UnityEditor {
  class SerializedPropertyDataStore extends System.Object {
    constructor(propNames: string[], gatherDel: (() => UnityEngine.Object[]));
    GetElements(): UnityEditor.SerializedPropertyDataStore.Data[];
    Repopulate(): boolean;
  }
}
declare namespace UnityEditor.SerializedPropertyDataStore {
  class Data extends System.Object {
    constructor(obj: UnityEngine.Object, props: string[]);
    Dispose(): void;
    Store(): void;
    Update(): boolean;
    readonly name: string;
    readonly objectId: number;
    readonly properties: UnityEditor.SerializedProperty[];
    readonly serializedObject: UnityEditor.SerializedObject;
  }
}
declare namespace UnityEditor {
  class SerializedPropertyTreeView extends UnityEditor.IMGUI.Controls.TreeView {
    constructor(state: UnityEditor.IMGUI.Controls.TreeViewState, multicolumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader, dataStore: UnityEditor.SerializedPropertyDataStore);
    DeserializeState(uid: string): void;
    FullReload(): void;
    IsFilteredDirty(): boolean;
    OnFilterGUI(r: any): void;
    SerializeState(uid: string): void;
    Update(): boolean;
  }
}
declare namespace UnityEditor.SerializedPropertyTreeView {
  class Styles extends System.Object {
    protected constructor();
    static entryEven: any;
    static entryOdd: any;
    static filterDisable: any;
    static filterInvert: any;
    static filterSelection: any;
    static focusHelper: string;
    static serializeColumnHeaderState: string;
    static serializeFilter: string;
    static serializeFilterDisable: string;
    static serializeFilterInvert: string;
    static serializeFilterSelection: string;
    static serializeTreeViewState: string;
  }
}
declare namespace UnityEditor.SerializedPropertyTreeView {
  class SerializedPropertyItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, ltd: UnityEditor.SerializedPropertyDataStore.Data);
    GetData(): UnityEditor.SerializedPropertyDataStore.Data;
  }
}
declare namespace UnityEditor.SerializedPropertyTreeView {
  class Column extends UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column {
    constructor();
    compareDelegate: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    copyDelegate: ((target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) => void);
    dependencyIndices: number[];
    drawDelegate: ((r: any, prop: UnityEditor.SerializedProperty, dependencies: UnityEditor.SerializedProperty[]) => void);
    filter: UnityEditor.SerializedPropertyFilters.IFilter;
    propertyName: string;
  }
}
declare namespace UnityEditor.SerializedPropertyTreeView {
  class ColumnInternal extends System.ValueType {
    protected constructor();
    dependencyProps: UnityEditor.SerializedProperty[];
  }
}
declare namespace UnityEditor.SerializedPropertyTreeView {
  class DefaultDelegates extends System.Object {
    constructor();
    static s_CompareCheckbox: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    static s_CompareColor: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    static s_CompareEnum: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    static s_CompareFloat: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    static s_CompareInt: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    static s_CompareName: ((lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number);
    static s_CopyDefault: ((target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) => void);
    static s_DrawCheckbox: ((r: any, prop: UnityEditor.SerializedProperty, dependencies: UnityEditor.SerializedProperty[]) => void);
    static s_DrawDefault: ((r: any, prop: UnityEditor.SerializedProperty, dependencies: UnityEditor.SerializedProperty[]) => void);
    static s_DrawName: ((r: any, prop: UnityEditor.SerializedProperty, dependencies: UnityEditor.SerializedProperty[]) => void);
  }
}
declare namespace UnityEditor {
  class FogEditor extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.FogEditor {
  class Styles extends System.Object {
    constructor();
    static FogColor: any;
    static FogDensity: any;
    static FogEnable: any;
    static FogLinearEnd: any;
    static FogLinearStart: any;
    static FogMode: any;
    static FogWarning: any;
  }
}
declare namespace UnityEditor {
  class GraphicsSettingsWindow extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class BuiltinShaderSettings extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings {
  class BuiltinShaderMode extends System.Enum {
    protected constructor();
    static Builtin: UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings.BuiltinShaderMode;
    static Custom: UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings.BuiltinShaderMode;
    static None: UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings.BuiltinShaderMode;
    value__: number;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class BuiltinShadersEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class AlwaysIncludedShadersEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class ShaderStrippingEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.ShaderStrippingEditor {
  class Styles extends System.Object {
    constructor();
    static builtinSettings: any;
    static fogExp: any;
    static fogExp2: any;
    static fogFromScene: any;
    static fogLinear: any;
    static fogModes: any;
    static instancingVariants: any;
    static lightmapDirCombined: any;
    static lightmapDynamicDirCombined: any;
    static lightmapDynamicPlain: any;
    static lightmapFromScene: any;
    static lightmapKeepShadowMask: any;
    static lightmapKeepSubtractive: any;
    static lightmapModes: any;
    static lightmapPlain: any;
    static shaderPreloadClear: any;
    static shaderPreloadSave: any;
    static shaderPreloadSettings: any;
    static shaderSettings: any;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class ShaderPreloadEditor extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.ShaderPreloadEditor {
  class Styles extends System.Object {
    constructor();
    static shaderPreloadClear: any;
    static shaderPreloadSave: any;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class TierSettingsEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
    verticalLayout: boolean;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.TierSettingsEditor {
  class Styles extends System.Object {
    constructor();
    static autoSettings: any;
    static cascadedShadowMaps: any;
    static detailNormalMap: any;
    static empty: any;
    static enableLPPV: any;
    static hdrMode: any;
    static hdrModeName: any[];
    static hdrModeValue: number[];
    static prefer32BitShadowMaps: any;
    static realtimeGICPUUsage: any;
    static realtimeGICPUUsageName: any[];
    static realtimeGICPUUsageValue: number[];
    static reflectionProbeBlending: any;
    static reflectionProbeBoxProjection: any;
    static renderingPath: any;
    static renderingPathName: any[];
    static renderingPathValue: number[];
    static renderingSettings: any;
    static semitransparentShadows: any;
    static shaderQualityName: any[];
    static shaderQualityValue: number[];
    static standardShaderQuality: any;
    static standardShaderSettings: any;
    static tierName: any[];
    static useHDR: any;
  }
}
declare namespace UnityEditor {
  class DefaultReflectionMode extends System.Enum {
    protected constructor();
    static Custom: UnityEditor.DefaultReflectionMode;
    static FromSkybox: UnityEditor.DefaultReflectionMode;
    value__: number;
  }
}
declare namespace UnityEditor {
  class LightingEditor extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.LightingEditor {
  class Styles extends System.Object {
    protected constructor();
    static ambient: any;
    static ambientDown: any;
    static AmbientLightingMode: any;
    static AmbientLightingModes: any[];
    static ambientMid: any;
    static ambientUp: any;
    static createLight: any;
    static customReflection: any;
    static defaultReflectionSizes: any[];
    static defaultReflectionSizesValues: number[];
    static env_amb_int: any;
    static env_amb_src: any;
    static env_amb_top: any;
    static env_refl_bnc: any;
    static env_refl_cmp: any;
    static env_refl_int: any;
    static env_refl_res: any;
    static env_refl_src: any;
    static env_refl_top: any;
    static env_skybox_mat: any;
    static env_skybox_sun: any;
    static env_top: any;
    static kFullAmbientSource: any[];
    static kFullAmbientSourceValues: number[];
    static skyboxWarning: any;
  }
}
declare namespace UnityEditor {
  class OtherRenderingEditor extends UnityEditor.Editor {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.OtherRenderingEditor {
  class Styles extends System.Object {
    protected constructor();
    static FlareFadeSpeed: any;
    static FlareStrength: any;
    static HaloStrength: any;
    static HaloTexture: any;
    static SpotCookie: any;
  }
}
declare namespace UnityEditor {
  class IShapeEditorFactory {
    protected constructor();
    CreateShapeEditor(): UnityEditor.ShapeEditor;
  }
}
declare namespace UnityEditor {
  class ShapeEditorFactory extends System.Object {
    constructor();
    CreateShapeEditor(): UnityEditor.ShapeEditor;
  }
}
declare namespace UnityEditor {
  class ShapeEditor extends System.Object {
    constructor(gu: UnityEngine.IGUIUtility, es: UnityEngine.U2D.Interface.IEventSystem);
    CircleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    CycleTangentMode(): void;
    DiamondCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    Edges(): void;
    FindClosestPointOnEdge(edgeIndex: number, position: any, iterations: number): any;
    static GetNextTangentMode(current: UnityEditor.ShapeEditor.TangentMode): UnityEditor.ShapeEditor.TangentMode;
    HandlePointClick(pointIndex: number): void;
    HandlePointInsertToEdge(closestEdge: number, closestEdgeDist: number): void;
    OnDisable(): void;
    OnGUI(): void;
    Points(): void;
    RectCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    RefreshTangentsAfterModeChange(pointIndex: number, oldMode: UnityEditor.ShapeEditor.TangentMode, newMode: UnityEditor.ShapeEditor.TangentMode): void;
    RegisterToShapeEditor(se: UnityEditor.ShapeEditor): void;
    SetRectSelectionTool(sers: UnityEditor.ShapeEditorRectSelectionTool): void;
    Tangents(): void;
    UnregisterFromShapeEditor(se: UnityEditor.ShapeEditor): void;
    activeEdge: number;
    activePoint: number;
    inEditMode: boolean;
    lineTexture: UnityEngine.U2D.Interface.ITexture2D;
    readonly selectedPoints: any;
    DistanceToCircle: (() => ((pos: any, rotation: any, handleSize: number) => number));
    DistanceToDiamond: (() => ((pos: any, rotation: any, handleSize: number) => number));
    DistanceToRectangle: (() => ((pos: any, rotation: any, handleSize: number) => number));
    Frame: ((obj: any) => void);
    GetHandleSize: (() => number);
    GetPointLTangent: ((arg: number) => any);
    GetPointPosition: ((arg: number) => any);
    GetPointRTangent: ((arg: number) => any);
    GetPointsCount: (() => number);
    GetTangentMode: ((arg: number) => UnityEditor.ShapeEditor.TangentMode);
    InsertPointAt: ((arg1: number, arg2: any) => void);
    LocalToScreen: ((arg: any) => any);
    LocalToWorldMatrix: (() => any);
    OnPointClick: ((obj: number) => void);
    OpenEnded: (() => boolean);
    RecordUndo: (() => void);
    RemovePointAt: ((obj: number) => void);
    Repaint: (() => void);
    ScreenToLocal: ((arg: any) => any);
    SetPointLTangent: ((arg1: number, arg2: any) => void);
    SetPointPosition: ((arg1: number, arg2: any) => void);
    SetPointRTangent: ((arg1: number, arg2: any) => void);
    SetTangentMode: ((arg1: number, arg2: UnityEditor.ShapeEditor.TangentMode) => void);
    Snap: ((arg: any) => any);
  }
}
declare namespace UnityEditor.ShapeEditor {
  class SelectionType extends System.Enum {
    protected constructor();
    static Additive: UnityEditor.ShapeEditor.SelectionType;
    static Normal: UnityEditor.ShapeEditor.SelectionType;
    static Subtractive: UnityEditor.ShapeEditor.SelectionType;
    value__: number;
  }
}
declare namespace UnityEditor.ShapeEditor {
  class Tool extends System.Enum {
    protected constructor();
    static Break: UnityEditor.ShapeEditor.Tool;
    static Create: UnityEditor.ShapeEditor.Tool;
    static Edit: UnityEditor.ShapeEditor.Tool;
    value__: number;
  }
}
declare namespace UnityEditor.ShapeEditor {
  class TangentMode extends System.Enum {
    protected constructor();
    static Broken: UnityEditor.ShapeEditor.TangentMode;
    static Continuous: UnityEditor.ShapeEditor.TangentMode;
    static Linear: UnityEditor.ShapeEditor.TangentMode;
    value__: number;
  }
}
declare namespace UnityEditor.ShapeEditor {
  class ColorEnum extends System.Enum {
    protected constructor();
    static ESelected: UnityEditor.ShapeEditor.ColorEnum;
    static ESelectedHovered: UnityEditor.ShapeEditor.ColorEnum;
    static EUnselected: UnityEditor.ShapeEditor.ColorEnum;
    static EUnselectedHovered: UnityEditor.ShapeEditor.ColorEnum;
    value__: number;
  }
}
declare namespace UnityEditor.ShapeEditor {
  class DrawBatchDataKey extends System.Object {
    constructor(c: any, mode: number);
    Equals(obj: any): boolean;
    GetHashCode(): number;
    readonly color: any;
    readonly glMode: number;
  }
}
declare namespace UnityEditor {
  class ShapeEditorRectSelectionTool extends System.Object {
    constructor(gu: UnityEngine.IGUIUtility);
    OnGUI(): void;
    readonly isSelecting: boolean;
  }
}
declare namespace UnityEditor {
  class ShapeEditorSelection extends System.Object {
    constructor(owner: UnityEditor.ShapeEditor);
    Clear(): void;
    Contains(i: number): boolean;
    DeleteSelection(): void;
    GetEnumerator(): any;
    MoveSelection(delta: any): void;
    RectSelect(rect: any, type: UnityEditor.ShapeEditor.SelectionType): void;
    SelectPoint(i: number, type: UnityEditor.ShapeEditor.SelectionType): void;
    readonly Count: number;
    readonly indices: any;
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorHandles extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorMenuSetting extends UnityEngine.ScriptableObject {
    constructor();
    autoSlicingMethod: number;
    gridCellCount: any;
    gridSpriteOffset: any;
    gridSpritePadding: any;
    gridSpriteSize: any;
    pivot: any;
    slicingType: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
    spriteAlignment: number;
  }
}
declare namespace UnityEditorInternal.SpriteEditorMenuSetting {
  class SlicingType extends System.Enum {
    protected constructor();
    static Automatic: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
    static GridByCellCount: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
    static GridByCellSize: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
    value__: number;
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorMenu extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditorInternal.SpriteEditorMenu {
  class Styles extends System.Object {
    constructor();
    automaticSlicingHintLabel: any;
    background: any;
    columnAndRowLabel: any;
    columnLabel: any;
    customPivotLabel: any;
    methodLabel: any;
    notice: any;
    offsetLabel: any;
    paddingLabel: any;
    pivotLabel: any;
    pixelSizeLabel: any;
    rowLabel: any;
    sliceButtonLabel: any;
    slicingMethodOptions: any[];
    spriteAlignmentOptions: any[];
    typeLabel: any;
    xLabel: any;
    yLabel: any;
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorUtility extends System.Object {
    protected constructor();
    static BeginLines(color: any): void;
    static ClampedRect(rect: any, clamp: any, maintainSize: boolean): any;
    static DrawBox(position: any): void;
    static DrawLine(p1: any, p2: any): void;
    static EndLines(): void;
    static FourIntFields(rectSize: any, label: any, labelX: any, labelY: any, labelZ: any, labelW: any, x: any, y: any, z: any, w: any): void;
    static GetPivotValue(alignment: any, customOffset: any): any;
    static RoundedRect(rect: any): any;
    static RoundToInt(r: any): any;
  }
}
declare namespace UnityEditor {
  class SpriteEditorWindow extends UnityEditor.SpriteUtilityWindow {
    constructor();
    ApplyOrRevertModification(apply: boolean): void;
    ClearProgressBar(): void;
    DisplayProgressBar(title: string, content: string, progress: number): void;
    DoTextureReimport(path: string): void;
    GetReadableTexture2D(): UnityEngine.U2D.Interface.ITexture2D;
    static GetWindow(): void;
    HandleSpriteSelection(): void;
    InvalidatePropertiesCache(): void;
    IsEditingDisabled(): boolean;
    RefreshPropertiesCache(): void;
    RequestRepaint(): void;
    ResetWindow(): void;
    SetDataModified(): void;
    static TextureImporterApply(so: UnityEditor.SerializedObject): void;
    readonly editingDisabled: boolean;
    readonly previewTexture: UnityEngine.U2D.Interface.ITexture2D;
    selectedSpriteRect: UnityEditor.SpriteRect;
    readonly selectedTexture: UnityEngine.U2D.Interface.ITexture2D;
    readonly selectedTextureChanged: boolean;
    readonly spriteRects: UnityEditor.ISpriteRectCache;
    textureIsDirty: boolean;
    readonly windowDimension: any;
    m_IgnoreNextPostprocessEvent: boolean;
    m_OriginalTexture: UnityEngine.U2D.Interface.ITexture2D;
    m_ResetOnNextRepaint: boolean;
    m_SelectedAssetPath: string;
    static s_Instance: UnityEditor.SpriteEditorWindow;
    static s_OneClickDragStarted: boolean;
  }
}
declare namespace UnityEditor {
  class SpriteUtilityWindow extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.SpriteEditorWindow {
  class SpriteEditorWindowStyles extends System.Object {
    constructor();
    static applyButtonLabel: any;
    static applyRevertDialogContent: any;
    static applyRevertDialogTitle: any;
    static applyRevertModuleDialogContent: any;
    static applyRevertModuleDialogTitle: any;
    static editingDisableMessageLabel: any;
    static loadContentText: any;
    static loadProgressTitle: any;
    static noButtonLabel: any;
    static noSelectionWarning: any;
    static pendingChangesDialogContent: any;
    static revertButtonLabel: any;
    static saveContentText: any;
    static saveProgressTitle: any;
    static spriteEditorWindowTitle: any;
    static yesButtonLabel: any;
  }
}
declare namespace UnityEditor.SpriteEditorWindow {
  class PreviewTexture2D extends UnityEngine.U2D.Interface.Texture2D {
    constructor(t: any);
    readonly height: number;
    readonly width: number;
  }
}
declare namespace UnityEditor {
  class SpriteEditorTexturePostprocessor extends UnityEditor.AssetPostprocessor {
    constructor();
    GetPostprocessOrder(): number;
    OnPostprocessTexture(tex: any): void;
  }
}
declare namespace UnityEditor {
  class SpriteRect extends System.Object {
    constructor();
    static AcquireOutline(outlineSP: UnityEditor.SerializedProperty): UnityEditor.SpriteOutline[];
    static ApplyOutlineChanges(outlineSP: UnityEditor.SerializedProperty, outline: UnityEditor.SpriteOutline[]): void;
    ApplyToSerializedProperty(sp: UnityEditor.SerializedProperty): void;
    LoadFromSerializedProperty(sp: UnityEditor.SerializedProperty): void;
    alignment: any;
    border: any;
    name: string;
    originalName: string;
    outline: UnityEditor.SpriteOutline[];
    physicsShape: UnityEditor.SpriteOutline[];
    pivot: any;
    rect: any;
    tessellationDetail: number;
  }
}
declare namespace UnityEditor {
  class SpriteOutline extends System.Object {
    constructor();
    Add(point: any): void;
    AddRange(addRange: any): void;
    Insert(index: number, point: any): void;
    RemoveAt(index: number): void;
    readonly Count: number;
    get_Item(index: number): any;
    set_Item(index: number, value: any): void;
    m_Path: any[];
  }
}
declare namespace UnityEditor {
  class SpriteRectCache extends UnityEngine.ScriptableObject {
    constructor();
    AddRect(r: UnityEditor.SpriteRect): void;
    ClearAll(): void;
    Contains(spriteRect: UnityEditor.SpriteRect): boolean;
    GetIndex(spriteRect: UnityEditor.SpriteRect): number;
    RectAt(i: number): UnityEditor.SpriteRect;
    RemoveRect(r: UnityEditor.SpriteRect): void;
    readonly Count: number;
    m_Rects: UnityEditor.SpriteRect[];
  }
}
declare namespace UnityEditor.Sprites {
  class DefaultPackerPolicy extends System.Object {
    constructor();
    GetVersion(): number;
    OnGroupAtlases(target: UnityEditor.BuildTarget, job: UnityEditor.Sprites.PackerJob, textureImporterInstanceIDs: number[]): void;
    readonly AllowSequentialPacking: boolean;
  }
}
declare namespace UnityEditor.Sprites.DefaultPackerPolicy {
  class Entry extends System.Object {
    constructor();
    anisoLevel: number;
    atlasName: string;
    packingMode: any;
    settings: UnityEditor.Sprites.AtlasSettings;
    sprite: any;
  }
}
declare namespace UnityEditor.Sprites {
  class IPackerPolicy {
    protected constructor();
    GetVersion(): number;
    OnGroupAtlases(target: UnityEditor.BuildTarget, job: UnityEditor.Sprites.PackerJob, textureImporterInstanceIDs: number[]): void;
    readonly AllowSequentialPacking: boolean;
  }
}
declare namespace UnityEditor.Sprites {
  class PackerWindow extends UnityEditor.SpriteUtilityWindow {
    constructor();
    OnGUI(): void;
  }
}
declare namespace UnityEditor.Sprites.PackerWindow {
  class PackerWindowStyle extends System.Object {
    constructor();
    static openProjectSettingButton: any;
    static packingDisabledLabel: any;
    static packLabel: any;
    static pageContentLabel: any;
    static repackLabel: any;
    static viewAtlasLabel: any;
    static windowTitle: any;
  }
}
declare namespace UnityEditor.Sprites.PackerWindow {
  class Edge extends System.ValueType {
    protected constructor();
    Equals(obj: any): boolean;
    GetHashCode(): number;
    v0: number;
    v1: number;
  }
}
declare namespace UnityEditor {
  class SpriteUtility extends System.Object {
    protected constructor();
    static AddAnimationToGO(go: any, frames: any[], saveFileDialog: ((title: string, defaultName: string, extension: string, message: string, defaultPath: string) => string)): boolean;
    static CreateDragGO(frame: any, position: any): any;
    static CreateTemporaryDuplicate(original: any, width: number, height: number): any;
    static DropSpriteToSceneToCreateGO(sprite: any, position: any): any;
    static ExistingAssets(objects: UnityEngine.Object[]): boolean;
    static GetSpriteFromPathsOrObjects(objects: UnityEngine.Object[], paths: string[], currentEventType: any): any[];
    static GetSpriteImportMode(assetDatabase: UnityEditor.U2D.Interface.IAssetDatabase, texture: UnityEngine.U2D.Interface.ITexture2D): UnityEditor.SpriteImportMode;
    static HandleSpriteSceneDrag(sceneView: UnityEditor.SceneView, evt: UnityEngine.U2D.Interface.IEvent, objectReferences: UnityEngine.Object[], paths: string[], saveFileDialog: ((title: string, defaultName: string, extension: string, message: string, defaultPath: string) => string)): void;
    static OnSceneDrag(sceneView: UnityEditor.SceneView): void;
    static RemapObjectToSprite(obj: UnityEngine.Object): any;
    static RenderStaticPreview(sprite: any, color: any, width: number, height: number): any;
    static RenderStaticPreview(sprite: any, color: any, width: number, height: number, transform: any): any;
    static TextureToSprite(tex: any): any;
    static TextureToSprites(tex: any): any[];
  }
}
declare namespace UnityEditor.SpriteUtility {
  class SpriteUtilityStrings extends System.Object {
    protected constructor();
    static failedToCreateAnimationError: any;
    static saveAnimDialogMessage: any;
    static saveAnimDialogName: any;
    static saveAnimDialogTitle: any;
    static unableToAddSpriteRendererWarning: any;
    static unableToFindSpriteRendererWarning: any;
  }
}
declare namespace UnityEditor.SpriteUtility {
  class DragType extends System.Enum {
    protected constructor();
    static CreateMultiple: UnityEditor.SpriteUtility.DragType;
    static NotInitialized: UnityEditor.SpriteUtility.DragType;
    static SpriteAnimation: UnityEditor.SpriteUtility.DragType;
    value__: number;
  }
}
declare namespace UnityEditor.SpriteUtilityWindow {
  class Styles extends System.Object {
    constructor();
    alphaIcon: any;
    createRect: any;
    dragBorderdot: any;
    dragBorderDotActive: any;
    dragdot: any;
    dragdotactive: any;
    dragdotDimmed: any;
    largeMip: any;
    notice: any;
    pivotdot: any;
    pivotdotactive: any;
    preBackground: any;
    preButton: any;
    preLabel: any;
    preSlider: any;
    preSliderThumb: any;
    preToolbar: any;
    RGBIcon: any;
    smallMip: any;
    toolbar: any;
  }
}
declare namespace UnityEditor.Sprites {
  class TightRotateEnabledSpritePackerPolicy extends UnityEditor.Sprites.DefaultPackerPolicy {
    constructor();
  }
}
declare namespace UnityEditor.Sprites {
  class TightPackerPolicy extends UnityEditor.Sprites.DefaultPackerPolicy {
    constructor();
  }
}
declare namespace UnityEditor.StyleSheets {
  class CSSSpec extends System.Object {
    protected constructor();
    static GetSelectorSpecificity(selector: string): number;
    static GetSelectorSpecificity(parts: any[]): number;
    static ParseSelector(selector: string, parts: any): boolean;
  }
}
declare namespace UnityEditor.StyleSheets {
  class StyleSheetBuilder extends System.Object {
    constructor();
    AddSimpleSelector(parts: any[], previousRelationsip: any): void;
    AddValue(value: number): void;
    AddValue(value: string, type: any): void;
    AddValue(value: any): void;
    AddValue(keyword: any): void;
    BeginComplexSelector(specificity: number): UnityEditor.StyleSheets.StyleSheetBuilder.ComplexSelectorScope;
    BeginProperty(name: string): void;
    BeginRule(ruleLine: number): void;
    BuildTo(writeTo: any): void;
    EndComplexSelector(): void;
    EndProperty(): void;
    EndRule(): number;
  }
}
declare namespace UnityEditor.StyleSheets.StyleSheetBuilder {
  class ComplexSelectorScope extends System.ValueType {
    protected constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor.StyleSheets.StyleSheetBuilder {
  class BuilderState extends System.Enum {
    protected constructor();
    static ComplexSelector: UnityEditor.StyleSheets.StyleSheetBuilder.BuilderState;
    static Init: UnityEditor.StyleSheets.StyleSheetBuilder.BuilderState;
    static Property: UnityEditor.StyleSheets.StyleSheetBuilder.BuilderState;
    static Rule: UnityEditor.StyleSheets.StyleSheetBuilder.BuilderState;
    value__: number;
  }
}
declare namespace UnityEditor.StyleSheets {
  class StyleSheetImporter extends UnityEditor.Experimental.AssetImporters.ScriptedImporter {
    constructor();
    Import(asset: any, contents: string): void;
    OnImportAsset(ctx: UnityEditor.Experimental.AssetImporters.AssetImportContext): void;
  }
}
declare namespace UnityEditor.StyleSheets {
  class StyleSheetImportErrorType extends System.Enum {
    protected constructor();
    static Internal: UnityEditor.StyleSheets.StyleSheetImportErrorType;
    static Other: UnityEditor.StyleSheets.StyleSheetImportErrorType;
    static Semantic: UnityEditor.StyleSheets.StyleSheetImportErrorType;
    static Syntax: UnityEditor.StyleSheets.StyleSheetImportErrorType;
    value__: number;
  }
}
declare namespace UnityEditor.StyleSheets {
  class StyleSheetImportErrorCode extends System.Enum {
    protected constructor();
    static Internal: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static InvalidComplexSelectorDelimiter: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static InvalidSelectorListDelimiter: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static None: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static RecursiveSelectorDetected: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static UnsupportedFunction: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static UnsupportedParserType: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static UnsupportedSelectorFormat: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    static UnsupportedUnit: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    value__: number;
  }
}
declare namespace UnityEditor.StyleSheets {
  class StyleSheetImportErrors extends System.Object {
    constructor();
    AddInternalError(context: string): void;
    AddSemanticError(code: UnityEditor.StyleSheets.StyleSheetImportErrorCode, context: string): void;
    AddSyntaxError(context: string): void;
    FormatErrors(): any;
    readonly hasErrors: boolean;
  }
}
declare namespace UnityEditor.StyleSheets.StyleSheetImportErrors {
  class Error extends System.ValueType {
    protected constructor();
    ToString(): string;
    code: UnityEditor.StyleSheets.StyleSheetImportErrorCode;
    context: string;
    error: UnityEditor.StyleSheets.StyleSheetImportErrorType;
  }
}
declare namespace UnityEditor.StyleSheets {
  class StyleSheetResourceUtil extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class Brush extends System.Object {
    constructor();
    Dispose(): void;
    GetPreviewProjector(): any;
    GetStrengthInt(ix: number, iy: number): number;
    Load(brushTex: any, size: number): boolean;
  }
}
declare namespace UnityEditor {
  class HeightmapFilters extends System.Object {
    constructor();
    static Flatten(terrain: any, height: number): void;
    static Smooth(heights: number[], terrain: any): void;
    static Smooth(terrain: any): void;
  }
}
declare namespace UnityEditor {
  class TerrainEditorUtility extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TerrainTool extends System.Enum {
    protected constructor();
    static None: UnityEditor.TerrainTool;
    static PaintDetail: UnityEditor.TerrainTool;
    static PaintHeight: UnityEditor.TerrainTool;
    static PaintTexture: UnityEditor.TerrainTool;
    static PlaceTree: UnityEditor.TerrainTool;
    static SetHeight: UnityEditor.TerrainTool;
    static SmoothHeight: UnityEditor.TerrainTool;
    static TerrainSettings: UnityEditor.TerrainTool;
    static TerrainToolCount: UnityEditor.TerrainTool;
    value__: number;
  }
}
declare namespace UnityEditor {
  class SplatPainter extends System.Object {
    constructor();
    Paint(xCenterNormalized: number, yCenterNormalized: number, splatIndex: number): void;
    brush: UnityEditor.Brush;
    size: number;
    strength: number;
    target: number;
    terrainData: any;
    tool: UnityEditor.TerrainTool;
  }
}
declare namespace UnityEditor {
  class DetailPainter extends System.Object {
    constructor();
    Paint(xCenterNormalized: number, yCenterNormalized: number, detailIndex: number): void;
    brush: UnityEditor.Brush;
    clearSelectedOnly: boolean;
    opacity: number;
    randomizeDetails: boolean;
    size: number;
    targetStrength: number;
    terrainData: any;
    tool: UnityEditor.TerrainTool;
  }
}
declare namespace UnityEditor {
  class TreePainter extends System.Object {
    constructor();
    static MassPlaceTrees(terrainData: any, numberOfTrees: number, randomTreeColor: boolean, keepExistingTrees: boolean): void;
    static PlaceTrees(terrain: any, xBase: number, yBase: number): void;
    static RemoveTrees(terrain: any, xBase: number, yBase: number, clearSelectedOnly: boolean): void;
    static allowHeightVar: boolean;
    static allowWidthVar: boolean;
    static brushSize: number;
    static lockWidthToHeight: boolean;
    static randomRotation: boolean;
    static selectedTree: number;
    static spacing: number;
    static treeColorAdjustment: number;
    static treeHeight: number;
    static treeHeightVariation: number;
    static treeWidth: number;
    static treeWidthVariation: number;
  }
}
declare namespace UnityEditor {
  class HeightmapPainter extends System.Object {
    constructor();
    PaintHeight(xCenterNormalized: number, yCenterNormalized: number): void;
    brush: UnityEditor.Brush;
    size: number;
    strength: number;
    targetHeight: number;
    terrainData: any;
    tool: UnityEditor.TerrainTool;
  }
}
declare namespace UnityEditor {
  class TerrainInspector extends UnityEditor.Editor {
    constructor();
    static AspectSelectionGrid(selected: number, textures: any[], approxSize: number, style: any, emptyString: string, doubleClick: any): number;
    static AspectSelectionGridImageAndText(selected: number, textures: any[], approxSize: number, style: any, emptyString: string, doubleClick: any): number;
    HasFrameBounds(): boolean;
    InitializeLightingFields(): void;
    MenuButton(title: any, menuName: string, userData: number): void;
    OnDisable(): void;
    OnEnable(): void;
    OnGetFrameBounds(): any;
    OnInspectorGUI(): void;
    OnSceneGUICallback(sceneView: UnityEditor.SceneView): void;
    Raycast(uv: any, pos: any): boolean;
    RenderLightingFields(): void;
    ShowBrushes(): void;
    ShowBrushSettings(): void;
    ShowDetails(): void;
    ShowHeightmaps(): void;
    ShowMassPlaceTrees(): void;
    ShowRaiseHeight(): void;
    ShowRefreshPrototypes(): void;
    ShowResolution(): void;
    ShowSetHeight(): void;
    ShowSettings(): void;
    ShowSmoothHeight(): void;
    ShowTextures(): void;
    ShowTrees(): void;
    ShowUpgradeTreePrototypeScaleUI(): void;
  }
}
declare namespace UnityEditor.TerrainInspector {
  class Styles extends System.Object {
    constructor();
    assign: any;
    bakeLightProbesForTrees: any;
    brushes: any;
    brushSize: any;
    command: any;
    details: any;
    detailTargetStrength: any;
    editDetails: any;
    editTextures: any;
    editTrees: any;
    exportRaw: any;
    flatten: any;
    gridList: any;
    gridListText: any;
    heightmap: any;
    importRaw: any;
    largeSquare: any;
    lockWidth: any;
    massPlaceTrees: any;
    mismatchedTerrainData: any;
    noTrees: any;
    opacity: any;
    refresh: any;
    settings: any;
    settingsIcon: any;
    textures: any;
    toolIcons: any[];
    toolNames: any[];
    treeColorVar: any;
    treeDensity: any;
    treeHeight: any;
    treeHeightRandomLabel: any;
    treeHeightRandomToggle: any;
    treeRotation: any;
    trees: any;
    treeWidth: any;
    treeWidthRandomLabel: any;
    treeWidthRandomToggle: any;
  }
}
declare namespace UnityEditor {
  class TerrainMenus extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TerrainDetailContextMenus extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TerrainSplatContextMenus extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TerrainTreeContextMenus extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TerrainSplatEditor extends UnityEditor.EditorWindow {
    constructor();
    m_NormalMap: any;
    m_Texture: any;
  }
}
declare namespace UnityEditor {
  class TerrainWizard extends UnityEditor.ScriptableWizard {
    constructor();
  }
}
declare namespace UnityEditor {
  class ImportRawHeightmap extends UnityEditor.TerrainWizard {
    constructor();
    m_ByteOrder: UnityEditor.ImportRawHeightmap.ByteOrder;
    m_Depth: UnityEditor.ImportRawHeightmap.Depth;
    m_FlipVertically: boolean;
    m_Height: number;
    m_TerrainSize: any;
    m_Width: number;
  }
}
declare namespace UnityEditor.ImportRawHeightmap {
  class Depth extends System.Enum {
    protected constructor();
    static Bit16: UnityEditor.ImportRawHeightmap.Depth;
    static Bit8: UnityEditor.ImportRawHeightmap.Depth;
    value__: number;
  }
}
declare namespace UnityEditor.ImportRawHeightmap {
  class ByteOrder extends System.Enum {
    protected constructor();
    static Mac: UnityEditor.ImportRawHeightmap.ByteOrder;
    value__: number;
    static Windows: UnityEditor.ImportRawHeightmap.ByteOrder;
  }
}
declare namespace UnityEditor {
  class ExportRawHeightmap extends UnityEditor.TerrainWizard {
    constructor();
    OnEnable(): void;
    m_ByteOrder: UnityEditor.ExportRawHeightmap.ByteOrder;
    m_Depth: UnityEditor.ExportRawHeightmap.Depth;
    m_FlipVertically: boolean;
  }
}
declare namespace UnityEditor.ExportRawHeightmap {
  class Depth extends System.Enum {
    protected constructor();
    static Bit16: UnityEditor.ExportRawHeightmap.Depth;
    static Bit8: UnityEditor.ExportRawHeightmap.Depth;
    value__: number;
  }
}
declare namespace UnityEditor.ExportRawHeightmap {
  class ByteOrder extends System.Enum {
    protected constructor();
    static Mac: UnityEditor.ExportRawHeightmap.ByteOrder;
    value__: number;
    static Windows: UnityEditor.ExportRawHeightmap.ByteOrder;
  }
}
declare namespace UnityEditor {
  class TreeWizard extends UnityEditor.TerrainWizard {
    constructor();
    OnEnable(): void;
    m_BendFactor: number;
    m_Tree: any;
  }
}
declare namespace UnityEditor {
  class DetailMeshRenderMode extends System.Enum {
    protected constructor();
    static Grass: UnityEditor.DetailMeshRenderMode;
    value__: number;
    static VertexLit: UnityEditor.DetailMeshRenderMode;
  }
}
declare namespace UnityEditor {
  class DetailMeshWizard extends UnityEditor.TerrainWizard {
    constructor();
    OnEnable(): void;
    m_Detail: any;
    m_DryColor: any;
    m_HealthyColor: any;
    m_MaxHeight: number;
    m_MaxWidth: number;
    m_MinHeight: number;
    m_MinWidth: number;
    m_NoiseSpread: number;
    m_RenderMode: UnityEditor.DetailMeshRenderMode;
  }
}
declare namespace UnityEditor {
  class DetailTextureWizard extends UnityEditor.TerrainWizard {
    constructor();
    OnEnable(): void;
    m_Billboard: boolean;
    m_DetailTexture: any;
    m_DryColor: any;
    m_HealthyColor: any;
    m_MaxHeight: number;
    m_MaxWidth: number;
    m_MinHeight: number;
    m_MinWidth: number;
    m_NoiseSpread: number;
  }
}
declare namespace UnityEditor {
  class PlaceTreeWizard extends UnityEditor.TerrainWizard {
    constructor();
    OnEnable(): void;
    keepExistingTrees: boolean;
    numberOfTrees: number;
  }
}
declare namespace UnityEditor {
  class FlattenHeightmap extends UnityEditor.TerrainWizard {
    constructor();
    height: number;
  }
}
declare namespace UnityEditor {
  class TerrainWizards extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TreeAO extends System.Object {
    constructor();
    static CalcSoftOcclusion(mesh: any): void;
    static InitializeDirections(): void;
  }
}
declare namespace UnityEditor {
  class TreeAOImporter extends UnityEditor.AssetPostprocessor {
    constructor();
  }
}
declare namespace UnityEditor {
  class TooltipView extends UnityEditor.GUIView {
    constructor();
    static Close(): void;
    static SetAlpha(percent: number): void;
    static Show(tooltip: string, rect: any): void;
  }
}
  class TroubleshooterWindow extends UnityEditor.Web.WebViewEditorWindow {
    protected constructor();
    OnInitScripting(): void;
    OnInitScripting(): void;
    static RunTroubleshooter(): void;
  }
declare namespace UnityEditor {
  class UnityTypeFlags extends System.Enum {
    protected constructor();
    static Abstract: UnityEditor.UnityTypeFlags;
    static EditorOnly: UnityEditor.UnityTypeFlags;
    static Sealed: UnityEditor.UnityTypeFlags;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.UIElements {
  class ContextualMenu extends UnityEngine.Experimental.UIElements.Manipulator {
    constructor();
    AddAction(actionName: string, action: (() => void), actionStatusCallback: (() => UnityEditor.Experimental.UIElements.ContextualMenu.ActionStatus)): void;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class Manipulator extends System.Object {
    protected constructor();
    target: UnityEngine.Experimental.UIElements.VisualElement;
  }
}
declare namespace UnityEditor.Experimental.UIElements.ContextualMenu {
  class Action extends System.ValueType {
    protected constructor();
    action: (() => void);
    enabled: boolean;
    name: any;
  }
}
declare namespace UnityEditor.Experimental.UIElements.ContextualMenu {
  class ActionStatus extends System.Enum {
    protected constructor();
    static Disabled: UnityEditor.Experimental.UIElements.ContextualMenu.ActionStatus;
    static Enabled: UnityEditor.Experimental.UIElements.ContextualMenu.ActionStatus;
    static Off: UnityEditor.Experimental.UIElements.ContextualMenu.ActionStatus;
    value__: number;
  }
}
declare namespace UnityEditor.Experimental.UIElements {
  class EditorTextField extends UnityEngine.Experimental.UIElements.TextField {
    protected constructor();
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class TextField extends UnityEngine.Experimental.UIElements.VisualElement {
    constructor();
    constructor(maxLength: number, multiline: boolean, isPasswordField: boolean, maskChar: any);
    OnStyleResolved(style: any): void;
    readonly cursorColor: any;
    doubleClickSelectsWord: boolean;
    readonly editor: any;
    readonly hasFocus: boolean;
    isPasswordField: boolean;
    maskChar: any;
    maxLength: number;
    multiline: boolean;
    readonly selectionColor: any;
    tripleClickSelectsLine: boolean;
    OnTextChanged: ((obj: string) => void);
    OnTextChangeValidated: (() => void);
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class VisualElement extends UnityEngine.Experimental.UIElements.CallbackEventHandler {
    constructor();
    AddManipulator(manipulator: any): void;
    AddToClassList(className: string): void;
    ClassListContains(cls: string): boolean;
    ClearClassList(): void;
    ClearDirty(type: any): void;
    ContainsPoint(localPoint: any): boolean;
    ContainsPointToLocal(point: any): boolean;
    Dirty(type: any): void;
    DoRepaint(): void;
    InsertManipulator(index: number, manipulator: any): void;
    IsDirty(type: any): boolean;
    OnStyleResolved(style: any): void;
    OnStylesResolved(style: any): void;
    Overlaps(rectangle: any): boolean;
    RemoveFromClassList(className: string): void;
    RemoveManipulator(manipulator: any): void;
    ResetPositionProperties(): void;
    SetSize(size: any): void;
    ToString(): string;
    alignSelf: any;
    backgroundColor: any;
    backgroundImage: any;
    backgroundSize: any;
    borderBottom: number;
    borderBottomWidth: number;
    borderColor: any;
    borderLeft: number;
    borderLeftWidth: number;
    borderRadius: number;
    borderRight: number;
    borderRightWidth: number;
    borderTop: number;
    borderTopWidth: number;
    readonly contentRect: any;
    enabled: boolean;
    flex: number;
    font: any;
    fontSize: number;
    fontStyle: any;
    readonly globalBound: any;
    readonly globalTransform: any;
    height: number;
    layout: any;
    readonly localBound: any;
    marginBottom: number;
    marginLeft: number;
    marginRight: number;
    marginTop: number;
    maxHeight: number;
    maxWidth: number;
    minHeight: number;
    minWidth: number;
    name: string;
    overflow: any;
    paddingBottom: number;
    paddingLeft: number;
    paddingRight: number;
    paddingTop: number;
    readonly panel: any;
    parent: any;
    pickingMode: any;
    position: any;
    positionBottom: number;
    positionLeft: number;
    positionRight: number;
    positionTop: number;
    positionType: any;
    readonly style: any;
    text: string;
    textAlignment: any;
    textClipping: any;
    textColor: any;
    transform: any;
    usePixelCaching: boolean;
    visible: boolean;
    width: number;
    wordWrap: boolean;
  }
}
declare namespace UnityEngine.Experimental.UIElements {
  class CallbackEventHandler extends System.Object {
    protected constructor();
    HandleEvent(evt: any): void;
    OnLostCapture(): void;
    OnLostKeyboardFocus(): void;
    readonly panel: any;
  }
}
declare namespace UnityEditor {
  class UndoWindow extends UnityEditor.EditorWindow {
    constructor();
  }
}
declare namespace UnityEditor.Connect {
  class UnityOAuth extends System.Object {
    protected constructor();
    static GetAuthorizationCodeAsync(clientId: string, callback: ((obj: UnityEditor.Connect.UnityOAuth.AuthCodeResponse) => void)): void;
  }
}
declare namespace UnityEditor.Connect.UnityOAuth {
  class AuthCodeResponse extends System.ValueType {
    protected constructor();
    AuthCode: string;
    Exception: System.Exception;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectConsentView extends UnityEditor.Web.WebViewEditorWindow {
    constructor();
    OnDestroy(): void;
    OnInitScripting(): void;
    OnLocationChanged(url: string): void;
    static ShowUnityConnectConsentView(URL: string): UnityEditor.Connect.UnityConnectConsentView;
    readonly Code: string;
    readonly Error: string;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectEditorWindow extends UnityEditor.Web.WebViewEditorWindowTabs {
    protected constructor();
    static Create(title: string, serviceUrls: string[]): UnityEditor.Connect.UnityConnectEditorWindow;
    OnEnable(): void;
    OnEnable(): void;
    OnGUI(): void;
    OnGUI(): void;
    OnInitScripting(): void;
    OnInitScripting(): void;
    OnLoadError(url: string): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    ToggleMaximize(): void;
    UrlsMatch(referenceUrls: string[]): boolean;
    currentUrl: string;
    ErrorUrl: string;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectPrefs extends System.Object {
    constructor();
    static FixUrl(url: string, serviceName: string): string;
    static GetServiceEnv(serviceName: string): number;
    static ServicePrefKey(baseKey: string, serviceName: string): string;
    static ShowPanelPrefUI(): void;
    static StorePanelPrefs(): void;
    static kCustomEnv: number;
    static kEnvironmentFamilies: string[];
    static kProductionEnv: number;
    static kSvcCustomPortPref: string;
    static kSvcCustomUrlPref: string;
    static kSvcEnvPref: string;
  }
}
declare namespace UnityEditor.Connect.UnityConnectPrefs {
  class CloudPanelPref extends System.Object {
    constructor(serviceName: string);
    StoreCloudServicePref(): void;
    m_CloudPanelCustomPort: number;
    m_CloudPanelCustomUrl: string;
    m_CloudPanelServer: number;
    m_ServiceName: string;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectServiceCollection extends System.Object {
    protected constructor();
    AddService(cloudService: UnityEditor.Connect.UnityConnectServiceData): boolean;
    CloseServices(): void;
    EnableService(name: string, enabled: boolean): void;
    GetAllServiceInfos(): UnityEditor.Connect.UnityConnectServiceCollection.ServiceInfo[];
    GetAllServiceNames(): string[];
    GetAllServiceUrls(): string[];
    GetServiceFromUrl(searchUrl: string): UnityEditor.Connect.UnityConnectServiceData;
    GetUrlForService(serviceName: string): string;
    GetWebViewFromServiceName(serviceName: string): UnityEditor.WebView;
    ReloadServices(): void;
    RemoveService(serviceName: string): boolean;
    ServiceExist(serviceName: string): boolean;
    ShowService(serviceName: string, forceFocus: boolean, atReferrer: string): boolean;
    ShowService(serviceName: string, atPage: string, forceFocus: boolean, atReferrer: string): boolean;
    static StaticEnableService(serviceName: string, enabled: boolean): void;
    UnbindAllServices(): void;
    static readonly instance: UnityEditor.Connect.UnityConnectServiceCollection;
    readonly isDrawerOpen: boolean;
  }
}
declare namespace UnityEditor.Connect.UnityConnectServiceCollection {
  class ShowServiceState extends System.ValueType {
    protected constructor();
    page: string;
    referrer: string;
    service: string;
  }
}
declare namespace UnityEditor.Connect.UnityConnectServiceCollection {
  class ServiceInfo extends System.Object {
    constructor(name: string, url: string, unityPath: string, enabled: boolean);
    enabled: boolean;
    name: string;
    unityPath: string;
    url: string;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectServiceData extends System.Object {
    constructor(serviceName: string, htmlSourcePath: string, jsGlobalObject: UnityEditor.Web.CloudServiceAccess, jsGlobalObjectName: string);
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    readonly serviceJsGlobalObject: UnityEditor.Web.CloudServiceAccess;
    readonly serviceJsGlobalObjectName: string;
    readonly serviceName: string;
    readonly serviceUrl: string;
  }
}
declare namespace UnityEditor.Web {
  class AdsAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableService(enabled: boolean): void;
    GetAndroidGameId(): string;
    GetGameId(platformName: string): string;
    GetIOSGameId(): string;
    GetPackageName(): string;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    IsInitializedOnStartup(): boolean;
    IsServiceEnabled(): boolean;
    IsTestModeEnabled(): boolean;
    OnProjectUnbound(): void;
    SetAndroidGameId(value: string): void;
    SetGameId(platformName: string, value: string): void;
    SetInitializedOnStartup(enabled: boolean): void;
    SetIOSGameId(value: string): void;
    SetTestModeEnabled(enabled: boolean): void;
  }
}
declare namespace UnityEditor.Web {
  class CloudServiceAccess extends System.Object {
    protected constructor();
    EnableService(enabled: boolean): void;
    GetCurrentPackageVersion(): string;
    GetLatestPackageVersion(): string;
    GetPackageName(): string;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    GoBackToHub(): void;
    IsServiceEnabled(): boolean;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    UpdateLatestPackage(): void;
  }
}
declare namespace UnityEditor.Web.AdsAccess {
  class AdsServiceState extends System.ValueType {
    protected constructor();
    ads: boolean;
  }
}
declare namespace UnityEditor.Web {
  class AnalyticsAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableService(enabled: boolean): void;
    GetPackageName(): string;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    IsServiceEnabled(): boolean;
    IsTestModeEnabled(): boolean;
    SetTestModeEnabled(enabled: boolean): void;
  }
}
declare namespace UnityEditor.Web.AnalyticsAccess {
  class AnalyticsServiceState extends System.ValueType {
    protected constructor();
    analytics: boolean;
  }
}
declare namespace UnityEditor.Web {
  class BuildAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    ShowBuildForCommit(commitId: string): void;
  }
}
declare namespace UnityEditor.Web {
  class CollabAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableService(enabled: boolean): void;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    IsCollabUIAccessible(): boolean;
    static readonly Instance: UnityEditor.Web.CollabAccess;
  }
}
declare namespace UnityEditor.Web {
  class CrashReportingAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableService(enabled: boolean): void;
    GetCaptureEditorExceptions(): boolean;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    IsServiceEnabled(): boolean;
    SetCaptureEditorExceptions(captureEditorExceptions: boolean): void;
  }
}
declare namespace UnityEditor.Web.CrashReportingAccess {
  class CrashReportingServiceState extends System.ValueType {
    protected constructor();
    crash_reporting: boolean;
  }
}
declare namespace UnityEditor.Web {
  class ErrorHubAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    GetServiceName(): string;
    errorMessage: string;
    static readonly instance: UnityEditor.Web.ErrorHubAccess;
    static kServiceName: string;
  }
}
declare namespace UnityEditor.Web {
  class HubAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableCloudService(name: string, enabled: boolean): void;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    GetServices(): UnityEditor.Connect.UnityConnectServiceCollection.ServiceInfo[];
    ShowService(name: string): void;
    static readonly instance: UnityEditor.Web.HubAccess;
    static kServiceName: string;
  }
}
declare namespace UnityEditor.Web {
  class PurchasingAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableService(enabled: boolean): void;
    GetInstalledETag(): string;
    GetPackageName(): string;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    InstallUnityPackage(): void;
    IsServiceEnabled(): boolean;
  }
}
declare namespace UnityEditor.Web.PurchasingAccess {
  class PurchasingServiceState extends System.ValueType {
    protected constructor();
    iap: boolean;
  }
}
declare namespace UnityEditor.Web {
  class UnetAccess extends UnityEditor.Web.CloudServiceAccess {
    constructor();
    EnableService(enabled: boolean): void;
    GetServiceDisplayName(): string;
    GetServiceName(): string;
    SetMultiplayerId(id: number): void;
  }
}
declare namespace UnityEditor.Web.UnetAccess {
  class UnetServiceState extends System.ValueType {
    protected constructor();
    unet: boolean;
  }
}
declare namespace UnityEditor {
  class AssemblyReferenceChecker extends System.Object {
    constructor();
    static AssemblyReferenceCheckerWithUpdateProgressAction(action: (() => void)): UnityEditor.AssemblyReferenceChecker;
    CollectReferences(path: string, collectMethods: boolean, progressValue: number, ignoreSystemDlls: boolean): void;
    CollectReferencesFromRoots(dir: string, roots: any, collectMethods: boolean, progressValue: number, ignoreSystemDlls: boolean): void;
    GetAssemblyDefinitions(): any[];
    GetAssemblyFileNames(): string[];
    static GetScriptsHaveMouseEvents(path: string): boolean;
    HasDefinedMethod(methodName: string): boolean;
    HasReferenceToMethod(methodName: string): boolean;
    HasReferenceToMethod(methodName: string, ignoreSystemDlls: boolean): boolean;
    HasReferenceToType(typeName: string): boolean;
    static IsIgnoredSystemDll(name: string): boolean;
    WhoReferencesClass(klass: string, ignoreSystemDlls: boolean): string;
    readonly HasMouseEvent: boolean;
  }
}
declare namespace UnityEditor {
  class EditorExtensionMethods extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class ExpressionEvaluator extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.ExpressionEvaluator {
  class Associativity extends System.Enum {
    protected constructor();
    static Left: UnityEditor.ExpressionEvaluator.Associativity;
    static Right: UnityEditor.ExpressionEvaluator.Associativity;
    value__: number;
  }
}
declare namespace UnityEditor.ExpressionEvaluator {
  class Operator extends System.ValueType {
    protected constructor();
    associativity: UnityEditor.ExpressionEvaluator.Associativity;
    character: any;
    inputs: number;
    presedence: number;
  }
}
declare namespace UnityEditor {
  class IDeviceUtils extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class LightProbeGroupSelection extends UnityEngine.ScriptableObject {
    constructor();
    m_Selection: number[];
  }
}
declare namespace UnityEditor.Scripting {
  class ManagedProgram extends UnityEditor.Utils.Program {
    constructor(monodistribution: string, profile: string, executable: string, arguments_: string, setupStartInfo: ((obj: any) => void));
    constructor(monodistribution: string, profile: string, executable: string, arguments_: string, setMonoEnvironmentVariables: boolean, setupStartInfo: ((obj: any) => void));
  }
}
declare namespace UnityEditor {
  class MathUtils extends System.Object {
    constructor();
    static ClosestPtRaySphere(ray: any, sphereOrigin: any, sphereRadius: number, t: any, q: any): boolean;
    static ClosestPtSegmentRay(p1: any, q1: any, ray: any, squaredDist: any, s: any, closestRay: any): any;
    static Ease(t: number, k1: number, k2: number): number;
    static GetQuatConjugate(q: any): any;
    static GetQuatExp(q: any): any;
    static GetQuatLength(q: any): number;
    static GetQuatLog(q: any): any;
    static GetQuatSquad(t: number, q0: any, q1: any, a0: any, a1: any): any;
    static GetSquadIntermediate(q0: any, q1: any, q2: any): any;
    static IntersectRaySphere(ray: any, sphereOrigin: any, sphereRadius: number, t: any, q: any): boolean;
    static IntersectRayTriangle(ray: any, v0: any, v1: any, v2: any, bidirectional: boolean): any;
    static OrthogonalizeMatrix(m: any): any;
    static QuaternionFromMatrix(m: any): any;
    static QuaternionNormalize(q: any): void;
    static Slerp(p: any, q: any, t: number): any;
  }
}
declare namespace UnityEditor {
  class MenuUtils extends System.Object {
    constructor();
    static ExtractMenuItemWithPath(menuString: string, menu: UnityEditor.GenericMenu, replacementMenuString: string, temporaryContext: UnityEngine.Object[], userData: number, onBeforeExecuteCallback: ((arg1: string, arg2: UnityEngine.Object[], arg3: number) => void), onAfterExecuteCallback: ((arg1: string, arg2: UnityEngine.Object[], arg3: number) => void)): void;
    static ExtractSubMenuWithPath(path: string, menu: UnityEditor.GenericMenu, replacementPath: string, temporaryContext: UnityEngine.Object[]): void;
    static MenuCallback(callbackObject: any): void;
  }
}
declare namespace UnityEditor.MenuUtils {
  class MenuCallbackObject extends System.Object {
    constructor();
    menuItemPath: string;
    onAfterExecuteCallback: ((arg1: string, arg2: UnityEngine.Object[], arg3: number) => void);
    onBeforeExecuteCallback: ((arg1: string, arg2: UnityEngine.Object[], arg3: number) => void);
    temporaryContext: UnityEngine.Object[];
    userData: number;
  }
}
declare namespace UnityEditor {
  class MetroCertificatePasswordWindow extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(path: string): void;
  }
}
declare namespace UnityEditor {
  class HorizontalLayout extends System.Object {
    protected constructor();
    static DoLayout(): any;
  }
}
declare namespace UnityEditor {
  class VerticalLayout extends System.Object {
    protected constructor();
    static DoLayout(): any;
  }
}
declare namespace UnityEditor {
  class MetroCreateTestCertificateWindow extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(publisher: string): void;
  }
}
declare namespace UnityEditor.Utils {
  class MonoInstallationFinder extends System.Object {
    constructor();
    static GetEtcDirectory(monoInstallation: string): string;
    static GetFrameWorksFolder(): string;
    static GetMonoBleedingEdgeInstallation(): string;
    static GetMonoInstallation(): string;
    static GetMonoInstallation(monoName: string): string;
    static GetProfileDirectory(profile: string): string;
    static GetProfileDirectory(profile: string, monoInstallation: string): string;
    static GetProfilesDirectory(monoInstallation: string): string;
    static MonoBleedingEdgeInstallation: string;
    static MonoInstallation: string;
  }
}
declare namespace UnityEditor.Scripting {
  class NetCoreProgram extends UnityEditor.Utils.Program {
    constructor(executable: string, arguments_: string, setupStartInfo: ((obj: any) => void));
    static IsNetCoreAvailable(): boolean;
  }
}
declare namespace UnityEditor.Utils {
  class Paths extends System.Object {
    protected constructor();
    static AreEqual(pathA: string, pathB: string, ignoreCase: boolean): boolean;
    static Combine(components: string[]): string;
    static ConvertSeparatorsToUnity(path: string): string;
    static CreateTempDirectory(): string;
    static GetFileOrFolderName(path: string): string;
    static IsValidAssetPath(assetPath: string): boolean;
    static IsValidAssetPath(assetPath: string, requiredExtensionWithDot: string): boolean;
    static IsValidAssetPath(assetPath: string, requiredExtensionWithDot: string, errorMsg: any): boolean;
    static IsValidAssetPathWithErrorLogging(assetPath: string, requiredExtensionWithDot: string): boolean;
    static NormalizePath(path: string): string;
    static Split(path: string): string[];
    static UnifyDirectorySeparator(path: string): string;
  }
}
declare namespace UnityEditor.Utils {
  class PerformanceChecks extends System.Object {
    constructor();
    static CheckMaterial(mat: any, buildTarget: UnityEditor.BuildTarget): string;
  }
}
declare namespace UnityEditor.Utils {
  class ProcessOutputStreamReader extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class ProgressHandler extends System.Object {
    constructor(title: string, callback: ((title: string, message: string, globalProgress: number) => void), progressRangeMin?: number, progressRangeMax?: number);
    OnProgress(message: string, progress: number): void;
    SpawnFromLocalSubRange(localRangeMin: number, localRangeMax: number): UnityEditor.ProgressHandler;
  }
}
declare namespace UnityEditor {
  class ProgressTaskManager extends System.Object {
    constructor(handler: UnityEditor.ProgressHandler);
    AddTask(task: (() => void)): void;
    Run(): void;
    SpawnProgressHandlerFromCurrentTask(): UnityEditor.ProgressHandler;
    UpdateProgress(message: string): void;
  }
}
declare namespace UnityEditor {
  class SimpleProfiler extends System.Object {
    constructor();
    static Begin(label: string): void;
    static End(): void;
    static PrintTimes(): void;
  }
}
declare namespace UnityEditor {
  class TickTimerHelper extends System.Object {
    constructor(intervalBetweenTicksInSeconds: number);
    DoTick(): boolean;
    Reset(): void;
  }
}
declare namespace UnityEditor {
  class TimeHelper extends System.ValueType {
    protected constructor();
    Begin(): void;
    Update(): number;
    deltaTime: number;
  }
}
declare namespace UnityEditor.Events {
  class UnityEventTools extends System.Object {
    protected constructor();
    static AddBoolPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, call: ((arg0: boolean) => void), argument: boolean): void;
    static AddFloatPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, call: ((arg0: number) => void), argument: number): void;
    static AddIntPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, call: ((arg0: number) => void), argument: number): void;
    static AddPersistentListener(unityEvent: UnityEngine.Events.UnityEvent, call: (() => void)): void;
    static AddPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase): void;
    static AddStringPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, call: ((arg0: string) => void), argument: string): void;
    static AddVoidPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, call: (() => void)): void;
    static RegisterBoolPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number, call: ((arg0: boolean) => void), argument: boolean): void;
    static RegisterFloatPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number, call: ((arg0: number) => void), argument: number): void;
    static RegisterIntPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number, call: ((arg0: number) => void), argument: number): void;
    static RegisterPersistentListener(unityEvent: UnityEngine.Events.UnityEvent, index: number, call: (() => void)): void;
    static RegisterStringPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number, call: ((arg0: string) => void), argument: string): void;
    static RegisterVoidPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number, call: (() => void)): void;
    static RemovePersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number): void;
    static RemovePersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, call: (() => void)): void;
    static UnregisterPersistentListener(unityEvent: UnityEngine.Events.UnityEventBase, index: number): void;
  }
}
declare namespace UnityEditor.VersionControl {
  class AssetList {
    constructor();
    constructor(src: UnityEditor.VersionControl.AssetList);
    Add(item: UnityEditor.VersionControl.Asset): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: UnityEditor.VersionControl.Asset, comparer: any): number;
    BinarySearch(item: UnityEditor.VersionControl.Asset): number;
    BinarySearch(item: UnityEditor.VersionControl.Asset, comparer: any): number;
    Clear(): void;
    Contains(item: UnityEditor.VersionControl.Asset): boolean;
    CopyTo(index: number, array: UnityEditor.VersionControl.Asset[], arrayIndex: number, count: number): void;
    CopyTo(array: UnityEditor.VersionControl.Asset[]): void;
    CopyTo(array: UnityEditor.VersionControl.Asset[], arrayIndex: number): void;
    Equals(obj: any): boolean;
    Exists(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): boolean;
    Filter(includeFolder: boolean, states: UnityEditor.VersionControl.Asset.States[]): UnityEditor.VersionControl.AssetList;
    FilterChildren(): UnityEditor.VersionControl.AssetList;
    FilterCount(includeFolder: boolean, states: UnityEditor.VersionControl.Asset.States[]): number;
    Find(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): UnityEditor.VersionControl.Asset;
    FindAll(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): UnityEditor.VersionControl.Asset[];
    FindIndex(startIndex: number, count: number, match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    FindIndex(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    FindLast(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): UnityEditor.VersionControl.Asset;
    FindLastIndex(startIndex: number, count: number, match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    FindLastIndex(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    ForEach(action: ((obj: UnityEditor.VersionControl.Asset) => void)): void;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetRange(index: number, count: number): UnityEditor.VersionControl.Asset[];
    GetType(): any;
    IndexOf(item: UnityEditor.VersionControl.Asset): number;
    IndexOf(item: UnityEditor.VersionControl.Asset, index: number): number;
    IndexOf(item: UnityEditor.VersionControl.Asset, index: number, count: number): number;
    Insert(index: number, item: UnityEditor.VersionControl.Asset): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEditor.VersionControl.Asset): number;
    LastIndexOf(item: UnityEditor.VersionControl.Asset, index: number): number;
    LastIndexOf(item: UnityEditor.VersionControl.Asset, index: number, count: number): number;
    Remove(item: UnityEditor.VersionControl.Asset): boolean;
    RemoveAll(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: UnityEditor.VersionControl.Asset, y: UnityEditor.VersionControl.Asset) => number)): void;
    ToArray(): UnityEditor.VersionControl.Asset[];
    ToString(): string;
    TrimExcess(): void;
    TrueForAll(match: ((obj: UnityEditor.VersionControl.Asset) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEditor.VersionControl.Asset;
    set_Item(index: number, value: UnityEditor.VersionControl.Asset): void;
  }
}
declare namespace System.Collections.Generic {
  class List<T> extends System.Object {
    constructor();
    constructor(capacity: number);
    constructor(collection: any);
    Add(item: T): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: T, comparer: any): number;
    BinarySearch(item: T): number;
    BinarySearch(item: T, comparer: any): number;
    Clear(): void;
    Contains(item: T): boolean;
    CopyTo(index: number, array: T[], arrayIndex: number, count: number): void;
    CopyTo(array: T[]): void;
    CopyTo(array: T[], arrayIndex: number): void;
    Exists(match: ((obj: T) => boolean)): boolean;
    Find(match: ((obj: T) => boolean)): T;
    FindAll(match: ((obj: T) => boolean)): T[];
    FindIndex(startIndex: number, count: number, match: ((obj: T) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: T) => boolean)): number;
    FindIndex(match: ((obj: T) => boolean)): number;
    FindLast(match: ((obj: T) => boolean)): T;
    FindLastIndex(startIndex: number, count: number, match: ((obj: T) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: T) => boolean)): number;
    FindLastIndex(match: ((obj: T) => boolean)): number;
    ForEach(action: ((obj: T) => void)): void;
    GetEnumerator(): any;
    GetRange(index: number, count: number): T[];
    IndexOf(item: T): number;
    IndexOf(item: T, index: number): number;
    IndexOf(item: T, index: number, count: number): number;
    Insert(index: number, item: T): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: T): number;
    LastIndexOf(item: T, index: number): number;
    LastIndexOf(item: T, index: number, count: number): number;
    Remove(item: T): boolean;
    RemoveAll(match: ((obj: T) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: T, y: T) => number)): void;
    ToArray(): T[];
    TrimExcess(): void;
    TrueForAll(match: ((obj: T) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): T;
    set_Item(index: number, value: T): void;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class AssetModificationHook extends System.Object {
    constructor();
    static IsOpenForEdit(assetPath: string, message: any, statusOptions: UnityEditor.StatusQueryOptions): boolean;
    static OnWillDeleteAsset(assetPath: string, option: UnityEditor.RemoveAssetOptions): UnityEditor.AssetDeleteResult;
    static OnWillMoveAsset(from: string, to: string): UnityEditor.AssetMoveResult;
  }
}
declare namespace UnityEditor.VersionControl {
  class ChangeSets {
    constructor();
    Add(item: UnityEditor.VersionControl.ChangeSet): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: UnityEditor.VersionControl.ChangeSet, comparer: any): number;
    BinarySearch(item: UnityEditor.VersionControl.ChangeSet): number;
    BinarySearch(item: UnityEditor.VersionControl.ChangeSet, comparer: any): number;
    Clear(): void;
    Contains(item: UnityEditor.VersionControl.ChangeSet): boolean;
    CopyTo(index: number, array: UnityEditor.VersionControl.ChangeSet[], arrayIndex: number, count: number): void;
    CopyTo(array: UnityEditor.VersionControl.ChangeSet[]): void;
    CopyTo(array: UnityEditor.VersionControl.ChangeSet[], arrayIndex: number): void;
    Equals(obj: any): boolean;
    Exists(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): boolean;
    Find(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): UnityEditor.VersionControl.ChangeSet;
    FindAll(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): UnityEditor.VersionControl.ChangeSet[];
    FindIndex(startIndex: number, count: number, match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindIndex(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindLast(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): UnityEditor.VersionControl.ChangeSet;
    FindLastIndex(startIndex: number, count: number, match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindLastIndex(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    ForEach(action: ((obj: UnityEditor.VersionControl.ChangeSet) => void)): void;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetRange(index: number, count: number): UnityEditor.VersionControl.ChangeSet[];
    GetType(): any;
    IndexOf(item: UnityEditor.VersionControl.ChangeSet): number;
    IndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number): number;
    IndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number, count: number): number;
    Insert(index: number, item: UnityEditor.VersionControl.ChangeSet): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEditor.VersionControl.ChangeSet): number;
    LastIndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number): number;
    LastIndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number, count: number): number;
    Remove(item: UnityEditor.VersionControl.ChangeSet): boolean;
    RemoveAll(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: UnityEditor.VersionControl.ChangeSet, y: UnityEditor.VersionControl.ChangeSet) => number)): void;
    ToArray(): UnityEditor.VersionControl.ChangeSet[];
    ToString(): string;
    TrimExcess(): void;
    TrueForAll(match: ((obj: UnityEditor.VersionControl.ChangeSet) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEditor.VersionControl.ChangeSet;
    set_Item(index: number, value: UnityEditor.VersionControl.ChangeSet): void;
  }
}
declare namespace UnityEditor.VersionControl {
  class CheckoutMode extends System.Enum {
    protected constructor();
    static Asset: UnityEditor.VersionControl.CheckoutMode;
    static Both: UnityEditor.VersionControl.CheckoutMode;
    static Exact: UnityEditor.VersionControl.CheckoutMode;
    static Meta: UnityEditor.VersionControl.CheckoutMode;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class ResolveMethod extends System.Enum {
    protected constructor();
    static UseMerged: UnityEditor.VersionControl.ResolveMethod;
    static UseMine: UnityEditor.VersionControl.ResolveMethod;
    static UseTheirs: UnityEditor.VersionControl.ResolveMethod;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class MergeMethod extends System.Enum {
    protected constructor();
    static MergeAll: UnityEditor.VersionControl.MergeMethod;
    static MergeNonConflicting: UnityEditor.VersionControl.MergeMethod;
    static MergeNone: UnityEditor.VersionControl.MergeMethod;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class OnlineState extends System.Enum {
    protected constructor();
    static Offline: UnityEditor.VersionControl.OnlineState;
    static Online: UnityEditor.VersionControl.OnlineState;
    static Updating: UnityEditor.VersionControl.OnlineState;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class RevertMode extends System.Enum {
    protected constructor();
    static KeepModifications: UnityEditor.VersionControl.RevertMode;
    static Normal: UnityEditor.VersionControl.RevertMode;
    static Unchanged: UnityEditor.VersionControl.RevertMode;
    value__: number;
  }
}
declare namespace UnityEditor.VersionControl {
  class FileMode extends System.Enum {
    protected constructor();
    static Binary: UnityEditor.VersionControl.FileMode;
    static None: UnityEditor.VersionControl.FileMode;
    static Text: UnityEditor.VersionControl.FileMode;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ListControl extends System.Object {
    constructor();
    Add(parent: UnityEditorInternal.VersionControl.ListItem, name: string, asset: UnityEditor.VersionControl.Asset): UnityEditorInternal.VersionControl.ListItem;
    Add(parent: UnityEditorInternal.VersionControl.ListItem, name: string, change: UnityEditor.VersionControl.ChangeSet): UnityEditorInternal.VersionControl.ListItem;
    Clear(): void;
    FindItemWithIdentifier(identifier: number): UnityEditorInternal.VersionControl.ListItem;
    static FromID(id: number): UnityEditorInternal.VersionControl.ListControl;
    OnGUI(area: any, focus: boolean): boolean;
    Refresh(): void;
    Refresh(updateExpanded: boolean): void;
    SelectedAdd(item: UnityEditorInternal.VersionControl.ListItem): void;
    SelectedAll(): void;
    SelectedSet(item: UnityEditorInternal.VersionControl.ListItem): void;
    Sync(): void;
    ActionEvent: ((item: UnityEditorInternal.VersionControl.ListItem, actionIdx: number) => void);
    DragAcceptOnly: boolean;
    DragEvent: ((target: UnityEditor.VersionControl.ChangeSet) => void);
    readonly EmptyChangeSets: UnityEditor.VersionControl.ChangeSets;
    ExpandEvent: ((expand: UnityEditor.VersionControl.ChangeSet, item: UnityEditorInternal.VersionControl.ListItem) => void);
    readonly listState: UnityEditorInternal.VersionControl.ListControl.ListState;
    MenuDefault: string;
    MenuFolder: string;
    ReadOnly: boolean;
    readonly Root: UnityEditorInternal.VersionControl.ListItem;
    readonly SelectedAssets: UnityEditor.VersionControl.AssetList;
    readonly SelectedChangeSets: UnityEditor.VersionControl.ChangeSets;
    readonly Size: number;
  }
}
declare namespace UnityEditorInternal.VersionControl.ListControl {
  class SelectDirection extends System.Enum {
    protected constructor();
    static Current: UnityEditorInternal.VersionControl.ListControl.SelectDirection;
    static Down: UnityEditorInternal.VersionControl.ListControl.SelectDirection;
    static Up: UnityEditorInternal.VersionControl.ListControl.SelectDirection;
    value__: number;
  }
}
declare namespace UnityEditorInternal.VersionControl.ListControl {
  class ListState extends System.Object {
    constructor();
    Expanded: string[];
    Scroll: number;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ListItem extends System.Object {
    constructor();
    Add(listItem: UnityEditorInternal.VersionControl.ListItem): void;
    Clear(): void;
    FindWithIdentifierRecurse(inIdentifier: number): UnityEditorInternal.VersionControl.ListItem;
    HasPath(): boolean;
    IsChildOf(listItem: UnityEditorInternal.VersionControl.ListItem): boolean;
    Remove(listItem: UnityEditorInternal.VersionControl.ListItem): boolean;
    RemoveAll(): void;
    Actions: string[];
    Asset: UnityEditor.VersionControl.Asset;
    CanAccept: boolean;
    readonly CanExpand: boolean;
    Change: UnityEditor.VersionControl.ChangeSet;
    readonly ChildCount: number;
    Dummy: boolean;
    Exclusive: boolean;
    Expanded: boolean;
    readonly FirstChild: UnityEditorInternal.VersionControl.ListItem;
    readonly HasActions: boolean;
    readonly HasChildren: boolean;
    Hidden: boolean;
    Icon: any;
    readonly Identifier: number;
    Indent: number;
    Item: any;
    readonly LastChild: UnityEditorInternal.VersionControl.ListItem;
    Name: string;
    readonly Next: UnityEditorInternal.VersionControl.ListItem;
    readonly NextOpen: UnityEditorInternal.VersionControl.ListItem;
    readonly NextOpenSkip: UnityEditorInternal.VersionControl.ListItem;
    readonly NextOpenVisible: UnityEditorInternal.VersionControl.ListItem;
    readonly OpenCount: number;
    readonly Parent: UnityEditorInternal.VersionControl.ListItem;
    readonly Prev: UnityEditorInternal.VersionControl.ListItem;
    readonly PrevOpen: UnityEditorInternal.VersionControl.ListItem;
    readonly PrevOpenSkip: UnityEditorInternal.VersionControl.ListItem;
    readonly PrevOpenVisible: UnityEditorInternal.VersionControl.ListItem;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ChangeSetContextMenu extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class PendingWindowContextMenu extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ProjectContextMenu extends System.Object {
    constructor();
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class Overlay extends System.Object {
    constructor();
    static DrawOverlay(asset: UnityEditor.VersionControl.Asset, metaAsset: UnityEditor.VersionControl.Asset, itemRect: any): void;
    static DrawOverlay(asset: UnityEditor.VersionControl.Asset, itemRect: any): void;
    static GetOverlayRect(itemRect: any): any;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ProjectHooks extends System.Object {
    constructor();
    static GetOverlayRect(drawRect: any): any;
    static OnProjectWindowItem(guid: string, drawRect: any): void;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowChange extends UnityEditor.EditorWindow {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    static Open(list: UnityEditor.VersionControl.AssetList, submit: boolean): void;
    static Open(change: UnityEditor.VersionControl.ChangeSet, assets: UnityEditor.VersionControl.AssetList, submit: boolean): void;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowCheckoutFailure extends UnityEditor.EditorWindow {
    constructor();
    OnEnable(): void;
    OnGUI(): void;
    static OpenIfCheckoutFailed(assets: UnityEditor.VersionControl.AssetList): void;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowPending extends UnityEditor.EditorWindow {
    constructor();
    static CloseAllWindows(): void;
    static ExpandLatestChangeSet(): void;
    OnSelectionChange(): void;
    static OnStatusUpdated(): void;
    static UpdateAllWindows(): void;
  }
}
declare namespace UnityEditor.VersionControl.WindowPending {
  class Styles extends System.Object {
    constructor();
    bottomBarBg: any;
    box: any;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowResolve extends UnityEditor.EditorWindow {
    constructor();
    OnDisable(): void;
    OnEnable(): void;
    static Open(assets: UnityEditor.VersionControl.AssetList): void;
    static Open(change: UnityEditor.VersionControl.ChangeSet): void;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowRevert extends UnityEditor.EditorWindow {
    constructor();
    OnEnable(): void;
    static Open(assets: UnityEditor.VersionControl.AssetList): void;
    static Open(change: UnityEditor.VersionControl.ChangeSet): void;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class ISolutionSynchronizationSettings {
    protected constructor();
    GetProjectFooterTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    GetProjectHeaderTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    readonly Defines: string[];
    readonly EditorAssemblyPath: string;
    readonly EngineAssemblyPath: string;
    readonly MonoLibFolder: string;
    readonly SolutionProjectConfigurationTemplate: string;
    readonly SolutionProjectEntryTemplate: string;
    readonly SolutionTemplate: string;
    readonly VisualStudioVersion: number;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class VSCodeTemplates extends System.Object {
    protected constructor();
    static SettingsJson: string;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class ScriptingLanguage extends System.Enum {
    protected constructor();
    static Boo: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    static CSharp: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    static None: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    static UnityScript: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    value__: number;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class SolutionSynchronizer extends System.Object {
    constructor(projectDirectory: string, settings: UnityEditor.VisualStudioIntegration.ISolutionSynchronizationSettings);
    constructor(projectDirectory: string);
    static GetProjectExtension(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    static IsManagedAssembly(file: string): boolean;
    ProjectExists(island: UnityEditor.Scripting.MonoIsland): boolean;
    ProjectFile(island: UnityEditor.Scripting.MonoIsland): string;
    ShouldFileBePartOfSolution(file: string): boolean;
    SolutionExists(): boolean;
    Sync(): void;
    SyncIfNeeded(affectedFiles: any): boolean;
    static DefaultSynchronizationSettings: UnityEditor.VisualStudioIntegration.ISolutionSynchronizationSettings;
    static MSBuildNamespaceUri: string;
    static scriptReferenceExpression: any;
  }
}
declare namespace UnityEditor.VisualStudioIntegration.SolutionSynchronizer {
  class Mode extends System.Enum {
    protected constructor();
    static UnityScriptAsPrecompiledAssembly: UnityEditor.VisualStudioIntegration.SolutionSynchronizer.Mode;
    static UnityScriptAsUnityProj: UnityEditor.VisualStudioIntegration.SolutionSynchronizer.Mode;
    value__: number;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class SolutionGuidGenerator extends System.Object {
    protected constructor();
    static GuidForProject(projectName: string): string;
    static GuidForSolution(projectName: string, sourceFileExtension: string): string;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class UnityVSSupport extends System.Object {
    constructor();
    static GetAboutWindowLabel(): string;
    static Initialize(): void;
    static Initialize(editorPath: string): void;
    static InitializeUnityVSSupport(): void;
    static IsUnityVSEnabled(): boolean;
    static ScriptEditorChanged(editorPath: string): void;
    static ShouldUnityVSBeActive(): boolean;
    static s_UnityVSBridgeToLoad: string;
  }
}
declare namespace UnityEditor.Web {
  class WebViewTestFunctions extends System.Object {
    constructor();
    AcceptBool(passedBool: boolean): void;
    AcceptBoolArray(passedArray: boolean[]): void;
    AcceptInt(passedInt: number): void;
    AcceptIntArray(passedArray: number[]): void;
    AcceptString(passedString: string): void;
    AcceptStringArray(passedArray: string[]): void;
    AcceptTestObject(passedObject: UnityEditor.Web.TestObject): void;
    ArrayReverse(input: string[]): string[];
    LogMessage(message: string): void;
    ReturnBool(): boolean;
    ReturnBoolArray(): boolean[];
    ReturnInt(): number;
    ReturnNumberArray(): number[];
    ReturnObject(): UnityEditor.Web.TestObject;
    ReturnString(): string;
    ReturnStringArray(): string[];
    static RunTestScript(path: string): void;
    VoidMethod(logMessage: string): void;
  }
}
declare namespace UnityEditor.Web {
  class TestObject extends System.Object {
    constructor();
    BoolProperty: boolean;
    NumberProperty: number;
    StringProperty: string;
  }
}
declare namespace UnityEditor {
  class ProfilerChoise extends System.ValueType {
    protected constructor();
    ConnectTo: (() => void);
    Enabled: boolean;
    IsSelected: (() => boolean);
    Name: string;
  }
}
declare namespace UnityEditor {
  class AttachProfilerUI extends System.Object {
    constructor();
    static DirectIPConnect(ip: string): void;
    static DirectURLConnect(url: string): void;
    GetConnectedProfiler(): string;
    IsEditor(): boolean;
    OnGUI(connectRect: any, profilerLabel: any): void;
    OnGUILayout(window: UnityEditor.EditorWindow): void;
  }
}
declare namespace UnityEditor {
  class ProfilerIPWindow extends UnityEditor.EditorWindow {
    constructor();
    static GetLastIPString(): string;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    static Show(buttonScreenRect: any): void;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupInfoWrapper extends System.Object {
    constructor(info: UnityEditorInternal.AudioProfilerGroupInfo, assetName: string, objectName: string, addToRoot: boolean);
    addToRoot: boolean;
    assetName: string;
    info: UnityEditorInternal.AudioProfilerGroupInfo;
    objectName: string;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupInfoHelper extends System.Object {
    constructor();
    static GetColumnString(info: UnityEditorInternal.AudioProfilerGroupInfoWrapper, index: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices): string;
    static GetLastColumnIndex(): number;
    static AUDIOPROFILER_FLAGS_3D: number;
    static AUDIOPROFILER_FLAGS_COMPRESSED: number;
    static AUDIOPROFILER_FLAGS_GROUP: number;
    static AUDIOPROFILER_FLAGS_ISSPATIAL: number;
    static AUDIOPROFILER_FLAGS_LOOPED: number;
    static AUDIOPROFILER_FLAGS_MUTED: number;
    static AUDIOPROFILER_FLAGS_NONBLOCKING: number;
    static AUDIOPROFILER_FLAGS_ONESHOT: number;
    static AUDIOPROFILER_FLAGS_OPENMEMORY: number;
    static AUDIOPROFILER_FLAGS_OPENMEMORYPOINT: number;
    static AUDIOPROFILER_FLAGS_OPENUSER: number;
    static AUDIOPROFILER_FLAGS_PAUSED: number;
    static AUDIOPROFILER_FLAGS_STREAM: number;
    static AUDIOPROFILER_FLAGS_VIRTUAL: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupInfoHelper {
  class ColumnIndices extends System.Enum {
    protected constructor();
    static _LastColumn: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static AssetName: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Audibility: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static DistanceToListener: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Duration: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Frequency: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Is3D: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsCompressed: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsLooped: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsMuted: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsNonBlocking: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOneShot: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOpenMemory: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOpenMemoryPoint: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOpenUser: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsPaused: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsStream: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsVirtual: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static MaxDist: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static MinDist: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static ObjectName: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static PlayCount: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Time: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    value__: number;
    static Volume: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupInfoHelper {
  class AudioProfilerGroupInfoComparer extends System.Object {
    constructor(primarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices, secondarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices, sortByDescendingOrder: boolean);
    Compare(a: UnityEditorInternal.AudioProfilerGroupInfoWrapper, b: UnityEditorInternal.AudioProfilerGroupInfoWrapper): number;
    primarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    secondarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    sortByDescendingOrder: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupViewBackend extends System.Object {
    constructor(state: UnityEditorInternal.AudioProfilerGroupTreeViewState);
    SetData(data: UnityEditorInternal.AudioProfilerGroupInfoWrapper[]): void;
    UpdateSorting(): void;
    readonly items: UnityEditorInternal.AudioProfilerGroupInfoWrapper[];
    m_TreeViewState: UnityEditorInternal.AudioProfilerGroupTreeViewState;
    OnUpdate: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupTreeViewState extends UnityEditor.IMGUI.Controls.TreeViewState {
    constructor();
    SetSelectedColumn(index: number): void;
    columnWidths: number[];
    prevSelectedColumn: number;
    selectedColumn: number;
    sortByDescendingOrder: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupView extends System.Object {
    constructor(editorWindow: UnityEditor.EditorWindow, state: UnityEditorInternal.AudioProfilerGroupTreeViewState);
    GetNumItemsInData(): number;
    Init(rect: any, backend: UnityEditorInternal.AudioProfilerGroupViewBackend): void;
    OnGUI(rect: any, allowSorting: boolean): void;
    OnTreeSelectionChanged(selection: number[]): void;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerGroupTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, info: UnityEditorInternal.AudioProfilerGroupInfoWrapper);
    info: UnityEditorInternal.AudioProfilerGroupInfoWrapper;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, backend: UnityEditorInternal.AudioProfilerGroupViewBackend);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerGroupViewColumnHeader extends System.Object {
    constructor(state: UnityEditorInternal.AudioProfilerGroupTreeViewState, backend: UnityEditorInternal.AudioProfilerGroupViewBackend);
    OnGUI(rect: any, allowSorting: boolean, headerStyle: any): void;
    columnWidths: number[];
    dragWidth: number;
    minColumnWidth: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerGroupViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    GetTotalSize(): any;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerDSPView extends System.Object {
    constructor();
    OnGUI(clippingRect: any, property: UnityEditorInternal.ProfilerProperty, showInactiveDSPChains: boolean, highlightAudibleDSPChains: boolean, zoomFactor: any, scrollPos: any): void;
  }
}
declare namespace UnityEditorInternal.AudioProfilerDSPView {
  class AudioProfilerDSPNode extends System.Object {
    constructor(firstTarget: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode, info: UnityEditorInternal.AudioProfilerDSPInfo, x: number, y: number, level: number);
    audible: boolean;
    firstTarget: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode;
    info: UnityEditorInternal.AudioProfilerDSPInfo;
    level: number;
    maxY: number;
    targetPort: number;
    x: number;
    y: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerDSPView {
  class AudioProfilerDSPWire extends System.Object {
    constructor(source: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode, target: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode, info: UnityEditorInternal.AudioProfilerDSPInfo);
    info: UnityEditorInternal.AudioProfilerDSPInfo;
    source: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode;
    target: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode;
    targetPort: number;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipInfoWrapper extends System.Object {
    constructor(info: UnityEditorInternal.AudioProfilerClipInfo, assetName: string);
    assetName: string;
    info: UnityEditorInternal.AudioProfilerClipInfo;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipInfoHelper extends System.Object {
    constructor();
    static GetColumnString(info: UnityEditorInternal.AudioProfilerClipInfoWrapper, index: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices): string;
    static GetLastColumnIndex(): number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipInfoHelper {
  class ColumnIndices extends System.Enum {
    protected constructor();
    static _LastColumn: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static Age: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static AssetName: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static Disposed: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static InternalLoadState: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static LoadState: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static NumChannelInstances: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    value__: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipInfoHelper {
  class AudioProfilerClipInfoComparer extends System.Object {
    constructor(primarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices, secondarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices, sortByDescendingOrder: boolean);
    Compare(a: UnityEditorInternal.AudioProfilerClipInfoWrapper, b: UnityEditorInternal.AudioProfilerClipInfoWrapper): number;
    primarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    secondarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    sortByDescendingOrder: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipViewBackend extends System.Object {
    constructor(state: UnityEditorInternal.AudioProfilerClipTreeViewState);
    SetData(data: UnityEditorInternal.AudioProfilerClipInfoWrapper[]): void;
    UpdateSorting(): void;
    readonly items: UnityEditorInternal.AudioProfilerClipInfoWrapper[];
    m_TreeViewState: UnityEditorInternal.AudioProfilerClipTreeViewState;
    OnUpdate: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipTreeViewState extends UnityEditor.IMGUI.Controls.TreeViewState {
    constructor();
    SetSelectedColumn(index: number): void;
    columnWidths: number[];
    prevSelectedColumn: number;
    selectedColumn: number;
    sortByDescendingOrder: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipView extends System.Object {
    constructor(editorWindow: UnityEditor.EditorWindow, state: UnityEditorInternal.AudioProfilerClipTreeViewState);
    GetNumItemsInData(): number;
    Init(rect: any, backend: UnityEditorInternal.AudioProfilerClipViewBackend): void;
    OnGUI(rect: any): void;
    OnTreeSelectionChanged(selection: number[]): void;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerClipTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, info: UnityEditorInternal.AudioProfilerClipInfoWrapper);
    info: UnityEditorInternal.AudioProfilerClipInfoWrapper;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, backend: UnityEditorInternal.AudioProfilerClipViewBackend);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerClipViewColumnHeader extends System.Object {
    constructor(state: UnityEditorInternal.AudioProfilerClipTreeViewState, backend: UnityEditorInternal.AudioProfilerClipViewBackend);
    OnGUI(rect: any, allowSorting: boolean, headerStyle: any): void;
    columnWidths: number[];
    dragWidth: number;
    minColumnWidth: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerClipViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    GetTotalSize(): any;
  }
}
declare namespace UnityEditorInternal {
  class Chart extends System.Object {
    constructor();
    DoGUI(type: UnityEditorInternal.Chart.ChartType, selectedFrame: number, cdata: UnityEditorInternal.ChartViewData, active: boolean): number;
    LoadAndBindSettings(chartSettingsName: string, cdata: UnityEditorInternal.ChartViewData): void;
    OnLostFocus(): void;
    labelRange: any;
    legendHeaderLabel: any;
    static kSideWidth: number;
    m_NotSupportedWarning: string;
  }
}
declare namespace UnityEditorInternal.Chart {
  class ChartType extends System.Enum {
    protected constructor();
    static Line: UnityEditorInternal.Chart.ChartType;
    static StackedFill: UnityEditorInternal.Chart.ChartType;
    value__: number;
  }
}
declare namespace UnityEditorInternal.Chart {
  class Styles extends System.Object {
    protected constructor();
    static background: any;
    static closeButton: any;
    static labelDropShadowOpacity: number;
    static labelLerpToWhiteAmount: number;
    static legendBackground: any;
    static legendHeaderLabel: any;
    static rightPane: any;
    static selectedFrameColor1: any;
    static selectedFrameColor2: any;
    static selectedLabel: any;
    static seriesDragHandle: any;
    static seriesLabel: any;
    static whiteLabel: any;
  }
}
declare namespace UnityEditorInternal.Chart {
  class LabelLayoutData extends System.ValueType {
    protected constructor();
    desiredYPosition: number;
    position: any;
  }
}
declare namespace UnityEditorInternal {
  class ChartSeriesViewData extends System.Object {
    constructor(name: string, numDataPoints: number, color: any);
    readonly color: any;
    readonly name: string;
    readonly numDataPoints: number;
    rangeAxis: any;
    readonly xValues: number[];
    readonly yValues: number[];
    enabled: boolean;
  }
}
declare namespace UnityEditorInternal {
  class ChartViewData extends System.Object {
    constructor();
    Assign(series: UnityEditorInternal.ChartSeriesViewData[], firstFrame: number, firstSelectableFrame: number): void;
    AssignSelectedLabels(selectedLabels: string[]): void;
    GetDataDomain(): any;
    SetGrid(grid: number[], labels: string[]): void;
    readonly chartDomainOffset: number;
    readonly firstSelectableFrame: number;
    readonly grid: number[];
    readonly gridLabels: string[];
    hasOverlay: boolean;
    maxValue: number;
    readonly numSeries: number;
    readonly order: number[];
    readonly overlays: UnityEditorInternal.ChartSeriesViewData[];
    readonly selectedLabels: string[];
    readonly series: UnityEditorInternal.ChartSeriesViewData[];
  }
}
declare namespace UnityEditorInternal {
  class IProfilerWindowController {
    protected constructor();
    ClearSelectedPropertyPath(): void;
    GetActiveVisibleFrameIndex(): number;
    GetRootProfilerProperty(sortType: UnityEditorInternal.ProfilerColumn): UnityEditorInternal.ProfilerProperty;
    GetSearch(): string;
    IsSearching(): boolean;
    Repaint(): void;
    SetSearch(searchString: string): void;
    SetSelectedPropertyPath(path: string): void;
  }
}
declare namespace UnityEditor {
  class ObjectInfo extends System.Object {
    constructor();
    className: string;
    instanceId: number;
    memorySize: number;
    name: string;
    reason: number;
    referencedBy: UnityEditor.ObjectInfo[];
  }
}
declare namespace UnityEditor {
  class MemoryElement extends System.Object {
    constructor();
    constructor(n: string);
    constructor(memInfo: UnityEditor.ObjectInfo, finalize: boolean);
    constructor(n: string, groups: UnityEditor.MemoryElement[]);
    AccumulatedChildCount(): number;
    AddChild(node: UnityEditor.MemoryElement): void;
    ChildCount(): number;
    ExpandChildren(): void;
    FirstChild(): UnityEditor.MemoryElement;
    GetChildIndexInList(): number;
    GetNextNode(): UnityEditor.MemoryElement;
    GetPrevNode(): UnityEditor.MemoryElement;
    GetRoot(): UnityEditor.MemoryElement;
    LastChild(): UnityEditor.MemoryElement;
    ReferenceCount(): number;
    children: UnityEditor.MemoryElement[];
    description: string;
    expanded: boolean;
    memoryInfo: UnityEditor.ObjectInfo;
    name: string;
    parent: UnityEditor.MemoryElement;
    totalChildCount: number;
    totalMemory: number;
  }
}
declare namespace UnityEditor {
  class MemoryElementSelection extends System.Object {
    constructor();
    ClearSelection(): void;
    isSelected(node: UnityEditor.MemoryElement): boolean;
    MoveDown(): void;
    MoveFirst(): void;
    MoveLast(): void;
    MoveParent(): void;
    MoveUp(): void;
    SetSelection(node: UnityEditor.MemoryElement): void;
    readonly Selected: UnityEditor.MemoryElement;
  }
}
declare namespace UnityEditor {
  class MemoryElementDataManager extends System.Object {
    constructor();
    static GetTreeRoot(memoryObjectList: UnityEditorInternal.ObjectMemoryInfo[], referencesIndices: number[]): UnityEditor.MemoryElement;
  }
}
declare namespace UnityEditor.MemoryElementDataManager {
  class ObjectTypeFilter extends System.Enum {
    protected constructor();
    static Asset: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static BuiltinResource: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static DontSave: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static Other: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static Scene: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    value__: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class MemorySnapshot extends System.Object {
    protected constructor();
    static RequestNewSnapshot(): void;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedMemorySnapshot extends System.Object {
    protected constructor();
    readonly connections: UnityEditor.MemoryProfiler.Connection[];
    readonly gcHandles: UnityEditor.MemoryProfiler.PackedGCHandle[];
    readonly managedHeapSections: UnityEditor.MemoryProfiler.MemorySection[];
    readonly nativeObjects: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject[];
    readonly nativeTypes: UnityEditor.MemoryProfiler.PackedNativeType[];
    readonly typeDescriptions: UnityEditor.MemoryProfiler.TypeDescription[];
    readonly virtualMachineInformation: UnityEditor.MemoryProfiler.VirtualMachineInformation;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedNativeType extends System.ValueType {
    protected constructor();
    readonly baseClassId: number;
    readonly name: string;
    readonly nativeBaseTypeArrayIndex: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedNativeUnityEngineObject extends System.ValueType {
    protected constructor();
    readonly classId: number;
    readonly hideFlags: any;
    readonly instanceId: number;
    readonly isDontDestroyOnLoad: boolean;
    readonly isManager: boolean;
    readonly isPersistent: boolean;
    readonly name: string;
    readonly nativeObjectAddress: number;
    readonly nativeTypeArrayIndex: number;
    readonly size: number;
  }
}
declare namespace UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject {
  class ObjectFlags extends System.Enum {
    protected constructor();
    static IsDontDestroyOnLoad: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags;
    static IsManager: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags;
    static IsPersistent: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags;
    value__: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedGCHandle extends System.ValueType {
    protected constructor();
    readonly target: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class Connection extends System.ValueType {
    protected constructor();
    from: number;
    to: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class MemorySection extends System.ValueType {
    protected constructor();
    readonly bytes: number[];
    readonly startAddress: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class VirtualMachineInformation extends System.ValueType {
    protected constructor();
    readonly allocationGranularity: number;
    readonly arrayBoundsOffsetInHeader: number;
    readonly arrayHeaderSize: number;
    readonly arraySizeOffsetInHeader: number;
    readonly heapFormatVersion: number;
    readonly objectHeaderSize: number;
    readonly pointerSize: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class TypeDescription extends System.ValueType {
    protected constructor();
    readonly arrayRank: number;
    readonly assembly: string;
    readonly baseOrElementTypeIndex: number;
    readonly fields: UnityEditor.MemoryProfiler.FieldDescription[];
    readonly isArray: boolean;
    readonly isValueType: boolean;
    readonly name: string;
    readonly size: number;
    readonly staticFieldBytes: number[];
    readonly typeIndex: number;
    readonly typeInfoAddress: number;
  }
}
declare namespace UnityEditor.MemoryProfiler.TypeDescription {
  class TypeFlags extends System.Enum {
    protected constructor();
    static kArray: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    static kArrayRankMask: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    static kNone: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    static kValueType: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    value__: number;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class FieldDescription extends System.ValueType {
    protected constructor();
    readonly isStatic: boolean;
    readonly name: string;
    readonly offset: number;
    readonly typeIndex: number;
  }
}
declare namespace UnityEditor {
  class MemoryTreeList extends System.Object {
    constructor(editorWindow: UnityEditor.EditorWindow, detailview: UnityEditor.MemoryTreeList);
    GetRoot(): UnityEditor.MemoryElement;
    OnGUI(): void;
    SetRoot(root: UnityEditor.MemoryElement): void;
    RequiresRefresh: boolean;
    m_MemorySelection: UnityEditor.MemoryElementSelection;
  }
}
declare namespace UnityEditor.MemoryTreeList {
  class Styles extends System.Object {
    constructor();
    background: any;
    entryEven: any;
    entryOdd: any;
    foldout: any;
    header: any;
    numberLabel: any;
  }
}
declare namespace UnityEditor {
  class MemoryTreeListClickable extends UnityEditor.MemoryTreeList {
    constructor(editorWindow: UnityEditor.EditorWindow, detailview: UnityEditor.MemoryTreeList);
  }
}
declare namespace UnityEditor {
  class NetworkDetailStats extends System.Object {
    constructor();
    static IncrementStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, msgId: number, entryName: string, amount: number): void;
    static NewProfilerTick(newTime: number): void;
    static ResetAll(): void;
    static SetStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, msgId: number, entryName: string, amount: number): void;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkDirection extends System.Enum {
    protected constructor();
    static Incoming: UnityEditor.NetworkDetailStats.NetworkDirection;
    static Outgoing: UnityEditor.NetworkDetailStats.NetworkDirection;
    value__: number;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkStatsSequence extends System.Object {
    constructor();
    Add(tick: number, amount: number): void;
    GetFiveTick(tick: number): number;
    GetTenTick(tick: number): number;
    NewProfilerTick(tick: number): void;
    MessageTotal: number;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkOperationEntryDetails extends System.Object {
    constructor();
    AddStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, amount: number): void;
    Clear(): void;
    NewProfilerTick(tickId: number): void;
    m_EntryName: string;
    m_IncomingSequence: UnityEditor.NetworkDetailStats.NetworkStatsSequence;
    m_IncomingTotal: number;
    m_OutgoingSequence: UnityEditor.NetworkDetailStats.NetworkStatsSequence;
    m_OutgoingTotal: number;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkOperationDetails extends System.Object {
    constructor();
    Clear(): void;
    IncrementStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, entryName: string, amount: number): void;
    NewProfilerTick(tickId: number): void;
    SetStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, entryName: string, amount: number): void;
    m_Entries: any;
    MsgId: number;
    totalIn: number;
    totalOut: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerChart extends UnityEditorInternal.Chart {
    constructor(area: UnityEditorInternal.ProfilerArea, type: UnityEditorInternal.Chart.ChartType, dataScale: number, seriesCount: number);
    DoChartGUI(currentFrame: number, currentArea: UnityEditorInternal.ProfilerArea): number;
    LoadAndBindSettings(): void;
    LoadAndBindSettings(chartSettingsName: string, cdata: UnityEditorInternal.ChartViewData): void;
    active: boolean;
    m_Area: UnityEditorInternal.ProfilerArea;
    m_Data: UnityEditorInternal.ChartViewData;
    m_DataScale: number;
    m_Series: UnityEditorInternal.ChartSeriesViewData[];
    m_Type: UnityEditorInternal.Chart.ChartType;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerColors extends System.Object {
    constructor();
    static readonly currentColors: any[];
  }
}
declare namespace UnityEditorInternal {
  class ProfilerDetailedCallsView extends UnityEditorInternal.ProfilerDetailedView {
    constructor(mainProfilerHierarchyGUI: UnityEditorInternal.ProfilerHierarchyGUI);
    DoGUI(headerStyle: any, frameIndex: number, viewType: UnityEditorInternal.ProfilerViewType): void;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerDetailedView extends System.Object {
    protected constructor();
    ResetCachedProfilerProperty(): void;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView {
  class CallsData extends System.ValueType {
    protected constructor();
    calls: UnityEditorInternal.ProfilerDetailedCallsView.CallInformation[];
    totalSelectedPropertyTime: number;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView {
  class CallInformation extends System.Object {
    constructor();
    callsCount: number;
    gcAllocBytes: number;
    name: string;
    path: string;
    timePercent: number;
    totalCallTimeMs: number;
    totalSelfTimeMs: number;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView {
  class CallsTreeView extends UnityEditor.IMGUI.Controls.TreeView {
    constructor(type: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Type, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, multicolumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader);
    SetCallsData(callsData: UnityEditorInternal.ProfilerDetailedCallsView.CallsData): void;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView {
  class Type extends System.Enum {
    protected constructor();
    static Callees: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Type;
    static Callers: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Type;
    value__: number;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView {
  class Column extends System.Enum {
    protected constructor();
    static Calls: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Column;
    static Count: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Column;
    static GcAlloc: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Column;
    static Name: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Column;
    static TimeMs: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Column;
    static TimePercent: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Column;
    value__: number;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView {
  class CallsTreeViewController extends System.Object {
    constructor(type: UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeView.Type);
    OnGUI(r: any): void;
    SetCallsData(callsData: UnityEditorInternal.ProfilerDetailedCallsView.CallsData): void;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView.CallsTreeViewController {
  class Styles extends System.Object {
    protected constructor();
    static calleesLabel: any;
    static callersLabel: any;
    static callsLabel: any;
    static gcAllocLabel: any;
    static timeMsCalleesLabel: any;
    static timeMsCallersLabel: any;
    static timePctCalleesLabel: any;
    static timePctCallersLabel: any;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedCallsView {
  class ParentCallInfo extends System.ValueType {
    protected constructor();
    name: string;
    path: string;
    timeMs: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerDetailedObjectsView extends UnityEditorInternal.ProfilerDetailedView {
    constructor(profilerHierarchyGUI: UnityEditorInternal.ProfilerHierarchyGUI, mainProfilerHierarchyGUI: UnityEditorInternal.ProfilerHierarchyGUI);
    DoGUI(headerStyle: any, frameIndex: number, viewType: UnityEditorInternal.ProfilerViewType): void;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedView {
  class CachedProfilerPropertyConfig extends System.ValueType {
    protected constructor();
    EqualsTo(frameIndex: number, viewType: UnityEditorInternal.ProfilerViewType, sortType: UnityEditorInternal.ProfilerColumn): boolean;
    Set(frameIndex: number, viewType: UnityEditorInternal.ProfilerViewType, sortType: UnityEditorInternal.ProfilerColumn): void;
    frameIndex: number;
    propertyPath: string;
    sortType: UnityEditorInternal.ProfilerColumn;
    viewType: UnityEditorInternal.ProfilerViewType;
  }
}
declare namespace UnityEditorInternal.ProfilerDetailedView {
  class Styles extends System.Object {
    protected constructor();
    static emptyText: any;
    static selectLineText: any;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerHierarchyGUI extends System.Object {
    constructor(sort: UnityEditorInternal.ProfilerColumn);
    constructor(window: UnityEditorInternal.IProfilerWindowController, detailedObjectsView: UnityEditorInternal.ProfilerHierarchyGUI, columnSettingsName: string, columnsToShow: UnityEditorInternal.ProfilerColumn[], columnNames: string[], detailPane: boolean, sort: UnityEditorInternal.ProfilerColumn);
    ClearCaches(): void;
    DoGUI(property: UnityEditorInternal.ProfilerProperty, searchString: string, expandAll: boolean): void;
    FrameSelection(): void;
    GetDetailedProperty(): UnityEditorInternal.ProfilerProperty;
    GetRootProperty(): UnityEditorInternal.ProfilerProperty;
    SelectFirstRow(): void;
    SelectPath(path: string): void;
    SetKeyboardFocus(): void;
    Setup(window: UnityEditorInternal.IProfilerWindowController, detailedObjectsView: UnityEditorInternal.ProfilerHierarchyGUI, columnSettingsName: string, columnsToShow: UnityEditorInternal.ProfilerColumn[], columnNames: string[], detailPane: boolean): void;
    readonly detailedCallsView: UnityEditorInternal.ProfilerDetailedCallsView;
    readonly detailedObjectsView: UnityEditorInternal.ProfilerDetailedObjectsView;
    selectedIndex: number;
    readonly sortType: UnityEditorInternal.ProfilerColumn;
  }
}
declare namespace UnityEditorInternal.ProfilerHierarchyGUI {
  class Styles extends System.Object {
    constructor();
    background: any;
    disabledSearchText: any;
    entryEven: any;
    entryOdd: any;
    foldout: any;
    header: any;
    instrumentationIcon: any;
    miniPullDown: any;
    notShowingAllResults: any;
    numberLabel: any;
    rightHeader: any;
  }
}
declare namespace UnityEditorInternal.ProfilerHierarchyGUI {
  class SearchResults extends System.Object {
    constructor();
    Draw(gui: UnityEditorInternal.ProfilerHierarchyGUI, controlID: number): void;
    Filter(property: UnityEditorInternal.ProfilerProperty, columns: UnityEditorInternal.ProfilerColumn[], searchString: string, frameIndex: number, sortType: UnityEditorInternal.ProfilerColumn): void;
    Init(maxNumberSearchResults: number): void;
    MoveSelection(steps: number, gui: UnityEditorInternal.ProfilerHierarchyGUI): void;
    readonly numRows: number;
    selectedSearchIndex: number;
  }
}
declare namespace UnityEditorInternal.ProfilerHierarchyGUI.SearchResults {
  class SearchResult extends System.ValueType {
    protected constructor();
    columnValues: string[];
    propertyPath: string;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerInstrumentationPopup extends UnityEditor.PopupWindowContent {
    constructor(functions: any, showAllCheckbox: boolean, showAutoInstrumemtationParams: boolean);
    static FunctionHasInstrumentationPopup(funcName: string): boolean;
    GetWindowSize(): any;
    OnClose(): void;
    OnGUI(rect: any): void;
    static Show(r: any): void;
    static Show(r: any, funcName: string): void;
    UpdateAllCheckbox(): void;
    static UpdateInstrumentableFunctions(): void;
    static readonly InstrumentationEnabled: boolean;
  }
}
declare namespace UnityEditorInternal.ProfilerInstrumentationPopup {
  class InputData extends UnityEditor.PopupList.InputData {
    constructor();
    BuildQuery(prefix: string): any;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerTimelineGUI extends System.Object {
    constructor(window: UnityEditorInternal.IProfilerWindowController);
    DoGUI(frameIndex: number, width: number, ypos: number, height: number): void;
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class ThreadInfo extends System.Object {
    constructor();
    desiredWeight: number;
    height: number;
    name: string;
    threadIndex: number;
    weight: number;
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class GroupInfo extends System.Object {
    constructor();
    expanded: boolean;
    height: number;
    name: string;
    threads: UnityEditorInternal.ProfilerTimelineGUI.ThreadInfo[];
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class Styles extends System.Object {
    protected constructor();
    background: any;
    bar: any;
    foldout: any;
    leftPane: any;
    profilerGraphBackground: any;
    rightPane: any;
    tooltip: any;
    tooltipArrow: any;
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class EntryInfo extends System.Object {
    constructor();
    Equals(frameId: number, threadId: number, nativeIndex: number): boolean;
    Equals(obj: any): boolean;
    IsValid(): boolean;
    Reset(): void;
    duration: number;
    frameId: number;
    name: string;
    nativeIndex: number;
    relativeYPos: number;
    threadId: number;
    time: number;
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class SelectedEntryInfo extends UnityEditorInternal.ProfilerTimelineGUI.EntryInfo {
    constructor();
    Reset(): void;
    callstackInfo: string;
    instanceCount: number;
    instanceId: number;
    metaData: string;
    totalDuration: number;
  }
}
declare namespace UnityEditor {
  class ProfilerWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    ClearSelectedPropertyPath(): void;
    CreateProperty(): UnityEditorInternal.ProfilerProperty;
    CreateProperty(sortType: UnityEditorInternal.ProfilerColumn): UnityEditorInternal.ProfilerProperty;
    GetActiveVisibleFrameIndex(): number;
    GetRootProfilerProperty(): UnityEditorInternal.ProfilerProperty;
    GetRootProfilerProperty(sortType: UnityEditorInternal.ProfilerColumn): UnityEditorInternal.ProfilerProperty;
    GetSearch(): string;
    IsSearching(): boolean;
    SetSearch(searchString: string): void;
    SetSelectedPropertyPath(path: string): void;
  }
}
declare namespace UnityEditor.ProfilerWindow {
  class Styles extends System.Object {
    protected constructor();
    static accessibilityModeLabel: any;
    static addArea: any;
    static background: any;
    static clearData: any;
    static currentFrame: any;
    static deepProfile: any;
    static detailedPaneTypes: any[];
    static entryEven: any;
    static entryOdd: any;
    static frame: any;
    static frameDebugger: any;
    static gatherObjectReferences: any;
    static header: any;
    static label: any;
    static loadProfilingData: any;
    static memRecord: any;
    static nextFrame: any;
    static noData: any;
    static noFrameDebugger: any;
    static prevFrame: any;
    static profileEditor: any;
    static profilerGraphBackground: any;
    static profilerInstrumentation: any;
    static profilerRecord: any;
    static reasons: any[];
    static saveProfilingData: any;
  }
}
declare namespace UnityEditor.ProfilerWindow {
  class CachedProfilerPropertyConfig extends System.ValueType {
    protected constructor();
    area: UnityEditorInternal.ProfilerArea;
    frameIndex: number;
    sortType: UnityEditorInternal.ProfilerColumn;
    viewType: UnityEditorInternal.ProfilerViewType;
  }
}
declare namespace UnityEditor.ProfilerWindow {
  class HierarchyViewDetailPaneType extends System.Enum {
    protected constructor();
    static CallersAndCallees: UnityEditor.ProfilerWindow.HierarchyViewDetailPaneType;
    static None: UnityEditor.ProfilerWindow.HierarchyViewDetailPaneType;
    static Objects: UnityEditor.ProfilerWindow.HierarchyViewDetailPaneType;
    value__: number;
  }
}
declare namespace UnityEditor {
  class UISystemProfiler extends System.Object {
    constructor();
    CurrentAreaChanged(profilerArea: UnityEditorInternal.ProfilerArea): void;
  }
}
declare namespace UnityEditor.UISystemProfiler {
  class Headers extends UnityEditor.IMGUI.Controls.MultiColumnHeader {
    constructor(state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState);
  }
}
declare namespace UnityEditor.UISystemProfiler {
  class Styles extends System.Object {
    protected constructor();
    static readonly separatorColor: any;
    static background: any;
    static backgroundOptions: any[];
    static backgroundValues: number[];
    static columnHeader: any;
    static columnHeaderCenterAligned: any;
    static columnHeaderRightAligned: any;
    static contentDetachRender: any;
    static entryEven: any;
    static entryOdd: any;
    static header: any;
    static noData: any;
    static rendermodeOptions: any[];
    static rendermodeValues: number[];
    static rightHeader: any;
  }
}
declare namespace UnityEditor.UISystemProfiler.Styles {
  class RenderMode extends System.Enum {
    protected constructor();
    static CompositeOverdraw: UnityEditor.UISystemProfiler.Styles.RenderMode;
    static Overdraw: UnityEditor.UISystemProfiler.Styles.RenderMode;
    static Standard: UnityEditor.UISystemProfiler.Styles.RenderMode;
    value__: number;
  }
}
declare namespace UnityEditor.UISystemProfiler.Styles {
  class PreviewBackgroundType extends System.Enum {
    protected constructor();
    static Black: UnityEditor.UISystemProfiler.Styles.PreviewBackgroundType;
    static Checkerboard: UnityEditor.UISystemProfiler.Styles.PreviewBackgroundType;
    value__: number;
    static White: UnityEditor.UISystemProfiler.Styles.PreviewBackgroundType;
  }
}
declare namespace UnityEditor {
  class UISystemPreviewWindow extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
    profiler: UnityEditor.UISystemProfiler;
  }
}
declare namespace UnityEditor {
  class UISystemProfilerChart extends UnityEditorInternal.ProfilerChart {
    constructor(type: UnityEditorInternal.Chart.ChartType, dataScale: number, seriesCount: number);
    DoChartGUI(currentFrame: number, currentArea: UnityEditorInternal.ProfilerArea): number;
    Update(firstFrame: number, historyLength: number): void;
    showMarkers: boolean;
  }
}
declare namespace UnityEditor {
  class UISystemProfilerRenderService extends System.Object {
    constructor();
    Dispose(): void;
    GetThumbnail(renderDataIndex: number, infoRenderDataCount: number, overdraw: boolean): any;
  }
}
declare namespace UnityEditor.UISystemProfilerRenderService {
  class LRUCache extends System.Object {
    constructor(capacity: number);
    Add(key: number, data: any): void;
    Clear(): void;
    Get(key: number): any;
  }
}
declare namespace UnityEditor {
  class UISystemProfilerTreeView extends UnityEditor.IMGUI.Controls.TreeView {
    constructor(state: UnityEditor.UISystemProfilerTreeView.State, multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader);
    readonly profilerState: UnityEditor.UISystemProfilerTreeView.State;
    property: UnityEditorInternal.ProfilerProperty;
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class State extends UnityEditor.IMGUI.Controls.TreeViewState {
    constructor();
    lastFrame: number;
    profilerWindow: UnityEditor.ProfilerWindow;
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class CanvasBatchComparer extends System.Object {
    constructor();
    Compare(x: UnityEditor.IMGUI.Controls.TreeViewItem, y: UnityEditor.IMGUI.Controls.TreeViewItem): number;
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class RootTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor();
    gameObjectCount: number;
    totalBatchCount: number;
    totalVertexCount: number;
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class BaseTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    protected constructor();
    info: UnityEditorInternal.UISystemProfilerInfo;
    renderDataIndex: number;
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class CanvasTreeViewItem extends UnityEditor.UISystemProfilerTreeView.BaseTreeViewItem {
    constructor(info: UnityEditorInternal.UISystemProfilerInfo, depth: number, displayName: string);
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class BatchTreeViewItem extends UnityEditor.UISystemProfilerTreeView.BaseTreeViewItem {
    constructor(info: UnityEditorInternal.UISystemProfilerInfo, depth: number, displayName: string, allBatchesInstanceIDs: number[]);
    instanceIDs: number[];
  }
}
declare namespace UnityEditor.UISystemProfilerTreeView {
  class Column extends System.Enum {
    protected constructor();
    static BatchBreakingReason: UnityEditor.UISystemProfilerTreeView.Column;
    static BatchCount: UnityEditor.UISystemProfilerTreeView.Column;
    static Element: UnityEditor.UISystemProfilerTreeView.Column;
    static GameObjectCount: UnityEditor.UISystemProfilerTreeView.Column;
    static InstanceIds: UnityEditor.UISystemProfilerTreeView.Column;
    static Rerender: UnityEditor.UISystemProfilerTreeView.Column;
    static TotalBatchCount: UnityEditor.UISystemProfilerTreeView.Column;
    static TotalVertexCount: UnityEditor.UISystemProfilerTreeView.Column;
    value__: number;
    static VertexCount: UnityEditor.UISystemProfilerTreeView.Column;
  }
}
declare namespace UnityEditor {
  class AdsImporter extends System.Object {
    constructor();
    static IsEditorAdsPackageEnabled(): boolean;
  }
}
declare namespace UnityEditor.Advertisements {
  class UnityAdsEditor extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditorInternal.Advertisements {
  class UnityAdsPostprocessor extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor {
  class AnalyticsTrackerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class AnalyticsImporter extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class TrackablePropertyDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    BuildPopupList(target: UnityEngine.Object, field: UnityEditor.SerializedProperty): UnityEditor.GenericMenu;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    static GetValue(m: any, v: any): any;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.TrackablePropertyDrawer {
  class State extends System.Object {
    constructor();
    lastSelectedIndex: number;
  }
}
declare namespace UnityEditor.TrackablePropertyDrawer {
  class PropertySetter extends System.ValueType {
    protected constructor();
    Assign(): void;
    Clear(): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidBuildWindowExtension extends UnityEditor.Modules.DefaultBuildWindowExtension {
    constructor();
    EnabledBuildAndRunButton(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShowPlatformBuildOptions(): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidKeystoreWindow extends UnityEditor.EditorWindow {
    constructor();
    static GetAvailableKeys(keystore: string, storepass: string): string[];
    OnGUI(): void;
    static ShowAndroidKeystoreWindow(company: string, keystore: string, storepass: string): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidNdkRoot extends System.Object {
    protected constructor();
    static Browse(ndkPath: string): string;
    static Is64BitWindows(): boolean;
    static IsWow64Process(hProcess: any, lpSystemInfo: any): boolean;
    static VerifyNdkDir(ndkPath: string): boolean;
    static readonly DownloadUrl: string;
  }
}
declare namespace UnityEditor {
  class AndroidPluginImporterExtension extends UnityEditor.Modules.DefaultPluginImporterExtension {
    constructor();
    CheckFileCollisions(buildTargetName: string): boolean;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
  }
}
declare namespace UnityEditor.AndroidPluginImporterExtension {
  class PluginInfo extends System.ValueType {
    protected constructor();
    ConflictsWith(other: UnityEditor.AndroidPluginImporterExtension.PluginInfo): boolean;
    assetName: string;
    assetPath: string;
    cpuType: string;
  }
}
declare namespace UnityEditor.AndroidPluginImporterExtension {
  class AndroidProperty extends UnityEditor.Modules.DefaultPluginImporterExtension.Property {
    constructor(name: string, key: string, defaultValue: any);
  }
}
declare namespace UnityEditor.AndroidPluginImporterExtension {
  class AndroidPluginCPUArchitecture extends System.Enum {
    protected constructor();
    static ARMv7: UnityEditor.AndroidPluginImporterExtension.AndroidPluginCPUArchitecture;
    value__: number;
    static x86: UnityEditor.AndroidPluginImporterExtension.AndroidPluginCPUArchitecture;
  }
}
declare namespace UnityEditor.Android {
  class AndroidPreferenceWindowExtension extends System.Object {
    constructor();
    HasExternalApplications(): boolean;
    ReadPreferences(): void;
    ShowExternalApplications(): void;
    WritePreferences(): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidSdkRoot extends System.Object {
    constructor();
    static readonly DownloadUrl: string;
  }
}
declare namespace UnityEditor.Android {
  class TargetExtension extends UnityEditor.Modules.DefaultPlatformSupportModule {
    constructor();
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreateDeploymentTargetsExtension(): UnityEditor.DeploymentTargets.IDeploymentTargetsExtension;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreatePreferenceWindowExtension(): UnityEditor.Modules.IPreferenceWindowExtension;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    CreateSettingsEditorExtension(): UnityEditor.Modules.ISettingEditorExtension;
    readonly JamTarget: string;
    readonly TargetName: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidBuildPostprocessor extends UnityEditor.Modules.DefaultBuildPostprocessor {
    constructor();
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    SupportsInstallInBuildFolder(): boolean;
    SupportsLz4Compression(): boolean;
  }
}
declare namespace UnityEditor.Android {
  class AndroidScriptingImplementations extends System.Object {
    constructor();
    Enabled(): UnityEditor.ScriptingImplementation[];
    Supported(): UnityEditor.ScriptingImplementation[];
  }
}
declare namespace UnityEditor.Android {
  class PlayerSettingsEditorExtension extends UnityEditor.Modules.DefaultPlayerSettingsEditorExtension {
    constructor();
    CanShowUnitySplashScreen(): boolean;
    ConfigurationSectionGUI(): void;
    HasIdentificationGUI(): boolean;
    IconSectionGUI(): void;
    IdentificationSectionGUI(): void;
    OnEnable(settingsEditor: UnityEditor.PlayerSettingsEditor): void;
    PublishSectionGUI(h: number, kLabelFloatMinW: number, kLabelFloatMaxW: number): void;
    ResolutionSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    SplashSectionGUI(): void;
    SupportsMultithreadedRendering(): boolean;
    SupportsOrientation(): boolean;
  }
}
declare namespace UnityEditor.Android.PlayerSettingsEditorExtension {
  class Texts extends System.Object {
    constructor();
    alias: any;
    androidBlitType: any;
    aspectRatio: any;
    aspectRatioMode: any;
    banner: any;
    browseKeystore: any;
    browseSelectName: any;
    build: any;
    buildSystem: any;
    buildSystemOptions: any[];
    bundleVersion: any;
    confirmPassword: any;
    createKeystore: any;
    customGradleTemplate: any;
    debug: any;
    deviceFilter: any;
    enterPassword: any;
    filterTouchesWhenObscured: any;
    game: any;
    gamepadSupport: any;
    image: any;
    installLocation: any;
    internetAccess: any;
    key: any;
    keystore: any;
    keystorePassword: any;
    kTargetPixelDensity: any;
    maxAspectRatio: any;
    minify: any;
    minifyOptions: any[];
    minimumLevel: any;
    newKey: any;
    openKeystore: any;
    packageName: any;
    packageUndo: any;
    password: any;
    passwordLength: any;
    passwordMatch: any;
    release: any;
    resScaling: any;
    resScalingDisabled: any;
    resScalingFixedDPI: any;
    scaling: any;
    splitApplicationBinary: any;
    staticSplash: any;
    targetLevel: any;
    tvCompatibility: any;
    unsignedDebug: any;
    useExistingKeystore: any;
    useLowAccuracyLocation: any;
    userProguardFile: any;
    version: any;
    writeExternal: any;
  }
}
declare namespace UnityEditor.Android {
  class MissingBuildPropertiesException extends System.Exception {
    constructor();
  }
}
declare namespace UnityEditor.Android {
  class AndroidBuildProperties extends UnityEngine.ScriptableObject {
    constructor();
    static GetFromBuildReport(report: UnityEditor.BuildReporting.BuildReport): UnityEditor.Android.AndroidBuildProperties;
    activityWithIntent: string;
    glesMinRequired: number;
    openGLRequireES31AEP: boolean;
    packageName: string;
    requireVulkan: boolean;
    targetDevice: UnityEditor.AndroidTargetDevice;
    useObb: boolean;
    versionCode: number;
  }
}
declare namespace UnityEditor.Android {
  class ProcessAbortedException extends System.Exception {
    constructor(message: string);
  }
}
declare namespace UnityEditor.Android {
  class PostProcessAndroidPlayer extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.Android {
  class ADB extends System.Object {
    constructor();
    static Devices(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string[];
    static KillServer(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): void;
    static Run(command: string[], waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    static StartServer(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): void;
    static Address: any;
    static Port: number;
  }
}
declare namespace UnityEditor.Android {
  class AndroidTargetDeviceType extends System.Object {
    protected constructor();
    readonly ABI: string;
    readonly Architecture: string;
    readonly GradleProductFlavor: string;
    readonly TargetDevice: UnityEditor.AndroidTargetDevice;
    readonly VisualStudioPlatform: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidTargetDeviceARMv7 extends UnityEditor.Android.AndroidTargetDeviceType {
    constructor();
    readonly ABI: string;
    readonly Architecture: string;
    readonly GradleProductFlavor: string;
    readonly TargetDevice: UnityEditor.AndroidTargetDevice;
    readonly VisualStudioPlatform: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidTargetDevicex86 extends UnityEditor.Android.AndroidTargetDeviceType {
    constructor();
    readonly ABI: string;
    readonly Architecture: string;
    readonly GradleProductFlavor: string;
    readonly TargetDevice: UnityEditor.AndroidTargetDevice;
    readonly VisualStudioPlatform: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidTargetDeviceFAT extends UnityEditor.Android.AndroidTargetDeviceType {
    constructor();
    readonly ABI: string;
    readonly Architecture: string;
    readonly GradleProductFlavor: string;
    readonly TargetDevice: UnityEditor.AndroidTargetDevice;
    readonly VisualStudioPlatform: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidDevice extends System.Object {
    constructor(deviceId: string);
    Delete(target: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Describe(): string;
    Forward(pc: string, device: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    GetSDCardPath(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Install(apkfile: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Launch(package_: string, activity: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    MakePath(path: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Move(source: string, destination: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Pull(src: string, dst: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Push(src: string, dst: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Reverse(pc: string, device: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    SetProperty(key: string, val: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    Uninstall(package_: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    readonly ExternalStorageRoot: string;
    readonly Features: string[];
    readonly Id: string;
    readonly MemInfo: any;
    readonly ProductModel: string;
    readonly Properties: any;
  }
}
declare namespace UnityEditor.Android.AndroidDevice {
  class RetryInvokationException extends System.Exception {
    constructor();
  }
}
declare namespace UnityEditor.Android {
  class AndroidFileLocator extends System.Object {
    constructor();
    static Find(searchPattern: string, result: string[]): boolean;
    static Find(searchPattern: string, result: string[], findFirst: boolean): boolean;
    static Find(searchPattern: string, result: string[], findFirst: boolean, maxdepth: number): boolean;
    static Find(searchPattern: string, ignorePattern: any, result: string[], findFirst: boolean, maxdepth: number): boolean;
    static Find(searchPattern: string): string[];
  }
}
declare namespace UnityEditor.Android.Il2Cpp {
  class AndroidIl2CppNativeCodeBuilder extends UnityEditorInternal.Il2CppNativeCodeBuilder {
    constructor(deviceType: UnityEditor.Android.AndroidTargetDeviceType);
    ConvertOutputFileToFullPath(outputFileRelativePath: string): string;
    readonly AdditionalIl2CPPArguments: any;
    static readonly AndroidNdkVersionString: string;
    readonly CacheDirectory: string;
    readonly CompilerArchitecture: string;
    readonly CompilerPlatform: string;
    static AndroidNdkPkgRevision: any;
    static AndroidNdkVersion: string;
  }
}
declare namespace UnityEditor.Android.Il2Cpp {
  class AndroidIl2CppPlatformProvider extends UnityEditorInternal.BaseIl2CppPlatformProvider {
    constructor(target: UnityEditor.BuildTarget, deviceType: UnityEditor.Android.AndroidTargetDeviceType, isDevelopmentBuild: boolean);
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    readonly developmentMode: boolean;
    readonly enableStackTraces: boolean;
    readonly libraryPaths: string[];
    readonly nativeLibraryFileName: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidJavaTools extends System.Object {
    constructor();
    static Bat(command: string): string;
    static DumpDiagnostics(): void;
    static Exe(command: string): string;
    static readonly jarPath: string;
    static readonly javacPath: string;
    static readonly javaPath: string;
    static readonly JDKDownloadUrl: string;
    static DEFAULT_JVM_MEMORY: number;
    static MIN_JVM_MEMORY: number;
  }
}
declare namespace UnityEditor.Android {
  class AndroidLibraries {
    constructor();
    Add(item: string): boolean;
    AddLibraryProject(projectPropertiesPath: string): boolean;
    Clear(): void;
    Contains(item: string): boolean;
    CopyTo(array: string[]): void;
    CopyTo(array: string[], arrayIndex: number): void;
    CopyTo(array: string[], arrayIndex: number, count: number): void;
    Equals(obj: any): boolean;
    ExceptWith(other: any): void;
    FindAndAddLibraryProjects(searchPattern: string): number;
    GetAssetsDirectories(): string[];
    GetCompiledJarFiles(): string[];
    GetEnumerator(): any;
    GetHashCode(): number;
    GetLibraryDirectories(): string[];
    GetManifestFiles(): string[];
    GetObjectData(info: any, context: any): void;
    GetPackageNames(): string[];
    GetResourceDirectories(): string[];
    GetType(): any;
    IntersectWith(other: any): void;
    static IsAndroidLibraryProject(libraryPath: string): boolean;
    IsProperSubsetOf(other: any): boolean;
    IsProperSupersetOf(other: any): boolean;
    IsSubsetOf(other: any): boolean;
    IsSupersetOf(other: any): boolean;
    OnDeserialization(sender: any): void;
    Overlaps(other: any): boolean;
    Remove(item: string): boolean;
    RemoveWhere(match: ((obj: string) => boolean)): number;
    SetEquals(other: any): boolean;
    SymmetricExceptWith(other: any): void;
    ToString(): string;
    TrimExcess(): void;
    UnionWith(other: any): void;
    readonly Comparer: any;
    readonly Count: number;
    static ProjectPropertiesFileName: string;
  }
}
declare namespace System.Collections.Generic {
  class HashSet<T> extends System.Object {
    constructor();
    constructor(comparer: any);
    constructor(collection: any);
    constructor(collection: any, comparer: any);
    Add(item: T): boolean;
    Clear(): void;
    Contains(item: T): boolean;
    CopyTo(array: T[]): void;
    CopyTo(array: T[], arrayIndex: number): void;
    CopyTo(array: T[], arrayIndex: number, count: number): void;
    static CreateSetComparer(): any;
    ExceptWith(other: any): void;
    GetEnumerator(): any;
    GetObjectData(info: any, context: any): void;
    IntersectWith(other: any): void;
    IsProperSubsetOf(other: any): boolean;
    IsProperSupersetOf(other: any): boolean;
    IsSubsetOf(other: any): boolean;
    IsSupersetOf(other: any): boolean;
    OnDeserialization(sender: any): void;
    Overlaps(other: any): boolean;
    Remove(item: T): boolean;
    RemoveWhere(match: ((obj: T) => boolean)): number;
    SetEquals(other: any): boolean;
    SymmetricExceptWith(other: any): void;
    TrimExcess(): void;
    UnionWith(other: any): void;
    readonly Comparer: any;
    readonly Count: number;
  }
}
declare namespace UnityEditor {
  class AndroidManifest extends UnityEditor.AndroidXmlDocument {
    constructor(path: string);
    AddApplicationMetaDataAttribute(name: string, value: string): void;
    AddGLESVersion(glEsVersion: string): void;
    AddIntentFilterCategory(category: string): boolean;
    AddLeanbackLauncherActivity(): boolean;
    AddResourceToLaunchActivity(name: string, resource: string): boolean;
    AddSupportsGLTexture(format: string): void;
    AddUsesFeature(feature: string, required: boolean): void;
    AddUsesPermission(permission: string): void;
    AddUsesPermission(permission: string, maxSdkVersion: number): void;
    EnableVrMode(activity: string): boolean;
    GetActivity(name: string): any;
    GetActivityWithLaunchIntent(): string;
    GetMinSdkVersion(): number;
    GetTargetSdkVersion(): number;
    HasLeanbackLauncherActivity(): boolean;
    OverrideTheme(theme: string): void;
    RemoveApplicationFlag(name: string): void;
    RenameActivity(src: string, dst: string): boolean;
    SetActivityAndroidAttribute(activity: string, name: string, val: string): boolean;
    SetApplicationBanner(name: string): void;
    SetApplicationFlag(name: string, value: boolean): void;
    SetConfigChanges(activity: string, configChanges: string): boolean;
    SetDebuggable(debuggable: boolean): void;
    SetInstallLocation(location: string): void;
    SetLaunchMode(activity: string, launchMode: string): boolean;
    SetMinSdkVersion(version: number): void;
    SetOrientation(activity: string, orientation: string): boolean;
    SetResizableActivity(activity: string, value: boolean): boolean;
    SetTargetSdkVersion(version: number): void;
    SetVersion(versionName: string, versionCode: number): void;
    StripUnityLibEntryForNativeActitivy(): void;
    packageName: string;
    static AndroidConfigChanges: string;
    static AndroidManifestFile: string;
    ApplicationElement: any;
  }
}
declare namespace UnityEditor {
  class AndroidXmlDocument extends System.Xml.XmlDocument {
    constructor(path: string);
    CreateAttribute(name: string): any;
    CreateAttribute(qualifiedName: string, namespaceURI: string): any;
    CreateAttribute(prefix: string, localName: string, namespaceURI: string): any;
    CreateAttribute(prefix: string, localName: string, namezpace: string, value: string): any;
    PatchStringRes(tag: string, attrib: string, value: string): void;
    Save(): string;
    Save(outStream: any): void;
    Save(writer: any): void;
    Save(filename: string): void;
    Save(w: any): void;
    SaveAs(path: string): string;
    static AndroidXmlNamespace: string;
  }
}
declare namespace System.Xml {
  class XmlDocument extends System.Xml.XmlNode {
    constructor();
    constructor(nt: any);
    CloneNode(deep: boolean): System.Xml.XmlNode;
    CreateAttribute(name: string): any;
    CreateAttribute(qualifiedName: string, namespaceURI: string): any;
    CreateAttribute(prefix: string, localName: string, namespaceURI: string): any;
    CreateCDataSection(data: string): any;
    CreateComment(data: string): any;
    CreateDocumentFragment(): any;
    CreateDocumentType(name: string, publicId: string, systemId: string, internalSubset: string): any;
    CreateElement(name: string): any;
    CreateElement(qualifiedName: string, namespaceURI: string): any;
    CreateElement(prefix: string, localName: string, namespaceURI: string): any;
    CreateEntityReference(name: string): any;
    CreateNavigator(): any;
    CreateNode(nodeTypeString: string, name: string, namespaceURI: string): System.Xml.XmlNode;
    CreateNode(type: any, name: string, namespaceURI: string): System.Xml.XmlNode;
    CreateNode(type: any, prefix: string, name: string, namespaceURI: string): System.Xml.XmlNode;
    CreateProcessingInstruction(target: string, data: string): any;
    CreateSignificantWhitespace(text: string): any;
    CreateTextNode(text: string): any;
    CreateWhitespace(text: string): any;
    CreateXmlDeclaration(version: string, encoding: string, standalone: string): any;
    GetElementById(elementId: string): any;
    GetElementsByTagName(name: string): any;
    GetElementsByTagName(localName: string, namespaceURI: string): any;
    ImportNode(node: System.Xml.XmlNode, deep: boolean): System.Xml.XmlNode;
    Load(inStream: any): void;
    Load(txtReader: any): void;
    Load(filename: string): void;
    Load(reader: any): void;
    LoadXml(xml: string): void;
    ReadNode(reader: any): System.Xml.XmlNode;
    Save(outStream: any): void;
    Save(writer: any): void;
    Save(filename: string): void;
    Save(w: any): void;
    Validate(validationEventHandler: ((sender: any, e: any) => void)): void;
    Validate(validationEventHandler: ((sender: any, e: any) => void), nodeToValidate: System.Xml.XmlNode): void;
    WriteContentTo(xw: any): void;
    WriteTo(w: any): void;
    readonly BaseURI: string;
    readonly DocumentElement: any;
    readonly DocumentType: any;
    readonly Implementation: any;
    InnerXml: string;
    readonly IsReadOnly: boolean;
    readonly LocalName: string;
    readonly Name: string;
    readonly NameTable: any;
    readonly NodeType: any;
    readonly OwnerDocument: System.Xml.XmlDocument;
    readonly ParentNode: System.Xml.XmlNode;
    PreserveWhitespace: boolean;
    readonly SchemaInfo: any;
    Schemas: any;
  }
}
declare namespace System.Xml {
  class XmlNode extends System.Object {
    protected constructor();
    AppendChild(newChild: System.Xml.XmlNode): System.Xml.XmlNode;
    Clone(): System.Xml.XmlNode;
    CloneNode(deep: boolean): System.Xml.XmlNode;
    CreateNavigator(): any;
    GetEnumerator(): any;
    GetNamespaceOfPrefix(prefix: string): string;
    GetPrefixOfNamespace(namespaceURI: string): string;
    InsertAfter(newChild: System.Xml.XmlNode, refChild: System.Xml.XmlNode): System.Xml.XmlNode;
    InsertBefore(newChild: System.Xml.XmlNode, refChild: System.Xml.XmlNode): System.Xml.XmlNode;
    Normalize(): void;
    PrependChild(newChild: System.Xml.XmlNode): System.Xml.XmlNode;
    RemoveAll(): void;
    RemoveChild(oldChild: System.Xml.XmlNode): System.Xml.XmlNode;
    ReplaceChild(newChild: System.Xml.XmlNode, oldChild: System.Xml.XmlNode): System.Xml.XmlNode;
    SelectNodes(xpath: string): any;
    SelectNodes(xpath: string, nsmgr: any): any;
    SelectSingleNode(xpath: string): System.Xml.XmlNode;
    SelectSingleNode(xpath: string, nsmgr: any): System.Xml.XmlNode;
    Supports(feature: string, version: string): boolean;
    WriteContentTo(w: any): void;
    WriteTo(w: any): void;
    readonly Attributes: any;
    readonly BaseURI: string;
    readonly ChildNodes: any;
    readonly FirstChild: System.Xml.XmlNode;
    readonly HasChildNodes: boolean;
    InnerText: string;
    InnerXml: string;
    readonly IsReadOnly: boolean;
    get_Item(name: string): any;
    get_Item(localname: string, ns: string): any;
    readonly LastChild: System.Xml.XmlNode;
    readonly LocalName: string;
    readonly Name: string;
    readonly NamespaceURI: string;
    readonly NextSibling: System.Xml.XmlNode;
    readonly NodeType: any;
    readonly OuterXml: string;
    readonly OwnerDocument: System.Xml.XmlDocument;
    readonly ParentNode: System.Xml.XmlNode;
    Prefix: string;
    readonly PreviousSibling: System.Xml.XmlNode;
    readonly PreviousText: System.Xml.XmlNode;
    readonly SchemaInfo: any;
    Value: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidNDKTools extends System.Object {
    protected constructor();
    static GetInstance(): UnityEditor.Android.AndroidNDKTools;
    static GetInstanceOrThrowException(): UnityEditor.Android.AndroidNDKTools;
    NDKRootDir: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidProjectExport extends System.Object {
    protected constructor();
    static Create(system: number): UnityEditor.Android.AndroidProjectExport;
    Export(context: UnityEditor.Android.PostProcessor.PostProcessorContext, targetPath: string): void;
    ExportWithCurrentSettings(): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidProjectExportADT extends UnityEditor.Android.AndroidProjectExport {
    constructor();
    ExportWithCurrentSettings(): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidProjectExportGradle extends UnityEditor.Android.AndroidProjectExport {
    constructor();
    ExportWithCurrentSettings(): void;
  }
}
declare namespace UnityEditor.Android {
  class AndroidProjectExportVisualStudioGradle extends UnityEditor.Android.AndroidProjectExport {
    constructor();
    ExportWithCurrentSettings(): void;
  }
}
declare namespace UnityEditor.Android.AndroidProjectExportVisualStudioGradle {
  class LibraryProject extends System.Object {
    constructor(name: string, guid: string);
    readonly Guid: string;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android {
  class AndroidSDKToolsException extends System.Exception {
    constructor(message: string);
  }
}
declare namespace UnityEditor.Android {
  class AndroidComponentVersion extends System.Object {
    constructor();
    static GetComponentVersion(directory: string): any;
  }
}
declare namespace UnityEditor.Android {
  class AndroidSDKTools extends System.Object {
    protected constructor();
    BuildToolsVersion(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): any;
    CreateKey(keystore: string, storepass: string, alias: string, password: string, dname: string, validityInDays: number): void;
    DumpDiagnostics(): void;
    GetAndroidPlatformPath(apiLevel: number): string;
    static GetInstance(): UnityEditor.Android.AndroidSDKTools;
    static GetInstanceOrThrowException(): UnityEditor.Android.AndroidSDKTools;
    GetTopAndroidPlatformAvailable(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): number;
    InstallPlatform(apiLevel: number, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    ListTargetPlatforms(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string[];
    MergeManifests(target: string, mainManifest: string, libraryManifests: string[], waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): void;
    PlatformToolsVersion(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): any;
    ReadAvailableKeys(keystore: string, storepass: string): string[];
    RunAndroidSdkTool(toolName: string, arguments_: string, updateCommand: boolean, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    RunCommand(sdkToolCommand: string[], memoryMB: number, workingdir: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    RunCommand(sdkToolCommand: string[], workingdir: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    RunCommand(sdkToolCommand: string[], waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    static RunCommandSafe(javaExe: string, sdkToolsDir: string, sdkToolCommand: string[], memoryMB: number, workingdir: string, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    ToolsVersion(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): any;
    UpdateSDK(waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void)): string;
    UpdateToolsDirectories(): void;
    readonly AAPT: string;
    readonly ADB: string;
    readonly APKSIGNER: string;
    readonly IsVisualStudio: boolean;
    readonly ZIPALIGN: string;
    SDKRootDir: string;
  }
}
declare namespace UnityEditor.Android {
  class CommandInvokationFailure extends System.Exception {
    constructor(message: string, p: UnityEditor.Utils.Program);
    CommandString(): string;
    StdErrString(): string;
    StdOutString(): string;
    ToString(): string;
    Errors: string[];
    readonly Message: string;
    Args: string;
    Command: string;
    ExitCode: number;
    HighLevelMessage: string;
    StdErr: string[];
    StdOut: string[];
  }
}
declare namespace UnityEditor.Android {
  class Command extends System.Object {
    constructor();
    static Run(psi: any, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string): string;
    static RunWithStdin(psi: any, waitingForProcessToExit: ((program: UnityEditor.Utils.Program) => void), errorMsg: string, input: string[]): string;
  }
}
declare namespace UnityEditor.Android {
  class GradleInvokationException extends System.Exception {
    constructor(message: string, innerException: System.Exception);
    ParseAndShowException(): boolean;
    FullMessage: string;
  }
}
declare namespace UnityEditor.Android.GradleInvokationException {
  class GradleError extends System.ValueType {
    protected constructor();
    id: string;
    message: string;
    regex: any;
  }
}
declare namespace UnityEditor.Android {
  class GradleWrapper extends System.Object {
    constructor();
    static Run(workingdir: string, task: string, progress?: ((task: string) => void)): string;
  }
}
declare namespace UnityEditor.Android {
  class Utils extends System.Object {
    protected constructor();
    static ParseVersion(version: string): any;
    static DefaultVersion: any;
  }
}
declare namespace UnityEditor.Android {
  class VisualStudioAndroidSDKTools extends UnityEditor.Android.AndroidSDKTools {
    protected constructor();
    static GetInstance(): UnityEditor.Android.VisualStudioAndroidSDKTools;
    SetBuildToolsVersion(version: number): void;
    readonly IsVisualStudio: boolean;
  }
}
declare namespace UnityEditor.Android {
  class AndroidDeploymentTargetsExtension extends UnityEditor.DeploymentTargets.DefaultDeploymentTargetsExtension {
    constructor();
    GetKnownTargets(progressHandler?: UnityEditor.ProgressHandler): UnityEditor.DeploymentTargets.DeploymentTargetIdAndStatus[];
    GetTargetInfo(targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): UnityEditor.DeploymentTargets.IDeploymentTargetInfo;
    LaunchBuildOnTarget(buildReport: UnityEditor.BuildReporting.BuildReport, targetId: UnityEditor.DeploymentTargets.DeploymentTargetId, progressHandler?: UnityEditor.ProgressHandler): void;
    static kSeeConsoleMessage: string;
  }
}
declare namespace UnityEditor.Android.AndroidDeploymentTargetsExtension {
  class AndroidDeploymentTargetInfo extends System.Object {
    constructor();
    CheckBuild(buildReport: UnityEditor.BuildReporting.BuildReport): UnityEditor.DeploymentTargets.BuildCheckResult;
    GetSupportFlags(): any;
    features: string[];
    name: string;
    properties: any;
  }
}
declare namespace UnityEditor.Android.PostProcessor {
  class IPostProcessorTask {
    protected constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor {
  class PostProcessorContext extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.Android.PostProcessor {
  class PostProcessRunner extends System.Object {
    constructor();
    AddNextTask(task: UnityEditor.Android.PostProcessor.IPostProcessorTask): void;
    RunAllTasks(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
  }
}
declare namespace UnityEditor.Android.PostProcessor {
  class CancelPostProcess extends System.Object {
    constructor();
    static AbortBuild(title: string, message: string): void;
    static AbortBuild(title: string, message: string, ex: System.Exception): void;
    static AbortBuildPointToConsole(title: string, message: string): void;
    static ConsoleMessage: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor {
  class Constants extends System.Object {
    protected constructor();
    static AndroidDevice: string;
    static AndroidJarPath: string;
    static AndroidLibraries: string;
    static AndroidPluginsPath: string;
    static AutoRunPlayer: string;
    static BuildId: string;
    static BuildTarget: string;
    static DevelopmentPlayer: string;
    static ExportAndroidProject: string;
    static FastzipExe: string;
    static HasJarPlugins: string;
    static InstallPath: string;
    static ManifestName: string;
    static Minification: string;
    static Minification_Gradle: number;
    static Minification_None: number;
    static Minification_Proguard: number;
    static MinSDKVersion: string;
    static NewMonoLibName: string;
    static OldMonoLibName: string;
    static PackageName: string;
    static PlayerPackage: string;
    static ProjectType: string;
    static ProjectType_ADT: number;
    static ProjectType_Gradle: number;
    static ProjectType_Internal: number;
    static ProjectType_VisualStudio: number;
    static ScriptingBackend: string;
    static SDKTools: string;
    static SourceBuild: string;
    static StagingArea: string;
    static StagingAreaData: string;
    static TargetDevice: string;
    static TargetLibrariesFolder: string;
    static TargetSDKVersion: string;
    static UsedClassRegistry: string;
    static UseFastzip: string;
    static UseObb: string;
    static Variation: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class AAPTPackage extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class AddAndroidLibraries extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class ArSupportChecker extends System.Object {
    constructor();
    static CheckArSdkVersions(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    static CheckArSettingsConflicts(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly isTangoEnabled: boolean;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class BuildAPK extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class BuildGradleProject extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class BuildResources extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class CheckAndroidSdk extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
    static kMinAndroidSDKBuildToolsVersion: number;
    static kMinAndroidSDKPlatformToolsVersion: number;
    static kMinAndroidSDKPlatformVersion: number;
    static kMinAndroidSDKToolsVersion: number;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk {
  class SDKComponentDetector extends System.Object {
    constructor(task: UnityEditor.Android.PostProcessor.IPostProcessorTask);
    Detect(sdkTools: UnityEditor.Android.AndroidSDKTools, minVersion: any, onProgress: ((task: UnityEditor.Android.PostProcessor.IPostProcessorTask, message: string) => void)): boolean;
    GetUpdateMessage(sdkTools: UnityEditor.Android.AndroidSDKTools, minVersion: any): string;
    Update(sdkTools: UnityEditor.Android.AndroidSDKTools, minVersion: any, onProgress: ((task: UnityEditor.Android.PostProcessor.IPostProcessorTask, message: string) => void)): boolean;
    readonly UpdateTitle: string;
    readonly Version: any;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk {
  class SDKToolsDetector extends UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk.SDKComponentDetector {
    constructor(task: UnityEditor.Android.PostProcessor.IPostProcessorTask);
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk {
  class SDKBuildToolsDetector extends UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk.SDKComponentDetector {
    constructor(task: UnityEditor.Android.PostProcessor.IPostProcessorTask);
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk {
  class VisualStudioSDKBuildToolsDetector extends UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk.SDKBuildToolsDetector {
    constructor(task: UnityEditor.Android.PostProcessor.IPostProcessorTask);
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk {
  class SDKPlatformToolsDetector extends UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk.SDKComponentDetector {
    constructor(task: UnityEditor.Android.PostProcessor.IPostProcessorTask);
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk {
  class SDKPlatformDetector extends UnityEditor.Android.PostProcessor.Tasks.CheckAndroidSdk.SDKComponentDetector {
    constructor(task: UnityEditor.Android.PostProcessor.IPostProcessorTask);
    Update(sdkTools: UnityEditor.Android.AndroidSDKTools, minVersion: any, onProgress: ((task: UnityEditor.Android.PostProcessor.IPostProcessorTask, message: string) => void)): boolean;
    readonly UpdateTitle: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class CheckDevice extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class CheckLibrariesConflict extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class CheckPrerequisites extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class ExportProject extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class FastZip extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class GenerateBuildId extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class GenerateManifest extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class Initializer extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class MoveFinalPackage extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class NativePlugins extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class NonstreamingObbAssets extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class PrepareAPKResources extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class PrepareUnityPackage extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class PrepareUnityResources extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class PrepareUserResources extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class ProcessAAR extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class PublishPackage extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class RunDex extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class RunIl2Cpp extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class SplitLargeFiles extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class StreamingAssets extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class TasksCommon extends System.Object {
    constructor();
    static Exec(command: string, args: string, workingdir: string, errorMsg: string): string;
    static Exec(command: string, args: string, workingdir: string, errorMsg: string, stdin: string[]): string;
    static GetClassDirectory(context: UnityEditor.Android.PostProcessor.PostProcessorContext): string;
    static GetLibsDirectory(context: UnityEditor.Android.PostProcessor.PostProcessorContext): string;
    static GetMD5HashOfEOCD(fileName: string): string;
    static GetMonoLibsDirectory(context: UnityEditor.Android.PostProcessor.PostProcessorContext): string;
    static GetSymbolsDirectory(context: UnityEditor.Android.PostProcessor.PostProcessorContext): string;
    static SDKTool(context: UnityEditor.Android.PostProcessor.PostProcessorContext, command: string[], workingdir: string, errorMsg: string): string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class UploadSymbols extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class VrSupportChecker extends System.Object {
    constructor();
    static CheckVrSdkVersions(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly isCardboardEnabled: boolean;
    readonly isDaydreamEnabled: boolean;
    readonly isDaydreamOnly: boolean;
    readonly isDaydreamPrimary: boolean;
    readonly isOculusEnabled: boolean;
  }
}
declare namespace UnityEditor.Android.PostProcessor.Tasks {
  class ZipIl2cppSymbols extends System.Object {
    constructor();
    Execute(context: UnityEditor.Android.PostProcessor.PostProcessorContext): void;
    readonly Name: string;
  }
}
declare namespace UnityEditor.Experimental.Audio.Google {
  class GvrAudioListenerExtensionEditor extends UnityEditor.AudioListenerExtensionEditor {
    constructor();
    InitExtensionPropertyInfo(): void;
    OnAudioListenerGUI(): void;
  }
}
declare namespace UnityEditor.Experimental.Audio.Google {
  class GvrAudioRoomEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Experimental.Audio.Google {
  class GvrAudioSourceExtensionEditor extends UnityEditor.AudioSourceExtensionEditor {
    constructor();
    InitExtensionPropertyInfo(): void;
    OnAudioSourceGUI(): void;
    OnAudioSourceSceneGUI(source: any): void;
  }
}
declare namespace UnityEditor.Graphs {
  class Edge extends System.Object {
    constructor(fromSlot: UnityEditor.Graphs.Slot, toSlot: UnityEditor.Graphs.Slot);
    ToString(): string;
    fromSlot: UnityEditor.Graphs.Slot;
    fromSlotName: string;
    toSlot: UnityEditor.Graphs.Slot;
    toSlotName: string;
    color: any;
  }
}
declare namespace UnityEditor.Graphs {
  class Graph extends UnityEngine.ScriptableObject {
    constructor();
    AddNode(node: UnityEditor.Graphs.Node): void;
    AddNodes(nodes: UnityEditor.Graphs.Node[]): void;
    CanConnect(fromSlot: UnityEditor.Graphs.Slot, toSlot: UnityEditor.Graphs.Slot): boolean;
    Clear(destroyNodes?: boolean): void;
    Connect(fromSlot: UnityEditor.Graphs.Slot, toSlot: UnityEditor.Graphs.Slot): UnityEditor.Graphs.Edge;
    Connected(fromSlot: UnityEditor.Graphs.Slot, toSlot: UnityEditor.Graphs.Slot): boolean;
    DestroyNode(node: UnityEditor.Graphs.Node): void;
    Dirty(): void;
    static FlattenedCopy(source: UnityEditor.Graphs.Graph): UnityEditor.Graphs.Graph;
    GetNodeByName(name: string): UnityEditor.Graphs.Node;
    OnEnable(): void;
    RedirectSlotEdges(node: UnityEditor.Graphs.Node, oldSlotName: string, newSlotName: string): void;
    RemoveEdge(e: UnityEditor.Graphs.Edge): void;
    RemoveInvalidEdgesForSlot(slot: UnityEditor.Graphs.Slot): void;
    RemoveNode(node: UnityEditor.Graphs.Node, destroyNode?: boolean): void;
    RemoveNodes(nodesToRemove: UnityEditor.Graphs.Node[], destroyNodes?: boolean): void;
    RevalidateInputDataEdges(s: UnityEditor.Graphs.Slot): void;
    RevalidateOutputDataEdges(s: UnityEditor.Graphs.Slot): void;
    ToString(): string;
    WakeUp(): void;
    WakeUp(force: boolean): void;
    WakeUpEdges(clearSlotEdges: boolean): void;
    get_Item(name: string): UnityEditor.Graphs.Node;
    edges: UnityEditor.Graphs.Edge[];
    nodes: UnityEditor.Graphs.Node[];
  }
}
declare namespace UnityEditor.Graphs {
  class GroupNode extends UnityEditor.Graphs.Node {
    constructor();
    AddChildNode(node: UnityEditor.Graphs.Node): void;
    DestroyChildNode(node: UnityEditor.Graphs.Node): void;
    static FromNodes(name: string, nodes: UnityEditor.Graphs.Node[], graphType: any): UnityEditor.Graphs.GroupNode;
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    ToString(): string;
    UnGroup(): void;
    readonly subGraph: UnityEditor.Graphs.Graph;
  }
}
declare namespace UnityEditor.Graphs {
  class Node extends UnityEngine.ScriptableObject {
    constructor();
    AddedToGraph(): void;
    AddInputSlot(name: string): UnityEditor.Graphs.Slot;
    AddInputSlot(name: string, type: any): UnityEditor.Graphs.Slot;
    AddOrModifyProperty(dataType: any, name: string): UnityEditor.Graphs.Property;
    AddOrModifyPropertyForSlot(s: UnityEditor.Graphs.Slot): UnityEditor.Graphs.Property;
    AddOutputSlot(name: string): UnityEditor.Graphs.Slot;
    AddOutputSlot(name: string, type: any): UnityEditor.Graphs.Slot;
    AddProperty(p: UnityEditor.Graphs.Property): void;
    AddSlot(s: UnityEditor.Graphs.Slot): void;
    AddSlot(s: UnityEditor.Graphs.Slot, index: number): void;
    BeginDrag(): void;
    ChangeSlotType(s: UnityEditor.Graphs.Slot, toType: any): void;
    ConstructAndAddProperty(serializedTypeString: string, name: string): UnityEditor.Graphs.Property;
    ConstructAndAddProperty(type: any, name: string): UnityEditor.Graphs.Property;
    Dirty(): void;
    EndDrag(): void;
    GetOrCreateAndAddProperty(type: any, name: string): UnityEditor.Graphs.Property;
    GetProperty(name: string): UnityEditor.Graphs.Property;
    GetPropertyValue(name: string): any;
    GetSettingPropertyTitle(property: UnityEditor.Graphs.Property): string;
    GetSlotValue(slotName: string): any;
    InputEdgeChanged(e: UnityEditor.Graphs.Edge): void;
    static Instance(): UnityEditor.Graphs.Node;
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    OnDrag(): void;
    RemoveProperty(name: string): void;
    RemoveProperty(p: UnityEditor.Graphs.Property): void;
    RemoveSlot(s: UnityEditor.Graphs.Slot): void;
    RemovingFromGraph(): void;
    RenameProperty(oldName: string, newName: string, newType: any): void;
    ResetGenericPropertyArgumentType(): void;
    SetGenericPropertyArgumentType(type: any): void;
    SetPropertyValue(name: string, value: any): void;
    SetPropertyValueOrCreateAndAddProperty(name: string, type: any, value: any): void;
    ToString(): string;
    TryGetProperty(name: string): UnityEditor.Graphs.Property;
    TryGetSlotPropertyValue(slot: UnityEditor.Graphs.Slot): any;
    genericType: any;
    graph: UnityEditor.Graphs.Graph;
    readonly hasTitle: boolean;
    readonly inputDataEdges: any;
    readonly inputDataSlots: any;
    readonly inputEdges: any;
    readonly inputFlowEdges: any;
    readonly inputFlowSlots: any;
    readonly inputSlots: any;
    readonly isDragging: boolean;
    readonly isGeneric: boolean;
    get_Item(name: string): UnityEditor.Graphs.Slot;
    get_Item(index: number): UnityEditor.Graphs.Slot;
    nodeInvalidError: string;
    readonly nodeIsInvalid: boolean;
    readonly outputDataEdges: any;
    readonly outputDataSlots: any;
    readonly outputEdges: any;
    readonly outputFlowEdges: any;
    readonly outputFlowSlots: any;
    readonly outputSlots: any;
    readonly properties: UnityEditor.Graphs.Property[];
    readonly settingProperties: any;
    readonly slots: UnityEditor.Graphs.Slot[];
    title: string;
    readonly windowTitle: string;
    color: UnityEditor.Graphs.Styles.Color;
    position: any;
    style: string;
  }
}
declare namespace UnityEditor.Graphs {
  class Property extends System.Object {
    constructor();
    constructor(typeString: string, name: string);
    constructor(type: any, name: string);
    ChangeDataType(newDataType: any): void;
    static ConvertableUnityObjects(t1: any, t2: any): boolean;
    static ConvertActualValueIfPossible(value: any, toType: any): any;
    static ConvertFromString(toType: any, str: string): any;
    static IsSceneReferenceType(t: any): boolean;
    ResetGenericArgumentType(): void;
    SetGenericArgumentType(type: any): void;
    static ValidPropertyType(type: any): boolean;
    readonly codeExpression: any;
    readonly elementCount: number;
    readonly elementType: any;
    readonly hasDefaultValue: boolean;
    readonly hasValue: boolean;
    readonly isGeneric: boolean;
    readonly isIList: boolean;
    readonly isSceneReferenceType: boolean;
    name: string;
    readonly stringValue: string;
    type: any;
    readonly typeString: string;
    value: any;
  }
}
declare namespace UnityEditor.Graphs {
  class ProxyNode extends UnityEditor.Graphs.Node {
    constructor();
    Init(isIn: boolean): void;
    static Instance(isIn: boolean): UnityEditor.Graphs.ProxyNode;
    readonly isIn: boolean;
  }
}
declare namespace UnityEditor.Graphs {
  class SerializedType extends System.Object {
    constructor();
    static CanAssignFromGenericType(serializedTypeString: string, t: any): boolean;
    static FromString(serializedTypeString: string): any;
    static GenericType(t: any): any;
    static GetFullName(t: any): string;
    static IsBaseTypeGeneric(serializedTypeString: string): boolean;
    static IsGeneric(serializedTypeString: string): boolean;
    static IsListType(t: any): boolean;
    static ResetGenericArgumentType(serializedTypeString: string): string;
    static SetGenericArgumentType(serializedTypeString: string, type: any): string;
    ToString(): string;
    static ToString(t: any): string;
  }
}
declare namespace UnityEditor.Graphs.SerializedType {
  class SerializedTypeData extends System.ValueType {
    protected constructor();
    genericTypeName: string;
    isGeneric: boolean;
    typeName: string;
  }
}
declare namespace UnityEditor.Graphs {
  class SlotType extends System.Enum {
    protected constructor();
    static InputSlot: UnityEditor.Graphs.SlotType;
    static OutputSlot: UnityEditor.Graphs.SlotType;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs {
  class Slot extends System.Object {
    constructor();
    constructor(type: UnityEditor.Graphs.SlotType);
    constructor(type: UnityEditor.Graphs.SlotType, name: string);
    constructor(type: UnityEditor.Graphs.SlotType, name: string, dataType: any);
    constructor(type: UnityEditor.Graphs.SlotType, name: string, title: string);
    constructor(type: UnityEditor.Graphs.SlotType, name: string, title: string, dataType: any);
    AddEdge(e: UnityEditor.Graphs.Edge): void;
    GetProperty(): UnityEditor.Graphs.Property;
    RemoveEdge(e: UnityEditor.Graphs.Edge): void;
    ResetGenericArgumentType(): void;
    SetGenericArgumentType(type: any): void;
    ToString(): string;
    dataType: any;
    readonly dataTypeString: string;
    readonly isDataSlot: boolean;
    readonly isFlowSlot: boolean;
    readonly isGeneric: boolean;
    readonly isInputDataSlot: boolean;
    readonly isInputSlot: boolean;
    readonly isOutputDataSlot: boolean;
    readonly isOutputSlot: boolean;
    readonly isTarget: boolean;
    name: string;
    node: UnityEditor.Graphs.Node;
    title: string;
    edges: UnityEditor.Graphs.Edge[];
    type: UnityEditor.Graphs.SlotType;
  }
}
declare namespace UnityEditor.Graphs {
  class SpecialNames extends System.Object {
    constructor();
    static kFunctionInSlotName: string;
    static kFunctionOutSlotName: string;
    static kTargetSlotName: string;
    static kVarInSlotName: string;
    static kVarOutSlotName: string;
  }
}
declare namespace UnityEditor.Graphs {
  class DummyCachedNullType extends System.Enum {
    protected constructor();
    static Nothing: UnityEditor.Graphs.DummyCachedNullType;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs {
  class DummyNullType extends System.Enum {
    protected constructor();
    static Nothing: UnityEditor.Graphs.DummyNullType;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs {
  class GraphsTypeConverter extends System.ComponentModel.TypeConverter {
    constructor();
    CanConvertFrom(context: any, sourceType: any): boolean;
    CanConvertFrom(sourceType: any): boolean;
    CanConvertTo(context: any, destinationType: any): boolean;
    CanConvertTo(destinationType: any): boolean;
  }
}
declare namespace System.ComponentModel {
  class TypeConverter extends System.Object {
    constructor();
    CanConvertFrom(context: any, sourceType: any): boolean;
    CanConvertFrom(sourceType: any): boolean;
    CanConvertTo(context: any, destinationType: any): boolean;
    CanConvertTo(destinationType: any): boolean;
    ConvertFrom(context: any, culture: any, value: any): any;
    ConvertFrom(value: any): any;
    ConvertFromInvariantString(context: any, text: string): any;
    ConvertFromInvariantString(text: string): any;
    ConvertFromString(context: any, culture: any, text: string): any;
    ConvertFromString(context: any, text: string): any;
    ConvertFromString(text: string): any;
    ConvertTo(context: any, culture: any, value: any, destinationType: any): any;
    ConvertTo(value: any, destinationType: any): any;
    ConvertToInvariantString(context: any, value: any): string;
    ConvertToInvariantString(value: any): string;
    ConvertToString(context: any, culture: any, value: any): string;
    ConvertToString(context: any, value: any): string;
    ConvertToString(value: any): string;
    CreateInstance(propertyValues: any): any;
    CreateInstance(context: any, propertyValues: any): any;
    GetCreateInstanceSupported(): boolean;
    GetCreateInstanceSupported(context: any): boolean;
    GetProperties(context: any, value: any): any;
    GetProperties(context: any, value: any, attributes: System.Attribute[]): any;
    GetProperties(value: any): any;
    GetPropertiesSupported(): boolean;
    GetPropertiesSupported(context: any): boolean;
    GetStandardValues(context: any): any;
    GetStandardValues(): any;
    GetStandardValuesExclusive(): boolean;
    GetStandardValuesExclusive(context: any): boolean;
    GetStandardValuesSupported(): boolean;
    GetStandardValuesSupported(context: any): boolean;
    IsValid(context: any, value: any): boolean;
    IsValid(value: any): boolean;
  }
}
declare namespace UnityEditor.Graphs {
  class GenericFloatVarsTypeConverter extends UnityEditor.Graphs.GraphsTypeConverter {
    constructor(type: any, varNames: string[]);
    ConvertFrom(context: any, culture: any, value: any): any;
    ConvertFrom(value: any): any;
    ConvertTo(context: any, culture: any, value: any, destinationType: any): any;
    ConvertTo(value: any, destinationType: any): any;
    IsValid(context: any, value: any): boolean;
    IsValid(value: any): boolean;
  }
}
declare namespace UnityEditor.Graphs {
  class EnumTypeConverter extends UnityEditor.Graphs.GraphsTypeConverter {
    constructor(type: any);
    ConvertFrom(context: any, culture: any, value: any): any;
    ConvertFrom(value: any): any;
    ConvertTo(context: any, culture: any, value: any, destinationType: any): any;
    ConvertTo(value: any, destinationType: any): any;
    IsValid(context: any, value: any): boolean;
    IsValid(value: any): boolean;
  }
}
declare namespace UnityEditor.Graphs {
  class AnimationCurveTypeConverter extends UnityEditor.Graphs.GraphsTypeConverter {
    constructor(type: any);
    ConvertFrom(context: any, culture: any, value: any): any;
    ConvertFrom(value: any): any;
    ConvertTo(context: any, culture: any, value: any, destinationType: any): any;
    ConvertTo(value: any, destinationType: any): any;
    IsValid(context: any, value: any): boolean;
    IsValid(value: any): boolean;
  }
}
declare namespace UnityEditor.Graphs.AnimationCurveTypeConverter {
  class Val extends System.Enum {
    protected constructor();
    static InTangent: UnityEditor.Graphs.AnimationCurveTypeConverter.Val;
    static OutTangent: UnityEditor.Graphs.AnimationCurveTypeConverter.Val;
    static Time: UnityEditor.Graphs.AnimationCurveTypeConverter.Val;
    static Value: UnityEditor.Graphs.AnimationCurveTypeConverter.Val;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs {
  class Explore extends System.Object {
    protected constructor();
    static Traverse(v: UnityEditor.Graphs.Node, direction: UnityEditor.Graphs.Explore.SearchDirection): void;
  }
}
declare namespace UnityEditor.Graphs.Explore {
  class NodeState extends System.Enum {
    protected constructor();
    static Black: UnityEditor.Graphs.Explore.NodeState;
    static Grey: UnityEditor.Graphs.Explore.NodeState;
    value__: number;
    static White: UnityEditor.Graphs.Explore.NodeState;
  }
}
declare namespace UnityEditor.Graphs.Explore {
  class SearchEvent extends System.ValueType {
    protected constructor();
    edge: UnityEditor.Graphs.Edge;
    node: UnityEditor.Graphs.Node;
  }
}
declare namespace UnityEditor.Graphs.Explore {
  class SearchDirection extends System.Enum {
    protected constructor();
    static Backward: UnityEditor.Graphs.Explore.SearchDirection;
    static Forward: UnityEditor.Graphs.Explore.SearchDirection;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs {
  class TopologicalSort extends System.Object {
    protected constructor();
    static Sort(g: UnityEditor.Graphs.Graph): void;
    static readonly deadNodes: any;
    static readonly SortedNodes: UnityEditor.Graphs.Node[];
  }
}
declare namespace UnityEditor.Graphs.TopologicalSort {
  class NodeState extends System.Enum {
    protected constructor();
    value__: number;
    static Visited: UnityEditor.Graphs.TopologicalSort.NodeState;
  }
}
declare namespace UnityEditor.Graphs {
  class AnimatorControllerCallback extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.Graphs {
  class AnimatorControllerTool extends UnityEditor.EditorWindow {
    constructor();
    AddBreadCrumb(target: UnityEngine.Object, updateViewPosition: boolean): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    AddLayer(layerName: string): void;
    AddNewLayer(): void;
    BlendParameterInputChanged(blendTree: UnityEditor.Animations.BlendTree): void;
    BlendTreeHierarchyChanged(blendTree: UnityEditor.Animations.BlendTree): void;
    BuildBreadCrumbsFromSMHierarchy(hierarchy: any): void;
    CenterGraph(): void;
    CenterView(): void;
    CenterViewOnFocus(): void;
    static DoWindow(): void;
    GoToBreadCrumbTarget(target: UnityEngine.Object): void;
    OnDisable(): void;
    OnEnable(): void;
    OnFocus(): void;
    OnGraphScroll(): void;
    OnGUI(): void;
    OnGUIEditor(editorRect: any): void;
    OnGUIEditorToolbar(topToolBarRect: any): void;
    OnInvalidateAnimatorController(): void;
    OnProjectChange(): void;
    OnSelectionChange(): void;
    RebuildGraph(updateSelection?: boolean): void;
    ResetUI(): void;
    UndoRedoPerformed(): void;
    animatorController: UnityEditor.Animations.AnimatorController;
    readonly autoLiveLink: boolean;
    isLocked: boolean;
    readonly liveLink: boolean;
    readonly liveLinkFollowTransitions: boolean;
    miniTool: boolean;
    readonly previewAnimator: any;
    selectedLayerIndex: number;
    readonly selectedObjects: UnityEngine.Object[];
    blendTreeGraph: UnityEditor.Graphs.AnimationBlendTree.Graph;
    blendTreeGraphGUI: UnityEditor.Graphs.AnimationBlendTree.GraphGUI;
    static graphDirtyCallback: (() => void);
    stateMachineGraph: UnityEditor.Graphs.AnimationStateMachine.Graph;
    stateMachineGraphGUI: UnityEditor.Graphs.AnimationStateMachine.GraphGUI;
    static tool: UnityEditor.Graphs.AnimatorControllerTool;
  }
}
declare namespace UnityEditor.Graphs.AnimatorControllerTool {
  class BreadCrumbElement extends System.Object {
    constructor(target: UnityEngine.Object);
    readonly name: string;
    scrollPosition: any;
    readonly target: UnityEngine.Object;
  }
}
declare namespace UnityEditor.Graphs.AnimatorControllerTool {
  class AnimatorViewPositionCache extends System.Object {
    constructor();
    GetViewPosition(target: UnityEngine.Object): any;
    HasViewPosition(target: UnityEngine.Object): boolean;
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    SetViewPosition(target: UnityEngine.Object, position: any): void;
  }
}
declare namespace UnityEditor.Graphs.AnimatorControllerTool {
  class Styles extends System.Object {
    constructor();
    bottomBarDarkBg: any;
    breadCrumbLeft: any;
    breadCrumbMid: any;
    invisibleButton: any;
    layers: any;
    liveLinkLabel: any;
    lockButtonStyle: any;
    nameLabel: any;
    parameters: any;
    visibleOFF: any;
    visibleON: any;
  }
}
declare namespace UnityEditor.Graphs.AnimatorControllerTool {
  class ScopedPreventWarnings extends System.Object {
    constructor(animator: any);
    Dispose(): void;
  }
}
declare namespace UnityEditor.Graphs {
  class IAnimatorControllerEditor {
    protected constructor();
    Repaint(): void;
    ResetUI(): void;
    animatorController: UnityEditor.Animations.AnimatorController;
    readonly liveLink: boolean;
    readonly previewAnimator: any;
  }
}
declare namespace UnityEditor.Graphs {
  class IAnimatorControllerSubEditor {
    protected constructor();
    GrabKeyboardFocus(): void;
    HasKeyboardControl(): boolean;
    Init(host: UnityEditor.Graphs.IAnimatorControllerEditor): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnEvent(): void;
    OnFocus(): void;
    OnGUI(rect: any): void;
    OnLostFocus(): void;
    OnToolbarGUI(): void;
    ReleaseKeyboardFocus(): void;
    ResetUI(): void;
    readonly renameOverlay: UnityEditor.RenameOverlay;
  }
}
declare namespace UnityEditor.Graphs {
  class LayerControllerView extends System.Object {
    constructor();
    GrabKeyboardFocus(): void;
    HasKeyboardControl(): boolean;
    Init(host: UnityEditor.Graphs.IAnimatorControllerEditor): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnEvent(): void;
    OnFocus(): void;
    OnGUI(rect: any): void;
    OnLostFocus(): void;
    OnToolbarGUI(): void;
    ReleaseKeyboardFocus(): void;
    ResetUI(): void;
    readonly renameOverlay: UnityEditor.RenameOverlay;
    selectedLayerIndex: number;
  }
}
declare namespace UnityEditor.Graphs.LayerControllerView {
  class Styles extends System.Object {
    constructor();
    addIcon: any;
    additive: any;
    elementBackground: any;
    ik: any;
    invisibleButton: any;
    label: any;
    layerLabel: any;
    mask: any;
    maskWarning: any;
    maskWarningIcon: any;
    progressBackground: any;
    progressEdit: any;
    progressLiveLink: any;
    settings: any;
    settingsIcon: any;
    sync: any;
    syncTime: any;
  }
}
declare namespace UnityEditor.Graphs {
  class LayerSettingsWindow extends UnityEditor.EditorWindow {
    constructor();
    readonly layer: UnityEditor.Animations.AnimatorControllerLayer;
    readonly layerIndex: number;
    static s_LayerSettingsWindow: UnityEditor.Graphs.LayerSettingsWindow;
  }
}
declare namespace UnityEditor.Graphs.LayerSettingsWindow {
  class Styles extends System.Object {
    constructor();
    blending: any;
    ik: any;
    mask: any;
    sourceLayer: any;
    sync: any;
    timing: any;
    weight: any;
  }
}
declare namespace UnityEditor.Graphs {
  class ParameterControllerEditor extends UnityEditor.EditorWindow {
    constructor();
    static DoWindow(): void;
    OnFocus(): void;
    OnGUI(): void;
    OnInspectorUpdate(): void;
    OnInvalidateAnimatorController(): void;
    OnProjectChange(): void;
    OnSelectionChange(): void;
    ResetUI(): void;
    animatorController: UnityEditor.Animations.AnimatorController;
    readonly liveLink: boolean;
    readonly previewAnimator: any;
    static tool: UnityEditor.Graphs.ParameterControllerEditor;
  }
}
declare namespace UnityEditor.Graphs {
  class ParameterControllerView extends System.Object {
    constructor();
    GrabKeyboardFocus(): void;
    HasKeyboardControl(): boolean;
    Init(host: UnityEditor.Graphs.IAnimatorControllerEditor): void;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnEvent(): void;
    OnFocus(): void;
    OnGUI(rect: any): void;
    OnLostFocus(): void;
    OnToolbarGUI(): void;
    ReleaseKeyboardFocus(): void;
    ResetUI(): void;
    UndoRedoPerformed(): void;
    readonly renameOverlay: UnityEditor.RenameOverlay;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class Element extends System.Object {
    constructor(parameter: any, host: UnityEditor.Graphs.ParameterControllerView);
    CompareTo(o: any): number;
    OnGUI(rect: any, index: number): void;
    OnSpecializedGUI(rect: any): void;
    name: string;
    m_Host: UnityEditor.Graphs.ParameterControllerView;
    m_Parameter: any;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class FloatElement extends UnityEditor.Graphs.ParameterControllerView.Element {
    constructor(parameter: any, host: UnityEditor.Graphs.ParameterControllerView);
    OnSpecializedGUI(rect: any): void;
    value: number;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class BoolElement extends UnityEditor.Graphs.ParameterControllerView.Element {
    constructor(parameter: any, host: UnityEditor.Graphs.ParameterControllerView);
    OnSpecializedGUI(rect: any): void;
    value: boolean;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class IntElement extends UnityEditor.Graphs.ParameterControllerView.Element {
    constructor(parameter: any, host: UnityEditor.Graphs.ParameterControllerView);
    OnSpecializedGUI(rect: any): void;
    value: number;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class TriggerElement extends UnityEditor.Graphs.ParameterControllerView.BoolElement {
    constructor(parameter: any, host: UnityEditor.Graphs.ParameterControllerView);
    OnSpecializedGUI(rect: any): void;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class Styles extends System.Object {
    constructor();
    elementBackground: any;
    evenBackground: any;
    iconToolbarPlusMore: any;
    invisibleButton: any;
    oddBackground: any;
    searchContent: any;
    triggerButton: any;
  }
}
declare namespace UnityEditor.Graphs.ParameterControllerView {
  class SearchMode extends System.Enum {
    protected constructor();
    static Bool: UnityEditor.Graphs.ParameterControllerView.SearchMode;
    static Float: UnityEditor.Graphs.ParameterControllerView.SearchMode;
    static Int: UnityEditor.Graphs.ParameterControllerView.SearchMode;
    static Name: UnityEditor.Graphs.ParameterControllerView.SearchMode;
    static Trigger: UnityEditor.Graphs.ParameterControllerView.SearchMode;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs.AnimationBlendTree {
  class Graph extends UnityEditor.Graphs.Graph {
    constructor();
    AutoArrangeNodePositions(): void;
    BuildFromBlendTree(blendTree: UnityEditor.Animations.BlendTree): void;
    Clear(destroyNodes: boolean): void;
    FindNode(motion: UnityEngine.Motion): UnityEditor.Graphs.AnimationBlendTree.Node;
    GetParameterValue(parameterName: string): number;
    PopulateParameterValues(): void;
    RemoveNodeMotions(nodes: any): void;
    SetParameterValue(parameterName: string, parameterValue: number): void;
    WakeUp(): void;
    WakeUp(force: boolean): void;
    readonly liveLink: boolean;
    rootBlendTree: UnityEditor.Animations.BlendTree;
    readonly rootNode: UnityEditor.Graphs.AnimationBlendTree.Node;
    previewAvatar: any;
  }
}
declare namespace UnityEditor.Graphs.AnimationBlendTree {
  class GraphGUI extends UnityEditor.Graphs.GraphGUI {
    constructor();
    ClearSelection(): void;
    static DeleteNodeDialog(toDelete: string[]): boolean;
    DoBackgroundClickAction(): void;
    NodeGUI(n: UnityEditor.Graphs.Node): void;
    OnGraphGUI(): void;
    SyncGraphToUnitySelection(force?: boolean): void;
    readonly blendTreeGraph: UnityEditor.Graphs.AnimationBlendTree.Graph;
  }
}
declare namespace UnityEditor.Graphs {
  class GraphGUI extends UnityEngine.ScriptableObject {
    protected constructor();
    AddTools(): void;
    BeginGraphGUI(host: UnityEditor.EditorWindow, position: any): void;
    BeginToolbarGUI(position: any): void;
    CenterGraph(): void;
    CenterGraph(center: any): void;
    ClearSelection(): void;
    DoBackgroundClickAction(): void;
    EndGraphGUI(): void;
    EndToolbarGUI(): void;
    LayoutSlot(s: UnityEditor.Graphs.Slot, title: string, allowStartDrag: boolean, allowEndDrag: boolean, allowMultiple: boolean, style: any): void;
    NodeGUI(n: UnityEditor.Graphs.Node): void;
    OnEnable(): void;
    OnGraphGUI(): void;
    OnNodeLibraryGUI(host: UnityEditor.EditorWindow, position: any): void;
    OnToolbarGUI(): void;
    Slot(position: any, title: string, s: UnityEditor.Graphs.Slot, allowStartDrag: boolean, allowEndDrag: boolean, allowMultiple: boolean, style: any): void;
    SyncGraphToUnitySelection(force?: boolean): void;
    ZoomToGraph(g: UnityEditor.Graphs.Graph): void;
    readonly edgeGUI: UnityEditor.Graphs.IEdgeGUI;
    graph: UnityEditor.Graphs.Graph;
    readonly scrollPosition: any;
    selection: UnityEditor.Graphs.Node[];
  }
}
declare namespace UnityEditor.Graphs.AnimationBlendTree {
  class Node extends UnityEditor.Graphs.Node {
    constructor();
    CreateParameters(): void;
    UpdateAnimator(): void;
    readonly animator: any;
    readonly blendTree: UnityEditor.Animations.BlendTree;
    readonly childIndex: number;
    readonly controllerDirty: boolean;
    readonly isLeaf: boolean;
    parent: UnityEditor.Graphs.AnimationBlendTree.Node;
    readonly weightColor: any;
    readonly weightEdgeColor: any;
    children: UnityEditor.Graphs.AnimationBlendTree.Node[];
    motion: UnityEngine.Motion;
    weight: number;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AddStateMachineBehaviourComponentWindow extends UnityEditor.EditorWindow {
    constructor();
    OnGUI(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.AddStateMachineBehaviourComponentWindow {
  class Element extends System.Object {
    constructor(name: string);
    CanShow(): boolean;
    CompareTo(o: any): number;
    Create(): void;
    Hide(): void;
    IsShow(): boolean;
    OnGUI(selected: boolean): boolean;
    Show(): void;
    readonly name: string;
    content: any;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.AddStateMachineBehaviourComponentWindow {
  class ScriptElement extends UnityEditor.Graphs.AnimationStateMachine.AddStateMachineBehaviourComponentWindow.Element {
    constructor(scriptName: string, scriptObject: UnityEditor.MonoScript);
    Create(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.AddStateMachineBehaviourComponentWindow {
  class NewScriptElement extends UnityEditor.Graphs.AnimationStateMachine.AddStateMachineBehaviourComponentWindow.Element {
    constructor(stateMachine: boolean);
    CanCreate(): boolean;
    CanShow(): boolean;
    Create(): void;
    Hide(): void;
    IsShow(): boolean;
    OnGUI(selected: boolean): boolean;
    Show(): void;
    TargetPath(): string;
    isShow: boolean;
    isStateMachine: boolean;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.AddStateMachineBehaviourComponentWindow {
  class Styles extends System.Object {
    constructor();
    background: any;
    behaviourContent: any;
    componentButton: any;
    header: any;
    leftArrow: any;
    rightArrow: any;
    searchContent: any;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AnimatorDefaultTransitionInspector extends UnityEditor.Graphs.AnimationStateMachine.AnimatorTransitionInspectorBase {
    protected constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AnimatorTransitionInspectorBase extends UnityEditor.Editor {
    protected constructor();
    DrawPreview(previewPosition: any): void;
    static DrawTransitionElementCommon(rect: any, transitionContext: UnityEditor.Graphs.AnimationStateMachine.TransitionEditionContext, selected: boolean, focused: boolean): void;
    static DrawTransitionHeaderCommon(rect: any): void;
    GetPreviewTitle(): any;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    SetTransitionContext(context: UnityEditor.Graphs.AnimationStateMachine.TransitionEditionContext): void;
    showTransitionList: boolean;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AnimatorStateTransitionInspector extends UnityEditor.Graphs.AnimationStateMachine.AnimatorTransitionInspectorBase {
    constructor();
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.AnimatorStateTransitionInspector {
  class Styles extends System.Object {
    constructor();
    exitTime: any;
    hasExitTime: any;
    hasFixedDuration: any;
    interruptionSource: any;
    orderedInterruption: any;
    transitionDurationFixed: any;
    transitionDurationNormalized: any;
    transitionOffset: any;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AnimatorTransitionInspector extends UnityEditor.Graphs.AnimationStateMachine.AnimatorTransitionInspectorBase {
    constructor();
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.AnimatorTransitionInspectorBase {
  class Styles extends System.Object {
    constructor();
    background: any;
    boxBackground: any;
    copyTransitionParameters: any;
    draggingHandle: any;
    errorIcon: any;
    footerBackground: any;
    headerBackground: any;
    iconToolbarMinus: any;
    iconToolbarPlus: any;
    pasteBoth: any;
    pasteConditions: any;
    pasteSettings: any;
    preBackground: any;
    preButton: any;
    previewTitle: any;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AnyStateNode extends UnityEditor.Graphs.AnimationStateMachine.Node {
    constructor();
    Connect(toNode: UnityEditor.Graphs.AnimationStateMachine.Node, edge: UnityEditor.Graphs.Edge): void;
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    OnDrag(): void;
    readonly selectionObject: UnityEngine.Object;
    readonly undoableObject: UnityEngine.Object;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class Node extends UnityEditor.Graphs.Node {
    constructor();
    BeginDrag(): void;
    Connect(toNode: UnityEditor.Graphs.AnimationStateMachine.Node, edge: UnityEditor.Graphs.Edge): void;
    static GenericMenuForStateMachineNode(toStateMachineNode: UnityEditor.Graphs.AnimationStateMachine.StateMachineNode, showStateMachine: boolean, func: ((userData: any) => void)): void;
    readonly selectionObject: UnityEngine.Object;
    readonly undoableObject: UnityEngine.Object;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class AnyStateNodeInspector extends UnityEditor.Editor {
    constructor();
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class EdgeGUI extends System.Object {
    constructor();
    BeginSlotDragging(slot: UnityEditor.Graphs.Slot, allowStartDrag: boolean, allowEndDrag: boolean): void;
    DoDraggedEdge(): void;
    DoEdges(): void;
    EndDragging(): void;
    EndSlotDragging(slot: UnityEditor.Graphs.Slot, allowMultiple: boolean): void;
    FindClosestEdge(): UnityEditor.Graphs.Edge;
    SlotDragging(slot: UnityEditor.Graphs.Slot, allowEndDrag: boolean, allowMultiple: boolean): void;
    edgeSelection: number[];
    host: UnityEditor.Graphs.GraphGUI;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class EdgeDebugState extends System.Enum {
    protected constructor();
    static MuteAll: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    static MuteAndSolo: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    static MuteSome: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    static Normal: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    static SoloAll: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    static SoloSome: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class EdgeType extends System.Enum {
    protected constructor();
    static MixedTransition: UnityEditor.Graphs.AnimationStateMachine.EdgeType;
    static StateTransition: UnityEditor.Graphs.AnimationStateMachine.EdgeType;
    static Transition: UnityEditor.Graphs.AnimationStateMachine.EdgeType;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class EdgeInfo extends System.Object {
    constructor(context: UnityEditor.Graphs.AnimationStateMachine.TransitionEditionContext);
    Add(context: UnityEditor.Graphs.AnimationStateMachine.TransitionEditionContext): void;
    HasTransition(nameHash: number): boolean;
    HasTransition(transition: UnityEditor.Animations.AnimatorTransitionBase): boolean;
    readonly debugState: UnityEditor.Graphs.AnimationStateMachine.EdgeDebugState;
    readonly edgeType: UnityEditor.Graphs.AnimationStateMachine.EdgeType;
    readonly hasDefaultState: boolean;
    readonly hasMultipleTransitions: boolean;
    transitions: UnityEditor.Graphs.AnimationStateMachine.TransitionEditionContext[];
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class EntryNode extends UnityEditor.Graphs.AnimationStateMachine.Node {
    constructor();
    Connect(toNode: UnityEditor.Graphs.AnimationStateMachine.Node, edge: UnityEditor.Graphs.Edge): void;
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    OnDrag(): void;
    readonly selectionObject: UnityEngine.Object;
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
    readonly undoableObject: UnityEngine.Object;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class EntryNodeInspector extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class ExitNode extends UnityEditor.Graphs.AnimationStateMachine.Node {
    constructor();
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    OnDrag(): void;
    readonly selectionObject: UnityEngine.Object;
    readonly undoableObject: UnityEngine.Object;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class ExitNodeInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class Graph extends UnityEditor.Graphs.Graph {
    constructor();
    BuildGraphFromStateMachine(stateMachine: UnityEditor.Animations.AnimatorStateMachine): void;
    DisplayDirty(): boolean;
    FindNode(state: UnityEditor.Animations.AnimatorState): UnityEditor.Graphs.AnimationStateMachine.Node;
    FindNode(stateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Graphs.AnimationStateMachine.Node;
    FindNodeForEdges(state: UnityEditor.Animations.AnimatorState): UnityEditor.Graphs.AnimationStateMachine.Node;
    FindNodeForEdges(stateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Graphs.AnimationStateMachine.Node;
    GetEdgeInfo(edge: UnityEditor.Graphs.Edge): UnityEditor.Graphs.AnimationStateMachine.EdgeInfo;
    GetStateMachinePath(stateMachine: UnityEditor.Animations.AnimatorStateMachine): string;
    GetStatePath(state: UnityEditor.Animations.AnimatorState): string;
    ReadNodePositions(): void;
    RebuildGraph(): void;
    SetStateMachines(stateMachine: UnityEditor.Animations.AnimatorStateMachine, parent: UnityEditor.Animations.AnimatorStateMachine, root: UnityEditor.Animations.AnimatorStateMachine): void;
    readonly activeStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    parentStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    rootStateMachine: UnityEditor.Animations.AnimatorStateMachine;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class GraphGUI extends UnityEditor.Graphs.GraphGUI {
    constructor();
    CenterOnFocus(): void;
    ClearSelection(): void;
    CopySelectionToPasteboard(): boolean;
    DeleteSelection(): void;
    DoBackgroundClickAction(): void;
    NodeGUI(n: UnityEditor.Graphs.Node): void;
    OnGraphGUI(): void;
    SyncGraphToUnitySelection(force?: boolean): void;
    readonly activeStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    readonly defaultTransition: UnityEditor.Animations.AnimatorDefaultTransition;
    readonly edgeGUI: UnityEditor.Graphs.IEdgeGUI;
    readonly hoveredStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    readonly liveLinkInfo: UnityEditor.Graphs.AnimationStateMachine.GraphGUI.LiveLinkInfo;
    readonly parentStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    readonly rootStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    readonly stateMachineGraph: UnityEditor.Graphs.AnimationStateMachine.Graph;
    readonly tool: UnityEditor.Graphs.AnimatorControllerTool;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.GraphGUI {
  class LiveLinkInfo extends System.ValueType {
    protected constructor();
    Clear(): void;
    currentState: UnityEditor.Animations.AnimatorState;
    currentStateLoopTime: boolean;
    currentStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    currentStateNormalizedTime: number;
    nextState: UnityEditor.Animations.AnimatorState;
    nextStateLoopTime: boolean;
    nextStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    nextStateNormalizedTime: number;
    transitionInfo: any;
    dstNode: UnityEditor.Graphs.AnimationStateMachine.Node;
    srcNode: UnityEditor.Graphs.AnimationStateMachine.Node;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class TransitionType extends System.Enum {
    protected constructor();
    static eAnyState: UnityEditor.Graphs.AnimationStateMachine.TransitionType;
    static eEntry: UnityEditor.Graphs.AnimationStateMachine.TransitionType;
    static eState: UnityEditor.Graphs.AnimationStateMachine.TransitionType;
    static eStateMachine: UnityEditor.Graphs.AnimationStateMachine.TransitionType;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class SourceNodeTransitionEditor extends System.Object {
    constructor(state: UnityEditor.Animations.AnimatorState, host: UnityEditor.Editor);
    constructor(stateMachine: UnityEditor.Animations.AnimatorStateMachine, type: UnityEditor.Graphs.AnimationStateMachine.TransitionType, host: UnityEditor.Editor);
    constructor(type: UnityEditor.Graphs.AnimationStateMachine.TransitionType, host: UnityEditor.Editor);
    AcquireActiveStateMachine(): void;
    AcquireController(): void;
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class StateEditor extends UnityEditor.Editor {
    constructor();
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RequiresConstantRepaint(): boolean;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class StateMachineBehaviourEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class InvalidStateMachineBehaviour extends UnityEngine.ScriptableObject {
    constructor();
    behaviourIndex: number;
    controller: UnityEditor.Animations.AnimatorController;
    layerIndex: number;
    monoScript: UnityEditor.MonoScript;
    state: UnityEditor.Animations.AnimatorState;
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class InvalidStateMachineBehaviourEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class StateMachineBehaviorsEditor extends System.Object {
    constructor(state: UnityEditor.Animations.AnimatorState, host: UnityEditor.Editor);
    constructor(stateMachine: UnityEditor.Animations.AnimatorStateMachine, host: UnityEditor.Editor);
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    readonly state: UnityEditor.Animations.AnimatorState;
    readonly stateMachine: UnityEditor.Animations.AnimatorStateMachine;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine.StateMachineBehaviorsEditor {
  class Styles extends System.Object {
    constructor();
    addBehaviourButtonStyle: any;
    addBehaviourLabel: any;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class StateMachineInspector extends UnityEditor.Editor {
    constructor();
    HasPreviewGUI(): boolean;
    OnDestroy(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    RequiresConstantRepaint(): boolean;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class StateMachineNode extends UnityEditor.Graphs.AnimationStateMachine.Node {
    constructor();
    Connect(toNode: UnityEditor.Graphs.AnimationStateMachine.Node, edge: UnityEditor.Graphs.Edge): void;
    DeleteStateMachineCallback(): void;
    EndDrag(): void;
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    OnDrag(): void;
    readonly selectionObject: UnityEngine.Object;
    title: string;
    readonly undoableObject: UnityEngine.Object;
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class StateNode extends UnityEditor.Graphs.AnimationStateMachine.Node {
    constructor();
    Connect(toNode: UnityEditor.Graphs.AnimationStateMachine.Node, edge: UnityEditor.Graphs.Edge): void;
    DeleteStateCallback(): void;
    EndDrag(): void;
    NodeUI(host: UnityEditor.Graphs.GraphGUI): void;
    OnDrag(): void;
    readonly selectionObject: UnityEngine.Object;
    title: string;
    readonly undoableObject: UnityEngine.Object;
    state: UnityEditor.Animations.AnimatorState;
  }
}
declare namespace UnityEditor.Graphs.AnimationStateMachine {
  class TransitionEditionContext extends System.Object {
    constructor(aTransition: UnityEditor.Animations.AnimatorTransitionBase, aSourceState: UnityEditor.Animations.AnimatorState, aSourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, aOwnerStateMachine: UnityEditor.Animations.AnimatorStateMachine, aController: UnityEditor.Animations.AnimatorController);
    Remove(rebuildGraph?: boolean): void;
    readonly displayName: string;
    readonly fullName: string;
    readonly isAnyStateTransition: boolean;
    readonly isDefaultTransition: boolean;
    controller: UnityEditor.Animations.AnimatorController;
    ownerStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    sourceState: UnityEditor.Animations.AnimatorState;
    sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    transition: UnityEditor.Animations.AnimatorTransitionBase;
  }
}
declare namespace UnityEditor.Graphs {
  class EdgeGUI extends System.Object {
    constructor();
    BeginSlotDragging(slot: UnityEditor.Graphs.Slot, allowStartDrag: boolean, allowEndDrag: boolean): void;
    DoDraggedEdge(): void;
    DoEdges(): void;
    EndDragging(): void;
    EndSlotDragging(slot: UnityEditor.Graphs.Slot, allowMultiple: boolean): void;
    FindClosestEdge(): UnityEditor.Graphs.Edge;
    SlotDragging(slot: UnityEditor.Graphs.Slot, allowEndDrag: boolean, allowMultiple: boolean): void;
    edgeSelection: number[];
    host: UnityEditor.Graphs.GraphGUI;
    edgeStyle: UnityEditor.Graphs.EdgeGUI.EdgeStyle;
    static kFunctionEdgeColor: any;
    static kObjectTypeEdgeColor: any;
    static kSimpleTypeEdgeColor: any;
  }
}
declare namespace UnityEditor.Graphs.EdgeGUI {
  class EdgeStyle extends System.Enum {
    protected constructor();
    static Angular: UnityEditor.Graphs.EdgeGUI.EdgeStyle;
    static Curvy: UnityEditor.Graphs.EdgeGUI.EdgeStyle;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs.GraphGUI {
  class NodeTool extends System.Object {
    constructor(category: string, title: string, createNodeFunc: (() => UnityEditor.Graphs.Node));
    category: string;
    content: any;
    createNodeFunc: (() => UnityEditor.Graphs.Node);
    visible: boolean;
  }
}
declare namespace UnityEditor.Graphs.GraphGUI {
  class SelectionDragMode extends System.Enum {
    protected constructor();
    static None: UnityEditor.Graphs.GraphGUI.SelectionDragMode;
    static Pick: UnityEditor.Graphs.GraphGUI.SelectionDragMode;
    static Rect: UnityEditor.Graphs.GraphGUI.SelectionDragMode;
    value__: number;
  }
}
declare namespace UnityEditor.Graphs.GraphGUI {
  class ContextMenuData extends System.Object {
    constructor();
    items: any[];
    mousePosition: any;
  }
}
declare namespace UnityEditor.Graphs {
  class IEdgeGUI {
    protected constructor();
    BeginSlotDragging(slot: UnityEditor.Graphs.Slot, allowStartDrag: boolean, allowEndDrag: boolean): void;
    DoDraggedEdge(): void;
    DoEdges(): void;
    EndDragging(): void;
    EndSlotDragging(slot: UnityEditor.Graphs.Slot, allowMultiple: boolean): void;
    FindClosestEdge(): UnityEditor.Graphs.Edge;
    SlotDragging(slot: UnityEditor.Graphs.Slot, allowEndDrag: boolean, allowMultiple: boolean): void;
    edgeSelection: number[];
    host: UnityEditor.Graphs.GraphGUI;
  }
}
declare namespace UnityEditor.Graphs {
  class Styles extends System.Object {
    constructor();
    static GetNodeStyle(styleName: string, color: UnityEditor.Graphs.Styles.Color, on: boolean): any;
    static connectionTexture: any;
    static graphBackground: any;
    static nodeAddButton: any;
    static nodeGroupButton: any;
    static nodeTitlebar: any;
    static selectedConnectionTexture: any;
    static selectionRect: any;
    static targetPinIn: any;
    static triggerPinIn: any;
    static triggerPinOut: any;
    static varPinIn: any;
    static varPinOut: any;
    static varPinTooltip: any;
  }
}
declare namespace UnityEditor.Graphs.Styles {
  class Color extends System.Enum {
    protected constructor();
    static Aqua: UnityEditor.Graphs.Styles.Color;
    static Blue: UnityEditor.Graphs.Styles.Color;
    static Gray: UnityEditor.Graphs.Styles.Color;
    static Green: UnityEditor.Graphs.Styles.Color;
    static Grey: UnityEditor.Graphs.Styles.Color;
    static Orange: UnityEditor.Graphs.Styles.Color;
    static Red: UnityEditor.Graphs.Styles.Color;
    value__: number;
    static Yellow: UnityEditor.Graphs.Styles.Color;
  }
}
declare namespace UnityEditor.Graphs {
  class TypeSelector extends System.Object {
    constructor();
    constructor(types: string[]);
    constructor(onlyComponents: boolean);
    DoGUI(): boolean;
    static DotNetTypeNiceName(t: any): string;
    DoTypeKindGUI(): boolean;
    static GetBaseType(typeKind: UnityEditor.Graphs.TypeSelector.TypeKind, finalType: any): any;
    static GetFinalType(typeKind: UnityEditor.Graphs.TypeSelector.TypeKind, baseType: any): any;
    static GetTypeKind(dataType: any): UnityEditor.Graphs.TypeSelector.TypeKind;
    selectedType: any;
    selectedTypeKind: UnityEditor.Graphs.TypeSelector.TypeKind;
  }
}
declare namespace UnityEditor.Graphs.TypeSelector {
  class TypeKind extends System.Enum {
    protected constructor();
    static Array: UnityEditor.Graphs.TypeSelector.TypeKind;
    static List: UnityEditor.Graphs.TypeSelector.TypeKind;
    static Simple: UnityEditor.Graphs.TypeSelector.TypeKind;
    value__: number;
  }
}
declare namespace UnityEditor.XR.WSAInternal {
  class Placeholder extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingBaseInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingColliderInspector extends UnityEngine.XR.WSA.SpatialMappingBaseInspector {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEngine.XR.WSA {
  class SpatialMappingRendererInspector extends UnityEngine.XR.WSA.SpatialMappingBaseInspector {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class DeviceTypeRequirement extends System.Object {
    constructor();
    static Any: string;
    static iPad: string;
    static iPhone: string;
    static iWatch: string;
    static Key: string;
    static Mac: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class MemoryRequirement extends System.Object {
    constructor();
    static Any: string;
    static Key: string;
    static Mem1GB: string;
    static Mem2GB: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class GraphicsRequirement extends System.Object {
    constructor();
    static Any: string;
    static Key: string;
    static Metal1v2: string;
    static Metal2v2: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class SizeClassRequirement extends System.Object {
    constructor();
    static Any: string;
    static Compact: string;
    static HeightKey: string;
    static Regular: string;
    static WidthKey: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class ScaleRequirement extends System.Object {
    constructor();
    static Any: string;
    static Key: string;
    static X1: string;
    static X2: string;
    static X3: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class DeviceRequirement extends System.Object {
    constructor();
    AddCustom(key: string, value: string): UnityEditor.iOS.Xcode.DeviceRequirement;
    AddDevice(device: string): UnityEditor.iOS.Xcode.DeviceRequirement;
    AddGraphics(graphics: string): UnityEditor.iOS.Xcode.DeviceRequirement;
    AddHeightClass(sizeClass: string): UnityEditor.iOS.Xcode.DeviceRequirement;
    AddMemory(memory: string): UnityEditor.iOS.Xcode.DeviceRequirement;
    AddScale(scale: string): UnityEditor.iOS.Xcode.DeviceRequirement;
    AddWidthClass(sizeClass: string): UnityEditor.iOS.Xcode.DeviceRequirement;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetCatalog extends System.Object {
    constructor(path: string, authorId: string);
    OpenBrandAssetGroup(relativePath: string): UnityEditor.iOS.Xcode.AssetBrandAssetGroup;
    OpenDataSet(relativePath: string): UnityEditor.iOS.Xcode.AssetDataSet;
    OpenFolder(relativePath: string): UnityEditor.iOS.Xcode.AssetFolder;
    OpenImageSet(relativePath: string): UnityEditor.iOS.Xcode.AssetImageSet;
    OpenImageStack(relativePath: string): UnityEditor.iOS.Xcode.AssetImageStack;
    OpenNamespacedFolder(relativeBasePath: string, namespacePath: string): UnityEditor.iOS.Xcode.AssetFolder;
    Write(): void;
    Write(warnings: string[]): void;
    readonly path: string;
    readonly root: UnityEditor.iOS.Xcode.AssetFolder;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetCatalogItem extends System.Object {
    constructor(name: string, authorId: string);
    Write(warnings: string[]): void;
    readonly path: string;
    authorId: string;
    name: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetFolder extends UnityEditor.iOS.Xcode.AssetCatalogItem {
    protected constructor();
    GetChild(name: string): UnityEditor.iOS.Xcode.AssetCatalogItem;
    OpenBrandAssetGroup(name: string): UnityEditor.iOS.Xcode.AssetBrandAssetGroup;
    OpenDataSet(name: string): UnityEditor.iOS.Xcode.AssetDataSet;
    OpenFolder(name: string): UnityEditor.iOS.Xcode.AssetFolder;
    OpenImageSet(name: string): UnityEditor.iOS.Xcode.AssetImageSet;
    OpenImageStack(name: string): UnityEditor.iOS.Xcode.AssetImageStack;
    Write(warnings: string[]): void;
    providesNamespace: boolean;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetCatalogItemWithVariants extends UnityEditor.iOS.Xcode.AssetCatalogItem {
    protected constructor();
    AddOnDemandResourceTag(tag: string): void;
    HasVariant(requirement: UnityEditor.iOS.Xcode.DeviceRequirement): boolean;
  }
}
declare namespace UnityEditor.iOS.Xcode.AssetCatalogItemWithVariants {
  class VariantData extends System.Object {
    constructor(requirement: UnityEditor.iOS.Xcode.DeviceRequirement, path: string);
    path: string;
    requirement: UnityEditor.iOS.Xcode.DeviceRequirement;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetDataSet extends UnityEditor.iOS.Xcode.AssetCatalogItemWithVariants {
    protected constructor();
    AddVariant(requirement: UnityEditor.iOS.Xcode.DeviceRequirement, path: string, typeIdentifier: string): void;
    Write(warnings: string[]): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.AssetDataSet {
  class DataSetVariant extends UnityEditor.iOS.Xcode.AssetCatalogItemWithVariants.VariantData {
    constructor(requirement: UnityEditor.iOS.Xcode.DeviceRequirement, path: string, id: string);
    id: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class ImageAlignment extends System.Object {
    constructor();
    bottom: number;
    left: number;
    right: number;
    top: number;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class ImageResizing extends System.Object {
    constructor();
    bottom: number;
    centerHeight: number;
    centerResizeMode: UnityEditor.iOS.Xcode.ImageResizing.ResizeMode;
    centerWidth: number;
    left: number;
    right: number;
    top: number;
    type: UnityEditor.iOS.Xcode.ImageResizing.SlicingType;
  }
}
declare namespace UnityEditor.iOS.Xcode.ImageResizing {
  class SlicingType extends System.Enum {
    protected constructor();
    static Horizontal: UnityEditor.iOS.Xcode.ImageResizing.SlicingType;
    static HorizontalAndVertical: UnityEditor.iOS.Xcode.ImageResizing.SlicingType;
    value__: number;
    static Vertical: UnityEditor.iOS.Xcode.ImageResizing.SlicingType;
  }
}
declare namespace UnityEditor.iOS.Xcode.ImageResizing {
  class ResizeMode extends System.Enum {
    protected constructor();
    static Stretch: UnityEditor.iOS.Xcode.ImageResizing.ResizeMode;
    static Tile: UnityEditor.iOS.Xcode.ImageResizing.ResizeMode;
    value__: number;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetImageSet extends UnityEditor.iOS.Xcode.AssetCatalogItemWithVariants {
    protected constructor();
    AddVariant(requirement: UnityEditor.iOS.Xcode.DeviceRequirement, path: string): void;
    AddVariant(requirement: UnityEditor.iOS.Xcode.DeviceRequirement, path: string, alignment: UnityEditor.iOS.Xcode.ImageAlignment, resizing: UnityEditor.iOS.Xcode.ImageResizing): void;
    Write(warnings: string[]): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.AssetImageSet {
  class ImageSetVariant extends UnityEditor.iOS.Xcode.AssetCatalogItemWithVariants.VariantData {
    constructor(requirement: UnityEditor.iOS.Xcode.DeviceRequirement, path: string);
    alignment: UnityEditor.iOS.Xcode.ImageAlignment;
    resizing: UnityEditor.iOS.Xcode.ImageResizing;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetImageStackLayer extends UnityEditor.iOS.Xcode.AssetCatalogItem {
    protected constructor();
    GetImageSet(): UnityEditor.iOS.Xcode.AssetImageSet;
    ReferencedName(): string;
    SetReference(name: string): void;
    Write(warnings: string[]): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetImageStack extends UnityEditor.iOS.Xcode.AssetCatalogItem {
    protected constructor();
    AddLayer(name: string): UnityEditor.iOS.Xcode.AssetImageStackLayer;
    Write(warnings: string[]): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssetBrandAssetGroup extends UnityEditor.iOS.Xcode.AssetCatalogItem {
    protected constructor();
    OpenImageSet(name: string, idiom: string, role: string, width: number, height: number): UnityEditor.iOS.Xcode.AssetImageSet;
    OpenImageStack(name: string, idiom: string, role: string, width: number, height: number): UnityEditor.iOS.Xcode.AssetImageStack;
    Write(warnings: string[]): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.AssetBrandAssetGroup {
  class AssetBrandAssetItem extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonElement extends System.Object {
    protected constructor();
    AsArray(): UnityEditor.iOS.Xcode.JsonElementArray;
    AsBoolean(): boolean;
    AsDict(): UnityEditor.iOS.Xcode.JsonElementDict;
    AsInteger(): number;
    AsString(): string;
    get_Item(key: string): UnityEditor.iOS.Xcode.JsonElement;
    set_Item(key: string, value: UnityEditor.iOS.Xcode.JsonElement): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonElementString extends UnityEditor.iOS.Xcode.JsonElement {
    constructor(v: string);
    value: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonElementInteger extends UnityEditor.iOS.Xcode.JsonElement {
    constructor(v: number);
    value: number;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonElementBoolean extends UnityEditor.iOS.Xcode.JsonElement {
    constructor(v: boolean);
    value: boolean;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonElementDict extends UnityEditor.iOS.Xcode.JsonElement {
    constructor();
    Contains(key: string): boolean;
    CreateArray(key: string): UnityEditor.iOS.Xcode.JsonElementArray;
    CreateDict(key: string): UnityEditor.iOS.Xcode.JsonElementDict;
    Remove(key: string): void;
    SetBoolean(key: string, val: boolean): void;
    SetInteger(key: string, val: number): void;
    SetString(key: string, val: string): void;
    get_Item(key: string): UnityEditor.iOS.Xcode.JsonElement;
    set_Item(key: string, value: UnityEditor.iOS.Xcode.JsonElement): void;
    readonly values: any;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonElementArray extends UnityEditor.iOS.Xcode.JsonElement {
    constructor();
    AddArray(): UnityEditor.iOS.Xcode.JsonElementArray;
    AddBoolean(val: boolean): void;
    AddDict(): UnityEditor.iOS.Xcode.JsonElementDict;
    AddInteger(val: number): void;
    AddString(val: string): void;
    values: UnityEditor.iOS.Xcode.JsonElement[];
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class JsonDocument extends System.Object {
    constructor();
    WriteToFile(path: string): void;
    WriteToStream(tw: any): void;
    WriteToString(): string;
    indentString: string;
    root: UnityEditor.iOS.Xcode.JsonElementDict;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PBXCapabilityType extends System.Object {
    protected constructor();
    static StringToPBXCapabilityType(cap: string): UnityEditor.iOS.Xcode.PBXCapabilityType;
    readonly framework: string;
    readonly id: string;
    readonly optionalFramework: boolean;
    readonly requiresEntitlements: boolean;
    static AppGroups: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static ApplePay: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static AssociatedDomains: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static BackgroundModes: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static DataProtection: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static GameCenter: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static HealthKit: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static HomeKit: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static iCloud: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static InAppPurchase: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static InterAppAudio: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static KeychainSharing: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static Maps: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static PersonalVPN: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static PushNotifications: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static Siri: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static Wallet: UnityEditor.iOS.Xcode.PBXCapabilityType;
    static WirelessAccessoryConfiguration: UnityEditor.iOS.Xcode.PBXCapabilityType;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBXCapabilityType {
  class TargetCapabilityPair extends System.ValueType {
    protected constructor();
    capability: UnityEditor.iOS.Xcode.PBXCapabilityType;
    targetGuid: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PBXPath extends System.Object {
    constructor();
    static Combine(path1: string, path2: string): string;
    static Combine(path1: string, tree1: UnityEditor.iOS.Xcode.PBXSourceTree, path2: string, tree2: UnityEditor.iOS.Xcode.PBXSourceTree, resPath: any, resTree: any): void;
    static FixSlashes(path: string): string;
    static GetCurrentDirectory(): string;
    static GetDirectory(path: string): string;
    static GetFilename(path: string): string;
    static GetFullPath(path: string): string;
    static IsPathRooted(path: string): boolean;
    static Split(path: string): string[];
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PBXSourceTree extends System.Enum {
    protected constructor();
    static Absolute: UnityEditor.iOS.Xcode.PBXSourceTree;
    static Build: UnityEditor.iOS.Xcode.PBXSourceTree;
    static Developer: UnityEditor.iOS.Xcode.PBXSourceTree;
    static Group: UnityEditor.iOS.Xcode.PBXSourceTree;
    static Sdk: UnityEditor.iOS.Xcode.PBXSourceTree;
    static Source: UnityEditor.iOS.Xcode.PBXSourceTree;
    value__: number;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PBXProject extends System.Object {
    constructor();
    AddAssetTagForFile(targetGuid: string, fileGuid: string, tag: string): void;
    AddAssetTagToDefaultInstall(targetGuid: string, tag: string): void;
    AddBuildConfig(name: string): void;
    AddBuildProperty(targetGuids: any, name: string, value: string): void;
    AddBuildProperty(targetGuid: string, name: string, value: string): void;
    AddBuildPropertyForConfig(configGuids: any, name: string, value: string): void;
    AddBuildPropertyForConfig(configGuid: string, name: string, value: string): void;
    AddCapability(targetGuid: string, capability: UnityEditor.iOS.Xcode.PBXCapabilityType, entitlementsFilePath?: string, addOptionalFramework?: boolean): boolean;
    AddCopyFilesBuildPhase(targetGuid: string, name: string, dstPath: string, subfolderSpec: string): string;
    AddFile(path: string, projectPath: string, sourceTree?: UnityEditor.iOS.Xcode.PBXSourceTree): string;
    AddFileToBuild(targetGuid: string, fileGuid: string): void;
    AddFileToBuildSection(targetGuid: string, sectionGuid: string, fileGuid: string): void;
    AddFileToBuildWithFlags(targetGuid: string, fileGuid: string, compileFlags: string): void;
    AddFolderReference(path: string, projectPath: string, sourceTree?: UnityEditor.iOS.Xcode.PBXSourceTree): string;
    AddFrameworksBuildPhase(targetGuid: string): string;
    AddFrameworkToProject(targetGuid: string, framework: string, weak: boolean): void;
    AddResourcesBuildPhase(targetGuid: string): string;
    AddSourcesBuildPhase(targetGuid: string): string;
    AddTarget(name: string, ext: string, type: string): string;
    BuildConfigByName(targetGuid: string, name: string): string;
    BuildConfigNames(): any;
    ContainsFileByProjectPath(path: string): boolean;
    ContainsFileByRealPath(path: string): boolean;
    ContainsFileByRealPath(path: string, sourceTree: UnityEditor.iOS.Xcode.PBXSourceTree): boolean;
    ContainsFramework(targetGuid: string, framework: string): boolean;
    FindFileGuidByProjectPath(path: string): string;
    FindFileGuidByRealPath(path: string): string;
    FindFileGuidByRealPath(path: string, sourceTree: UnityEditor.iOS.Xcode.PBXSourceTree): string;
    GetCompileFlagsForFile(targetGuid: string, fileGuid: string): string[];
    GetCopyFilesBuildPhaseByTarget(targetGuid: string, name: string, dstPath: string, subfolderSpec: string): string;
    GetFrameworksBuildPhaseByTarget(targetGuid: string): string;
    static GetPBXProjectPath(buildPath: string): string;
    GetResourcesBuildPhaseByTarget(targetGuid: string): string;
    GetSourcesBuildPhaseByTarget(targetGuid: string): string;
    GetTargetProductFileRef(targetGuid: string): string;
    static GetUnityTargetName(): string;
    static GetUnityTestTargetName(): string;
    static IsBuildable(ext: string): boolean;
    static IsKnownExtension(ext: string): boolean;
    ProjectGuid(): string;
    ReadFromFile(path: string): void;
    ReadFromStream(sr: any): void;
    ReadFromString(src: string): void;
    RemoveAssetTag(tag: string): void;
    RemoveAssetTagForFile(targetGuid: string, fileGuid: string, tag: string): void;
    RemoveAssetTagFromDefaultInstall(targetGuid: string, tag: string): void;
    RemoveBuildConfig(name: string): void;
    RemoveFile(fileGuid: string): void;
    RemoveFileFromBuild(targetGuid: string, fileGuid: string): void;
    RemoveFrameworkFromProject(targetGuid: string, framework: string): void;
    SetBuildProperty(targetGuids: any, name: string, value: string): void;
    SetBuildProperty(targetGuid: string, name: string, value: string): void;
    SetBuildPropertyForConfig(configGuids: any, name: string, value: string): void;
    SetBuildPropertyForConfig(configGuid: string, name: string, value: string): void;
    SetCompileFlagsForFile(targetGuid: string, fileGuid: string, compileFlags: string[]): void;
    SetTeamId(targetGuid: string, teamId: string): void;
    TargetGuidByName(name: string): string;
    UpdateBuildProperty(targetGuids: any, name: string, addValues: any, removeValues: any): void;
    UpdateBuildProperty(targetGuid: string, name: string, addValues: any, removeValues: any): void;
    UpdateBuildPropertyForConfig(configGuids: any, name: string, addValues: any, removeValues: any): void;
    UpdateBuildPropertyForConfig(configGuid: string, name: string, addValues: any, removeValues: any): void;
    WriteToFile(path: string): void;
    WriteToStream(sw: any): void;
    WriteToString(): string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PBXProjectData extends System.Object {
    constructor();
    BuildFilesAdd(targetGuid: string, buildFile: UnityEditor.iOS.Xcode.PBX.PBXBuildFileData): void;
    BuildFilesGet(guid: string): UnityEditor.iOS.Xcode.PBX.PBXBuildFileData;
    BuildFilesGetAll(): any;
    BuildFilesGetForSourceFile(targetGuid: string, fileGuid: string): UnityEditor.iOS.Xcode.PBX.PBXBuildFileData;
    BuildFilesRemove(targetGuid: string, fileGuid: string): void;
    BuildSectionAny(sectionGuid: string): UnityEditor.iOS.Xcode.PBX.FileGUIDListBase;
    BuildSectionAny(target: UnityEditor.iOS.Xcode.PBX.PBXNativeTargetData, path: string, isFolderRef: boolean): UnityEditor.iOS.Xcode.PBX.FileGUIDListBase;
    Clear(): void;
    FileRefsAdd(realPath: string, projectPath: string, parent: UnityEditor.iOS.Xcode.PBX.PBXGroupData, fileRef: UnityEditor.iOS.Xcode.PBX.PBXFileReferenceData): void;
    FileRefsGet(guid: string): UnityEditor.iOS.Xcode.PBX.PBXFileReferenceData;
    FileRefsGetByProjectPath(path: string): UnityEditor.iOS.Xcode.PBX.PBXFileReferenceData;
    FileRefsGetByRealPath(path: string, sourceTree: UnityEditor.iOS.Xcode.PBXSourceTree): UnityEditor.iOS.Xcode.PBX.PBXFileReferenceData;
    FileRefsRemove(guid: string): void;
    GroupsAdd(projectPath: string, parent: UnityEditor.iOS.Xcode.PBX.PBXGroupData, gr: UnityEditor.iOS.Xcode.PBX.PBXGroupData): void;
    GroupsAddDuplicate(gr: UnityEditor.iOS.Xcode.PBX.PBXGroupData): void;
    GroupsGet(guid: string): UnityEditor.iOS.Xcode.PBX.PBXGroupData;
    GroupsGetByChild(childGuid: string): UnityEditor.iOS.Xcode.PBX.PBXGroupData;
    GroupsGetByProjectPath(sourceGroup: string): UnityEditor.iOS.Xcode.PBX.PBXGroupData;
    GroupsGetMainGroup(): UnityEditor.iOS.Xcode.PBX.PBXGroupData;
    GroupsRemove(guid: string): void;
    ReadFromStream(sr: any): void;
    WriteToString(): string;
    buildConfigLists: any;
    buildConfigs: any;
    containerItems: any;
    copyFiles: any;
    frameworks: any;
    nativeTargets: any;
    project: UnityEditor.iOS.Xcode.PBX.PBXProjectSection;
    references: any;
    resources: any;
    shellScripts: any;
    sources: any;
    targetDependencies: any;
    variantGroups: any;
  }
}
declare namespace UnityEditor.iOS.Xcode.Extensions {
  class PBXProjectExtensions extends System.Object {
    protected constructor();
    static AddAppExtension(proj: UnityEditor.iOS.Xcode.PBXProject, mainTargetGuid: string, name: string, bundleId: string, infoPlistPath: string): string;
    static AddFileToEmbedFrameworks(proj: UnityEditor.iOS.Xcode.PBXProject, targetGuid: string, fileGuid: string): void;
    static AddWatchApp(proj: UnityEditor.iOS.Xcode.PBXProject, mainTargetGuid: string, watchExtensionTargetGuid: string, name: string, bundleId: string, infoPlistPath: string): string;
    static AddWatchExtension(proj: UnityEditor.iOS.Xcode.PBXProject, mainTarget: string, name: string, bundleId: string, infoPlistPath: string): string;
  }
}
declare namespace UnityEditor.iOS.Xcode.Extensions.PBXProjectExtensions {
  class FlagList {
    constructor();
    Add(item: any): void;
    Add(flag: string, value: string): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: any, comparer: any): number;
    BinarySearch(item: any): number;
    BinarySearch(item: any, comparer: any): number;
    Clear(): void;
    Contains(item: any): boolean;
    CopyTo(index: number, array: any[], arrayIndex: number, count: number): void;
    CopyTo(array: any[]): void;
    CopyTo(array: any[], arrayIndex: number): void;
    Equals(obj: any): boolean;
    Exists(match: ((obj: any) => boolean)): boolean;
    Find(match: ((obj: any) => boolean)): any;
    FindAll(match: ((obj: any) => boolean)): any[];
    FindIndex(startIndex: number, count: number, match: ((obj: any) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: any) => boolean)): number;
    FindIndex(match: ((obj: any) => boolean)): number;
    FindLast(match: ((obj: any) => boolean)): any;
    FindLastIndex(startIndex: number, count: number, match: ((obj: any) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: any) => boolean)): number;
    FindLastIndex(match: ((obj: any) => boolean)): number;
    ForEach(action: ((obj: any) => void)): void;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetRange(index: number, count: number): any[];
    GetType(): any;
    IndexOf(item: any): number;
    IndexOf(item: any, index: number): number;
    IndexOf(item: any, index: number, count: number): number;
    Insert(index: number, item: any): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: any): number;
    LastIndexOf(item: any, index: number): number;
    LastIndexOf(item: any, index: number, count: number): number;
    Remove(item: any): boolean;
    RemoveAll(match: ((obj: any) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: any, y: any) => number)): void;
    ToArray(): any[];
    ToString(): string;
    TrimExcess(): void;
    TrueForAll(match: ((obj: any) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): any;
    set_Item(index: number, value: any): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistElement extends System.Object {
    protected constructor();
    AsArray(): UnityEditor.iOS.Xcode.PlistElementArray;
    AsBoolean(): boolean;
    AsDict(): UnityEditor.iOS.Xcode.PlistElementDict;
    AsInteger(): number;
    AsString(): string;
    get_Item(key: string): UnityEditor.iOS.Xcode.PlistElement;
    set_Item(key: string, value: UnityEditor.iOS.Xcode.PlistElement): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistElementString extends UnityEditor.iOS.Xcode.PlistElement {
    constructor(v: string);
    value: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistElementInteger extends UnityEditor.iOS.Xcode.PlistElement {
    constructor(v: number);
    value: number;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistElementBoolean extends UnityEditor.iOS.Xcode.PlistElement {
    constructor(v: boolean);
    value: boolean;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistElementDict extends UnityEditor.iOS.Xcode.PlistElement {
    constructor();
    CreateArray(key: string): UnityEditor.iOS.Xcode.PlistElementArray;
    CreateDict(key: string): UnityEditor.iOS.Xcode.PlistElementDict;
    SetBoolean(key: string, val: boolean): void;
    SetInteger(key: string, val: number): void;
    SetString(key: string, val: string): void;
    get_Item(key: string): UnityEditor.iOS.Xcode.PlistElement;
    set_Item(key: string, value: UnityEditor.iOS.Xcode.PlistElement): void;
    readonly values: any;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistElementArray extends UnityEditor.iOS.Xcode.PlistElement {
    constructor();
    AddArray(): UnityEditor.iOS.Xcode.PlistElementArray;
    AddBoolean(val: boolean): void;
    AddDict(): UnityEditor.iOS.Xcode.PlistElementDict;
    AddInteger(val: number): void;
    AddString(val: string): void;
    values: UnityEditor.iOS.Xcode.PlistElement[];
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PlistDocument extends System.Object {
    constructor();
    Create(): void;
    ReadFromFile(path: string): void;
    ReadFromStream(tr: any): void;
    ReadFromString(text: string): void;
    WriteToFile(path: string): void;
    WriteToStream(tw: any): void;
    WriteToString(): string;
    root: UnityEditor.iOS.Xcode.PlistElementDict;
    version: string;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class ProjectCapabilityManager extends System.Object {
    constructor(pbxProjectPath: string, entitlementFilePath: string, targetName: string);
    AddAppGroups(groups: string[]): void;
    AddApplePay(merchants: string[]): void;
    AddAssociatedDomains(domains: string[]): void;
    AddBackgroundModes(options: UnityEditor.iOS.Xcode.BackgroundModesOptions): void;
    AddDataProtection(): void;
    AddGameCenter(): void;
    AddHealthKit(): void;
    AddHomeKit(): void;
    AddiCloud(keyValueStorage: boolean, iCloudDocument: boolean, customContainers: string[]): void;
    AddInAppPurchase(): void;
    AddInterAppAudio(): void;
    AddKeychainSharing(accessGroups: string[]): void;
    AddMaps(options: UnityEditor.iOS.Xcode.MapsOptions): void;
    AddPersonalVPN(): void;
    AddPushNotifications(development: boolean): void;
    AddSiri(): void;
    AddWallet(passSubset: string[]): void;
    AddWirelessAccessoryConfiguration(): void;
    WriteToFile(): void;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class BackgroundModesOptions extends System.Enum {
    protected constructor();
    static ActsAsABluetoothLEAccessory: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static AudioAirplayPiP: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static BackgroundFetch: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static ExternalAccessoryCommunication: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static LocationUpdates: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static NewsstandDownloads: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static None: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static RemoteNotifications: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    static UsesBluetoothLEAccessory: UnityEditor.iOS.Xcode.BackgroundModesOptions;
    value__: number;
    static VoiceOverIP: UnityEditor.iOS.Xcode.BackgroundModesOptions;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class MapsOptions extends System.Enum {
    protected constructor();
    static Airplane: UnityEditor.iOS.Xcode.MapsOptions;
    static Bike: UnityEditor.iOS.Xcode.MapsOptions;
    static Bus: UnityEditor.iOS.Xcode.MapsOptions;
    static Car: UnityEditor.iOS.Xcode.MapsOptions;
    static Ferry: UnityEditor.iOS.Xcode.MapsOptions;
    static None: UnityEditor.iOS.Xcode.MapsOptions;
    static Other: UnityEditor.iOS.Xcode.MapsOptions;
    static Pedestrian: UnityEditor.iOS.Xcode.MapsOptions;
    static RideSharing: UnityEditor.iOS.Xcode.MapsOptions;
    static StreetCar: UnityEditor.iOS.Xcode.MapsOptions;
    static Subway: UnityEditor.iOS.Xcode.MapsOptions;
    static Taxi: UnityEditor.iOS.Xcode.MapsOptions;
    static Train: UnityEditor.iOS.Xcode.MapsOptions;
    value__: number;
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class GameCenterInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class MapsInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class BackgroundInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class HealthInfo extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class ICloudEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class PushNotificationEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class WalletEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class SiriEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class ApplePayEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class VPNEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class KeyChainEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AudioEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AssociatedDomainsEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class AppGroupsEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class HomeKitEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class DataProtectionEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class HealthKitEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class WirelessAccessoryConfigurationEntitlements extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode {
  class XcScheme extends System.Object {
    constructor();
    GetBuildConfiguration(): string;
    ReadFromFile(path: string): void;
    ReadFromStream(tr: any): void;
    ReadFromString(text: string): void;
    SetBuildConfiguration(buildConfigName: string): void;
    WriteToFile(path: string): void;
    WriteToStream(tw: any): void;
    WriteToString(): string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXElement extends System.Object {
    protected constructor();
    AsArray(): UnityEditor.iOS.Xcode.PBX.PBXElementArray;
    AsDict(): UnityEditor.iOS.Xcode.PBX.PBXElementDict;
    AsString(): string;
    get_Item(key: string): UnityEditor.iOS.Xcode.PBX.PBXElement;
    set_Item(key: string, value: UnityEditor.iOS.Xcode.PBX.PBXElement): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXElementString extends UnityEditor.iOS.Xcode.PBX.PBXElement {
    constructor(v: string);
    value: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXElementDict extends UnityEditor.iOS.Xcode.PBX.PBXElement {
    constructor();
    Contains(key: string): boolean;
    CreateArray(key: string): UnityEditor.iOS.Xcode.PBX.PBXElementArray;
    CreateDict(key: string): UnityEditor.iOS.Xcode.PBX.PBXElementDict;
    Remove(key: string): void;
    SetString(key: string, val: string): void;
    get_Item(key: string): UnityEditor.iOS.Xcode.PBX.PBXElement;
    set_Item(key: string, value: UnityEditor.iOS.Xcode.PBX.PBXElement): void;
    readonly values: any;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXElementArray extends UnityEditor.iOS.Xcode.PBX.PBXElement {
    constructor();
    AddArray(): UnityEditor.iOS.Xcode.PBX.PBXElementArray;
    AddDict(): UnityEditor.iOS.Xcode.PBX.PBXElementDict;
    AddString(val: string): void;
    values: UnityEditor.iOS.Xcode.PBX.PBXElement[];
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class TokenType extends System.Enum {
    protected constructor();
    static Comma: UnityEditor.iOS.Xcode.PBX.TokenType;
    static Comment: UnityEditor.iOS.Xcode.PBX.TokenType;
    static EOF: UnityEditor.iOS.Xcode.PBX.TokenType;
    static Eq: UnityEditor.iOS.Xcode.PBX.TokenType;
    static Invalid: UnityEditor.iOS.Xcode.PBX.TokenType;
    static LBrace: UnityEditor.iOS.Xcode.PBX.TokenType;
    static LParen: UnityEditor.iOS.Xcode.PBX.TokenType;
    static QuotedString: UnityEditor.iOS.Xcode.PBX.TokenType;
    static RBrace: UnityEditor.iOS.Xcode.PBX.TokenType;
    static RParen: UnityEditor.iOS.Xcode.PBX.TokenType;
    static Semicolon: UnityEditor.iOS.Xcode.PBX.TokenType;
    static String: UnityEditor.iOS.Xcode.PBX.TokenType;
    value__: number;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class Token extends System.Object {
    constructor();
    begin: number;
    end: number;
    line: number;
    type: UnityEditor.iOS.Xcode.PBX.TokenType;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class TokenList {
    constructor();
    Add(item: UnityEditor.iOS.Xcode.PBX.Token): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(index: number, count: number, item: UnityEditor.iOS.Xcode.PBX.Token, comparer: any): number;
    BinarySearch(item: UnityEditor.iOS.Xcode.PBX.Token): number;
    BinarySearch(item: UnityEditor.iOS.Xcode.PBX.Token, comparer: any): number;
    Clear(): void;
    Contains(item: UnityEditor.iOS.Xcode.PBX.Token): boolean;
    CopyTo(index: number, array: UnityEditor.iOS.Xcode.PBX.Token[], arrayIndex: number, count: number): void;
    CopyTo(array: UnityEditor.iOS.Xcode.PBX.Token[]): void;
    CopyTo(array: UnityEditor.iOS.Xcode.PBX.Token[], arrayIndex: number): void;
    Equals(obj: any): boolean;
    Exists(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): boolean;
    Find(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): UnityEditor.iOS.Xcode.PBX.Token;
    FindAll(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): UnityEditor.iOS.Xcode.PBX.Token[];
    FindIndex(startIndex: number, count: number, match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    FindIndex(startIndex: number, match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    FindIndex(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    FindLast(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): UnityEditor.iOS.Xcode.PBX.Token;
    FindLastIndex(startIndex: number, count: number, match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    FindLastIndex(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    ForEach(action: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => void)): void;
    GetEnumerator(): any;
    GetHashCode(): number;
    GetRange(index: number, count: number): UnityEditor.iOS.Xcode.PBX.Token[];
    GetType(): any;
    IndexOf(item: UnityEditor.iOS.Xcode.PBX.Token): number;
    IndexOf(item: UnityEditor.iOS.Xcode.PBX.Token, index: number): number;
    IndexOf(item: UnityEditor.iOS.Xcode.PBX.Token, index: number, count: number): number;
    Insert(index: number, item: UnityEditor.iOS.Xcode.PBX.Token): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEditor.iOS.Xcode.PBX.Token): number;
    LastIndexOf(item: UnityEditor.iOS.Xcode.PBX.Token, index: number): number;
    LastIndexOf(item: UnityEditor.iOS.Xcode.PBX.Token, index: number, count: number): number;
    Remove(item: UnityEditor.iOS.Xcode.PBX.Token): boolean;
    RemoveAll(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(index: number, count: number, comparer: any): void;
    Sort(comparer: any): void;
    Sort(comparison: ((x: UnityEditor.iOS.Xcode.PBX.Token, y: UnityEditor.iOS.Xcode.PBX.Token) => number)): void;
    ToArray(): UnityEditor.iOS.Xcode.PBX.Token[];
    ToString(): string;
    TrimExcess(): void;
    TrueForAll(match: ((obj: UnityEditor.iOS.Xcode.PBX.Token) => boolean)): boolean;
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEditor.iOS.Xcode.PBX.Token;
    set_Item(index: number, value: UnityEditor.iOS.Xcode.PBX.Token): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class Lexer extends System.Object {
    constructor();
    ScanAll(): UnityEditor.iOS.Xcode.PBX.TokenList;
    SetText(text: string): void;
    static Tokenize(text: string): UnityEditor.iOS.Xcode.PBX.TokenList;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXObjectData extends System.Object {
    constructor();
    UpdateProps(): void;
    UpdateVars(): void;
    guid: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXBuildFileData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static CreateFromFile(fileRefGUID: string, weak: boolean, compileFlags: string): UnityEditor.iOS.Xcode.PBX.PBXBuildFileData;
    UpdateProps(): void;
    UpdateVars(): void;
    assetTags: string[];
    codeSignOnCopy: boolean;
    compileFlags: string;
    fileRef: string;
    removeHeadersOnCopy: boolean;
    weak: boolean;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXFileReferenceData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static CreateFromFile(path: string, projectFileName: string, tree: UnityEditor.iOS.Xcode.PBXSourceTree): UnityEditor.iOS.Xcode.PBX.PBXFileReferenceData;
    static CreateFromFolderReference(path: string, projectFileName: string, tree: UnityEditor.iOS.Xcode.PBXSourceTree): UnityEditor.iOS.Xcode.PBX.PBXFileReferenceData;
    UpdateProps(): void;
    UpdateVars(): void;
    readonly isFolderReference: boolean;
    path: string;
    name: string;
    tree: UnityEditor.iOS.Xcode.PBXSourceTree;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class GUIDList extends System.Object {
    constructor();
    constructor(data: string[]);
    AddGUID(guid: string): void;
    Clear(): void;
    Contains(guid: string): boolean;
    RemoveGUID(guid: string): void;
    readonly Count: number;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class XCConfigurationListData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static Create(): UnityEditor.iOS.Xcode.PBX.XCConfigurationListData;
    UpdateProps(): void;
    UpdateVars(): void;
    buildConfigs: UnityEditor.iOS.Xcode.PBX.GUIDList;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXGroupData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static Create(name: string, path: string, tree: UnityEditor.iOS.Xcode.PBXSourceTree): UnityEditor.iOS.Xcode.PBX.PBXGroupData;
    static CreateRelative(name: string): UnityEditor.iOS.Xcode.PBX.PBXGroupData;
    UpdateProps(): void;
    UpdateVars(): void;
    children: UnityEditor.iOS.Xcode.PBX.GUIDList;
    name: string;
    path: string;
    tree: UnityEditor.iOS.Xcode.PBXSourceTree;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXVariantGroupData extends UnityEditor.iOS.Xcode.PBX.PBXGroupData {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXNativeTargetData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static Create(name: string, productRef: string, productType: string, buildConfigList: string): UnityEditor.iOS.Xcode.PBX.PBXNativeTargetData;
    UpdateProps(): void;
    UpdateVars(): void;
    buildConfigList: string;
    dependencies: UnityEditor.iOS.Xcode.PBX.GUIDList;
    name: string;
    phases: UnityEditor.iOS.Xcode.PBX.GUIDList;
    productReference: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class FileGUIDListBase extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    UpdateProps(): void;
    UpdateVars(): void;
    files: UnityEditor.iOS.Xcode.PBX.GUIDList;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXSourcesBuildPhaseData extends UnityEditor.iOS.Xcode.PBX.FileGUIDListBase {
    constructor();
    static Create(): UnityEditor.iOS.Xcode.PBX.PBXSourcesBuildPhaseData;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXFrameworksBuildPhaseData extends UnityEditor.iOS.Xcode.PBX.FileGUIDListBase {
    constructor();
    static Create(): UnityEditor.iOS.Xcode.PBX.PBXFrameworksBuildPhaseData;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXResourcesBuildPhaseData extends UnityEditor.iOS.Xcode.PBX.FileGUIDListBase {
    constructor();
    static Create(): UnityEditor.iOS.Xcode.PBX.PBXResourcesBuildPhaseData;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXCopyFilesBuildPhaseData extends UnityEditor.iOS.Xcode.PBX.FileGUIDListBase {
    constructor();
    static Create(name: string, dstPath: string, subfolderSpec: string): UnityEditor.iOS.Xcode.PBX.PBXCopyFilesBuildPhaseData;
    UpdateProps(): void;
    UpdateVars(): void;
    dstPath: string;
    dstSubfolderSpec: string;
    name: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXShellScriptBuildPhaseData extends UnityEditor.iOS.Xcode.PBX.FileGUIDListBase {
    constructor();
    static Create(name: string, shellPath: string, shellScript: string): UnityEditor.iOS.Xcode.PBX.PBXShellScriptBuildPhaseData;
    UpdateProps(): void;
    UpdateVars(): void;
    name: string;
    shellPath: string;
    shellScript: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class BuildConfigEntryData extends System.Object {
    constructor();
    AddValue(value: string): void;
    static ExtractValue(src: string): string;
    static FromNameValue(name: string, value: string): UnityEditor.iOS.Xcode.PBX.BuildConfigEntryData;
    RemoveValue(value: string): void;
    RemoveValueList(values: any): void;
    name: string;
    val: string[];
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class XCBuildConfigurationData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    AddProperty(name: string, value: string): void;
    static Create(name: string): UnityEditor.iOS.Xcode.PBX.XCBuildConfigurationData;
    RemoveProperty(name: string): void;
    RemovePropertyValue(name: string, value: string): void;
    RemovePropertyValueList(name: string, valueList: any): void;
    SetProperty(name: string, value: string): void;
    UpdateProps(): void;
    UpdateVars(): void;
    readonly name: string;
    baseConfigurationReference: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXContainerItemProxyData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static Create(containerRef: string, proxyType: string, remoteGlobalGUID: string, remoteInfo: string): UnityEditor.iOS.Xcode.PBX.PBXContainerItemProxyData;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXReferenceProxyData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static Create(path: string, fileType: string, remoteRef: string, sourceTree: string): UnityEditor.iOS.Xcode.PBX.PBXReferenceProxyData;
    readonly path: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXTargetDependencyData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    static Create(target: string, targetProxy: string): UnityEditor.iOS.Xcode.PBX.PBXTargetDependencyData;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class ProjectReference extends System.Object {
    constructor();
    static Create(group: string, projectRef: string): UnityEditor.iOS.Xcode.PBX.ProjectReference;
    group: string;
    projectRef: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXProjectObjectData extends UnityEditor.iOS.Xcode.PBX.PBXObjectData {
    constructor();
    AddReference(productGroup: string, projectRef: string): void;
    UpdateProps(): void;
    UpdateVars(): void;
    readonly mainGroup: string;
    buildConfigList: string;
    capabilities: UnityEditor.iOS.Xcode.PBXCapabilityType.TargetCapabilityPair[];
    entitlementsFile: string;
    knownAssetTags: string[];
    projectReferences: UnityEditor.iOS.Xcode.PBX.ProjectReference[];
    targets: string[];
    teamIDs: any;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class ValueAST extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class IdentifierAST extends UnityEditor.iOS.Xcode.PBX.ValueAST {
    constructor();
    value: number;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class TreeAST extends UnityEditor.iOS.Xcode.PBX.ValueAST {
    constructor();
    values: UnityEditor.iOS.Xcode.PBX.KeyValueAST[];
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class ArrayAST extends UnityEditor.iOS.Xcode.PBX.ValueAST {
    constructor();
    values: UnityEditor.iOS.Xcode.PBX.ValueAST[];
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class KeyValueAST extends System.Object {
    constructor();
    key: UnityEditor.iOS.Xcode.PBX.IdentifierAST;
    value: UnityEditor.iOS.Xcode.PBX.ValueAST;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class Parser extends System.Object {
    constructor(tokens: UnityEditor.iOS.Xcode.PBX.TokenList);
    ParseIdentifier(): UnityEditor.iOS.Xcode.PBX.IdentifierAST;
    ParseKeyValue(): UnityEditor.iOS.Xcode.PBX.KeyValueAST;
    ParseList(): UnityEditor.iOS.Xcode.PBX.ArrayAST;
    ParseTree(): UnityEditor.iOS.Xcode.PBX.TreeAST;
    ParseValue(): UnityEditor.iOS.Xcode.PBX.ValueAST;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class SectionBase extends System.Object {
    protected constructor();
    AddObject(key: string, value: UnityEditor.iOS.Xcode.PBX.PBXElementDict): void;
    WriteSection(sb: any, comments: UnityEditor.iOS.Xcode.PBX.GUIDToCommentMap): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXProjectSection {
    constructor();
    AddEntry(obj: UnityEditor.iOS.Xcode.PBX.PBXProjectObjectData): void;
    AddObject(key: string, value: UnityEditor.iOS.Xcode.PBX.PBXElementDict): void;
    Equals(obj: any): boolean;
    GetEntries(): any;
    GetGuids(): any;
    GetHashCode(): number;
    GetObjects(): any;
    GetType(): any;
    HasEntry(guid: string): boolean;
    RemoveEntry(guid: string): void;
    ToString(): string;
    WriteSection(sb: any, comments: UnityEditor.iOS.Xcode.PBX.GUIDToCommentMap): void;
    get_Item(guid: string): UnityEditor.iOS.Xcode.PBX.PBXProjectObjectData;
    readonly project: UnityEditor.iOS.Xcode.PBX.PBXProjectObjectData;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class KnownSectionBase<T> extends UnityEditor.iOS.Xcode.PBX.SectionBase {
    constructor(sectionName: string);
    AddEntry(obj: T): void;
    AddObject(key: string, value: UnityEditor.iOS.Xcode.PBX.PBXElementDict): void;
    GetEntries(): any;
    GetGuids(): any;
    GetObjects(): any;
    HasEntry(guid: string): boolean;
    RemoveEntry(guid: string): void;
    WriteSection(sb: any, comments: UnityEditor.iOS.Xcode.PBX.GUIDToCommentMap): void;
    get_Item(guid: string): T;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PropertyCommentChecker extends System.Object {
    constructor();
    constructor(props: any);
    CheckKeyInDict(key: string): boolean;
    CheckStringValueInArray(value: string): boolean;
    CheckStringValueInDict(key: string, value: string): boolean;
    NextLevel(prop: string): UnityEditor.iOS.Xcode.PBX.PropertyCommentChecker;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class Serializer extends System.Object {
    constructor();
    static ParseArrayAST(ast: UnityEditor.iOS.Xcode.PBX.ArrayAST, tokens: UnityEditor.iOS.Xcode.PBX.TokenList, text: string): UnityEditor.iOS.Xcode.PBX.PBXElementArray;
    static ParseIdentifierAST(ast: UnityEditor.iOS.Xcode.PBX.IdentifierAST, tokens: UnityEditor.iOS.Xcode.PBX.TokenList, text: string): UnityEditor.iOS.Xcode.PBX.PBXElementString;
    static ParseTreeAST(ast: UnityEditor.iOS.Xcode.PBX.TreeAST, tokens: UnityEditor.iOS.Xcode.PBX.TokenList, text: string): UnityEditor.iOS.Xcode.PBX.PBXElementDict;
    static ParseValueAST(ast: UnityEditor.iOS.Xcode.PBX.ValueAST, tokens: UnityEditor.iOS.Xcode.PBX.TokenList, text: string): UnityEditor.iOS.Xcode.PBX.PBXElement;
    static WriteArray(sb: any, el: UnityEditor.iOS.Xcode.PBX.PBXElementArray, indent: number, compact: boolean, checker: UnityEditor.iOS.Xcode.PBX.PropertyCommentChecker, comments: UnityEditor.iOS.Xcode.PBX.GUIDToCommentMap): void;
    static WriteDict(sb: any, el: UnityEditor.iOS.Xcode.PBX.PBXElementDict, indent: number, compact: boolean, checker: UnityEditor.iOS.Xcode.PBX.PropertyCommentChecker, comments: UnityEditor.iOS.Xcode.PBX.GUIDToCommentMap): void;
    static WriteDictKeyValue(sb: any, key: string, value: UnityEditor.iOS.Xcode.PBX.PBXElement, indent: number, compact: boolean, checker: UnityEditor.iOS.Xcode.PBX.PropertyCommentChecker, comments: UnityEditor.iOS.Xcode.PBX.GUIDToCommentMap): void;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class GUIDToCommentMap extends System.Object {
    constructor();
    Add(guid: string, comment: string): void;
    Remove(guid: string): void;
    Write(guid: string): string;
    WriteStringBuilder(sb: any, guid: string): void;
    get_Item(guid: string): string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXGUID extends System.Object {
    constructor();
    static Generate(): string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXRegex extends System.Object {
    constructor();
    static GuidRegexString: string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXStream extends System.Object {
    constructor();
    static QuoteStringIfNeeded(src: string): string;
    static UnquoteString(src: string): string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class PBXFileType extends System.Enum {
    protected constructor();
    static CopyFile: UnityEditor.iOS.Xcode.PBX.PBXFileType;
    static Framework: UnityEditor.iOS.Xcode.PBX.PBXFileType;
    static NotBuildable: UnityEditor.iOS.Xcode.PBX.PBXFileType;
    static Resource: UnityEditor.iOS.Xcode.PBX.PBXFileType;
    static ShellScript: UnityEditor.iOS.Xcode.PBX.PBXFileType;
    static Source: UnityEditor.iOS.Xcode.PBX.PBXFileType;
    value__: number;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX {
  class FileTypeUtils extends System.Object {
    constructor();
    static GetFileType(ext: string, isFolderRef: boolean): UnityEditor.iOS.Xcode.PBX.PBXFileType;
    static GetTypeName(ext: string): string;
    static IsBuildable(ext: string, isFolderReference: boolean): boolean;
    static IsBuildableFile(ext: string): boolean;
    static IsKnownExtension(ext: string): boolean;
    static TrimExtension(ext: string): string;
  }
}
declare namespace UnityEditor.iOS.Xcode.PBX.FileTypeUtils {
  class FileTypeDesc extends System.Object {
    constructor(typeName: string, type: UnityEditor.iOS.Xcode.PBX.PBXFileType);
    constructor(typeName: string, type: UnityEditor.iOS.Xcode.PBX.PBXFileType, isExplicit: boolean);
    isExplicit: boolean;
    name: string;
    type: UnityEditor.iOS.Xcode.PBX.PBXFileType;
  }
}
declare namespace UnityEditor.LinuxStandalone {
  class LinuxStandaloneIL2CppNativeCodeBuilder extends UnityEditorInternal.Il2CppNativeCodeBuilder {
    constructor(target: UnityEditor.BuildTarget);
    readonly CacheDirectory: string;
    readonly CompilerArchitecture: string;
    readonly CompilerPlatform: string;
  }
}
declare namespace UnityEditor.LinuxStandalone {
  class LinuxStandaloneIl2CppPlatformProvider extends UnityEditorInternal.BaseIl2CppPlatformProvider {
    constructor(target: UnityEditor.BuildTarget, dataFolder: string, developmentBuild: boolean);
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    readonly developmentMode: boolean;
    readonly emitNullChecks: boolean;
    readonly enableStackTraces: boolean;
    readonly includePaths: string[];
    readonly nativeLibraryFileName: string;
    readonly platformHasPrecompiledLibIl2Cpp: boolean;
  }
}
declare namespace UnityEditor.LinuxStandalone {
  class LinuxDesktopStandalonePostProcessor extends DesktopStandalonePostProcessor {
    constructor();
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PostProcessScriptsOnly(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    SupportsInstallInBuildFolder(): boolean;
    SupportsLz4Compression(): boolean;
    SupportsScriptsOnlyBuild(): boolean;
  }
}
declare namespace UnityEditor.LinuxStandalone {
  class APIVersion extends System.Object {
    protected constructor();
    static Version: number;
  }
}
declare namespace UnityEditor.LinuxStandalone {
  class TargetExtension extends UnityEditor.Modules.DefaultPlatformSupportModule {
    constructor();
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    readonly JamTarget: string;
    readonly TargetName: string;
  }
}
declare namespace UnityEditor {
  class NetworkAnimatorEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkBehaviourInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkDiscoveryEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkIdentityEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Networking {
  class NetworkInformationPreview extends UnityEditor.ObjectPreview {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor.Networking.NetworkInformationPreview {
  class NetworkIdentityInfo extends System.Object {
    constructor();
    name: any;
    value: any;
  }
}
declare namespace UnityEditor.Networking.NetworkInformationPreview {
  class NetworkBehaviourInfo extends System.Object {
    constructor();
    behaviour: any;
    name: any;
  }
}
declare namespace UnityEditor.Networking.NetworkInformationPreview {
  class Styles extends System.Object {
    constructor();
    componentName: any;
    disabledName: any;
    labelStyle: any;
  }
}
declare namespace UnityEditor {
  class NetworkLobbyManagerEditor extends UnityEditor.NetworkManagerEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkManagerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkManagerHUDEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Networking {
  class NetworkManagerPreview extends UnityEditor.ObjectPreview {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor {
  class NetworkMigrationManagerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkScenePostProcess extends UnityEngine.MonoBehaviour {
    constructor();
    static OnPostProcessScene(): void;
  }
}
declare namespace UnityEngine {
  class MonoBehaviour extends UnityEngine.Behaviour {
    constructor();
    CancelInvoke(): void;
    CancelInvoke(methodName: string): void;
    Invoke(methodName: string, time: number): void;
    InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
    IsInvoking(): boolean;
    IsInvoking(methodName: string): boolean;
    static print(message: any): void;
    StartCoroutine(routine: any): any;
    StartCoroutine(methodName: string): any;
    StartCoroutine(methodName: string, value: any): any;
    StartCoroutine_Auto(routine: any): any;
    StopAllCoroutines(): void;
    StopCoroutine(routine: any): void;
    StopCoroutine(methodName: string): void;
    StopCoroutine(routine: any): void;
    runInEditMode: boolean;
    useGUILayout: boolean;
  }
}
declare namespace UnityEngine {
  class Behaviour extends UnityEngine.Component {
    constructor();
    enabled: boolean;
    readonly isActiveAndEnabled: boolean;
  }
}
declare namespace UnityEngine {
  class Component extends UnityEngine.Object {
    constructor();
    BroadcastMessage(methodName: string): void;
    BroadcastMessage(methodName: string, parameter: any): void;
    BroadcastMessage(methodName: string, parameter: any, options: any): void;
    BroadcastMessage(methodName: string, options: any): void;
    CompareTag(tag: string): boolean;
    GetComponent(type: string): UnityEngine.Component;
    GetComponent(type: any): UnityEngine.Component;
    GetComponentInChildren(t: any): UnityEngine.Component;
    GetComponentInChildren(t: any, includeInactive: boolean): UnityEngine.Component;
    GetComponentInParent(t: any): UnityEngine.Component;
    GetComponents(type: any): UnityEngine.Component[];
    GetComponents(type: any, results: UnityEngine.Component[]): void;
    GetComponentsInChildren(t: any): UnityEngine.Component[];
    GetComponentsInChildren(t: any, includeInactive: boolean): UnityEngine.Component[];
    GetComponentsInParent(t: any): UnityEngine.Component[];
    GetComponentsInParent(t: any, includeInactive: boolean): UnityEngine.Component[];
    SendMessage(methodName: string): void;
    SendMessage(methodName: string, value: any): void;
    SendMessage(methodName: string, value: any, options: any): void;
    SendMessage(methodName: string, options: any): void;
    SendMessageUpwards(methodName: string): void;
    SendMessageUpwards(methodName: string, value: any): void;
    SendMessageUpwards(methodName: string, value: any, options: any): void;
    SendMessageUpwards(methodName: string, options: any): void;
    readonly animation: UnityEngine.Component;
    readonly audio: UnityEngine.Component;
    readonly camera: UnityEngine.Component;
    readonly collider: UnityEngine.Component;
    readonly collider2D: UnityEngine.Component;
    readonly constantForce: UnityEngine.Component;
    readonly gameObject: any;
    readonly guiElement: UnityEngine.Component;
    readonly guiText: UnityEngine.Component;
    readonly guiTexture: UnityEngine.Component;
    readonly hingeJoint: UnityEngine.Component;
    readonly light: UnityEngine.Component;
    readonly networkView: UnityEngine.Component;
    readonly particleEmitter: UnityEngine.Component;
    readonly particleSystem: UnityEngine.Component;
    readonly renderer: UnityEngine.Component;
    readonly rigidbody: UnityEngine.Component;
    readonly rigidbody2D: UnityEngine.Component;
    tag: string;
    readonly transform: any;
  }
}
declare namespace UnityEditor {
  class NetworkServiceInitialize extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor {
  class NetworkTransformChildEditor extends UnityEditor.Editor {
    constructor();
    Init(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor {
  class NetworkTransformEditor extends UnityEditor.Editor {
    constructor();
    Init(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Networking {
  class NetworkTransformPreview extends UnityEditor.ObjectPreview {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor {
  class NetworkTransformVisualizerEditor extends UnityEditor.NetworkBehaviourInspector {
    constructor();
  }
}
declare namespace UnityEditor.Purchasing {
  class CloudCatalogUploader extends System.Object {
    protected constructor();
    static Upload(catalogJson: string): void;
    static Upload(catalogJson: string, onComplete: ((obj: any) => void)): void;
    static Upload(catalogJson: string, onComplete: ((obj: any) => void), onProgressChanged: ((obj: any) => void)): void;
    static Upload(catalogJson: string, onComplete: ((obj: any) => void), onProgressChanged: ((obj: any) => void), baseURL: string): void;
  }
}
declare namespace UnityEditor {
  class PurchasingImporter extends System.Object {
    constructor();
  }
}
declare namespace UnityEngine.SpatialTracking {
  class TrackedPoseDriverEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEngine.SpatialTracking.TrackedPoseDriverEditor {
  class Styles extends System.Object {
    protected constructor();
    static deviceLabel: any;
    static poseLabel: any;
    static relativeLabel: any;
    static trackingLabel: any;
    static updateLabel: any;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class Batch extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.TestTools.TestRunner.Batch {
  class ReturnCodes extends System.Enum {
    protected constructor();
    static Failed: UnityEditor.TestTools.TestRunner.Batch.ReturnCodes;
    static Ok: UnityEditor.TestTools.TestRunner.Batch.ReturnCodes;
    static PlatformNotFoundReturnCode: UnityEditor.TestTools.TestRunner.Batch.ReturnCodes;
    static RunError: UnityEditor.TestTools.TestRunner.Batch.ReturnCodes;
    value__: number;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class TestRunnerWindow extends UnityEditor.EditorWindow {
    constructor();
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    OnDestroy(): void;
    OnEnable(): void;
    OnGUI(): void;
    RebuildUIFilter(): void;
    static ShowPlaymodeTestsRunnerWindowCodeBased(): void;
    filterSettings: UnityEditor.TestTools.TestRunner.GUI.TestFilterSettings;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.TestRunnerWindow {
  class Styles extends System.Object {
    protected constructor();
    static info: any;
    static testList: any;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.TestRunnerWindow {
  class TestRunnerMenuLabels extends System.Enum {
    protected constructor();
    static EditMode: UnityEditor.TestTools.TestRunner.TestRunnerWindow.TestRunnerMenuLabels;
    static PlayMode: UnityEditor.TestTools.TestRunner.TestRunnerWindow.TestRunnerMenuLabels;
    value__: number;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class TestRunnerWindowSettings extends System.Object {
    constructor(prefsKey: string);
    ToggleVerticalSplit(): void;
    verticalSplit: boolean;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class GuiHelper extends System.Object {
    protected constructor();
    static OpenInEditor(stacktrace: string): boolean;
    static OpenInEditor(type: any, method: any): void;
  }
}
declare namespace UnityEditor.TestRunner.GUI {
  class PlayerResultWindowUpdater {
    constructor();
    Equals(other: any): boolean;
    Error(): void;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    ResetTestState(): void;
    RunStarted(): void;
    SetDirty(): void;
    TestDone(testRunnerResult: any): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestRunnerUIFilter extends System.Object {
    constructor();
    Clear(): void;
    Draw(): void;
    UpdateCounters(resultList: any[]): void;
    readonly CategoryFilter: string[];
    readonly FailedCount: number;
    readonly IsFiltering: boolean;
    readonly NotRunCount: number;
    readonly PassedCount: number;
    availableCategories: string[];
    FailedHidden: boolean;
    NotRunHidden: boolean;
    PassedHidden: boolean;
    RebuildTestList: (() => void);
    SearchStringChanged: ((obj: string) => void);
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class RenderingOptions extends System.Object {
    constructor();
    categories: string[];
    nameFilter: string;
    showFailed: boolean;
    showIgnored: boolean;
    showNotRunned: boolean;
    showSucceeded: boolean;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class ResultSummarizer extends System.Object {
    constructor(results: any);
    Summarize(result: any): void;
    readonly duration: number;
    readonly errors: number;
    readonly failures: number;
    readonly ignored: number;
    readonly inconclusive: number;
    readonly notRunnable: number;
    readonly Passed: number;
    readonly ResultCount: number;
    readonly Skipped: number;
    readonly success: boolean;
    readonly testsNotRun: number;
    readonly TestsRun: number;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestFilterSettings extends System.Object {
    constructor(prefsKey: string);
    BuildRenderingOptions(): UnityEditor.TestTools.TestRunner.GUI.RenderingOptions;
    GetSelectedCategories(): string[];
    Load(): void;
    OnGUI(): void;
    Save(): void;
    UpdateCounters(results: any): void;
    availableCategories: string[];
    filterByCategory: number;
    filterByName: string;
    showFailed: boolean;
    showIgnored: boolean;
    showNotRun: boolean;
    showSucceeded: boolean;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestTreeViewBuilder extends System.Object {
    constructor(tests: any, oldTestResultResults: any[], uiFilter: UnityEditor.TestTools.TestRunner.GUI.TestRunnerUIFilter);
    BuildTreeView(settings: UnityEditor.TestTools.TestRunner.GUI.TestFilterSettings, sceneBased: boolean, sceneName: string): UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly AvailableCategories: string[];
    results: any[];
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class Icons extends System.Object {
    protected constructor();
    static s_FailImg: any;
    static s_IgnoreImg: any;
    static s_InconclusiveImg: any;
    static s_StopwatchImg: any;
    static s_SuccessImg: any;
    static s_UnknownImg: any;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestListTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(testListTree: UnityEditor.IMGUI.Controls.TreeViewController, testListGUI: UnityEditor.TestTools.TestRunner.GUI.TestListGUI);
    ExpandTreeOnCreation(): void;
    FetchData(): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestListTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(testListTree: UnityEditor.IMGUI.Controls.TreeViewController);
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestTreeViewItem extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(test: any, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem);
    GetResultText(): string;
    SetResult(result: any): void;
    readonly FullName: string;
    readonly IsGroupNode: boolean;
    method: any;
    result: any;
    type: any;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class EditModeTestListGUI extends UnityEditor.TestTools.TestRunner.GUI.TestListGUI {
    constructor();
    GetTestListNUnit(): any;
    PrintHeadPanel(): void;
    RenderNoTestsInfo(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class TestListGUI extends System.Object {
    protected constructor();
    GetTestListNUnit(): any;
    Init(window: UnityEditor.TestTools.TestRunner.TestRunnerWindow): void;
    PrintHeadPanel(): void;
    RebuildUIFilter(): void;
    Reload(): void;
    RenderDetails(): void;
    RenderNoTestsInfo(): void;
    RenderTestList(): void;
    Repaint(): void;
    UpdateResult(result: any): void;
    newResultList: any[];
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class PlayModeTestListGUI extends UnityEditor.TestTools.TestRunner.GUI.TestListGUI {
    constructor();
    GetTestListNUnit(): any;
    PrintHeadPanel(): void;
    RenderNoTestsInfo(): void;
    RenderTestList(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class TestRunnerStateSerializer extends System.Object {
    constructor();
    CanRestoreFromJson(requestedType: any): boolean;
    CanRestoreFromScriptableObject(requestedType: any): boolean;
    RestoreClassFromJson(instance: any): void;
    RestoreContext(): void;
    RestoreScriptableObjectInstance(): UnityEngine.ScriptableObject;
    SaveContext(): void;
    ShouldRestore(): boolean;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class EditModeLauncher extends UnityEditor.TestTools.TestRunner.TestLauncherBase {
    constructor(filter: any);
    Run(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class TestLauncherBase extends System.Object {
    protected constructor();
    Run(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class EditModeLauncherContextSettings extends System.Object {
    constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PlayerLauncher extends UnityEditor.TestTools.TestRunner.RuntimeTestLauncherBase {
    constructor(settings: any, targetPlatform: any);
    PrepareScene(sceneName: string): any;
    Run(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class RuntimeTestLauncherBase extends UnityEditor.TestTools.TestRunner.TestLauncherBase {
    protected constructor();
    CreateSceneName(): string;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PlayerLauncherBuildOptions extends System.Object {
    constructor();
    ToString(): string;
    BuildPlayerOptions: UnityEditor.BuildPlayerOptions;
    PlayerDirectory: string;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PlayerLauncherContextSettings extends System.Object {
    constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PlaymodeLauncher extends UnityEditor.TestTools.TestRunner.RuntimeTestLauncherBase {
    constructor(settings: any);
    Run(): void;
    UpdateCallback(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.PlaymodeLauncher {
  class BackgroundWatcher extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PrebuildSetupAttributeFinder extends System.Object {
    constructor();
    Search(tests: any, filter: any): any;
  }
}
declare namespace UnityEditor.TestRunner.TestLaunchers {
  class RemoteTestRunController {
    constructor();
    AllTestsIsDone(): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    Init(settings: any, buildTarget: UnityEditor.BuildTarget): void;
    OnDestroy(): void;
    PostBuildAction(): void;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class RemoteTestResultReciever extends System.Object {
    constructor(settings: any);
    ReceivedTestsData(messageEventArgs: any): void;
    RunFinished(messageEventArgs: any): void;
    RunStarted(messageEventArgs: any): void;
    WritePlayerResult(xmlResult: number[]): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PlaymodeTestsControllerExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class AndroidPlatformSetup extends System.Object {
    constructor();
    CleanUp(): void;
    PostSuccessfulBuildAction(): void;
    Setup(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class ApplePlatformSetup extends System.Object {
    constructor(buildTarget: UnityEditor.BuildTarget);
    CleanUp(): void;
    PostSuccessfulBuildAction(): void;
    Setup(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class IPlatformSetup {
    protected constructor();
    CleanUp(): void;
    PostSuccessfulBuildAction(): void;
    Setup(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class PlatformSpecificSetup extends System.Object {
    constructor();
    constructor(target: UnityEditor.BuildTarget);
    CleanUp(): void;
    PostSuccessfulBuildAction(): void;
    Setup(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class XboxOnePlatformSetup extends System.Object {
    constructor();
    CleanUp(): void;
    PostSuccessfulBuildAction(): void;
    Setup(): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class EditModeRunner extends UnityEngine.ScriptableObject {
    constructor();
    Dispose(): void;
    GetFilter(): any;
    GetLoadedTests(): any;
    Init(filter: any): void;
    OnRunCancel(): void;
    Run(): void;
    static RunningTests: boolean;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class BatchRunCallback extends UnityEngine.ScriptableObject {
    constructor();
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(result: any): void;
    TestStarted(test: any): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class EditModeRunnerCallback extends UnityEngine.ScriptableObject {
    constructor();
    OnDestroy(): void;
    RunFinished(result: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(result: any): void;
    TestStarted(test: any): void;
    previousSceneSetup: UnityEditor.SceneManagement.SceneSetup[];
    runner: UnityEditor.TestTools.TestRunner.EditModeRunner;
    undoGroup: number;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class ResultSaverCallback extends UnityEngine.ScriptableObject {
    constructor();
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(test: any): void;
    TestStarted(fullName: any): void;
    resultFilePath: string;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class TestRunnerCallback extends UnityEngine.ScriptableObject {
    constructor();
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(test: any): void;
    TestStarted(testName: any): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner.GUI {
  class WindowResultUpdater extends UnityEngine.ScriptableObject {
    constructor();
    RunFinished(testResults: any): void;
    RunStarted(testsToRun: any): void;
    TestFinished(test: any): void;
    TestStarted(testName: any): void;
  }
}
declare namespace UnityEditor.TestTools.TestRunner {
  class TestInEditorTestAssemblyProvider extends System.Object {
    constructor(testPlatform: any);
    GetTestsWithNUnit(): any;
    GetUserAssemblies(): any[];
  }
}
declare namespace UnityEditor.Timeline {
  class BreadcrumbElement extends System.Object {
    constructor();
    GetHashCode(): number;
    ToString(): string;
    asset: any;
    clip: any;
  }
}
declare namespace UnityEditor.Timeline {
  class ClipInspector extends UnityEditor.Editor {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    RequiresConstantRepaint(): boolean;
  }
}
declare namespace UnityEditor.Timeline.ClipInspector {
  class Styles extends System.Object {
    protected constructor();
    static AnimationExtrapolationTitle: any;
    static BlendCurvesTitle: any;
    static BlendInCurveName: any;
    static BlendOutCurveName: any;
    static ClipInName: any;
    static ClipTimingTitle: any;
    static DurationName: any;
    static EaseInDurationName: any;
    static EaseOutDurationName: any;
    static EndName: any;
    static GroupTimingTitle: any;
    static MultipleClipsSelectedIncompatibleCapabilitiesWarning: any;
    static MultipleSelectionTitle: any;
    static PostExtrapolateLabel: any;
    static PreExtrapolateLabel: any;
    static PreviewTitle: any;
    static StartName: any;
    static TimeScaleName: any;
  }
}
declare namespace UnityEditor.Timeline.ClipInspector {
  class SelectionInfo extends System.ValueType {
    protected constructor();
    hasBlendIn: boolean;
    hasBlendOut: boolean;
    selectedAssetTypesAreHomogeneous: boolean;
    selectionContainsAtLeastTwoClipsOnTheSameTrack: boolean;
    supportsBlending: boolean;
    supportsClipIn: boolean;
    supportsExtrapolation: boolean;
    supportsSpeedMultiplier: boolean;
  }
}
declare namespace UnityEditor.Timeline.ClipInspector {
  class EditorClipSelection extends System.Object {
    constructor(anEditorClip: UnityEditor.Timeline.EditorClip);
    readonly clip: any;
    readonly editorClip: UnityEditor.Timeline.EditorClip;
    lastCurveVersion: number;
    lastEvalTime: number;
    readonly playableAssetObject: UnityEditor.SerializedObject;
  }
}
declare namespace UnityEditor.Timeline {
  class ClipInspectorCurveEditor extends System.Object {
    constructor();
    static CurveField(title: any, property: UnityEditor.SerializedProperty, onClick: ((obj: UnityEditor.SerializedProperty) => void)): void;
    SetCurves(curves: any[], bindings: UnityEditor.EditorCurveBinding[]): void;
    SetSelected(curve: any): void;
    headerString: string;
    trackTime: number;
    static kDisableTrackTime: number;
  }
}
declare namespace UnityEditor.Timeline {
  class CurveEditUtility extends System.Object {
    protected constructor();
    static AddKey(clip: any, sourceBinding: UnityEditor.EditorCurveBinding, prop: UnityEditor.SerializedProperty, time: number): void;
    static AddKeyFrameToCurve(curve: any, time: number, framerate: number, value: number, stepped: boolean): void;
    static CreateMatchingCurve(curve: any): any;
    static Evaluate(curve: UnityEditor.ObjectReferenceKeyframe[], time: number): UnityEngine.Object;
    static EvaluateIndex(curve: UnityEditor.ObjectReferenceKeyframe[], time: number): number;
    static GetKeyframeAtTime(curve: UnityEditor.ObjectReferenceKeyframe[], time: number, frameRate: number): number;
    static GetKeyframeAtTime(curve: any, time: number, frameRate: number): number;
    static GetKeyTime(time: number, frameRate: number): number;
    static KeyCompare(timeA: number, timeB: number, frameRate: number): number;
    static RemoveCurves(clip: any, prop: UnityEditor.SerializedProperty): void;
    static RemoveKey(clip: any, sourceBinding: UnityEditor.EditorCurveBinding, prop: UnityEditor.SerializedProperty, time: number): void;
    static RemoveKeyFrameFromCurve(curve: any, time: number, framerate: number): boolean;
    static RemoveObjectKey(clip: any, sourceBinding: UnityEditor.EditorCurveBinding, time: number): void;
    static SanitizeCurveKeys(keys: any[], easeIn: boolean): any[];
    static ScaleTime(clip: any, scale: number): void;
    static ShiftBySeconds(clip: any, time: number): void;
  }
}
declare namespace UnityEngine.Timeline {
  class DirectorNamedColor extends UnityEngine.ScriptableObject {
    constructor();
    static CreateAndLoadFromText(text: string): UnityEngine.Timeline.DirectorNamedColor;
    FromText(text: string): void;
    SetDefault(): void;
    ToText(path: string): void;
    colorActivation: any;
    colorAnimation: any;
    colorAnimationRecorded: any;
    colorAnimEditorBinding: any;
    colorAudio: any;
    colorAudioWaveform: any;
    colorBindingSelectorItemBackground: any;
    colorBreadCrumb: any;
    colorBreadCrumbInactive: any;
    colorClipBackground: any;
    colorClipFont: any;
    colorClipHighlight: any;
    colorClipShadow: any;
    colorClipTrimLine: any;
    colorClipUnion: any;
    colorCurveModeSelection: any;
    colorCurveSelected: any;
    colorDefaultTrackDrawer: any;
    colorDropTarget: any;
    colorDuration: any;
    colorDurationLine: any;
    colorEndmarker: any;
    colorEvent: any;
    colorEventNormal: any;
    colorEventOff: any;
    colorEventRunInEditor: any;
    colorEventSelected: any;
    colorGroup: any;
    colorGroupTrackBackground: any;
    colorInfiniteClipLine: any;
    colorInfiniteTrackBackgroundRecording: any;
    colorInifiniteTrack: any;
    colorInlineCurveOutOfRangeOverlay: any;
    colorInlineCurveVerticalLines: any;
    colorInvalidDropTarget: any;
    colorKeyFrame: any;
    colorLockTextBG: any;
    colorPlayhead: any;
    colorRange: any;
    colorRecordingClipOutline: any;
    colorRectangleSelect: any;
    colorScripting: any;
    colorSelection: any;
    colorSequenceBackground: any;
    colorSnapLine: any;
    colorTimecodeBackground: any;
    colorTimelineBackground: any;
    colorTimelineItem: any;
    colorTooltipBackground: any;
    colorTopOutline1: any;
    colorTopOutline2: any;
    colorTopOutline3: any;
    colorTrackBackground: any;
    colorTrackBackgroundRecording: any;
    colorTrackBackgroundSelected: any;
    colorTrackDarken: any;
    colorTrackFont: any;
    colorTrackHeaderBackground: any;
    colorValidDropTarget: any;
    colorVideo: any;
  }
}
declare namespace UnityEditor.Timeline {
  class DirectorStyles extends System.Object {
    protected constructor();
    Elipsify(label: string, rect: any, style: any): string;
    ExportSkinToFile(): void;
    GetStyle(s: string): any;
    Initialize(): void;
    ReloadSkin(): void;
    readonly customSkin: UnityEngine.Timeline.DirectorNamedColor;
    readonly cutomSkinContext: string;
    readonly indentWidth: number;
    static readonly Instance: UnityEditor.Timeline.DirectorStyles;
    activation: any;
    static addFCurve: any;
    static addIcon: any;
    autoKey: any;
    avatarMaskOff: any;
    avatarMaskOn: any;
    blendingIn: any;
    blendingOut: any;
    bottomShadow: any;
    clipIn: any;
    clipOut: any;
    connector: any;
    static createNewTimelineText: any;
    static createTimelineOnSelection: any;
    curves: any;
    displayBackground: any;
    static editTimelineAsAsset: any;
    static emptyTimelineMessage: any;
    endmarker: any;
    eventIcon: any;
    eventTrakIcon: any;
    eventWhite: any;
    extrapolationContinue: any;
    extrapolationHold: any;
    extrapolationLoop: any;
    extrapolationPingPong: any;
    foldout: any;
    fontClip: any;
    static gotoBeginingContent: any;
    static gotoEndContent: any;
    groupBackground: any;
    groupFont: any;
    handLeft: any;
    handRight: any;
    infiniteTrack: any;
    static kBaseIndent: number;
    static kDefaultTrackHeight: number;
    static kDurationGuiThickness: number;
    keyframe: any;
    lockButton: any;
    locked: any;
    lockedBG: any;
    mute: any;
    static muteContent: any;
    static newContent: any;
    static nextFrameContent: any;
    static noTimelineAssetSelected: any;
    static noTimelinesInScene: any;
    options: any;
    outlineBorder: any;
    static playContent: any;
    playrange: any;
    playrangeContent: any;
    playTimeRangeEnd: any;
    playTimeRangeStart: any;
    static previewContent: any;
    static previousFrameContent: any;
    static recordContent: any;
    static recordingLabel: any;
    static referenceTrackLabel: any;
    selectedStyle: any;
    static sequenceSelectorIcon: any;
    static soloContent: any;
    static textContentEditWithAnimationEditor: any;
    timeCursor: any;
    static timelineAssetEditModeTitle: any;
    timelineClip: any;
    timelineClipSelected: any;
    tinyFont: any;
    trackHeaderFont: any;
    trackOptions: any;
    trackSwatchStyle: any;
    warning: any;
  }
}
declare namespace UnityEditor.Timeline {
  class ITimelineState {
    protected constructor();
    AddEndFrameDelegate(callback: ((state: UnityEditor.Timeline.ITimelineState, currentEvent: any) => boolean)): void;
    AddStartFrameDelegate(callback: ((state: UnityEditor.Timeline.ITimelineState, currentEvent: any) => boolean)): void;
    GetBindingForTrack(trackAsset: any): UnityEngine.Component;
    PixelToTime(pixel: number): number;
    Refresh(): void;
    ScreenSpacePixelToTimeAreaTime(pixel: number): number;
    SetCurrentSequence(asset: any): void;
    SnapToFrameIfRequired(time: number): number;
    TimeAreaPixelToTime(pixel: number): number;
    TimeAsString(timeValue: number, format: string): string;
    TimeToPixel(time: number): number;
    TimeToScreenSpacePixel(time: number): number;
    TimeToTimeAreaPixel(time: number): number;
    readonly canRecord: boolean;
    currentDirector: any;
    readonly editorWindow: UnityEditor.EditorWindow;
    frame: number;
    frameRate: number;
    playbackSpeed: number;
    playing: boolean;
    playRangeTime: any;
    previewMode: boolean;
    rebuildGraph: boolean;
    readonly recording: boolean;
    readonly rootTrack: any;
    showAudioWaveform: boolean;
    time: number;
    timeInFrames: boolean;
    readonly timeline: any;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineEditor extends System.Object {
    protected constructor();
    static readonly playableDirector: any;
    static readonly timelineAsset: any;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineHelpers extends System.Object {
    protected constructor();
    static AddRequiredComponent(go: any, asset: any): UnityEngine.Component;
    static Clone(clip: any, directorInstance: any): any;
    static Clone(theMarker: any): any;
    static Clone(parent: any, trackAsset: any, directorInstance: any): any;
    static CreateClipOnTrack(playableAssetType: any, parentTrack: any, state: UnityEditor.Timeline.ITimelineState): any;
    static CreateClipOnTrack(playableAssetType: any, parentTrack: any, state: UnityEditor.Timeline.ITimelineState, mousePosition: any): any;
    static CreateClipOnTrack(asset: UnityEngine.Object, parentTrack: any, state: UnityEditor.Timeline.ITimelineState, mousePosition: any): any;
    static FindBestInsertionTime(state: UnityEditor.Timeline.ITimelineState, clip: any, track: any): number;
    static FindBestInsertionTime(state: UnityEditor.Timeline.ITimelineState, clip: any, track: any, mousePosition: any): number;
    static GenerateUniqueActorName(timeline: any, prefix: string): string;
    static GetAllStandalonePlayableAssets(): any[];
    static GetCustomDrawer(trackType: any): any;
    static GetGroup(o: any): any;
    static GetLoopDuration(clip: any): number;
    static GetLoopTimes(clip: any): number[];
    static GetMediaTypeFromType(type: any): any;
    static GetMixableTypes(): UnityEngine.Timeline.TrackType[];
    static GetTrackCategoryName(trackType: UnityEngine.Timeline.TrackType): string;
    static GetTrackEndTime(track: any): number;
    static GetTrackMenuName(trackType: UnityEngine.Timeline.TrackType): string;
    static GetTrackTypeHandle(toBeHandled: any): UnityEngine.Timeline.TrackType[];
    static GetTypesHandledByTrackType(trackType: UnityEngine.Timeline.TrackType): any;
    static HasUsableAssetDuration(clip: any): boolean;
    static HaveSameContainerAsset(assetA: UnityEngine.Object, assetB: UnityEngine.Object): boolean;
    static IsCircularRef(baseSeq: any, other: any): boolean;
    static IsTypeSupportedByTrack(trackType: UnityEngine.Timeline.TrackType, objectType: any): boolean;
    static NudgeClip(clip: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, offset: number): boolean;
    static SaveAnimClipIntoObject(clip: any, asset: UnityEngine.Object): void;
    static TrackTypeFromType(t: any): UnityEngine.Timeline.TrackType;
    static GroupTrackType: UnityEngine.Timeline.TrackType;
    static sInvalidMousePosition: any;
  }
}
declare namespace UnityEditor.Timeline {
  class SelectionManager extends System.Object {
    protected constructor();
    static Add(obj: UnityEngine.Object): void;
    static Add(item: any): void;
    static Add(item: any): void;
    static Add(item: any): void;
    static Clear(): void;
    static Contains(item: any): boolean;
    static Contains(item: any): boolean;
    static Contains(item: any): boolean;
    static Contains(item: any): boolean;
    static Count(): number;
    static GetCurrentInlineEditorCurve(): UnityEditor.IClipCurveEditorOwner;
    static IsCurveEditorFocused(selection: UnityEditor.IClipCurveEditorOwner): boolean;
    static IsMouseHoveringOnItem(): boolean;
    static IsMultiSelect(): boolean;
    static Remove(item: UnityEngine.Object): void;
    static Remove(item: any): void;
    static Remove(item: any): void;
    static Remove(item: any): void;
    static RemoveTimelineSelection(): void;
    static SelectedClipGUI(): any;
    static SelectedItemGUI(): any;
    static SelectedMarkerGUI(): any;
    static SelectedTrackGUI(): any;
    static SelectedTracks(): any;
    static SelectInlineCurveEditor(selection: UnityEditor.IClipCurveEditorOwner): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineUtility extends System.Object {
    protected constructor();
    static GetDirectorComponentForGameObject(gameObject: any): any;
    static GetDirectorsInSceneUsingAsset(asset: any): any[];
    static GetSceneGameObject(director: any, asset: any): any;
    static GetSceneReferenceTrack(asset: any): any;
    static GetTimelineAssetForDirectorComponent(director: any): any;
    static IsPrefabOrAsset(obj: UnityEngine.Object): boolean;
    static ReorderTracks(allTracks: any[], tracks: any[], insertAfterAsset: any, up: boolean): void;
    static SaveSequence(timeline: any): void;
    static SaveSequence(timeline: any, path: string): void;
    static SetBindingInDirector(director: any, bindTo: UnityEngine.Object, objectToBind: UnityEngine.Object): void;
    static SetSceneGameObject(director: any, asset: any, go: any): void;
    static TrackHasAnimationCurves(track: any): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class Tooltip extends System.Object {
    constructor(theStyle: any, font: any);
    constructor();
    Draw(): void;
    bounds: any;
    font: any;
    foreColor: any;
    pad: number;
    style: any;
    text: string;
  }
}
declare namespace UnityEditor.Timeline {
  class Gaps extends System.Object {
    protected constructor();
    static Insert(asset: any, at: number, amount: number, tolerance: number): void;
  }
}
declare namespace UnityEditor.Timeline {
  class Scrub extends UnityEditor.Timeline.Manipulator {
    constructor(onDrag: ((arg1: number, arg2: boolean) => void));
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class Manipulator extends System.Object {
    protected constructor();
    ConsumeEvent(): boolean;
    static GetElementsAtPosition(qtree: any, point: any): UnityEditorInternal.IBounds[];
    static GetElementsInRectangle(qtree: any, r: any): UnityEditorInternal.IBounds[];
    IgnoreEvent(): boolean;
    Init(parent: UnityEditor.Timeline.IControl): void;
    static showEventConsumer: boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackheadContextMenu extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimeAreaItem extends UnityEditor.Timeline.Control {
    constructor(style: any, onDrag: ((arg1: number, arg2: boolean) => void));
    Draw(rect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, time: number): void;
    alignment: UnityEditor.Timeline.TimeAreaItem.Alignment;
    boundOffset: any;
    readonly bounds: any;
    canMoveHead: boolean;
    dottedLine: boolean;
    drawHead: boolean;
    drawLine: boolean;
    headColor: any;
    lineColor: any;
    showTooltip: boolean;
    tooltip: string;
  }
}
declare namespace UnityEditor.Timeline {
  class Control extends System.Object {
    constructor();
    AddChild(child: UnityEditor.Timeline.Control): void;
    static AddCursor(ci: UnityEditor.Timeline.CursorInfo): void;
    AddManipulator(m: UnityEditor.Timeline.Manipulator): void;
    ClearManipulators(): void;
    static DrawCursors(): void;
    DrawOverlays(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static InvokeEvents(eventList: ((target: any, e: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState) => boolean), target: any, evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    static IsMouseContainsInControls(controls: any): boolean;
    IsMouseOver(mousePosition: any): boolean;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    static RemoveCursor(ci: UnityEditor.Timeline.CursorInfo): void;
    readonly bounds: any;
    readonly children: UnityEditor.Timeline.Control[];
    parentControl: UnityEditor.Timeline.Control;
  }
}
declare namespace UnityEditor.Timeline.TimeAreaItem {
  class Alignment extends System.Enum {
    protected constructor();
    static Center: UnityEditor.Timeline.TimeAreaItem.Alignment;
    static Left: UnityEditor.Timeline.TimeAreaItem.Alignment;
    static Right: UnityEditor.Timeline.TimeAreaItem.Alignment;
    value__: number;
  }
}
declare namespace UnityEngine.Timeline {
  class TrackType extends System.Object {
    constructor(trackType: any, mediaType: any);
    constructor(trackType: any);
    Equals(obj: any): boolean;
    Equals(p: UnityEngine.Timeline.TrackType): boolean;
    GetHashCode(): number;
    readonly requiresGameObjectBinding: boolean;
    mediaType: any;
    trackType: any;
  }
}
declare namespace UnityEditor.Timeline {
  class ActivationTrackDrawer extends UnityEditor.Timeline.TrackDrawer {
    constructor();
    GetIcon(): any;
    OnBuildTrackContextMenu(menu: UnityEditor.GenericMenu, track: any, state: UnityEditor.Timeline.ITimelineState): void;
    readonly trackColor: any;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackDrawer extends UnityEditor.GUIDrawer {
    constructor();
    static CreateInstance(trackAsset: any): UnityEditor.Timeline.TrackDrawer;
    DrawClip(drawData: UnityEditor.Timeline.TrackDrawer.ClipDrawData): void;
    DrawEvent(drawData: UnityEditor.Timeline.TrackDrawer.MarkerDrawData): void;
    DrawTrack(trackRect: any, trackAsset: any, visibleTime: any, state: UnityEditor.Timeline.ITimelineState): boolean;
    DrawTrackHeaderButton(rect: any, track: any, state: UnityEditor.Timeline.ITimelineState): boolean;
    GetClipBaseColor(clip: any): any;
    GetClipSelectedColor(clip: any): any;
    GetCustomTitle(track: any): string;
    GetHeight(t: any): number;
    static GetHighlightColor(clipColor: any): any;
    GetIcon(): any;
    GetTrackBackgroundColor(trackAsset: any): any;
    OnBuildClipContextMenu(menu: UnityEditor.GenericMenu, clips: any[], state: UnityEditor.Timeline.ITimelineState): void;
    OnBuildTrackContextMenu(menu: UnityEditor.GenericMenu, trackAsset: any, state: UnityEditor.Timeline.ITimelineState): void;
    readonly canDrawExtrapolationIcon: boolean;
    track: any;
    readonly trackColor: any;
    DefaultTrackHeight: number;
    trackMenuContext: UnityEditor.Timeline.TrackDrawer.TrackMenuContext;
  }
}
declare namespace UnityEditor.Timeline.ActivationTrackDrawer {
  class Styles extends System.Object {
    protected constructor();
    static ClipText: any;
    static MenuText: any;
  }
}
declare namespace UnityEditor.Timeline {
  class ActivationTrackInspector extends UnityEditor.Timeline.TrackAssetInspector {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackAssetInspector extends UnityEditor.Editor {
    constructor();
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline.ActivationTrackInspector {
  class Styles extends System.Object {
    protected constructor();
    static PostPlaybackStateText: any;
  }
}
declare namespace UnityEditor.Timeline.Analytics {
  class TimelineSceneInfo extends System.Object {
    constructor();
    maxDuration: number;
    maxNumTracks: number;
    minDuration: number;
    minNumTracks: number;
    numRecorded: number;
    numTracks: number;
    trackCount: any;
    uniqueDirectors: any;
    userTrackTypesCount: any;
  }
}
declare namespace UnityEditor.Timeline.Analytics {
  class TrackInfo extends System.ValueType {
    protected constructor();
    name: string;
    percent: number;
  }
}
declare namespace UnityEditor.Timeline.Analytics {
  class TimelineEventInfo extends System.Object {
    constructor(sceneInfo: UnityEditor.Timeline.Analytics.TimelineSceneInfo);
    static IsUserType(t: any): boolean;
    max_duration: number;
    max_num_tracks: number;
    min_duration: number;
    min_num_tracks: number;
    most_popular_user_track: string;
    num_timelines: number;
    recorded_percent: number;
    track_info: UnityEditor.Timeline.Analytics.TrackInfo[];
  }
}
declare namespace UnityEditor.Timeline.Analytics {
  class TimelineAnalytics extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Timeline.Analytics.TimelineAnalytics {
  class TimelineAnalyticsPreProcess extends System.Object {
    constructor();
    OnPreprocessBuild(target: UnityEditor.BuildTarget, path: string): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.Timeline.Analytics.TimelineAnalytics {
  class TimelineAnalyticsProcess extends System.Object {
    constructor();
    OnProcessScene(scene: any): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.Timeline.Analytics.TimelineAnalytics {
  class TimelineAnalyticsPostProcess extends System.Object {
    constructor();
    OnPostprocessBuild(target: UnityEditor.BuildTarget, path: string): void;
    readonly callbackOrder: number;
  }
}
declare namespace UnityEditor.Timeline {
  class CurveBindingPair extends System.ValueType {
    protected constructor();
    binding: UnityEditor.EditorCurveBinding;
    curve: any;
    objectCurve: UnityEditor.ObjectReferenceKeyframe[];
  }
}
declare namespace UnityEditor.Timeline {
  class CurveBindingGroup extends System.Object {
    constructor();
    readonly count: number;
    curveBindingPairs: UnityEditor.Timeline.CurveBindingPair[];
    readonly isFloatCurve: boolean;
    readonly isObjectCurve: boolean;
    timeRange: any;
    valueRange: any;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationClipCurveInfo extends System.Object {
    constructor();
    GetBindingForCurve(curve: any, binding: any): boolean;
    GetCurveForBinding(binding: UnityEditor.EditorCurveBinding): any;
    GetCurveTimes(curve: UnityEditor.EditorCurveBinding): number[];
    GetCurveTimes(curves: UnityEditor.EditorCurveBinding[]): number[];
    GetGroupBinding(groupID: string): UnityEditor.Timeline.CurveBindingGroup;
    GetObjectCurveForBinding(binding: UnityEditor.EditorCurveBinding): UnityEditor.ObjectReferenceKeyframe[];
    Update(clip: any): void;
    dirty: boolean;
    readonly keyTimes: number[];
    readonly version: number;
    bindings: UnityEditor.EditorCurveBinding[];
    curves: any[];
    objectBindings: UnityEditor.EditorCurveBinding[];
    objectCurves: UnityEditor.ObjectReferenceKeyframe[][];
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationClipCurveCache extends System.Object {
    constructor();
    GetCurveInfo(clip: any): UnityEditor.Timeline.AnimationClipCurveInfo;
    OnDisable(): void;
    OnEnable(): void;
    static readonly Instance: UnityEditor.Timeline.AnimationClipCurveCache;
  }
}
declare namespace UnityEditor.Timeline {
  class EditorCurveBindingExtension extends System.Object {
    protected constructor();
    static GetGroupID(binding: UnityEditor.EditorCurveBinding): string;
  }
}
declare namespace UnityEditor.Timeline {
  class CurveBindingGroupExtensions extends System.Object {
    protected constructor();
    static GetDescription(group: UnityEditor.Timeline.CurveBindingGroup, t: number): string;
    static IsColorGroup(curves: UnityEditor.Timeline.CurveBindingGroup): boolean;
    static IsEnableGroup(curves: UnityEditor.Timeline.CurveBindingGroup): boolean;
    static IsVectorGroup(curves: UnityEditor.Timeline.CurveBindingGroup): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationOffsetMenu extends System.Object {
    protected constructor();
    static OnClipMenu(state: UnityEditor.Timeline.ITimelineState, clips: any[], menu: UnityEditor.GenericMenu): void;
    static MatchFieldsPrefix: string;
    static MatchNextMenuItem: any;
    static MatchPreviousMenuItem: any;
    static ResetOffsetMenuItem: any;
  }
}
declare namespace UnityEditor {
  class BindingSelector extends System.Object {
    constructor(window: UnityEditor.EditorWindow, curveEditor: UnityEditor.CurveEditor);
    Delete(state: UnityEditor.Timeline.ITimelineState): void;
    InitIfNeeded(rect: any, dataSource: UnityEditor.Timeline.CurveDataSource): void;
    OnGUI(targetRect: any): void;
    RefreshCurves(): void;
    RefreshTree(): void;
    readonly selectable: boolean;
    readonly selectableObject: any;
    selected: boolean;
    static kBottomPadding: number;
  }
}
declare namespace UnityEditorInternal {
  class BindingTreeViewDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, clip: any);
    FetchData(): void;
    UpdateData(): void;
  }
}
declare namespace UnityEditorInternal {
  class CurveTreeViewNode extends UnityEditor.IMGUI.Controls.TreeViewItem {
    constructor(id: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, bindings: UnityEditor.EditorCurveBinding[]);
    readonly bindings: UnityEditor.EditorCurveBinding[];
  }
}
declare namespace UnityEditorInternal {
  class BindingTreeViewGUI extends UnityEditor.IMGUI.Controls.TreeViewGUI {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
  }
}
declare namespace UnityEditor.Timeline {
  class CurveDataSource extends System.Object {
    protected constructor();
    GetBackgroundRect(state: UnityEditor.Timeline.TimelineWindow.TimelineState): any;
    SetHeight(height: number): void;
    readonly animationClip: any;
    readonly start: number;
    readonly timeScale: number;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineClipCurveDataSource extends UnityEditor.Timeline.CurveDataSource {
    constructor(clipGUI: UnityEditor.TimelineClipGUI);
    readonly animationClip: any;
    readonly start: number;
    readonly timeScale: number;
  }
}
declare namespace UnityEditor.Timeline {
  class InfiniteClipCurveDataSource extends UnityEditor.Timeline.CurveDataSource {
    constructor(trackGui: UnityEditor.Timeline.TimelineTrackGUI);
    readonly animationClip: any;
    readonly start: number;
    readonly timeScale: number;
  }
}
declare namespace UnityEditor {
  class ClipCurveEditor extends System.Object {
    constructor(dataSource: UnityEditor.Timeline.CurveDataSource, parentWindow: UnityEditor.Timeline.TimelineWindow);
    DrawCurveEditor(animEditorRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, activeRange: any, loop: boolean, selected: boolean): void;
    DrawHeader(headerRect: any): void;
    FrameClip(): void;
    GetSelectionRange(): any;
    HasSelection(): boolean;
    SelectAllKeys(): void;
    readonly dataSource: UnityEditor.Timeline.CurveDataSource;
  }
}
declare namespace UnityEditor.ClipCurveEditor {
  class FrameFormatCurveEditorState extends System.Object {
    constructor();
    readonly timeFormat: UnityEditor.TimeArea.TimeFormat;
  }
}
declare namespace UnityEditor.ClipCurveEditor {
  class UnformattedCurveEditorState extends System.Object {
    constructor();
    readonly timeFormat: UnityEditor.TimeArea.TimeFormat;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineAnimationUtilities extends System.Object {
    constructor();
    static ComputeClipWorldSpaceOffset(director: any, clip: any, clipPositionOffset: any, clipRotationOffset: any): void;
    static ComputeTrackOffsets(director: any, clip: any, parentPositionOffset: any, parentRotationOffset: any, positionOffset: any, rotationOffset: any): void;
    static CreateTimeController(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clipData: UnityEditor.Timeline.TimelineWindowTimeControl.ClipData): UnityEditor.Timeline.TimelineWindowTimeControl;
    static CreateTimeController(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clip: any): UnityEditor.Timeline.TimelineWindowTimeControl;
    static EditAnimationClipWithTimeController(animationClip: any, timeController: UnityEditor.Timeline.TimelineWindowTimeControl, sourceObject: UnityEngine.Object): void;
    static GetAnimationWindowCurrentFrame(): number;
    static GetNextClip(clip: any): any;
    static GetPreviousClip(clip: any): any;
    static GetTrackOffsets(track: any, transform: any): UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform;
    static MatchNext(currentClip: any, matchPoint: any, director: any): void;
    static MatchPrevious(currentClip: any, matchPoint: any, director: any): void;
    static SetAnimationWindowCurrentFrame(frame: number): void;
    static UpdateClipOffsets(asset: any, track: any, transform: any, globalPosition: any, globalRotation: any): UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform;
    static UpdateTrackOffset(track: any, transform: any, offsets: UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform): void;
    static ValidateOffsetAvailabitity(director: any, animator: any): boolean;
  }
}
declare namespace UnityEditor.Timeline.TimelineAnimationUtilities {
  class OffsetEditMode extends System.Enum {
    protected constructor();
    static None: UnityEditor.Timeline.TimelineAnimationUtilities.OffsetEditMode;
    static Rotation: UnityEditor.Timeline.TimelineAnimationUtilities.OffsetEditMode;
    static Translation: UnityEditor.Timeline.TimelineAnimationUtilities.OffsetEditMode;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineAnimationUtilities {
  class RigidTransform extends System.ValueType {
    protected constructor();
    static Compose(pos: any, rot: any): UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform;
    static Inverse(a: UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform): UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform;
    static Mul(a: UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform, b: UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform): UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform;
    static readonly identity: UnityEditor.Timeline.TimelineAnimationUtilities.RigidTransform;
    position: any;
    rotation: any;
  }
}
declare namespace UnityEditor.Timeline {
  class HideInMenuAttribute extends System.Attribute {
    constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class SeparatorMenuItemPosition extends System.Enum {
    protected constructor();
    static After: UnityEditor.Timeline.SeparatorMenuItemPosition;
    static Before: UnityEditor.Timeline.SeparatorMenuItemPosition;
    static None: UnityEditor.Timeline.SeparatorMenuItemPosition;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class SeparatorMenuItemAttribute extends System.Attribute {
    constructor(position: UnityEditor.Timeline.SeparatorMenuItemPosition);
    constructor();
    readonly after: boolean;
    readonly before: boolean;
    position: UnityEditor.Timeline.SeparatorMenuItemPosition;
  }
}
declare namespace UnityEditor.Timeline {
  class ShortcutAttribute extends System.Attribute {
    constructor(actionName: string);
    IsRecognized(evt: any): boolean;
    ToString(): string;
  }
}
declare namespace UnityEngine.Timeline {
  class AudioTrackDrawer extends UnityEditor.Timeline.TrackDrawer {
    constructor();
    GetIcon(): any;
    readonly trackColor: any;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimatedParameterExtensions extends System.Object {
    protected constructor();
    static AddAnimatedParameter(clip: any, parameterName: string): boolean;
    static AddAnimatedParameterValueAt(clip: any, parameterName: string, value: number, time: number): boolean;
    static GetAnimatedParameter(clip: any, parameterName: string): any;
    static GetCurveBinding(clip: any, parameterName: string): UnityEditor.EditorCurveBinding;
    static HasAnyAnimatableParameters(clip: any): boolean;
    static IsAnimatable(t: UnityEditor.SerializedPropertyType): boolean;
    static IsParameterAnimatable(clip: any, parameterName: string): boolean;
    static IsParameterAnimated(clip: any, parameterName: string): boolean;
    static RemoveAnimatedParameter(clip: any, parameterName: string): boolean;
    static SetAnimatedParameter(clip: any, parameterName: string, curve: any): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationTrackExtensions extends System.Object {
    protected constructor();
    static CanConvertFromClipMode(track: any): boolean;
    static CanConvertToClipMode(track: any): boolean;
    static ConvertFromClipMode(track: any, timeline: any): void;
    static ConvertToClipMode(track: any): void;
  }
}
declare namespace UnityEditor.Timeline {
  class ClipExtensions extends System.Object {
    protected constructor();
    static Duplicate(clip: any, director: any): any;
    static DuplicateAtTime(clip: any, track: any, time: number, director: any): any;
    static FindClipInsertionTime(clip: any, track: any): number;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackExtensions extends System.Object {
    protected constructor();
    static ComputeBlendsFromOverlaps(asset: any): void;
    static CreateClip(track: any, time: number): any;
    static GetOrCreateClip(track: any): any;
    static kMinOverlapTime: number;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationPlayableAssetInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
    static ShowRotationField(rotation: UnityEditor.SerializedProperty): void;
  }
}
declare namespace UnityEditor.Timeline.AnimationPlayableAssetInspector {
  class Styles extends System.Object {
    protected constructor();
    static AnimationClipName: any;
    static AnimClipText: any;
    static ClipOffsetTitle: any;
    static LegacyError: any;
    static MotionCurveWarning: any;
    static PositionIcon: any;
    static RotationText: any;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationTrackInspector extends UnityEditor.Timeline.TrackAssetInspector {
    constructor();
    DrawAvatarProperties(): void;
    static MatchTargetsField(property: UnityEditor.SerializedProperty, alternate: UnityEditor.SerializedProperty, disableOptions: UnityEditor.SerializedProperty, showHelp?: boolean): void;
    OnDestroy(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    static ShowMotionOffsetEditModeToolbar(motionOffset: any): void;
  }
}
declare namespace UnityEditor.Timeline.AnimationTrackInspector {
  class Styles extends System.Object {
    protected constructor();
    static Blank: any;
    static DisableOptionsTitle: any;
    static MatchTargetFieldsTitle: any;
    static MatchTargetsFieldHelp: any;
    static PositionIcon: any;
    static PositionTitle: any;
    static RotationIcon: any;
    static RotationTitle: any;
    static TrackOffsetCannotBeEditedWarning: any;
    static TrackOffsetTitle: any;
    static XTitle: any;
    static YTitle: any;
    static ZTitle: any;
  }
}
declare namespace UnityEditor.Timeline {
  class BasicPlayableAssetInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class AudioPlayableAssetInspector extends UnityEditor.Timeline.BasicPlayableAssetInspector {
    constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class ActivationPlayableAssetInspector extends UnityEditor.Timeline.BasicPlayableAssetInspector {
    constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class BuiltInPresets extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class DirectorNamedColorInspector extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class EditorClip {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    SetItem(newItem: any): void;
    ToString(): string;
    asset: UnityEngine.Object;
    clip: any;
    hideFlags: any;
    readonly item: any;
    lastHash: number;
    readonly locked: boolean;
    name: string;
    timelineName: string;
  }
}
declare namespace UnityEditor.Timeline {
  class EditorItem<T> extends UnityEngine.ScriptableObject {
    protected constructor();
    GetHashCode(): number;
    SetItem(newItem: T): void;
    asset: UnityEngine.Object;
    readonly item: any;
    lastHash: number;
    readonly locked: boolean;
    timelineName: string;
  }
}
declare namespace UnityEditor.Timeline {
  class EditorMarker {
    constructor();
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    SetItem(newItem: any): void;
    ToString(): string;
    asset: UnityEngine.Object;
    hideFlags: any;
    readonly item: any;
    lastHash: number;
    readonly locked: boolean;
    name: string;
    theMarker: any;
    timelineName: string;
  }
}
declare namespace UnityEditor.Timeline {
  class IEditorItem {
    protected constructor();
    readonly item: any;
    readonly locked: boolean;
    timelineName: string;
  }
}
declare namespace UnityEditor.Timeline {
  class EditorItemFactory extends System.Object {
    constructor();
    static GetEditorClip(timelineClip: any): UnityEditor.Timeline.EditorClip;
    static GetEditorMarker(timelineMarker: any): UnityEditor.Timeline.EditorMarker;
  }
}
declare namespace UnityEditor.Timeline {
  class EditorMarkerInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class GroupTrackInspector extends UnityEditor.Timeline.TrackAssetInspector {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline.GroupTrackInspector {
  class Styles extends System.Object {
    protected constructor();
    static GroupSubTrackHeaderDuration: any;
    static GroupSubTrackHeaderFrames: any;
    static GroupSubTrackHeaderName: any;
    static GroupSubTrackHeaderType: any;
  }
}
declare namespace UnityEditor.Timeline.inspectors {
  class TimeFieldDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineAssetInspector extends UnityEditor.Editor {
    constructor();
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline.TimelineAssetInspector {
  class Styles extends System.Object {
    protected constructor();
    static Duration: any;
    static DurationMode: any;
    static FrameRate: any;
    static HeaderTitleMultiselection: any;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineInspectorUtility extends System.Object {
    protected constructor();
    static GetInspectorForObjects(objects: UnityEngine.Object[]): UnityEditor.Editor;
    static TimeField(label: any, time: number, readOnly: boolean, showMixed: boolean, frameRate: number, minValue: number, maxValue: number): number;
    static TimeField(property: UnityEditor.SerializedProperty, label: any, readOnly: boolean, frameRate: number, minValue: number, maxValue: number): void;
    static TimeField(rect: any, property: UnityEditor.SerializedProperty, label: any, readOnly: boolean, frameRate: number, minValue: number, maxValue: number): void;
  }
}
declare namespace UnityEditor.Timeline.TimelineInspectorUtility {
  class Styles extends System.Object {
    protected constructor();
    static FramesPrefix: any;
    static SecondsPrefix: any;
  }
}
declare namespace UnityEditor.Timeline {
  class MoveItemUtilities extends System.Object {
    constructor();
    static IsDriver(target: UnityEditor.TimelineItemGUI, evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class ItemSelectionIndicator extends System.Object {
    constructor();
    Draw(beginTime: number, endTime: number, magnetEngine: UnityEditor.Timeline.MagnetEngine): void;
  }
}
declare namespace UnityEditor.Timeline {
  class MoveClipAttractionHandler extends System.Object {
    constructor();
    OnAttractedEdge(attractable: UnityEditor.Timeline.IAttractable, edge: UnityEditor.Timeline.AttractedEdge, time: number, duration: number): void;
  }
}
declare namespace UnityEditor.Timeline {
  class MoveClip extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class MoveEventAttractionHandler extends System.Object {
    constructor();
    OnAttractedEdge(attractable: UnityEditor.Timeline.IAttractable, edge: UnityEditor.Timeline.AttractedEdge, time: number, duration: number): void;
  }
}
declare namespace UnityEditor.Timeline {
  class MoveEvent extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class Jog extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class NudgeClips extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class RectangleSelect extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class SelectAllTracks extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackZoom extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class ControlPlayableInspector extends UnityEditor.Editor {
    constructor();
    DisablePlayOnAwake(sourceObject: any): void;
    DisablePlayOnAwake(director: any): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Timeline.ControlPlayableInspector {
  class Styles extends System.Object {
    protected constructor();
    static activationContent: any;
    static activationDisabledContent: any;
    static advancedContent: any;
    static postPlayableContent: any;
    static prefabContent: any;
    static randomSeedContent: any;
    static updateHierarchy: any;
    static updateITimeControlContent: any;
    static updateParticleSystemsContent: any;
    static updatePlayableDirectorContent: any;
    static updatePlayableDirectorDisabledContent: any;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationTrackRecorder extends System.Object {
    constructor();
    static AddRecordableClip(parentTrack: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): any;
    FinalizeRecording(state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    FinializeTrack(track: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static GetUniqueRecordedClipName(owner: UnityEngine.Object, name: string): string;
    PrepareForRecord(state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    PrepareTrack(track: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, gameObject: any, startTime: any): any;
    readonly recordClip: any;
    static kRecordClipDefaultName: string;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineRecording extends System.Object {
    constructor();
    static AddKey(modifications: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static AddKey(prop: UnityEditor.SerializedProperty, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static CanRecord(property: UnityEditor.SerializedProperty, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    static GetRecordableGameObjects(state: UnityEditor.Timeline.TimelineWindow.TimelineState): any;
    static GetRecordingTrack(property: UnityEditor.SerializedProperty, state: UnityEditor.Timeline.TimelineWindow.TimelineState): any;
    static HasCurve(modifications: any, target: UnityEngine.Object, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    static HasKey(modifications: any, target: UnityEngine.Object, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    static NextKey(target: UnityEngine.Object, modifications: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static PrevKey(target: UnityEngine.Object, modifications: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static RemoveCurve(target: UnityEngine.Object, modifications: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static RemoveKey(target: UnityEngine.Object, modifications: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static kLocalEulerHint: string;
    static kLocalPosition: string;
    static kLocalRotation: string;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineRecordingContextualResponder extends System.Object {
    constructor(_state: UnityEditor.Timeline.TimelineWindow.TimelineState);
    AddAnimatedKeys(): void;
    AddCandidateKeys(): void;
    AddKey(modifications: UnityEditor.PropertyModification[]): void;
    CandidateExists(modifications: UnityEditor.PropertyModification[]): boolean;
    CurveExists(modifications: UnityEditor.PropertyModification[]): boolean;
    GoToNextKeyframe(modifications: UnityEditor.PropertyModification[]): void;
    GoToPreviousKeyframe(modifications: UnityEditor.PropertyModification[]): void;
    HasAnyCandidates(): boolean;
    HasAnyCurves(): boolean;
    IsAnimatable(modifications: UnityEditor.PropertyModification[]): boolean;
    IsEditable(targetObject: UnityEngine.Object): boolean;
    KeyExists(modifications: UnityEditor.PropertyModification[]): boolean;
    RemoveCurve(modifications: UnityEditor.PropertyModification[]): void;
    RemoveKey(modifications: UnityEditor.PropertyModification[]): void;
    readonly state: UnityEditor.Timeline.TimelineWindow.TimelineState;
  }
}
declare namespace UnityEditor.Timeline.TimelineRecording {
  class RecordingState extends System.Object {
    constructor();
    AddPropertyModification(binding: UnityEditor.EditorCurveBinding, propertyModification: UnityEditor.PropertyModification, keepPrefabOverride: boolean): void;
    DiscardModification(modification: UnityEditor.PropertyModification): boolean;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    activeAnimationClip: any;
    activeGameObject: any;
    activeRootGameObject: any;
    readonly addZeroFrame: boolean;
    currentFrame: number;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackAssetRecordingExtensions extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class PlayableTrackDrawer extends UnityEditor.Timeline.TrackDrawer {
    constructor();
    GetIcon(): any;
    OnBuildTrackContextMenu(menu: UnityEditor.GenericMenu, trackAsset: any, state: UnityEditor.Timeline.ITimelineState): void;
    readonly trackColor: any;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationTrackDrawer extends UnityEditor.Timeline.TrackDrawer {
    constructor();
    DrawClip(drawData: UnityEditor.Timeline.TrackDrawer.ClipDrawData): void;
    DrawTrackHeaderButton(rect: any, track: any, state: UnityEditor.Timeline.ITimelineState): boolean;
    GetClipBaseColor(clip: any): any;
    GetIcon(): any;
    GetTrackBackgroundColor(trackAsset: any): any;
    OnBuildClipContextMenu(menu: UnityEditor.GenericMenu, clips: any[], state: UnityEditor.Timeline.ITimelineState): void;
    OnBuildTrackContextMenu(menu: UnityEditor.GenericMenu, track: any, state: UnityEditor.Timeline.ITimelineState): void;
    readonly trackColor: any;
    static s_MissingIcon: any;
  }
}
declare namespace UnityEditor.Timeline.AnimationTrackDrawer {
  class Styles extends System.Object {
    protected constructor();
    static s_AnimationButtonOffTooltip: any;
    static s_AnimationButtonOnTooltip: any;
    static s_AnimationTrackIcon: any;
  }
}
declare namespace UnityEditor {
  class ClipRenderer extends System.Object {
    protected constructor();
    static RenderClip(r: any, color: any): void;
    static RenderTexture(r: any, style: any, color: any): void;
    static RenderTexture(r: any, mainTex: any, mask: any, color: any, flipVertical: boolean): void;
  }
}
declare namespace UnityEditor.Timeline {
  class IControl {
    protected constructor();
    DrawOverlays(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    IsMouseOver(mousePosition: any): boolean;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class CursorInfo extends System.Object {
    constructor();
    readonly ID: number;
    bounds: any;
    cursor: UnityEditor.MouseCursor;
  }
}
declare namespace UnityEditor.Timeline.Control {
  class MouseDownState extends System.Enum {
    protected constructor();
    static DoubleClick: UnityEditor.Timeline.Control.MouseDownState;
    static None: UnityEditor.Timeline.Control.MouseDownState;
    static SingleClick: UnityEditor.Timeline.Control.MouseDownState;
    value__: number;
  }
}
declare namespace UnityEditor {
  class IClipCurveEditorOwner {
    protected constructor();
    readonly clipCurveEditor: UnityEditor.ClipCurveEditor;
    inlineCurvesSelected: boolean;
    readonly supportsLooping: boolean;
  }
}
declare namespace UnityEditor {
  class InlineCurveEditor extends System.Object {
    constructor(trackGUI: UnityEditor.Timeline.TimelineTrackGUI);
    Draw(headerRect: any, trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, identWidth: number): void;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    resizeRect: any;
  }
}
declare namespace UnityEditor.Timeline {
  class ClipActionsShortcutManipulator extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class Ripple extends System.Object {
    constructor(direction: UnityEditor.Timeline.Ripple.RippleDirection);
    Init(gui: UnityEditor.TimelineClipGUI, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    Run(offset: number, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
  }
}
declare namespace UnityEditor.Timeline.Ripple {
  class RippleDirection extends System.Enum {
    protected constructor();
    static After: UnityEditor.Timeline.Ripple.RippleDirection;
    static All: UnityEditor.Timeline.Ripple.RippleDirection;
    static Before: UnityEditor.Timeline.Ripple.RippleDirection;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class DragClipHandle extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline.DragClipHandle {
  class DragClipAttractionHandler extends System.Object {
    constructor(frameSnap: UnityEditor.Timeline.FrameSnap);
    OnAttractedEdge(attractable: UnityEditor.Timeline.IAttractable, edge: UnityEditor.Timeline.AttractedEdge, time: number, duration: number): void;
  }
}
declare namespace UnityEditor.Timeline {
  class SimpleDragClipHandle extends UnityEditor.Timeline.DragClipHandle {
    constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class DrillIntoClip extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class ClipContextMenu extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class EventContextMenu extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class MouseWheelHorizontalScroll extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelinePanManipulator extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineZoomManipulator extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineShortcutManipulator extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class NewTrackContextMenu extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class SelectorTool extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackVerticalResize extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackContextMenuManipulator extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackDoubleClick extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackShortcutManipulator extends UnityEditor.Timeline.Manipulator {
    constructor();
    Init(parent: UnityEditor.Timeline.IControl): void;
  }
}
declare namespace UnityEditor {
  class TimelineBlendHandle extends UnityEditor.Timeline.Control {
    constructor(theClip: UnityEditor.TimelineClipGUI, direction: UnityEditor.TimelineBlendHandle.DragDirection);
    Draw(clientRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    readonly boundingRect: any;
    readonly bounds: any;
    readonly clip: UnityEditor.TimelineClipGUI;
    readonly direction: UnityEditor.TimelineBlendHandle.DragDirection;
  }
}
declare namespace UnityEditor.TimelineBlendHandle {
  class DragDirection extends System.Enum {
    protected constructor();
    static Left: UnityEditor.TimelineBlendHandle.DragDirection;
    static Right: UnityEditor.TimelineBlendHandle.DragDirection;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TimelineClipGUI extends UnityEditor.TimelineItemGUI {
    constructor(clip: any, parent: UnityEditor.Timeline.TimelineTrackGUI);
    CalculateLoopRects(trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, currentClipHash: number): void;
    Draw(trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, drawer: UnityEditor.Timeline.TrackDrawer): void;
    DrawBlendingCurves(state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    DrawDragPreview(rect: any, color: any): void;
    DrawInto(drawRect: any, style: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    RectToTimeline(trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): any;
    SnappableEdgesFor(attractable: UnityEditor.Timeline.IAttractable): any;
    readonly blendingStopsAt: number;
    readonly clip: any;
    readonly clipCurveEditor: UnityEditor.ClipCurveEditor;
    readonly duration: number;
    readonly end: number;
    hideName: boolean;
    inlineCurvesSelected: boolean;
    readonly isOverlapped: boolean;
    readonly loopRects: any;
    readonly minLoopIndex: number;
    readonly mixInRect: any;
    readonly mixOutRect: any;
    readonly name: string;
    nextClip: UnityEditor.TimelineClipGUI;
    readonly overlaps: boolean;
    parityID: number;
    previousClip: UnityEditor.TimelineClipGUI;
    start: number;
    supportResize: boolean;
    readonly supportsLooping: boolean;
  }
}
declare namespace UnityEditor {
  class TimelineItemGUI extends UnityEditor.Timeline.Control {
    protected constructor();
    readonly boundingRect: any;
    readonly bounds: any;
    clippedRect: any;
    readonly item: any;
    readonly parentTrackGUI: UnityEditor.Timeline.TimelineTrackGUI;
    rect: any;
    readonly selectable: boolean;
    readonly selectableObject: any;
    readonly UnClippedRect: any;
    visible: boolean;
    zOrder: number;
  }
}
declare namespace UnityEditor.TimelineClipGUI {
  class BlendKind extends System.Enum {
    protected constructor();
    static Ease: UnityEditor.TimelineClipGUI.BlendKind;
    static Mix: UnityEditor.TimelineClipGUI.BlendKind;
    static None: UnityEditor.TimelineClipGUI.BlendKind;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TimelineClipHandle extends UnityEditor.Timeline.Control {
    constructor(theClip: UnityEditor.TimelineClipGUI, direction: UnityEditor.TimelineClipHandle.DragDirection, clipHandleManipulator: UnityEditor.Timeline.DragClipHandle);
    Draw(clientRect: any): void;
    readonly boundingRect: any;
    readonly bounds: any;
    readonly clip: UnityEditor.TimelineClipGUI;
    readonly direction: UnityEditor.TimelineClipHandle.DragDirection;
  }
}
declare namespace UnityEditor.TimelineClipHandle {
  class DragDirection extends System.Enum {
    protected constructor();
    static Left: UnityEditor.TimelineClipHandle.DragDirection;
    static Right: UnityEditor.TimelineClipHandle.DragDirection;
    value__: number;
  }
}
declare namespace UnityEditor {
  class TimelineClipUnion extends System.Object {
    constructor();
    Add(clip: UnityEditor.TimelineClipGUI): void;
    static Build(clips: UnityEditor.TimelineClipGUI[]): UnityEditor.TimelineClipUnion[];
    Draw(parentRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    m_BoundingRect: any;
    m_Duration: number;
    m_InitUnionRect: boolean;
    m_Members: UnityEditor.TimelineClipGUI[];
    m_Start: number;
    m_Union: any;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineDataSource extends UnityEditor.IMGUI.Controls.TreeViewDataSource {
    constructor(parentGUI: UnityEditor.TimelineTreeViewGUI, treeView: UnityEditor.IMGUI.Controls.TreeViewController, sequencerWindow: UnityEditor.Timeline.TimelineWindow);
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    ExpandItems(item: UnityEditor.IMGUI.Controls.TreeViewItem): void;
    FetchData(): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpanded(id: number): boolean;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    readonly allTrackGuis: UnityEditor.TimelineTrackBaseGUI[];
    readonly itemCounter: number;
    readonly treeroot: UnityEditor.IMGUI.Controls.TreeViewItem;
  }
}
declare namespace UnityEditor {
  class TimelineDragging extends UnityEditor.IMGUI.Controls.TreeViewDragging {
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, window: UnityEditor.Timeline.TimelineWindow, data: any);
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[], mouseDownPosition: any): boolean;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, row: number): boolean;
    HandleAudioSourceDrop(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    HandleGameObjectDrop(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    HandleObjectDrop(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    HandleTrackDrop(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    ResolveTypeAmbiguity(types: UnityEngine.Timeline.TrackType[]): UnityEngine.Timeline.TrackType;
    StartDrag(draggedNode: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: number[]): void;
  }
}
declare namespace UnityEditor.TimelineDragging {
  class TimelineDragData extends System.Object {
    constructor(draggedItems: UnityEditor.IMGUI.Controls.TreeViewItem[]);
    draggedItems: UnityEditor.IMGUI.Controls.TreeViewItem[];
  }
}
declare namespace UnityEditor {
  class TimelineMarkerGUI extends UnityEditor.TimelineItemGUI {
    constructor(theMarker: any, timeline: any, parent: UnityEditor.Timeline.TimelineTrackGUI);
    Draw(trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, drawer: UnityEditor.Timeline.TrackDrawer): void;
    DrawInto(drawRect: any, style: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    RectToTimeline(trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): any;
    SnappableEdgesFor(attractable: UnityEditor.Timeline.IAttractable): any;
    readonly end: number;
    readonly start: number;
    readonly timelineMarker: any;
    triggerTime: number;
  }
}
declare namespace UnityEditor {
  class TimelineGroupGUI extends UnityEditor.TimelineTrackBaseGUI {
    constructor(treeview: UnityEditor.IMGUI.Controls.TreeViewController, treeviewGUI: UnityEditor.TimelineTreeViewGUI, id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, trackAsset: any, isRoot: boolean);
    static AddMenuItems(menu: UnityEditor.GenericMenu, track: any): void;
    CanBeSelected(mousePosition: any): boolean;
    static Create(parent: any, title: string): void;
    Draw(headerRect: any, trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, identWidth: number): void;
    GetHeight(state: UnityEditor.Timeline.TimelineWindow.TimelineState): number;
    IsMouseOver(mousePosition: any): boolean;
    OnGraphRebuilt(): void;
    SetHeight(height: number): void;
    readonly boundingRect: any;
    readonly expandable: boolean;
    readonly headerBounds: any;
    readonly indentedHeaderBounds: any;
  }
}
declare namespace UnityEditor {
  class TimelineTrackBaseGUI extends UnityEditor.IMGUI.Controls.TreeViewItem {
    protected constructor();
    AddManipulator(m: UnityEditor.Timeline.Manipulator): void;
    CanBeSelected(mousePosition: any): boolean;
    ClearManipulators(): void;
    Delete(state: UnityEditor.Timeline.ITimelineState): void;
    DisplayTrackMenu(state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    Draw(headerRect: any, trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, identWidth: number): void;
    DrawOverlays(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    static FindGUITrack(track: any): UnityEditor.TimelineTrackBaseGUI;
    GetHeight(state: UnityEditor.Timeline.TimelineWindow.TimelineState): number;
    GetVerticalSpacingBetweenTracks(): number;
    IsMouseOver(mousePosition: any): boolean;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    OnGraphRebuilt(): void;
    SetHeight(height: number): void;
    readonly boundingRect: any;
    readonly drawer: UnityEditor.Timeline.TrackDrawer;
    readonly expandable: boolean;
    readonly headerBounds: any;
    isDropTarget: boolean;
    isExpanded: boolean;
    readonly isRoot: boolean;
    locked: boolean;
    muted: boolean;
    readonly parentTrackGUI: UnityEditor.TimelineTrackBaseGUI;
    readonly selectable: boolean;
    readonly selectableObject: any;
    readonly TimelineWindow: UnityEditor.Timeline.TimelineWindow;
    track: any;
    readonly treeView: UnityEditor.IMGUI.Controls.TreeViewController;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineTrackGUI extends UnityEditor.TimelineGroupGUI {
    constructor(tv: UnityEditor.IMGUI.Controls.TreeViewController, w: UnityEditor.TimelineTreeViewGUI, id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, sequenceActor: any);
    BlendHash(): number;
    CanBeSelected(mousePosition: any): boolean;
    Draw(headerRect: any, trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, identWidth: number): void;
    DrawLockState(trackRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    DrawRecordingTrackBackground(trackRect: any): void;
    GetHeight(state: UnityEditor.Timeline.TimelineWindow.TimelineState): number;
    GetNextClipParityID(): number;
    GetVerticalSpacingBetweenTracks(): number;
    InlineAnimationCurveHeight(): number;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    OnGraphRebuilt(): void;
    RangeSelectItems(lastItemToSelect: UnityEditor.TimelineItemGUI, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    RebuildGUICache(state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    RefreshCurveEditor(): void;
    ResetClipParityID(): void;
    SortClipsByStartTime(): void;
    SortEventsByStartTime(): void;
    SortItemsByStartTime(): void;
    readonly boundingRect: any;
    readonly clipCurveEditor: UnityEditor.ClipCurveEditor;
    readonly clips: UnityEditor.TimelineClipGUI[];
    readonly expandable: boolean;
    readonly headerIcon: any;
    readonly indentedHeaderBounds: any;
    readonly inlineCurveEditor: UnityEditor.InlineCurveEditor;
    inlineCurvesSelected: boolean;
    readonly items: UnityEditor.TimelineItemGUI[];
    readonly markers: UnityEditor.TimelineMarkerGUI[];
    resortClips: boolean;
    resortEvents: boolean;
    readonly supportsLooping: boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineTreeView extends System.Object {
    constructor(sequencerWindow: UnityEditor.Timeline.TimelineWindow, treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    BeginPingNode(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    BeginRowGUI(): void;
    CalculateRowRects(): void;
    EndPingItem(): void;
    EndPingNode(): void;
    EndRename(): void;
    EndRowGUI(): void;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetRectForFraming(row: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetSizeOfRow(item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetTotalSize(): any;
    OnInitialize(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    readonly bottomRowMargin: number;
    readonly halfDropBetweenHeight: number;
    showInsertionMarker: boolean;
    readonly topRowMargin: number;
  }
}
declare namespace UnityEditor {
  class TimelineTreeViewGUI extends System.Object {
    constructor(sequencerWindow: UnityEditor.Timeline.TimelineWindow, timeline: any, rect: any);
    CalculateRowRects(): void;
    GetRowHeightWithPadding(i: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetRowRect(row: number): any;
    OnGUI(rect: any): void;
    Reload(): void;
    SetSelection(selectedIDs: number[], revealSelectionAndFrameLastSelected: boolean): void;
    readonly allClipGuis: UnityEditor.TimelineClipGUI[];
    readonly allEventGuis: UnityEditor.TimelineMarkerGUI[];
    readonly allTrackGuis: UnityEditor.TimelineTrackBaseGUI[];
    readonly contentSize: any;
    readonly data: UnityEditor.IMGUI.Controls.ITreeViewDataSource;
    readonly gui: UnityEditor.IMGUI.Controls.ITreeViewGUI;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    scrollPosition: any;
    readonly selection: any[];
    readonly TimelineWindow: UnityEditor.Timeline.TimelineWindow;
    readonly visibleTracks: any[];
  }
}
declare namespace UnityEditor.Timeline.TrackDrawer {
  class Styles extends System.Object {
    protected constructor();
    static addMarker: any;
    static newMarker: any;
  }
}
declare namespace UnityEditor.Timeline.TrackDrawer {
  class ClipDrawData extends System.ValueType {
    protected constructor();
    clip: any;
    clipCenterSection: any;
    clippedRect: any;
    inlineCurvesSelected: boolean;
    localVisibleEndTime: number;
    localVisibleStartTime: number;
    selected: boolean;
    selectedStyle: any;
    state: UnityEditor.Timeline.ITimelineState;
    style: any;
    targetRect: any;
    title: string;
    unclippedRect: any;
  }
}
declare namespace UnityEditor.Timeline.TrackDrawer {
  class MarkerDrawData extends System.ValueType {
    protected constructor();
    off: boolean;
    runInEditor: boolean;
    selected: boolean;
    selectedStyle: any;
    state: UnityEditor.Timeline.ITimelineState;
    style: any;
    targetRect: any;
    timelineMarker: any;
    unclippedRect: any;
  }
}
declare namespace UnityEditor.Timeline.TrackDrawer {
  class TrackMenuContext extends System.Object {
    constructor();
    clipTimeCreation: UnityEditor.Timeline.TrackDrawer.TrackMenuContext.ClipTimeCreation;
    mousePosition: any;
  }
}
declare namespace UnityEditor.Timeline.TrackDrawer.TrackMenuContext {
  class ClipTimeCreation extends System.Enum {
    protected constructor();
    static Mouse: UnityEditor.Timeline.TrackDrawer.TrackMenuContext.ClipTimeCreation;
    static TimeCursor: UnityEditor.Timeline.TrackDrawer.TrackMenuContext.ClipTimeCreation;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class AnimationTrackKeyDataSource extends System.Object {
    constructor(track: any);
    GetDescriptions(): any;
    GetKeys(): number[];
  }
}
declare namespace UnityEditor.Timeline {
  class IPropertyKeyDataSource {
    protected constructor();
    GetDescriptions(): any;
    GetKeys(): number[];
  }
}
declare namespace UnityEditor.Timeline {
  class InfiniteTrackDrawer extends UnityEditor.Timeline.TrackDrawer {
    constructor(dataSource: UnityEditor.Timeline.IPropertyKeyDataSource);
    CanDraw(track: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    DrawTrack(trackRect: any, trackAsset: any, visibleTime: any, state: UnityEditor.Timeline.ITimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class FrameSnap extends System.Object {
    constructor();
    ApplyOffset(currentValue: number, delta: number, state: UnityEditor.Timeline.TimelineWindow.TimelineState): number;
    Reset(): void;
    readonly lastOffsetApplied: number;
  }
}
declare namespace UnityEditor.Timeline {
  class AttractedEdge extends System.Enum {
    protected constructor();
    static Left: UnityEditor.Timeline.AttractedEdge;
    static None: UnityEditor.Timeline.AttractedEdge;
    static Right: UnityEditor.Timeline.AttractedEdge;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class IAttractable {
    protected constructor();
    readonly end: number;
    readonly start: number;
  }
}
declare namespace UnityEditor.Timeline {
  class IAttractionHandler {
    protected constructor();
    OnAttractedEdge(attractable: UnityEditor.Timeline.IAttractable, edge: UnityEditor.Timeline.AttractedEdge, time: number, duration: number): void;
  }
}
declare namespace UnityEditor.Timeline {
  class Edge extends System.ValueType {
    protected constructor();
    time: number;
  }
}
declare namespace UnityEditor.Timeline {
  class ISnappable {
    protected constructor();
    SnappableEdgesFor(attractable: UnityEditor.Timeline.IAttractable): any;
  }
}
declare namespace UnityEditor.Timeline {
  class ManipulateEdges extends System.Enum {
    protected constructor();
    static Both: UnityEditor.Timeline.ManipulateEdges;
    static Left: UnityEditor.Timeline.ManipulateEdges;
    static None: UnityEditor.Timeline.ManipulateEdges;
    static Right: UnityEditor.Timeline.ManipulateEdges;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class SnapState extends System.Enum {
    protected constructor();
    static Cooldown: UnityEditor.Timeline.SnapState;
    static Free: UnityEditor.Timeline.SnapState;
    static Snapped: UnityEditor.Timeline.SnapState;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class MagnetEngine extends System.Object {
    constructor(attractable: UnityEditor.Timeline.IAttractable, attractionHandler: UnityEditor.Timeline.IAttractionHandler, state: UnityEditor.Timeline.TimelineWindow.TimelineState);
    AddMagnet(magnetTime: number): void;
    DisplayDebugLayout(display: boolean): void;
    HasMagnetAt(time: number): boolean;
    IsSnappedAtTime(time: number): boolean;
    OnGUI(): void;
    Snap(offsetInPixels: number): void;
    Snap(offsetInPixels: number, edges: UnityEditor.Timeline.ManipulateEdges): void;
    readonly isSnapped: boolean;
    static displayDebugLayout: boolean;
    static k_MagnetInfluenceInPixels: number;
  }
}
declare namespace UnityEditor.Timeline.MagnetEngine {
  class MagnetInfo extends System.Object {
    constructor();
    IsInBothInfluenceZone(currentTime: number, state: UnityEditor.Timeline.ITimelineState): boolean;
    IsInInfluenceZone(currentTime: number, state: UnityEditor.Timeline.ITimelineState, direction: UnityEditor.Timeline.AttractedEdge): boolean;
    durationBeforeSnap: number;
    time: number;
    timeBeforeSnap: number;
  }
}
declare namespace UnityEditor.Timeline.MagnetEngine {
  class EdgeInfo extends System.Object {
    constructor();
    IsAttractedBothSide(magnet: UnityEditor.Timeline.MagnetEngine.MagnetInfo, state: UnityEditor.Timeline.ITimelineState): boolean;
    IsAttractedBy(magnet: UnityEditor.Timeline.MagnetEngine.MagnetInfo, state: UnityEditor.Timeline.ITimelineState): boolean;
    deltaTime: number;
    edge: UnityEditor.Timeline.AttractedEdge;
    readonly exitTime: number;
    time: number;
  }
}
declare namespace UnityEditor.Timeline {
  class BreadcrumbDrawer extends System.Object {
    constructor();
    static Draw(breadcrumbAreaWidth: number, timelineAssetName: string, directorName: string): void;
  }
}
declare namespace UnityEditor.Timeline {
  class Clipboard extends System.Object {
    constructor();
    static AddData(data: UnityEngine.Object): void;
    static AddDataCollection(data: any): void;
    static Clear(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class ClipModifier extends System.Object {
    constructor();
    static CompleteLastLoop(clip: any): boolean;
    static CompleteLastLoop(clips: any[]): boolean;
    static Delete(timeline: any, clip: any): boolean;
    static Delete(timeline: any, clips: any[]): boolean;
    static DoubleSpeed(clips: any[]): boolean;
    static DuplicateClip(directorComponent: any, clip: any): any;
    static DuplicateClips(directorComponent: any, clips: any[]): boolean;
    static HalfSpeed(clips: any[]): boolean;
    static MatchDuration(clips: any[]): boolean;
    static ResetEditing(clip: any): boolean;
    static ResetEditing(clips: any[]): boolean;
    static ResetSpeed(clips: any[]): boolean;
    static Split(directorComponent: any, splitTime: number, clips: any[]): boolean;
    static Tile(clips: any[]): boolean;
    static TrimEnd(trimTime: number, clip: any): boolean;
    static TrimEnd(trimTime: number, clips: any[]): boolean;
    static TrimLastLoop(clip: any): boolean;
    static TrimLastLoop(clips: any[]): boolean;
    static TrimStart(trimTime: number, clip: any): boolean;
    static TrimStart(trimTime: number, clips: any[]): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class EditClipInAnimationWindow {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class ItemAction<T> extends UnityEditor.Timeline.MenuItemActionBase {
    protected constructor();
    static AddToMenu(menu: UnityEditor.GenericMenu, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: T[]): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: T[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: T[]): UnityEditor.Timeline.MenuActionDisplayState;
    static HandleShortcut(state: UnityEditor.Timeline.TimelineWindow.TimelineState, evt: any, item: T): boolean;
    static readonly actions: UnityEditor.Timeline.ItemAction<T>[];
  }
}
declare namespace UnityEditor.Timeline {
  class MenuItemActionBase extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class TrimStart {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class TrimEnd {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class MatchDuration {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class Split {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class ResetClip {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class CompleteLastLoop {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class TrimLastLoop {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class DoubleSpeed {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class HalfSpeed {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class ResetSpeed {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class Tile {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class FindSourceAsset {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class DeleteClips {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class CopyClipsToClipboard {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clip: any): boolean;
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class DuplicateClips {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, clips: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class CustomTrackDrawerAttribute extends System.Attribute {
    constructor(type: any);
    assetType: any;
  }
}
declare namespace UnityEditor.Timeline {
  class DeleteMarkers {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, markers: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class DuplicateMarkers {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, markers: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class CopyMarkersToClipboard {
    constructor();
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): boolean;
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, theMarker: any): boolean;
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, markers: any[]): boolean;
    Equals(obj: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, markers: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, items: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
  }
}
declare namespace UnityEditor.Timeline {
  class MarkerModifiers extends System.Object {
    constructor();
    static Duplicate(theMarker: any, directorComponent: any): any;
    static DuplicateAtTime(theMarker: any, directorComponent: any, newTime: number): any;
    static DuplicateAtTime(theMarker: any, track: any, directorComponent: any, newTime: number): any;
    static DuplicateEvents(markers: any[], directorComponent: any): boolean;
    static FindEventInsertionTime(theMarker: any): number;
  }
}
declare namespace UnityEditor.Timeline {
  class Graphics extends System.Object {
    protected constructor();
    static DrawAAPolyLine(width: number, points: any[], color: any): void;
    static DrawDottedLine(p1: any, p2: any, segmentsLength: number, col: any): void;
    static DrawLine(p1: any, p2: any, color: any): void;
    static DrawLineAA(width: number, p1: any, p2: any, color: any): void;
    static DrawLineAA(p1: any, p2: any, col: any): void;
    static DrawOutlineRect(rect: any, color: any): void;
    static ShadowedButton(rect: any, text: string, style: any, shadowColor: any): boolean;
    static ShadowLabel(rect: any, text: string, style: any, textColor: any, shadowColor: any): void;
    static ShadowLabel(rect: any, content: any, style: any, textColor: any, shadowColor: any): void;
  }
}
declare namespace UnityEditor.Timeline {
  class GUIColorOverride extends System.ValueType {
    protected constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor {
  class GUIViewportScope extends System.ValueType {
    protected constructor();
    Dispose(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class ItemActionInvoker extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.Timeline.Utilities {
  class KeyTraverser extends System.Object {
    constructor(timeline: any, epsilon: number);
    static GetClipKeyTimes(clip: any): any;
    GetKeyCount(dirtyStamp: number): number;
    GetNextKey(key: number, dirtyStamp: number): number;
    GetPrevKey(key: number, dirtyStamp: number): number;
    static GetTrackKeyTimes(track: any): any;
    readonly lastIndex: number;
  }
}
declare namespace UnityEditor.Timeline {
  class MenuActionDisplayState extends System.Enum {
    protected constructor();
    static Disabled: UnityEditor.Timeline.MenuActionDisplayState;
    static Hidden: UnityEditor.Timeline.MenuActionDisplayState;
    value__: number;
    static Visible: UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class PropertyCollector extends System.Object {
    constructor();
    AddFromClip(clip: any): void;
    AddFromClip(obj: any, clip: any): void;
    AddFromComponent(obj: any, component: UnityEngine.Component): void;
    AddFromName(name: string): void;
    AddFromName(obj: any, name: string): void;
    AddObjectProperties(obj: UnityEngine.Object, clip: any): void;
    PopActiveGameObject(): void;
    PushActiveGameObject(gameObject: any): void;
    Reset(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class UserAction extends System.Object {
    constructor();
    static AddBinding(actionName: string, actionKey: any, actionModifiers?: any): void;
    static GetAction(actionName: string): UnityEditor.Timeline.UserAction;
    IsPressed(evt: any): boolean;
    IsReleased(evt: any): boolean;
    readonly bindings: UnityEditor.Timeline.UserAction.BindingSource[];
  }
}
declare namespace UnityEditor.Timeline.UserAction {
  class BindingSource extends System.Object {
    constructor();
    ToString(): string;
    key: any;
    modifiers: any;
  }
}
declare namespace UnityEditor.Timeline {
  class Shortcuts extends System.Object {
    protected constructor();
    static AddAction(name: string, key: any, modifiers?: any): void;
    static AddAction(name: string, keys: any[], modifiers?: any): void;
    static IsPressed(actionName: string, evt: any): boolean;
    static IsReleased(actionName: string, evt: any): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class StyleNormalColorOverride extends System.Object {
    constructor(style: any, newColor: any);
    Dispose(): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineAction extends UnityEditor.Timeline.MenuItemActionBase {
    protected constructor();
    static AddToMenu(menu: UnityEditor.GenericMenu, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.MenuActionDisplayState;
    static HandleShortcut(state: UnityEditor.Timeline.TimelineWindow.TimelineState, evt: any): boolean;
    static InvokeByName(actionName: string, state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class CopyAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class PasteAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class PasteIntoAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, track: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class DuplicateAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class DeleteAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class PlayTimelineAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class SelectAllAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class PreviousFrameAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class NextFrameAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class FrameAllAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class FrameSelectedAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class PrevKeyAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class NextKeyAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class GotoStartAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class GotoEndAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class NudgeLeftAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class NudgeRightAction extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class ZoomIn extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class ZoomOut extends UnityEditor.Timeline.TimelineAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class SequencerContextMenu extends System.Object {
    constructor();
    static Show(drawer: UnityEditor.Timeline.TrackDrawer, track: any, mousePosition: any): void;
    static Show(drawer: UnityEditor.Timeline.TrackDrawer, mousePosition: any): void;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackAction extends UnityEditor.Timeline.MenuItemActionBase {
    protected constructor();
    static AddToMenu(menu: UnityEditor.GenericMenu, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    CanExecute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
    static HandleShortcut(state: UnityEditor.Timeline.TimelineWindow.TimelineState, evt: any, track: any): boolean;
    static InvokeByName(actionName: string, state: UnityEditor.Timeline.TimelineWindow.TimelineState, track: any): boolean;
    static InvokeByName(actionName: string, state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class EditTrackInAnimationWindow extends UnityEditor.Timeline.TrackAction {
    constructor();
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, track: any): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class ToggleTrackAction extends UnityEditor.Timeline.TrackAction {
    protected constructor();
  }
}
declare namespace UnityEditor.Timeline {
  class LockTrack extends UnityEditor.Timeline.ToggleTrackAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class UnlockTrack extends UnityEditor.Timeline.ToggleTrackAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class MuteTrack extends UnityEditor.Timeline.ToggleTrackAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class UnMuteTrack extends UnityEditor.Timeline.ToggleTrackAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class AddTrackSubGroup extends UnityEditor.Timeline.TrackAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    GetDisplayState(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): UnityEditor.Timeline.MenuActionDisplayState;
  }
}
declare namespace UnityEditor.Timeline {
  class DeleteTracks extends UnityEditor.Timeline.TrackAction {
    constructor();
    static Do(timeline: any, track: any): void;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class CopyTracksToClipboard extends UnityEditor.Timeline.TrackAction {
    constructor();
    static Do(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class DuplicateTracks extends UnityEditor.Timeline.TrackAction {
    constructor();
    Execute(state: UnityEditor.Timeline.TimelineWindow.TimelineState, tracks: any[]): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackModifier extends System.Object {
    protected constructor();
    static DeleteTrack(timeline: any, track: any): boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineTrackBindingState extends System.Enum {
    protected constructor();
    static BoundGameObjectIsDisabled: UnityEditor.Timeline.TimelineTrackBindingState;
    static NoGameObjectBound: UnityEditor.Timeline.TimelineTrackBindingState;
    static NoValidComponentOnBoundGameObject: UnityEditor.Timeline.TimelineTrackBindingState;
    static RequiredComponentOnBoundGameObjectIsDisabled: UnityEditor.Timeline.TimelineTrackBindingState;
    static Valid: UnityEditor.Timeline.TimelineTrackBindingState;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackBindingValidationResult extends System.ValueType {
    protected constructor();
    IsValid(): boolean;
    readonly bindingName: string;
    readonly bindingState: UnityEditor.Timeline.TimelineTrackBindingState;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineWindow extends UnityEditor.EditorWindow {
    constructor();
    AddTrack(type: any, parent?: any, name?: string): any;
    static CreateNewTimeline(): void;
    DrawOverlays(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState): void;
    IsMouseOver(mousePosition: any): boolean;
    static OnDoubleClick(instanceID: number, line: number): boolean;
    OnEvent(evt: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, isCaptureSession: boolean): boolean;
    OnSelectionChange(): void;
    RebuildGraphIfNecessary(evaluate?: boolean): void;
    SetCurrentTimeline(seq: any, instanceOfDirector: any): void;
    ShowNewTracksContextMenu(parentTrack: any): void;
    ShowNewTracksContextMenu(parentTrack: any, parentGroup: UnityEditor.TimelineGroupGUI): void;
    static ShowWindow(): void;
    Simulate(start: boolean): void;
    SimulateFrames(frames: number): void;
    readonly allTracks: UnityEditor.TimelineTrackBaseGUI[];
    clientArea: any;
    readonly clipArea: any;
    static readonly instance: UnityEditor.Timeline.TimelineWindow;
    isDragging: boolean;
    locked: boolean;
    readonly sequenceHeaderBounds: any;
    readonly state: UnityEditor.Timeline.TimelineWindow.TimelineState;
    static readonly styles: UnityEditor.Timeline.DirectorStyles;
    readonly timeAreaBounds: any;
    timeline: any;
    readonly tracksBounds: any;
    readonly treeView: UnityEditor.TimelineTreeViewGUI;
    readonly treeviewBounds: any;
    static kBreadCrumbDelta: number;
    static kBreadcrumbHeight: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class TimelineState extends System.Object {
    constructor(w: UnityEditor.Timeline.TimelineWindow);
    AddEndFrameDelegate(updateDelegate: ((state: UnityEditor.Timeline.ITimelineState, currentEvent: any) => boolean)): void;
    AddStartFrameDelegate(updateDelegate: ((state: UnityEditor.Timeline.ITimelineState, currentEvent: any) => boolean)): void;
    ArmForRecord(track: any): void;
    BreadcrumbDrillInto(asset: any, instance: any): void;
    BreadcrumbGoto(asset: any, instance: any): void;
    BreadcrumbSetRoot(asset: any): void;
    CalculateRowRects(): void;
    EnsurePlayHeadIsVisible(): void;
    Evaluate(): void;
    EvaluateImmediate(): void;
    GatherProperties(director: any): void;
    GetArmedTrack(track: any): any;
    GetBindingForTrack(trackAsset: any): UnityEngine.Component;
    GetSceneReference(asset: any): any;
    GetSnappedTimeAtMousePosition(mousePos: any): number;
    GetWindow(): UnityEditor.Timeline.TimelineWindow;
    IsArmedForRecord(track: any): boolean;
    IsCurrentEditingASequencerTextField(): boolean;
    IsEditingASubItem(): boolean;
    OffsetTimeArea(pixels: number): void;
    OnDestroy(): void;
    PixelToTime(pixel: number): number;
    Play(): void;
    RebindAnimators(): void;
    RebindAnimators(objects: any[]): void;
    Refresh(): void;
    Refresh(dirtyAsset: boolean): void;
    Reset(): void;
    ScreenSpacePixelToTimeAreaTime(p: number): number;
    SetCurrentSequence(asset: any): void;
    SetTimeAreaShownRange(min: number, max: number): void;
    SetTimeAreaTransform(newTranslation: any, newScale: any): void;
    SnapToFrameIfRequired(currentTime: number): number;
    Stop(): void;
    TimeAreaPixelToTime(pixel: number): number;
    TimeAsString(timeValue: number, format?: string): string;
    TimeIsInRange(value: number): boolean;
    TimeToPixel(time: number): number;
    TimeToScreenSpacePixel(time: number): number;
    TimeToTimeAreaPixel(time: number): number;
    TrackSpacePixelToTimeAreaTime(p: number): number;
    UnarmForRecord(track: any): void;
    UpdateRecordingState(): void;
    UpdateRootPlayableDuration(duration: number): void;
    activeView: number;
    bindingAreaWidth: number;
    readonly canRecord: boolean;
    readonly captured: UnityEditor.Timeline.IControl[];
    currentDirector: any;
    dirtyStamp: number;
    readonly duration: number;
    edgeSnaps: boolean;
    readonly editorWindow: UnityEditor.EditorWindow;
    frame: number;
    frameRate: number;
    frameSnap: boolean;
    isClipSnapping: boolean;
    isDragging: boolean;
    isJogging: boolean;
    keyboardControl: number;
    static readonly kTimeEpsilon: number;
    mainAreaWidth: number;
    mouseDragLag: number;
    playbackSpeed: number;
    playing: boolean;
    playRangeEnabled: boolean;
    playRangeLoopMode: boolean;
    playRangeTime: any;
    static readonly previewDriver: UnityEditor.AnimationModeDriver;
    previewMode: boolean;
    readonly quadTree: any;
    rebuildGraph: boolean;
    recording: boolean;
    readonly rootTrack: any;
    sequencerHeaderWidth: number;
    showAudioWaveform: boolean;
    showQuadTree: boolean;
    soloTracks: any[];
    time: number;
    readonly timeAreaRect: any;
    readonly timeAreaScale: any;
    readonly timeAreaShownRange: any;
    readonly timeAreaTranslation: any;
    timeInFrames: boolean;
    readonly timeline: any;
    trackHeight: number;
    trackScale: number;
    readonly windowHeight: number;
    static kTimeCodeTextFieldId: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class TimelineWindowPreferences extends System.Object {
    constructor();
    edgeSnaps: boolean;
    frameSnap: boolean;
    playRangeLoopMode: boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineWindowTimeControl extends UnityEditorInternal.IAnimationWindowControl {
    constructor();
    ClearCandidates(): void;
    EndScrubTime(): void;
    GoToFirstKeyframe(): void;
    GoToFrame(frame: number): void;
    GoToLastKeyframe(): void;
    GoToNextFrame(): void;
    GoToNextKeyframe(): void;
    GoToPreviousFrame(): void;
    GoToPreviousKeyframe(): void;
    GoToTime(time: number): void;
    Init(window: UnityEditor.Timeline.TimelineWindow, state: UnityEditorInternal.AnimationWindowState, clip: UnityEditor.Timeline.TimelineWindowTimeControl.ClipData): void;
    Init(window: UnityEditor.Timeline.TimelineWindow, state: UnityEditorInternal.AnimationWindowState, clip: any): void;
    OnDisable(): void;
    OnEnable(): void;
    OnSelectionChanged(): void;
    PlaybackUpdate(): boolean;
    ProcessCandidates(): void;
    ResampleAnimation(): void;
    ScrubTime(time: number): void;
    StartPlayback(): boolean;
    StartPreview(): boolean;
    StartRecording(targetObject: UnityEngine.Object): boolean;
    StartScrubTime(): void;
    StopPlayback(): void;
    StopPreview(): void;
    StopRecording(): void;
    readonly canPlay: boolean;
    readonly canPreview: boolean;
    readonly canRecord: boolean;
    readonly duration: number;
    readonly playing: boolean;
    readonly previewing: boolean;
    readonly recording: boolean;
    readonly start: number;
    readonly state: UnityEditor.Timeline.TimelineWindow.TimelineState;
    readonly time: UnityEditorInternal.AnimationKeyTime;
    readonly track: any;
    readonly window: UnityEditor.Timeline.TimelineWindow;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindowTimeControl {
  class ClipData extends System.ValueType {
    protected constructor();
    duration: number;
    start: number;
    track: any;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class SequnenceMenuNameFormater extends System.Object {
    constructor();
    Format(text: string): string;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class PlayModeState extends System.Enum {
    protected constructor();
    static Paused: UnityEditor.Timeline.TimelineWindow.PlayModeState;
    static Playing: UnityEditor.Timeline.TimelineWindow.PlayModeState;
    static Stopped: UnityEditor.Timeline.TimelineWindow.PlayModeState;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class TimelineItemArea extends System.Enum {
    protected constructor();
    static Header: UnityEditor.Timeline.TimelineWindow.TimelineItemArea;
    static Lines: UnityEditor.Timeline.TimelineWindow.TimelineItemArea;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class TimelineView extends System.Object {
    constructor(name: string, callback: ((clientRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, trackState: UnityEditor.Timeline.TimelineModeGUIState) => void));
    m_Callback: ((clientRect: any, state: UnityEditor.Timeline.TimelineWindow.TimelineState, trackState: UnityEditor.Timeline.TimelineModeGUIState) => void);
    m_Name: string;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class PreviewPlayMode extends System.Enum {
    protected constructor();
    static Hold: UnityEditor.Timeline.TimelineWindow.PreviewPlayMode;
    static Loop: UnityEditor.Timeline.TimelineWindow.PreviewPlayMode;
    static None: UnityEditor.Timeline.TimelineWindow.PreviewPlayMode;
    static Once: UnityEditor.Timeline.TimelineWindow.PreviewPlayMode;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineWindow {
  class StateEventArgs extends System.EventArgs {
    constructor();
    propertyChanged: string;
    state: UnityEditor.Timeline.TimelineWindow.TimelineState;
  }
}
declare namespace System {
  class EventArgs extends System.Object {
    constructor();
    static Empty: System.EventArgs;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineActiveMode extends UnityEditor.Timeline.TimelineMode {
    constructor();
    ShouldShowPlayRange(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ShouldShowTimeCursor(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ToolbarState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
    TrackState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineMode extends System.Object {
    protected constructor();
    ShouldShowPlayRange(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ShouldShowTimeArea(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ShouldShowTimeCursor(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ToolbarState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
    TrackState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
    readonly headerState: UnityEditor.Timeline.TimelineMode.HeaderState;
    readonly trackOptionsState: UnityEditor.Timeline.TimelineMode.TrackOptionsState;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineAssetEditionMode extends UnityEditor.Timeline.TimelineInactiveMode {
    constructor();
    TrackState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineInactiveMode extends UnityEditor.Timeline.TimelineMode {
    constructor();
    ShouldShowPlayRange(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ShouldShowTimeCursor(state: UnityEditor.Timeline.TimelineWindow.TimelineState): boolean;
    ToolbarState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
    TrackState(state: UnityEditor.Timeline.TimelineWindow.TimelineState): UnityEditor.Timeline.TimelineModeGUIState;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineModeGUIState extends System.Enum {
    protected constructor();
    static Disabled: UnityEditor.Timeline.TimelineModeGUIState;
    static Enabled: UnityEditor.Timeline.TimelineModeGUIState;
    static Hidden: UnityEditor.Timeline.TimelineModeGUIState;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline {
  class SequencerModeType extends System.Enum {
    protected constructor();
    static Active: UnityEditor.Timeline.SequencerModeType;
    static EditAsset: UnityEditor.Timeline.SequencerModeType;
    static Inactive: UnityEditor.Timeline.SequencerModeType;
    value__: number;
  }
}
declare namespace UnityEditor.Timeline.TimelineMode {
  class HeaderState extends System.ValueType {
    protected constructor();
    breadCrumb: UnityEditor.Timeline.TimelineModeGUIState;
    options: UnityEditor.Timeline.TimelineModeGUIState;
    sequenceSelector: UnityEditor.Timeline.TimelineModeGUIState;
  }
}
declare namespace UnityEditor.Timeline.TimelineMode {
  class TrackOptionsState extends System.ValueType {
    protected constructor();
    editAsAssetButton: UnityEditor.Timeline.TimelineModeGUIState;
    newButton: UnityEditor.Timeline.TimelineModeGUIState;
  }
}
declare namespace UnityEditor.Timeline {
  class TrackViewModelData extends System.Object {
    constructor();
    collapsed: boolean;
    inlineAnimationCurveHeight: number;
    static k_DefaultinlineAnimationCurveHeight: number;
    showInlineCurves: boolean;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineAssetViewModel extends UnityEngine.ScriptableObject {
    constructor();
    OnAfterDeserialize(): void;
    OnBeforeSerialize(): void;
    OnEnable(): void;
    static k_DefaultTrackHeight: number;
    static k_DefaultTrackScale: number;
    static kNoPlayRangeSet: any;
    playRangeEnabled: boolean;
    showAudioWaveform: boolean;
    timeAreaPlayRange: any;
    timeAreaShownRange: any;
    timeInFrames: boolean;
    trackHeight: number;
    trackScale: number;
    tracksViewModelData: any;
  }
}
declare namespace UnityEditor.Timeline {
  class TimelineWindowViewPrefs {
    constructor();
    CreateNewViewModel(): UnityEditor.Timeline.TimelineAssetViewModel;
    Equals(other: any): boolean;
    GetHashCode(): number;
    static GetInlineCurveHeight(asset: any): number;
    GetInstanceID(): number;
    static GetShowInlineCurves(track: any): boolean;
    static GetTimelineAssetViewData(obj: any): UnityEditor.Timeline.TimelineAssetViewModel;
    static GetTrackViewModelData(track: any): UnityEditor.Timeline.TrackViewModelData;
    GetType(): any;
    static IsTrackCollapsed(track: any): boolean;
    static Save(): void;
    SetActiveAsset(asset: UnityEngine.ScriptableObject): void;
    SetDirty(): void;
    static SetInlineCurveHeight(asset: any, height: number): void;
    static SetShowInlineCurves(track: any, inlineOn: boolean): void;
    static SetTrackCollapsed(track: any, collapsed: boolean): void;
    ToString(): string;
    readonly activeAsset: UnityEngine.ScriptableObject;
    readonly activeViewModel: UnityEditor.Timeline.TimelineAssetViewModel;
    hideFlags: any;
    static readonly instance: UnityEditor.Timeline.TimelineWindowViewPrefs;
    name: string;
  }
}
declare namespace UnityEditor.Timeline {
  class ScriptableObjectViewPrefs<VIEWMODEL> extends UnityEngine.ScriptableObject {
    constructor();
    CreateNewViewModel(): VIEWMODEL;
    SetActiveAsset(asset: UnityEngine.ScriptableObject): void;
    readonly activeAsset: UnityEngine.ScriptableObject;
    readonly activeViewModel: VIEWMODEL;
  }
}
declare namespace TreeEditor {
  class TreeData extends UnityEngine.ScriptableObject {
    constructor();
    AddGroup(parent: TreeEditor.TreeGroup, type: any): TreeEditor.TreeGroup;
    AddNode(g: TreeEditor.TreeGroup, parent: TreeEditor.TreeNode): TreeEditor.TreeNode;
    AddNode(g: TreeEditor.TreeGroup, parent: TreeEditor.TreeNode, validate: boolean): TreeEditor.TreeNode;
    CheckExternalChanges(): boolean;
    ClearReferences(): void;
    DeleteGroup(g: TreeEditor.TreeGroup): void;
    DeleteNode(n: TreeEditor.TreeNode): void;
    DeleteNode(n: TreeEditor.TreeNode, validate: boolean): void;
    DuplicateGroup(g: TreeEditor.TreeGroup): TreeEditor.TreeGroup;
    DuplicateNode(n: TreeEditor.TreeNode): TreeEditor.TreeNode;
    static GetAdaptiveHeightSegments(h: number, adaptiveQuality: number): number;
    static GetAdaptiveRadialSegments(r: number, adaptiveQuality: number): number;
    static GetAdaptiveSamples(group: TreeEditor.TreeGroup, node: TreeEditor.TreeNode, adaptiveQuality: number): number[];
    GetGroup(id: number): TreeEditor.TreeGroup;
    GetNode(id: number): TreeEditor.TreeNode;
    Initialize(): void;
    IsAncestor(ancestor: TreeEditor.TreeGroup, g: TreeEditor.TreeGroup): boolean;
    LockGroup(g: TreeEditor.TreeGroup): void;
    OptimizeMaterial(materials: TreeEditor.TreeMaterial[], vertices: TreeEditor.TreeVertex[], triangles: TreeEditor.TreeTriangle[]): boolean;
    PreviewMesh(worldToLocalMatrix: any, outMaterials: any): void;
    SetGroupParent(g: TreeEditor.TreeGroup, parent: TreeEditor.TreeGroup): void;
    SetNodeParent(n: TreeEditor.TreeNode, parent: TreeEditor.TreeNode): void;
    UnlockGroup(g: TreeEditor.TreeGroup): void;
    UpdateDistribution(id: number): void;
    UpdateFrequency(id: number): void;
    UpdateMesh(matrix: any, materials: TreeEditor.TreeMaterial[], verts: TreeEditor.TreeVertex[], tris: TreeEditor.TreeTriangle[], aoSpheres: TreeEditor.TreeAOSphere[], buildFlags: number, adaptiveQuality: number, aoDensity: number): void;
    UpdateMesh(worldToLocalMatrix: any, outMaterials: any): void;
    UpdateSeed(id: number): void;
    ValidateReferences(): void;
    branchGroups: TreeEditor.TreeGroupBranch[];
    isInPreviewMode: boolean;
    leafGroups: TreeEditor.TreeGroupLeaf[];
    materialHash: string;
    mesh: any;
    nodes: TreeEditor.TreeNode[];
    optimizedCutoutMaterial: any;
    optimizedSolidMaterial: any;
    root: TreeEditor.TreeGroupRoot;
  }
}
declare namespace TreeEditor {
  class TreeEditor extends UnityEditor.Editor {
    constructor();
    InspectorAnimation(treeData: TreeEditor.TreeData, group: TreeEditor.TreeGroup): void;
    InspectorBranch(treeData: TreeEditor.TreeData, group: TreeEditor.TreeGroupBranch): void;
    InspectorDistribution(treeData: TreeEditor.TreeData, group: TreeEditor.TreeGroup): void;
    InspectorEditTools(obj: any): void;
    InspectorHierachy(treeData: TreeEditor.TreeData, renderer: any): void;
    InspectorLeaf(treeData: TreeEditor.TreeData, group: TreeEditor.TreeGroupLeaf): void;
    InspectorRoot(treeData: TreeEditor.TreeData, group: TreeEditor.TreeGroupRoot): void;
    OnInspectorGUI(): void;
    UseDefaultMargins(): boolean;
    static editMode: TreeEditor.TreeEditor.EditMode;
    static styles: TreeEditor.TreeEditor.Styles;
  }
}
declare namespace TreeEditor.TreeEditor {
  class PropertyType extends System.Enum {
    protected constructor();
    static FullUndo: TreeEditor.TreeEditor.PropertyType;
    static FullUndoUpdate: TreeEditor.TreeEditor.PropertyType;
    static FullUpdate: TreeEditor.TreeEditor.PropertyType;
    static Normal: TreeEditor.TreeEditor.PropertyType;
    value__: number;
  }
}
declare namespace TreeEditor.TreeEditor {
  class EditMode extends System.Enum {
    protected constructor();
    static CreateGroup: TreeEditor.TreeEditor.EditMode;
    static Delete: TreeEditor.TreeEditor.EditMode;
    static Duplicate: TreeEditor.TreeEditor.EditMode;
    static Everything: TreeEditor.TreeEditor.EditMode;
    static Freehand: TreeEditor.TreeEditor.EditMode;
    static MoveNode: TreeEditor.TreeEditor.EditMode;
    static None: TreeEditor.TreeEditor.EditMode;
    static Parameter: TreeEditor.TreeEditor.EditMode;
    static RotateNode: TreeEditor.TreeEditor.EditMode;
    value__: number;
  }
}
declare namespace TreeEditor.TreeEditor {
  class Styles extends System.Object {
    constructor();
    iconAddBranches: any;
    iconAddLeaves: any;
    iconDuplicate: any;
    iconRefresh: any;
    iconTrash: any;
    nodeBackground: any;
    nodeBoxes: any[];
    nodeIcons: any[];
    nodeLabelBot: any;
    nodeLabelTop: any;
    pinLabel: any;
    toolbar: any;
    toolbarButton: any;
    visibilityIcons: any[];
    warningIcon: any;
  }
}
declare namespace TreeEditor.TreeEditor {
  class HierachyNode extends System.Object {
    constructor();
  }
}
declare namespace TreeEditor {
  class TreeEditorHelper extends System.Object {
    constructor();
    AreShadersCorrect(): boolean;
    static ExtractLabel(uiString: string): string;
    static ExtractTooltip(uiString: string): string;
    static GetGUIContent(id: string): any;
    static GetOptimizedShaderName(shader: any): string;
    static GetUIString(id: string): string;
    GUITooManyShaders(): boolean;
    GUIWrongShader(uniqueID: string, value: any, nodeType: TreeEditor.TreeEditorHelper.NodeType): boolean;
    static IsTreeBarkShader(shader: any): boolean;
    static IsTreeLeafShader(shader: any): boolean;
    NodeHasWrongMaterial(group: TreeEditor.TreeGroup): boolean;
    OnEnable(treeData: TreeEditor.TreeData): void;
    RefreshAllTreeShaders(): void;
  }
}
declare namespace TreeEditor.TreeEditorHelper {
  class NodeType extends System.Enum {
    protected constructor();
    static BarkNode: TreeEditor.TreeEditorHelper.NodeType;
    static LeafNode: TreeEditor.TreeEditorHelper.NodeType;
    value__: number;
  }
}
declare namespace TreeEditor {
  class SmoothRandom extends System.Object {
    constructor();
    static Get(speed: number): number;
    static GetVector3(speed: number): any;
  }
}
declare namespace TreeEditor {
  class Perlin extends System.Object {
    constructor();
    Noise(arg: number): number;
    Noise(x: number, y: number): number;
    Noise(x: number, y: number, z: number): number;
    SetSeed(seed: number): void;
  }
}
declare namespace TreeEditor {
  class FractalNoise extends System.Object {
    constructor(inH: number, inLacunarity: number, inOctaves: number);
    constructor(inH: number, inLacunarity: number, inOctaves: number, noise: TreeEditor.Perlin);
    BrownianMotion(x: number, y: number): number;
    HybridMultifractal(x: number, y: number, offset: number): number;
    RidgedMultifractal(x: number, y: number, offset: number, gain: number): number;
  }
}
declare namespace TreeEditor {
  class RingLoop extends System.Object {
    constructor();
    BuildVertices(verts: TreeEditor.TreeVertex[]): void;
    Cap(sphereFactor: number, noise: number, mappingMode: number, mappingScale: number, verts: TreeEditor.TreeVertex[], tris: TreeEditor.TreeTriangle[], materialIndex: number): void;
    Clone(): TreeEditor.RingLoop;
    Connect(other: TreeEditor.RingLoop, tris: TreeEditor.TreeTriangle[], materialIndex: number, flipTris: boolean, lowres: boolean): void;
    Reset(r: number, m: any, bOffset: number, segs: number): void;
    SetAnimationProperties(primaryFactor: number, secondaryFactor: number, edgeFactor: number, phase: number): void;
    SetFlares(radius: number, noise: number): void;
    SetNoise(scale: number, scaleU: number, scaleV: number): void;
    static SetNoiseSeed(seed: number): void;
    SetSpread(top: number, bottom: number): void;
    SetSurfaceAngle(angleDeg: number): void;
    baseOffset: number;
    radius: number;
  }
}
declare namespace TreeEditor {
  class SplineNode extends System.Object {
    constructor(p: any, t: number);
    constructor(o: TreeEditor.SplineNode);
    normal: any;
    point: any;
    rot: any;
    tangent: any;
    time: number;
  }
}
declare namespace TreeEditor {
  class TextureAtlas extends System.Object {
    constructor();
    AddTexture(name: string, diffuse: any, diffuseColor: any, normal: any, gloss: any, transtex: any, shadowOffsetTex: any, shininess: number, scale: any, tileV: boolean, uvTiling: any): void;
    GetHashCode(): number;
    GetTexTiling(name: string): any;
    GetUVRect(name: string): any;
    Pack(targetWidth: any, targetHeight: number, padding: number, correctPow2: boolean): void;
    atlasHeight: number;
    atlasPadding: number;
    atlasWidth: number;
    nodes: TreeEditor.TextureAtlas.TextureNode[];
  }
}
declare namespace TreeEditor.TextureAtlas {
  class TextureNode extends System.Object {
    constructor();
    CompareTo(b: TreeEditor.TextureAtlas.TextureNode): number;
    static Overlap(a: TreeEditor.TextureAtlas.TextureNode, b: TreeEditor.TextureAtlas.TextureNode): boolean;
    diffuseColor: any;
    diffuseTexture: any;
    glossTexture: any;
    name: string;
    normalTexture: any;
    packedRect: any;
    scale: any;
    shadowOffsetTexture: any;
    shininess: number;
    sourceRect: any;
    tileV: boolean;
    translucencyTexture: any;
    uvRect: any;
    uvTiling: any;
  }
}
declare namespace TreeEditor {
  class TreeAOSphere extends System.Object {
    constructor(pos: any, radius: number, density: number);
    PointOcclusion(pos: any, nor: any): number;
    area: number;
    density: number;
    flag: boolean;
    position: any;
    radius: number;
  }
}
declare namespace TreeEditor {
  class TreeAttribute extends System.Attribute {
    constructor(uiLabel: string, uiGadget: string, uiMin: number, uiMax: number);
    constructor(uiLabel: string, uiGadget: string, uiMin: number, uiMax: number, uiRequirement: string);
    constructor(uiLabel: string, uiGadget: string, uiMin: number, uiMax: number, uiCurve: string, uiCurveMin: number, uiCurveMax: number);
    constructor(uiLabel: string, uiGadget: string, uiMin: number, uiMax: number, uiCurve: string, uiCurveMin: number, uiCurveMax: number, uiRequirement: string);
    constructor(uiLabel: string, uiGadget: string, uiOptions: string);
    constructor(uiLabel: string, uiGadget: string, uiOptions: string, uiCurve: string, uiCurveMin: number, uiCurveMax: number, uiRequirement: string);
    ToString(): string;
    uiCurve: string;
    uiCurveMax: number;
    uiCurveMin: number;
    uiGadget: string;
    uiLabel: string;
    uiMax: number;
    uiMin: number;
    uiOptions: any[];
    uiRequirement: string;
  }
}
declare namespace TreeEditor {
  class TreeGroup extends System.Object {
    constructor();
    BuildAOSpheres(aoSpheres: TreeEditor.TreeAOSphere[]): void;
    CanHaveSubGroups(): boolean;
    CheckExternalChanges(): boolean;
    ComputeWindFactor(node: TreeEditor.TreeNode, offset: number): any;
    GetRadiusAtTime(node: TreeEditor.TreeNode, t: number, includeModifications: boolean): number;
    GetRootMatrix(): any;
    GetRootSpread(): number;
    Lock(): void;
    Unlock(): void;
    UpdateDistribution(completeUpdate: boolean, updateSubGroups: boolean): void;
    UpdateFrequency(owner: TreeEditor.TreeData): void;
    UpdateMatrix(): void;
    UpdateMesh(materials: TreeEditor.TreeMaterial[], verts: TreeEditor.TreeVertex[], tris: TreeEditor.TreeTriangle[], aoSpheres: TreeEditor.TreeAOSphere[], buildFlags: number, adaptiveQuality: number, aoDensity: number): void;
    UpdateParameters(): void;
    UpdateSeed(): void;
    uniqueID: number;
    animationEdge: number;
    animationPrimary: number;
    animationSecondary: number;
    childGroupIDs: number[];
    distributionCurve: any;
    distributionFrequency: number;
    distributionMode: TreeEditor.TreeGroup.DistributionMode;
    distributionNodes: number;
    distributionPitch: number;
    distributionPitchCurve: any;
    distributionScale: number;
    distributionScaleCurve: any;
    distributionTwirl: number;
    lockFlags: number;
    nodeIDs: number[];
    parentGroupID: number;
    seed: number;
    showAnimationProps: boolean;
    visible: boolean;
  }
}
declare namespace TreeEditor.TreeGroup {
  class LockFlag extends System.Enum {
    protected constructor();
    static LockAlignment: TreeEditor.TreeGroup.LockFlag;
    static LockPosition: TreeEditor.TreeGroup.LockFlag;
    static LockShape: TreeEditor.TreeGroup.LockFlag;
    value__: number;
  }
}
declare namespace TreeEditor.TreeGroup {
  class BuildFlag extends System.Enum {
    protected constructor();
    static BuildAmbientOcclusion: TreeEditor.TreeGroup.BuildFlag;
    static BuildWeldParts: TreeEditor.TreeGroup.BuildFlag;
    value__: number;
  }
}
declare namespace TreeEditor.TreeGroup {
  class DistributionMode extends System.Enum {
    protected constructor();
    static Alternate: TreeEditor.TreeGroup.DistributionMode;
    static Opposite: TreeEditor.TreeGroup.DistributionMode;
    static Random: TreeEditor.TreeGroup.DistributionMode;
    value__: number;
    static Whorled: TreeEditor.TreeGroup.DistributionMode;
  }
}
declare namespace TreeEditor {
  class TreeGroupBranch extends TreeEditor.TreeGroup {
    constructor();
    BuildAOSpheres(aoSpheres: TreeEditor.TreeAOSphere[]): void;
    GetRadiusAtTime(node: TreeEditor.TreeNode, time: number, includeModifications: boolean): number;
    UpdateMatrix(): void;
    UpdateMesh(materials: TreeEditor.TreeMaterial[], verts: TreeEditor.TreeVertex[], tris: TreeEditor.TreeTriangle[], aoSpheres: TreeEditor.TreeAOSphere[], buildFlags: number, adaptiveQuality: number, aoDensity: number): void;
    UpdateParameters(): void;
    UpdateSpline(node: TreeEditor.TreeNode): void;
    UpdateSplines(): void;
    breakingChance: number;
    breakingSpot: any;
    capSmoothing: number;
    crinkCurve: any;
    crinklyness: number;
    flareHeight: number;
    flareNoise: number;
    flareSize: number;
    frondCount: number;
    frondCrease: number;
    frondCurve: any;
    frondRange: any;
    frondRotation: number;
    frondWidth: number;
    geometryMode: TreeEditor.TreeGroupBranch.GeometryMode;
    height: any;
    lodQualityMultiplier: number;
    materialBranch: any;
    materialBreak: any;
    materialFrond: any;
    noise: number;
    noiseCurve: any;
    noiseScaleU: number;
    noiseScaleV: number;
    radius: number;
    radiusCurve: any;
    radiusMode: boolean;
    seekBlend: number;
    seekCurve: any;
    weldHeight: number;
    weldSpreadBottom: number;
    weldSpreadTop: number;
  }
}
declare namespace TreeEditor.TreeGroupBranch {
  class GeometryMode extends System.Enum {
    protected constructor();
    static Branch: TreeEditor.TreeGroupBranch.GeometryMode;
    static BranchFrond: TreeEditor.TreeGroupBranch.GeometryMode;
    static Frond: TreeEditor.TreeGroupBranch.GeometryMode;
    value__: number;
  }
}
declare namespace TreeEditor.TreeGroupBranch {
  class Styles extends System.Object {
    protected constructor();
    static distributionModeString: string;
    static edgeTurbulenceString: string;
    static frequencyString: string;
    static groupSeedString: string;
    static growthAngleString: string;
    static growthScaleString: string;
    static mainTurbulenceString: string;
    static mainWindString: string;
    static twirlString: string;
    static whorledStepString: string;
  }
}
declare namespace TreeEditor {
  class TreeGroupLeaf extends TreeEditor.TreeGroup {
    constructor();
    BuildAOSpheres(aoSpheres: TreeEditor.TreeAOSphere[]): void;
    CanHaveSubGroups(): boolean;
    UpdateMatrix(): void;
    UpdateMesh(materials: TreeEditor.TreeMaterial[], verts: TreeEditor.TreeVertex[], tris: TreeEditor.TreeTriangle[], aoSpheres: TreeEditor.TreeAOSphere[], buildFlags: number, adaptiveQuality: number, aoDensity: number): void;
    UpdateParameters(): void;
    geometryMode: number;
    horizontalAlign: number;
    instanceMesh: any;
    materialLeaf: any;
    perpendicularAlign: number;
    size: any;
  }
}
declare namespace TreeEditor.TreeGroupLeaf {
  class GeometryMode extends System.Enum {
    protected constructor();
    static BILLBOARD: TreeEditor.TreeGroupLeaf.GeometryMode;
    static CROSS: TreeEditor.TreeGroupLeaf.GeometryMode;
    static MESH: TreeEditor.TreeGroupLeaf.GeometryMode;
    static PLANE: TreeEditor.TreeGroupLeaf.GeometryMode;
    static TRI_CROSS: TreeEditor.TreeGroupLeaf.GeometryMode;
    value__: number;
  }
}
declare namespace TreeEditor.TreeGroupLeaf {
  class Styles extends System.Object {
    protected constructor();
    static distributionModeString: string;
    static edgeTurbulenceString: string;
    static frequencyString: string;
    static groupSeedString: string;
    static growthAngleString: string;
    static growthScaleString: string;
    static mainTurbulenceString: string;
    static mainWindString: string;
    static twirlString: string;
    static whorledStepString: string;
  }
}
declare namespace TreeEditor {
  class TreeGroupRoot extends TreeEditor.TreeGroup {
    constructor();
    CanHaveSubGroups(): boolean;
    SetRootMatrix(m: any): void;
    UpdateParameters(): void;
    adaptiveLODQuality: number;
    aoDensity: number;
    enableAmbientOcclusion: boolean;
    enableMaterialOptimize: boolean;
    enableWelding: boolean;
    groundOffset: number;
    rootMatrix: any;
    rootSpread: number;
    shadowTextureQuality: number;
  }
}
declare namespace TreeEditor.TreeGroupRoot {
  class Styles extends System.Object {
    protected constructor();
    static groupSeedString: string;
  }
}
declare namespace TreeEditor {
  class TreeMaterial extends System.Object {
    constructor();
    material: any;
    tileV: boolean;
  }
}
declare namespace TreeEditor {
  class TreeNode extends System.Object {
    constructor();
    GetLocalMatrixAtTime(time: number): any;
    GetPropertiesAtTime(time: number, pos: any, rot: any, rad: any): void;
    GetRadiusAtTime(time: number): number;
    GetScale(): number;
    GetSurfaceAngleAtTime(time: number): number;
    uniqueID: number;
    angle: number;
    animSeed: number;
    baseAngle: number;
    breakOffset: number;
    capRange: number;
    groupID: number;
    matrix: any;
    offset: number;
    parentID: number;
    pitch: number;
    rotation: any;
    scale: number;
    seed: number;
    size: number;
    spline: TreeEditor.TreeSpline;
    triEnd: number;
    triStart: number;
    vertEnd: number;
    vertStart: number;
    visible: boolean;
  }
}
declare namespace TreeEditor {
  class TreeSpline extends System.Object {
    constructor();
    constructor(o: TreeEditor.TreeSpline);
    AddPoint(pos: any, timeInSeconds: number): void;
    GetApproximateLength(): number;
    GetNodeCount(): number;
    GetNodes(): TreeEditor.SplineNode[];
    GetPositionAtTime(timeParam: number): any;
    GetRotationAtTime(timeParam: number): any;
    RemoveNode(c: number): void;
    Reset(): void;
    SetNodeCount(c: number): void;
    UpdateRotations(): void;
    UpdateTime(): void;
    nodes: TreeEditor.SplineNode[];
    tension: number;
  }
}
declare namespace TreeEditor {
  class TreeTriangle extends System.Object {
    constructor(material: number, v0: number, v1: number, v2: number);
    constructor(material: number, v0: number, v1: number, v2: number, isBillboard: boolean);
    constructor(material: number, v0: number, v1: number, v2: number, isBillboard: boolean, tileV: boolean, isCutout: boolean);
    flip(): void;
    isBillboard: boolean;
    isCutout: boolean;
    materialIndex: number;
    tileV: boolean;
    v: number[];
  }
}
declare namespace TreeEditor {
  class TreeVertex extends System.Object {
    constructor();
    Lerp4(tv: TreeEditor.TreeVertex[], factor: any): void;
    SetAmbientOcclusion(ao: number): void;
    SetAnimationProperties(primaryFactor: number, secondaryFactor: number, edgeFactor: number, phase: number): void;
    color: any;
    flag: boolean;
    nor: any;
    pos: any;
    tangent: any;
    uv0: any;
    uv1: any;
  }
}
declare namespace UnityEditor.EventSystems {
  class EventSystemEditor extends UnityEditor.Editor {
    constructor();
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(rect: any, background: any): void;
    RequiresConstantRepaint(): boolean;
  }
}
declare namespace UnityEditor.EventSystems {
  class EventTriggerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class AspectRatioFitterEditor extends UnityEditor.UI.SelfControllerEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class SelfControllerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class ButtonEditor extends UnityEditor.UI.SelectableEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class SelectableEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class CanvasScalerEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI.CanvasScalerEditor {
  class Styles extends System.Object {
    constructor();
    heightContent: any;
    leftAlignedLabel: any;
    matchContent: any;
    rightAlignedLabel: any;
    uiScaleModeContent: any;
    widthContent: any;
  }
}
declare namespace UnityEditor.UI {
  class ContentSizeFitterEditor extends UnityEditor.UI.SelfControllerEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class DropdownEditor extends UnityEditor.UI.SelectableEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class GraphicEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class GridLayoutGroupEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class HorizontalOrVerticalLayoutGroupEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class ImageEditor extends UnityEditor.UI.GraphicEditor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(rect: any, background: any): void;
  }
}
declare namespace UnityEditor.UI {
  class InputFieldEditor extends UnityEditor.UI.SelectableEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Events {
  class InterceptedEventsPreview extends UnityEditor.ObjectPreview {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor.Events.InterceptedEventsPreview {
  class ComponentInterceptedEvents extends System.Object {
    constructor();
    componentName: any;
    interceptedEvents: number[];
  }
}
declare namespace UnityEditor.Events.InterceptedEventsPreview {
  class Styles extends System.Object {
    constructor();
    componentName: any;
    labelStyle: any;
  }
}
declare namespace UnityEditor.UI {
  class LayoutElementEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.Events {
  class LayoutPropertiesPreview extends UnityEditor.ObjectPreview {
    constructor();
    GetPreviewTitle(): any;
    HasPreviewGUI(): boolean;
    Initialize(targets: UnityEngine.Object[]): void;
    OnPreviewGUI(r: any, background: any): void;
  }
}
declare namespace UnityEditor.Events.LayoutPropertiesPreview {
  class Styles extends System.Object {
    constructor();
    headerStyle: any;
    labelStyle: any;
  }
}
declare namespace UnityEditor.UI {
  class MaskEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class MenuOptions extends System.Object {
    protected constructor();
    static AddButton(menuCommand: UnityEditor.MenuCommand): void;
    static AddCanvas(menuCommand: UnityEditor.MenuCommand): void;
    static AddDropdown(menuCommand: UnityEditor.MenuCommand): void;
    static AddImage(menuCommand: UnityEditor.MenuCommand): void;
    static AddInputField(menuCommand: UnityEditor.MenuCommand): void;
    static AddPanel(menuCommand: UnityEditor.MenuCommand): void;
    static AddRawImage(menuCommand: UnityEditor.MenuCommand): void;
    static AddScrollbar(menuCommand: UnityEditor.MenuCommand): void;
    static AddScrollView(menuCommand: UnityEditor.MenuCommand): void;
    static AddSlider(menuCommand: UnityEditor.MenuCommand): void;
    static AddText(menuCommand: UnityEditor.MenuCommand): void;
    static AddToggle(menuCommand: UnityEditor.MenuCommand): void;
    static CreateEventSystem(menuCommand: UnityEditor.MenuCommand): void;
    static CreateNewUI(): any;
    static GetOrCreateCanvasGameObject(): any;
  }
}
declare namespace UnityEditor.UI {
  class PrefabLayoutRebuilder extends System.Object {
    constructor();
  }
}
declare namespace UnityEditor.UI {
  class RawImageEditor extends UnityEditor.UI.GraphicEditor {
    constructor();
    GetInfoString(): string;
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewGUI(rect: any, background: any): void;
  }
}
declare namespace UnityEditor.UI {
  class RectMask2DEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class ScrollbarEditor extends UnityEditor.UI.SelectableEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class ScrollRectEditor extends UnityEditor.Editor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class SliderEditor extends UnityEditor.UI.SelectableEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class SpriteDrawUtility extends System.Object {
    constructor();
    static DrawSprite(sprite: any, drawArea: any, color: any): void;
    static DrawSprite(tex: any, drawArea: any, outer: any, uv: any, color: any): void;
  }
}
declare namespace UnityEditor.UI {
  class TextEditor extends UnityEditor.UI.GraphicEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class ToggleEditor extends UnityEditor.UI.SelectableEditor {
    constructor();
    OnInspectorGUI(): void;
  }
}
declare namespace UnityEditor.UI {
  class AnimationTriggersDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(prop: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(rect: any, prop: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.UI {
  class ColorBlockDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(prop: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(rect: any, prop: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.UI {
  class DropdownOptionListDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.UI {
  class FontDataDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.UI.FontDataDrawer {
  class Styles extends System.Object {
    protected constructor();
    static alignmentButtonLeft: any;
    static alignmentButtonMid: any;
    static alignmentButtonRight: any;
    static m_BottomAlignText: any;
    static m_BottomAlignTextActive: any;
    static m_CenterAlignText: any;
    static m_CenterAlignTextActive: any;
    static m_EncodingContent: any;
    static m_LeftAlignText: any;
    static m_LeftAlignTextActive: any;
    static m_MiddleAlignText: any;
    static m_MiddleAlignTextActive: any;
    static m_RightAlignText: any;
    static m_RightAlignTextActive: any;
    static m_TopAlignText: any;
    static m_TopAlignTextActive: any;
  }
}
declare namespace UnityEditor.UI.FontDataDrawer {
  class VerticalTextAligment extends System.Enum {
    protected constructor();
    static Bottom: UnityEditor.UI.FontDataDrawer.VerticalTextAligment;
    static Middle: UnityEditor.UI.FontDataDrawer.VerticalTextAligment;
    static Top: UnityEditor.UI.FontDataDrawer.VerticalTextAligment;
    value__: number;
  }
}
declare namespace UnityEditor.UI.FontDataDrawer {
  class HorizontalTextAligment extends System.Enum {
    protected constructor();
    static Center: UnityEditor.UI.FontDataDrawer.HorizontalTextAligment;
    static Left: UnityEditor.UI.FontDataDrawer.HorizontalTextAligment;
    static Right: UnityEditor.UI.FontDataDrawer.HorizontalTextAligment;
    value__: number;
  }
}
declare namespace UnityEditor.UI {
  class NavigationDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(prop: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(pos: any, prop: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.UI.NavigationDrawer {
  class Styles extends System.Object {
    constructor();
    navigationContent: any;
  }
}
declare namespace UnityEditor.UI {
  class SpriteStateDrawer extends UnityEditor.PropertyDrawer {
    constructor();
    GetPropertyHeight(prop: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(rect: any, prop: UnityEditor.SerializedProperty, label: any): void;
  }
}
declare namespace UnityEditor.UIAutomation {
  class IMModel extends System.Object {
    constructor();
    FindElementsByGUIContent(guiContent: any): any;
    FindElementsByGUIStyle(style: any): any;
    Update(): void;
    ViewContentsChanged(): void;
    readonly nextSibling: UnityEditor.UIAutomation.IAutomatedUIElement;
  }
}
declare namespace UnityEditor.UIAutomation {
  class IElementFinder {
    protected constructor();
    FindElementsByGUIContent(guiContent: any): any;
    FindElementsByGUIStyle(style: any): any;
    readonly nextSibling: UnityEditor.UIAutomation.IAutomatedUIElement;
  }
}
declare namespace UnityEditor.UIAutomation {
  class IAutomatedUIElement {
    protected constructor();
    readonly children: UnityEditor.UIAutomation.IAutomatedUIElement[];
    readonly guiContent: any;
    readonly hasRect: boolean;
    readonly name: string;
    readonly parent: UnityEditor.UIAutomation.IAutomatedUIElement;
    readonly rect: any;
    readonly style: any;
  }
}
declare namespace UnityEditor.UIAutomation {
  class AutomatedIMElement extends System.Object {
    constructor(model: UnityEditor.UIAutomation.IMModel, index: number);
    AddChild(element: UnityEditor.UIAutomation.AutomatedIMElement): void;
    FindElementsByGUIContent(guiContent: any): any;
    FindElementsByGUIStyle(style: any): any;
    readonly children: UnityEditor.UIAutomation.IAutomatedUIElement[];
    descendants: any;
    guiContent: any;
    readonly hasRect: boolean;
    readonly name: string;
    readonly nextSibling: UnityEditor.UIAutomation.IAutomatedUIElement;
    parent: UnityEditor.UIAutomation.IAutomatedUIElement;
    rect: any;
    style: any;
  }
}
declare namespace UnityEditor.UIAutomation {
  class ClickOverTime extends System.Object {
    constructor();
    Clicks(window: UnityEditor.EditorWindow, clickPositions: any[], secondsBetweenClicks: number): void;
    Clicks(window: UnityEditor.EditorWindow, clickPositions: any[], secondsBetweenClicks: number, modifiers: any): void;
    Update(window: UnityEditor.EditorWindow): boolean;
    Update(window: UnityEditor.EditorWindow, modifiers: any): boolean;
    numEventsPerSecond: number;
  }
}
declare namespace UnityEditor.UIAutomation {
  class DragOverTime extends System.Object {
    constructor();
    DragAndDrop(window: UnityEditor.EditorWindow, mousePositionStart: any, mousePositionEnd: any, seconds: number): void;
    DragAndDrop(window: UnityEditor.EditorWindow, mousePositionStart: any, mousePositionEnd: any, seconds: number, modifiers: any): void;
    Update(window: UnityEditor.EditorWindow): boolean;
    Update(window: UnityEditor.EditorWindow, modifiers: any): boolean;
    numEventsPerSecond: number;
  }
}
declare namespace UnityEditor.UIAutomation {
  class EventUtility extends System.Object {
    protected constructor();
    static BeginDrag(window: UnityEditor.EditorWindow, mousePosition: any): void;
    static BeginDrag(window: UnityEditor.EditorWindow, mousePosition: any, modifiers: any): void;
    static BeginDragAndDrop(window: UnityEditor.EditorWindow, mousePosition: any): boolean;
    static BeginDragAndDrop(window: UnityEditor.EditorWindow, mousePosition: any, modifiers: any): boolean;
    static ConvertEditorWindowCoordsToGuiViewCoords(editorWindowPosition: any): any;
    static ConvertGuiViewCoordsToEditorWindowCoords(guiViewPosition: any): any;
    static Drag(window: UnityEditor.EditorWindow, mousePositionStart: any, mousePositionEnd: any): void;
    static Drag(window: UnityEditor.EditorWindow, mousePositionStart: any, mousePositionEnd: any, modifiers: any): void;
    static DragAndDrop(window: UnityEditor.EditorWindow, mousePositionStart: any, mousePositionEnd: any): void;
    static DragAndDrop(window: UnityEditor.EditorWindow, mousePositionStart: any, mousePositionEnd: any, modifiers: any): void;
    static EndDrag(window: UnityEditor.EditorWindow, mousePosition: any): void;
    static EndDrag(window: UnityEditor.EditorWindow, mousePosition: any, modifiers: any): void;
    static EndDragAndDrop(window: UnityEditor.EditorWindow, mousePosition: any): boolean;
    static EndDragAndDrop(window: UnityEditor.EditorWindow, mousePosition: any, modifiers: any): boolean;
    static KeyDown(window: UnityEditor.EditorWindow, keyCode: any): boolean;
    static KeyDown(window: UnityEditor.EditorWindow, keyCode: any, modifiers: any): boolean;
    static KeyDownAndUp(window: UnityEditor.EditorWindow, keyCode: any): boolean;
    static KeyDownAndUp(window: UnityEditor.EditorWindow, keyCode: any, modifiers: any): boolean;
    static KeyUp(window: UnityEditor.EditorWindow, keyCode: any): boolean;
    static KeyUp(window: UnityEditor.EditorWindow, keyCode: any, modifiers: any): boolean;
    static UpdateDrag(window: UnityEditor.EditorWindow, mousePosition: any): void;
    static UpdateDrag(window: UnityEditor.EditorWindow, mousePosition: any, modifiers: any): void;
    static UpdateDragAndDrop(window: UnityEditor.EditorWindow, mousePosition: any): boolean;
    static UpdateDragAndDrop(window: UnityEditor.EditorWindow, mousePosition: any, modifiers: any): boolean;
    static UpdateMouseMove(window: UnityEditor.EditorWindow, mousePosition: any): void;
  }
}
declare namespace UnityEditor.UIAutomation {
  class Easing extends System.Object {
    constructor();
    static Linear(k: number): number;
  }
}
declare namespace UnityEditor.UIAutomation.Easing {
  class Quadratic extends System.Object {
    constructor();
    static In(k: number): number;
    static InOut(k: number): number;
    static Out(k: number): number;
  }
}
declare namespace UnityEditor.UIAutomation {
  class Wait extends System.ValueType {
    protected constructor();
    static Seconds(seconds: number): void;
    readonly keepWaiting: boolean;
    static readonly waiting: boolean;
  }
}
declare namespace UnityEditor.UIAutomation {
  class FakeCursor extends System.Object {
    constructor();
    Draw(): void;
    position: any;
    currentCursorType: UnityEditor.UIAutomation.FakeCursor.CursorType;
  }
}
declare namespace UnityEditor.UIAutomation.FakeCursor {
  class CursorType extends System.Enum {
    protected constructor();
    static Normal: UnityEditor.UIAutomation.FakeCursor.CursorType;
    value__: number;
  }
}
declare namespace UnityEditor.UIAutomation.FakeCursor {
  class CursorData extends System.ValueType {
    protected constructor();
    cursor: any;
    hotspotOffset: any;
  }
}
declare namespace UnityEditor.UIAutomation {
  class KeyInputOverTime extends System.Object {
    constructor();
    KeyInput(window: UnityEditor.EditorWindow, keyCodeInput: any[], seconds: number): void;
    Update(window: UnityEditor.EditorWindow): boolean;
  }
}
declare namespace UnityEditor.UIAutomation {
  class TestEditorWindow extends UnityEditor.EditorWindow {
    constructor();
    fakeCursor: UnityEditor.UIAutomation.FakeCursor;
  }
}
declare namespace UnityEditorInternal.VR.iOS {
  class PodItem extends System.Object {
    constructor();
    static CreateFromMatchGroup(g: any): UnityEditorInternal.VR.iOS.PodItem;
    Index: number;
    Length: number;
    Value: string;
  }
}
declare namespace UnityEditorInternal.VR.iOS {
  class PodInfo extends System.Object {
    constructor();
    IsLowerVersionThan(otherPod: UnityEditorInternal.VR.iOS.PodInfo): boolean;
    ToString(): string;
    Library: UnityEditorInternal.VR.iOS.PodItem;
    Version: UnityEditorInternal.VR.iOS.PodItem;
    VersionOperator: UnityEditorInternal.VR.iOS.PodItem;
  }
}
declare namespace UnityEditorInternal.VR.iOS {
  class Podfile extends System.Object {
    constructor(path: string);
    GetPodInfoForLibrary(library: string): UnityEditorInternal.VR.iOS.PodInfo;
    readonly Path: string;
  }
}
declare namespace UnityEditorInternal.VR.iOS {
  class PostProcessVR extends System.Object {
    protected constructor();
    static GenerateCocoapodsUpdateWarning(pluginFolder: string, buildFolder: string): void;
  }
}
declare namespace UnityEditor.WebGL {
  class WebGLStrippingInfo extends UnityEditor.BuildReporting.StrippingInfo {
    constructor();
    Analyze(): void;
    builtCodePath: string;
    developmentBuild: boolean;
  }
}
declare namespace UnityEditor.WebGL {
  class WebGlBuildPostprocessor extends UnityEditor.Modules.DefaultBuildPostprocessor {
    constructor();
    static CompressAndMarkBrotli(path: string): void;
    static CompressAndMarkGzip(path: string): void;
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
  }
}
declare namespace UnityEditor.WebGL.WebGlBuildPostprocessor {
  class DataFile extends System.ValueType {
    protected constructor();
    internalPath: number[];
    length: number;
    path: string;
  }
}
declare namespace UnityEditor.WebGL {
  class CodeAnalysisUtils extends System.Object {
    constructor();
    static ExtractFunctionsFromJS(code: string, processFunction: ((arg1: string, arg2: string) => void), processOther: ((obj: string) => void)): void;
    static ReadMinificationMap(mapPath: string): any;
    static ReplaceDuplicates(asmPath: string, symbolsPath: string, symbolsStrippedPath: string, interations: number): void;
  }
}
declare namespace UnityEditor.WebGL {
  class TargetExtension extends UnityEditor.Modules.DefaultPlatformSupportModule {
    constructor();
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreateSettingsEditorExtension(): UnityEditor.Modules.ISettingEditorExtension;
    CreateUserAssembliesValidatorExtension(): UnityEditor.Modules.IUserAssembliesValidator;
    readonly JamTarget: string;
    readonly TargetName: string;
  }
}
declare namespace UnityEditor.WebGL {
  class HttpServerEditorWrapper {
    constructor();
    static CreateIfNeeded(path: string, port: any): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    static GetRandomUnusedPort(): number;
    GetType(): any;
    static Kill(): void;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
    path: string;
    pid: number;
    port: number;
    time: string;
  }
}
declare namespace UnityEditor.WebGL {
  class ProgramUtils extends System.Object {
    protected constructor();
  }
}
declare namespace UnityEditor.WebGL {
  class ProgressHelper extends System.Object {
    constructor();
    Advance(): number;
    Get(): number;
    LastValue(): number;
    Reset(numSteps: number): void;
    Show(title: string, message: string): void;
    Step(title: string, message: string): void;
  }
}
declare namespace UnityEditor.WebGL {
  class WebGlBuildWindowExtension extends UnityEditor.Modules.DefaultBuildWindowExtension {
    constructor();
    EnabledBuildAndRunButton(): boolean;
    EnabledBuildButton(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShouldDrawProfilerCheckbox(): boolean;
    ShouldDrawScriptDebuggingCheckbox(): boolean;
    ShowPlatformBuildOptions(): void;
    debugBuild: any;
    webGLUsePreBuiltUnityEngine: any;
  }
}
declare namespace UnityEditor.WebGL {
  class WebGlSettingsExtension extends UnityEditor.Modules.DefaultPlayerSettingsEditorExtension {
    constructor();
    CanShowUnitySplashScreen(): boolean;
    HasPublishSection(): boolean;
    HasResolutionSection(): boolean;
    OnEnable(settingsEditor: UnityEditor.PlayerSettingsEditor): void;
    PublishSectionGUI(h: number, kLabelFloatMinW: number, kLabelFloatMaxW: number): void;
    ResolutionSectionGUI(h: number, midWidth: number, maxWidth: number): void;
  }
}
declare namespace UnityEditor.WebGL {
  class WebGLTemplateManager extends UnityEditor.WebTemplateManagerBase {
    constructor();
    readonly builtinTemplatesFolder: string;
    readonly customTemplatesFolder: string;
    readonly defaultIcon: any;
  }
}
declare namespace UnityEditor.WebGL {
  class WebsockifyEditorWrapper {
    protected constructor();
    static CreateIfNeeded(): void;
    Equals(other: any): boolean;
    GetHashCode(): number;
    GetInstanceID(): number;
    GetType(): any;
    SetDirty(): void;
    ToString(): string;
    hideFlags: any;
    name: string;
  }
}
declare namespace UnityEditor.WebGL.Emscripten {
  class EmccArguments extends System.Object {
    constructor();
    static readonly debugEnvironmentAndInvocations: boolean;
  }
}
declare namespace UnityEditor.WebGL.Emscripten {
  class EmscriptenPaths extends System.Object {
    constructor();
    static GetShortPathName(path: string): string;
    static IsLinux(): boolean;
    static IsMac(): boolean;
    static IsWindows(): boolean;
    static SetupBuildToolsDir(): void;
    static SetupDataPath(): void;
    static SetupEditorToolsDir(): void;
    static readonly binaryen: string;
    static readonly binaryenDisExecutable: string;
    static readonly binaryenShellExecutable: string;
    static readonly buildToolsDir: string;
    static readonly cacheDirForIl2CppIncrementalBuildArtifacts: string;
    static readonly dataPath: string;
    static readonly editorToolsDir: string;
    static readonly emcc: string;
    static readonly emlink: string;
    static readonly emscriptenCache: string;
    static readonly emscriptenConfig: string;
    static readonly emscriptenDir: string;
    static readonly emscriptenPlatformSdkDir: string;
    static readonly llvmDir: string;
    static readonly nmExecutable: string;
    static readonly nodeExecutable: string;
    static readonly optimizer: string;
    static readonly packager: string;
    static readonly pythonExecutable: string;
    static readonly tempDirForEmscriptenCompiler: string;
    static readonly workingDirForEmscriptenCompiler: string;
  }
}
declare namespace UnityEditor.WebGL.Il2Cpp {
  class EmscriptenCompiler extends System.Object {
    constructor();
    static CleanupAndCreateEmscriptenDirs(): void;
    static GetCompilerFlags(exceptionSupport: boolean): string;
    static GetIncludeFullPaths(includePaths: any): any;
    static GetOutFileFullPath(outFileRelativePath: string): string;
    static LinkerFlags: string;
  }
}
declare namespace UnityEditor.WebGL.Il2Cpp {
  class WebGLIl2CppNativeCodeBuilder extends UnityEditorInternal.Il2CppNativeCodeBuilder {
    constructor(enableExceptionSupport: boolean);
    constructor(enableExceptionSupport: boolean, linkerFlags: string, libs: any, jsPre: any, jsLib: any);
    ConvertIncludesToFullPaths(relativeIncludePaths: any): any;
    ConvertOutputFileToFullPath(outputFileRelativePath: string): string;
    readonly AdditionalIl2CPPArguments: any;
    readonly CacheDirectory: string;
    readonly CompilerArchitecture: string;
    readonly CompilerFlags: string;
    readonly CompilerPlatform: string;
    readonly LinkerFlags: string;
    readonly SetsUpEnvironment: boolean;
  }
}
declare namespace UnityEditor.WebGL.Il2Cpp {
  class WebGlIl2CppPlatformProvider extends UnityEditorInternal.BaseIl2CppPlatformProvider {
    constructor(target: UnityEditor.BuildTarget, isDevelopmentBuild: boolean, dataDirectory: string, nativeLibraryFileName: string, _buildReport: UnityEditor.BuildReporting.BuildReport);
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    readonly buildReport: UnityEditor.BuildReporting.BuildReport;
    readonly developmentMode: boolean;
    readonly emitNullChecks: boolean;
    readonly enableArrayBoundsCheck: boolean;
    readonly enableStackTraces: boolean;
    readonly includePaths: string[];
    readonly libraryPaths: string[];
    readonly nativeLibraryFileName: string;
    readonly supportsEngineStripping: boolean;
    JsLib: any;
    JsPre: any;
    Libs: any;
    LinkerFlags: string;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class APIVersion extends System.Object {
    protected constructor();
    static Version: number;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class TargetExtension extends UnityEditor.Modules.DefaultPlatformSupportModule {
    constructor();
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    readonly JamTarget: string;
    readonly TargetName: string;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class WindowsDesktopStandalonePostProcessor extends DesktopStandalonePostProcessor {
    constructor();
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PostProcessScriptsOnly(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    SupportsInstallInBuildFolder(): boolean;
    SupportsLz4Compression(): boolean;
    SupportsScriptsOnlyBuild(): boolean;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class WindowsStandaloneBuildWindowExtension extends DesktopStandaloneBuildWindowExtension {
    constructor();
    ShowPlatformBuildOptions(): void;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class WindowsStandaloneIL2CppNativeCodeBuilder extends UnityEditorInternal.Il2CppNativeCodeBuilder {
    constructor(target: UnityEditor.BuildTarget);
    readonly CacheDirectory: string;
    readonly CompilerArchitecture: string;
    readonly CompilerPlatform: string;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class WindowsStandaloneIl2CppPlatformProvider extends UnityEditorInternal.BaseIl2CppPlatformProvider {
    protected constructor();
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    readonly developmentMode: boolean;
    readonly emitNullChecks: boolean;
    readonly enableStackTraces: boolean;
    readonly includePaths: string[];
    readonly nativeLibraryFileName: string;
    readonly staticLibraryExtension: string;
  }
}
declare namespace UnityEditor.WindowsStandalone {
  class UserBuildSettings extends System.Object {
    protected constructor();
    static copyPDBFiles: boolean;
  }
}
