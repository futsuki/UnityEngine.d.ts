  class AssemblyValidation {
    // constructors
    constructor();
    // methods
    static Validate(platform: any, userAssemblies: any, options: any[]): ValidationResult;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class AssemblyValidationRule {
    // constructors
    constructor(platform: any);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Platform: any;
    readonly TypeId: any;
    // fields
    Priority: number;
  }
  class AssetModificationProcessor {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class DesktopStandaloneBuildWindowExtension {
    // constructors
    constructor();
    // methods
    ShowPlatformBuildOptions(): void;
    EnabledBuildButton(): boolean;
    EnabledBuildAndRunButton(): boolean;
    ShowInternalPlatformBuildOptions(): void;
    ShouldDrawScriptDebuggingCheckbox(): boolean;
    ShouldDrawProfilerCheckbox(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShouldDrawExplicitNullCheckbox(): boolean;
    ShouldDrawExplicitDivideByZeroCheckbox(): boolean;
    ShouldDrawForceOptimizeScriptsCheckbox(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class DesktopStandalonePostProcessor {
    // constructors
    private constructor();
    // methods
    PostProcess(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
declare namespace DesktopStandalonePostProcessor {
  class ScriptingImplementations {
    // constructors
    constructor();
    // methods
    Supported(): UnityEditor.ScriptingImplementation[];
    Enabled(): UnityEditor.ScriptingImplementation[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
  class DesktopStandaloneUserBuildSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class GendarmeOptions {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    RuleSet: string;
    ConfigFilePath: string;
    UserAssemblies: string[];
  }
  class GendarmeValidationRule {
    // constructors
    private constructor();
    // methods
    Validate(userAssemblies: any, options: any[]): ValidationResult;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class ICompilerSettings {
    // constructors
    private constructor();
    // methods
    // properties
    readonly LibPaths: string[];
    readonly CompilerPath: string;
    readonly LinkerPath: string;
    readonly MachineSpecification: string;
    // fields
  }
  class INativeCompiler {
    // constructors
    private constructor();
    // methods
    CompileDynamicLibrary(outFile: string, sources: any, includePaths: any, libraries: any, libraryPaths: any): void;
    // properties
    // fields
  }
  class IValidationRule {
    // constructors
    private constructor();
    // methods
    Validate(userAssemblies: any, options: any[]): ValidationResult;
    // properties
    // fields
  }
declare namespace NativeCompiler {
  class Counter {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    index: number;
  }
}
  class NativeCompiler {
    // constructors
    private constructor();
    // methods
    CompileDynamicLibrary(outFile: string, sources: any, includePaths: any, libraries: any, libraryPaths: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
declare namespace ParticleSystemCurveEditor {
  class CurveData {
    // constructors
    constructor(name: string, displayName: any, min: UnityEditor.SerializedProperty, max: UnityEditor.SerializedProperty, color: any, signedRange: boolean, getAxisScalars: (() => any), setAxisScalars: ((any) => void), visible: boolean);
    // methods
    IsRegion(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Max: UnityEditor.SerializedProperty;
    m_Min: UnityEditor.SerializedProperty;
    m_SignedRange: boolean;
    m_Color: any;
    m_UniqueName: string;
    m_DisplayName: any;
    m_GetAxisScalarsCallback: (() => any);
    m_SetAxisScalarsCallback: ((any) => void);
    m_MaxId: number;
    m_MinId: number;
    m_Visible: boolean;
  }
}
  class ParticleSystemCurveEditor {
    // constructors
    constructor();
    // methods
    OnDisable(): void;
    OnDestroy(): void;
    Refresh(): void;
    Init(): void;
    IsAdded(min: UnityEditor.SerializedProperty, max: UnityEditor.SerializedProperty): boolean;
    IsAdded(max: UnityEditor.SerializedProperty): boolean;
    AddCurve(curveData: ParticleSystemCurveEditor.CurveData): void;
    RemoveCurve(max: UnityEditor.SerializedProperty): void;
    RemoveCurve(min: UnityEditor.SerializedProperty, max: UnityEditor.SerializedProperty): void;
    GetCurveColor(max: UnityEditor.SerializedProperty): any;
    AddCurveDataIfNeeded(curveName: string, curveData: ParticleSystemCurveEditor.CurveData): void;
    SetVisible(curveProp: UnityEditor.SerializedProperty, visible: boolean): void;
    GetAvailableColor(): any;
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static k_PresetsHeight: number;
  }
declare namespace ParticleSystemCurveEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    curveEditorBackground: any;
    curveSwatch: any;
    curveSwatchArea: any;
    minus: any;
    plus: any;
    yAxisHeader: any;
    optimizeCurveText: any;
    removeCurveText: any;
    curveLibraryPopup: any;
    presetTooltip: any;
  }
}
  class PatchImportSettingRecycleID {
    // constructors
    constructor();
    // methods
    static Patch(serializedObject: UnityEditor.SerializedObject, classID: number, oldName: string, newName: string): void;
    static PatchMultiple(serializedObject: UnityEditor.SerializedObject, classID: number, oldNames: string[], newNames: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class PostProcessStandalonePlayer {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
  class PreviewGUI {
    // constructors
    constructor();
    // methods
    static CycleButton(selected: number, options: any[]): number;
    static EndScrollView(): any;
    static Drag2D(scrollPosition: any, position: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
declare namespace PreviewGUI {
  class Styles {
    // constructors
    constructor();
    // methods
    static Init(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static preButton: any;
  }
}
  class SerializedStringTable {
    // constructors
    constructor();
    // methods
    Set(key: string, value: number): void;
    Set(key: string): void;
    Contains(key: string): boolean;
    Get(key: string): number;
    Remove(key: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly hashtable: any;
    readonly Length: number;
    // fields
  }
declare namespace UnityEditor {
  class AboutWindow {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    UpdateScroll(): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AboutWindowNames {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly nameChunks: string[];
    // fields
  }
}
declare namespace UnityEditor {
  class ActionOnDotNetUnhandledException {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SilentExit: UnityEditor.ActionOnDotNetUnhandledException;
    static Crash: UnityEditor.ActionOnDotNetUnhandledException;
  }
}
declare namespace UnityEditor {
  class ActiveEditorTracker {
    // constructors
    constructor();
    // methods
    Equals(o: any): boolean;
    GetHashCode(): number;
    Destroy(): void;
    GetVisible(index: number): number;
    SetVisible(index: number, visible: number): void;
    ClearDirty(): void;
    RebuildIfNecessary(): void;
    ForceRebuild(): void;
    VerifyModifiedMonoBehaviours(): void;
    static MakeCustomEditor(obj: any): UnityEditor.Editor;
    static HasCustomEditor(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly activeEditors: UnityEditor.Editor[];
    readonly isDirty: boolean;
    isLocked: boolean;
    inspectorMode: UnityEditor.InspectorMode;
    readonly hasComponentsWhichCannotBeMultiEdited: boolean;
    static readonly sharedTracker: UnityEditor.ActiveEditorTracker;
    // fields
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class ComponentElement {
    // constructors
    constructor(level: number, name: string, menuPath: string, commandString: string);
    // methods
    CompareTo(o: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly legacyContent: any;
    readonly name: string;
    // fields
    typeName: string;
    menuPath: string;
    isLegacy: boolean;
    level: number;
    content: any;
  }
}
declare namespace UnityEditor {
  class AddComponentWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class Element {
    // constructors
    constructor();
    // methods
    CompareTo(o: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    // fields
    level: number;
    content: any;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class GroupElement {
    // constructors
    constructor(level: number, name: string);
    // methods
    CompareTo(o: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    // fields
    scroll: any;
    selectedIndex: number;
    level: number;
    content: any;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class Language {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CSharp: UnityEditor.AddComponentWindow.Language;
    static JavaScript: UnityEditor.AddComponentWindow.Language;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class NewScriptElement {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    CanCreate(): boolean;
    Create(): void;
    TargetPath(): string;
    CompareTo(o: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    // fields
    scroll: any;
    selectedIndex: number;
    level: number;
    content: any;
  }
}
declare namespace UnityEditor.AddComponentWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    header: any;
    componentButton: any;
    groupButton: any;
    background: any;
    previewBackground: any;
    previewHeader: any;
    previewText: any;
    rightArrow: any;
    leftArrow: any;
  }
}
declare namespace UnityEditor {
  class AddShaderVariantWindow {
    // constructors
    constructor();
    // methods
    static ShowAddVariantWindow(data: UnityEditor.AddShaderVariantWindow.PopupData): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AddShaderVariantWindow {
  class PopupData {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    shader: any;
    collection: any;
    types: number[];
    keywords: string[];
  }
}
declare namespace UnityEditor.AddShaderVariantWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static sMenuItem: any;
    static sSeparator: any;
  }
}
declare namespace UnityEditor.AI {
  class NavMeshBuilder {
    // constructors
    constructor();
    // methods
    static BuildNavMesh(): void;
    static BuildNavMeshAsync(): void;
    static ClearAllNavMeshes(): void;
    static Cancel(): void;
    static BuildNavMeshForMultipleScenes(paths: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly navMeshSettingsObject: any;
    static readonly isRunning: boolean;
    // fields
  }
}
declare namespace UnityEditor.AI {
  class NavMeshVisualizationSettings {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static showNavigation: number;
    static showNavMesh: boolean;
    static showHeightMesh: boolean;
    static showNavMeshPortals: boolean;
    static showNavMeshLinks: boolean;
    static showProximityGrid: boolean;
    static showHeightMeshBVTree: boolean;
    static readonly hasHeightMesh: boolean;
    static showAgentPath: boolean;
    static showAgentPathInfo: boolean;
    static showAgentNeighbours: boolean;
    static showAgentWalls: boolean;
    static showAgentAvoidance: boolean;
    static showObstacleCarveHull: boolean;
    static readonly hasPendingAgentDebugInfo: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AInfo {
    // constructors
    constructor(gizmoEnabled: boolean, iconEnabled: boolean, flags: number, classID: number, scriptClass: string);
    // methods
    HasGizmo(): boolean;
    HasIcon(): boolean;
    CompareTo(obj: any): number;
    Equals(other: UnityEditor.AInfo): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_IconEnabled: boolean;
    m_GizmoEnabled: boolean;
    m_ClassID: number;
    m_ScriptClass: string;
    m_DisplayText: string;
    m_Flags: number;
  }
}
declare namespace UnityEditor.AInfo {
  class Flags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kHasIcon: UnityEditor.AInfo.Flags;
    static kHasGizmo: UnityEditor.AInfo.Flags;
  }
}
declare namespace UnityEditor {
  class AlphabeticalSort {
    // constructors
    constructor();
    // methods
    Compare(lhs: any, rhs: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AlphabeticalSorting {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor.Analytics {
  class AnalyticsSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static enabled: boolean;
    static testMode: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AnchoredJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AndroidBanner {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    width: number;
    height: number;
    banner: any;
  }
}
declare namespace UnityEditor {
  class AndroidBuildSubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Generic: UnityEditor.AndroidBuildSubtarget;
    static DXT: UnityEditor.AndroidBuildSubtarget;
    static PVRTC: UnityEditor.AndroidBuildSubtarget;
    static ATC: UnityEditor.AndroidBuildSubtarget;
    static ETC: UnityEditor.AndroidBuildSubtarget;
    static ETC2: UnityEditor.AndroidBuildSubtarget;
    static ASTC: UnityEditor.AndroidBuildSubtarget;
  }
}
declare namespace UnityEditor {
  class AndroidBuildSystem {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Internal: UnityEditor.AndroidBuildSystem;
    static Gradle: UnityEditor.AndroidBuildSystem;
    static ADT: UnityEditor.AndroidBuildSystem;
  }
}
declare namespace UnityEditor {
  class AndroidGamepadSupportLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SupportsDPad: UnityEditor.AndroidGamepadSupportLevel;
    static SupportsGamepad: UnityEditor.AndroidGamepadSupportLevel;
    static RequiresGamepad: UnityEditor.AndroidGamepadSupportLevel;
  }
}
declare namespace UnityEditor {
  class AndroidPreferredInstallLocation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Auto: UnityEditor.AndroidPreferredInstallLocation;
    static PreferExternal: UnityEditor.AndroidPreferredInstallLocation;
    static ForceInternal: UnityEditor.AndroidPreferredInstallLocation;
  }
}
declare namespace UnityEditor {
  class AndroidSdkVersions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AndroidApiLevel9: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel10: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel11: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel12: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel13: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel14: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel15: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel16: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel17: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel18: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel19: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel21: UnityEditor.AndroidSdkVersions;
    static AndroidApiLevel22: UnityEditor.AndroidSdkVersions;
  }
}
declare namespace UnityEditor {
  class AndroidShowActivityIndicatorOnLoading {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Large: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static InversedLarge: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static Small: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static InversedSmall: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    static DontShow: UnityEditor.AndroidShowActivityIndicatorOnLoading;
  }
}
declare namespace UnityEditor {
  class AndroidSplashScreenScale {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Center: UnityEditor.AndroidSplashScreenScale;
    static ScaleToFit: UnityEditor.AndroidSplashScreenScale;
    static ScaleToFill: UnityEditor.AndroidSplashScreenScale;
  }
}
declare namespace UnityEditor {
  class AndroidTargetDevice {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static FAT: UnityEditor.AndroidTargetDevice;
    static ARMv7: UnityEditor.AndroidTargetDevice;
    static x86: UnityEditor.AndroidTargetDevice;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimBool {
    // constructors
    constructor();
    constructor(value: boolean);
    constructor(callback: (() => void));
    constructor(value: boolean, callback: (() => void));
    // methods
    Fade(from: number, to: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly faded: number;
    readonly isAnimating: boolean;
    target: boolean;
    value: boolean;
    // fields
    speed: number;
    valueChanged: any;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimFloat {
    // constructors
    constructor(value: number);
    constructor(value: number, callback: (() => void));
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly isAnimating: boolean;
    target: number;
    value: number;
    // fields
    speed: number;
    valueChanged: any;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimQuaternion {
    // constructors
    constructor(value: any);
    constructor(value: any, callback: (() => void));
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly isAnimating: boolean;
    target: any;
    value: any;
    // fields
    speed: number;
    valueChanged: any;
  }
}
declare namespace UnityEditor.AnimatedValues {
  class AnimVector3 {
    // constructors
    constructor();
    constructor(value: any);
    constructor(value: any, callback: (() => void));
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly isAnimating: boolean;
    target: any;
    value: any;
    // fields
    speed: number;
    valueChanged: any;
  }
}
declare namespace UnityEditor {
  class AnimationClipCurveData {
    // constructors
    constructor();
    constructor(binding: UnityEditor.EditorCurveBinding);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    path: string;
    type: any;
    propertyName: string;
    curve: any;
  }
}
declare namespace UnityEditor {
  class AnimationClipEditor {
    // constructors
    constructor();
    // methods
    ShowRange(info: UnityEditor.AnimationClipInfoProperties): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ClipRangeGUI(startFrame: any, stopFrame: any, changedStart: any, changedStop: any, showAdditivePoseFrame: boolean, additivePoseframe: any, changedAdditivePoseframe: any): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mask: UnityEditor.Animations.AvatarMask;
    takeNames: string[];
    takeIndex: number;
    needsToGenerateClipInfo: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static s_EventTimelineMax: number;
  }
}
declare namespace UnityEditor.AnimationClipEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static StartFrame: any;
    static EndFrame: any;
    static HasAdditiveReferencePose: any;
    static AdditiveReferencePoseFrame: any;
    static LoopTime: any;
    static LoopPose: any;
    static LoopCycleOffset: any;
    static MotionCurves: any;
    static BakeIntoPoseOrientation: any;
    static OrientationOffsetY: any;
    static BasedUponOrientation: any;
    static BasedUponStartOrientation: any;
    static BasedUponRotationHumanOpt: any[];
    static BasedUponRotationOpt: any[];
    static BakeIntoPosePositionY: any;
    static PositionOffsetY: any;
    static BasedUponPositionY: any;
    static BasedUponStartPositionY: any;
    static BasedUponPositionYHumanOpt: any[];
    static BasedUponPositionYOpt: any[];
    static BakeIntoPosePositionXZ: any;
    static BasedUponPositionXZ: any;
    static BasedUponStartPositionXZ: any;
    static BasedUponPositionXZHumanOpt: any[];
    static BasedUponPositionXZOpt: any[];
    static Mirror: any;
    static Curves: any;
    static AddEventContent: any;
    static GreenLightIcon: any;
    static LightRimIcon: any;
    static OrangeLightIcon: any;
    static RedLightIcon: any;
    static PrevKeyContent: any;
    static NextKeyContent: any;
    static AddKeyframeContent: any;
  }
}
declare namespace UnityEditor {
  class AnimationClipInfoProperties {
    // constructors
    constructor(prop: UnityEditor.SerializedProperty);
    // methods
    MaskNeedsUpdating(): boolean;
    MaskFromClip(mask: UnityEditor.Animations.AvatarMask): void;
    MaskToClip(mask: UnityEditor.Animations.AvatarMask): void;
    ClearCurves(): void;
    GetCurveCount(): number;
    GetCurveProperty(index: number): UnityEditor.SerializedProperty;
    GetCurveName(index: number): string;
    SetCurveName(index: number, name: string): void;
    GetCurve(index: number): any;
    SetCurve(index: number, curveValue: any): void;
    AddCurve(): void;
    RemoveCurve(index: number): void;
    GetEvent(index: number): any;
    SetEvent(index: number, animationEvent: any): void;
    ClearEvents(): void;
    GetEventCount(): number;
    AddEvent(time: number): void;
    RemoveEvent(index: number): void;
    SetEvents(newEvents: any[]): void;
    GetEvents(): any[];
    AssignToPreviewClip(clip: any): void;
    ExtractFromPreviewClip(clip: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    name: string;
    takeName: string;
    firstFrame: number;
    lastFrame: number;
    wrapMode: number;
    loop: boolean;
    orientationOffsetY: number;
    level: number;
    cycleOffset: number;
    additiveReferencePoseFrame: number;
    hasAdditiveReferencePose: boolean;
    loopTime: boolean;
    loopBlend: boolean;
    loopBlendOrientation: boolean;
    loopBlendPositionY: boolean;
    loopBlendPositionXZ: boolean;
    keepOriginalOrientation: boolean;
    keepOriginalPositionY: boolean;
    keepOriginalPositionXZ: boolean;
    heightFromFeet: boolean;
    mirror: boolean;
    maskType: UnityEditor.ClipAnimationMaskType;
    readonly maskTypeProperty: UnityEditor.SerializedProperty;
    maskSource: UnityEditor.Animations.AvatarMask;
    readonly maskSourceProperty: UnityEditor.SerializedProperty;
    readonly bodyMaskProperty: UnityEditor.SerializedProperty;
    readonly transformMaskProperty: UnityEditor.SerializedProperty;
    // fields
  }
}
declare namespace UnityEditor {
  class AnimationClipSettings {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    additiveReferencePoseClip: any;
    additiveReferencePoseTime: number;
    startTime: number;
    stopTime: number;
    orientationOffsetY: number;
    level: number;
    cycleOffset: number;
    hasAdditiveReferencePose: boolean;
    loopTime: boolean;
    loopBlend: boolean;
    loopBlendOrientation: boolean;
    loopBlendPositionY: boolean;
    loopBlendPositionXZ: boolean;
    keepOriginalOrientation: boolean;
    keepOriginalPositionY: boolean;
    keepOriginalPositionXZ: boolean;
    heightFromFeet: boolean;
    mirror: boolean;
  }
}
declare namespace UnityEditor {
  class AnimationClipStats {
    // constructors
    private constructor();
    // methods
    Reset(): void;
    Combine(other: UnityEditor.AnimationClipStats): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    size: number;
    positionCurves: number;
    quaternionCurves: number;
    eulerCurves: number;
    scaleCurves: number;
    muscleCurves: number;
    genericCurves: number;
    pptrCurves: number;
    totalCurves: number;
    constantCurves: number;
    denseCurves: number;
    streamCurves: number;
  }
}
declare namespace UnityEditor {
  class AnimationCurveContextMenu {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AnimationEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AnimationEventTimeLine {
    // constructors
    constructor(owner: UnityEditor.EditorWindow);
    // methods
    AddEvent(time: number, rootGameObject: any, animationClip: any): void;
    DeselectAll(): void;
    EventLineGUI(rect: any, state: UnityEditorInternal.AnimationWindowState): void;
    DrawInstantTooltip(position: any): void;
    EventLineContextMenuAdd(obj: any): void;
    EventLineContextMenuEdit(obj: any): void;
    EventLineContextMenuDelete(obj: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AnimationEventTimeLine {
  class EventComparer {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AnimationEventTimeLine {
  class EventLineContextMenuObject {
    // constructors
    constructor(animated: any, clip: any, time: number, index: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Animated: any;
    m_Clip: any;
    m_Time: number;
    m_Index: number;
  }
}
declare namespace UnityEditor {
  class AnimationMode {
    // constructors
    constructor();
    // methods
    static IsPropertyAnimated(target: any, propertyPath: string): boolean;
    static StopAnimationMode(): void;
    static InAnimationMode(): boolean;
    static StartAnimationMode(): void;
    static BeginSampling(): void;
    static EndSampling(): void;
    static SampleAnimationClip(gameObject: any, clip: any, time: number): void;
    static AddPropertyModification(binding: UnityEditor.EditorCurveBinding, modification: UnityEditor.PropertyModification, keepPrefabOverride: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly animatedPropertyColor: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorCondition {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    mode: UnityEditor.Animations.AnimatorConditionMode;
    parameter: string;
    threshold: number;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorConditionMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static If: UnityEditor.Animations.AnimatorConditionMode;
    static IfNot: UnityEditor.Animations.AnimatorConditionMode;
    static Greater: UnityEditor.Animations.AnimatorConditionMode;
    static Less: UnityEditor.Animations.AnimatorConditionMode;
    static Equals: UnityEditor.Animations.AnimatorConditionMode;
    static NotEqual: UnityEditor.Animations.AnimatorConditionMode;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorController {
    // constructors
    constructor();
    // methods
    static SetAnimatorController(behavior: any, controller: UnityEditor.Animations.AnimatorController): void;
    MakeUniqueParameterName(name: string): string;
    MakeUniqueLayerName(name: string): string;
    static FindStateMachineBehaviourContext(behaviour: any): UnityEditor.Animations.StateMachineBehaviourContext[];
    static CreateStateMachineBehaviour(script: UnityEditor.MonoScript): number;
    AddEffectiveStateMachineBehaviour(stateMachineBehaviourType: any, state: UnityEditor.Animations.AnimatorState, layerIndex: number): any;
    AddLayer(name: string): void;
    AddLayer(layer: UnityEditor.Animations.AnimatorControllerLayer): void;
    RemoveLayer(index: number): void;
    AddParameter(name: string, type: any): void;
    AddParameter(paramater: any): void;
    RemoveParameter(index: number): void;
    RemoveParameter(parameter: any): void;
    AddMotion(motion: any): UnityEditor.Animations.AnimatorState;
    AddMotion(motion: any, layerIndex: number): UnityEditor.Animations.AnimatorState;
    CreateBlendTreeInController(name: string, tree: any): UnityEditor.Animations.AnimatorState;
    CreateBlendTreeInController(name: string, tree: any, layerIndex: number): UnityEditor.Animations.AnimatorState;
    static CreateAnimatorControllerAtPath(path: string): UnityEditor.Animations.AnimatorController;
    static AllocateAnimatorClip(name: string): any;
    static CreateAnimatorControllerAtPathWithClip(path: string, clip: any): UnityEditor.Animations.AnimatorController;
    SetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState, motion: any): void;
    SetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState, motion: any, layerIndex: number): void;
    GetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState): any;
    GetStateEffectiveMotion(state: UnityEditor.Animations.AnimatorState, layerIndex: number): any;
    SetStateEffectiveBehaviours(state: UnityEditor.Animations.AnimatorState, layerIndex: number, behaviours: any[]): void;
    GetStateEffectiveBehaviours(state: UnityEditor.Animations.AnimatorState, layerIndex: number): any[];
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    layers: UnityEditor.Animations.AnimatorControllerLayer[];
    parameters: any[];
    readonly animationClips: any[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorControllerLayer {
    // constructors
    constructor();
    // methods
    GetOverrideMotion(state: UnityEditor.Animations.AnimatorState): any;
    SetOverrideMotion(state: UnityEditor.Animations.AnimatorState, motion: any): void;
    GetOverrideBehaviours(state: UnityEditor.Animations.AnimatorState): any[];
    SetOverrideBehaviours(state: UnityEditor.Animations.AnimatorState, behaviours: any[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    name: string;
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
    avatarMask: UnityEditor.Animations.AvatarMask;
    blendingMode: UnityEditor.Animations.AnimatorLayerBlendingMode;
    syncedLayerIndex: number;
    iKPass: boolean;
    defaultWeight: number;
    syncedLayerAffectsTiming: boolean;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorDefaultTransition {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorLayerBlendingMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Override: UnityEditor.Animations.AnimatorLayerBlendingMode;
    static Additive: UnityEditor.Animations.AnimatorLayerBlendingMode;
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorState {
    // constructors
    constructor();
    // methods
    AddStateMachineBehaviour(stateMachineBehaviourType: any): any;
    AddTransition(transition: UnityEditor.Animations.AnimatorStateTransition): void;
    RemoveTransition(transition: UnityEditor.Animations.AnimatorStateTransition): void;
    AddTransition(destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(destinationState: UnityEditor.Animations.AnimatorState, defaultExitTime: boolean): UnityEditor.Animations.AnimatorStateTransition;
    AddTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine, defaultExitTime: boolean): UnityEditor.Animations.AnimatorStateTransition;
    AddExitTransition(): UnityEditor.Animations.AnimatorStateTransition;
    AddExitTransition(defaultExitTime: boolean): UnityEditor.Animations.AnimatorStateTransition;
    GetMotion(): any;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly nameHash: number;
    motion: any;
    speed: number;
    cycleOffset: number;
    mirror: boolean;
    iKOnFeet: boolean;
    writeDefaultValues: boolean;
    tag: string;
    speedParameter: string;
    cycleOffsetParameter: string;
    mirrorParameter: string;
    speedParameterActive: boolean;
    cycleOffsetParameterActive: boolean;
    mirrorParameterActive: boolean;
    transitions: UnityEditor.Animations.AnimatorStateTransition[];
    behaviours: any[];
    readonly uniqueName: string;
    readonly uniqueNameHash: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorStateMachine {
    // constructors
    constructor();
    // methods
    GetStateMachineTransitions(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition[];
    SetStateMachineTransitions(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, transitions: UnityEditor.Animations.AnimatorTransition[]): void;
    AddStateMachineBehaviour(stateMachineBehaviourType: any): any;
    MakeUniqueStateName(name: string): string;
    MakeUniqueStateMachineName(name: string): string;
    AddState(name: string): UnityEditor.Animations.AnimatorState;
    AddState(name: string, position: any): UnityEditor.Animations.AnimatorState;
    AddState(state: UnityEditor.Animations.AnimatorState, position: any): void;
    RemoveState(state: UnityEditor.Animations.AnimatorState): void;
    AddStateMachine(name: string): UnityEditor.Animations.AnimatorStateMachine;
    AddStateMachine(name: string, position: any): UnityEditor.Animations.AnimatorStateMachine;
    AddStateMachine(stateMachine: UnityEditor.Animations.AnimatorStateMachine, position: any): void;
    RemoveStateMachine(stateMachine: UnityEditor.Animations.AnimatorStateMachine): void;
    AddAnyStateTransition(destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorStateTransition;
    AddAnyStateTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorStateTransition;
    RemoveAnyStateTransition(transition: UnityEditor.Animations.AnimatorStateTransition): boolean;
    AddStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    AddStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    AddStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorTransition;
    AddStateMachineExitTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    RemoveStateMachineTransition(sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, transition: UnityEditor.Animations.AnimatorTransition): boolean;
    AddEntryTransition(destinationState: UnityEditor.Animations.AnimatorState): UnityEditor.Animations.AnimatorTransition;
    AddEntryTransition(destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine): UnityEditor.Animations.AnimatorTransition;
    RemoveEntryTransition(transition: UnityEditor.Animations.AnimatorTransition): boolean;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    states: UnityEditor.Animations.ChildAnimatorState[];
    stateMachines: UnityEditor.Animations.ChildAnimatorStateMachine[];
    defaultState: UnityEditor.Animations.AnimatorState;
    anyStatePosition: any;
    entryPosition: any;
    exitPosition: any;
    parentStateMachinePosition: any;
    anyStateTransitions: UnityEditor.Animations.AnimatorStateTransition[];
    entryTransitions: UnityEditor.Animations.AnimatorTransition[];
    behaviours: any[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorStateTransition {
    // constructors
    constructor();
    // methods
    GetDisplayName(source: any): string;
    AddCondition(mode: UnityEditor.Animations.AnimatorConditionMode, threshold: number, parameter: string): void;
    RemoveCondition(condition: UnityEditor.Animations.AnimatorCondition): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    duration: number;
    offset: number;
    interruptionSource: UnityEditor.Animations.TransitionInterruptionSource;
    orderedInterruption: boolean;
    exitTime: number;
    hasExitTime: boolean;
    hasFixedDuration: boolean;
    canTransitionToSelf: boolean;
    solo: boolean;
    mute: boolean;
    isExit: boolean;
    destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    destinationState: UnityEditor.Animations.AnimatorState;
    conditions: UnityEditor.Animations.AnimatorCondition[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorTransition {
    // constructors
    constructor();
    // methods
    GetDisplayName(source: any): string;
    AddCondition(mode: UnityEditor.Animations.AnimatorConditionMode, threshold: number, parameter: string): void;
    RemoveCondition(condition: UnityEditor.Animations.AnimatorCondition): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    solo: boolean;
    mute: boolean;
    isExit: boolean;
    destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    destinationState: UnityEditor.Animations.AnimatorState;
    conditions: UnityEditor.Animations.AnimatorCondition[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AnimatorTransitionBase {
    // constructors
    constructor();
    // methods
    GetDisplayName(source: any): string;
    AddCondition(mode: UnityEditor.Animations.AnimatorConditionMode, threshold: number, parameter: string): void;
    RemoveCondition(condition: UnityEditor.Animations.AnimatorCondition): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    solo: boolean;
    mute: boolean;
    isExit: boolean;
    destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine;
    destinationState: UnityEditor.Animations.AnimatorState;
    conditions: UnityEditor.Animations.AnimatorCondition[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AvatarMask {
    // constructors
    constructor();
    // methods
    GetHumanoidBodyPartActive(index: UnityEditor.Animations.AvatarMaskBodyPart): boolean;
    SetHumanoidBodyPartActive(index: UnityEditor.Animations.AvatarMaskBodyPart, value: boolean): void;
    GetTransformPath(index: number): string;
    SetTransformPath(index: number, path: string): void;
    GetTransformActive(index: number): boolean;
    SetTransformActive(index: number, value: boolean): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    transformCount: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class AvatarMaskBodyPart {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Root: UnityEditor.Animations.AvatarMaskBodyPart;
    static Body: UnityEditor.Animations.AvatarMaskBodyPart;
    static Head: UnityEditor.Animations.AvatarMaskBodyPart;
    static LeftLeg: UnityEditor.Animations.AvatarMaskBodyPart;
    static RightLeg: UnityEditor.Animations.AvatarMaskBodyPart;
    static LeftArm: UnityEditor.Animations.AvatarMaskBodyPart;
    static RightArm: UnityEditor.Animations.AvatarMaskBodyPart;
    static LeftFingers: UnityEditor.Animations.AvatarMaskBodyPart;
    static RightFingers: UnityEditor.Animations.AvatarMaskBodyPart;
    static LeftFootIK: UnityEditor.Animations.AvatarMaskBodyPart;
    static RightFootIK: UnityEditor.Animations.AvatarMaskBodyPart;
    static LeftHandIK: UnityEditor.Animations.AvatarMaskBodyPart;
    static RightHandIK: UnityEditor.Animations.AvatarMaskBodyPart;
    static LastBodyPart: UnityEditor.Animations.AvatarMaskBodyPart;
  }
}
declare namespace UnityEditor.Animations {
  class BlendTree {
    // constructors
    constructor();
    // methods
    AddChild(motion: any): void;
    AddChild(motion: any, position: any): void;
    AddChild(motion: any, threshold: number): void;
    RemoveChild(index: number): void;
    CreateBlendTreeChild(threshold: number): UnityEditor.Animations.BlendTree;
    CreateBlendTreeChild(position: any): UnityEditor.Animations.BlendTree;
    ValidateIfRetargetable(val: boolean): boolean;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    blendParameter: string;
    blendParameterY: string;
    blendType: UnityEditor.Animations.BlendTreeType;
    children: UnityEditor.Animations.ChildMotion[];
    useAutomaticThresholds: boolean;
    minThreshold: number;
    maxThreshold: number;
    readonly averageDuration: number;
    readonly averageAngularSpeed: number;
    readonly averageSpeed: any;
    readonly apparentSpeed: number;
    readonly isLooping: boolean;
    readonly legacy: boolean;
    readonly isHumanMotion: boolean;
    readonly isAnimatorMotion: boolean;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class BlendTreeType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Simple1D: UnityEditor.Animations.BlendTreeType;
    static SimpleDirectional2D: UnityEditor.Animations.BlendTreeType;
    static FreeformDirectional2D: UnityEditor.Animations.BlendTreeType;
    static FreeformCartesian2D: UnityEditor.Animations.BlendTreeType;
    static Direct: UnityEditor.Animations.BlendTreeType;
  }
}
declare namespace UnityEditor.Animations {
  class ChildAnimatorState {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    state: UnityEditor.Animations.AnimatorState;
    position: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class ChildAnimatorStateMachine {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    stateMachine: UnityEditor.Animations.AnimatorStateMachine;
    position: any;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class ChildMotion {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    motion: any;
    threshold: number;
    position: any;
    timeScale: number;
    cycleOffset: number;
    directBlendParameter: string;
    mirror: boolean;
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class MecanimUtilities {
    // constructors
    constructor();
    // methods
    static StateMachineRelativePath(parent: UnityEditor.Animations.AnimatorStateMachine, toFind: UnityEditor.Animations.AnimatorStateMachine, hierarchy: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Animations {
  class PushUndoIfNeeded {
    // constructors
    private constructor();
    // methods
    DoUndo(target: any, undoOperation: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    pushUndo: boolean;
    // fields
  }
}
declare namespace UnityEditor.Animations.PushUndoIfNeeded {
  class PushUndoIfNeededImpl {
    // constructors
    constructor(pushUndo: boolean);
    // methods
    DoUndo(target: any, undoOperation: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_PushUndo: boolean;
  }
}
declare namespace UnityEditor.Animations {
  class StateBehavioursPair {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    m_State: UnityEditor.Animations.AnimatorState;
    m_Behaviours: any[];
  }
}
declare namespace UnityEditor.Animations {
  class StateMachineBehaviourContext {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    animatorController: UnityEditor.Animations.AnimatorController;
    animatorObject: any;
    layerIndex: number;
  }
}
declare namespace UnityEditor.Animations {
  class StateMotionPair {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    m_State: UnityEditor.Animations.AnimatorState;
    m_Motion: any;
  }
}
declare namespace UnityEditor.Animations {
  class TransitionInterruptionSource {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.Animations.TransitionInterruptionSource;
    static Source: UnityEditor.Animations.TransitionInterruptionSource;
    static Destination: UnityEditor.Animations.TransitionInterruptionSource;
    static SourceThenDestination: UnityEditor.Animations.TransitionInterruptionSource;
    static DestinationThenSource: UnityEditor.Animations.TransitionInterruptionSource;
  }
}
declare namespace UnityEditor.AnimationUtility {
  class CurveModifiedType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CurveDeleted: UnityEditor.AnimationUtility.CurveModifiedType;
    static CurveModified: UnityEditor.AnimationUtility.CurveModifiedType;
    static ClipModified: UnityEditor.AnimationUtility.CurveModifiedType;
  }
}
declare namespace UnityEditor {
  class AnimationUtility {
    // constructors
    constructor();
    // methods
    static GetAnimationClips(component: any): any[];
    static GetAnimationClips(gameObject: any): any[];
    static SetAnimationClips(animation: any, clips: any[]): void;
    static GetAnimatableBindings(targetObject: any, root: any): UnityEditor.EditorCurveBinding[];
    static GetFloatValue(root: any, binding: UnityEditor.EditorCurveBinding, data: any): boolean;
    static GetEditorCurveValueType(root: any, binding: UnityEditor.EditorCurveBinding): any;
    static GetObjectReferenceValue(root: any, binding: UnityEditor.EditorCurveBinding, targetObject: any): boolean;
    static GetAnimatedObject(root: any, binding: UnityEditor.EditorCurveBinding): any;
    static PropertyModificationToEditorCurveBinding(modification: UnityEditor.PropertyModification, gameObject: any, binding: any): any;
    static GetCurveBindings(clip: any): UnityEditor.EditorCurveBinding[];
    static GetObjectReferenceCurveBindings(clip: any): UnityEditor.EditorCurveBinding[];
    static GetObjectReferenceCurve(clip: any, binding: UnityEditor.EditorCurveBinding): UnityEditor.ObjectReferenceKeyframe[];
    static GetEditorCurve(clip: any, binding: UnityEditor.EditorCurveBinding): any;
    static SetEditorCurve(clip: any, binding: UnityEditor.EditorCurveBinding, curve: any): void;
    static SetObjectReferenceCurve(clip: any, binding: UnityEditor.EditorCurveBinding, keyframes: UnityEditor.ObjectReferenceKeyframe[]): void;
    static SetKeyBroken(curve: any, index: number, broken: boolean): void;
    static SetKeyLeftTangentMode(curve: any, index: number, tangentMode: UnityEditor.AnimationUtility.TangentMode): void;
    static SetKeyRightTangentMode(curve: any, index: number, tangentMode: UnityEditor.AnimationUtility.TangentMode): void;
    static GetAllCurves(clip: any): UnityEditor.AnimationClipCurveData[];
    static GetAllCurves(clip: any, includeCurveData: boolean): UnityEditor.AnimationClipCurveData[];
    static GetFloatValue(root: any, relativePath: string, type: any, propertyName: string, data: any): boolean;
    static SetEditorCurve(clip: any, relativePath: string, type: any, propertyName: string, curve: any): void;
    static GetEditorCurve(clip: any, relativePath: string, type: any, propertyName: string): any;
    static GetAnimationEvents(clip: any): any[];
    static SetAnimationEvents(clip: any, events: any[]): void;
    static CalculateTransformPath(targetTransform: any, root: any): string;
    static GetAnimationClipSettings(clip: any): UnityEditor.AnimationClipSettings;
    static SetAnimationClipSettings(clip: any, srcClipInfo: UnityEditor.AnimationClipSettings): void;
    static SetAdditiveReferencePose(clip: any, referenceClip: any, time: number): void;
    static IsValidPolynomialCurve(curve: any): boolean;
    static ConstrainToPolynomialCurve(curve: any): void;
    static InAnimationMode(): boolean;
    static StartAnimationMode(objects: any[]): void;
    static StopAnimationMode(): void;
    static SetAnimationType(clip: any, type: UnityEditor.ModelImporterAnimationType): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static onCurveWasModified: ((any, UnityEditor.EditorCurveBinding, UnityEditor.AnimationUtility.CurveModifiedType) => void);
  }
}
declare namespace UnityEditor.AnimationUtility {
  class TangentMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Free: UnityEditor.AnimationUtility.TangentMode;
    static Auto: UnityEditor.AnimationUtility.TangentMode;
    static Linear: UnityEditor.AnimationUtility.TangentMode;
    static Constant: UnityEditor.AnimationUtility.TangentMode;
    static ClampedAuto: UnityEditor.AnimationUtility.TangentMode;
  }
}
declare namespace UnityEditor {
  class AnimationWindow {
    // constructors
    constructor();
    // methods
    static GetAllAnimationWindows(): any;
    ForceRefresh(): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    Update(): void;
    OnGUI(): void;
    OnSelectionChange(): void;
    OnFocus(): void;
    OnControllerChange(): void;
    OnLostFocus(): void;
    EditGameObject(gameObject: any): void;
    EditAnimationClip(animationClip: any, sourceObject: any): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AnimationWindowClipPopup {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    state: UnityEditorInternal.AnimationWindowState;
  }
}
declare namespace UnityEditor {
  class AnimationWindowEvent {
    // constructors
    constructor();
    // methods
    static CreateAndEdit(root: any, clip: any, time: number): UnityEditor.AnimationWindowEvent;
    static Edit(root: any, clip: any, eventIndex: number): UnityEditor.AnimationWindowEvent;
    static Edit(clipInfo: UnityEditor.AnimationClipInfoProperties, eventIndex: number): UnityEditor.AnimationWindowEvent;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    root: any;
    clip: any;
    clipInfo: UnityEditor.AnimationClipInfoProperties;
    eventIndex: number;
  }
}
declare namespace UnityEditor {
  class AnimationWindowEventInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    static OnEditAnimationEvent(awevt: UnityEditor.AnimationWindowEvent): void;
    static OnDisabledAnimationEvent(): void;
    static CollectSupportedMethods(awevt: UnityEditor.AnimationWindowEvent): any;
    static FormatEvent(root: any, evt: any): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AnimationWindowEventMethod {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    parameterType: any;
  }
}
declare namespace UnityEditor {
  class AnimationWindowManipulator {
    // constructors
    constructor();
    // methods
    HandleEvents(): void;
    IgnoreEvents(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    onStartDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    onDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    onEndDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    rect: any;
    controlID: number;
  }
}
declare namespace UnityEditor {
  class AnimationWindowStyles {
    // constructors
    constructor();
    // methods
    static Initialize(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static pointIcon: any;
    static playContent: any;
    static recordContent: any;
    static prevKeyContent: any;
    static nextKeyContent: any;
    static firstKeyContent: any;
    static lastKeyContent: any;
    static addKeyframeContent: any;
    static addEventContent: any;
    static noAnimatableObjectSelectedText: any;
    static formatIsMissing: any;
    static animatorAndAnimationClip: any;
    static animationClip: any;
    static create: any;
    static dopesheet: any;
    static curves: any;
    static samples: any;
    static createNewClip: any;
    static animatorOptimizedText: any;
    static playHead: any;
    static curveEditorBackground: any;
    static curveEditorLabelTickmarks: any;
    static eventBackground: any;
    static eventTooltip: any;
    static eventTooltipArrow: any;
    static keyframeBackground: any;
    static timelineTick: any;
    static dopeSheetKeyframe: any;
    static dopeSheetBackground: any;
    static popupCurveDropdown: any;
    static popupCurveEditorBackground: any;
    static popupCurveEditorSwatch: any;
    static popupCurveSwatchBackground: any;
    static miniToolbar: any;
    static miniToolbarButton: any;
    static toolbarLabel: any;
  }
}
declare namespace UnityEditor {
  class AnimatorInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AnimatorInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    applyRootMotion: any;
    updateMode: any;
    cullingMode: any;
  }
}
declare namespace UnityEditor {
  class AnimatorOverrideControllerInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AnimEditor {
    // constructors
    constructor();
    // methods
    static GetAllAnimationWindows(): any;
    OnAnimEditorGUI(parent: UnityEditor.EditorWindow, position: any): void;
    Update(): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    OnSelectionChanged(): void;
    OnStartLiveEdit(): void;
    OnEndLiveEdit(): void;
    OnLostFocus(): void;
    Repaint(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    locked: boolean;
    readonly stateDisabled: boolean;
    readonly state: UnityEditorInternal.AnimationWindowState;
    readonly selection: UnityEditorInternal.AnimationWindowSelection;
    selectedItem: UnityEditorInternal.AnimationWindowSelectionItem;
    policy: UnityEditorInternal.AnimationWindowPolicy;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class Annotation {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    iconEnabled: number;
    gizmoEnabled: number;
    flags: number;
    classID: number;
    scriptClass: string;
  }
}
declare namespace UnityEditor {
  class AnnotationUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AnnotationWindow {
    // constructors
    constructor();
    // methods
    MonoScriptIconChanged(monoScript: UnityEditor.MonoScript): void;
    static IconChanged(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AnnotationWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    toolbar: any;
    toggle: any;
    listEvenBg: any;
    listOddBg: any;
    listSectionHeaderBg: any;
    background: any;
    seperator: any;
    iconDropDown: any;
    listTextStyle: any;
    listHeaderStyle: any;
    texelWorldSizeStyle: any;
    columnHeaderStyle: any;
  }
}
declare namespace UnityEditor {
  class ApiCompatibilityLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NET_2_0: UnityEditor.ApiCompatibilityLevel;
    static NET_2_0_Subset: UnityEditor.ApiCompatibilityLevel;
  }
}
declare namespace UnityEditor {
  class AppStatusBar {
    // constructors
    constructor();
    // methods
    static StatusChanged(): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AreaEffector2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AreaManipulator {
    // constructors
    constructor(style: any, cursor: UnityEditor.MouseCursor);
    constructor(style: any);
    // methods
    OnGUI(widgetRect: any): void;
    HandleEvents(): void;
    IgnoreEvents(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    onStartDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    onDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    onEndDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    rect: any;
    controlID: number;
  }
}
declare namespace UnityEditor {
  class ArrayUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AscentCalculationMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Legacy2x: UnityEditor.AscentCalculationMode;
    static FaceAscender: UnityEditor.AscentCalculationMode;
    static FaceBoundingBox: UnityEditor.AscentCalculationMode;
  }
}
declare namespace UnityEditor.ASCommitWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    box: any;
    entrySelected: any;
    serverChangeCount: any;
    title: any;
    element: any;
    header: any;
    button: any;
    serverUpdateInfo: any;
    wwText: any;
    errorLabel: any;
    dropDown: any;
    bigButton: any;
  }
}
declare namespace UnityEditor {
  class ASCommitWindow {
    // constructors
    constructor(parentWin: UnityEditor.ASMainWindow, guidsToTransfer: string[]);
    // methods
    static MarkAllFolderDependenciesForDiscarding(pvState: UnityEditor.ParentViewState, anotherPvState: UnityEditor.ParentViewState): boolean;
    static SomethingDiscardableSelected(st: UnityEditor.ParentViewState): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ASConfigWindow {
    // constructors
    constructor(parent: UnityEditor.ASMainWindow);
    // methods
    DoGUI(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ASEditorBackend {
    // constructors
    constructor();
    // methods
    static DoAS(): void;
    static ShowASConflictResolutionsWindow(conflicting: string[]): void;
    static CommitItemsChanged(): void;
    static CBReinitCommitWindow(actionResult: number): void;
    static CBCommitFinished(actionResult: number): void;
    static CBOverviewsCommitFinished(actionResult: number): void;
    static CBReinitOnSuccess(actionResult: number): void;
    static CBReinitASMainWindow(): void;
    static CBDoDiscardChanges(actionResult: number): void;
    static CBInitUpdatePage(actionResult: number): void;
    static CBInitHistoryPage(actionResult: number): void;
    static CBInitOverviewPage(actionResult: number): void;
    static SettingsIfNeeded(): boolean;
    static SettingsAreValid(): boolean;
    static InitializeMaintBinding(): boolean;
    static Testing_SetActionFinishedCallback(klass: string, name: string): void;
    static Testing_SetActiveDatabase(host: string, port: number, projectName: string, dbName: string, user: string, pwd: string): void;
    static Testing_SetupDatabase(host: string, port: number, adminUser: string, adminPwd: string, user: string, pwd: string, projectName: string): boolean;
    static Testing_GetAllDatabaseNames(): string[];
    static Testing_SetConflictResolutionFunction(klass: string, fn: string): void;
    static Testing_DummyConflictResolutionFunction(conflicting: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly ASWin: UnityEditor.ASMainWindow;
    // fields
    static kServerSettingsFile: string;
    static kUserName: string;
    static kPassword: string;
    static kTimeout: string;
    static kSettingsType: string;
    static kConnectionSettings: string;
    static kPortNumber: string;
    static kServer: string;
    static kDatabaseName: string;
    static kProjectName: string;
    static kDefaultServerPort: number;
    static asMainWin: UnityEditor.ASMainWindow;
  }
}
declare namespace UnityEditor {
  class ASHistoryFileView {
    // constructors
    constructor();
    // methods
    SelectDeletedItem(guid: string): void;
    DoRecover(): void;
    GetSelectedDeletedItemGUIDs(): string[];
    GetAllDeletedItemGUIDs(): string[];
    FilterItems(filterText: string): void;
    DoDeletedItemsGUI(parentWin: UnityEditor.ASHistoryWindow, theRect: any, s: any, offset: number, endOffset: number, focused: boolean): void;
    DoGUI(parentWin: UnityEditor.ASHistoryWindow, theRect: any, focused: boolean): void;
    GetImplicitProjectViewSelection(): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    SelType: UnityEditor.ASHistoryFileView.SelectionType;
    // fields
    m_ScrollPosition: any;
  }
}
declare namespace UnityEditor.ASHistoryFileView {
  class SelectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ASHistoryFileView.SelectionType;
    static All: UnityEditor.ASHistoryFileView.SelectionType;
    static Items: UnityEditor.ASHistoryFileView.SelectionType;
    static DeletedItemsRoot: UnityEditor.ASHistoryFileView.SelectionType;
    static DeletedItems: UnityEditor.ASHistoryFileView.SelectionType;
  }
}
declare namespace UnityEditor.ASHistoryFileView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    foldout: any;
    insertion: any;
    label: any;
    ping: any;
    toolbarButton: any;
  }
}
declare namespace UnityEditor.ASHistoryWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    selected: any;
    lvHeader: any;
    button: any;
    label: any;
    descriptionLabel: any;
    entryEven: any;
    entryOdd: any;
    boldLabel: any;
    ping: any;
  }
}
declare namespace UnityEditor {
  class ASHistoryWindow {
    // constructors
    constructor(parent: UnityEditor.EditorWindow);
    // methods
    FilterItems(recreateGUIItems: boolean): void;
    DoLocalSelectionChange(): void;
    OnSelectionChange(): void;
    DoGUI(hasFocus: boolean): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ASHistoryWindow {
  class GUIHistoryListItem {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    colAuthor: any;
    colRevision: any;
    colDate: any;
    colDescription: any;
    assets: UnityEditor.ParentViewState;
    totalLineCount: number;
    boldAssets: boolean[];
    height: number;
    inFilter: boolean;
    collapsedItemCount: number;
    startShowingFrom: number;
  }
}
declare namespace UnityEditor.ASMainWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    groupBox: any;
    groupBoxNoMargin: any;
    contentBox: any;
    entrySelected: any;
    entryNormal: any;
    element: any;
    header: any;
    title: any;
    columnHeader: any;
    serverUpdateLog: any;
    serverUpdateInfo: any;
    smallButton: any;
    errorLabel: any;
    miniButton: any;
    button: any;
    largeButton: any;
    bigButton: any;
    entryEven: any;
    entryOdd: any;
    dropDown: any;
    toggle: any;
    badgeDelete: any;
    badgeMove: any;
    badgeNew: any;
    toggleSize: any;
  }
}
declare namespace UnityEditor {
  class ASMainWindow {
    // constructors
    constructor();
    // methods
    LogError(errorStr: string): void;
    DoDiscardChanges(lastActionsResult: boolean): void;
    ShowConflictResolutions(conflicting: string[]): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    UpdateNeedsRefresh(): boolean;
    CommitNeedsRefresh(): boolean;
    CommitItemsChanged(): void;
    RevertProject(toRevision: number, changesets: UnityEditor.Changeset[]): void;
    ShowHistory(): void;
    InitUpdatePage(lastActionsResult: boolean): void;
    DisplayedItemsChanged(): void;
    InitOverviewPage(lastActionsResult: boolean): void;
    InitHistoryPage(lastActionsResult: boolean): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    NeedsSetup: boolean;
    readonly Error: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static constants: UnityEditor.ASMainWindow.Constants;
    sharedCommits: UnityEditor.AssetsItem[];
    sharedDeletedItems: UnityEditor.AssetsItem[];
    sharedChangesets: UnityEditor.Changeset[];
    m_ShowSearch: UnityEditor.ASMainWindow.ShowSearchField;
    m_SearchToShow: UnityEditor.ASMainWindow.ShowSearchField;
    m_SearchField: UnityEditor.ASMainWindow.SearchField;
  }
}
declare namespace UnityEditor.ASMainWindow {
  class Page {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotInitialized: UnityEditor.ASMainWindow.Page;
    static Overview: UnityEditor.ASMainWindow.Page;
    static Update: UnityEditor.ASMainWindow.Page;
    static Commit: UnityEditor.ASMainWindow.Page;
    static History: UnityEditor.ASMainWindow.Page;
    static ServerConfig: UnityEditor.ASMainWindow.Page;
    static Admin: UnityEditor.ASMainWindow.Page;
  }
}
declare namespace UnityEditor.ASMainWindow {
  class SearchField {
    // constructors
    constructor();
    // methods
    DoGUI(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly FilterText: string;
    Show: boolean;
    // fields
  }
}
declare namespace UnityEditor.ASMainWindow {
  class ShowSearchField {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ASMainWindow.ShowSearchField;
    static ProjectView: UnityEditor.ASMainWindow.ShowSearchField;
    static HistoryList: UnityEditor.ASMainWindow.ShowSearchField;
  }
}
declare namespace UnityEditor {
  class AspectRatio {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AspectOthers: UnityEditor.AspectRatio;
    static Aspect4by3: UnityEditor.AspectRatio;
    static Aspect5by4: UnityEditor.AspectRatio;
    static Aspect16by10: UnityEditor.AspectRatio;
    static Aspect16by9: UnityEditor.AspectRatio;
  }
}
declare namespace UnityEditor {
  class ASRefreshState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static RefreshUpdate: UnityEditor.ASRefreshState;
    static RefreshCommit: UnityEditor.ASRefreshState;
  }
}
declare namespace UnityEditor {
  class AssembleEditorSkin {
    // constructors
    constructor();
    // methods
    static DoIt(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AssemblyHelper {
    // constructors
    constructor();
    // methods
    static CheckForAssemblyFileNameMismatch(assemblyPath: string): void;
    static GetNamesOfAssembliesLoadedInCurrentDomain(): string[];
    static FindLoadedAssemblyWithName(s: string): any;
    static ExtractInternalAssemblyName(path: string): string;
    static FindAssembliesReferencedBy(paths: string[], foldersToSearch: string[], target: UnityEditor.BuildTarget): string[];
    static FindAssembliesReferencedBy(path: string, foldersToSearch: string[], target: UnityEditor.BuildTarget): string[];
    static ExtractAllClassesThatInheritMonoBehaviourAndScriptableObject(path: string, classNamesArray: any, classNameSpacesArray: any): void;
    static ExtractAssemblyTypeInfo(targetPlatform: UnityEditor.BuildTarget, isEditor: boolean, assemblyPathName: string, searchDirs: string[]): UnityEditor.AssemblyTypeInfoGenerator.ClassInfo[];
    static IsManagedAssembly(file: string): boolean;
    static IsInternalAssembly(file: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssemblyReferenceChecker {
    // constructors
    constructor();
    // methods
    static AssemblyReferenceCheckerWithUpdateProgressAction(action: (() => void)): UnityEditor.AssemblyReferenceChecker;
    CollectReferencesFromRoots(dir: string, roots: any, collectMethods: boolean, progressValue: number, ignoreSystemDlls: boolean): void;
    CollectReferences(path: string, collectMethods: boolean, progressValue: number, ignoreSystemDlls: boolean): void;
    HasReferenceToMethod(methodName: string): boolean;
    HasDefinedMethod(methodName: string): boolean;
    HasReferenceToType(typeName: string): boolean;
    GetAssemblyDefinitions(): any[];
    GetAssemblyFileNames(): string[];
    WhoReferencesClass(klass: string, ignoreSystemDlls: boolean): string;
    static IsIgnoredSystemDll(name: string): boolean;
    static GetScriptsHaveMouseEvents(path: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly HasMouseEvent: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AssemblyReloadEvents {
    // constructors
    constructor();
    // methods
    static OnBeforeAssemblyReload(): void;
    static OnAfterAssemblyReload(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class AssemblyResolver {
    // constructors
    private constructor();
    // methods
    static WithSearchDirs(searchDirs: string[]): any;
    Resolve(name: any, parameters: any): any;
    AddSearchDirectory(directory: string): void;
    RemoveSearchDirectory(directory: string): void;
    GetSearchDirectories(): string[];
    Resolve(fullName: string): any;
    Resolve(fullName: string, parameters: any): any;
    Resolve(name: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class ClassInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    fields: UnityEditor.AssemblyTypeInfoGenerator.FieldInfo[];
  }
}
declare namespace UnityEditor {
  class AssemblyTypeInfoGenerator {
    // constructors
    constructor(assembly: string, searchDirs: string[]);
    constructor(assembly: string, resolver: any);
    // methods
    GatherClassInfo(): UnityEditor.AssemblyTypeInfoGenerator.ClassInfo[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly ClassInfoArray: UnityEditor.AssemblyTypeInfoGenerator.ClassInfo[];
    // fields
  }
}
declare namespace UnityEditor.AssemblyTypeInfoGenerator {
  class FieldInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    type: string;
  }
}
declare namespace UnityEditor.ASServerAdminWindow {
  class Action {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Main: UnityEditor.ASServerAdminWindow.Action;
    static CreateUser: UnityEditor.ASServerAdminWindow.Action;
    static SetPassword: UnityEditor.ASServerAdminWindow.Action;
    static CreateProject: UnityEditor.ASServerAdminWindow.Action;
    static ModifyUser: UnityEditor.ASServerAdminWindow.Action;
  }
}
declare namespace UnityEditor {
  class ASServerAdminWindow {
    // constructors
    constructor(parentWin: UnityEditor.ASMainWindow);
    // methods
    DoGUI(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetBundleBuild {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    assetBundleName: string;
    assetBundleVariant: string;
    assetNames: string[];
  }
}
declare namespace UnityEditor {
  class AssetBundleNameGUI {
    // constructors
    constructor();
    // methods
    OnAssetBundleNameGUI(assets: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssetBundleNameGUI {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static label: any;
    static popup: any;
    static textField: any;
    static cursorColor: any;
  }
}
declare namespace UnityEditor {
  class AssetDatabase {
    // constructors
    constructor();
    // methods
    static Contains(obj: any): boolean;
    static Contains(instanceID: number): boolean;
    static CreateFolder(parentFolder: string, newFolderName: string): string;
    static IsMainAsset(obj: any): boolean;
    static IsMainAsset(instanceID: number): boolean;
    static IsSubAsset(obj: any): boolean;
    static IsSubAsset(instanceID: number): boolean;
    static IsForeignAsset(obj: any): boolean;
    static IsForeignAsset(instanceID: number): boolean;
    static IsNativeAsset(obj: any): boolean;
    static IsNativeAsset(instanceID: number): boolean;
    static GenerateUniqueAssetPath(path: string): string;
    static StartAssetEditing(): void;
    static StopAssetEditing(): void;
    static ValidateMoveAsset(oldPath: string, newPath: string): string;
    static MoveAsset(oldPath: string, newPath: string): string;
    static RenameAsset(pathName: string, newName: string): string;
    static MoveAssetToTrash(path: string): boolean;
    static DeleteAsset(path: string): boolean;
    static ImportAsset(path: string, options: UnityEditor.ImportAssetOptions): void;
    static ImportAsset(path: string): void;
    static CopyAsset(path: string, newPath: string): boolean;
    static WriteImportSettingsIfDirty(path: string): boolean;
    static GetSubFolders(path: string): string[];
    static IsValidFolder(path: string): boolean;
    static CreateAsset(asset: any, path: string): void;
    static AddObjectToAsset(objectToAdd: any, path: string): void;
    static AddObjectToAsset(objectToAdd: any, assetObject: any): void;
    static GetAssetPath(assetObject: any): string;
    static GetAssetPath(instanceID: number): string;
    static GetAssetOrScenePath(assetObject: any): string;
    static GetTextMetaFilePathFromAssetPath(path: string): string;
    static GetAssetPathFromTextMetaFilePath(path: string): string;
    static LoadAssetAtPath(assetPath: string, type: any): any;
    static LoadMainAssetAtPath(assetPath: string): any;
    static GetMainAssetTypeAtPath(assetPath: string): any;
    static IsMainAssetAtPathLoaded(assetPath: string): boolean;
    static LoadAllAssetRepresentationsAtPath(assetPath: string): any[];
    static LoadAllAssetsAtPath(assetPath: string): any[];
    static GetAllAssetPaths(): string[];
    static RefreshDelayed(options: UnityEditor.ImportAssetOptions): void;
    static RefreshDelayed(): void;
    static Refresh(options: UnityEditor.ImportAssetOptions): void;
    static Refresh(): void;
    static OpenAsset(instanceID: number, lineNumber: number): boolean;
    static OpenAsset(instanceID: number): boolean;
    static OpenAsset(target: any): boolean;
    static OpenAsset(target: any, lineNumber: number): boolean;
    static OpenAsset(objects: any[]): boolean;
    static AssetPathToGUID(path: string): string;
    static GUIDToAssetPath(guid: string): string;
    static GetAssetDependencyHash(path: string): any;
    static SaveAssets(): void;
    static GetCachedIcon(path: string): any;
    static SetLabels(obj: any, labels: string[]): void;
    static GetLabels(obj: any): string[];
    static ClearLabels(obj: any): void;
    static GetAllAssetBundleNames(): string[];
    GetAssetBundleNames(): string[];
    static GetUnusedAssetBundleNames(): string[];
    static RemoveAssetBundleName(assetBundleName: string, forceRemove: boolean): boolean;
    static RemoveUnusedAssetBundleNames(): void;
    static GetAssetPathsFromAssetBundle(assetBundleName: string): string[];
    static GetAssetPathsFromAssetBundleAndAssetName(assetBundleName: string, assetName: string): string[];
    static GetAssetBundleDependencies(assetBundleName: string, recursive: boolean): string[];
    static GetDependencies(pathName: string): string[];
    static GetDependencies(pathName: string, recursive: boolean): string[];
    static GetDependencies(pathNames: string[]): string[];
    static GetDependencies(pathNames: string[], recursive: boolean): string[];
    static ExportPackage(assetPathName: string, fileName: string): void;
    static ExportPackage(assetPathName: string, fileName: string, flags: UnityEditor.ExportPackageOptions): void;
    static ExportPackage(assetPathNames: string[], fileName: string, flags: UnityEditor.ExportPackageOptions): void;
    static ExportPackage(assetPathNames: string[], fileName: string): void;
    static ImportPackage(packagePath: string, interactive: boolean): void;
    static IsOpenForEdit(assetObject: any): boolean;
    static IsOpenForEdit(assetOrMetaFilePath: string): boolean;
    static IsOpenForEdit(assetObject: any, message: any): boolean;
    static IsOpenForEdit(assetOrMetaFilePath: string, message: any): boolean;
    static IsMetaFileOpenForEdit(assetObject: any): boolean;
    static IsMetaFileOpenForEdit(assetObject: any, message: any): boolean;
    static GetBuiltinExtraResource(type: any, path: string): any;
    static GetTextMetaDataPathFromAssetPath(path: string): string;
    static FindAssets(filter: string): string[];
    static FindAssets(filter: string, searchInFolders: string[]): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetDeleteResult {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DidNotDelete: UnityEditor.AssetDeleteResult;
    static FailedDelete: UnityEditor.AssetDeleteResult;
    static DidDelete: UnityEditor.AssetDeleteResult;
  }
}
declare namespace UnityEditor {
  class AssetImporter {
    // constructors
    constructor();
    // methods
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    static GetAtPath(path: string): UnityEditor.AssetImporter;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetImporterInspector {
    // constructors
    private constructor();
    // methods
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetImporterTabbedEditor {
    // constructors
    private constructor();
    // methods
    OnInspectorGUI(): void;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    HasPreviewGUI(): boolean;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly activeEditor: UnityEditor.AssetImporterInspector;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetInspector {
    // constructors
    private constructor();
    // methods
    static Get(): UnityEditor.AssetInspector;
    OnAssetStatusGUI(r: any, id: number, target: any, style: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetModificationProcessor {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetModificationProcessorInternal {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssetModificationProcessorInternal {
  class FileMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Binary: UnityEditor.AssetModificationProcessorInternal.FileMode;
    static Text: UnityEditor.AssetModificationProcessorInternal.FileMode;
  }
}
declare namespace UnityEditor {
  class AssetMoveResult {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DidNotMove: UnityEditor.AssetMoveResult;
    static FailedMove: UnityEditor.AssetMoveResult;
    static DidMove: UnityEditor.AssetMoveResult;
  }
}
declare namespace UnityEditor {
  class AssetPopupBackend {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssetPostprocessingInternal {
  class CompareAssetImportPriority {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetPostprocessingInternal {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssetPostprocessingInternal {
  class PostprocessStack {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetPostprocessor {
    // constructors
    constructor();
    // methods
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: any): void;
    LogError(warning: string): void;
    LogError(warning: string, context: any): void;
    GetVersion(): number;
    GetPostprocessOrder(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    assetPath: string;
    readonly assetImporter: UnityEditor.AssetImporter;
    preview: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetPreview {
    // constructors
    constructor();
    // methods
    static GetAssetPreview(asset: any): any;
    static IsLoadingAssetPreview(instanceID: number): boolean;
    static IsLoadingAssetPreviews(): boolean;
    static SetPreviewTextureCacheSize(size: number): void;
    static GetMiniThumbnail(obj: any): any;
    static GetMiniTypeThumbnail(type: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetPreviewUpdater {
    // constructors
    constructor();
    // methods
    static CreatePreviewForAsset(obj: any, subAssets: any[], assetPath: string): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetSaveDialog {
    // constructors
    constructor();
    // methods
    static ShowWindow(inAssets: string[], assetsThatShouldBeSaved: any): void;
    static GetContentForAsset(path: string): any;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AssetSaveDialog {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    selected: any;
    box: any;
    button: any;
    saveSelected: any;
    saveAll: any;
    dontSave: any;
    close: any;
    buttonWidth: number;
  }
}
declare namespace UnityEditor {
  class AssetSelectionPopupMenu {
    // constructors
    constructor();
    // methods
    static Show(buttonRect: any, classNames: string[], initialSelectedInstanceID: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetServer {
    // constructors
    constructor();
    // methods
    static UpdateStartDownload(): boolean;
    static UpdateComplete(): boolean;
    static UpdateAbort(): boolean;
    static CommitBegin(changeDescription: string, candidates: string[]): boolean;
    static CommitStartUpload(): boolean;
    static UpdateGetDownloadProgress(): number;
    static CommitGetUploadProgress(): number;
    static GetProgressText(): string;
    static CommitComplete(): boolean;
    static CommitAbort(): boolean;
    static SetAssetServerError(error: string, isConnectionError: boolean): void;
    static GetAssetServerError(): string;
    static ClearAssetServerError(): void;
    static HasConnectionError(): boolean;
    static RevertVersion(assetGUID: string, version: number): boolean;
    static RecoverDeleted(assetGUID: string, version: number, name: string, parentGUID: string): boolean;
    static CompareFiles(guids: string[], selection: UnityEditor.CompareInfo[]): boolean;
    static GetAllRootGUIDs(): string[];
    static GetRootGUID(): string;
    static CollectAllChildren(guid: string, collection: string[]): string[];
    static GetAssetPathName(guid: string): string;
    static RemoveMaintErrorsFromConsole(): void;
    static GetDownloadResolution(guid: string): UnityEditor.DownloadResolution;
    static GetPathNameConflict(guid: string): string;
    static HasDeletionConflict(guid: string): boolean;
    static GetNameConflictResolution(guid: string): UnityEditor.NameConflictResolution;
    static SetDownloadResolution(guid: string, res: UnityEditor.DownloadResolution): void;
    static SetDownloadResolutionInt(guid: string, res: number): void;
    static SetNameConflictResolution(guid: string, res: UnityEditor.NameConflictResolution): void;
    static UnityGUID(a: number, b: number, c: number, d: number): string;
    static BuildExportPackageAssetListAssetsItems(guids: string[], dependencies: boolean): UnityEditor.AssetsItem[];
    static GetChangedAssetsItems(): UnityEditor.AssetsItem[];
    static GetLocalDeletedItems(): UnityEditor.AssetsItem[];
    static IsItemDeleted(guid: string): boolean;
    static GetDeletedItemPathAndName(guid: string): string;
    static GetHistorySelected(guids: string[]): UnityEditor.Changeset[];
    static GetHistory(downToRevision: number): UnityEditor.Changeset[];
    static GetHistory(): UnityEditor.Changeset[];
    static GetNewItems(): UnityEditor.Changeset[];
    static SetProjectName(name: string): void;
    static Initialize(userName: string, connectionString: string, timeout: number): void;
    static CollectSelection(): string[];
    static CollectDeepSelection(): string[];
    static AssetIsDir(guid: string): boolean;
    static DoUpdateOnNextTick(forceShowConflictResolutions: boolean, backendFunctionForConflictResolutions: string): void;
    static DoCommitOnNextTick(description: string, guids: string[]): void;
    static DoUpdateStatusOnNextTick(): void;
    static DoRefreshAssetsOnNextTick(): void;
    static DoRefreshAssetsAndUpdateStatusOnNextTick(): void;
    static GetDatabaseName(server: string, user: string, password: string, port: string, projectName: string): string;
    static GetParentGUID(itemGUID: string, changeset: number): string;
    static GetServerDeletedItems(): UnityEditor.DeletedAsset[];
    static DoRecoverOnNextTick(assets: UnityEditor.DeletedAsset[]): void;
    static DoRevertOnNextTick(changeset: number, guid: string): void;
    static SetStickyChangeset(changeset: number): void;
    static AdminSetCredentials(server: string, port: number, user: string, password: string): void;
    static AdminRefreshDatabases(): UnityEditor.MaintDatabaseRecord[];
    static AdminGetUsers(databaseName: string): UnityEditor.MaintUserRecord[];
    static AdminChangePassword(userName: string, newPassword: string): void;
    static AdminCreateDB(newProjectName: string, copyFromProjectName: string): number;
    static AdminCreateDB(newProjectName: string): number;
    static AdminDeleteDB(projectName: string): number;
    static AdminCreateUser(userName: string, userFullName: string, userEmail: string, userPassword: string): number;
    static AdminDeleteUser(userName: string): number;
    static AdminSetUserEnabled(databaseName: string, userName: string, fullName: string, email: string, enabled: number): boolean;
    static AdminModifyUserInfo(databaseName: string, userName: string, fullName: string, email: string): boolean;
    static IsGUIDValid(guid: string): number;
    static GetServerItemChangeset(guid: string, changeset: number): number;
    static GetWorkingItemChangeset(guid: string): number;
    static AssetIsBinaryByGUID(guid: string): boolean;
    static IsAssetBinary(name: string): number;
    static CollectAllDependencies(selection: string[]): string[];
    static GetLastCommitMessage(): string;
    static SetLastCommitMessage(message: string): void;
    static GetCommitSelectionGUIDs(): string[];
    static SetCommitSelectionGUIDs(guids: string[]): void;
    static ClearCommitPersistentData(): void;
    static IsControllerBusy(): number;
    static GetLastControllerActionResult(): number;
    static SetAfterActionFinishedCallback(className: string, functionName: string): void;
    static SetSelectionFromGUID(guid: string): void;
    static IsAssetAvailable(guid: string): number;
    static SetSelectionFromGUIDs(guids: string[]): void;
    static GetRefreshUpdate(): boolean;
    static GetRefreshCommit(): boolean;
    static ClearRefreshUpdate(): void;
    static ClearRefreshCommit(): void;
    static CheckForServerUpdates(): void;
    static GetCachesInitialized(): number;
    static IsConstantGUID(guid: string): number;
    static Clear(): void;
    static SaveString(strName: string, strValue: string): void;
    static GetAndRemoveString(strName: string): string;
    static GetString(strName: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetServerConfig {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    connectionSettings: string;
    server: string;
    portNumber: number;
    timeout: number;
    userName: string;
    dbName: string;
    projectName: string;
    settingsType: string;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetsItem {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    guid: string;
    pathName: string;
    message: string;
    exportedAssetPath: string;
    guidFolder: string;
    enabled: number;
    assetIsDir: number;
    changeFlags: number;
    previewPath: string;
    exists: number;
  }
}
declare namespace UnityEditor {
  class AssetStatus {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Calculating: UnityEditor.AssetStatus;
    static ClientOnly: UnityEditor.AssetStatus;
    static ServerOnly: UnityEditor.AssetStatus;
    static Unchanged: UnityEditor.AssetStatus;
    static Conflict: UnityEditor.AssetStatus;
    static Same: UnityEditor.AssetStatus;
    static NewVersionAvailable: UnityEditor.AssetStatus;
    static NewLocalVersion: UnityEditor.AssetStatus;
    static RestoredFromTrash: UnityEditor.AssetStatus;
    static Ignored: UnityEditor.AssetStatus;
    static BadState: UnityEditor.AssetStatus;
  }
}
declare namespace UnityEditor {
  class AssetStoreAsset {
    // constructors
    constructor();
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Preview: any;
    readonly HasLivePreview: boolean;
    // fields
    id: number;
    name: string;
    displayName: string;
    staticPreviewURL: string;
    dynamicPreviewURL: string;
    className: string;
    price: string;
    packageID: number;
    previewImage: any;
  }
}
declare namespace UnityEditor.AssetStoreAsset {
  class PreviewInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    packageName: string;
    packageShortUrl: string;
    packageSize: number;
    packageVersion: string;
    packageRating: number;
    packageAssetCount: number;
    isPurchased: boolean;
    isDownloadable: boolean;
    publisherName: string;
    encryptionKey: string;
    packageUrl: string;
    buildProgress: number;
    downloadProgress: number;
    categoryName: string;
  }
}
declare namespace UnityEditor {
  class AssetStoreAssetInspector {
    // constructors
    constructor();
    // methods
    OnDownloadProgress(id: string, message: string, bytes: number, total: number): void;
    Update(): void;
    OnInspectorGUI(): void;
    static OpenItemInAssetStore(activeAsset: UnityEditor.AssetStoreAsset): void;
    HasPreviewGUI(): boolean;
    OnEnable(): void;
    OnDisable(): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    GetPreviewTitle(): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly Instance: UnityEditor.AssetStoreAssetInspector;
    static OfflineNoticeEnabled: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AssetStoreAssetInspector {
  class PaymentAvailability {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BasketNotEmpty: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    static ServiceDisabled: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    static AnonymousUser: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
    static Ok: UnityEditor.AssetStoreAssetInspector.PaymentAvailability;
  }
}
declare namespace UnityEditor.AssetStoreAssetInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    link: any;
    assetStoreLogo: any;
  }
}
declare namespace UnityEditor {
  class AssetStoreAssetSelection {
    // constructors
    private constructor();
    // methods
    static AddAsset(searchResult: UnityEditor.AssetStoreAsset, placeholderPreviewImage: any): void;
    static RefreshFromServer(callback: (() => void)): void;
    static ContainsAsset(id: number): boolean;
    static Clear(): void;
    static GetFirstAsset(): UnityEditor.AssetStoreAsset;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly Count: number;
    static readonly Empty: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetStoreAssetsInfo {
    // constructors
    private constructor();
    // methods
    Parse(response: UnityEditor.AssetStoreResponse): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor.AssetStoreAssetsInfo {
  class Status {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BasketNotEmpty: UnityEditor.AssetStoreAssetsInfo.Status;
    static ServiceDisabled: UnityEditor.AssetStoreAssetsInfo.Status;
    static AnonymousUser: UnityEditor.AssetStoreAssetsInfo.Status;
    static Ok: UnityEditor.AssetStoreAssetsInfo.Status;
  }
}
declare namespace UnityEditor {
  class AssetStoreClient {
    // constructors
    constructor();
    // methods
    static LoggedIn(): boolean;
    static LoggedOut(): boolean;
    static LoginError(): boolean;
    static LoginInProgress(): boolean;
    static Logout(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly LoginErrorMessage: string;
    static readonly HasSavedSessionID: boolean;
    static readonly HasActiveSessionID: boolean;
    static RememberSession: boolean;
    // fields
  }
}
declare namespace UnityEditor.AssetStoreClient {
  class LoginState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static LOGGED_OUT: UnityEditor.AssetStoreClient.LoginState;
    static IN_PROGRESS: UnityEditor.AssetStoreClient.LoginState;
    static LOGGED_IN: UnityEditor.AssetStoreClient.LoginState;
    static LOGIN_ERROR: UnityEditor.AssetStoreClient.LoginState;
  }
}
declare namespace UnityEditor.AssetStoreClient {
  class SearchCount {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    offset: number;
    limit: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreContext {
    // constructors
    constructor();
    // methods
    static SessionSetString(key: string, value: string): void;
    static SessionGetString(key: string): string;
    static SessionRemoveString(key: string): void;
    static SessionHasString(key: string): boolean;
    static GetInstance(): UnityEditor.AssetStoreContext;
    GetInitialOpenURL(): string;
    GetAuthToken(): string;
    GetLicenseFlags(): number[];
    GetString(key: string): string;
    GetInt(key: string): number;
    GetFloat(key: string): number;
    SetString(key: string, value: string): void;
    SetInt(key: string, value: number): void;
    SetFloat(key: string, value: number): void;
    HasKey(key: string): boolean;
    DeleteKey(key: string): void;
    GetSkinIndex(): number;
    GetDockedStatus(): boolean;
    OpenPackage(id: string): boolean;
    OpenPackage(id: string, action: string): boolean;
    static OpenPackageInternal(id: string): boolean;
    OpenBrowser(url: string): void;
    Download(package_: UnityEditor.AssetStoreContext.Package, downloadInfo: UnityEditor.AssetStoreContext.DownloadInfo): void;
    static Download(package_id: string, url: string, key: string, package_name: string, publisher_name: string, category_name: string, doneCallback: ((string, string, number, number) => void)): void;
    static PackageStorePath(publisher_name: string, category_name: string, package_name: string, package_id: string, url: string): string[];
    GetPackageList(): UnityEditor.AssetStoreContext.PackageList;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class DownloadInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    url: string;
    key: string;
    id: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class LabelAndId {
    // constructors
    constructor();
    // methods
    Initialize(json: UnityEditorInternal.JSONValue): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    label: string;
    id: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class Link {
    // constructors
    constructor();
    // methods
    Initialize(json: UnityEditorInternal.JSONValue): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    type: string;
    id: string;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class Package {
    // constructors
    constructor();
    // methods
    Initialize(json: UnityEditorInternal.JSONValue): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    title: string;
    id: string;
    version: string;
    version_id: string;
    local_icon: string;
    local_path: string;
    pubdate: string;
    description: string;
    publisher: UnityEditor.AssetStoreContext.LabelAndId;
    category: UnityEditor.AssetStoreContext.LabelAndId;
    link: UnityEditor.AssetStoreContext.Link;
  }
}
declare namespace UnityEditor.AssetStoreContext {
  class PackageList {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    results: UnityEditor.AssetStoreContext.Package[];
  }
}
declare namespace UnityEditor {
  class AssetStoreInstaBuyWindow {
    // constructors
    constructor();
    // methods
    static ShowAssetStoreInstaBuyWindow(asset: UnityEditor.AssetStoreAsset, purchaseMessage: string, paymentMethodCard: string, paymentMethodExpire: string, priceText: string): UnityEditor.AssetStoreInstaBuyWindow;
    static ShowAssetStoreInstaBuyWindowBuilding(asset: UnityEditor.AssetStoreAsset): void;
    OnInspectorUpdate(): void;
    OnDisable(): void;
    OnDownloadProgress(id: string, message: string, bytes: number, total: number): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AssetStoreInstaBuyWindow {
  class PurchaseStatus {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Init: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static InProgress: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Declined: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Complete: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static StartBuild: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Building: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
    static Downloading: UnityEditor.AssetStoreInstaBuyWindow.PurchaseStatus;
  }
}
declare namespace UnityEditor {
  class AssetStoreLoginWindow {
    // constructors
    constructor();
    // methods
    static Login(loginReason: string, callback: ((string) => void)): void;
    static Logout(): void;
    static ShowAssetStoreLoginWindow(loginReason: string, callback: ((string) => void)): void;
    OnDisable(): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly IsLoggedIn: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AssetStoreLoginWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    link: any;
  }
}
declare namespace UnityEditor.AssetStorePreviewManager {
  class CachedAssetStoreImage {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly color: any;
    // fields
    image: any;
    lastUsed: number;
    lastFetched: number;
    requestedWidth: number;
    label: string;
  }
}
declare namespace UnityEditor {
  class AssetStorePreviewManager {
    // constructors
    private constructor();
    // methods
    static StatsString(): string;
    static TextureFromUrl(url: string, label: string, textureSize: number, labelStyle: any, iconStyle: any, onlyCached: boolean): UnityEditor.AssetStorePreviewManager.CachedAssetStoreImage;
    static CheckRepaint(): boolean;
    static AbortSize(size: number): void;
    static AbortOlderThan(timestamp: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static MaxCachedImages: number;
    static readonly CacheFull: boolean;
    static readonly Downloading: number;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetStoreResponse {
    // constructors
    constructor();
    // methods
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly failed: boolean;
    readonly message: string;
    // fields
    dict: any;
    ok: boolean;
  }
}
declare namespace UnityEditor {
  class AssetStoreSearchResults {
    // constructors
    constructor(c: ((UnityEditor.AssetStoreSearchResults) => void));
    // methods
    Parse(response: UnityEditor.AssetStoreResponse): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor.AssetStoreSearchResults {
  class Group {
    // constructors
    private constructor();
    // methods
    static Create(): UnityEditor.AssetStoreSearchResults.Group;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    assets: any;
    totalFound: number;
    label: string;
    name: string;
    offset: number;
    limit: number;
  }
}
declare namespace UnityEditor {
  class AssetStoreUtils {
    // constructors
    constructor();
    // methods
    static Download(id: string, url: string, destination: string[], key: string, jsonData: string, resumeOK: boolean, doneCallback: ((string, string, number, number) => void)): void;
    static Download(id: string, url: string, destination: string[], key: string, jsonData: string, resumeOK: boolean): void;
    static CheckDownload(id: string, url: string, destination: string[], key: string): string;
    static RegisterDownloadDelegate(d: any): void;
    static UnRegisterDownloadDelegate(d: any): void;
    static GetLoaderPath(): string;
    static UpdatePreloading(): void;
    static GetOfflinePath(): string;
    static GetAssetStoreUrl(): string;
    static GetAssetStoreSearchUrl(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetStoreWindow {
    // constructors
    constructor();
    // methods
    static OpenURL(url: string): void;
    static Init(): UnityEditor.AssetStoreWindow;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Logout(): void;
    Reload(): void;
    OnLoadError(url: string): void;
    OnInitScripting(): void;
    OnOpenExternalLink(url: string): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDownloadProgress(id: string, message: string, bytes: number, total: number): void;
    OnGUI(): void;
    UpdateDockStatusIfNeeded(): void;
    ToggleMaximize(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnBecameInvisible(): void;
    OnDestroy(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly initialized: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetsTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, rootInstanceID: number, showRootItem: boolean, rootItemIsCollapsable: boolean);
    // methods
    FetchData(): void;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    GetInsertAfterItemIDForNewItem(newName: string, parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, isCreatingNewFolder: boolean, foldersFirst: boolean): number;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    RevealItem(itemID: number): void;
    FindItem(itemID: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    InitIfNeeded(): void;
    GetRows(): any;
    OnInitialize(): void;
    ReloadData(): void;
    IsRevealed(id: number): boolean;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    foldersOnly: boolean;
    foldersFirst: boolean;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.AssetsTreeViewDataSource {
  class FolderTreeItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor.AssetsTreeViewDataSource {
  class NonFolderTreeItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor.AssetsTreeViewDataSource {
  class SemiNumericDisplayNameListComparer {
    // constructors
    constructor();
    // methods
    Compare(x: UnityEditor.IMGUI.Controls.TreeViewItem, y: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AssetsTreeViewDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AssetsTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    BeginRowGUI(): void;
    BeginCreateNewAsset(instanceID: number, endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, pathName: string, icon: any, resourceFile: string): void;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.ASUpdateConflictResolveWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ButtonLeft: any;
    ButtonMiddle: any;
    ButtonRight: any;
    EntrySelected: any;
    EntryNormal: any;
    lvHeader: any;
    selected: any;
    background: any;
    button: any;
    bigButton: any;
  }
}
declare namespace UnityEditor {
  class ASUpdateConflictResolveWindow {
    // constructors
    constructor(conflicting: string[]);
    // methods
    GetDownloadConflicts(): string[];
    GetNameConflicts(): string[];
    CanContinue(): boolean;
    OnSelectionChange(parentWin: UnityEditor.ASUpdateWindow): void;
    DoGUI(parentWin: UnityEditor.ASUpdateWindow): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ASUpdateWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    box: any;
    entrySelected: any;
    entryNormal: any;
    serverUpdateLog: any;
    serverChangeCount: any;
    title: any;
    element: any;
    header: any;
    serverUpdateInfo: any;
    button: any;
    errorLabel: any;
    bigButton: any;
    wwText: any;
    entryEven: any;
    entryOdd: any;
  }
}
declare namespace UnityEditor {
  class ASUpdateWindow {
    // constructors
    constructor(parentWin: UnityEditor.ASMainWindow, changesets: UnityEditor.Changeset[]);
    // methods
    OnSelectionChange(): void;
    GetSelectedRevisionNumber(): number;
    SetSelectedRevisionLine(selIndex: number): void;
    GetGUIDs(): string[];
    DoUpdate(afterResolvingConflicts: boolean): boolean;
    ShowConflictResolutions(conflicting: string[]): void;
    UpdateGUI(): void;
    Repaint(): void;
    DoGUI(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly ShowingConflicts: boolean;
    readonly CanContinue: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AsyncHTTPClient {
    // constructors
    constructor(_toUrl: string);
    constructor(_toUrl: string, _method: string);
    // methods
    static AbortByTag(tag: string): void;
    static CurlRequestCheck(): void;
    Abort(): void;
    IsAborted(): boolean;
    IsDone(): boolean;
    static IsDone(state: UnityEditor.AsyncHTTPClient.State): boolean;
    IsSuccess(): boolean;
    static IsSuccess(state: UnityEditor.AsyncHTTPClient.State): boolean;
    Begin(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly url: string;
    readonly text: string;
    readonly bytes: number[];
    readonly texture: any;
    readonly state: UnityEditor.AsyncHTTPClient.State;
    readonly responseCode: number;
    tag: string;
    // fields
    statusCallback: ((UnityEditor.AsyncHTTPClient.State, number, number) => void);
    doneCallback: ((UnityEditor.AsyncHTTPClient) => void);
    header: any;
  }
}
declare namespace UnityEditor.AsyncHTTPClient {
  class State {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static INIT: UnityEditor.AsyncHTTPClient.State;
    static CONNECTING: UnityEditor.AsyncHTTPClient.State;
    static CONNECTED: UnityEditor.AsyncHTTPClient.State;
    static UPLOADING: UnityEditor.AsyncHTTPClient.State;
    static DOWNLOADING: UnityEditor.AsyncHTTPClient.State;
    static CONFIRMING: UnityEditor.AsyncHTTPClient.State;
    static DONE_OK: UnityEditor.AsyncHTTPClient.State;
    static DONE_FAILED: UnityEditor.AsyncHTTPClient.State;
    static ABORTED: UnityEditor.AsyncHTTPClient.State;
    static TIMEOUT: UnityEditor.AsyncHTTPClient.State;
  }
}
declare namespace UnityEditor {
  class AsyncProgressBar {
    // constructors
    constructor();
    // methods
    static Display(progressInfo: string, progress: number): void;
    static Clear(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly progress: number;
    static readonly progressInfo: string;
    static readonly isShowing: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AttachProfilerUI {
    // constructors
    constructor();
    // methods
    IsEditor(): boolean;
    GetConnectedProfiler(): string;
    static DirectIPConnect(ip: string): void;
    static DirectURLConnect(url: string): void;
    OnGUILayout(window: UnityEditor.EditorWindow): void;
    OnGUI(connectRect: any, profilerLabel: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AttributeHelper {
  class CompareMenuIndex {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AttributeHelper {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AttributeHelper {
  class MonoCreateAssetItem {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    menuItem: string;
    fileName: string;
    order: number;
    type: any;
  }
}
declare namespace UnityEditor.AttributeHelper {
  class MonoGizmoMethod {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    drawGizmo: any;
    drawnType: any;
    options: number;
  }
}
declare namespace UnityEditor.AttributeHelper {
  class MonoMenuItem {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    menuItem: string;
    index: number;
    priority: number;
    executeType: any;
    executeMethod: any;
    executeName: string;
    validateType: any;
    validateMethod: any;
    validateName: string;
  }
}
declare namespace UnityEditor.Audio {
  class AudioEffectParameterPath {
    // constructors
    constructor(group: UnityEditor.Audio.AudioMixerGroupController, effect: UnityEditor.Audio.AudioMixerEffectController, parameter: UnityEditor.GUID);
    // methods
    ResolveStringPath(getOnlyBasePath: boolean): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    effect: UnityEditor.Audio.AudioMixerEffectController;
    group: UnityEditor.Audio.AudioMixerGroupController;
    parameter: UnityEditor.GUID;
  }
}
declare namespace UnityEditor.Audio {
  class AudioGroupParameterPath {
    // constructors
    constructor(group: UnityEditor.Audio.AudioMixerGroupController, parameter: UnityEditor.GUID);
    // methods
    ResolveStringPath(getOnlyBasePath: boolean): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    group: UnityEditor.Audio.AudioMixerGroupController;
    parameter: UnityEditor.GUID;
  }
}
declare namespace UnityEditor.Audio.AudioMixerController {
  class ConnectionNode {
    // constructors
    constructor();
    // methods
    GetDisplayString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    visited: boolean;
    groupTail: any;
    targets: any;
    group: UnityEditor.Audio.AudioMixerGroupController;
    effect: UnityEditor.Audio.AudioMixerEffectController;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerController {
    // constructors
    constructor();
    // methods
    GetGroupVUInfo(group: UnityEditor.GUID, fader: boolean, vuLevel: any, vuPeak: any): number;
    UpdateMuteSolo(): void;
    UpdateBypass(): void;
    CurrentViewContainsGroup(group: UnityEditor.GUID): boolean;
    static EditingTargetSnapshot(): boolean;
    OnChangedExposedParameter(): void;
    ClearEventHandlers(): void;
    AddExposedParameter(path: UnityEditor.Audio.AudioParameterPath): void;
    ContainsExposedParameter(parameter: UnityEditor.GUID): boolean;
    RemoveExposedParameter(parameter: UnityEditor.GUID): void;
    ResolveExposedParameterPath(parameter: UnityEditor.GUID, getOnlyBasePath: boolean): string;
    static CreateMixerControllerAtPath(path: string): UnityEditor.Audio.AudioMixerController;
    CreateDefaultAsset(path: string): void;
    BuildTestSetup(minSpan: number, maxSpan: number, maxGroups: number): void;
    GetAllAudioGroupsSlow(): any;
    HasMoreThanOneGroup(): boolean;
    AreAnyOfTheGroupsInTheListAncestors(groups: any): boolean;
    DeleteGroups(groups: UnityEditor.Audio.AudioMixerGroupController[]): void;
    RemoveEffect(effect: UnityEditor.Audio.AudioMixerEffectController, group: UnityEditor.Audio.AudioMixerGroupController): void;
    OnSubAssetChanged(): void;
    CloneNewSnapshotFromTarget(storeUndoState: boolean): void;
    RemoveTargetSnapshot(): void;
    RemoveSnapshot(snapshot: UnityEditor.Audio.AudioMixerSnapshotController): void;
    CreateNewGroup(name: string, storeUndoState: boolean): UnityEditor.Audio.AudioMixerGroupController;
    AddChildToParent(child: UnityEditor.Audio.AudioMixerGroupController, parent: UnityEditor.Audio.AudioMixerGroupController): void;
    RemoveGroupsFromParent(groups: UnityEditor.Audio.AudioMixerGroupController[], storeUndoState: boolean): void;
    FindParentGroup(node: UnityEditor.Audio.AudioMixerGroupController, group: UnityEditor.Audio.AudioMixerGroupController): UnityEditor.Audio.AudioMixerGroupController;
    CopyEffect(sourceEffect: UnityEditor.Audio.AudioMixerEffectController): UnityEditor.Audio.AudioMixerEffectController;
    DuplicateGroups(sourceGroups: UnityEditor.Audio.AudioMixerGroupController[]): any;
    CopyEffectSettingsToAllSnapshots(group: UnityEditor.Audio.AudioMixerGroupController, effectIndex: number, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, includeWetParam: boolean): void;
    CopyAllSettingsToAllSnapshots(group: UnityEditor.Audio.AudioMixerGroupController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): void;
    CopyAttenuationToAllSnapshots(group: UnityEditor.Audio.AudioMixerGroupController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): void;
    ReparentSelection(newParent: UnityEditor.Audio.AudioMixerGroupController, insertionIndex: number, selection: any): void;
    static InsertEffect(effect: UnityEditor.Audio.AudioMixerEffectController, targetEffects: any, targetIndex: number): boolean;
    static MoveEffect(sourceEffects: any, sourceIndex: number, targetEffects: any, targetIndex: number): boolean;
    static FixNameForPopupMenu(s: string): string;
    ClearSendConnectionsTo(sendTarget: UnityEditor.Audio.AudioMixerEffectController): void;
    static DoesTheTemporaryGraphHaveAnyCycles(allGroups: any, identifiedLoop: any, graph: any): boolean;
    static WillChangeOfEffectTargetCauseFeedback(allGroups: any, groupWhoseEffectIsChanged: UnityEditor.Audio.AudioMixerGroupController, effectWhoseTargetIsChanged: number, targetToTest: UnityEditor.Audio.AudioMixerEffectController, identifiedLoop: any): boolean;
    static WillModificationOfTopologyCauseFeedback(allGroups: any, groupsToBeMoved: any, newParentForMovedGroups: UnityEditor.Audio.AudioMixerGroupController, identifiedLoop: any): boolean;
    static WillMovingEffectCauseFeedback(allGroups: any, sourceGroup: UnityEditor.Audio.AudioMixerGroupController, sourceIndex: number, targetGroup: UnityEditor.Audio.AudioMixerGroupController, targetIndex: number, identifiedLoop: any): boolean;
    static DbToLin(x: number): number;
    CloneViewFromCurrent(): void;
    DeleteView(index: number): void;
    SetView(index: number): void;
    SanitizeGroupViews(): void;
    ForceSetView(index: number): void;
    AddGroupToCurrentView(group: UnityEditor.Audio.AudioMixerGroupController): void;
    SetCurrentViewVisibility(guids: UnityEditor.GUID[]): void;
    GetCurrentViewGroupList(): UnityEditor.Audio.AudioMixerGroupController[];
    static VolumeToScreenMapping(value: number, screenRange: number, forward: boolean): number;
    OnUnitySelectionChanged(): void;
    FindMatchingGroups(subPath: string): any[];
    FindSnapshot(name: string): any;
    TransitionToSnapshots(snapshots: any[], weights: number[], timeToReach: number): void;
    SetFloat(name: string, value: number): boolean;
    ClearFloat(name: string): boolean;
    GetFloat(name: string, value: any): boolean;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly allGroups: UnityEditor.Audio.AudioMixerGroupController[];
    readonly numExposedParameters: number;
    exposedParameters: UnityEditor.Audio.ExposedAudioParameter[];
    masterGroup: UnityEditor.Audio.AudioMixerGroupController;
    startSnapshot: any;
    TargetSnapshot: UnityEditor.Audio.AudioMixerSnapshotController;
    snapshots: UnityEditor.Audio.AudioMixerSnapshotController[];
    readonly CachedSelection: any;
    currentViewIndex: number;
    views: UnityEditor.Audio.MixerGroupView[];
    readonly isSuspended: boolean;
    outputAudioMixerGroup: any;
    updateMode: any;
    name: string;
    hideFlags: any;
    // fields
    m_HighlightEffectIndex: number;
    static kMinVolume: number;
    static kMaxEffect: number;
    static kVolumeWarp: number;
    static s_GroupEffectDisplaySeperator: string;
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerEffectController {
    // constructors
    constructor(name: string);
    // methods
    IsSend(): boolean;
    IsReceive(): boolean;
    IsDuckVolume(): boolean;
    IsAttenuation(): boolean;
    DisallowsBypass(): boolean;
    ClearCachedDisplayName(): void;
    GetDisplayString(effectMap: any): string;
    GetSendTargetDisplayString(effectMap: any): string;
    PreallocateGUIDs(): void;
    GetGUIDForMixLevel(): UnityEditor.GUID;
    GetValueForMixLevel(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): number;
    SetValueForMixLevel(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, value: number): void;
    GetGUIDForParameter(parameterName: string): UnityEditor.GUID;
    GetValueForParameter(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, parameterName: string): number;
    SetValueForParameter(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, parameterName: string, value: number): void;
    GetFloatBuffer(controller: UnityEditor.Audio.AudioMixerController, name: string, data: any, numsamples: number): boolean;
    GetCPUUsage(controller: UnityEditor.Audio.AudioMixerController): number;
    ContainsParameterGUID(guid: UnityEditor.GUID): boolean;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly effectID: UnityEditor.GUID;
    readonly effectName: string;
    sendTarget: UnityEditor.Audio.AudioMixerEffectController;
    enableWetMix: boolean;
    bypass: boolean;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerEffectPlugin {
    // constructors
    constructor();
    // methods
    SetFloatParameter(name: string, value: number): boolean;
    GetFloatParameter(name: string, value: any): boolean;
    GetFloatParameterInfo(name: string, minRange: any, maxRange: any, defaultValue: any): boolean;
    GetFloatBuffer(name: string, data: any, numsamples: number): boolean;
    GetSampleRate(): number;
    IsPluginEditableAndEnabled(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerGroupController {
    // constructors
    constructor(owner: any);
    // methods
    PreallocateGUIDs(): void;
    GetGUIDForVolume(): UnityEditor.GUID;
    GetValueForVolume(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): number;
    SetValueForVolume(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, value: number): void;
    GetGUIDForPitch(): UnityEditor.GUID;
    GetValueForPitch(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController): number;
    SetValueForPitch(controller: UnityEditor.Audio.AudioMixerController, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, value: number): void;
    HasDependentMixers(): boolean;
    InsertEffect(effect: UnityEditor.Audio.AudioMixerEffectController, index: number): void;
    HasAttenuation(): boolean;
    DumpHierarchy(title: string, level: number): void;
    GetDisplayString(): string;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly groupID: UnityEditor.GUID;
    userColorIndex: number;
    readonly controller: UnityEditor.Audio.AudioMixerController;
    children: UnityEditor.Audio.AudioMixerGroupController[];
    effects: UnityEditor.Audio.AudioMixerEffectController[];
    mute: boolean;
    solo: boolean;
    bypassEffects: boolean;
    readonly audioMixer: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class AudioMixerSnapshotController {
    // constructors
    constructor(owner: any);
    // methods
    SetValue(guid: UnityEditor.GUID, value: number): void;
    GetValue(guid: UnityEditor.GUID, value: any): boolean;
    SetTransitionTypeOverride(guid: UnityEditor.GUID, type: UnityEditor.Audio.ParameterTransitionType): void;
    GetTransitionTypeOverride(guid: UnityEditor.GUID, type: any): boolean;
    ClearTransitionTypeOverride(guid: UnityEditor.GUID): void;
    TransitionTo(timeToReach: number): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly snapshotID: UnityEditor.GUID;
    readonly audioMixer: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class AudioParameterPath {
    // constructors
    private constructor();
    // methods
    ResolveStringPath(getOnlyBasePath: boolean): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    parameter: UnityEditor.GUID;
  }
}
declare namespace UnityEditor.Audio {
  class ExposedAudioParameter {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    guid: UnityEditor.GUID;
    name: string;
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectDefinition {
    // constructors
    constructor(name: string, parameters: UnityEditor.Audio.MixerParameterDefinition[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    readonly parameters: UnityEditor.Audio.MixerParameterDefinition[];
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectDefinitionReloader {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectDefinitions {
    // constructors
    constructor();
    // methods
    static GetAudioEffectNames(): string[];
    static GetAudioEffectParameterDesc(effectName: string): UnityEditor.Audio.MixerParameterDefinition[];
    static EffectCanBeSidechainTarget(effect: UnityEditor.Audio.AudioMixerEffectController): boolean;
    static Refresh(): void;
    static EffectExists(name: string): boolean;
    static GetEffectList(): string[];
    static ClearDefinitions(): void;
    static GetEffectParameters(effect: string): UnityEditor.Audio.MixerParameterDefinition[];
    static RegisterAudioMixerEffect(name: string, definitions: UnityEditor.Audio.MixerParameterDefinition[]): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class MixerEffectParameter {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    parameterName: string;
    GUID: UnityEditor.GUID;
  }
}
declare namespace UnityEditor.Audio {
  class MixerGroupControllerCompareByName {
    // constructors
    constructor();
    // methods
    Compare(x: UnityEditor.Audio.AudioMixerGroupController, y: UnityEditor.Audio.AudioMixerGroupController): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Audio {
  class MixerGroupView {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    guids: UnityEditor.GUID[];
    name: string;
  }
}
declare namespace UnityEditor.Audio {
  class MixerParameterDefinition {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    description: string;
    units: string;
    displayScale: number;
    displayExponent: number;
    minRange: number;
    maxRange: number;
    defaultValue: number;
  }
}
declare namespace UnityEditor.Audio {
  class ParameterTransitionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Lerp: UnityEditor.Audio.ParameterTransitionType;
    static Smoothstep: UnityEditor.Audio.ParameterTransitionType;
    static Squared: UnityEditor.Audio.ParameterTransitionType;
    static SquareRoot: UnityEditor.Audio.ParameterTransitionType;
    static BrickwallStart: UnityEditor.Audio.ParameterTransitionType;
    static BrickwallEnd: UnityEditor.Audio.ParameterTransitionType;
  }
}
declare namespace UnityEditor {
  class AudioChorusFilterEditor {
    // constructors
    constructor();
    // methods
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioClipInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    OnEnable(): void;
    OnDestroy(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioCurveRendering {
    // constructors
    constructor();
    // methods
    static BeginCurveFrame(r: any): any;
    static EndCurveFrame(): void;
    static DrawCurveFrame(r: any): any;
    static DrawCurveBackground(r: any): void;
    static DrawFilledCurve(r: any, eval_: ((number) => number), curveColor: any): void;
    static DrawFilledCurve(r: any, eval_: ((number, any) => number)): void;
    static DrawMinMaxFilledCurve(r: any, eval_: ((number, any, any, any) => void)): void;
    static DrawSymmetricFilledCurve(r: any, eval_: ((number, any) => number)): void;
    static DrawCurve(r: any, eval_: ((number) => number), curveColor: any): void;
    static DrawGradientRect(r: any, c1: any, c2: any, blend: number, horizontal: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kAudioOrange: any;
  }
}
declare namespace UnityEditor {
  class AudioDistortionFilterEditor {
    // constructors
    constructor();
    // methods
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioEchoFilterEditor {
    // constructors
    constructor();
    // methods
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioFilterGUI {
    // constructors
    constructor();
    // methods
    DrawAudioFilterGUI(behaviour: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AudioGroupDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, controller: UnityEditor.Audio.AudioMixerController);
    // methods
    static GetUniqueNodeID(group: UnityEditor.Audio.AudioMixerGroupController): number;
    FetchData(): void;
    IsRenamingItemAllowed(node: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    m_Controller: UnityEditor.Audio.AudioMixerController;
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class AudioGroupTreeViewDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.AudioMixerGroupTreeView);
    // methods
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentNode: UnityEditor.IMGUI.Controls.TreeViewItem, targetNode: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dragPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioGroupTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    NodeWasToggled: ((UnityEditor.AudioMixerTreeViewNode, boolean) => void);
    m_Controller: UnityEditor.Audio.AudioMixerController;
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor {
  class AudioHighPassFilterEditor {
    // constructors
    constructor();
    // methods
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioImporter {
    // constructors
    constructor();
    // methods
    ContainsSampleSettingsOverride(platform: string): boolean;
    GetOverrideSampleSettings(platform: string): UnityEditor.AudioImporterSampleSettings;
    SetOverrideSampleSettings(platform: string, settings: UnityEditor.AudioImporterSampleSettings): boolean;
    ClearSampleSettingOverride(platform: string): boolean;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    defaultSampleSettings: UnityEditor.AudioImporterSampleSettings;
    forceToMono: boolean;
    loadInBackground: boolean;
    preloadAudioData: boolean;
    channels: UnityEditor.AudioImporterChannels;
    compressionBitrate: number;
    loopable: boolean;
    hardware: boolean;
    threeD: boolean;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioImporterChannels {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Automatic: UnityEditor.AudioImporterChannels;
    static Mono: UnityEditor.AudioImporterChannels;
    static Stereo: UnityEditor.AudioImporterChannels;
  }
}
declare namespace UnityEditor {
  class AudioImporterFormat {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Native: UnityEditor.AudioImporterFormat;
    static Compressed: UnityEditor.AudioImporterFormat;
  }
}
declare namespace UnityEditor {
  class AudioImporterInspector {
    // constructors
    constructor();
    // methods
    CurrentPlatformHasAutoTranslatedCompression(): boolean;
    IsHardwareSound(format: any): boolean;
    CurrentSelectionContainsHardwareSounds(): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    m_ForceToMono: UnityEditor.SerializedProperty;
    m_Normalize: UnityEditor.SerializedProperty;
    m_PreloadAudioData: UnityEditor.SerializedProperty;
    m_LoadInBackground: UnityEditor.SerializedProperty;
    m_OrigSize: UnityEditor.SerializedProperty;
    m_CompSize: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class MultiValueStatus {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    multiLoadType: boolean;
    multiSampleRateSetting: boolean;
    multiSampleRateOverride: boolean;
    multiCompressionFormat: boolean;
    multiQuality: boolean;
    multiConversionMode: boolean;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class OverrideStatus {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NoOverrides: UnityEditor.AudioImporterInspector.OverrideStatus;
    static MixedOverrides: UnityEditor.AudioImporterInspector.OverrideStatus;
    static AllOverrides: UnityEditor.AudioImporterInspector.OverrideStatus;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class SampleSettingProperties {
    // constructors
    private constructor();
    // methods
    HasModified(): boolean;
    ClearChangedFlags(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    settings: UnityEditor.AudioImporterSampleSettings;
    forcedOverrideState: boolean;
    overrideIsForced: boolean;
    loadTypeChanged: boolean;
    sampleRateSettingChanged: boolean;
    sampleRateOverrideChanged: boolean;
    compressionFormatChanged: boolean;
    qualityChanged: boolean;
    conversionModeChanged: boolean;
  }
}
declare namespace UnityEditor.AudioImporterInspector {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kSampleRateStrings: string[];
    static kSampleRateValues: number[];
  }
}
declare namespace UnityEditor {
  class AudioImporterLoadType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DecompressOnLoad: UnityEditor.AudioImporterLoadType;
    static CompressedInMemory: UnityEditor.AudioImporterLoadType;
    static StreamFromDisc: UnityEditor.AudioImporterLoadType;
  }
}
declare namespace UnityEditor {
  class AudioImporterSampleSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    loadType: any;
    sampleRateSetting: UnityEditor.AudioSampleRateSetting;
    sampleRateOverride: number;
    compressionFormat: any;
    quality: number;
    conversionMode: number;
  }
}
declare namespace UnityEditor {
  class AudioLowPassFilterInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioManager {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioManagerInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AudioManagerInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static Volume: any;
    static RolloffScale: any;
    static DopplerFactor: any;
    static DefaultSpeakerMode: any;
    static SampleRate: any;
    static DSPBufferSize: any;
    static VirtualVoiceCount: any;
    static RealVoiceCount: any;
    static SpatializerPlugin: any;
    static DisableAudio: any;
    static VirtualizeEffects: any;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class BusConnection {
    // constructors
    constructor(srcX: number, srcY: number, targetEffect: UnityEditor.Audio.AudioMixerEffectController, mixLevel: number, col: any, isSend: boolean, isSelected: boolean);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    targetEffect: UnityEditor.Audio.AudioMixerEffectController;
    srcX: number;
    srcY: number;
    mixLevel: number;
    color: any;
    isSend: boolean;
    isSelected: boolean;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class ChannelStripParams {
    // constructors
    constructor();
    // methods
    Init(controller: UnityEditor.Audio.AudioMixerController, channelStripRect: any, maxNumEffects: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    index: number;
    stripRect: any;
    visibleRect: any;
    visible: boolean;
    group: UnityEditor.Audio.AudioMixerGroupController;
    maxEffects: number;
    drawingBuses: boolean;
    anySoloActive: boolean;
    busConnections: any;
    rectSelectionGroups: any;
    allGroups: any;
    shownGroups: any;
    numChannels: number;
    vuinfo_level: number[];
    vuinfo_peak: number[];
    effectMap: any;
    bgRects: any;
    kHeaderIndex: number;
    kVUMeterFaderIndex: number;
    kTotalVULevelIndex: number;
    kSoloMuteBypassIndex: number;
    kEffectStartIndex: number;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class ConnectSendContext {
    // constructors
    constructor(sendEffect: UnityEditor.Audio.AudioMixerEffectController, targetEffect: UnityEditor.Audio.AudioMixerEffectController);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sendEffect: UnityEditor.Audio.AudioMixerEffectController;
    targetEffect: UnityEditor.Audio.AudioMixerEffectController;
  }
}
declare namespace UnityEditor {
  class AudioMixerChannelStripView {
    // constructors
    constructor(state: UnityEditor.AudioMixerChannelStripView.State);
    // methods
    static InsertEffectPopupCallback(obj: any): void;
    RemoveEffectPopupCallback(obj: any): void;
    static ConnectSendPopupCallback(obj: any): void;
    VerticalFader(r: any, value: number, direction: number, dragScale: number, drawScaleValues: boolean, drawMarkerValue: boolean, tooltip: string, maxValue: number, style: any): number;
    HorizontalFader(r: any, value: number, minValue: number, maxValue: number, direction: number, dragScale: number): number;
    GetEffectBarStyle(effect: UnityEditor.Audio.AudioMixerEffectController): any;
    static AddMenuItemsForReturns(pm: UnityEditor.GenericMenu, prefix: string, effectIndex: number, group: UnityEditor.Audio.AudioMixerGroupController, allGroups: any, effectMap: any, effect: UnityEditor.Audio.AudioMixerEffectController, showCurrent: boolean): void;
    VUMeter(group: UnityEditor.Audio.AudioMixerGroupController, r: any, level: number, peak: number): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    ShowDeveloperOverlays(rect: any, evt: any, show: boolean): void;
    static Lerp(x1: number, x2: number, t: number): number;
    static GetCableVertex(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, t: number, x: any, y: any): void;
    OnGUI(rect: any, showReferencedBuses: boolean, showBusConnections: boolean, showBusConnectionsOfSelection: boolean, allGroups: any, effectMap: any, sortGroupsAlphabetically: boolean, showDeveloperOverlays: boolean, scrollToItem: UnityEditor.Audio.AudioMixerGroupController): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly requiresRepaint: boolean;
    // fields
    static kVolumeScaleMouseDrag: number;
    static kEffectScaleMouseDrag: number;
    m_FocusIndex: number;
    m_IndexCounter: number;
    m_EffectInteractionControlID: number;
    m_RectSelectionControlID: number;
    m_MouseDragStartX: number;
    m_MouseDragStartY: number;
    m_MouseDragStartValue: number;
    m_RectSelectionStartPos: any;
    m_RectSelectionRect: any;
    sharedGuiStyle: any;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class EffectContext {
    // constructors
    constructor(controller: UnityEditor.Audio.AudioMixerController, groups: UnityEditor.Audio.AudioMixerGroupController[], index: number, name: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    controller: UnityEditor.Audio.AudioMixerController;
    groups: UnityEditor.Audio.AudioMixerGroupController[];
    index: number;
    name: string;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class PatchSlot {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    group: UnityEditor.Audio.AudioMixerGroupController;
    x: number;
    y: number;
  }
}
declare namespace UnityEditor.AudioMixerChannelStripView {
  class State {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_LastClickedInstanceID: number;
    m_ScrollPos: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerColorCodes {
    // constructors
    private constructor();
    // methods
    static AddColorItemsToGenericMenu(menu: UnityEditor.GenericMenu, groups: UnityEditor.Audio.AudioMixerGroupController[]): void;
    static GetColor(index: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerColorCodes {
  class ItemData {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    groups: UnityEditor.Audio.AudioMixerGroupController[];
    index: number;
  }
}
declare namespace UnityEditor {
  class AudioMixerControllerInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AudioMixerControllerInspector {
  class Texts {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static m_EnableSuspendLabel: any;
    static m_SuspendThresholdLabel: any;
    static m_UpdateModeLabel: any;
    static dB: string;
  }
}
declare namespace UnityEditor {
  class AudioMixerDrawUtils {
    // constructors
    constructor();
    // methods
    static GetEffectColor(effect: UnityEditor.Audio.AudioMixerEffectController): any;
    static InitStyles(): void;
    static GetAlpha(): number;
    static DrawSplitter(): void;
    static Vertex(x: number, y: number): void;
    static DrawLine(x1: number, y1: number, x2: number, y2: number, c: any): void;
    static DrawGradientRect(r: any, c1: any, c2: any): void;
    static DrawGradientRectHorizontal(r: any, c1: any, c2: any): void;
    static DrawRegionBg(rect: any, headerRect: any, contentRect: any): void;
    static HeaderLabel(r: any, text: any, icon: any): void;
    static BuildGUIStyleForLabel(color: any, fontSize: number, wrapText: boolean, fontstyle: any, anchor: any): any;
    static ReadOnlyLabel(r: any, content: any, style: any): void;
    static ReadOnlyLabel(r: any, text: string, style: any): void;
    static ReadOnlyLabel(r: any, text: string, style: any, tooltipText: string): void;
    static AddTooltipOverlay(r: any, tooltip: string): void;
    static DrawConnection(col: any, mixLevel: number, srcX: number, srcY: number, dstX: number, dstY: number, width: number): void;
    static DrawVerticalShow(rect: any, fadeToTheRight: boolean): void;
    static DrawScrollDropShadow(scrollViewRect: any, scrollY: number, contentHeight: number): void;
    static DrawRect(rect: any, color: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly styles: UnityEditor.AudioMixerDrawUtils.Styles;
    // fields
    static kBackgroundHi: any;
    static kBackgroundLo: any;
    static kBackgroundHiHighlight: any;
    static kBackgroundLoHighlight: any;
  }
}
declare namespace UnityEditor.AudioMixerDrawUtils {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    headerStyle: any;
    reorderableListLabel: any;
    regionBg: any;
    channelStripVUMeterBg: any;
    channelStripAreaBackground: any;
    channelStripBg: any;
    duckingMarker: any;
    channelStripAttenuationMarkerSquare: any;
    channelStripHeaderStyle: any;
    soloToggle: any;
    muteToggle: any;
    bypassToggle: any;
    circularToggle: any;
    totalVULevel: any;
    attenuationBar: any;
    effectBar: any;
    sendReturnBar: any;
    effectName: any;
    vuValue: any;
    mixerHeader: any;
    warningOverlay: any;
    scrollShadowTexture: any;
    leftToRightShadowTexture: any;
    soloGUIContent: any;
    muteGUIContent: any;
    bypassGUIContent: any;
    effectSlotGUIContent: any;
    attenuationSlotGUIContent: any;
    emptySendSlotGUIContent: any;
    returnSlotGUIContent: any;
    duckVolumeSlotGUIContent: any;
    duckingFaderGUIContent: any;
    attenuationFader: any;
    vuMeterGUIContent: any;
    referencedGroups: any;
    sendString: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerEffectGUI {
    // constructors
    private constructor();
    // methods
    static EffectHeader(text: string): void;
    static Slider(label: any, value: any, displayScale: number, displayExponent: number, unit: string, leftValue: number, rightValue: number, controller: UnityEditor.Audio.AudioMixerController, path: UnityEditor.Audio.AudioParameterPath, options: any[]): boolean;
    static ExposePopupCallback(obj: any): void;
    static UnexposePopupCallback(obj: any): void;
    static ParameterTransitionOverrideCallback(obj: any): void;
    static PopupButton(label: any, buttonContent: any, style: any, buttonRect: any, options: any[]): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerEffectGUI {
  class ExposedParamContext {
    // constructors
    constructor(controller: UnityEditor.Audio.AudioMixerController, path: UnityEditor.Audio.AudioParameterPath);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    controller: UnityEditor.Audio.AudioMixerController;
    path: UnityEditor.Audio.AudioParameterPath;
  }
}
declare namespace UnityEditor.AudioMixerEffectGUI {
  class ParameterTransitionOverrideContext {
    // constructors
    constructor(controller: UnityEditor.Audio.AudioMixerController, parameter: UnityEditor.GUID, type: UnityEditor.Audio.ParameterTransitionType);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    controller: UnityEditor.Audio.AudioMixerController;
    parameter: UnityEditor.GUID;
    type: UnityEditor.Audio.ParameterTransitionType;
  }
}
declare namespace UnityEditor.AudioMixerEffectGUI {
  class ParameterTransitionOverrideRemoveContext {
    // constructors
    constructor(controller: UnityEditor.Audio.AudioMixerController, parameter: UnityEditor.GUID);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    controller: UnityEditor.Audio.AudioMixerController;
    parameter: UnityEditor.GUID;
  }
}
declare namespace UnityEditor {
  class AudioMixerEffectView {
    // constructors
    constructor();
    // methods
    RegisterCustomGUI(gui: UnityEditor.IAudioEffectPluginGUI): boolean;
    OnGUI(group: UnityEditor.Audio.AudioMixerGroupController): void;
    static DoInitialModule(group: UnityEditor.Audio.AudioMixerGroupController, controller: UnityEditor.Audio.AudioMixerController, allGroups: any): number;
    DoEffectGUI(effectIndex: number, group: UnityEditor.Audio.AudioMixerGroupController, allGroups: any, effectMap: any, highlightEffectIndex: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerEffectView {
  class EffectDragging {
    // constructors
    constructor();
    // methods
    IsDraggingIndex(effectIndex: number): boolean;
    HandleDragElement(effectIndex: number, effectRect: any, dragRect: any, group: UnityEditor.Audio.AudioMixerGroupController, allGroups: any): void;
    HandleDragging(totalRect: any, group: UnityEditor.Audio.AudioMixerGroupController, controller: UnityEditor.Audio.AudioMixerController): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly dragControlID: number;
    // fields
  }
}
declare namespace UnityEditor.AudioMixerEffectView {
  class Texts {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static editInPlaymode: any;
    static pitch: any;
    static addEffect: any;
    static volume: any;
    static sendLevel: any;
    static bus: any;
    static none: any;
    static wet: any;
    static dB: string;
    static percentage: string;
    static cpuFormatString: string;
  }
}
declare namespace UnityEditor {
  class AudioMixerExposedParametersPopup {
    // constructors
    private constructor();
    // methods
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerExposedParameterView {
    // constructors
    constructor(state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    // methods
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    RecreateListControl(): void;
    OnGUI(rect: any): void;
    OnContextClick(itemIndex: number): void;
    CalcSize(): any;
    NameChanged(index: number, newName: string): void;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    OnEvent(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupEditor {
    // constructors
    constructor();
    // methods
    Update(): void;
    OnInspectorGUI(): void;
    UseDefaultMargins(): boolean;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static kPrefKeyForShowCpuUsage: string;
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupPopupContext {
    // constructors
    constructor(controller: UnityEditor.Audio.AudioMixerController, group: UnityEditor.Audio.AudioMixerGroupController);
    constructor(controller: UnityEditor.Audio.AudioMixerController, groups: UnityEditor.Audio.AudioMixerGroupController[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    controller: UnityEditor.Audio.AudioMixerController;
    groups: UnityEditor.Audio.AudioMixerGroupController[];
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupTreeView {
    // constructors
    constructor(mixerWindow: UnityEditor.AudioMixerWindow, treeState: UnityEditor.IMGUI.Controls.TreeViewState);
    // methods
    UseScrollView(useScrollView: boolean): void;
    ReloadTreeData(): void;
    ReloadTree(): void;
    AddChildGroupPopupCallback(obj: any): void;
    AddSiblingGroupPopupCallback(obj: any): void;
    AddAudioMixerGroup(parent: UnityEditor.Audio.AudioMixerGroupController): void;
    DeleteGroups(groups: any, recordUndo: boolean): void;
    DuplicateGroups(groups: any, recordUndo: boolean): void;
    OnTreeViewContextClick(index: number): void;
    OnTreeSelectionChanged(selection: number[]): void;
    InitSelection(revealSelectionAndFrameLastSelected: boolean): void;
    GetTotalHeight(): number;
    OnGUI(rect: any): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    EndRenaming(): void;
    OnUndoRedoPerformed(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Controller: UnityEditor.Audio.AudioMixerController;
    readonly ScrollToItem: UnityEditor.Audio.AudioMixerGroupController;
    // fields
  }
}
declare namespace UnityEditor.AudioMixerGroupTreeView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    optionsButton: any;
    header: any;
    addText: any;
    audioMixerGroupIcon: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerGroupViewList {
    // constructors
    constructor(state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    // methods
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    OnUndoRedoPerformed(): void;
    OnEvent(): void;
    RecreateListControl(): void;
    GetTotalHeight(): number;
    OnGUI(rect: any): void;
    CustomDrawElement(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    NameChanged(index: number, newName: string): void;
    SelectionChanged(selectedIndex: number): void;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerGroupViewList {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    header: any;
    addButton: any;
    viewsIcon: any;
  }
}
declare namespace UnityEditor.AudioMixerGroupViewList {
  class ViewsContexttMenu {
    // constructors
    constructor();
    // methods
    static Show(buttonRect: any, viewIndex: number, list: UnityEditor.AudioMixerGroupViewList): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerGroupViewList.ViewsContexttMenu {
  class data {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    viewIndex: number;
    list: UnityEditor.AudioMixerGroupViewList;
  }
}
declare namespace UnityEditor {
  class AudioMixerInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, mixer: UnityEditor.Audio.AudioMixerController, infoText: string);
    // methods
    UpdateSuspendedString(force: boolean): void;
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    mixer: UnityEditor.Audio.AudioMixerController;
    infoText: string;
    labelWidth: number;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixersDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, getAllControllersCallback: (() => any));
    // methods
    FetchData(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    GetInsertAfterItemIDForNewItem(newName: string, parentItem: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class AudioMixerSelection {
    // constructors
    constructor(controller: UnityEditor.Audio.AudioMixerController);
    // methods
    SyncToUnitySelection(): void;
    SetChannelStrips(newSelection: any): void;
    SetSingleChannelStrip(group: UnityEditor.Audio.AudioMixerGroupController): void;
    ToggleChannelStrip(group: UnityEditor.Audio.AudioMixerGroupController): void;
    ClearChannelStrips(): void;
    HasSingleChannelStripSelection(): boolean;
    Sanitize(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly ChannelStripSelection: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerSnapshotControllerInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerSnapshotListView {
    // constructors
    constructor(state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    // methods
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    LoadFromBackend(): void;
    OnEvent(): void;
    CustomDrawElement(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    GetTotalHeight(): number;
    OnGUI(rect: any): void;
    SelectionChanged(index: number): void;
    NameChanged(index: number, newName: string): void;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    OnUndoRedoPerformed(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerSnapshotListView {
  class SnapshotMenu {
    // constructors
    constructor();
    // methods
    static Show(buttonRect: any, snapshot: UnityEditor.Audio.AudioMixerSnapshotController, list: UnityEditor.AudioMixerSnapshotListView): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerSnapshotListView.SnapshotMenu {
  class data {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    snapshot: UnityEditor.Audio.AudioMixerSnapshotController;
    list: UnityEditor.AudioMixerSnapshotListView;
  }
}
declare namespace UnityEditor.AudioMixerSnapshotListView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    starIcon: any;
    header: any;
    addButton: any;
    snapshotsIcon: any;
  }
}
declare namespace UnityEditor {
  class AudioMixersTreeView {
    // constructors
    constructor(mixerWindow: UnityEditor.AudioMixerWindow, treeState: UnityEditor.IMGUI.Controls.TreeViewState, getAllControllersCallback: (() => any));
    // methods
    ReloadTree(): void;
    OnMixerControllerChanged(controller: UnityEditor.Audio.AudioMixerController): void;
    DeleteAudioMixerCallback(obj: any): void;
    OnTreeViewContextClick(index: number): void;
    OnTreeSelectionChanged(selection: number[]): void;
    GetTotalHeight(): number;
    OnGUI(rect: any): void;
    EndRenaming(): void;
    OnUndoRedoPerformed(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixersTreeView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    optionsButton: any;
    header: any;
    addText: any;
    audioMixerIcon: any;
  }
}
declare namespace UnityEditor {
  class AudioMixersTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    BeginCreateNewMixer(): void;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor {
  class AudioMixerTreeViewDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, mixerDroppedOnMixerCallback: ((any, UnityEditor.Audio.AudioMixerController) => void));
    // methods
    StartDrag(draggedNode: UnityEditor.IMGUI.Controls.TreeViewItem, draggedNodes: any): void;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DoDrag(parentNode: UnityEditor.IMGUI.Controls.TreeViewItem, targetNode: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dragPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor.AudioMixerTreeViewDragging {
  class DragData {
    // constructors
    constructor(draggedItems: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_DraggedItems: any;
  }
}
declare namespace UnityEditor {
  class AudioMixerTreeViewNode {
    // constructors
    constructor(instanceID: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, group: UnityEditor.Audio.AudioMixerGroupController);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    group: UnityEditor.Audio.AudioMixerGroupController;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerUtility {
    // constructors
    constructor();
    // methods
    static RepaintAudioMixerAndInspectors(): void;
    static VisitGroupsRecursivly(group: UnityEditor.Audio.AudioMixerGroupController, visitorCallback: ((UnityEditor.Audio.AudioMixerGroupController) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AudioMixerUtility {
  class VisitorFetchInstanceIDs {
    // constructors
    constructor();
    // methods
    Visitor(group: UnityEditor.Audio.AudioMixerGroupController): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    instanceIDs: any;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class AudioMixerPostprocessor {
    // constructors
    constructor();
    // methods
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: any): void;
    LogError(warning: string): void;
    LogError(warning: string, context: any): void;
    GetVersion(): number;
    GetPostprocessOrder(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    assetPath: string;
    readonly assetImporter: UnityEditor.AssetImporter;
    preview: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioMixerWindow {
    // constructors
    constructor();
    // methods
    static Create(): void;
    static RepaintAudioMixerWindow(): void;
    Awake(): void;
    OnEnable(): void;
    OnDisable(): void;
    UndoRedoPerformed(): void;
    Update(): void;
    OnGUI(): void;
    ParamDef(name: string, desc: string, units: string, displayScale: number, minRange: number, maxRange: number, defaultValue: number): UnityEditor.Audio.MixerParameterDefinition;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly controller: UnityEditor.Audio.AudioMixerController;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class GUIContents {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    rms: any;
    editSnapShots: any;
    infoText: any;
    selectAudioMixer: any;
    output: any;
    toolbarObjectField: any;
    toolbarLabel: any;
    mixerHeader: any;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class Layout {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_VerticalSplitter: UnityEditor.SplitterState;
    m_HorizontalSplitter: UnityEditor.SplitterState;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class LayoutMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Horizontal: UnityEditor.AudioMixerWindow.LayoutMode;
    static Vertical: UnityEditor.AudioMixerWindow.LayoutMode;
  }
}
declare namespace UnityEditor.AudioMixerWindow {
  class SectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static MixerTree: UnityEditor.AudioMixerWindow.SectionType;
    static GroupTree: UnityEditor.AudioMixerWindow.SectionType;
    static ViewList: UnityEditor.AudioMixerWindow.SectionType;
    static SnapshotList: UnityEditor.AudioMixerWindow.SectionType;
  }
}
declare namespace UnityEditor {
  class AudioReverbFilterEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioReverbZoneEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AudioSampleRateSetting {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PreserveSampleRate: UnityEditor.AudioSampleRateSetting;
    static OptimizeSampleRate: UnityEditor.AudioSampleRateSetting;
    static OverrideSampleRate: UnityEditor.AudioSampleRateSetting;
  }
}
declare namespace UnityEditor.AudioSourceInspector {
  class AudioCurveType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Volume: UnityEditor.AudioSourceInspector.AudioCurveType;
    static SpatialBlend: UnityEditor.AudioSourceInspector.AudioCurveType;
    static Lowpass: UnityEditor.AudioSourceInspector.AudioCurveType;
    static Spread: UnityEditor.AudioSourceInspector.AudioCurveType;
    static ReverbZoneMix: UnityEditor.AudioSourceInspector.AudioCurveType;
  }
}
declare namespace UnityEditor.AudioSourceInspector {
  class AudioCurveWrapper {
    // constructors
    constructor(type: UnityEditor.AudioSourceInspector.AudioCurveType, legend: string, id: number, color: any, curveProp: UnityEditor.SerializedProperty, rangeMin: number, rangeMax: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    type: UnityEditor.AudioSourceInspector.AudioCurveType;
    legend: any;
    id: number;
    color: any;
    curveProp: UnityEditor.SerializedProperty;
    rangeMin: number;
    rangeMax: number;
  }
}
declare namespace UnityEditor {
  class AudioSourceInspector {
    // constructors
    constructor();
    // methods
    GetAxisScalars(): any;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AudioSourceInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    labelStyle: any;
    rolloffLabel: any;
    controlledByCurveLabel: string;
    audioClipLabel: any;
    panStereoLabel: any;
    spatialBlendLabel: any;
    reverbZoneMixLabel: any;
    dopplerLevelLabel: any;
    spreadLabel: any;
    outputMixerGroupLabel: any;
    volumeLabel: any;
    pitchLabel: any;
    priorityLabel: any;
    spatializeLabel: any;
    spatializePostEffectsLabel: any;
    priorityLeftLabel: any;
    priorityRightLabel: any;
    spatialLeftLabel: any;
    spatialRightLabel: any;
    panLeftLabel: any;
    panRightLabel: any;
  }
}
declare namespace UnityEditor {
  class AudioUtil {
    // constructors
    constructor();
    // methods
    static PlayClip(clip: any, startSample: number, loop: boolean): void;
    static PlayClip(clip: any, startSample: number): void;
    static PlayClip(clip: any): void;
    static StopClip(clip: any): void;
    static PauseClip(clip: any): void;
    static ResumeClip(clip: any): void;
    static LoopClip(clip: any, on: boolean): void;
    static IsClipPlaying(clip: any): boolean;
    static StopAllClips(): void;
    static GetClipPosition(clip: any): number;
    static GetClipSamplePosition(clip: any): number;
    static SetClipSamplePosition(clip: any, iSamplePosition: number): void;
    static GetSampleCount(clip: any): number;
    static GetChannelCount(clip: any): number;
    static GetBitRate(clip: any): number;
    static GetBitsPerSample(clip: any): number;
    static GetFrequency(clip: any): number;
    static GetSoundSize(clip: any): number;
    static GetSoundCompressionFormat(clip: any): any;
    static GetTargetPlatformSoundCompressionFormat(clip: any): any;
    static GetCurrentSpatializerEffectName(): string;
    static GetSpatializerPluginNames(): string[];
    static SetSpatializerPluginName(pluginName: string): void;
    static HasPreview(clip: any): boolean;
    static GetImporterFromClip(clip: any): UnityEditor.AudioImporter;
    static GetMinMaxData(importer: UnityEditor.AudioImporter): number[];
    static GetDuration(clip: any): number;
    static GetFMODMemoryAllocated(): number;
    static GetFMODCPUUsage(): number;
    static IsMovieAudio(clip: any): boolean;
    static IsTrackerFile(clip: any): boolean;
    static GetMusicChannelCount(clip: any): number;
    static GetLowpassCurve(lowPassFilter: any): any;
    static GetListenerPos(): any;
    static UpdateAudio(): void;
    static SetListenerTransform(t: any): void;
    static HaveAudioCallback(behaviour: any): boolean;
    static GetCustomFilterChannelCount(behaviour: any): number;
    static GetCustomFilterProcessTime(behaviour: any): number;
    static GetCustomFilterMaxIn(behaviour: any, channel: number): number;
    static GetCustomFilterMaxOut(behaviour: any, channel: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static resetAllAudioClipPlayCountsOnPlay: boolean;
    static readonly canUseSpatializerEffect: boolean;
    // fields
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class BoneMappingItem {
    // constructors
    private constructor();
    // methods
    GetChildren(mappingData: UnityEditor.AvatarAutoMapper.BoneMappingItem[]): number[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    parent: number;
    bone: number;
    minStep: number;
    maxStep: number;
    lengthRatio: number;
    dir: any;
    side: UnityEditor.AvatarAutoMapper.Side;
    optional: boolean;
    alwaysInclude: boolean;
    keywords: string[];
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class BoneMatch {
    // constructors
    constructor(parent: UnityEditor.AvatarAutoMapper.BoneMatch, bone: any, item: UnityEditor.AvatarAutoMapper.BoneMappingItem);
    // methods
    CompareTo(other: UnityEditor.AvatarAutoMapper.BoneMatch): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly humanBoneParent: UnityEditor.AvatarAutoMapper.BoneMatch;
    readonly totalSiblingScore: number;
    // fields
    parent: UnityEditor.AvatarAutoMapper.BoneMatch;
    children: any;
    doMap: boolean;
    item: UnityEditor.AvatarAutoMapper.BoneMappingItem;
    bone: any;
    score: number;
    siblingScore: number;
    debugTracker: any;
  }
}
declare namespace UnityEditor {
  class AvatarAutoMapper {
    // constructors
    constructor(validBones: any);
    // methods
    static InitGlobalMappingData(): void;
    static MapBones(root: any, validBones: any): any;
    MapBones(root: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class QueuedBone {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    bone: any;
    level: number;
  }
}
declare namespace UnityEditor.AvatarAutoMapper {
  class Side {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.AvatarAutoMapper.Side;
    static Left: UnityEditor.AvatarAutoMapper.Side;
    static Right: UnityEditor.AvatarAutoMapper.Side;
  }
}
declare namespace UnityEditor {
  class AvatarBipedMapper {
    // constructors
    constructor();
    // methods
    static IsBiped(root: any, report: any): boolean;
    static MapBones(root: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AvatarColliderEditor {
    // constructors
    constructor();
    // methods
    Enable(inspector: UnityEditor.AvatarEditor): void;
    Disable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    ApplyAndImport(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AvatarControl {
  class BodyPartColor {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Off: UnityEditor.AvatarControl.BodyPartColor;
    static Green: UnityEditor.AvatarControl.BodyPartColor;
    static Red: UnityEditor.AvatarControl.BodyPartColor;
    static IKGreen: UnityEditor.AvatarControl.BodyPartColor;
    static IKRed: UnityEditor.AvatarControl.BodyPartColor;
  }
}
declare namespace UnityEditor {
  class AvatarControl {
    // constructors
    constructor();
    // methods
    static ShowBoneMapping(shownBodyView: number, bodyPartCallback: ((UnityEditor.BodyPart) => UnityEditor.AvatarControl.BodyPartColor), bones: UnityEditor.AvatarSetupTool.BoneWrapper[], serializedObject: UnityEditor.SerializedObject, editor: UnityEditor.AvatarMappingEditor): number;
    static DrawBodyParts(rect: any, shownBodyView: number, bodyPartCallback: ((UnityEditor.BodyPart) => UnityEditor.AvatarControl.BodyPartColor)): void;
    static GetViewsThatContainBone(bone: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AvatarControl {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    Silhouettes: any[];
    BodyPart: any[];
    ButtonSize: any;
  }
}
declare namespace UnityEditor {
  class AvatarEditor {
    // constructors
    constructor();
    // methods
    UseDefaultMargins(): boolean;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    Update(): void;
    HasFrameBounds(): boolean;
    OnGetFrameBounds(): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly prefab: any;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AvatarEditor {
  class EditMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotEditing: UnityEditor.AvatarEditor.EditMode;
    static Starting: UnityEditor.AvatarEditor.EditMode;
    static Editing: UnityEditor.AvatarEditor.EditMode;
    static Stopping: UnityEditor.AvatarEditor.EditMode;
  }
}
declare namespace UnityEditor.AvatarEditor {
  class SceneStateCache {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    view: UnityEditor.SceneView;
    state: UnityEditor.SceneView.SceneViewState;
  }
}
declare namespace UnityEditor.AvatarEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    tabs: any[];
    editCharacter: any;
    reset: any;
  }
}
declare namespace UnityEditor {
  class AvatarHandleEditor {
    // constructors
    constructor();
    // methods
    Enable(inspector: UnityEditor.AvatarEditor): void;
    Disable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    ApplyAndImport(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AvatarMappingEditor {
    // constructors
    constructor();
    // methods
    Enable(inspector: UnityEditor.AvatarEditor): void;
    Disable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    static MatchName(transformName: string, boneName: string): boolean;
    OnSceneGUI(): void;
    ApplyAndImport(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AvatarMappingEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    BodyPartMapping: any[];
    RequiredBone: any;
    DoneCharacter: any;
    mapping: any;
    clearMapping: any;
    autoMapping: any;
    bipedMapping: any;
    loadMapping: any;
    saveMapping: any;
    pose: any;
    resetPose: any;
    sampleBindPose: any;
    enforceTPose: any;
    bipedPose: any;
    ShowError: any;
    CloseError: any;
    dotFill: any;
    dotFrame: any;
    dotFrameDotted: any;
    dotSelection: any;
    box: any;
    toolbar: any;
    toolbarDropDown: any;
    errorLabel: any;
  }
}
declare namespace UnityEditor {
  class AvatarMaskInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    IsMaskEmpty(): boolean;
    IsMaskUpToDate(): boolean;
    OnBodyInspectorGUI(): void;
    OnTransformInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    canImport: boolean;
    clipInfo: UnityEditor.AnimationClipInfoProperties;
    showBody: boolean;
    readonly humanTransforms: string[];
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AvatarMaskInspector {
  class NodeInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    m_Expanded: boolean;
    m_Show: boolean;
    m_Enabled: boolean;
    m_ParentIndex: number;
    m_ChildIndices: any;
    m_Depth: number;
    m_Path: UnityEditor.SerializedProperty;
    m_Weight: UnityEditor.SerializedProperty;
    m_Name: string;
  }
}
declare namespace UnityEditor.AvatarMaskInspector {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static MaskDefinition: any;
    static MaskDefinitionOpt: any[];
    static BodyMask: any;
    static TransformMask: any;
  }
}
declare namespace UnityEditor {
  class AvatarMaskUtility {
    // constructors
    constructor();
    // methods
    static GetAvatarHumanTransform(so: UnityEditor.SerializedObject, refTransformsPath: string[]): string[];
    static UpdateTransformMask(mask: UnityEditor.Animations.AvatarMask, refTransformsPath: string[], humanTransforms: string[]): void;
    static UpdateTransformMask(transformMask: UnityEditor.SerializedProperty, refTransformsPath: string[], humanTransforms: string[]): void;
    static SetActiveHumanTransforms(mask: UnityEditor.Animations.AvatarMask, humanTransforms: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AvatarMuscleEditor {
    // constructors
    constructor();
    // methods
    Enable(inspector: UnityEditor.AvatarEditor): void;
    OnInspectorGUI(): void;
    DrawMuscleHandle(t: any, humanId: number): void;
    OnSceneGUI(): void;
    Disable(): void;
    OnDestroy(): void;
    ApplyAndImport(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AvatarMuscleEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    muscleBodyGroup: any[];
    muscleTypeGroup: any[];
    armTwist: any;
    foreArmTwist: any;
    upperLegTwist: any;
    legTwist: any;
    armStretch: any;
    legStretch: any;
    feetSpacing: any;
    hasTranslationDoF: any;
    box: any;
    title: any;
    toolbar: any;
    toolbarDropDown: any;
    muscle: any;
    resetMuscle: any;
  }
}
declare namespace UnityEditor {
  class AvatarPreview {
    // constructors
    constructor(previewObjectInScene: any, objectOnSameAsset: any);
    // methods
    static GetAnimationType(go: any): UnityEditor.ModelImporterAnimationType;
    static GetAnimationType(motion: any): UnityEditor.ModelImporterAnimationType;
    static IsValidPreviewGameObject(target: any, requiredClipType: UnityEditor.ModelImporterAnimationType): boolean;
    static FindBestFittingRenderableGameObjectFromModelAsset(asset: any, animationType: UnityEditor.ModelImporterAnimationType): any;
    ResetPreviewInstance(): void;
    OnDestroy(): void;
    DoSelectionChange(): void;
    DoPreviewSettings(): void;
    DoRenderPreview(previewRect: any, background: any): void;
    AvatarTimeControlGUI(rect: any): void;
    DoAvatarPreviewDrag(type: any): void;
    DoAvatarPreviewOrbit(evt: any, previewRect: any): void;
    DoAvatarPreviewPan(evt: any): void;
    DoAvatarPreviewFrame(evt: any, type: any, previewRect: any): void;
    DoAvatarPreviewZoom(evt: any, delta: number): void;
    DoAvatarPreview(rect: any, background: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly IKOnFeet: boolean;
    ShowIKOnFeetButton: boolean;
    readonly Animator: any;
    readonly PreviewObject: any;
    readonly animationClipType: UnityEditor.ModelImporterAnimationType;
    readonly bodyPosition: any;
    // fields
    timeControl: UnityEditor.TimeControl;
    fps: number;
  }
}
declare namespace UnityEditor.AvatarPreview {
  class PreviewPopupOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Auto: UnityEditor.AvatarPreview.PreviewPopupOptions;
    static DefaultModel: UnityEditor.AvatarPreview.PreviewPopupOptions;
    static Other: UnityEditor.AvatarPreview.PreviewPopupOptions;
  }
}
declare namespace UnityEditor.AvatarPreview {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    speedScale: any;
    pivot: any;
    ik: any;
    avatarIcon: any;
    preButton: any;
    preSlider: any;
    preSliderThumb: any;
    preLabel: any;
  }
}
declare namespace UnityEditor.AvatarPreview {
  class ViewTool {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.AvatarPreview.ViewTool;
    static Pan: UnityEditor.AvatarPreview.ViewTool;
    static Zoom: UnityEditor.AvatarPreview.ViewTool;
    static Orbit: UnityEditor.AvatarPreview.ViewTool;
  }
}
declare namespace UnityEditor {
  class AvatarPreviewSelection {
    // constructors
    constructor();
    // methods
    static SetPreview(type: UnityEditor.ModelImporterAnimationType, go: any): void;
    static GetPreview(type: UnityEditor.ModelImporterAnimationType): any;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class BonePoseData {
    // constructors
    constructor(dir: any, globalSpace: boolean, maxAngleDiff: number);
    constructor(dir: any, globalSpace: boolean, maxAngleDiff: number, children: number[]);
    constructor(dir: any, globalSpace: boolean, maxAngleDiff: number, planeNormal: any, children: number[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    direction: any;
    compareInGlobalSpace: boolean;
    maxAngle: number;
    childIndices: number[];
    planeNormal: any;
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class BoneWrapper {
    // constructors
    constructor(humanBoneName: string, serializedObject: UnityEditor.SerializedObject, bones: any);
    // methods
    Reset(serializedObject: UnityEditor.SerializedObject, bones: any): void;
    Serialize(serializedObject: UnityEditor.SerializedObject): void;
    GetSerializedProperty(serializedObject: UnityEditor.SerializedObject, createIfMissing: boolean): UnityEditor.SerializedProperty;
    BoneDotGUI(rect: any, boneIndex: number, doClickSelect: boolean, doDragDrop: boolean, serializedObject: UnityEditor.SerializedObject, editor: UnityEditor.AvatarMappingEditor): void;
    HandleClickSelection(selectRect: any, boneIndex: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly humanBoneName: string;
    readonly messageName: string;
    // fields
    error: string;
    bone: any;
    state: UnityEditor.BoneState;
    static kIconSize: number;
  }
}
declare namespace UnityEditor {
  class AvatarSetupTool {
    // constructors
    private constructor();
    // methods
    static GetModelBones(root: any, includeAll: boolean, humanBones: UnityEditor.AvatarSetupTool.BoneWrapper[]): any;
    static GetFirstHumanBoneAncestor(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], boneIndex: number): number;
    static GetHumanBoneChild(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], boneIndex: number): number;
    static GetHumanBones(serializedObject: UnityEditor.SerializedObject, actualBones: any): UnityEditor.AvatarSetupTool.BoneWrapper[];
    static ClearAll(serializedObject: UnityEditor.SerializedObject): void;
    static ClearHumanBoneArray(serializedObject: UnityEditor.SerializedObject): void;
    static ClearSkeletonBoneArray(serializedObject: UnityEditor.SerializedObject): void;
    static AutoSetupOnInstance(modelPrefab: any, modelImporterSerializedObject: UnityEditor.SerializedObject): void;
    static IsPoseValidOnInstance(modelPrefab: any, modelImporterSerializedObject: UnityEditor.SerializedObject): boolean;
    static AutoSetup(modelPrefab: any, modelInstance: any, modelImporterSerializedObject: UnityEditor.SerializedObject): void;
    static TestAndValidateAutoSetup(modelAsset: any): boolean;
    static DebugTransformTree(tr: any, bones: any, level: number): void;
    static FindSkeletonBone(serializedObject: UnityEditor.SerializedObject, t: any, createMissing: boolean, isRoot: boolean): UnityEditor.SerializedProperty;
    static FindSkeletonBone(skeletonBoneArray: UnityEditor.SerializedProperty, t: any, createMissing: boolean, isRoot: boolean): UnityEditor.SerializedProperty;
    static CopyPose(go: any, source: any): void;
    static GetBindPoseBonePositionRotation(skinMatrix: any, boneMatrix: any, bone: any, position: any, rotation: any): void;
    static SampleBindPose(go: any): void;
    static ShowBindPose(skin: any): void;
    static TransferPoseToDescription(serializedObject: UnityEditor.SerializedObject, root: any): void;
    static TransferDescriptionToPose(serializedObject: UnityEditor.SerializedObject, root: any): void;
    static IsPoseValid(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): boolean;
    static GetPoseError(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): number;
    static MakePoseValid(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): void;
    static GetBoneAlignmentError(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], avatarOrientation: any, boneIndex: number): number;
    static MakeBoneAlignmentValid(bones: UnityEditor.AvatarSetupTool.BoneWrapper[], avatarOrientation: any, boneIndex: number): void;
    static AvatarComputeOrientation(bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): any;
    static AvatarComputeOrientation(leftUpLeg: any, rightUpLeg: any, leftArm: any, rightArm: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class SkinTransformHierarchySorter {
    // constructors
    constructor();
    // methods
    Compare(skinA: any, skinB: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.AvatarSetupTool {
  class TransformHierarchySorter {
    // constructors
    constructor();
    // methods
    Compare(a: any, b: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AvatarSkeletonDrawer {
    // constructors
    constructor();
    // methods
    static DrawSkeleton(reference: any, actualBones: any): void;
    static DrawSkeleton(reference: any, actualBones: any, bones: UnityEditor.AvatarSetupTool.BoneWrapper[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class AvatarSubEditor {
    // constructors
    constructor();
    // methods
    Enable(inspector: UnityEditor.AvatarEditor): void;
    Disable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    ApplyAndImport(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class AvatarUtility {
    // constructors
    constructor();
    // methods
    static SetHumanPose(animator: any, dof: number[]): void;
    static HumanGetColliderTransform(avatar: any, index: number, boneX: UnityEditor.TransformX, colliderX: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class BaseHierarchySort {
    // constructors
    private constructor();
    // methods
    Compare(lhs: any, rhs: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor {
  class BaseInspectView {
    // constructors
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    // methods
    DrawInstructionList(): void;
    UpdateInstructions(): void;
    DrawSelectedInstructionDetails(): void;
    Unselect(): void;
    SelectRow(index: number): void;
    ShowOverlay(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListViewState: UnityEditor.ListViewState;
  }
}
declare namespace UnityEditor.BaseInspectView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    centeredLabel: any;
  }
}
declare namespace UnityEditor {
  class BillboardAssetInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    HasPreviewGUI(): boolean;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewSettings(): void;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.BillboardAssetInspector {
  class GUIStyles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Shaded: any;
    m_Geometry: any;
    m_DropdownButton: any;
  }
}
declare namespace UnityEditor {
  class BillboardRendererInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.BlendTreeInspector {
  class ChildPropertyToCompute {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Threshold: UnityEditor.BlendTreeInspector.ChildPropertyToCompute;
    static PositionX: UnityEditor.BlendTreeInspector.ChildPropertyToCompute;
    static PositionY: UnityEditor.BlendTreeInspector.ChildPropertyToCompute;
  }
}
declare namespace UnityEditor {
  class BlendTreeInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    ClickDragFloat(position: any, value: number): number;
    ClickDragFloat(position: any, value: number, alignRight: boolean): number;
    EndDragChild(list: UnityEditorInternal.ReorderableList): void;
    AddButton(rect: any, list: UnityEditorInternal.ReorderableList): void;
    static DeleteBlendTreeDialog(toDelete: string): boolean;
    RemoveButton(list: UnityEditorInternal.ReorderableList): void;
    DrawChild(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnDisable(): void;
    OnDestroy(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.BlendTreeInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    triangleLeft: any;
    triangleRight: any;
    blendPosition: any;
    clickDragFloatFieldLeft: any;
    clickDragFloatFieldRight: any;
    clickDragFloatLabelLeft: any;
    clickDragFloatLabelRight: any;
    headerIcon: any;
    errorStyle: any;
    speedIcon: any;
    mirrorIcon: any;
    pointIcon: any;
    pointIconSelected: any;
    pointIconOverlay: any;
    samplerIcon: any;
    visBgColor: any;
    visWeightColor: any;
    visWeightShapeColor: any;
    visWeightLineColor: any;
    visPointColor: any;
    visPointEmptyColor: any;
    visPointOverlayColor: any;
    visSamplerColor: any;
  }
}
declare namespace UnityEditor {
  class BodyMaskEditor {
    // constructors
    constructor();
    // methods
    static Show(bodyMask: UnityEditor.SerializedProperty, count: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.BodyMaskEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    UnityDude: any;
    PickingTexture: any;
    BodyPart: any[];
  }
}
declare namespace UnityEditor {
  class BodyPart {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.BodyPart;
    static Avatar: UnityEditor.BodyPart;
    static Body: UnityEditor.BodyPart;
    static Head: UnityEditor.BodyPart;
    static LeftArm: UnityEditor.BodyPart;
    static LeftFingers: UnityEditor.BodyPart;
    static RightArm: UnityEditor.BodyPart;
    static RightFingers: UnityEditor.BodyPart;
    static LeftLeg: UnityEditor.BodyPart;
    static RightLeg: UnityEditor.BodyPart;
    static Last: UnityEditor.BodyPart;
  }
}
declare namespace UnityEditor {
  class BoneState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.BoneState;
    static NotFound: UnityEditor.BoneState;
    static Duplicate: UnityEditor.BoneState;
    static InvalidHierarchy: UnityEditor.BoneState;
    static BoneLenghtIsZero: UnityEditor.BoneState;
    static Valid: UnityEditor.BoneState;
  }
}
declare namespace UnityEditor {
  class BoxCollider2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    OnSceneGUI(): void;
    FinalizeInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class BoxColliderEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class BoxEditor {
    // constructors
    constructor(useLossyScale: boolean, controlIdHint: number);
    constructor(useLossyScale: boolean, controlIdHint: number, disableZaxis: boolean);
    // methods
    OnEnable(): void;
    OnDisable(): void;
    SetAlwaysDisplayHandles(enable: boolean): void;
    OnSceneGUI(transform: any, color: any, center: any, size: any): boolean;
    OnSceneGUI(transform: any, color: any, handlesOnly: boolean, center: any, size: any): boolean;
    OnSceneGUI(transform: any, color: any, handlesOnly: boolean, center: any, size: any): boolean;
    OnSceneGUI(transform: any, boxColor: any, midPointHandleColor: any, handlesOnly: boolean, center: any, size: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    allowNegativeSize: boolean;
    backfaceAlphaMultiplier: number;
    // fields
    drawMethodForHandles: ((number, any, any, number) => void);
    getHandleSizeMethod: ((any) => number);
  }
}
declare namespace UnityEditor {
  class Brush {
    // constructors
    constructor();
    // methods
    Load(brushTex: any, size: number): boolean;
    GetStrengthInt(ix: number, iy: number): number;
    Dispose(): void;
    GetPreviewProjector(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class BuildAssetBundleOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.BuildAssetBundleOptions;
    static UncompressedAssetBundle: UnityEditor.BuildAssetBundleOptions;
    static CollectDependencies: UnityEditor.BuildAssetBundleOptions;
    static CompleteAssets: UnityEditor.BuildAssetBundleOptions;
    static DisableWriteTypeTree: UnityEditor.BuildAssetBundleOptions;
    static DeterministicAssetBundle: UnityEditor.BuildAssetBundleOptions;
    static ForceRebuildAssetBundle: UnityEditor.BuildAssetBundleOptions;
    static IgnoreTypeTreeChanges: UnityEditor.BuildAssetBundleOptions;
    static AppendHashToAssetBundleName: UnityEditor.BuildAssetBundleOptions;
    static ChunkBasedCompression: UnityEditor.BuildAssetBundleOptions;
    static StrictMode: UnityEditor.BuildAssetBundleOptions;
    static DryRunBuild: UnityEditor.BuildAssetBundleOptions;
  }
}
declare namespace UnityEditor {
  class BuildOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.BuildOptions;
    static Development: UnityEditor.BuildOptions;
    static AutoRunPlayer: UnityEditor.BuildOptions;
    static ShowBuiltPlayer: UnityEditor.BuildOptions;
    static BuildAdditionalStreamedScenes: UnityEditor.BuildOptions;
    static AcceptExternalModificationsToPlayer: UnityEditor.BuildOptions;
    static InstallInBuildFolder: UnityEditor.BuildOptions;
    static WebPlayerOfflineDeployment: UnityEditor.BuildOptions;
    static ConnectWithProfiler: UnityEditor.BuildOptions;
    static AllowDebugging: UnityEditor.BuildOptions;
    static SymlinkLibraries: UnityEditor.BuildOptions;
    static UncompressedAssetBundle: UnityEditor.BuildOptions;
    static StripDebugSymbols: UnityEditor.BuildOptions;
    static CompressTextures: UnityEditor.BuildOptions;
    static ConnectToHost: UnityEditor.BuildOptions;
    static EnableHeadlessMode: UnityEditor.BuildOptions;
    static BuildScriptsOnly: UnityEditor.BuildOptions;
    static Il2CPP: UnityEditor.BuildOptions;
    static ForceEnableAssertions: UnityEditor.BuildOptions;
    static ForceOptimizeScriptCompilation: UnityEditor.BuildOptions;
    static ComputeCRC: UnityEditor.BuildOptions;
    static StrictMode: UnityEditor.BuildOptions;
  }
}
declare namespace UnityEditor {
  class BuildPackageResult {
    // constructors
    private constructor();
    // methods
    Parse(response: UnityEditor.AssetStoreResponse): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor {
  class BuildPipeline {
    // constructors
    constructor();
    // methods
    static GetBuildTargetGroup(platform: UnityEditor.BuildTarget): UnityEditor.BuildTargetGroup;
    static PushAssetDependencies(): void;
    static PopAssetDependencies(): void;
    static BuildPlayer(levels: UnityEditor.EditorBuildSettingsScene[], locationPathName: string, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static BuildPlayer(levels: string[], locationPathName: string, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static BuildPlayer(buildPlayerOptions: UnityEditor.BuildPlayerOptions): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget, crc: any, options: UnityEditor.BuildOptions): string;
    static BuildStreamedSceneAssetBundle(levels: string[], locationPath: string, target: UnityEditor.BuildTarget, crc: any): string;
    static BuildAssetBundle(mainAsset: any, assets: any[], pathName: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundle(mainAsset: any, assets: any[], pathName: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions): boolean;
    static BuildAssetBundle(mainAsset: any, assets: any[], pathName: string): boolean;
    static BuildAssetBundle(mainAsset: any, assets: any[], pathName: string, crc: any, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundle(mainAsset: any, assets: any[], pathName: string, crc: any, assetBundleOptions: UnityEditor.BuildAssetBundleOptions): boolean;
    static BuildAssetBundle(mainAsset: any, assets: any[], pathName: string, crc: any): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: any[], assetNames: string[], pathName: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: any[], assetNames: string[], pathName: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: any[], assetNames: string[], pathName: string): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: any[], assetNames: string[], pathName: string, crc: any, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: any[], assetNames: string[], pathName: string, crc: any, assetBundleOptions: UnityEditor.BuildAssetBundleOptions): boolean;
    static BuildAssetBundleExplicitAssetNames(assets: any[], assetNames: string[], pathName: string, crc: any): boolean;
    static BuildAssetBundles(outputPath: string): any;
    static BuildAssetBundles(outputPath: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions): any;
    static BuildAssetBundles(outputPath: string, assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): any;
    static BuildAssetBundles(outputPath: string, builds: UnityEditor.AssetBundleBuild[]): any;
    static BuildAssetBundles(outputPath: string, builds: UnityEditor.AssetBundleBuild[], assetBundleOptions: UnityEditor.BuildAssetBundleOptions): any;
    static BuildAssetBundles(outputPath: string, builds: UnityEditor.AssetBundleBuild[], assetBundleOptions: UnityEditor.BuildAssetBundleOptions, targetPlatform: UnityEditor.BuildTarget): any;
    static GetCRCForAssetBundle(targetPath: string, crc: any): boolean;
    static GetHashForAssetBundle(targetPath: string, hash: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly isBuildingPlayer: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class BuildPlayerOptions {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    scenes: string[];
    locationPathName: string;
    assetBundleManifestPath: string;
    target: UnityEditor.BuildTarget;
    options: UnityEditor.BuildOptions;
    // fields
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class BuildPlatform {
    // constructors
    constructor(locTitle: string, iconId: string, targetGroup: UnityEditor.BuildTargetGroup, forceShowTarget: boolean);
    constructor(locTitle: string, tooltip: string, iconId: string, targetGroup: UnityEditor.BuildTargetGroup, forceShowTarget: boolean);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly DefaultTarget: UnityEditor.BuildTarget;
    // fields
    name: string;
    title: any;
    smallIcon: any;
    targetGroup: UnityEditor.BuildTargetGroup;
    forceShowTarget: boolean;
    tooltip: string;
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class BuildPlatforms {
    // constructors
    private constructor();
    // methods
    GetBuildTargetDisplayName(target: UnityEditor.BuildTarget): string;
    BuildPlatformIndexFromTargetGroup(group: UnityEditor.BuildTargetGroup): number;
    BuildPlatformFromTargetGroup(group: UnityEditor.BuildTargetGroup): UnityEditor.BuildPlayerWindow.BuildPlatform;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    buildPlatforms: UnityEditor.BuildPlayerWindow.BuildPlatform[];
  }
}
declare namespace UnityEditor {
  class BuildPlayerWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class SceneSorter {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.BuildPlayerWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    GetTargetNotInstalled(index: number, item: number): any;
    GetDownloadErrorForTarget(target: UnityEditor.BuildTarget): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static invalidColorSpaceMessage: any;
    selected: any;
    box: any;
    title: any;
    evenRow: any;
    oddRow: any;
    platformSelector: any;
    toggle: any;
    levelString: any;
    levelStringCounter: any;
    toggleSize: any;
    noSessionDialogText: any;
    platformTitle: any;
    switchPlatform: any;
    build: any;
    export: any;
    buildAndRun: any;
    scenesInBuild: any;
    activePlatformIcon: any;
    static kButtonWidth: number;
    notLicensedMessages: any[];
    debugBuild: any;
    profileBuild: any;
    allowDebugging: any;
    symlinkiOSLibraries: any;
    explicitNullChecks: any;
    explicitDivideByZeroChecks: any;
    enableHeadlessMode: any;
    buildScriptsOnly: any;
    forceOptimizeScriptCompilation: any;
    learnAboutUnityCloudBuild: any;
  }
}
declare namespace UnityEditor.BuildReporting {
  class BuildReport {
    // constructors
    constructor();
    // methods
    RelocateFiles(originalPathPrefix: string, newPathPrefix: string): void;
    AddFile(path: string, role: string): void;
    AddFilesRecursive(rootDir: string, role: string): void;
    DeleteFile(path: string): void;
    DeleteFilesRecursive(rootDir: string): void;
    SummarizeErrors(): string;
    AddMessage(messageType: any, message: string): void;
    BeginBuildStepNoTiming(stepName: string): void;
    BeginBuildStep(stepName: string): void;
    AddAppendix(obj: any): void;
    GetAppendices(type: any): any[];
    static GetLatestReport(): UnityEditor.BuildReporting.BuildReport;
    SendChanged(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly crc: number;
    readonly totalTimeMS: number;
    readonly totalSize: number;
    readonly buildTarget: UnityEditor.BuildTarget;
    readonly buildOptions: UnityEditor.BuildOptions;
    readonly outputPath: string;
    readonly succeeded: boolean;
    readonly totalErrors: number;
    readonly totalWarnings: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.BuildReporting {
  class BuildReportHelper {
    // constructors
    private constructor();
    // methods
    static OnAddedExecutable(report: UnityEditor.BuildReporting.BuildReport, fileIndex: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.BuildReporting {
  class StrippingInfo {
    // constructors
    constructor();
    // methods
    OnBeforeSerialize(): void;
    OnAfterDeserialize(): void;
    RegisterDependency(obj: string, depends: string): void;
    AddModule(module: string): void;
    SetIcon(dependency: string, icon: string): void;
    AddModuleSize(module: string, size: number): void;
    static GetBuildReportData(report: UnityEditor.BuildReporting.BuildReport): UnityEditor.BuildReporting.StrippingInfo;
    static ModuleName(module: string): string;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    static RequiredByScripts: string;
    serializedDependencies: any;
    modules: any;
    serializedSizes: any;
    dependencies: any;
    sizes: any;
    icons: any;
    totalSize: number;
  }
}
declare namespace UnityEditor.BuildReporting.StrippingInfo {
  class SerializedDependency {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    key: string;
    value: any;
    icon: string;
  }
}
declare namespace UnityEditor {
  class BuildTarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static StandaloneOSXUniversal: UnityEditor.BuildTarget;
    static StandaloneOSXIntel: UnityEditor.BuildTarget;
    static StandaloneWindows: UnityEditor.BuildTarget;
    static WebPlayer: UnityEditor.BuildTarget;
    static WebPlayerStreamed: UnityEditor.BuildTarget;
    static iOS: UnityEditor.BuildTarget;
    static PS3: UnityEditor.BuildTarget;
    static XBOX360: UnityEditor.BuildTarget;
    static Android: UnityEditor.BuildTarget;
    static StandaloneLinux: UnityEditor.BuildTarget;
    static StandaloneWindows64: UnityEditor.BuildTarget;
    static WebGL: UnityEditor.BuildTarget;
    static WSAPlayer: UnityEditor.BuildTarget;
    static StandaloneLinux64: UnityEditor.BuildTarget;
    static StandaloneLinuxUniversal: UnityEditor.BuildTarget;
    static WP8Player: UnityEditor.BuildTarget;
    static StandaloneOSXIntel64: UnityEditor.BuildTarget;
    static BlackBerry: UnityEditor.BuildTarget;
    static Tizen: UnityEditor.BuildTarget;
    static PSP2: UnityEditor.BuildTarget;
    static PS4: UnityEditor.BuildTarget;
    static PSM: UnityEditor.BuildTarget;
    static XboxOne: UnityEditor.BuildTarget;
    static SamsungTV: UnityEditor.BuildTarget;
    static N3DS: UnityEditor.BuildTarget;
    static WiiU: UnityEditor.BuildTarget;
    static tvOS: UnityEditor.BuildTarget;
    static iPhone: UnityEditor.BuildTarget;
    static BB10: UnityEditor.BuildTarget;
    static MetroPlayer: UnityEditor.BuildTarget;
    static NoTarget: UnityEditor.BuildTarget;
  }
}
declare namespace UnityEditor {
  class BuildTargetGroup {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unknown: UnityEditor.BuildTargetGroup;
    static Standalone: UnityEditor.BuildTargetGroup;
    static WebPlayer: UnityEditor.BuildTargetGroup;
    static iPhone: UnityEditor.BuildTargetGroup;
    static iOS: UnityEditor.BuildTargetGroup;
    static PS3: UnityEditor.BuildTargetGroup;
    static XBOX360: UnityEditor.BuildTargetGroup;
    static Android: UnityEditor.BuildTargetGroup;
    static WebGL: UnityEditor.BuildTargetGroup;
    static WSA: UnityEditor.BuildTargetGroup;
    static Metro: UnityEditor.BuildTargetGroup;
    static WP8: UnityEditor.BuildTargetGroup;
    static BlackBerry: UnityEditor.BuildTargetGroup;
    static Tizen: UnityEditor.BuildTargetGroup;
    static PSP2: UnityEditor.BuildTargetGroup;
    static PS4: UnityEditor.BuildTargetGroup;
    static PSM: UnityEditor.BuildTargetGroup;
    static XboxOne: UnityEditor.BuildTargetGroup;
    static SamsungTV: UnityEditor.BuildTargetGroup;
    static N3DS: UnityEditor.BuildTargetGroup;
    static WiiU: UnityEditor.BuildTargetGroup;
    static tvOS: UnityEditor.BuildTargetGroup;
  }
}
declare namespace UnityEditor {
  class BuildVerifier {
    // constructors
    private constructor();
    // methods
    static VerifyBuild(target: UnityEditor.BuildTarget, managedDllFolder: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class BuiltinResource {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Name: string;
    m_InstanceID: number;
  }
}
declare namespace UnityEditor {
  class BumpMapSettingsFixingWindow {
    // constructors
    constructor();
    // methods
    static ShowWindow(paths: string[]): void;
    SetPaths(paths: string[]): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.BumpMapSettingsFixingWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    selected: any;
    box: any;
    button: any;
    overviewText: any;
  }
}
declare namespace UnityEditor {
  class BuoyancyEffector2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ButtonWithAnimatedIconRotation {
    // constructors
    constructor(angleCallback: (() => number), repaintCallback: (() => void), repaintsPerSecond: number, mouseDownButton: boolean);
    // methods
    OnGUI(rect: any, guiContent: any, animate: boolean, style: any): boolean;
    Clear(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class CacheServerMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Local: UnityEditor.CacheServerPreferences.CacheServerMode;
    static Remote: UnityEditor.CacheServerPreferences.CacheServerMode;
    static Disabled: UnityEditor.CacheServerPreferences.CacheServerMode;
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class ConnectionState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unknown: UnityEditor.CacheServerPreferences.ConnectionState;
    static Success: UnityEditor.CacheServerPreferences.ConnectionState;
    static Failure: UnityEditor.CacheServerPreferences.ConnectionState;
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    cacheFolderLocation: any;
  }
}
declare namespace UnityEditor {
  class CacheServerPreferences {
    // constructors
    constructor();
    // methods
    static ReadPreferences(): void;
    static WritePreferences(): void;
    static OnGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.CacheServerPreferences {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static browse: any;
    static maxCacheSize: any;
    static customCacheLocation: any;
    static cacheFolderLocation: any;
    static cleanCache: any;
    static browseCacheLocation: any;
    static cacheSizeIs: any;
  }
}
declare namespace UnityEditor {
  class CallbackController {
    // constructors
    constructor(callback: (() => void), callbacksPerSecond: number);
    // methods
    Start(): void;
    Stop(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly active: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class CallbackOrderAttribute {
    // constructors
    private constructor();
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.Callbacks {
  class DidReloadScripts {
    // constructors
    constructor();
    constructor(callbackOrder: number);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.Callbacks {
  class OnOpenAssetAttribute {
    // constructors
    constructor();
    constructor(callbackOrder: number);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.Callbacks {
  class PostProcessBuildAttribute {
    // constructors
    constructor();
    constructor(callbackOrder: number);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.Callbacks {
  class PostProcessSceneAttribute {
    // constructors
    constructor();
    constructor(callbackOrder: number);
    constructor(callbackOrder: number, version: number);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.Callbacks {
  class RegisterPluginsAttribute {
    // constructors
    constructor();
    constructor(callbackOrder: number);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CameraController {
    // constructors
    private constructor();
    // methods
    Update(cameraState: UnityEditor.CameraState, cam: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CameraControllerStandard {
    // constructors
    constructor();
    // methods
    Update(cameraState: UnityEditor.CameraState, cam: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly currentViewTool: UnityEditor.ViewTool;
    // fields
  }
}
declare namespace UnityEditor {
  class CameraEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    OnOverlayGUI(target: any, sceneView: UnityEditor.SceneView): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.CameraEditor {
  class ProjectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Perspective: UnityEditor.CameraEditor.ProjectionType;
    static Orthographic: UnityEditor.CameraEditor.ProjectionType;
  }
}
declare namespace UnityEditor.CameraEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static iconRemove: any;
    static invisibleButton: any;
  }
}
declare namespace UnityEditor {
  class CameraState {
    // constructors
    constructor();
    // methods
    GetCameraDistance(): number;
    FixNegativeSize(): void;
    UpdateCamera(camera: any): void;
    Clone(): UnityEditor.CameraState;
    Copy(cameraStateIn: UnityEditor.CameraState): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    pivot: UnityEditor.AnimatedValues.AnimVector3;
    rotation: UnityEditor.AnimatedValues.AnimQuaternion;
    viewSize: UnityEditor.AnimatedValues.AnimFloat;
    // fields
  }
}
declare namespace UnityEditor {
  class CanEditMultipleObjects {
    // constructors
    constructor();
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CanvasEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.CanvasEditor {
  class PixelPerfect {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Inherit: UnityEditor.CanvasEditor.PixelPerfect;
    static On: UnityEditor.CanvasEditor.PixelPerfect;
    static Off: UnityEditor.CanvasEditor.PixelPerfect;
  }
}
declare namespace UnityEditor.CanvasEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static eventCamera: any;
    static renderCamera: any;
    static sortingOrder: any;
    static s_RootAndNestedMessage: string;
    static m_SortingLayerStyle: any;
    static targetDisplay: any;
    static m_SortingOrderStyle: any;
  }
}
declare namespace UnityEditor {
  class CapsuleCollider2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    OnSceneGUI(): void;
    FinalizeInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CapsuleColliderEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ChangedCurve {
    // constructors
    constructor(curve: any, curveId: number, binding: UnityEditor.EditorCurveBinding);
    // methods
    GetHashCode(): number;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    curve: any;
    curveId: number;
    binding: UnityEditor.EditorCurveBinding;
  }
}
declare namespace UnityEditor {
  class ChangeFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ChangeFlags;
    static Modified: UnityEditor.ChangeFlags;
    static Renamed: UnityEditor.ChangeFlags;
    static Moved: UnityEditor.ChangeFlags;
    static Deleted: UnityEditor.ChangeFlags;
    static Undeleted: UnityEditor.ChangeFlags;
    static Created: UnityEditor.ChangeFlags;
  }
}
declare namespace UnityEditor {
  class Changeset {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    changeset: number;
    message: string;
    date: string;
    owner: string;
    items: UnityEditor.ChangesetItem[];
  }
}
declare namespace UnityEditor {
  class ChangesetItem {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    fullPath: string;
    guid: string;
    assetOperations: string;
    assetIsDir: number;
    changeFlags: UnityEditor.ChangeFlags;
  }
}
declare namespace UnityEditor {
  class CharacterControllerEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CircleCollider2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnDisable(): void;
    FinalizeInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ClampVelocityModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.ClampVelocityModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    x: any;
    y: any;
    z: any;
    dampen: any;
    magnitude: any;
    separateAxes: any;
    space: any;
    spaces: string[];
  }
}
declare namespace UnityEditor {
  class ClipAnimationInfoCurve {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    curve: any;
  }
}
declare namespace UnityEditor {
  class ClipAnimationMaskType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CreateFromThisModel: UnityEditor.ClipAnimationMaskType;
    static CopyFromOther: UnityEditor.ClipAnimationMaskType;
    static None: UnityEditor.ClipAnimationMaskType;
  }
}
declare namespace UnityEditor {
  class ClothInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    VisualizationMenuSetMaxDistanceMode(): void;
    VisualizationMenuSetCollisionSphereMode(): void;
    VisualizationMenuToggleManipulateBackfaces(): void;
    DrawColorBox(gradientTex: any, col: any): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editing: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ClothInspector {
  class DrawMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static MaxDistance: UnityEditor.ClothInspector.DrawMode;
    static CollisionSphereDistance: UnityEditor.ClothInspector.DrawMode;
  }
}
declare namespace UnityEditor.ClothInspector {
  class RectSelectionMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Replace: UnityEditor.ClothInspector.RectSelectionMode;
    static Add: UnityEditor.ClothInspector.RectSelectionMode;
    static Substract: UnityEditor.ClothInspector.RectSelectionMode;
  }
}
declare namespace UnityEditor.ClothInspector {
  class ToolMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Select: UnityEditor.ClothInspector.ToolMode;
    static Paint: UnityEditor.ClothInspector.ToolMode;
  }
}
declare namespace UnityEditor {
  class ClothInspectorState {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    DrawMode: UnityEditor.ClothInspector.DrawMode;
    ManipulateBackfaces: boolean;
    PaintMaxDistanceEnabled: boolean;
    PaintCollisionSphereDistanceEnabled: boolean;
    PaintMaxDistance: number;
    PaintCollisionSphereDistance: number;
    ToolMode: UnityEditor.ClothInspector.ToolMode;
  }
}
declare namespace UnityEditor.CloudBuild {
  class CloudBuild {
    // constructors
    constructor();
    // methods
    GetScmCandidates(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CodeStrippingUtils {
    // constructors
    constructor();
    // methods
    static GetModulesFromICalls(icallsListFile: string): any;
    static InjectCustomDependencies(strippingInfo: UnityEditor.BuildReporting.StrippingInfo, nativeClasses: any): void;
    static GenerateDependencies(strippedAssemblyDir: string, icallsListFile: string, rcr: UnityEditor.RuntimeClassRegistry, doStripping: boolean, nativeClasses: any, nativeModules: any, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider): void;
    static GetModuleWhitelist(module: string, moduleStrippingInformationFolder: string): string;
    static GetDependentModules(moduleXml: string): any;
    static WriteModuleAndClassRegistrationFile(strippedAssemblyDir: string, icallsListFile: string, outputDir: string, rcr: UnityEditor.RuntimeClassRegistry, classesToSkip: any, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider): void;
    static GetNativeModulesToRegister(nativeClasses: any, strippingInfo: UnityEditor.BuildReporting.StrippingInfo): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly BlackListNativeClasses: UnityEditor.UnityType[];
    static readonly BlackListNativeClassesDependency: any;
    static readonly UserAssemblies: string[];
    // fields
  }
}
declare namespace UnityEditor {
  class CollabHistoryWindow {
    // constructors
    private constructor();
    // methods
    static ShowHistoryWindow(): UnityEditor.CollabHistoryWindow;
    static ValidateShowHistoryWindow(): boolean;
    OnReceiveTitle(title: string): void;
    OnInitScripting(): void;
    OnEnable(): void;
    OnDestroy(): void;
    OnCollabStateChanged(info: UnityEditor.Collaboration.CollabInfo): void;
    ToggleMaximize(): void;
    Init(): void;
    OnDestroy(): void;
    OnBeforeSerialize(): void;
    OnAfterDeserialize(): void;
    GetWebViewFromURL(url: string): UnityEditor.WebView;
    OnInitScripting(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Reload(): void;
    About(): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    OnGUI(): void;
    OnBatchMode(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnBecameInvisible(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    initialOpenUrl: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class Change {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly path: string;
    readonly state: number;
    readonly isRevertable: boolean;
    readonly revertableState: number;
    readonly relatedTo: string;
    readonly isMeta: boolean;
    readonly isConflict: boolean;
    readonly isFolderMeta: boolean;
    readonly isResolved: boolean;
    readonly localStatus: string;
    readonly remoteStatus: string;
    readonly resolveStatus: string;
    // fields
  }
}
declare namespace UnityEditor.Collaboration.Change {
  class RevertableStates {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Revertable: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable_File: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable_Folder: UnityEditor.Collaboration.Change.RevertableStates;
    static Revertable_EmptyFolder: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_File: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_Folder: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_FileAdded: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_FolderAdded: UnityEditor.Collaboration.Change.RevertableStates;
    static NotRevertable_FolderContainsAdd: UnityEditor.Collaboration.Change.RevertableStates;
    static InvalidRevertableState: UnityEditor.Collaboration.Change.RevertableStates;
  }
}
declare namespace UnityEditor.Collaboration.Collab {
  class CollabStateID {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.Collaboration.Collab.CollabStateID;
    static Uninitialized: UnityEditor.Collaboration.Collab.CollabStateID;
    static Initialized: UnityEditor.Collaboration.Collab.CollabStateID;
  }
}
declare namespace UnityEditor.Collaboration.Collab {
  class CollabStates {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kCollabNone: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabSynced: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabOutOfSync: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMissing: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabCheckedOutLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabCheckedOutRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabDeletedLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabDeletedRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabAddedLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabAddedRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabConflicted: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMovedLocal: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMovedRemote: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabUpdating: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabReadOnly: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMetaFile: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabUseMine: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabUseTheir: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabChanges: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabMerged: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabPendingMerge: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabFolderMetaFile: UnityEditor.Collaboration.Collab.CollabStates;
    static kCollabInvalidState: UnityEditor.Collaboration.Collab.CollabStates;
  }
}
declare namespace UnityEditor.Collaboration {
  class Collab {
    // constructors
    constructor();
    // methods
    GetProjectPath(): string;
    IsConnected(): boolean;
    JobRunning(a_jobID: number): boolean;
    Disconnect(): void;
    GetJobProgress(jobID: number): UnityEditor.Collaboration.ProgressInfo;
    CancelJob(jobID: number): void;
    Publish(comment: string): void;
    Update(revisionID: string, updateToRevision: boolean): void;
    RevertFile(path: string, forceOverwrite: boolean): void;
    GetCollabConflicts(): UnityEditor.Collaboration.Change[];
    SetConflictResolvedMine(path: string): boolean;
    SetConflictsResolvedMine(paths: string[]): boolean;
    SetConflictResolvedTheirs(path: string): boolean;
    SetConflictsResolvedTheirs(paths: string[]): boolean;
    ClearConflictResolved(path: string): boolean;
    ClearConflictsResolved(paths: string[]): boolean;
    LaunchConflictExternalMerge(path: string): void;
    ShowConflictDifferences(path: string): void;
    ShowDifferences(path: string): void;
    GetChangesToPublish(): UnityEditor.Collaboration.Change[];
    ResyncSnapshot(): void;
    GoBackToRevision(revisionID: string, updateToRevision: boolean): void;
    SendNotification(): void;
    ResyncToRevision(revisionID: string): void;
    ClearErrors(): void;
    SetCollabEnabledForCurrentProject(enabled: boolean): void;
    OnPostprocessAssetbundleNameChanged(assetPath: string, previousAssetBundleName: string, newAssetBundleName: string): void;
    GetSoftLocks(assetGuid: string): UnityEditor.Collaboration.SoftLock[];
    WasWhitelistedRequestSent(): boolean;
    GetRevisions(): UnityEditor.Collaboration.Revision[];
    static GetProjectClientType(): string;
    static TestGetRevisions(): void;
    CancelJobWithoutException(jobId: number): void;
    GetAssetState(guid: string): UnityEditor.Collaboration.Collab.CollabStates;
    GetSelectedAssetState(): UnityEditor.Collaboration.Collab.CollabStates;
    UpdateEditorSelectionCache(): void;
    GetCollabInfo(): UnityEditor.Collaboration.CollabInfo;
    static IsDiffToolsAvailable(): boolean;
    SaveAssets(): void;
    static SwitchToDefaultMode(): void;
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: any): void;
    LogError(warning: string): void;
    LogError(warning: string, context: any): void;
    GetVersion(): number;
    GetPostprocessOrder(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly collabInfo: UnityEditor.Collaboration.CollabInfo;
    projectBrowserSingleSelectionPath: string;
    projectBrowserSingleMetaSelectionPath: string;
    static readonly instance: UnityEditor.Collaboration.Collab;
    assetPath: string;
    readonly assetImporter: UnityEditor.AssetImporter;
    preview: any;
    // fields
    currentProjectBrowserSelection: string[];
    static clientType: string[];
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly ready: boolean;
    readonly update: boolean;
    readonly publish: boolean;
    readonly inProgress: boolean;
    readonly error: boolean;
    readonly maintenance: boolean;
    readonly conflict: boolean;
    readonly whitelisted: boolean;
    readonly dirty: boolean;
    readonly refresh: boolean;
    readonly tip: string;
    readonly lastErrorMsg: string;
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabProjectHook {
    // constructors
    constructor();
    // methods
    static OnProjectWindowItemIconOverlay(guid: string, drawRect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class CollabTesting {
    // constructors
    constructor();
    // methods
    static OnCompleteJob(): void;
    static AddAction(action: (() => void)): void;
    static Execute(): void;
    static DropAll(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly ActionsCount: number;
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class Overlay {
    // constructors
    constructor();
    // methods
    static DrawOverlays(assetState: UnityEditor.Collaboration.Collab.CollabStates, itemRect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class ProgressInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly title: string;
    readonly extraInfo: string;
    readonly currentCount: number;
    readonly totalCount: number;
    readonly completed: boolean;
    readonly cancelled: boolean;
    readonly canCancel: boolean;
    readonly lastErrorString: string;
    readonly lastError: number;
    readonly percentComplete: number;
    readonly isProgressTypeCount: boolean;
    readonly isProgressTypePercent: boolean;
    readonly errorOccured: boolean;
    // fields
  }
}
declare namespace UnityEditor.Collaboration.ProgressInfo {
  class ProgressType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    static Count: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    static Percent: UnityEditor.Collaboration.ProgressInfo.ProgressType;
    static Both: UnityEditor.Collaboration.ProgressInfo.ProgressType;
  }
}
declare namespace UnityEditor.Collaboration {
  class Revision {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly authorName: string;
    readonly author: string;
    readonly comment: string;
    readonly revisionID: string;
    readonly reference: string;
    readonly timeStamp: number;
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class SoftLock {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly userID: string;
    readonly machineID: string;
    readonly displayName: string;
    readonly timeStamp: number;
    // fields
  }
}
declare namespace UnityEditor.Collaboration {
  class TextureUtility {
    // constructors
    private constructor();
    // methods
    static LoadTextureFromApplicationContents(path: string): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CollabToolbarWindow {
    // constructors
    constructor();
    // methods
    static CloseToolbarWindows(): void;
    static CloseToolbarWindowsImmediately(): void;
    static ShowToolbarWindow(): UnityEditor.CollabToolbarWindow;
    static ValidateShowToolbarWindow(): boolean;
    OnReceiveTitle(title: string): void;
    OnInitScripting(): void;
    OnEnable(): void;
    OnDestroy(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnDestroy(): void;
    OnInitScripting(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Reload(): void;
    About(): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    Init(): void;
    OnGUI(): void;
    OnBatchMode(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnBecameInvisible(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    initialOpenUrl: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static s_ToolbarIsVisible: boolean;
  }
}
declare namespace UnityEditor {
  class Collider2DEditorBase {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    FinalizeInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class Collider3DEditorBase {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ColliderEditorBase {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ColliderEditorUtility {
    // constructors
    constructor();
    // methods
    static InspectorEditButtonGUI(editing: boolean): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ColliderUtil {
    // constructors
    constructor();
    // methods
    static GetCapsuleExtents(cc: any): any;
    static CalculateCapsuleTransform(cc: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class CollisionModes {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mode3D: UnityEditor.CollisionModuleUI.CollisionModes;
    static Mode2D: UnityEditor.CollisionModuleUI.CollisionModes;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class CollisionTypes {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Plane: UnityEditor.CollisionModuleUI.CollisionTypes;
    static World: UnityEditor.CollisionModuleUI.CollisionTypes;
  }
}
declare namespace UnityEditor {
  class CollisionModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class PlaneVizType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Grid: UnityEditor.CollisionModuleUI.PlaneVizType;
    static Solid: UnityEditor.CollisionModuleUI.PlaneVizType;
  }
}
declare namespace UnityEditor.CollisionModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    lifetimeLoss: any;
    planes: any;
    createPlane: any;
    minKillSpeed: any;
    maxKillSpeed: any;
    dampen: any;
    bounce: any;
    radiusScale: any;
    visualization: any;
    scalePlane: any;
    visualizeBounds: any;
    collidesWith: any;
    collidesWithDynamic: any;
    interiorCollisions: any;
    maxCollisionShapes: any;
    quality: any;
    qualitySettings: string[];
    voxelSize: any;
    collisionMessages: any;
    collisionMode: any;
  }
}
declare namespace UnityEditor {
  class ColorByVelocityModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.ColorByVelocityModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    color: any;
    velocityRange: any;
  }
}
declare namespace UnityEditor {
  class ColorClipboard {
    // constructors
    private constructor();
    // methods
    static SetColor(color: any): void;
    static HasColor(): boolean;
    static TryGetColor(allowHDR: boolean, color: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ColorModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.ColorModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    color: any;
  }
}
declare namespace UnityEditor.ColorPicker {
  class ColorBoxMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SV_H: UnityEditor.ColorPicker.ColorBoxMode;
    static HV_S: UnityEditor.ColorPicker.ColorBoxMode;
    static HS_V: UnityEditor.ColorPicker.ColorBoxMode;
    static BG_R: UnityEditor.ColorPicker.ColorBoxMode;
    static BR_G: UnityEditor.ColorPicker.ColorBoxMode;
    static RG_B: UnityEditor.ColorPicker.ColorBoxMode;
    static EyeDropper: UnityEditor.ColorPicker.ColorBoxMode;
  }
}
declare namespace UnityEditor {
  class ColorPicker {
    // constructors
    constructor();
    // methods
    static MakeTexture(width: number, height: number): any;
    static GetGradientTextureWithAlpha1To0(): any;
    static GetGradientTextureWithAlpha0To1(): any;
    static Show(viewToUpdate: UnityEditor.GUIView, col: any): void;
    static Show(viewToUpdate: UnityEditor.GUIView, col: any, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig): void;
    OnDestroy(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly presetsEditorPrefID: string;
    static readonly defaultHDRConfig: UnityEditor.ColorPickerHDRConfig;
    static readonly visible: boolean;
    static color: any;
    static readonly get: UnityEditor.ColorPicker;
    currentPresetLibrary: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ColorPicker {
  class HDRValues {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_TonemappingType: UnityEditor.ColorPicker.TonemappingType;
    m_HDRScaleFactor: number;
    m_ExposureAdjustment: number;
  }
}
declare namespace UnityEditor.ColorPicker {
  class LabelLocation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Top: UnityEditor.ColorPicker.LabelLocation;
    static Bottom: UnityEditor.ColorPicker.LabelLocation;
    static Left: UnityEditor.ColorPicker.LabelLocation;
    static Right: UnityEditor.ColorPicker.LabelLocation;
  }
}
declare namespace UnityEditor.ColorPicker {
  class SliderMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static RGB: UnityEditor.ColorPicker.SliderMode;
    static HSV: UnityEditor.ColorPicker.SliderMode;
  }
}
declare namespace UnityEditor.ColorPicker {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    pickerBox: any;
    thumb2D: any;
    thumbHoriz: any;
    thumbVert: any;
    headerLine: any;
    colorPickerBox: any;
    background: any;
    label: any;
    axisLabelNumberField: any;
    foldout: any;
    toggle: any;
    eyeDropper: any;
    colorCycle: any;
    colorToggle: any;
    tonemappingToggle: any;
    sliderToggle: any;
    presetsToggle: any;
    sliderCycle: any;
  }
}
declare namespace UnityEditor.ColorPicker {
  class TonemappingType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Linear: UnityEditor.ColorPicker.TonemappingType;
    static Photographic: UnityEditor.ColorPicker.TonemappingType;
  }
}
declare namespace UnityEditor {
  class ColorPickerHDRConfig {
    // constructors
    constructor(minBrightness: number, maxBrightness: number, minExposureValue: number, maxExposureValue: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    minBrightness: number;
    maxBrightness: number;
    minExposureValue: number;
    maxExposureValue: number;
  }
}
declare namespace UnityEditor.ColorPresetLibrary {
  class ColorPreset {
    // constructors
    constructor(preset: any, presetName: string);
    constructor(preset: any, preset2: any, presetName: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    color: any;
    name: string;
    // fields
  }
}
declare namespace UnityEditor {
  class ColorPresetLibrary {
    // constructors
    constructor();
    // methods
    Count(): number;
    GetPreset(index: number): any;
    Add(presetObject: any, presetName: string): void;
    Replace(index: number, newPresetObject: any): void;
    Remove(index: number): void;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    SetName(index: number, presetName: string): void;
    CreateDebugColors(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    static kSwatchSize: number;
    static kMiniSwatchSize: number;
  }
}
declare namespace UnityEditor {
  class ColorPresetLibraryEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ColorUsageDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ColumnView {
    // constructors
    constructor();
    // methods
    SetSelected(column: number, selectionIndex: number): void;
    SetKeyboardFocusColumn(column: number): void;
    OnGUI(elements: any, previewColumnFunction: ((any) => void)): void;
    OnGUI(elements: any, previewColumnFunction: ((any) => void), selectedSearchItemFunction: ((any) => void), selectedRegularItemFunction: ((any) => void), getDataForDraggingFunction: ((any) => any)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly searchText: string;
    readonly isSearching: boolean;
    // fields
    columnWidth: number;
    minimumNumberOfColumns: number;
  }
}
declare namespace UnityEditor.ColumnView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    selected: any;
    categoryArrowIcon: any;
  }
}
declare namespace UnityEditor {
  class ColumnViewElement {
    // constructors
    constructor(name: string, value: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    name: string;
    value: any;
  }
}
declare namespace UnityEditor {
  class CompareInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    left: number;
    right: number;
    convert_binary: number;
    autodetect_binary: number;
  }
}
declare namespace UnityEditor {
  class ComplexD {
    // constructors
    constructor(real: number, imag: number);
    // methods
    static Add(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Add(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Add(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Sub(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Sub(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Sub(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Mul(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Mul(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Mul(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Div(a: UnityEditor.ComplexD, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Div(a: number, b: UnityEditor.ComplexD): UnityEditor.ComplexD;
    static Div(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    static Exp(omega: number): UnityEditor.ComplexD;
    static Pow(a: UnityEditor.ComplexD, b: number): UnityEditor.ComplexD;
    Mag2(): number;
    Mag(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    real: number;
    imag: number;
  }
}
declare namespace UnityEditor {
  class ComputeShaderInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ComputeShaderInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static showAll: any;
  }
}
declare namespace UnityEditor.Connect {
  class CloudConfigUrl {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CloudCore: UnityEditor.Connect.CloudConfigUrl;
    static CloudCollab: UnityEditor.Connect.CloudConfigUrl;
    static CloudWebauth: UnityEditor.Connect.CloudConfigUrl;
    static CloudLogin: UnityEditor.Connect.CloudConfigUrl;
    static CloudIdentity: UnityEditor.Connect.CloudConfigUrl;
    static CloudPortal: UnityEditor.Connect.CloudConfigUrl;
  }
}
declare namespace UnityEditor.Connect {
  class ConnectInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly initialized: boolean;
    readonly ready: boolean;
    readonly online: boolean;
    readonly loggedIn: boolean;
    readonly workOffline: boolean;
    readonly showLoginWindow: boolean;
    readonly error: boolean;
    readonly lastErrorMsg: string;
    readonly maintenance: boolean;
    // fields
  }
}
declare namespace UnityEditor.Connect {
  class COPPACompliance {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static COPPAUndefined: UnityEditor.Connect.COPPACompliance;
    static COPPACompliant: UnityEditor.Connect.COPPACompliance;
    static COPPANotCompliant: UnityEditor.Connect.COPPACompliance;
  }
}
declare namespace UnityEditor.Connect {
  class ProjectInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly valid: boolean;
    readonly buildAllowed: boolean;
    readonly projectBound: boolean;
    readonly projectGUID: string;
    readonly projectName: string;
    readonly organizationId: string;
    readonly organizationName: string;
    readonly organizationForeignKey: string;
    readonly COPPA: UnityEditor.Connect.COPPACompliance;
    readonly coppaLock: boolean;
    readonly moveLock: boolean;
    // fields
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnect {
    // constructors
    private constructor();
    // methods
    GetConfigurationURL(config: UnityEditor.Connect.CloudConfigUrl): string;
    GetEnvironment(): string;
    GetAPIVersion(): string;
    GetUserId(): string;
    GetUserName(): string;
    GetAccessToken(): string;
    GetProjectGUID(): string;
    GetProjectName(): string;
    GetOrganizationId(): string;
    GetOrganizationName(): string;
    GetOrganizationForeignKey(): string;
    RefreshProject(): void;
    ClearCache(): void;
    Logout(): void;
    WorkOffline(rememberDecision: boolean): void;
    ShowLogin(): void;
    OpenAuthorizedURLInWebBrowser(url: string): void;
    BindProject(projectGUID: string, projectName: string, organizationId: string): void;
    SetCOPPACompliance(compliance: UnityEditor.Connect.COPPACompliance): boolean;
    ClearErrors(): void;
    UnhandledError(request: string, responseCode: number, response: string): void;
    ComputerGoesToSleep(): void;
    ComputerDidWakeUp(): void;
    ClearAccessToken(): void;
    GoToHub(page: string): void;
    UnbindProject(): void;
    GetProjectInfo(): UnityEditor.Connect.ProjectInfo;
    GetUserInfo(): UnityEditor.Connect.UserInfo;
    GetConnectInfo(): UnityEditor.Connect.ConnectInfo;
    GetConfigurationUrlByIndex(index: number): string;
    GetCoreConfigurationUrl(): string;
    DisplayDialog(title: string, message: string, okBtn: string, cancelBtn: string): boolean;
    SetCOPPACompliance(compliance: number): boolean;
    static TestComputerGoesToSleep(): void;
    static TestComputerDidWakeUp(): void;
    static TestClearAccessToken(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly preferencesEnabled: boolean;
    static readonly skipMissingUPID: boolean;
    readonly online: boolean;
    readonly loggedIn: boolean;
    readonly projectValid: boolean;
    readonly workingOffline: boolean;
    readonly shouldShowServicesWindow: boolean;
    readonly configuration: string;
    readonly lastErrorMessage: string;
    readonly lastErrorCode: number;
    readonly userInfo: UnityEditor.Connect.UserInfo;
    readonly projectInfo: UnityEditor.Connect.ProjectInfo;
    readonly connectInfo: UnityEditor.Connect.ConnectInfo;
    readonly canBuildWithUPID: boolean;
    static readonly instance: UnityEditor.Connect.UnityConnect;
    // fields
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectEditorWindow {
    // constructors
    private constructor();
    // methods
    static Create(title: string, serviceUrls: any): UnityEditor.Connect.UnityConnectEditorWindow;
    UrlsMatch(referenceUrls: any): boolean;
    OnEnable(): void;
    OnInitScripting(): void;
    ToggleMaximize(): void;
    OnLoadError(url: string): void;
    OnGUI(): void;
    Init(): void;
    OnDestroy(): void;
    OnBeforeSerialize(): void;
    OnAfterDeserialize(): void;
    GetWebViewFromURL(url: string): UnityEditor.WebView;
    OnInitScripting(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Reload(): void;
    About(): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    OnGUI(): void;
    OnBatchMode(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnEnable(): void;
    OnBecameInvisible(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    ErrorUrl: string;
    currentUrl: string;
    initialOpenUrl: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Connect.UnityConnectPrefs {
  class CloudPanelPref {
    // constructors
    constructor(serviceName: string);
    // methods
    StoreCloudServicePref(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ServiceName: string;
    m_CloudPanelServer: number;
    m_CloudPanelCustomUrl: string;
    m_CloudPanelCustomPort: number;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectPrefs {
    // constructors
    constructor();
    // methods
    static GetServiceEnv(serviceName: string): number;
    static ServicePrefKey(baseKey: string, serviceName: string): string;
    static FixUrl(url: string, serviceName: string): string;
    static ShowPanelPrefUI(): void;
    static StorePanelPrefs(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kEnvironmentFamilies: string[];
    static kProductionEnv: number;
    static kCustomEnv: number;
    static kSvcEnvPref: string;
    static kSvcCustomUrlPref: string;
    static kSvcCustomPortPref: string;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectServiceCollection {
    // constructors
    private constructor();
    // methods
    CloseServices(): void;
    ReloadServices(): void;
    static StaticEnableService(serviceName: string, enabled: boolean): void;
    AddService(cloudService: UnityEditor.Connect.UnityConnectServiceData): boolean;
    RemoveService(serviceName: string): boolean;
    ServiceExist(serviceName: string): boolean;
    ShowService(serviceName: string, forceFocus: boolean): boolean;
    ShowService(serviceName: string, atPage: string, forceFocus: boolean): boolean;
    EnableService(name: string, enabled: boolean): void;
    GetUrlForService(serviceName: string): string;
    GetServiceFromUrl(searchUrl: string): UnityEditor.Connect.UnityConnectServiceData;
    GetAllServiceNames(): any;
    GetAllServiceUrls(): any;
    GetAllServiceInfos(): UnityEditor.Connect.UnityConnectServiceCollection.ServiceInfo[];
    GetWebViewFromServiceName(serviceName: string): UnityEditor.WebView;
    UnbindAllServices(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly isDrawerOpen: boolean;
    static readonly instance: UnityEditor.Connect.UnityConnectServiceCollection;
    // fields
  }
}
declare namespace UnityEditor.Connect.UnityConnectServiceCollection {
  class ServiceInfo {
    // constructors
    constructor(name: string, url: string, unityPath: string, enabled: boolean);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    name: string;
    url: string;
    unityPath: string;
    enabled: boolean;
  }
}
declare namespace UnityEditor.Connect {
  class UnityConnectServiceData {
    // constructors
    constructor(serviceName: string, htmlSourcePath: string, jsGlobalObject: UnityEditor.Web.CloudServiceAccess, jsGlobalObjectName: string);
    // methods
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly serviceName: string;
    readonly serviceUrl: string;
    readonly serviceJsGlobalObject: UnityEditor.Web.CloudServiceAccess;
    readonly serviceJsGlobalObjectName: string;
    // fields
  }
}
declare namespace UnityEditor.Connect {
  class UserInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly valid: boolean;
    readonly userId: string;
    readonly userName: string;
    readonly displayName: string;
    readonly primaryOrg: string;
    readonly whitelisted: boolean;
    readonly organizationForeignKeys: string;
    readonly accessToken: string;
    readonly accessTokenValiditySeconds: number;
    // fields
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class ConsoleFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Collapse: UnityEditor.ConsoleWindow.ConsoleFlags;
    static ClearOnPlay: UnityEditor.ConsoleWindow.ConsoleFlags;
    static ErrorPause: UnityEditor.ConsoleWindow.ConsoleFlags;
    static Verbose: UnityEditor.ConsoleWindow.ConsoleFlags;
    static StopForAssert: UnityEditor.ConsoleWindow.ConsoleFlags;
    static StopForError: UnityEditor.ConsoleWindow.ConsoleFlags;
    static Autoscroll: UnityEditor.ConsoleWindow.ConsoleFlags;
    static LogLevelLog: UnityEditor.ConsoleWindow.ConsoleFlags;
    static LogLevelWarning: UnityEditor.ConsoleWindow.ConsoleFlags;
    static LogLevelError: UnityEditor.ConsoleWindow.ConsoleFlags;
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    static Init(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static ms_Loaded: boolean;
    static Box: any;
    static Button: any;
    static MiniButton: any;
    static MiniButtonLeft: any;
    static MiniButtonMiddle: any;
    static MiniButtonRight: any;
    static LogStyle: any;
    static WarningStyle: any;
    static ErrorStyle: any;
    static EvenBackground: any;
    static OddBackground: any;
    static MessageStyle: any;
    static StatusError: any;
    static StatusWarn: any;
    static StatusLog: any;
    static Toolbar: any;
    static CountBadge: any;
  }
}
declare namespace UnityEditor {
  class ConsoleWindow {
    // constructors
    constructor();
    // methods
    static ShowConsoleWindow(immediate: boolean): void;
    static LogChanged(): void;
    DoLogChanged(): void;
    static GetConsoleErrorPause(): boolean;
    static SetConsoleErrorPause(enabled: boolean): void;
    ToggleLogStackTraces(userData: any): void;
    ToggleLogStackTracesForAll(userData: any): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class Mode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Error: UnityEditor.ConsoleWindow.Mode;
    static Assert: UnityEditor.ConsoleWindow.Mode;
    static Log: UnityEditor.ConsoleWindow.Mode;
    static Fatal: UnityEditor.ConsoleWindow.Mode;
    static DontPreprocessCondition: UnityEditor.ConsoleWindow.Mode;
    static AssetImportError: UnityEditor.ConsoleWindow.Mode;
    static AssetImportWarning: UnityEditor.ConsoleWindow.Mode;
    static ScriptingError: UnityEditor.ConsoleWindow.Mode;
    static ScriptingWarning: UnityEditor.ConsoleWindow.Mode;
    static ScriptingLog: UnityEditor.ConsoleWindow.Mode;
    static ScriptCompileError: UnityEditor.ConsoleWindow.Mode;
    static ScriptCompileWarning: UnityEditor.ConsoleWindow.Mode;
    static StickyError: UnityEditor.ConsoleWindow.Mode;
    static MayIgnoreLineNumber: UnityEditor.ConsoleWindow.Mode;
    static ReportBug: UnityEditor.ConsoleWindow.Mode;
    static DisplayPreviousErrorInStatusBar: UnityEditor.ConsoleWindow.Mode;
    static ScriptingException: UnityEditor.ConsoleWindow.Mode;
    static DontExtractStacktrace: UnityEditor.ConsoleWindow.Mode;
    static ShouldClearOnPlay: UnityEditor.ConsoleWindow.Mode;
    static GraphCompileError: UnityEditor.ConsoleWindow.Mode;
    static ScriptingAssertion: UnityEditor.ConsoleWindow.Mode;
  }
}
declare namespace UnityEditor.ConsoleWindow {
  class StackTraceLogTypeData {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    logType: any;
    stackTraceLogType: any;
  }
}
declare namespace UnityEditor {
  class ContainerWindow {
    // constructors
    constructor();
    // methods
    SetAlpha(alpha: number): void;
    SetInvisible(): void;
    IsZoomed(): boolean;
    static SetFreezeDisplay(freeze: boolean): void;
    DisplayAllViews(): void;
    Minimize(): void;
    ToggleMaximize(): void;
    MoveInFrontOf(other: UnityEditor.ContainerWindow): void;
    MoveBehindOf(other: UnityEditor.ContainerWindow): void;
    InternalClose(): void;
    OnDestroy(): void;
    Show(showMode: UnityEditor.ShowMode, loadPosition: boolean, displayImmediately: boolean): void;
    OnEnable(): void;
    SetMinMaxSizes(min: any, max: any): void;
    Close(): void;
    Save(): void;
    WindowToScreenPoint(windowPoint: any): any;
    HandleWindowDecorationEnd(windowPosition: any): void;
    HandleWindowDecorationStart(windowPosition: any): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly maximized: boolean;
    position: any;
    title: string;
    static readonly windows: UnityEditor.ContainerWindow[];
    rootView: UnityEditor.View;
    readonly rootSplitView: UnityEditor.SplitView;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ContainerWindow {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static buttonClose: any;
    static buttonMin: any;
    static buttonMax: any;
    static buttonInactive: any;
  }
}
declare namespace UnityEditor {
  class ControlPointRenderer {
    // constructors
    constructor(icon: any);
    // methods
    FlushCache(): void;
    Clear(): void;
    Render(): void;
    AddPoint(rect: any, color: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly material: any;
    // fields
  }
}
declare namespace UnityEditor.ControlPointRenderer {
  class RenderChunk {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    mesh: any;
    vertices: any;
    colors: any;
    uvs: any;
    indices: any;
    isDirty: boolean;
  }
}
declare namespace UnityEditor.CrashReporting {
  class CrashReportingSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static enabled: boolean;
    static captureEditorExceptions: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class CreateAssetUtility {
    // constructors
    constructor();
    // methods
    Clear(): void;
    BeginNewAssetCreation(instanceID: number, newAssetEndAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, filePath: string, icon: any, newAssetResourceFile: string): boolean;
    EndNewAssetCreation(name: string): void;
    IsCreatingNewAsset(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly instanceID: number;
    readonly icon: any;
    readonly folder: string;
    readonly extension: string;
    readonly originalName: string;
    readonly endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction;
    // fields
  }
}
declare namespace UnityEditor {
  class CreateBuiltinWindows {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CrossCompileOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Dynamic: UnityEditor.CrossCompileOptions;
    static FastICall: UnityEditor.CrossCompileOptions;
    static Static: UnityEditor.CrossCompileOptions;
    static Debugging: UnityEditor.CrossCompileOptions;
    static ExplicitNullChecks: UnityEditor.CrossCompileOptions;
    static LoadSymbols: UnityEditor.CrossCompileOptions;
  }
}
declare namespace UnityEditor {
  class CubemapInfo {
    // constructors
    constructor();
    // methods
    SetCubemapShadowInfo(newCubemapShadowInfo: UnityEditor.CubemapInfo): void;
    ResetEnvInfos(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    cubemap: any;
    cubemapShadowInfo: UnityEditor.CubemapInfo;
    angleOffset: number;
    ambientProbe: any;
    shadowInfo: UnityEditor.ShadowInfo;
    serialIndexMain: number;
    serialIndexShadow: number;
    alreadyComputed: boolean;
  }
}
declare namespace UnityEditor {
  class CubemapInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    static ObjectField(label: string, obj: any, objType: any, allowSceneObjects: boolean, options: any[]): any;
    GetMipLevelForRendering(): number;
    OnPreviewSettings(): void;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mipLevel: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CubemapPreview {
    // constructors
    constructor();
    // methods
    OnDisable(): void;
    GetMipLevelForRendering(texture: any): number;
    SetIntensity(intensity: number): void;
    OnPreviewSettings(targets: any[]): void;
    OnPreviewGUI(t: any, r: any, background: any): void;
    RenderStaticPreview(t: any, width: number, height: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    mipLevel: number;
    // fields
    m_PreviewDir: any;
  }
}
declare namespace UnityEditor.CubemapPreview {
  class PreviewType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static RGB: UnityEditor.CubemapPreview.PreviewType;
    static Alpha: UnityEditor.CubemapPreview.PreviewType;
  }
}
declare namespace UnityEditor.CubemapPreview {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static preButton: any;
    static preSlider: any;
    static preSliderThumb: any;
    static preLabel: any;
    static smallZoom: any;
    static largeZoom: any;
    static alphaIcon: any;
    static RGBIcon: any;
  }
}
declare namespace UnityEditor {
  class CurveControlPointRenderer {
    // constructors
    constructor(style: UnityEditor.CurveEditor.Styles);
    // methods
    FlushCache(): void;
    Clear(): void;
    Render(): void;
    AddPoint(rect: any, color: any): void;
    AddSelectedPoint(rect: any, color: any): void;
    AddSemiSelectedPoint(rect: any, color: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.CurveEditor {
  class AxisLock {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.CurveEditor.AxisLock;
    static X: UnityEditor.CurveEditor.AxisLock;
    static Y: UnityEditor.CurveEditor.AxisLock;
  }
}
declare namespace UnityEditor {
  class CurveEditor {
    // constructors
    constructor(rect: any, curves: UnityEditor.CurveWrapper[], minimalGUI: boolean);
    // methods
    GetTopMostCurveID(curveID: any): boolean;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    InvalidateBounds(): void;
    FrameClip(horizontally: boolean, vertically: boolean): void;
    FrameSelected(horizontally: boolean, vertically: boolean): void;
    UpdateCurves(curveIds: any, undoText: string): void;
    UpdateCurves(changedCurves: any, undoText: string): void;
    StartLiveEdit(): void;
    EndLiveEdit(): void;
    InLiveEdit(): boolean;
    OnGUI(): void;
    CurveGUI(): void;
    AddKey(cw: UnityEditor.CurveWrapper, key: any): void;
    SelectNone(): void;
    SelectAll(): void;
    IsDraggingKey(): boolean;
    IsDraggingCurveOrRegion(): boolean;
    IsDraggingCurve(cw: UnityEditor.CurveWrapper): boolean;
    IsDraggingRegion(cw1: UnityEditor.CurveWrapper, cw2: UnityEditor.CurveWrapper): boolean;
    BeginTimeRangeSelection(time: number, addToSelection: boolean): void;
    TimeRangeSelectTo(time: number): void;
    EndTimeRangeSelection(): void;
    CancelTimeRangeSelection(): void;
    MovePoints(): any;
    SaveKeySelection(undoLabel: string): void;
    DrawRegion(curve1: UnityEditor.CurveWrapper, curve2: UnityEditor.CurveWrapper, hasFocus: boolean): void;
    GridGUI(): void;
    SetTickMarkerRanges(): void;
    DrawMajorTicks(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number, timeFormat: UnityEditor.TimeArea.TimeFormat): void;
    BrowseRuler(position: any, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    BrowseRuler(position: any, id: number, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    FrameToPixel(i: number, frameRate: number, rect: any): number;
    TimeField(rect: any, id: number, time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): number;
    ValueField(rect: any, id: number, value: number): number;
    FormatTime(time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): string;
    FormatValue(value: number): string;
    SnapTimeToWholeFPS(time: number, frameRate: number): number;
    SetShownHRangeInsideMargins(min: number, max: number): void;
    SetShownHRange(min: number, max: number): void;
    SetShownVRangeInsideMargins(min: number, max: number): void;
    SetShownVRange(min: number, max: number): void;
    DrawingToViewTransformPoint(lhs: any): any;
    DrawingToViewTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    NormalizeInViewSpace(vec: any): any;
    BeginViewGUI(): void;
    HandleZoomAndPanEvents(area: any): void;
    EndViewGUI(): void;
    SetScaleFocused(focalPoint: any, newScale: any): void;
    SetScaleFocused(focalPoint: any, newScale: any, lockHorizontal: boolean, lockVertical: boolean): void;
    SetTransform(newTranslation: any, newScale: any): void;
    EnforceScaleAndRange(): void;
    PixelToTime(pixelX: number, rect: any): number;
    TimeToPixel(time: number, rect: any): number;
    PixelDeltaToTime(rect: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    animationCurves: UnityEditor.CurveWrapper[];
    readonly syncTimeDuringDrag: boolean;
    readonly timeFormat: UnityEditor.TimeArea.TimeFormat;
    settings: UnityEditor.CurveEditorSettings;
    tangentColor: any;
    readonly hasSelection: boolean;
    readonly selectionBounds: any;
    readonly curveBounds: any;
    readonly drawingBounds: any;
    hTicks: UnityEditor.TickHandler;
    vTicks: UnityEditor.TickHandler;
    hRangeLocked: boolean;
    vRangeLocked: boolean;
    hBaseRangeMin: number;
    hBaseRangeMax: number;
    vBaseRangeMin: number;
    vBaseRangeMax: number;
    hAllowExceedBaseRangeMin: boolean;
    hAllowExceedBaseRangeMax: boolean;
    vAllowExceedBaseRangeMin: boolean;
    vAllowExceedBaseRangeMax: boolean;
    hRangeMin: number;
    hRangeMax: number;
    vRangeMin: number;
    vRangeMax: number;
    hScaleMin: number;
    hScaleMax: number;
    vScaleMin: number;
    vScaleMax: number;
    scaleWithWindow: boolean;
    hSlider: boolean;
    vSlider: boolean;
    ignoreScrollWheelUntilClicked: boolean;
    enableMouseInput: boolean;
    uniformScale: boolean;
    upDirection: UnityEditor.ZoomableArea.YDirection;
    readonly scale: any;
    readonly translation: any;
    leftmargin: number;
    rightmargin: number;
    topmargin: number;
    bottommargin: number;
    rect: any;
    readonly drawRect: any;
    shownArea: any;
    shownAreaInsideMargins: any;
    readonly drawingToViewMatrix: any;
    readonly mousePositionInDrawing: any;
    // fields
    curvesUpdated: (() => void);
    state: UnityEditor.ICurveEditorState;
    invSnap: number;
    m_UniformScale: boolean;
  }
}
declare namespace UnityEditor.CurveEditor {
  class KeyFrameCopy {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    time: number;
    value: number;
    inTangent: number;
    outTangent: number;
    idx: number;
    selectionIdx: number;
  }
}
declare namespace UnityEditor.CurveEditor {
  class PickMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.CurveEditor.PickMode;
    static Click: UnityEditor.CurveEditor.PickMode;
    static Marquee: UnityEditor.CurveEditor.PickMode;
  }
}
declare namespace UnityEditor.CurveEditor {
  class SavedCurve {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    curveId: number;
    keys: any;
  }
}
declare namespace UnityEditor.CurveEditor.SavedCurve {
  class SavedKeyFrame {
    // constructors
    constructor(key: any, selected: UnityEditor.CurveWrapper.SelectionMode);
    // methods
    CompareTo(_other: any): number;
    Clone(): UnityEditor.CurveEditor.SavedCurve.SavedKeyFrame;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    key: any;
    selected: UnityEditor.CurveWrapper.SelectionMode;
  }
}
declare namespace UnityEditor.CurveEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    pointIcon: any;
    pointIconSelected: any;
    pointIconSelectedOverlay: any;
    pointIconSemiSelectedOverlay: any;
    wrapModeMenuIcon: any;
    none: any;
    labelTickMarksY: any;
    labelTickMarksX: any;
    selectionRect: any;
    dragLabel: any;
    axisLabelNumberField: any;
  }
}
declare namespace UnityEditor {
  class CurveEditorRectangleTool {
    // constructors
    constructor();
    // methods
    Initialize(timeArea: UnityEditor.TimeArea): void;
    OnGUI(): void;
    OverlayOnGUI(): void;
    HandleEvents(): void;
    HandleOverlayEvents(): void;
    ToolCoordToPosition(coord: UnityEditor.RectangleTool.ToolCoord, bounds: any): any;
    CalculateScaleTimeMatrix(fromTime: number, toTime: number, offsetTime: number, pivotTime: number, frameRate: number, transform: any, flipKeys: any): boolean;
    CalculateScaleValueMatrix(fromValue: number, toValue: number, offsetValue: number, pivotValue: number, transform: any, flipKeys: any): boolean;
    PixelToTime(pixelTime: number, frameRate: number): number;
    PixelToValue(pixelValue: number): number;
    TimeToPixel(time: number): number;
    ValueToPixel(value: number): number;
    HandleClutchKeys(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly timeArea: UnityEditor.TimeArea;
    readonly styles: UnityEditor.RectangleTool.Styles;
    readonly rippleTimeClutch: boolean;
    readonly contentRect: any;
    // fields
  }
}
declare namespace UnityEditor.CurveEditorRectangleTool {
  class DragMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveHorizontal: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveVertical: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveBothAxis: UnityEditor.CurveEditorRectangleTool.DragMode;
    static ScaleHorizontal: UnityEditor.CurveEditorRectangleTool.DragMode;
    static ScaleVertical: UnityEditor.CurveEditorRectangleTool.DragMode;
    static ScaleBothAxis: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveScaleHorizontal: UnityEditor.CurveEditorRectangleTool.DragMode;
    static MoveScaleVertical: UnityEditor.CurveEditorRectangleTool.DragMode;
  }
}
declare namespace UnityEditor.CurveEditorRectangleTool {
  class ToolLayout {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    selectionRect: any;
    hBarRect: any;
    hBarLeftRect: any;
    hBarRightRect: any;
    displayHScale: boolean;
    vBarRect: any;
    vBarBottomRect: any;
    vBarTopRect: any;
    displayVScale: boolean;
    selectionLeftRect: any;
    selectionTopRect: any;
    underlayTopRect: any;
    underlayLeftRect: any;
    scaleLeftRect: any;
    scaleRightRect: any;
    scaleTopRect: any;
    scaleBottomRect: any;
    leftLabelAnchor: any;
    rightLabelAnchor: any;
    bottomLabelAnchor: any;
    topLabelAnchor: any;
  }
}
declare namespace UnityEditor {
  class CurveEditorSelection {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    selectedCurves: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CurveEditorSettings {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    hRangeMin: number;
    hRangeMax: number;
    vRangeMin: number;
    vRangeMax: number;
    readonly hasUnboundedRanges: boolean;
    hSlider: boolean;
    vSlider: boolean;
    // fields
    hTickLabelOffset: number;
    wrapColor: UnityEditor.EditorGUIUtility.SkinnedColor;
    useFocusColors: boolean;
    showAxisLabels: boolean;
    showWrapperPopups: boolean;
    allowDraggingCurvesAndRegions: boolean;
    allowDeleteLastKeyInCurve: boolean;
    undoRedoSelection: boolean;
  }
}
declare namespace UnityEditor.CurveEditorSettings {
  class RectangleToolFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NoRectangleTool: UnityEditor.CurveEditorSettings.RectangleToolFlags;
    static MiniRectangleTool: UnityEditor.CurveEditorSettings.RectangleToolFlags;
    static FullRectangleTool: UnityEditor.CurveEditorSettings.RectangleToolFlags;
  }
}
declare namespace UnityEditor {
  class CurveEditorWindow {
    // constructors
    constructor();
    // methods
    Show(viewToUpdate: UnityEditor.GUIView, settings: UnityEditor.CurveEditorSettings): void;
    UpdateCurve(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly instance: UnityEditor.CurveEditorWindow;
    currentPresetLibrary: string;
    static curve: any;
    static color: any;
    static readonly visible: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.CurveEditorWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    curveEditorBackground: any;
    miniToolbarPopup: any;
    miniToolbarButton: any;
    curveSwatch: any;
    curveSwatchArea: any;
    curveWrapPopup: any;
  }
}
declare namespace UnityEditor {
  class CurveLibraryType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unbounded: UnityEditor.CurveLibraryType;
    static NormalizedZeroToOne: UnityEditor.CurveLibraryType;
  }
}
declare namespace UnityEditor {
  class CurveMenuManager {
    // constructors
    constructor(updater: UnityEditor.CurveUpdater);
    // methods
    AddTangentMenuItems(menu: UnityEditor.GenericMenu, keyList: any): void;
    SetClampedAuto(keysToSet: any): void;
    SetAuto(keysToSet: any): void;
    SetEditable(keysToSet: any): void;
    SetFlat(keysToSet: any): void;
    SetBoth(mode: UnityEditor.AnimationUtility.TangentMode, keysToSet: any): void;
    Flatten(keysToSet: any): void;
    SetBroken(_keysToSet: any): void;
    SetLeftEditable(keysToSet: any): void;
    SetLeftLinear(keysToSet: any): void;
    SetLeftConstant(keysToSet: any): void;
    SetRightEditable(keysToSet: any): void;
    SetRightLinear(keysToSet: any): void;
    SetRightConstant(keysToSet: any): void;
    SetBothEditable(keysToSet: any): void;
    SetBothLinear(keysToSet: any): void;
    SetBothConstant(keysToSet: any): void;
    SetTangent(leftRight: number, mode: UnityEditor.AnimationUtility.TangentMode, keysToSet: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.CurvePresetLibrary {
  class CurvePreset {
    // constructors
    constructor(preset: any, presetName: string);
    constructor(preset: any, preset2: any, presetName: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    curve: any;
    name: string;
    // fields
  }
}
declare namespace UnityEditor {
  class CurvePresetLibrary {
    // constructors
    constructor();
    // methods
    Count(): number;
    GetPreset(index: number): any;
    Add(presetObject: any, presetName: string): void;
    Replace(index: number, newPresetObject: any): void;
    Remove(index: number): void;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    SetName(index: number, presetName: string): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CurvePresetLibraryEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CurvePresetsContentsForPopupWindow {
    // constructors
    constructor(animCurve: any, curveLibraryType: UnityEditor.CurveLibraryType, presetSelectedCallback: ((any) => void));
    // methods
    static GetBasePrefText(curveLibraryType: UnityEditor.CurveLibraryType): string;
    OnClose(): void;
    GetPresetLibraryEditor(): any;
    InitIfNeeded(): void;
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    curveToSaveAsPreset: any;
    currentPresetLibrary: string;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor {
  class CurveRenderer {
    // constructors
    private constructor();
    // methods
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, wrapColor: any): void;
    GetCurve(): any;
    RangeStart(): number;
    RangeEnd(): number;
    SetWrap(wrap: any): void;
    SetWrap(preWrap: any, postWrap: any): void;
    SetCustomRange(start: number, end: number): void;
    EvaluateCurveSlow(time: number): number;
    EvaluateCurveDeltaSlow(time: number): number;
    GetBounds(): any;
    GetBounds(minTime: number, maxTime: number): any;
    FlushCache(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CurveSelection {
    // constructors
    private constructor();
    // methods
    CompareTo(_other: any): number;
    Equals(_other: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    curveID: number;
    key: number;
    semiSelected: boolean;
    type: UnityEditor.CurveSelection.SelectionType;
  }
}
declare namespace UnityEditor.CurveSelection {
  class SelectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Key: UnityEditor.CurveSelection.SelectionType;
    static InTangent: UnityEditor.CurveSelection.SelectionType;
    static OutTangent: UnityEditor.CurveSelection.SelectionType;
    static Count: UnityEditor.CurveSelection.SelectionType;
  }
}
declare namespace UnityEditor {
  class CurveUpdater {
    // constructors
    private constructor();
    // methods
    UpdateCurves(curve: any, undoText: string): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CurveUtility {
    // constructors
    private constructor();
    // methods
    static GetPathAndTypeID(path: string, type: any): number;
    static GetIconCurve(): any;
    static GetIconKey(): any;
    static HaveKeysInRange(curve: any, beginTime: number, endTime: number): boolean;
    static RemoveKeysInRange(curve: any, beginTime: number, endTime: number): void;
    static CalculateSmoothTangent(key: any): number;
    static SetKeyModeFromContext(curve: any, keyIndex: number): void;
    static GetClipName(clip: any): string;
    static GetBalancedColor(c: any): any;
    static GetPropertyColor(name: string): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class CurveWrapper {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    renderer: UnityEditor.CurveRenderer;
    readonly curve: any;
    readonly rootGameObjet: any;
    readonly animationClip: any;
    readonly timeOffset: number;
    readonly clipIsEditable: boolean;
    readonly animationIsEditable: boolean;
    readonly selectionID: number;
    selectionBindingInterface: UnityEditor.ISelectionBinding;
    changed: boolean;
    // fields
    id: number;
    binding: UnityEditor.EditorCurveBinding;
    groupId: number;
    regionId: number;
    color: any;
    wrapColorMultiplier: any;
    readOnly: boolean;
    hidden: boolean;
    getAxisUiScalarsCallback: (() => any);
    setAxisUiScalarsCallback: ((any) => void);
    selected: UnityEditor.CurveWrapper.SelectionMode;
    listIndex: number;
    vRangeMin: number;
    vRangeMax: number;
  }
}
declare namespace UnityEditor.CurveWrapper {
  class SelectionMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.CurveWrapper.SelectionMode;
    static Selected: UnityEditor.CurveWrapper.SelectionMode;
    static SemiSelected: UnityEditor.CurveWrapper.SelectionMode;
  }
}
declare namespace UnityEditor {
  class CustomEditor {
    // constructors
    constructor(inspectedType: any);
    constructor(inspectedType: any, editorForChildClasses: boolean);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    isFallback: boolean;
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CustomEditorAttributes {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.CustomEditorAttributes {
  class MonoEditorType {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_InspectedType: any;
    m_InspectorType: any;
    m_EditorForChildClasses: boolean;
    m_IsFallback: boolean;
  }
}
declare namespace UnityEditor {
  class CustomPreviewAttribute {
    // constructors
    constructor(type: any);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class CustomPropertyDrawer {
    // constructors
    constructor(type: any);
    constructor(type: any, useForChildren: boolean);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class D3D11FullscreenMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ExclusiveMode: UnityEditor.D3D11FullscreenMode;
    static FullscreenWindow: UnityEditor.D3D11FullscreenMode;
  }
}
declare namespace UnityEditor {
  class D3D9FullscreenMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ExclusiveMode: UnityEditor.D3D9FullscreenMode;
    static FullscreenWindow: UnityEditor.D3D9FullscreenMode;
  }
}
declare namespace UnityEditor {
  class DDSImporter {
    // constructors
    constructor();
    // methods
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    isReadable: boolean;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DDSImporterInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DebugUtils {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class DecoratorDrawer {
    // constructors
    private constructor();
    // methods
    OnGUI(position: any): void;
    GetHeight(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DefaultAsset {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DefaultAssetInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DefaultReflectionMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static FromSkybox: UnityEditor.DefaultReflectionMode;
    static Custom: UnityEditor.DefaultReflectionMode;
  }
}
declare namespace UnityEditor {
  class DelayedCallback {
    // constructors
    constructor(function_: (() => void), timeFromNow: number);
    // methods
    Clear(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class DelayedDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DeletedAsset {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    changeset: number;
    guid: string;
    parent: string;
    name: string;
    fullPath: string;
    date: string;
    assetIsDir: number;
  }
}
declare namespace UnityEditor {
  class DeleteWindowLayout {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DesktopPluginImporterExtension {
    // constructors
    constructor();
    // methods
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    ValidateSingleCPUTargets(inspector: UnityEditor.PluginImporterInspector): void;
    CalculateFinalPluginPath(platformName: string, imp: UnityEditor.PluginImporter): string;
    ResetValues(inspector: UnityEditor.PluginImporterInspector): void;
    HasModified(inspector: UnityEditor.PluginImporterInspector): boolean;
    Apply(inspector: UnityEditor.PluginImporterInspector): void;
    OnEnable(inspector: UnityEditor.PluginImporterInspector): void;
    OnDisable(inspector: UnityEditor.PluginImporterInspector): void;
    CheckFileCollisions(buildTargetName: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.DesktopPluginImporterExtension {
  class DesktopPluginCPUArchitecture {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
    static AnyCPU: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
    static x86: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
    static x86_64: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture;
  }
}
declare namespace UnityEditor.DesktopPluginImporterExtension {
  class DesktopSingleCPUProperty {
    // constructors
    constructor(name: any, platformName: string);
    constructor(name: any, platformName: string, architecture: UnityEditor.DesktopPluginImporterExtension.DesktopPluginCPUArchitecture);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class DetailMeshRenderMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static VertexLit: UnityEditor.DetailMeshRenderMode;
    static Grass: UnityEditor.DetailMeshRenderMode;
  }
}
declare namespace UnityEditor {
  class DetailMeshWizard {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_Detail: any;
    m_NoiseSpread: number;
    m_MinWidth: number;
    m_MaxWidth: number;
    m_MinHeight: number;
    m_MaxHeight: number;
    m_HealthyColor: any;
    m_DryColor: any;
    m_RenderMode: UnityEditor.DetailMeshRenderMode;
  }
}
declare namespace UnityEditor {
  class DetailPainter {
    // constructors
    constructor();
    // methods
    Paint(xCenterNormalized: number, yCenterNormalized: number, detailIndex: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    size: number;
    opacity: number;
    targetStrength: number;
    brush: UnityEditor.Brush;
    terrainData: any;
    tool: UnityEditor.TerrainTool;
    randomizeDetails: boolean;
    clearSelectedOnly: boolean;
  }
}
declare namespace UnityEditor {
  class DetailTextureWizard {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_DetailTexture: any;
    m_MinWidth: number;
    m_MaxWidth: number;
    m_MinHeight: number;
    m_MaxHeight: number;
    m_NoiseSpread: number;
    m_HealthyColor: any;
    m_DryColor: any;
    m_Billboard: boolean;
  }
}
declare namespace UnityEditor {
  class DiagnosticSwitchPreferences {
    // constructors
    private constructor();
    // methods
    static OnGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.DiagnosticSwitchPreferences {
  class Resources {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    title: any;
    scrollArea: any;
    smallWarningIcon: any;
    restartNeededWarning: any;
  }
}
declare namespace UnityEditor {
  class DisplayUtility {
    // constructors
    constructor();
    // methods
    static GetGenericDisplayNames(): any[];
    static GetDisplayIndices(): number[];
    static GetDisplayNames(): any[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class DistanceJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DockArea {
    // constructors
    constructor();
    // methods
    OnDestroy(): void;
    OnEnable(): void;
    AddTab(pane: UnityEditor.EditorWindow): void;
    AddTab(idx: number, pane: UnityEditor.EditorWindow): void;
    RemoveTab(pane: UnityEditor.EditorWindow): void;
    RemoveTab(pane: UnityEditor.EditorWindow, killIfEmpty: boolean): void;
    DragOver(window: UnityEditor.EditorWindow, mouseScreenPosition: any): UnityEditor.DropInfo;
    PerformDrop(w: UnityEditor.EditorWindow, info: UnityEditor.DropInfo, screenPos: any): boolean;
    OnGUI(): void;
    OnEnable(): void;
    OnDestroy(): void;
    InvokeOnGUI(onGUIPosition: any): void;
    PopupGenericMenu(view: UnityEditor.EditorWindow, pos: any): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    selected: number;
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DopeSheetEditorRectangleTool {
    // constructors
    constructor();
    // methods
    Initialize(timeArea: UnityEditor.TimeArea): void;
    OnGUI(): void;
    HandleEvents(): void;
    ToolCoordToPosition(coord: UnityEditor.RectangleTool.ToolCoord, bounds: any): any;
    CalculateScaleTimeMatrix(fromTime: number, toTime: number, offsetTime: number, pivotTime: number, frameRate: number, transform: any, flipKeys: any): boolean;
    CalculateScaleValueMatrix(fromValue: number, toValue: number, offsetValue: number, pivotValue: number, transform: any, flipKeys: any): boolean;
    PixelToTime(pixelTime: number, frameRate: number): number;
    PixelToValue(pixelValue: number): number;
    TimeToPixel(time: number): number;
    ValueToPixel(value: number): number;
    HandleClutchKeys(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly timeArea: UnityEditor.TimeArea;
    readonly styles: UnityEditor.RectangleTool.Styles;
    readonly rippleTimeClutch: boolean;
    readonly contentRect: any;
    // fields
  }
}
declare namespace UnityEditor.DopeSheetEditorRectangleTool {
  class ToolLayout {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    summaryRect: any;
    selectionRect: any;
    hBarRect: any;
    hBarOverlayRect: any;
    hBarLeftRect: any;
    hBarRightRect: any;
    displayHScale: boolean;
    vBarRect: any;
    vBarOverlayRect: any;
    vBarBottomRect: any;
    vBarTopRect: any;
    displayVScale: boolean;
    selectionLeftRect: any;
    selectionTopRect: any;
    underlayTopRect: any;
    underlayLeftRect: any;
    scaleLeftRect: any;
    scaleRightRect: any;
    scaleTopRect: any;
    scaleBottomRect: any;
    leftLabelAnchor: any;
    rightLabelAnchor: any;
  }
}
declare namespace UnityEditor {
  class DoubleCurve {
    // constructors
    constructor(minCurve: any, maxCurve: any, signedRange: boolean);
    // methods
    IsSingleCurve(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    minCurve: any;
    maxCurve: any;
    signedRange: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class DoubleCurvePresetLibrary {
    // constructors
    constructor();
    // methods
    Count(): number;
    GetPreset(index: number): any;
    Add(presetObject: any, presetName: string): void;
    Replace(index: number, newPresetObject: any): void;
    Remove(index: number): void;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    SetName(index: number, presetName: string): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.DoubleCurvePresetLibrary {
  class DoubleCurvePreset {
    // constructors
    constructor(doubleCurvePreset: UnityEditor.DoubleCurve, presetName: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    doubleCurve: UnityEditor.DoubleCurve;
    name: string;
    // fields
  }
}
declare namespace UnityEditor {
  class DoubleCurvePresetLibraryEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class DoubleCurvePresetsContentsForPopupWindow {
    // constructors
    constructor(doubleCurveToSave: UnityEditor.DoubleCurve, presetSelectedCallback: ((UnityEditor.DoubleCurve) => void));
    // methods
    OnClose(): void;
    GetPresetLibraryEditor(): any;
    InitIfNeeded(): void;
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    doubleCurveToSave: UnityEditor.DoubleCurve;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor {
  class DownloadResolution {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unresolved: UnityEditor.DownloadResolution;
    static SkipAsset: UnityEditor.DownloadResolution;
    static TrashMyChanges: UnityEditor.DownloadResolution;
    static TrashServerChanges: UnityEditor.DownloadResolution;
    static Merge: UnityEditor.DownloadResolution;
  }
}
declare namespace UnityEditor {
  class DragAndDrop {
    // constructors
    constructor();
    // methods
    static PrepareStartDrag(): void;
    static StartDrag(title: string): void;
    static AcceptDrag(): void;
    static GetGenericData(type: string): any;
    static SetGenericData(type: string, data: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static objectReferences: any[];
    static paths: string[];
    static visualMode: UnityEditor.DragAndDropVisualMode;
    static activeControlID: number;
    // fields
  }
}
declare namespace UnityEditor {
  class DragAndDropDelay {
    // constructors
    constructor();
    // methods
    CanStartDrag(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    mouseDownPosition: any;
  }
}
declare namespace UnityEditor {
  class DragAndDropVisualMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.DragAndDropVisualMode;
    static Copy: UnityEditor.DragAndDropVisualMode;
    static Link: UnityEditor.DragAndDropVisualMode;
    static Move: UnityEditor.DragAndDropVisualMode;
    static Generic: UnityEditor.DragAndDropVisualMode;
    static Rejected: UnityEditor.DragAndDropVisualMode;
  }
}
declare namespace UnityEditor {
  class DragRectGUI {
    // constructors
    constructor();
    // methods
    static DragRect(position: any, value: number, minValue: number, maxValue: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class DrawCameraMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.DrawCameraMode;
    static Textured: UnityEditor.DrawCameraMode;
    static Wireframe: UnityEditor.DrawCameraMode;
    static TexturedWire: UnityEditor.DrawCameraMode;
    static ShadowCascades: UnityEditor.DrawCameraMode;
    static RenderPaths: UnityEditor.DrawCameraMode;
    static AlphaChannel: UnityEditor.DrawCameraMode;
    static Overdraw: UnityEditor.DrawCameraMode;
    static Mipmaps: UnityEditor.DrawCameraMode;
    static DeferredDiffuse: UnityEditor.DrawCameraMode;
    static DeferredSpecular: UnityEditor.DrawCameraMode;
    static DeferredSmoothness: UnityEditor.DrawCameraMode;
    static DeferredNormal: UnityEditor.DrawCameraMode;
    static Charting: UnityEditor.DrawCameraMode;
    static Systems: UnityEditor.DrawCameraMode;
    static Albedo: UnityEditor.DrawCameraMode;
    static Emissive: UnityEditor.DrawCameraMode;
    static Irradiance: UnityEditor.DrawCameraMode;
    static Directionality: UnityEditor.DrawCameraMode;
    static Baked: UnityEditor.DrawCameraMode;
    static Clustering: UnityEditor.DrawCameraMode;
    static LitClustering: UnityEditor.DrawCameraMode;
  }
}
declare namespace UnityEditor {
  class DrawGizmo {
    // constructors
    constructor(gizmo: UnityEditor.GizmoType);
    constructor(gizmo: UnityEditor.GizmoType, drawnGizmoType: any);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
    drawnType: any;
    drawOptions: UnityEditor.GizmoType;
  }
}
declare namespace UnityEditor {
  class DrawGridParameters {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    pivot: any;
    color: any;
    size: number;
    alphaX: number;
    alphaY: number;
    alphaZ: number;
  }
}
declare namespace UnityEditor {
  class DrivenRectTransformUndo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class DropInfo {
    // constructors
    constructor(source: UnityEditor.IDropArea);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    dropArea: UnityEditor.IDropArea;
    userData: any;
    type: UnityEditor.DropInfo.Type;
    rect: any;
  }
}
declare namespace UnityEditor.DropInfo {
  class Type {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Tab: UnityEditor.DropInfo.Type;
    static Pane: UnityEditor.DropInfo.Type;
    static Window: UnityEditor.DropInfo.Type;
  }
}
declare namespace UnityEditor {
  class DuckVolumeGUI {
    // constructors
    constructor();
    // methods
    static BuildGUIStyleForLabel(color: any, fontSize: number, wrapText: boolean, fontstyle: any, anchor: any): any;
    static DrawText(x: number, y: number, text: string): void;
    static DrawLine(x1: number, y1: number, x2: number, y2: number, col: any): void;
    OnGUI(plugin: UnityEditor.IAudioEffectPlugin): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Name: string;
    readonly Description: string;
    readonly Vendor: string;
    // fields
    static kThresholdName: string;
    static kRatioName: string;
    static kMakeupGainName: string;
    static kAttackTimeName: string;
    static kReleaseTimeName: string;
    static kKneeName: string;
    static textStyle10: any;
  }
}
declare namespace UnityEditor.DuckVolumeGUI {
  class DragType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.DuckVolumeGUI.DragType;
    static ThresholdAndKnee: UnityEditor.DuckVolumeGUI.DragType;
    static Ratio: UnityEditor.DuckVolumeGUI.DragType;
    static MakeupGain: UnityEditor.DuckVolumeGUI.DragType;
  }
}
declare namespace UnityEditor {
  class EdgeCollider2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnDisable(): void;
    FinalizeInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class Editor {
    // constructors
    constructor();
    // methods
    static CreateEditor(targetObject: any): UnityEditor.Editor;
    static CreateEditor(targetObject: any, editorType: any): UnityEditor.Editor;
    static CreateEditor(targetObjects: any[], editorType: any): UnityEditor.Editor;
    static CreateEditor(targetObjects: any[]): UnityEditor.Editor;
    static CreateCachedEditor(targetObject: any, editorType: any, previousEditor: any): void;
    static CreateCachedEditor(targetObjects: any[], editorType: any, previousEditor: any): void;
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Editor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    inspectorBig: any;
    inspectorBigInner: any;
    centerStyle: any;
  }
}
declare namespace UnityEditor {
  class EditorApplication {
    // constructors
    constructor();
    // methods
    static LoadLevelInPlayMode(path: string): void;
    static LoadLevelAdditiveInPlayMode(path: string): void;
    static LoadLevelAsyncInPlayMode(path: string): any;
    static LoadLevelAdditiveAsyncInPlayMode(path: string): any;
    static OpenProject(projectPath: string, args: string[]): void;
    static SaveAssets(): void;
    static Step(): void;
    static LockReloadAssemblies(): void;
    static ExecuteMenuItem(menuItemPath: string): boolean;
    static UnlockReloadAssemblies(): void;
    static Exit(returnValue: number): void;
    static RepaintProjectWindow(): void;
    static RepaintAnimationWindow(): void;
    static RepaintHierarchyWindow(): void;
    static DirtyHierarchyWindowSorting(): void;
    static Beep(): void;
    static NewScene(): void;
    static NewEmptyScene(): void;
    static OpenScene(path: string): boolean;
    static OpenSceneAdditive(path: string): void;
    static SaveScene(): boolean;
    static SaveScene(path: string): boolean;
    static SaveScene(path: string, saveAsCopy: boolean): boolean;
    static SaveCurrentSceneIfUserWantsTo(): boolean;
    static MarkSceneDirty(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static isPlaying: boolean;
    static readonly isPlayingOrWillChangePlaymode: boolean;
    static isPaused: boolean;
    static readonly isCompiling: boolean;
    static readonly isUpdating: boolean;
    static readonly isRemoteConnected: boolean;
    static readonly applicationContentsPath: string;
    static readonly applicationPath: string;
    static readonly timeSinceStartup: number;
    static readonly isSceneDirty: boolean;
    static currentScene: string;
    // fields
    static projectWindowItemOnGUI: ((string, any) => void);
    static hierarchyWindowItemOnGUI: ((number, any) => void);
    static update: (() => void);
    static delayCall: (() => void);
    static hierarchyWindowChanged: (() => void);
    static projectWindowChanged: (() => void);
    static searchChanged: (() => void);
    static modifierKeysChanged: (() => void);
    static playmodeStateChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class EditorApplicationLayout {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorAssemblies {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorBehaviorMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mode3D: UnityEditor.EditorBehaviorMode;
    static Mode2D: UnityEditor.EditorBehaviorMode;
  }
}
declare namespace UnityEditor {
  class EditorBuildSettings {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static scenes: UnityEditor.EditorBuildSettingsScene[];
    // fields
  }
}
declare namespace UnityEditor {
  class EditorBuildSettingsScene {
    // constructors
    constructor(path: string, enable: boolean);
    constructor();
    // methods
    CompareTo(obj: any): number;
    static GetActiveSceneList(scenes: UnityEditor.EditorBuildSettingsScene[]): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    enabled: boolean;
    path: string;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorCache {
    // constructors
    constructor();
    constructor(requirements: UnityEditor.EditorFeatures);
    // methods
    CleanupUntouchedEditors(): void;
    CleanupAllEditors(): void;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    get_Item(o: any): UnityEditor.EditorWrapper;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorCurveBinding {
    // constructors
    private constructor();
    // methods
    GetHashCode(): number;
    Equals(other: any): boolean;
    static FloatCurve(inPath: string, inType: any, inPropertyName: string): UnityEditor.EditorCurveBinding;
    static PPtrCurve(inPath: string, inType: any, inPropertyName: string): UnityEditor.EditorCurveBinding;
    ToString(): string;
    GetType(): any;
    // properties
    readonly isPPtrCurve: boolean;
    type: any;
    // fields
    path: string;
    propertyName: string;
  }
}
declare namespace UnityEditor {
  class EditorExtensionMethods {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorFeatures {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.EditorFeatures;
    static PreviewGUI: UnityEditor.EditorFeatures;
    static OnSceneDrag: UnityEditor.EditorFeatures;
  }
}
declare namespace UnityEditor.EditorGUI {
  class ChangeCheckScope {
    // constructors
    constructor();
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly changed: boolean;
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class ColorBrightnessFieldStateObject {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Hue: number;
    m_Saturation: number;
    m_Brightness: number;
  }
}
declare namespace UnityEditor {
  class EditorGUI {
    // constructors
    constructor();
    // methods
    static LabelField(position: any, label: string): void;
    static LabelField(position: any, label: string, style: any): void;
    static LabelField(position: any, label: any): void;
    static LabelField(position: any, label: any, style: any): void;
    static LabelField(position: any, label: string, label2: string): void;
    static LabelField(position: any, label: string, label2: string, style: any): void;
    static LabelField(position: any, label: any, label2: any): void;
    static LabelField(position: any, label: any, label2: any, style: any): void;
    static ToggleLeft(position: any, label: string, value: boolean): boolean;
    static ToggleLeft(position: any, label: string, value: boolean, labelStyle: any): boolean;
    static ToggleLeft(position: any, label: any, value: boolean): boolean;
    static ToggleLeft(position: any, label: any, value: boolean, labelStyle: any): boolean;
    static TextField(position: any, text: string): string;
    static TextField(position: any, text: string, style: any): string;
    static TextField(position: any, label: string, text: string): string;
    static TextField(position: any, label: string, text: string, style: any): string;
    static TextField(position: any, label: any, text: string): string;
    static TextField(position: any, label: any, text: string, style: any): string;
    static DelayedTextField(position: any, text: string): string;
    static DelayedTextField(position: any, text: string, style: any): string;
    static DelayedTextField(position: any, label: string, text: string): string;
    static DelayedTextField(position: any, label: string, text: string, style: any): string;
    static DelayedTextField(position: any, label: any, text: string): string;
    static DelayedTextField(position: any, label: any, text: string, style: any): string;
    static DelayedTextField(position: any, property: UnityEditor.SerializedProperty): void;
    static DelayedTextField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static DelayedTextField(position: any, controlId: number, label: any, text: string): string;
    static DelayedTextField(position: any, controlId: number, label: any, text: string, style: any): string;
    static TextArea(position: any, text: string): string;
    static TextArea(position: any, text: string, style: any): string;
    static SelectableLabel(position: any, text: string): void;
    static SelectableLabel(position: any, text: string, style: any): void;
    static PasswordField(position: any, password: string): string;
    static PasswordField(position: any, password: string, style: any): string;
    static PasswordField(position: any, label: string, password: string): string;
    static PasswordField(position: any, label: string, password: string, style: any): string;
    static PasswordField(position: any, label: any, password: string): string;
    static PasswordField(position: any, label: any, password: string, style: any): string;
    static FloatField(position: any, value: number): number;
    static FloatField(position: any, value: number, style: any): number;
    static FloatField(position: any, label: string, value: number): number;
    static FloatField(position: any, label: string, value: number, style: any): number;
    static FloatField(position: any, label: any, value: number): number;
    static FloatField(position: any, label: any, value: number, style: any): number;
    static DelayedFloatField(position: any, value: number): number;
    static DelayedFloatField(position: any, value: number, style: any): number;
    static DelayedFloatField(position: any, label: string, value: number): number;
    static DelayedFloatField(position: any, label: string, value: number, style: any): number;
    static DelayedFloatField(position: any, label: any, value: number): number;
    static DelayedFloatField(position: any, label: any, value: number, style: any): number;
    static DelayedFloatField(position: any, property: UnityEditor.SerializedProperty): void;
    static DelayedFloatField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static DoubleField(position: any, value: number): number;
    static DoubleField(position: any, value: number, style: any): number;
    static DoubleField(position: any, label: string, value: number): number;
    static DoubleField(position: any, label: string, value: number, style: any): number;
    static DoubleField(position: any, label: any, value: number): number;
    static DoubleField(position: any, label: any, value: number, style: any): number;
    static DelayedDoubleField(position: any, value: number): number;
    static DelayedDoubleField(position: any, value: number, style: any): number;
    static DelayedDoubleField(position: any, label: string, value: number): number;
    static DelayedDoubleField(position: any, label: string, value: number, style: any): number;
    static DelayedDoubleField(position: any, label: any, value: number): number;
    static DelayedDoubleField(position: any, label: any, value: number, style: any): number;
    static IntField(position: any, value: number): number;
    static IntField(position: any, value: number, style: any): number;
    static IntField(position: any, label: string, value: number): number;
    static IntField(position: any, label: string, value: number, style: any): number;
    static IntField(position: any, label: any, value: number): number;
    static IntField(position: any, label: any, value: number, style: any): number;
    static DelayedIntField(position: any, value: number): number;
    static DelayedIntField(position: any, value: number, style: any): number;
    static DelayedIntField(position: any, label: string, value: number): number;
    static DelayedIntField(position: any, label: string, value: number, style: any): number;
    static DelayedIntField(position: any, label: any, value: number): number;
    static DelayedIntField(position: any, label: any, value: number, style: any): number;
    static DelayedIntField(position: any, property: UnityEditor.SerializedProperty): void;
    static DelayedIntField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static LongField(position: any, value: number): number;
    static LongField(position: any, value: number, style: any): number;
    static LongField(position: any, label: string, value: number): number;
    static LongField(position: any, label: string, value: number, style: any): number;
    static LongField(position: any, label: any, value: number): number;
    static LongField(position: any, label: any, value: number, style: any): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: string[]): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: string[], style: any): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: any[]): number;
    static Popup(position: any, selectedIndex: number, displayedOptions: any[], style: any): number;
    static Popup(position: any, label: string, selectedIndex: number, displayedOptions: string[]): number;
    static Popup(position: any, label: string, selectedIndex: number, displayedOptions: string[], style: any): number;
    static Popup(position: any, label: any, selectedIndex: number, displayedOptions: any[]): number;
    static Popup(position: any, label: any, selectedIndex: number, displayedOptions: any[], style: any): number;
    static EnumPopup(position: any, selected: any): any;
    static EnumPopup(position: any, selected: any, style: any): any;
    static EnumPopup(position: any, label: string, selected: any): any;
    static EnumPopup(position: any, label: string, selected: any, style: any): any;
    static EnumPopup(position: any, label: any, selected: any): any;
    static EnumPopup(position: any, label: any, selected: any, style: any): any;
    static EnumMaskPopup(position: any, label: string, selected: any): any;
    static EnumMaskPopup(position: any, label: string, selected: any, style: any): any;
    static EnumMaskPopup(position: any, label: any, selected: any): any;
    static EnumMaskPopup(position: any, label: any, selected: any, style: any): any;
    static IntPopup(position: any, selectedValue: number, displayedOptions: string[], optionValues: number[]): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: string[], optionValues: number[], style: any): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: any[], optionValues: number[]): number;
    static IntPopup(position: any, selectedValue: number, displayedOptions: any[], optionValues: number[], style: any): number;
    static IntPopup(position: any, label: any, selectedValue: number, displayedOptions: any[], optionValues: number[]): number;
    static IntPopup(position: any, label: any, selectedValue: number, displayedOptions: any[], optionValues: number[], style: any): number;
    static IntPopup(position: any, property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[]): void;
    static IntPopup(position: any, property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], label: any): void;
    static IntPopup(position: any, label: string, selectedValue: number, displayedOptions: string[], optionValues: number[]): number;
    static IntPopup(position: any, label: string, selectedValue: number, displayedOptions: string[], optionValues: number[], style: any): number;
    static TagField(position: any, tag: string): string;
    static TagField(position: any, tag: string, style: any): string;
    static TagField(position: any, label: string, tag: string): string;
    static TagField(position: any, label: string, tag: string, style: any): string;
    static TagField(position: any, label: any, tag: string): string;
    static TagField(position: any, label: any, tag: string, style: any): string;
    static LayerField(position: any, layer: number): number;
    static LayerField(position: any, layer: number, style: any): number;
    static LayerField(position: any, label: string, layer: number): number;
    static LayerField(position: any, label: string, layer: number, style: any): number;
    static LayerField(position: any, label: any, layer: number): number;
    static LayerField(position: any, label: any, layer: number, style: any): number;
    static MaskField(position: any, label: any, mask: number, displayedOptions: string[]): number;
    static MaskField(position: any, label: any, mask: number, displayedOptions: string[], style: any): number;
    static MaskField(position: any, label: string, mask: number, displayedOptions: string[]): number;
    static MaskField(position: any, label: string, mask: number, displayedOptions: string[], style: any): number;
    static MaskField(position: any, mask: number, displayedOptions: string[]): number;
    static MaskField(position: any, mask: number, displayedOptions: string[], style: any): number;
    static EnumMaskField(position: any, label: any, enumValue: any): any;
    static EnumMaskField(position: any, label: any, enumValue: any, style: any): any;
    static EnumMaskField(position: any, label: string, enumValue: any): any;
    static EnumMaskField(position: any, label: string, enumValue: any, style: any): any;
    static EnumMaskField(position: any, enumValue: any): any;
    static EnumMaskField(position: any, enumValue: any, style: any): any;
    static Foldout(position: any, foldout: boolean, content: string): boolean;
    static Foldout(position: any, foldout: boolean, content: string, style: any): boolean;
    static Foldout(position: any, foldout: boolean, content: string, toggleOnLabelClick: boolean): boolean;
    static Foldout(position: any, foldout: boolean, content: string, toggleOnLabelClick: boolean, style: any): boolean;
    static Foldout(position: any, foldout: boolean, content: any): boolean;
    static Foldout(position: any, foldout: boolean, content: any, style: any): boolean;
    static Foldout(position: any, foldout: boolean, content: any, toggleOnLabelClick: boolean): boolean;
    static Foldout(position: any, foldout: boolean, content: any, toggleOnLabelClick: boolean, style: any): boolean;
    static HandlePrefixLabel(totalPosition: any, labelPosition: any, label: any, id: number): void;
    static HandlePrefixLabel(totalPosition: any, labelPosition: any, label: any): void;
    static HandlePrefixLabel(totalPosition: any, labelPosition: any, label: any, id: number, style: any): void;
    static DrawTextureAlpha(position: any, image: any, scaleMode: any): void;
    static DrawTextureAlpha(position: any, image: any): void;
    static DrawTextureAlpha(position: any, image: any, scaleMode: any, imageAspect: number): void;
    static DrawTextureTransparent(position: any, image: any, scaleMode: any): void;
    static DrawTextureTransparent(position: any, image: any): void;
    static DrawTextureTransparent(position: any, image: any, scaleMode: any, imageAspect: number): void;
    static DrawPreviewTexture(position: any, image: any, mat: any, scaleMode: any): void;
    static DrawPreviewTexture(position: any, image: any, mat: any): void;
    static DrawPreviewTexture(position: any, image: any): void;
    static DrawPreviewTexture(position: any, image: any, mat: any, scaleMode: any, imageAspect: number): void;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty): number;
    static GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): number;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty): boolean;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty, includeChildren: boolean): boolean;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty, label: any): boolean;
    static PropertyField(position: any, property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): boolean;
    static FocusTextInControl(name: string): void;
    static BeginDisabledGroup(disabled: boolean): void;
    static EndDisabledGroup(): void;
    static BeginChangeCheck(): void;
    static EndChangeCheck(): boolean;
    static DropShadowLabel(position: any, text: string): void;
    static DropShadowLabel(position: any, content: any): void;
    static DropShadowLabel(position: any, text: string, style: any): void;
    static DropShadowLabel(position: any, content: any, style: any): void;
    static Toggle(position: any, value: boolean): boolean;
    static Toggle(position: any, label: string, value: boolean): boolean;
    static Toggle(position: any, value: boolean, style: any): boolean;
    static Toggle(position: any, label: string, value: boolean, style: any): boolean;
    static Toggle(position: any, label: any, value: boolean): boolean;
    static Toggle(position: any, label: any, value: boolean, style: any): boolean;
    static DoPasswordField(id: number, position: any, password: string, style: any): string;
    static DoPasswordField(id: number, position: any, label: any, password: string, style: any): string;
    static Slider(position: any, value: number, leftValue: number, rightValue: number): number;
    static Slider(position: any, label: string, value: number, leftValue: number, rightValue: number): number;
    static Slider(position: any, label: any, value: number, leftValue: number, rightValue: number): number;
    static Slider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number): void;
    static Slider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string): void;
    static Slider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any): void;
    static IntSlider(position: any, value: number, leftValue: number, rightValue: number): number;
    static IntSlider(position: any, label: string, value: number, leftValue: number, rightValue: number): number;
    static IntSlider(position: any, label: any, value: number, leftValue: number, rightValue: number): number;
    static IntSlider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number): void;
    static IntSlider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string): void;
    static IntSlider(position: any, property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any): void;
    static MinMaxSlider(label: any, position: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MinMaxSlider(position: any, label: string, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MinMaxSlider(position: any, label: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static MinMaxSlider(position: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty, objType: any): void;
    static ObjectField(position: any, property: UnityEditor.SerializedProperty, objType: any, label: any): void;
    static ObjectField(position: any, obj: any, objType: any, allowSceneObjects: boolean): any;
    static ObjectField(position: any, obj: any, objType: any): any;
    static ObjectField(position: any, label: string, obj: any, objType: any, allowSceneObjects: boolean): any;
    static ObjectField(position: any, label: string, obj: any, objType: any): any;
    static ObjectField(position: any, label: any, obj: any, objType: any, allowSceneObjects: boolean): any;
    static ObjectField(position: any, label: any, obj: any, objType: any): any;
    static IndentedRect(source: any): any;
    static Vector2Field(position: any, label: string, value: any): any;
    static Vector2Field(position: any, label: any, value: any): any;
    static Vector3Field(position: any, label: string, value: any): any;
    static Vector3Field(position: any, label: any, value: any): any;
    static Vector4Field(position: any, label: string, value: any): any;
    static Vector4Field(position: any, label: any, value: any): any;
    static RectField(position: any, value: any): any;
    static RectField(position: any, label: string, value: any): any;
    static RectField(position: any, label: any, value: any): any;
    static BoundsField(position: any, value: any): any;
    static BoundsField(position: any, label: string, value: any): any;
    static BoundsField(position: any, label: any, value: any): any;
    static MultiFloatField(position: any, label: any, subLabels: any[], values: number[]): void;
    static MultiFloatField(position: any, subLabels: any[], values: number[]): void;
    static MultiPropertyField(position: any, subLabels: any[], valuesIterator: UnityEditor.SerializedProperty, label: any): void;
    static MultiPropertyField(position: any, subLabels: any[], valuesIterator: UnityEditor.SerializedProperty): void;
    static ColorField(position: any, value: any): any;
    static ColorField(position: any, label: string, value: any): any;
    static ColorField(position: any, label: any, value: any): any;
    static ColorField(position: any, label: any, value: any, showEyedropper: boolean, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig): any;
    static CurveField(position: any, value: any): any;
    static CurveField(position: any, label: string, value: any): any;
    static CurveField(position: any, label: any, value: any): any;
    static CurveField(position: any, value: any, color: any, ranges: any): any;
    static CurveField(position: any, label: string, value: any, color: any, ranges: any): any;
    static CurveField(position: any, label: any, value: any, color: any, ranges: any): any;
    static CurveField(position: any, property: UnityEditor.SerializedProperty, color: any, ranges: any): void;
    static CurveField(position: any, property: UnityEditor.SerializedProperty, color: any, ranges: any, label: any): void;
    static InspectorTitlebar(position: any, targetObjs: any[]): void;
    static InspectorTitlebar(position: any, foldout: boolean, targetObj: any, expandable: boolean): boolean;
    static InspectorTitlebar(position: any, foldout: boolean, targetObjs: any[], expandable: boolean): boolean;
    static ProgressBar(position: any, value: number, text: string): void;
    static HelpBox(position: any, message: string, type: UnityEditor.MessageType): void;
    static PrefixLabel(totalPosition: any, label: any): any;
    static PrefixLabel(totalPosition: any, label: any, style: any): any;
    static PrefixLabel(totalPosition: any, id: number, label: any): any;
    static PrefixLabel(totalPosition: any, id: number, label: any, style: any): any;
    static BeginProperty(totalPosition: any, label: any, property: UnityEditor.SerializedProperty): any;
    static EndProperty(): void;
    static GetPropertyHeight(type: UnityEditor.SerializedPropertyType, label: any): number;
    static DrawRect(rect: any, color: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static showMixedValue: boolean;
    static readonly actionKey: boolean;
    static indentLevel: number;
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class DelayedTextEditor {
    // constructors
    constructor();
    // methods
    BeginGUI(): void;
    EndGUI(type: any): void;
    EndEditing(): void;
    OnGUI(id: number, value: string, changed: any): string;
    BeginEditing(id: number, newText: string, position: any, style: any, multiline: boolean, passwordField: boolean): void;
    OnFocus(): void;
    OnLostFocus(): void;
    HandleKeyEvent(e: any): boolean;
    DeleteLineBack(): boolean;
    DeleteWordBack(): boolean;
    DeleteWordForward(): boolean;
    Delete(): boolean;
    CanPaste(): boolean;
    Backspace(): boolean;
    SelectAll(): void;
    SelectNone(): void;
    DeleteSelection(): boolean;
    ReplaceSelection(replace: string): void;
    Insert(c: any): void;
    MoveSelectionToAltCursor(): void;
    MoveRight(): void;
    MoveLeft(): void;
    MoveUp(): void;
    MoveDown(): void;
    MoveLineStart(): void;
    MoveLineEnd(): void;
    MoveGraphicalLineStart(): void;
    MoveGraphicalLineEnd(): void;
    MoveTextStart(): void;
    MoveTextEnd(): void;
    MoveParagraphForward(): void;
    MoveParagraphBackward(): void;
    MoveCursorToPosition(cursorPosition: any): void;
    MoveAltCursorToPosition(cursorPosition: any): void;
    IsOverSelection(cursorPosition: any): boolean;
    SelectToPosition(cursorPosition: any): void;
    SelectLeft(): void;
    SelectRight(): void;
    SelectUp(): void;
    SelectDown(): void;
    SelectTextEnd(): void;
    SelectTextStart(): void;
    MouseDragSelectsWholeWords(on: boolean): void;
    DblClickSnap(snapping: any): void;
    MoveWordRight(): void;
    MoveToStartOfNextWord(): void;
    MoveToEndOfPreviousWord(): void;
    SelectToStartOfNextWord(): void;
    SelectToEndOfPreviousWord(): void;
    FindStartOfNextWord(p: number): number;
    MoveWordLeft(): void;
    SelectWordRight(): void;
    SelectWordLeft(): void;
    ExpandSelectGraphicalLineStart(): void;
    ExpandSelectGraphicalLineEnd(): void;
    SelectGraphicalLineStart(): void;
    SelectGraphicalLineEnd(): void;
    SelectParagraphForward(): void;
    SelectParagraphBackward(): void;
    SelectCurrentWord(): void;
    SelectCurrentParagraph(): void;
    UpdateScrollOffsetIfNeeded(evt: any): void;
    DrawCursor(newText: string): void;
    SaveBackup(): void;
    Undo(): void;
    Cut(): boolean;
    Copy(): void;
    Paste(): boolean;
    DetectFocusChange(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    content: any;
    text: string;
    position: any;
    cursorIndex: number;
    selectIndex: number;
    readonly hasSelection: boolean;
    readonly SelectedText: string;
    // fields
    keyboardOnScreen: any;
    controlID: number;
    style: any;
    multiline: boolean;
    hasHorizontalCursorPos: boolean;
    isPasswordField: boolean;
    scrollOffset: any;
    graphicalCursorPos: any;
    graphicalSelectCursorPos: any;
  }
}
declare namespace UnityEditor.EditorGUI {
  class DisabledGroupScope {
    // constructors
    constructor(disabled: boolean);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class DisabledScope {
    // constructors
    private constructor();
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class GUIContents {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUI.GUIContents {
  class IconName {
    // constructors
    constructor(name: string);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class KnobContext {
    // constructors
    private constructor();
    // methods
    Handle(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class ObjectFieldVisualType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static IconAndText: UnityEditor.EditorGUI.ObjectFieldVisualType;
    static LargePreview: UnityEditor.EditorGUI.ObjectFieldVisualType;
    static MiniPreivew: UnityEditor.EditorGUI.ObjectFieldVisualType;
  }
}
declare namespace UnityEditor.EditorGUI {
  class PopupCallbackInfo {
    // constructors
    constructor(controlID: number);
    // methods
    static GetSelectedValueForControl(controlID: number, selected: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static instance: UnityEditor.EditorGUI.PopupCallbackInfo;
  }
}
declare namespace UnityEditor.EditorGUI {
  class PopupMenuEvent {
    // constructors
    constructor(cmd: string, v: UnityEditor.GUIView);
    // methods
    SendEvent(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    commandName: string;
    receiver: UnityEditor.GUIView;
  }
}
declare namespace UnityEditor.EditorGUI {
  class PropertyScope {
    // constructors
    constructor(totalPosition: any, label: any, property: UnityEditor.SerializedProperty);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class RecycledTextEditor {
    // constructors
    constructor();
    // methods
    BeginEditing(id: number, newText: string, position: any, style: any, multiline: boolean, passwordField: boolean): void;
    EndEditing(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    HandleKeyEvent(e: any): boolean;
    DeleteLineBack(): boolean;
    DeleteWordBack(): boolean;
    DeleteWordForward(): boolean;
    Delete(): boolean;
    CanPaste(): boolean;
    Backspace(): boolean;
    SelectAll(): void;
    SelectNone(): void;
    DeleteSelection(): boolean;
    ReplaceSelection(replace: string): void;
    Insert(c: any): void;
    MoveSelectionToAltCursor(): void;
    MoveRight(): void;
    MoveLeft(): void;
    MoveUp(): void;
    MoveDown(): void;
    MoveLineStart(): void;
    MoveLineEnd(): void;
    MoveGraphicalLineStart(): void;
    MoveGraphicalLineEnd(): void;
    MoveTextStart(): void;
    MoveTextEnd(): void;
    MoveParagraphForward(): void;
    MoveParagraphBackward(): void;
    MoveCursorToPosition(cursorPosition: any): void;
    MoveAltCursorToPosition(cursorPosition: any): void;
    IsOverSelection(cursorPosition: any): boolean;
    SelectToPosition(cursorPosition: any): void;
    SelectLeft(): void;
    SelectRight(): void;
    SelectUp(): void;
    SelectDown(): void;
    SelectTextEnd(): void;
    SelectTextStart(): void;
    MouseDragSelectsWholeWords(on: boolean): void;
    DblClickSnap(snapping: any): void;
    MoveWordRight(): void;
    MoveToStartOfNextWord(): void;
    MoveToEndOfPreviousWord(): void;
    SelectToStartOfNextWord(): void;
    SelectToEndOfPreviousWord(): void;
    FindStartOfNextWord(p: number): number;
    MoveWordLeft(): void;
    SelectWordRight(): void;
    SelectWordLeft(): void;
    ExpandSelectGraphicalLineStart(): void;
    ExpandSelectGraphicalLineEnd(): void;
    SelectGraphicalLineStart(): void;
    SelectGraphicalLineEnd(): void;
    SelectParagraphForward(): void;
    SelectParagraphBackward(): void;
    SelectCurrentWord(): void;
    SelectCurrentParagraph(): void;
    UpdateScrollOffsetIfNeeded(evt: any): void;
    DrawCursor(newText: string): void;
    SaveBackup(): void;
    Undo(): void;
    Cut(): boolean;
    Copy(): void;
    Paste(): boolean;
    DetectFocusChange(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    content: any;
    text: string;
    position: any;
    cursorIndex: number;
    selectIndex: number;
    readonly hasSelection: boolean;
    readonly SelectedText: string;
    // fields
    keyboardOnScreen: any;
    controlID: number;
    style: any;
    multiline: boolean;
    hasHorizontalCursorPos: boolean;
    isPasswordField: boolean;
    scrollOffset: any;
    graphicalCursorPos: any;
    graphicalSelectCursorPos: any;
  }
}
declare namespace UnityEditor.EditorGUI {
  class Resizer {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUI {
  class VUMeter {
    // constructors
    constructor();
    // methods
    static HorizontalMeter(position: any, value: number, peak: number, foregroundTexture: any, peakColor: any): void;
    static VerticalMeter(position: any, value: number, peak: number, foregroundTexture: any, peakColor: any): void;
    static HorizontalMeter(position: any, value: number, data: any, foregroundTexture: any, peakColor: any): void;
    static VerticalMeter(position: any, value: number, data: any, foregroundTexture: any, peakColor: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly verticalVUTexture: any;
    static readonly horizontalVUTexture: any;
    // fields
  }
}
declare namespace UnityEditor.EditorGUI.VUMeter {
  class SmoothingData {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    lastValue: number;
    peakValue: number;
    peakValueTime: number;
  }
}
declare namespace UnityEditor {
  class EditorGUIExt {
    // constructors
    constructor();
    // methods
    static MinMaxScroller(position: any, id: number, value: any, size: any, visualStart: number, visualEnd: number, startLimit: number, endLimit: number, slider: any, thumb: any, leftButton: any, rightButton: any, horiz: boolean): void;
    static MinMaxSlider(position: any, value: any, size: any, visualStart: number, visualEnd: number, startLimit: number, endLimit: number, slider: any, thumb: any, horiz: boolean): void;
    static DragSelection(positions: any[], selections: any, style: any): boolean;
    static MultiSelection(rect: any, positions: any[], content: any, hitPositions: any[], selections: any, readOnly: boolean[], clickedIndex: any, offset: any, startSelect: any, endSelect: any, style: any): UnityEditor.HighLevelEvent;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUIExt {
  class DragSelectionState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.EditorGUIExt.DragSelectionState;
    static DragSelecting: UnityEditor.EditorGUIExt.DragSelectionState;
    static Dragging: UnityEditor.EditorGUIExt.DragSelectionState;
  }
}
declare namespace UnityEditor.EditorGUIExt {
  class MinMaxSliderState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    dragStartPos: number;
    dragStartValue: number;
    dragStartSize: number;
    dragStartValuesPerPixel: number;
    dragStartLimit: number;
    dragEndLimit: number;
    whereWeDrag: number;
  }
}
declare namespace UnityEditor.EditorGUIExt {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    selectionRect: any;
  }
}
declare namespace UnityEditor {
  class EditorGUIInternal {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorGUILayout {
    // constructors
    constructor();
    // methods
    static Foldout(foldout: boolean, content: string): boolean;
    static Foldout(foldout: boolean, content: string, style: any): boolean;
    static Foldout(foldout: boolean, content: any): boolean;
    static Foldout(foldout: boolean, content: any, style: any): boolean;
    static Foldout(foldout: boolean, content: string, toggleOnLabelClick: boolean): boolean;
    static Foldout(foldout: boolean, content: string, toggleOnLabelClick: boolean, style: any): boolean;
    static Foldout(foldout: boolean, content: any, toggleOnLabelClick: boolean): boolean;
    static Foldout(foldout: boolean, content: any, toggleOnLabelClick: boolean, style: any): boolean;
    static PrefixLabel(label: string): void;
    static PrefixLabel(label: string, followingStyle: any): void;
    static PrefixLabel(label: string, followingStyle: any, labelStyle: any): void;
    static PrefixLabel(label: any): void;
    static PrefixLabel(label: any, followingStyle: any): void;
    static PrefixLabel(label: any, followingStyle: any, labelStyle: any): void;
    static LabelField(label: string, options: any[]): void;
    static LabelField(label: string, style: any, options: any[]): void;
    static LabelField(label: any, options: any[]): void;
    static LabelField(label: any, style: any, options: any[]): void;
    static LabelField(label: string, label2: string, options: any[]): void;
    static LabelField(label: string, label2: string, style: any, options: any[]): void;
    static LabelField(label: any, label2: any, options: any[]): void;
    static LabelField(label: any, label2: any, style: any, options: any[]): void;
    static Toggle(value: boolean, options: any[]): boolean;
    static Toggle(label: string, value: boolean, options: any[]): boolean;
    static Toggle(label: any, value: boolean, options: any[]): boolean;
    static Toggle(value: boolean, style: any, options: any[]): boolean;
    static Toggle(label: string, value: boolean, style: any, options: any[]): boolean;
    static Toggle(label: any, value: boolean, style: any, options: any[]): boolean;
    static ToggleLeft(label: string, value: boolean, options: any[]): boolean;
    static ToggleLeft(label: any, value: boolean, options: any[]): boolean;
    static ToggleLeft(label: string, value: boolean, labelStyle: any, options: any[]): boolean;
    static ToggleLeft(label: any, value: boolean, labelStyle: any, options: any[]): boolean;
    static TextField(text: string, options: any[]): string;
    static TextField(text: string, style: any, options: any[]): string;
    static TextField(label: string, text: string, options: any[]): string;
    static TextField(label: string, text: string, style: any, options: any[]): string;
    static TextField(label: any, text: string, options: any[]): string;
    static TextField(label: any, text: string, style: any, options: any[]): string;
    static DelayedTextField(text: string, options: any[]): string;
    static DelayedTextField(text: string, style: any, options: any[]): string;
    static DelayedTextField(label: string, text: string, options: any[]): string;
    static DelayedTextField(label: string, text: string, style: any, options: any[]): string;
    static DelayedTextField(label: any, text: string, options: any[]): string;
    static DelayedTextField(label: any, text: string, style: any, options: any[]): string;
    static DelayedTextField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static DelayedTextField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static TextArea(text: string, options: any[]): string;
    static TextArea(text: string, style: any, options: any[]): string;
    static SelectableLabel(text: string, options: any[]): void;
    static SelectableLabel(text: string, style: any, options: any[]): void;
    static PasswordField(password: string, options: any[]): string;
    static PasswordField(password: string, style: any, options: any[]): string;
    static PasswordField(label: string, password: string, options: any[]): string;
    static PasswordField(label: string, password: string, style: any, options: any[]): string;
    static PasswordField(label: any, password: string, options: any[]): string;
    static PasswordField(label: any, password: string, style: any, options: any[]): string;
    static FloatField(value: number, options: any[]): number;
    static FloatField(value: number, style: any, options: any[]): number;
    static FloatField(label: string, value: number, options: any[]): number;
    static FloatField(label: string, value: number, style: any, options: any[]): number;
    static FloatField(label: any, value: number, options: any[]): number;
    static FloatField(label: any, value: number, style: any, options: any[]): number;
    static DelayedFloatField(value: number, options: any[]): number;
    static DelayedFloatField(value: number, style: any, options: any[]): number;
    static DelayedFloatField(label: string, value: number, options: any[]): number;
    static DelayedFloatField(label: string, value: number, style: any, options: any[]): number;
    static DelayedFloatField(label: any, value: number, options: any[]): number;
    static DelayedFloatField(label: any, value: number, style: any, options: any[]): number;
    static DelayedFloatField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static DelayedFloatField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static DoubleField(value: number, options: any[]): number;
    static DoubleField(value: number, style: any, options: any[]): number;
    static DoubleField(label: string, value: number, options: any[]): number;
    static DoubleField(label: string, value: number, style: any, options: any[]): number;
    static DoubleField(label: any, value: number, options: any[]): number;
    static DoubleField(label: any, value: number, style: any, options: any[]): number;
    static DelayedDoubleField(value: number, options: any[]): number;
    static DelayedDoubleField(value: number, style: any, options: any[]): number;
    static DelayedDoubleField(label: string, value: number, options: any[]): number;
    static DelayedDoubleField(label: string, value: number, style: any, options: any[]): number;
    static DelayedDoubleField(label: any, value: number, options: any[]): number;
    static DelayedDoubleField(label: any, value: number, style: any, options: any[]): number;
    static IntField(value: number, options: any[]): number;
    static IntField(value: number, style: any, options: any[]): number;
    static IntField(label: string, value: number, options: any[]): number;
    static IntField(label: string, value: number, style: any, options: any[]): number;
    static IntField(label: any, value: number, options: any[]): number;
    static IntField(label: any, value: number, style: any, options: any[]): number;
    static DelayedIntField(value: number, options: any[]): number;
    static DelayedIntField(value: number, style: any, options: any[]): number;
    static DelayedIntField(label: string, value: number, options: any[]): number;
    static DelayedIntField(label: string, value: number, style: any, options: any[]): number;
    static DelayedIntField(label: any, value: number, options: any[]): number;
    static DelayedIntField(label: any, value: number, style: any, options: any[]): number;
    static DelayedIntField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static DelayedIntField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static LongField(value: number, options: any[]): number;
    static LongField(value: number, style: any, options: any[]): number;
    static LongField(label: string, value: number, options: any[]): number;
    static LongField(label: string, value: number, style: any, options: any[]): number;
    static LongField(label: any, value: number, options: any[]): number;
    static LongField(label: any, value: number, style: any, options: any[]): number;
    static Slider(value: number, leftValue: number, rightValue: number, options: any[]): number;
    static Slider(label: string, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static Slider(label: any, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static Slider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, options: any[]): void;
    static Slider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string, options: any[]): void;
    static Slider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any, options: any[]): void;
    static IntSlider(value: number, leftValue: number, rightValue: number, options: any[]): number;
    static IntSlider(label: string, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static IntSlider(label: any, value: number, leftValue: number, rightValue: number, options: any[]): number;
    static IntSlider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, options: any[]): void;
    static IntSlider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: string, options: any[]): void;
    static IntSlider(property: UnityEditor.SerializedProperty, leftValue: number, rightValue: number, label: any, options: any[]): void;
    static MinMaxSlider(minValue: any, maxValue: any, minLimit: number, maxLimit: number, options: any[]): void;
    static MinMaxSlider(label: string, minValue: any, maxValue: any, minLimit: number, maxLimit: number, options: any[]): void;
    static MinMaxSlider(label: any, minValue: any, maxValue: any, minLimit: number, maxLimit: number, options: any[]): void;
    static Popup(selectedIndex: number, displayedOptions: string[], options: any[]): number;
    static Popup(selectedIndex: number, displayedOptions: string[], style: any, options: any[]): number;
    static Popup(selectedIndex: number, displayedOptions: any[], options: any[]): number;
    static Popup(selectedIndex: number, displayedOptions: any[], style: any, options: any[]): number;
    static Popup(label: string, selectedIndex: number, displayedOptions: string[], options: any[]): number;
    static Popup(label: string, selectedIndex: number, displayedOptions: string[], style: any, options: any[]): number;
    static Popup(label: any, selectedIndex: number, displayedOptions: any[], options: any[]): number;
    static Popup(label: any, selectedIndex: number, displayedOptions: any[], style: any, options: any[]): number;
    static EnumPopup(selected: any, options: any[]): any;
    static EnumPopup(selected: any, style: any, options: any[]): any;
    static EnumPopup(label: string, selected: any, options: any[]): any;
    static EnumPopup(label: string, selected: any, style: any, options: any[]): any;
    static EnumPopup(label: any, selected: any, options: any[]): any;
    static EnumPopup(label: any, selected: any, style: any, options: any[]): any;
    static EnumMaskPopup(label: string, selected: any, options: any[]): any;
    static EnumMaskPopup(label: string, selected: any, style: any, options: any[]): any;
    static EnumMaskPopup(label: any, selected: any, options: any[]): any;
    static EnumMaskPopup(label: any, selected: any, style: any, options: any[]): any;
    static IntPopup(selectedValue: number, displayedOptions: string[], optionValues: number[], options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: string[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: any[], optionValues: number[], options: any[]): number;
    static IntPopup(selectedValue: number, displayedOptions: any[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(label: string, selectedValue: number, displayedOptions: string[], optionValues: number[], options: any[]): number;
    static IntPopup(label: string, selectedValue: number, displayedOptions: string[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(label: any, selectedValue: number, displayedOptions: any[], optionValues: number[], options: any[]): number;
    static IntPopup(label: any, selectedValue: number, displayedOptions: any[], optionValues: number[], style: any, options: any[]): number;
    static IntPopup(property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], options: any[]): void;
    static IntPopup(property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], label: any, options: any[]): void;
    static IntPopup(property: UnityEditor.SerializedProperty, displayedOptions: any[], optionValues: number[], label: any, style: any, options: any[]): void;
    static TagField(tag: string, options: any[]): string;
    static TagField(tag: string, style: any, options: any[]): string;
    static TagField(label: string, tag: string, options: any[]): string;
    static TagField(label: string, tag: string, style: any, options: any[]): string;
    static TagField(label: any, tag: string, options: any[]): string;
    static TagField(label: any, tag: string, style: any, options: any[]): string;
    static LayerField(layer: number, options: any[]): number;
    static LayerField(layer: number, style: any, options: any[]): number;
    static LayerField(label: string, layer: number, options: any[]): number;
    static LayerField(label: string, layer: number, style: any, options: any[]): number;
    static LayerField(label: any, layer: number, options: any[]): number;
    static LayerField(label: any, layer: number, style: any, options: any[]): number;
    static MaskField(label: any, mask: number, displayedOptions: string[], style: any, options: any[]): number;
    static MaskField(label: string, mask: number, displayedOptions: string[], style: any, options: any[]): number;
    static MaskField(label: any, mask: number, displayedOptions: string[], options: any[]): number;
    static MaskField(label: string, mask: number, displayedOptions: string[], options: any[]): number;
    static MaskField(mask: number, displayedOptions: string[], style: any, options: any[]): number;
    static MaskField(mask: number, displayedOptions: string[], options: any[]): number;
    static EnumMaskField(label: any, enumValue: any, style: any, options: any[]): any;
    static EnumMaskField(label: string, enumValue: any, style: any, options: any[]): any;
    static EnumMaskField(label: any, enumValue: any, options: any[]): any;
    static EnumMaskField(label: string, enumValue: any, options: any[]): any;
    static EnumMaskField(enumValue: any, style: any, options: any[]): any;
    static EnumMaskField(enumValue: any, options: any[]): any;
    static ObjectField(obj: any, objType: any, options: any[]): any;
    static ObjectField(obj: any, objType: any, allowSceneObjects: boolean, options: any[]): any;
    static ObjectField(label: string, obj: any, objType: any, options: any[]): any;
    static ObjectField(label: string, obj: any, objType: any, allowSceneObjects: boolean, options: any[]): any;
    static ObjectField(label: any, obj: any, objType: any, options: any[]): any;
    static ObjectField(label: any, obj: any, objType: any, allowSceneObjects: boolean, options: any[]): any;
    static ObjectField(property: UnityEditor.SerializedProperty, options: any[]): void;
    static ObjectField(property: UnityEditor.SerializedProperty, label: any, options: any[]): void;
    static ObjectField(property: UnityEditor.SerializedProperty, objType: any, options: any[]): void;
    static ObjectField(property: UnityEditor.SerializedProperty, objType: any, label: any, options: any[]): void;
    static Vector2Field(label: string, value: any, options: any[]): any;
    static Vector2Field(label: any, value: any, options: any[]): any;
    static Vector3Field(label: string, value: any, options: any[]): any;
    static Vector3Field(label: any, value: any, options: any[]): any;
    static Vector4Field(label: string, value: any, options: any[]): any;
    static Vector4Field(label: any, value: any, options: any[]): any;
    static RectField(value: any, options: any[]): any;
    static RectField(label: string, value: any, options: any[]): any;
    static RectField(label: any, value: any, options: any[]): any;
    static BoundsField(value: any, options: any[]): any;
    static BoundsField(label: string, value: any, options: any[]): any;
    static BoundsField(label: any, value: any, options: any[]): any;
    static ColorField(value: any, options: any[]): any;
    static ColorField(label: string, value: any, options: any[]): any;
    static ColorField(label: any, value: any, options: any[]): any;
    static ColorField(label: any, value: any, showEyedropper: boolean, showAlpha: boolean, hdr: boolean, hdrConfig: UnityEditor.ColorPickerHDRConfig, options: any[]): any;
    static CurveField(value: any, options: any[]): any;
    static CurveField(label: string, value: any, options: any[]): any;
    static CurveField(label: any, value: any, options: any[]): any;
    static CurveField(value: any, color: any, ranges: any, options: any[]): any;
    static CurveField(label: string, value: any, color: any, ranges: any, options: any[]): any;
    static CurveField(label: any, value: any, color: any, ranges: any, options: any[]): any;
    static CurveField(property: UnityEditor.SerializedProperty, color: any, ranges: any, options: any[]): void;
    static CurveField(property: UnityEditor.SerializedProperty, color: any, ranges: any, label: any, options: any[]): void;
    static InspectorTitlebar(foldout: boolean, targetObj: any): boolean;
    static InspectorTitlebar(foldout: boolean, targetObj: any, expandable: boolean): boolean;
    static InspectorTitlebar(foldout: boolean, targetObjs: any[]): boolean;
    static InspectorTitlebar(foldout: boolean, targetObjs: any[], expandable: boolean): boolean;
    static InspectorTitlebar(targetObjs: any[]): void;
    static HelpBox(message: string, type: UnityEditor.MessageType): void;
    static HelpBox(message: string, type: UnityEditor.MessageType, wide: boolean): void;
    static Space(): void;
    static Separator(): void;
    static BeginToggleGroup(label: string, toggle: boolean): boolean;
    static BeginToggleGroup(label: any, toggle: boolean): boolean;
    static EndToggleGroup(): void;
    static BeginHorizontal(options: any[]): any;
    static BeginHorizontal(style: any, options: any[]): any;
    static EndHorizontal(): void;
    static BeginVertical(options: any[]): any;
    static BeginVertical(style: any, options: any[]): any;
    static EndVertical(): void;
    static BeginScrollView(scrollPosition: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: any[]): any;
    static BeginScrollView(scrollPosition: any, horizontalScrollbar: any, verticalScrollbar: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, style: any, options: any[]): any;
    static BeginScrollView(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: any, verticalScrollbar: any, background: any, options: any[]): any;
    static EndScrollView(): void;
    static PropertyField(property: UnityEditor.SerializedProperty, options: any[]): boolean;
    static PropertyField(property: UnityEditor.SerializedProperty, label: any, options: any[]): boolean;
    static PropertyField(property: UnityEditor.SerializedProperty, includeChildren: boolean, options: any[]): boolean;
    static PropertyField(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean, options: any[]): boolean;
    static GetControlRect(options: any[]): any;
    static GetControlRect(hasLabel: boolean, options: any[]): any;
    static GetControlRect(hasLabel: boolean, height: number, options: any[]): any;
    static GetControlRect(hasLabel: boolean, height: number, style: any, options: any[]): any;
    static BeginFadeGroup(value: number): boolean;
    static EndFadeGroup(): void;
    static Knob(knobSize: any, value: number, minValue: number, maxValue: number, unit: string, backgroundColor: any, activeColor: any, showValue: boolean, options: any[]): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class FadeGroupScope {
    // constructors
    constructor(value: number);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly visible: boolean;
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class HorizontalScope {
    // constructors
    constructor(options: any[]);
    constructor(style: any, options: any[]);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly rect: any;
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class HorizontalScrollViewScope {
    // constructors
    constructor(scrollPosition: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowHorizontal: boolean, horizontalScrollbar: any, background: any, options: any[]);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly scrollPosition: any;
    handleScrollWheel: boolean;
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class ScrollViewScope {
    // constructors
    constructor(scrollPosition: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: any[]);
    constructor(scrollPosition: any, horizontalScrollbar: any, verticalScrollbar: any, options: any[]);
    constructor(scrollPosition: any, style: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: any, verticalScrollbar: any, background: any, options: any[]);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly scrollPosition: any;
    handleScrollWheel: boolean;
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class ToggleGroupScope {
    // constructors
    constructor(label: string, toggle: boolean);
    constructor(label: any, toggle: boolean);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly enabled: boolean;
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class VerticalScope {
    // constructors
    constructor(options: any[]);
    constructor(style: any, options: any[]);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly rect: any;
    // fields
  }
}
declare namespace UnityEditor.EditorGUILayout {
  class VerticalScrollViewScope {
    // constructors
    constructor(scrollPosition: any, options: any[]);
    constructor(scrollPosition: any, alwaysShowVertical: boolean, verticalScrollbar: any, background: any, options: any[]);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly scrollPosition: any;
    handleScrollWheel: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorGUILayoutUtilityInternal {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorGUIUtility {
    // constructors
    constructor();
    // methods
    static SerializeMainMenuToString(): string;
    static SetMenuLocalizationTestMode(onoff: boolean): void;
    static IconContent(name: string): any;
    static IconContent(name: string, text: string): any;
    static ObjectContent(obj: any, type: any): any;
    static HasObjectThumbnail(objType: any): boolean;
    static SetIconSize(size: any): void;
    static GetIconSize(): any;
    static FindTexture(name: string): any;
    static GetBuiltinSkin(skin: UnityEditor.EditorSkin): any;
    static LoadRequired(path: string): any;
    static Load(path: string): any;
    static PingObject(obj: any): void;
    static PingObject(targetInstanceID: number): void;
    static RenderGameViewCameras(target: any, targetDisplay: number, screenRect: any, mousePosition: any, gizmos: boolean): void;
    static RenderGameViewCameras(cameraRect: any, gizmos: boolean, gui: boolean): void;
    static RenderGameViewCameras(cameraRect: any, statsRect: any, gizmos: boolean, gui: boolean): void;
    static IsDisplayReferencedByCameras(displayIndex: number): boolean;
    static QueueGameViewInputEvent(evt: any): void;
    static LookLikeControls(labelWidth: number): void;
    static LookLikeControls(): void;
    static LookLikeControls(labelWidth: number, fieldWidth: number): void;
    static LookLikeInspector(): void;
    static CommandEvent(commandName: string): any;
    static DrawColorSwatch(position: any, color: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any, topFillColor: any, bottomFillColor: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any, topFillColor: any, bottomFillColor: any, curveRanges: any): void;
    static DrawCurveSwatch(position: any, curve: any, property: UnityEditor.SerializedProperty, color: any, bgColor: any, curveRanges: any): void;
    static DrawRegionSwatch(position: any, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, bgColor: any, curveRanges: any): void;
    static DrawRegionSwatch(position: any, curve: any, curve2: any, color: any, bgColor: any, curveRanges: any): void;
    static RGBToHSV(rgbColor: any, H: any, S: any, V: any): void;
    static HSVToRGB(H: number, S: number, V: number): any;
    static HSVToRGB(H: number, S: number, V: number, hdr: boolean): any;
    static AddCursorRect(position: any, mouse: UnityEditor.MouseCursor): void;
    static AddCursorRect(position: any, mouse: UnityEditor.MouseCursor, controlID: number): void;
    static SetWantsMouseJumping(wantz: number): void;
    static GetObjectPickerObject(): any;
    static GetObjectPickerControlID(): number;
    static PointsToPixels(rect: any): any;
    static PixelsToPoints(rect: any): any;
    static PointsToPixels(position: any): any;
    static PixelsToPoints(position: any): any;
    static GetFlowLayoutedRects(rect: any, style: any, horizontalSpacing: number, verticalSpacing: number, items: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly singleLineHeight: number;
    static readonly standardVerticalSpacing: number;
    static readonly isProSkin: boolean;
    static readonly whiteTexture: any;
    static editingTextField: boolean;
    static hierarchyMode: boolean;
    static wideMode: boolean;
    static readonly currentViewWidth: number;
    static labelWidth: number;
    static fieldWidth: number;
    static systemCopyBuffer: string;
    static readonly pixelsPerPoint: number;
    // fields
    static "native": any;
  }
}
declare namespace UnityEditor.EditorGUIUtility {
  class SkinnedColor {
    // constructors
    constructor(color: any, proColor: any);
    constructor(color: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    color: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorJsonUtility {
    // constructors
    private constructor();
    // methods
    static ToJson(obj: any): string;
    static ToJson(obj: any, prettyPrint: boolean): string;
    static FromJsonOverwrite(json: string, objectToOverwrite: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorLook {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Uninitialized: UnityEditor.EditorLook;
    static LikeControls: UnityEditor.EditorLook;
    static LikeInspector: UnityEditor.EditorLook;
  }
}
declare namespace UnityEditor {
  class EditorMaterialUtility {
    // constructors
    constructor();
    // methods
    static ResetDefaultTextures(material: any, overrideSetTextures: boolean): void;
    static IsBackgroundMaterial(material: any): boolean;
    static SetShaderDefaults(shader: any, name: string[], textures: any[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorMetricCollectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Bake: UnityEditor.EditorMetricCollectionType;
    static Build: UnityEditor.EditorMetricCollectionType;
    static EditorStartup: UnityEditor.EditorMetricCollectionType;
    static ProjectSnapshot: UnityEditor.EditorMetricCollectionType;
    static SessionInfo: UnityEditor.EditorMetricCollectionType;
    static UnitTest: UnityEditor.EditorMetricCollectionType;
  }
}
declare namespace UnityEditor {
  class EditorMetricEvent {
    // constructors
    constructor(en: UnityEditor.EditorMetricCollectionType);
    // methods
    Send(): void;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorPluginImporterExtension {
    // constructors
    constructor();
    // methods
    ResetValues(inspector: UnityEditor.PluginImporterInspector): void;
    HasModified(inspector: UnityEditor.PluginImporterInspector): boolean;
    Apply(inspector: UnityEditor.PluginImporterInspector): void;
    OnEnable(inspector: UnityEditor.PluginImporterInspector): void;
    OnDisable(inspector: UnityEditor.PluginImporterInspector): void;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    CalculateFinalPluginPath(platformName: string, imp: UnityEditor.PluginImporter): string;
    CheckFileCollisions(buildTargetName: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EditorPluginImporterExtension {
  class EditorPluginCPUArchitecture {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AnyCPU: UnityEditor.EditorPluginImporterExtension.EditorPluginCPUArchitecture;
    static x86: UnityEditor.EditorPluginImporterExtension.EditorPluginCPUArchitecture;
    static x86_64: UnityEditor.EditorPluginImporterExtension.EditorPluginCPUArchitecture;
  }
}
declare namespace UnityEditor.EditorPluginImporterExtension {
  class EditorPluginOSArchitecture {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AnyOS: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
    static OSX: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
    static Windows: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
    static Linux: UnityEditor.EditorPluginImporterExtension.EditorPluginOSArchitecture;
  }
}
declare namespace UnityEditor {
  class EditorPrefs {
    // constructors
    constructor();
    // methods
    static SetInt(key: string, value: number): void;
    static GetInt(key: string, defaultValue: number): number;
    static GetInt(key: string): number;
    static SetFloat(key: string, value: number): void;
    static GetFloat(key: string, defaultValue: number): number;
    static GetFloat(key: string): number;
    static SetString(key: string, value: string): void;
    static GetString(key: string, defaultValue: string): string;
    static GetString(key: string): string;
    static SetBool(key: string, value: boolean): void;
    static GetBool(key: string, defaultValue: boolean): boolean;
    static GetBool(key: string): boolean;
    static HasKey(key: string): boolean;
    static DeleteKey(key: string): void;
    static DeleteAll(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EditorSelectedRenderState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Hidden: UnityEditor.EditorSelectedRenderState;
    static Wireframe: UnityEditor.EditorSelectedRenderState;
    static Highlight: UnityEditor.EditorSelectedRenderState;
  }
}
declare namespace UnityEditor {
  class EditorSettings {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static unityRemoteDevice: string;
    static unityRemoteCompression: string;
    static unityRemoteResolution: string;
    static unityRemoteJoystickSource: string;
    static externalVersionControl: string;
    static serializationMode: UnityEditor.SerializationMode;
    static webSecurityEmulationEnabled: boolean;
    static webSecurityEmulationHostUrl: string;
    static defaultBehaviorMode: UnityEditor.EditorBehaviorMode;
    static spritePackerMode: UnityEditor.SpritePackerMode;
    static spritePackerPaddingPower: number;
    static projectGenerationUserExtensions: string[];
    static readonly projectGenerationBuiltinExtensions: string[];
    static projectGenerationRootNamespace: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorSettingsInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.EditorSettingsInspector {
  class PopupElement {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly Enabled: boolean;
    // fields
    id: string;
    requiresTeamLicense: boolean;
    content: any;
  }
}
declare namespace UnityEditor {
  class EditorSkin {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Game: UnityEditor.EditorSkin;
    static Inspector: UnityEditor.EditorSkin;
    static Scene: UnityEditor.EditorSkin;
  }
}
declare namespace UnityEditor {
  class EditorStyles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly label: any;
    static readonly miniLabel: any;
    static readonly largeLabel: any;
    static readonly boldLabel: any;
    static readonly miniBoldLabel: any;
    static readonly centeredGreyMiniLabel: any;
    static readonly wordWrappedMiniLabel: any;
    static readonly wordWrappedLabel: any;
    static readonly whiteLabel: any;
    static readonly whiteMiniLabel: any;
    static readonly whiteLargeLabel: any;
    static readonly whiteBoldLabel: any;
    static readonly radioButton: any;
    static readonly miniButton: any;
    static readonly miniButtonLeft: any;
    static readonly miniButtonMid: any;
    static readonly miniButtonRight: any;
    static readonly textField: any;
    static readonly textArea: any;
    static readonly miniTextField: any;
    static readonly numberField: any;
    static readonly popup: any;
    static readonly structHeadingLabel: any;
    static readonly objectField: any;
    static readonly objectFieldThumb: any;
    static readonly objectFieldMiniThumb: any;
    static readonly colorField: any;
    static readonly layerMaskField: any;
    static readonly toggle: any;
    static readonly foldout: any;
    static readonly foldoutPreDrop: any;
    static readonly toggleGroup: any;
    static readonly standardFont: any;
    static readonly boldFont: any;
    static readonly miniFont: any;
    static readonly miniBoldFont: any;
    static readonly toolbar: any;
    static readonly toolbarButton: any;
    static readonly toolbarPopup: any;
    static readonly toolbarDropDown: any;
    static readonly toolbarTextField: any;
    static readonly inspectorDefaultMargins: any;
    static readonly inspectorFullWidthMargins: any;
    static readonly helpBox: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorUpdateWindow {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorUserBuildSettings {
    // constructors
    constructor();
    // methods
    static SetWSADotNetNative(config: UnityEditor.WSABuildType, enabled: boolean): void;
    static GetWSADotNetNative(config: UnityEditor.WSABuildType): boolean;
    static SwitchActiveBuildTarget(target: UnityEditor.BuildTarget): boolean;
    static GetBuildLocation(target: UnityEditor.BuildTarget): string;
    static SetBuildLocation(target: UnityEditor.BuildTarget, location: string): void;
    static SetPlatformSettings(platformName: string, name: string, value: string): void;
    static GetPlatformSettings(platformName: string, name: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static selectedBuildTargetGroup: UnityEditor.BuildTargetGroup;
    static selectedStandaloneTarget: UnityEditor.BuildTarget;
    static psmBuildSubtarget: UnityEditor.PSMBuildSubtarget;
    static psp2BuildSubtarget: UnityEditor.PSP2BuildSubtarget;
    static ps4BuildSubtarget: UnityEditor.PS4BuildSubtarget;
    static ps4HardwareTarget: UnityEditor.PS4HardwareTarget;
    static explicitNullChecks: boolean;
    static explicitDivideByZeroChecks: boolean;
    static needSubmissionMaterials: boolean;
    static compressWithPsArc: boolean;
    static forceInstallation: boolean;
    static enableHeadlessMode: boolean;
    static buildScriptsOnly: boolean;
    static xboxBuildSubtarget: UnityEditor.XboxBuildSubtarget;
    static wiiUBuildDebugLevel: UnityEditor.WiiUBuildDebugLevel;
    static wiiuBuildOutput: UnityEditor.WiiUBuildOutput;
    static wiiUEnableNetAPI: boolean;
    static wiiUBootMode: number;
    static streamingInstallLaunchRange: number;
    static xboxOneDeployMethod: UnityEditor.XboxOneDeployMethod;
    static xboxOneUsername: string;
    static xboxOneNetworkSharePath: string;
    static xboxOneAdditionalDebugPorts: string;
    static androidBuildSubtarget: UnityEditor.MobileTextureSubtarget;
    static androidBuildSystem: UnityEditor.AndroidBuildSystem;
    static wsaSubtarget: UnityEditor.WSASubtarget;
    static wsaSDK: UnityEditor.WSASDK;
    static wsaUWPBuildType: UnityEditor.WSAUWPBuildType;
    static wsaBuildAndRunDeployTarget: UnityEditor.WSABuildAndRunDeployTarget;
    static wsaGenerateReferenceProjects: boolean;
    static tizenBuildSubtarget: UnityEditor.MobileTextureSubtarget;
    static webPlayerStreamed: boolean;
    static webPlayerOfflineDeployment: boolean;
    static readonly activeBuildTarget: UnityEditor.BuildTarget;
    static readonly activeScriptCompilationDefines: string[];
    static development: boolean;
    static webGLUsePreBuiltUnityEngine: boolean;
    static connectProfiler: boolean;
    static allowDebugging: boolean;
    static exportAsGoogleAndroidProject: boolean;
    static symlinkLibraries: boolean;
    static iOSBuildConfigType: UnityEditor.iOSBuildType;
    static n3dsCreateCIAFile: boolean;
    static installInBuildFolder: boolean;
    static forceOptimizeScriptCompilation: boolean;
    // fields
    static activeBuildTargetChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class EditorUserSettings {
    // constructors
    constructor();
    // methods
    static GetConfigValue(name: string): string;
    static SetConfigValue(name: string, value: string): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static AutomaticAdd: boolean;
    static WorkOffline: boolean;
    static showFailedCheckout: boolean;
    static semanticMergeMode: UnityEditor.SemanticMergeMode;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorUtility {
    // constructors
    constructor();
    // methods
    static RevealInFinder(path: string): void;
    static SetDirty(target: any): void;
    static LoadWindowLayout(path: string): boolean;
    static IsPersistent(target: any): boolean;
    static DisplayDialog(title: string, message: string, ok: string, cancel: string): boolean;
    static DisplayDialog(title: string, message: string, ok: string): boolean;
    static DisplayDialogComplex(title: string, message: string, ok: string, cancel: string, alt: string): number;
    static OpenFilePanel(title: string, directory: string, extension: string): string;
    static OpenFilePanelWithFilters(title: string, directory: string, filters: string[]): string;
    static SaveFilePanel(title: string, directory: string, defaultName: string, extension: string): string;
    static NaturalCompare(a: string, b: string): number;
    static OpenFolderPanel(title: string, folder: string, defaultName: string): string;
    static SaveFolderPanel(title: string, folder: string, defaultName: string): string;
    static SaveFilePanelInProject(title: string, defaultName: string, extension: string, message: string): string;
    static SaveFilePanelInProject(title: string, defaultName: string, extension: string, message: string, path: string): string;
    static WarnPrefab(target: any, title: string, warning: string, okButton: string): boolean;
    static FindAsset(path: string, type: any): any;
    static InstanceIDToObject(instanceID: number): any;
    static CompressTexture(texture: any, format: any, quality: number): void;
    static CompressTexture(texture: any, format: any, quality: any): void;
    static InvokeDiffTool(leftTitle: string, leftFile: string, rightTitle: string, rightFile: string, ancestorTitle: string, ancestorFile: string): string;
    static CopySerialized(source: any, dest: any): void;
    static CopySerializedIfDifferent(source: any, dest: any): void;
    static GetAssetPath(asset: any): string;
    static CollectDependencies(roots: any[]): any[];
    static CollectDeepHierarchy(roots: any[]): any[];
    static UnloadUnusedAssets(): void;
    static UnloadUnusedAssetsIgnoreManagedReferences(): void;
    static UnloadUnusedAssetsImmediate(): void;
    static UnloadUnusedAssetsImmediate(includeMonoReferencesAsRoots: boolean): void;
    static BuildResourceFile(selection: any[], pathName: string): boolean;
    static DisplayPopupMenu(position: any, menuItemPath: string, command: UnityEditor.MenuCommand): void;
    static DisplayCustomMenu(position: any, options: any[], selected: number, callback: ((any, string[], number) => void), userData: any): void;
    static DisplayCustomMenu(position: any, options: any[], selected: number, callback: ((any, string[], number) => void), userData: any, showHotkey: boolean): void;
    static FocusProjectWindow(): void;
    static FormatBytes(bytes: number): string;
    static FormatBytes(bytes: number): string;
    static DisplayProgressBar(title: string, info: string, progress: number): void;
    static DisplayCancelableProgressBar(title: string, info: string, progress: number): boolean;
    static ClearProgressBar(): void;
    static GetObjectEnabled(target: any): number;
    static SetObjectEnabled(target: any, enabled: boolean): void;
    static SetSelectedWireframeHidden(renderer: any, enabled: boolean): void;
    static SetSelectedRenderState(renderer: any, renderState: UnityEditor.EditorSelectedRenderState): void;
    static ExtractOggFile(obj: any, path: string): boolean;
    static CreateGameObjectWithHideFlags(name: string, flags: any, components: any[]): any;
    static CompileCSharp(sources: string[], references: string[], defines: string[], outputFile: string): string[];
    static OpenWithDefaultApp(fileName: string): void;
    static InstantiatePrefab(target: any): any;
    static ReplacePrefab(go: any, targetPrefab: any, options: UnityEditor.ReplacePrefabOptions): any;
    static ReplacePrefab(go: any, targetPrefab: any): any;
    static CreateEmptyPrefab(path: string): any;
    static ReconnectToLastPrefab(go: any): boolean;
    static GetPrefabType(target: any): UnityEditor.PrefabType;
    static GetPrefabParent(source: any): any;
    static FindPrefabRoot(source: any): any;
    static ResetToPrefabState(source: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static audioMasterMute: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorWindow {
    // constructors
    constructor();
    // methods
    static GetWindow(t: any, utility: boolean, title: string): UnityEditor.EditorWindow;
    static GetWindow(t: any, utility: boolean): UnityEditor.EditorWindow;
    static GetWindow(t: any): UnityEditor.EditorWindow;
    static GetWindow(t: any, utility: boolean, title: string, focus: boolean): UnityEditor.EditorWindow;
    static GetWindowWithRect(t: any, rect: any, utility: boolean): UnityEditor.EditorWindow;
    static GetWindowWithRect(t: any, rect: any): UnityEditor.EditorWindow;
    static GetWindowWithRect(t: any, rect: any, utility: boolean, title: string): UnityEditor.EditorWindow;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    static FocusWindowIfItsOpen(t: any): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    static readonly focusedWindow: UnityEditor.EditorWindow;
    static readonly mouseOverWindow: UnityEditor.EditorWindow;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorWindowTitleAttribute {
    // constructors
    constructor();
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    title: string;
    icon: string;
    useTypeNameAsIconName: boolean;
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EditorWrapper {
    // constructors
    private constructor();
    // methods
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnPreviewGUI(position: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    static Make(obj: any, requirements: UnityEditor.EditorFeatures): UnityEditor.EditorWrapper;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    // fields
    OnSceneDrag: ((UnityEditor.SceneView) => void);
  }
}
declare namespace UnityEditor {
  class Effector2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    static CheckEffectorWarnings(collider: any): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class EmissionModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_Time: UnityEditor.SerializedMinMaxCurve;
    m_Distance: UnityEditor.SerializedMinMaxCurve;
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.EmissionModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    rateOverTime: any;
    rateOverDistance: any;
    burst: any;
  }
}
declare namespace UnityEditor {
  class Empty {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EulerCurveCombinedRenderer {
    // constructors
    constructor(quaternionX: any, quaternionY: any, quaternionZ: any, quaternionW: any, eulerX: any, eulerY: any, eulerZ: any);
    // methods
    GetCurveOfComponent(component: number): any;
    RangeStart(): number;
    RangeEnd(): number;
    PreWrapMode(): any;
    PostWrapMode(): any;
    SetWrap(wrap: any): void;
    SetWrap(preWrap: any, postWrap: any): void;
    SetCustomRange(start: number, end: number): void;
    EvaluateCurveDeltaSlow(time: number, component: number): number;
    EvaluateCurveSlow(time: number, component: number): number;
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, component: number, wrapColor: any): void;
    GetBounds(minTime: number, maxTime: number, component: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EulerCurveRenderer {
    // constructors
    constructor(component: number, renderer: UnityEditor.EulerCurveCombinedRenderer);
    // methods
    GetCurve(): any;
    RangeStart(): number;
    RangeEnd(): number;
    SetWrap(wrap: any): void;
    SetWrap(preWrapMode: any, postWrapMode: any): void;
    SetCustomRange(start: number, end: number): void;
    EvaluateCurveSlow(time: number): number;
    EvaluateCurveDeltaSlow(time: number): number;
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, wrapColor: any): void;
    GetBounds(): any;
    GetBounds(minTime: number, maxTime: number): any;
    FlushCache(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class EventManipulationHandler {
    // constructors
    constructor(timeArea: UnityEditor.TimeArea);
    // methods
    SelectEvent(events: any[], index: number, clipInfo: UnityEditor.AnimationClipInfoProperties): void;
    UpdateEvent(info: UnityEditor.AnimationClipInfoProperties): void;
    HandleEventManipulation(rect: any, events: any, clipInfo: UnityEditor.AnimationClipInfoProperties): boolean;
    EventLineContextMenuAdd(obj: any): void;
    EventLineContextMenuDelete(obj: any): void;
    Draw(window: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.EventManipulationHandler {
  class EventModificationContextMenuObjet {
    // constructors
    constructor(info: UnityEditor.AnimationClipInfoProperties, time: number, index: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Info: UnityEditor.AnimationClipInfoProperties;
    m_Time: number;
    m_Index: number;
  }
}
declare namespace UnityEditor.Events {
  class UnityEventTools {
    // constructors
    private constructor();
    // methods
    static AddPersistentListener(unityEvent: any): void;
    static RemovePersistentListener(unityEvent: any, index: number): void;
    static AddPersistentListener(unityEvent: any, call: (() => void)): void;
    static RegisterPersistentListener(unityEvent: any, index: number, call: (() => void)): void;
    static RemovePersistentListener(unityEvent: any, call: (() => void)): void;
    static UnregisterPersistentListener(unityEvent: any, index: number): void;
    static AddVoidPersistentListener(unityEvent: any, call: (() => void)): void;
    static RegisterVoidPersistentListener(unityEvent: any, index: number, call: (() => void)): void;
    static AddIntPersistentListener(unityEvent: any, call: ((number) => void), argument: number): void;
    static RegisterIntPersistentListener(unityEvent: any, index: number, call: ((number) => void), argument: number): void;
    static AddFloatPersistentListener(unityEvent: any, call: ((number) => void), argument: number): void;
    static RegisterFloatPersistentListener(unityEvent: any, index: number, call: ((number) => void), argument: number): void;
    static AddBoolPersistentListener(unityEvent: any, call: ((boolean) => void), argument: boolean): void;
    static RegisterBoolPersistentListener(unityEvent: any, index: number, call: ((boolean) => void), argument: boolean): void;
    static AddStringPersistentListener(unityEvent: any, call: ((string) => void), argument: string): void;
    static RegisterStringPersistentListener(unityEvent: any, index: number, call: ((string) => void), argument: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ExportPackageItem {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    assetPath: string;
    guid: string;
    isFolder: boolean;
    enabledStatus: number;
  }
}
declare namespace UnityEditor {
  class ExportPackageOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.ExportPackageOptions;
    static Interactive: UnityEditor.ExportPackageOptions;
    static Recurse: UnityEditor.ExportPackageOptions;
    static IncludeDependencies: UnityEditor.ExportPackageOptions;
    static IncludeLibraryAssets: UnityEditor.ExportPackageOptions;
  }
}
declare namespace UnityEditor.ExportRawHeightmap {
  class ByteOrder {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mac: UnityEditor.ExportRawHeightmap.ByteOrder;
    static Windows: UnityEditor.ExportRawHeightmap.ByteOrder;
  }
}
declare namespace UnityEditor {
  class ExportRawHeightmap {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_Depth: UnityEditor.ExportRawHeightmap.Depth;
    m_ByteOrder: UnityEditor.ExportRawHeightmap.ByteOrder;
    m_FlipVertically: boolean;
  }
}
declare namespace UnityEditor.ExportRawHeightmap {
  class Depth {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Bit8: UnityEditor.ExportRawHeightmap.Depth;
    static Bit16: UnityEditor.ExportRawHeightmap.Depth;
  }
}
declare namespace UnityEditor {
  class ExposablePopupMenu {
    // constructors
    constructor();
    // methods
    Init(items: any, itemSpacing: number, minWidthOfPopup: number, popupButtonData: UnityEditor.ExposablePopupMenu.PopupButtonData, selectionChangedCallback: ((UnityEditor.ExposablePopupMenu.ItemData) => void)): void;
    OnGUI(rect: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ExposablePopupMenu {
  class ItemData {
    // constructors
    constructor(content: any, style: any, on: boolean, enabled: boolean, userData: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_GUIContent: any;
    m_Style: any;
    m_On: boolean;
    m_Enabled: boolean;
    m_UserData: any;
    m_Width: number;
  }
}
declare namespace UnityEditor.ExposablePopupMenu {
  class PopupButtonData {
    // constructors
    constructor(content: any, style: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_GUIContent: any;
    m_Style: any;
  }
}
declare namespace UnityEditor.ExposablePopupMenu {
  class PopUpMenu {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ExposeTransformEditor {
    // constructors
    constructor();
    // methods
    OnEnable(transformPaths: string[], serializedObject: UnityEditor.SerializedObject): void;
    OnGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ExpressionEvaluator {
  class Associativity {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Left: UnityEditor.ExpressionEvaluator.Associativity;
    static Right: UnityEditor.ExpressionEvaluator.Associativity;
  }
}
declare namespace UnityEditor {
  class ExpressionEvaluator {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ExpressionEvaluator {
  class Operator {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    character: any;
    presedence: number;
    associativity: UnityEditor.ExpressionEvaluator.Associativity;
    inputs: number;
  }
}
declare namespace UnityEditor {
  class ExternalForcesModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.ExternalForcesModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    multiplier: any;
  }
}
declare namespace UnityEditor {
  class ExternalVersionControl {
    // constructors
    private constructor();
    // methods
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    static Disabled: string;
    static AutoDetect: string;
    static Generic: string;
    static AssetServer: string;
  }
}
declare namespace UnityEditor {
  class EyeDropper {
    // constructors
    private constructor();
    // methods
    static Start(viewToUpdate: UnityEditor.GUIView): void;
    static GetPickedColor(): any;
    static GetLastPickedColor(): any;
    static DrawPreview(position: any): void;
    OnDestroy(): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.EyeDropper {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    eyeDropperHorizontalLine: any;
    eyeDropperVerticalLine: any;
    eyeDropperPickedPixel: any;
  }
}
declare namespace UnityEditor {
  class FallbackEditorWindow {
    // constructors
    private constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class FilePathAttribute {
    // constructors
    constructor(relativePath: string, location: UnityEditor.FilePathAttribute.Location);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    filepath: string;
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor.FilePathAttribute {
  class Location {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PreferencesFolder: UnityEditor.FilePathAttribute.Location;
    static ProjectFolder: UnityEditor.FilePathAttribute.Location;
  }
}
declare namespace UnityEditor {
  class FileUtil {
    // constructors
    constructor();
    // methods
    static DeleteFileOrDirectory(path: string): boolean;
    static CopyFileOrDirectory(from: string, to: string): void;
    static CopyFileOrDirectoryFollowSymlinks(from: string, to: string): void;
    static MoveFileOrDirectory(from: string, to: string): void;
    static GetUniqueTempPathInProject(): string;
    static GetProjectRelativePath(path: string): string;
    static ReplaceFile(src: string, dst: string): void;
    static ReplaceDirectory(src: string, dst: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class FilteredHierarchy {
    // constructors
    constructor(type: UnityEditor.HierarchyType);
    // methods
    SetResults(instanceIDs: number[]): void;
    ResultsChanged(): void;
    RefreshVisibleItems(expandedInstanceIDs: any): void;
    GetSubAssetInstanceIDs(mainAssetInstanceID: number): any;
    AddSubItemsOfMainRepresentation(mainRepresentionIndex: number, visibleItems: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly hierarchyType: UnityEditor.HierarchyType;
    readonly results: UnityEditor.FilteredHierarchy.FilterResult[];
    searchFilter: UnityEditor.SearchFilter;
    foldersFirst: boolean;
    // fields
  }
}
declare namespace UnityEditor.FilteredHierarchy {
  class FilterResult {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    icon: any;
    readonly guid: string;
    // fields
    instanceID: number;
    name: string;
    hasChildren: boolean;
    colorCode: number;
    isMainRepresentation: boolean;
    hasFullPreviewImage: boolean;
    iconDrawStyle: UnityEditor.IconDrawStyle;
    isFolder: boolean;
    type: UnityEditor.HierarchyType;
  }
}
declare namespace UnityEditor {
  class FilteredHierarchyProperty {
    // constructors
    constructor(filter: UnityEditor.FilteredHierarchy);
    // methods
    static CreateHierarchyPropertyForFilter(filteredHierarchy: UnityEditor.FilteredHierarchy): UnityEditor.IHierarchyProperty;
    Reset(): void;
    IsExpanded(expanded: number[]): boolean;
    Next(expanded: number[]): boolean;
    NextWithDepthCheck(expanded: number[], minDepth: number): boolean;
    Previous(expanded: number[]): boolean;
    Parent(): boolean;
    Find(_instanceID: number, expanded: number[]): boolean;
    FindAllAncestors(instanceIDs: number[]): number[];
    Skip(count: number, expanded: number[]): boolean;
    CountRemaining(expanded: number[]): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly instanceID: number;
    readonly pptrValue: any;
    readonly name: string;
    readonly hasChildren: boolean;
    readonly isMainRepresentation: boolean;
    readonly hasFullPreviewImage: boolean;
    readonly iconDrawStyle: UnityEditor.IconDrawStyle;
    readonly isFolder: boolean;
    readonly depth: number;
    readonly row: number;
    readonly colorCode: number;
    readonly guid: string;
    readonly isValid: boolean;
    readonly icon: any;
    readonly ancestors: number[];
    // fields
  }
}
declare namespace UnityEditor {
  class FlattenHeightmap {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    height: number;
  }
}
declare namespace UnityEditor {
  class FlexibleMenu {
    // constructors
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, itemClickedCallback: ((number, any) => void));
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    static DrawRect(rect: any, color: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIndex: number;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.FlexibleMenu {
  class ItemContextMenu {
    // constructors
    private constructor();
    // methods
    static Show(itemIndex: number, caller: UnityEditor.FlexibleMenu): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.FlexibleMenu {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    menuItem: any;
    plusButtonText: any;
  }
}
declare namespace UnityEditor {
  class FlexibleMenuModifyItemUI {
    // constructors
    private constructor();
    // methods
    OnClose(): void;
    Init(menuType: UnityEditor.FlexibleMenuModifyItemUI.MenuType, obj: any, acceptedCallback: ((any) => void)): void;
    Accepted(): void;
    IsShowing(): boolean;
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
    m_Object: any;
  }
}
declare namespace UnityEditor.FlexibleMenuModifyItemUI {
  class MenuType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Add: UnityEditor.FlexibleMenuModifyItemUI.MenuType;
    static Edit: UnityEditor.FlexibleMenuModifyItemUI.MenuType;
  }
}
declare namespace UnityEditor {
  class FlowLayout {
    // constructors
    constructor();
    // methods
    CalcWidth(): void;
    SetHorizontal(x: number, width: number): void;
    CalcHeight(): void;
    SetVertical(y: number, height: number): void;
    ApplyOptions(options: any[]): void;
    ResetCursor(): void;
    PeekNext(): any;
    GetNext(): any;
    GetLast(): any;
    Add(e: any): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly margin: any;
    style: any;
    // fields
    entries: any;
    isVertical: boolean;
    resetCoords: boolean;
    spacing: number;
    sameSize: boolean;
    isWindow: boolean;
    windowID: number;
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    rect: any;
    stretchWidth: number;
    stretchHeight: number;
  }
}
declare namespace UnityEditor.FlowLayout {
  class LineInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    minSize: number;
    maxSize: number;
    start: number;
    size: number;
    topBorder: number;
    bottomBorder: number;
  }
}
declare namespace UnityEditor {
  class FogEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.FogEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static fogHeader: any;
    static fogWarning: any;
    static fogDensity: any;
    static fogLinearStart: any;
    static fogLinearEnd: any;
  }
}
declare namespace UnityEditor {
  class FontInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class FontRenderingMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Smooth: UnityEditor.FontRenderingMode;
    static HintedSmooth: UnityEditor.FontRenderingMode;
    static HintedRaster: UnityEditor.FontRenderingMode;
    static OSDefault: UnityEditor.FontRenderingMode;
  }
}
declare namespace UnityEditor {
  class FontTextureCase {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Dynamic: UnityEditor.FontTextureCase;
    static Unicode: UnityEditor.FontTextureCase;
    static ASCII: UnityEditor.FontTextureCase;
    static ASCIIUpperCase: UnityEditor.FontTextureCase;
    static ASCIILowerCase: UnityEditor.FontTextureCase;
    static CustomSet: UnityEditor.FontTextureCase;
  }
}
declare namespace UnityEditor {
  class ForceModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.ForceModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    x: any;
    y: any;
    z: any;
    randomizePerFrame: any;
    space: any;
    spaces: string[];
  }
}
declare namespace UnityEditor {
  class FrameDebuggerWindow {
    // constructors
    constructor();
    // methods
    static ShowFrameDebuggerWindow(): UnityEditor.FrameDebuggerWindow;
    EnableIfNeeded(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly styles: UnityEditor.FrameDebuggerWindow.Styles;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static s_FrameEventTypeNames: string[];
    m_PreviewDir: any;
  }
}
declare namespace UnityEditor.FrameDebuggerWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    header: any;
    entryEven: any;
    entryOdd: any;
    rowText: any;
    rowTextRight: any;
    recordButton: any;
    prevFrame: any;
    nextFrame: any;
    headerContent: any[];
    static s_ColumnNames: string[];
    static mrtLabels: any[];
    static depthLabel: any;
    static channelLabels: any[];
    static channelHeader: any;
    static levelsHeader: any;
  }
}
declare namespace UnityEditor {
  class GameObjectInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    static SetEnabledRecursive(go: any, enabled: boolean): void;
    ReloadPreviewInstances(): void;
    OnDestroy(): void;
    static HasRenderableParts(go: any): boolean;
    static GetRenderableBoundsRecurse(bounds: any, go: any): void;
    static GetRenderableCenterRecurse(go: any, minDepth: number, maxDepth: number): any;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnSceneDrag(sceneView: UnityEditor.SceneView): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static dragObject: any;
  }
}
declare namespace UnityEditor.GameObjectInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    goIcon: any;
    typelessIcon: any;
    prefabIcon: any;
    modelIcon: any;
    dataTemplateIcon: any;
    dropDownIcon: any;
    staticContent: any;
    staticFieldToggleWidth: number;
    tagFieldWidth: number;
    layerFieldWidth: number;
    navLayerFieldWidth: number;
    staticDropdown: any;
    header: any;
    layerPopup: any;
    instanceManagementInfo: any;
    goTypeLabelMultiple: any;
    goTypeLabel: any[];
  }
}
declare namespace UnityEditor {
  class GameObjectsTreeViewDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    DragCleanup(revertExpanded: boolean): void;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    allowDragBetween: boolean;
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class GameObjectTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, rootInstanceID: number, showRoot: boolean, rootItemIsCollapsable: boolean);
    // methods
    OnInitialize(): void;
    EnsureFullyInitialized(): void;
    RevealItem(itemID: number): void;
    IsRevealed(id: number): boolean;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    FetchData(): void;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    InitIfNeeded(): void;
    ReloadData(): void;
    OnSearchChanged(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly sceneHeaderItems: any;
    searchString: string;
    searchMode: number;
    readonly isFetchAIssue: boolean;
    readonly rowCount: number;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    // fields
    sortingState: UnityEditor.HierarchySorting;
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class GameObjectTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, useHorizontalScroll: boolean);
    // methods
    OnInitialize(): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRectForFraming(row: number): any;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.GameObjectTreeViewGUI {
  class GameObjectColorType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    static Prefab: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    static BrokenPrefab: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
    static Count: UnityEditor.GameObjectTreeViewGUI.GameObjectColorType;
  }
}
declare namespace UnityEditor.GameObjectTreeViewGUI {
  class GameObjectStyles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    disabledLabel: any;
    prefabLabel: any;
    disabledPrefabLabel: any;
    brokenPrefabLabel: any;
    disabledBrokenPrefabLabel: any;
    loadSceneGUIContent: any;
    unloadSceneGUIContent: any;
    saveSceneGUIContent: any;
    optionsButtonStyle: any;
    sceneHeaderBg: any;
    kSceneHeaderIconsInterval: number;
  }
}
declare namespace UnityEditor {
  class GameObjectTreeViewItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    displayName: string;
    colorCode: number;
    objectPPTR: any;
    shouldDisplay: boolean;
    isSceneHeader: boolean;
    scene: any;
    id: number;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GameObjectUtility {
    // constructors
    constructor();
    // methods
    static GetStaticEditorFlags(go: any): UnityEditor.StaticEditorFlags;
    static AreStaticEditorFlagsSet(go: any, flags: UnityEditor.StaticEditorFlags): boolean;
    static SetStaticEditorFlags(go: any, flags: UnityEditor.StaticEditorFlags): void;
    static GetNavMeshLayer(go: any): number;
    static GetNavMeshLayerFromName(name: string): number;
    static SetNavMeshLayer(go: any, areaIndex: number): void;
    static GetNavMeshLayerNames(): string[];
    static GetNavMeshArea(go: any): number;
    static GetNavMeshAreaFromName(name: string): number;
    static SetNavMeshArea(go: any, areaIndex: number): void;
    static GetNavMeshAreaNames(): string[];
    static GetUniqueNameForSibling(parent: any, name: string): string;
    static SetParentAndAlign(child: any, parent: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.GameObjectUtility {
  class ShouldIncludeChildren {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static HasNoChildren: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    static IncludeChildren: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    static DontIncludeChildren: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
    static Cancel: UnityEditor.GameObjectUtility.ShouldIncludeChildren;
  }
}
declare namespace UnityEditor {
  class GameView {
    // constructors
    constructor();
    // methods
    OnValidate(): void;
    OnEnable(): void;
    OnDisable(): void;
    static RepaintAll(): void;
    IsShowingGizmos(): boolean;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    SizeSelectionCallback(indexClicked: number, objectSelected: any): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    lowResolutionForAspectRatios: boolean;
    readonly forceLowResolutionAspectRatios: boolean;
    readonly showLowResolutionToggle: boolean;
    maximizeOnPlay: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GameView {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static gizmosContent: any;
    static zoomSliderContent: any;
    static maximizeOnPlayContent: any;
    static muteContent: any;
    static statsContent: any;
    static frameDebuggerOnContent: any;
    static loadRenderDocContent: any;
    static noCameraWarningContextMenuContent: any;
    static clearEveryFrameContextMenuContent: any;
    static lowResAspectRatiosContextMenuContent: any;
    static renderdocContent: any;
    static gizmoButtonStyle: any;
    static gameViewBackgroundStyle: any;
  }
}
declare namespace UnityEditor {
  class GameViewGUI {
    // constructors
    constructor();
    // methods
    static GameViewStatsGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GameViewSize {
    // constructors
    constructor(type: UnityEditor.GameViewSizeType, width: number, height: number, baseText: string);
    constructor(other: UnityEditor.GameViewSize);
    // methods
    Set(other: UnityEditor.GameViewSize): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    baseText: string;
    sizeType: UnityEditor.GameViewSizeType;
    width: number;
    height: number;
    readonly isFreeAspectRatio: boolean;
    readonly aspectRatio: number;
    readonly displayText: string;
    // fields
  }
}
declare namespace UnityEditor {
  class GameViewSizeGroup {
    // constructors
    constructor();
    // methods
    GetGameViewSize(index: number): UnityEditor.GameViewSize;
    GetDisplayTexts(): string[];
    GetTotalCount(): number;
    GetBuiltinCount(): number;
    GetCustomCount(): number;
    AddBuiltinSizes(sizes: UnityEditor.GameViewSize[]): void;
    AddBuiltinSize(size: UnityEditor.GameViewSize): void;
    AddCustomSizes(sizes: UnityEditor.GameViewSize[]): void;
    AddCustomSize(size: UnityEditor.GameViewSize): void;
    RemoveCustomSize(index: number): void;
    IsCustomSize(index: number): boolean;
    TotalIndexToCustomIndex(index: number): number;
    IndexOf(view: UnityEditor.GameViewSize): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GameViewSizeGroupType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Standalone: UnityEditor.GameViewSizeGroupType;
    static WebPlayer: UnityEditor.GameViewSizeGroupType;
    static iOS: UnityEditor.GameViewSizeGroupType;
    static Android: UnityEditor.GameViewSizeGroupType;
    static PS3: UnityEditor.GameViewSizeGroupType;
    static WiiU: UnityEditor.GameViewSizeGroupType;
    static Tizen: UnityEditor.GameViewSizeGroupType;
    static WP8: UnityEditor.GameViewSizeGroupType;
    static N3DS: UnityEditor.GameViewSizeGroupType;
  }
}
declare namespace UnityEditor {
  class GameViewSizeMenu {
    // constructors
    constructor(itemProvider: UnityEditor.IFlexibleMenuItemProvider, selectionIndex: number, modifyItemUi: UnityEditor.FlexibleMenuModifyItemUI, gameView: UnityEditor.IGameViewSizeMenuUser);
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIndex: number;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor {
  class GameViewSizes {
    // constructors
    constructor();
    // methods
    GetGroup(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType): UnityEditor.GameViewSizeGroup;
    SaveToHDD(): void;
    IsDefaultStandaloneScreenSize(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType, index: number): boolean;
    IsRemoteScreenSize(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType, index: number): boolean;
    GetDefaultStandaloneIndex(): number;
    RefreshStandaloneAndRemoteDefaultSizes(): void;
    RefreshStandaloneDefaultScreenSize(width: number, height: number): void;
    RefreshRemoteScreenSize(width: number, height: number): void;
    Changed(): void;
    GetChangeID(): number;
    static GetConstrainedRect(startRect: any, groupType: UnityEditor.GameViewSizeGroupType, gameViewSizeIndex: number, fitsInsideRect: any): any;
    static GetRenderTargetSize(startRect: any, groupType: UnityEditor.GameViewSizeGroupType, gameViewSizeIndex: number, clamped: any): any;
    static BuildTargetGroupToGameViewSizeGroup(buildTargetGroup: UnityEditor.BuildTargetGroup): UnityEditor.GameViewSizeGroupType;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly currentGroupType: UnityEditor.GameViewSizeGroupType;
    readonly currentGroup: UnityEditor.GameViewSizeGroup;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GameViewSizesMenuItemProvider {
    // constructors
    constructor(gameViewSizeGroupType: UnityEditor.GameViewSizeGroupType);
    // methods
    Count(): number;
    GetItem(index: number): any;
    Add(obj: any): number;
    Replace(index: number, obj: any): void;
    Remove(index: number): void;
    Create(): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    GetName(index: number): string;
    IsModificationAllowed(index: number): boolean;
    GetSeperatorIndices(): number[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GameViewSizesMenuModifyItemUI {
    // constructors
    constructor();
    // methods
    OnClose(): void;
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    Init(menuType: UnityEditor.FlexibleMenuModifyItemUI.MenuType, obj: any, acceptedCallback: ((any) => void)): void;
    Accepted(): void;
    IsShowing(): boolean;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
    m_Object: any;
  }
}
declare namespace UnityEditor.GameViewSizesMenuModifyItemUI {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    headerAdd: any;
    headerEdit: any;
    typeName: any;
    widthHeightText: any;
    optionalText: any;
    ok: any;
    cancel: any;
    typeNames: any[];
  }
}
declare namespace UnityEditor {
  class GameViewSizeType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AspectRatio: UnityEditor.GameViewSizeType;
    static FixedResolution: UnityEditor.GameViewSizeType;
  }
}
declare namespace UnityEditor {
  class GenericInspector {
    // constructors
    constructor();
    // methods
    MissingMonoBehaviourGUI(): boolean;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GenericMenu {
    // constructors
    constructor();
    // methods
    AddItem(content: any, on: boolean, func: (() => void)): void;
    AddItem(content: any, on: boolean, func: ((any) => void), userData: any): void;
    AddDisabledItem(content: any): void;
    AddSeparator(path: string): void;
    GetItemCount(): number;
    ShowAsContext(): void;
    DropDown(position: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.GenericMenu {
  class MenuItem {
    // constructors
    constructor(_content: any, _separator: boolean, _on: boolean, _func: (() => void));
    constructor(_content: any, _separator: boolean, _on: boolean, _func: ((any) => void), _userData: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    content: any;
    separator: boolean;
    on: boolean;
    func: (() => void);
    func2: ((any) => void);
    userData: any;
  }
}
declare namespace UnityEditor {
  class GizmoInfo {
    // constructors
    constructor();
    // methods
    Update(point1: any, point2: any): void;
    Update(center: any, length: number, angle: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly point1: any;
    readonly point2: any;
    readonly center: any;
    readonly angle: number;
    readonly length: number;
    readonly plane: any;
    readonly planeOrtho: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GizmoType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Pickable: UnityEditor.GizmoType;
    static NotInSelectionHierarchy: UnityEditor.GizmoType;
    static NonSelected: UnityEditor.GizmoType;
    static Selected: UnityEditor.GizmoType;
    static Active: UnityEditor.GizmoType;
    static InSelectionHierarchy: UnityEditor.GizmoType;
    static NotSelected: UnityEditor.GizmoType;
    static SelectedOrChild: UnityEditor.GizmoType;
  }
}
declare namespace UnityEditor {
  class GradientContextMenu {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GradientEditor {
    // constructors
    constructor();
    // methods
    Init(gradient: any, numSteps: number): void;
    static DrawGradientWithBackground(position: any, gradientTexture: any): void;
    OnGUI(position: any): void;
    static GetBackgroundTexture(): any;
    static CreateCheckerTexture(numCols: number, numRows: number, cellPixelWidth: number, col1: any, col2: any): any;
    static DrawGradientSwatch(position: any, gradient: any, bgColor: any): void;
    static DrawGradientSwatch(position: any, property: UnityEditor.SerializedProperty, bgColor: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly target: any;
    // fields
  }
}
declare namespace UnityEditor.GradientEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    upSwatch: any;
    upSwatchOverlay: any;
    downSwatch: any;
    downSwatchOverlay: any;
    modeText: any;
    alphaText: any;
    colorText: any;
    locationText: any;
    percentText: any;
  }
}
declare namespace UnityEditor.GradientEditor {
  class Swatch {
    // constructors
    constructor(time: number, value: any, isAlpha: boolean);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Time: number;
    m_Value: any;
    m_IsAlpha: boolean;
  }
}
declare namespace UnityEditor {
  class GradientPicker {
    // constructors
    constructor();
    // methods
    static Show(newGradient: any): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    OnGUI(): void;
    static SetCurrentGradient(gradient: any): void;
    static CloseWindow(): void;
    static RepaintWindow(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly presetsEditorPrefID: string;
    static readonly instance: UnityEditor.GradientPicker;
    currentPresetLibrary: string;
    static readonly visible: boolean;
    static readonly gradient: any;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GradientPresetLibrary {
    // constructors
    constructor();
    // methods
    Count(): number;
    GetPreset(index: number): any;
    Add(presetObject: any, presetName: string): void;
    Replace(index: number, newPresetObject: any): void;
    Remove(index: number): void;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    SetName(index: number, presetName: string): void;
    DebugCreateTonsOfPresets(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GradientPresetLibrary {
  class GradientPreset {
    // constructors
    constructor(preset: any, presetName: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    gradient: any;
    name: string;
    // fields
  }
}
declare namespace UnityEditor {
  class GradientPresetLibraryEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GraphicsSettings {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GraphicsSettingsInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GraphicsSettingsInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static tierSettings: any;
    static builtinSettings: any;
    static shaderStrippingSettings: any;
    static shaderPreloadSettings: any;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class AlwaysIncludedShadersEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class BuiltinShadersEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings {
  class BuiltinShaderMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings.BuiltinShaderMode;
    static Builtin: UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings.BuiltinShaderMode;
    static Custom: UnityEditor.GraphicsSettingsWindow.BuiltinShaderSettings.BuiltinShaderMode;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class BuiltinShaderSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GraphicsSettingsWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class SettingsTab {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Tiers: UnityEditor.GraphicsSettingsWindow.SettingsTab;
    static Shaders: UnityEditor.GraphicsSettingsWindow.SettingsTab;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class ShaderPreloadEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.ShaderPreloadEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static shaderPreloadSave: any;
    static shaderPreloadClear: any;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class ShaderStrippingEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.ShaderStrippingEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static shaderSettings: any;
    static builtinSettings: any;
    static shaderStrippingSettings: any;
    static shaderPreloadSettings: any;
    static lightmapModes: any;
    static lightmapPlain: any;
    static lightmapDirCombined: any;
    static lightmapDirSeparate: any;
    static lightmapDynamicPlain: any;
    static lightmapDynamicDirCombined: any;
    static lightmapDynamicDirSeparate: any;
    static lightmapFromScene: any;
    static fogModes: any;
    static fogLinear: any;
    static fogExp: any;
    static fogExp2: any;
    static fogFromScene: any;
    static shaderPreloadSave: any;
    static shaderPreloadClear: any;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static Tabs: any[];
    static builtinSettings: any;
    static shaderStrippingSettings: any;
    static shaderPreloadSettings: any;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow {
  class TierSettingsEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    verticalLayout: boolean;
  }
}
declare namespace UnityEditor.GraphicsSettingsWindow.TierSettingsEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static shaderQualityName: any[];
    static shaderQualityValue: number[];
    static renderingPathName: any[];
    static renderingPathValue: number[];
    static tierName: any[];
    static empty: any;
    static autoSettings: any;
    static cascadedShadowMaps: any;
    static standardShaderQuality: any;
    static reflectionProbeBoxProjection: any;
    static reflectionProbeBlending: any;
    static renderingPath: any;
  }
}
declare namespace UnityEditor {
  class GUIClipInspectView {
    // constructors
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    // methods
    UpdateInstructions(): void;
    ShowOverlay(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    Unselect(): void;
    SelectRow(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListViewState: UnityEditor.ListViewState;
  }
}
declare namespace UnityEditor {
  class GUID {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    Empty(): boolean;
    ParseExact(hex: string): boolean;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GUIDrawer {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GUILayoutFadeGroup {
    // constructors
    constructor();
    // methods
    CalcHeight(): void;
    ApplyOptions(options: any[]): void;
    ResetCursor(): void;
    PeekNext(): any;
    GetNext(): any;
    GetLast(): any;
    Add(e: any): void;
    CalcWidth(): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly margin: any;
    style: any;
    // fields
    fadeValue: number;
    wasGUIEnabled: boolean;
    guiColor: any;
    entries: any;
    isVertical: boolean;
    resetCoords: boolean;
    spacing: number;
    sameSize: boolean;
    isWindow: boolean;
    windowID: number;
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    rect: any;
    stretchWidth: number;
    stretchHeight: number;
  }
}
declare namespace UnityEditor {
  class GUILayoutInspectView {
    // constructors
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    // methods
    UpdateInstructions(): void;
    ShowOverlay(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    Unselect(): void;
    SelectRow(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListViewState: UnityEditor.ListViewState;
  }
}
declare namespace UnityEditor {
  class GUISlideGroup {
    // constructors
    constructor();
    // methods
    Begin(): void;
    End(): void;
    Reset(): void;
    BeginHorizontal(id: number, options: any[]): any;
    EndHorizontal(): void;
    GetRect(id: number, r: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.GUISlideGroup {
  class SlideGroupInternal {
    // constructors
    constructor();
    // methods
    SetID(owner: UnityEditor.GUISlideGroup, id: number): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ApplyOptions(options: any[]): void;
    ResetCursor(): void;
    PeekNext(): any;
    GetNext(): any;
    GetLast(): any;
    Add(e: any): void;
    CalcWidth(): void;
    CalcHeight(): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly margin: any;
    style: any;
    // fields
    entries: any;
    isVertical: boolean;
    resetCoords: boolean;
    spacing: number;
    sameSize: boolean;
    isWindow: boolean;
    windowID: number;
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    rect: any;
    stretchWidth: number;
    stretchHeight: number;
  }
}
declare namespace UnityEditor {
  class GUIStyleHolder {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    inspectedStyle: any;
  }
}
declare namespace UnityEditor {
  class GUIView {
    // constructors
    constructor();
    // methods
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly current: UnityEditor.GUIView;
    static readonly focusedView: UnityEditor.GUIView;
    static readonly mouseOverView: UnityEditor.GUIView;
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class GUIViewDebuggerHelper {
    // constructors
    constructor();
    // methods
    static GetRectFromInstruction(instructionIndex: number): any;
    static GetStyleFromInstruction(instructionIndex: number): any;
    static GetManagedStackTrace(instructionIndex: number): UnityEditor.StackFrame[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class GUIViewDebuggerWindow {
    // constructors
    constructor();
    // methods
    HighlightInstruction(view: UnityEditor.GUIView, instructionRect: any, style: any): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly instructionModeView: UnityEditor.IBaseInspectView;
    InstructionOverlayWindow: UnityEditor.InstructionOverlayWindow;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_Inspected: UnityEditor.GUIView;
    static s_Styles: UnityEditor.GUIViewDebuggerWindow.Styles;
  }
}
declare namespace UnityEditor.GUIViewDebuggerWindow {
  class InstructionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Draw: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Clip: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Layout: UnityEditor.GUIViewDebuggerWindow.InstructionType;
    static Unified: UnityEditor.GUIViewDebuggerWindow.InstructionType;
  }
}
declare namespace UnityEditor.GUIViewDebuggerWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    listItem: any;
    listItemBackground: any;
    listBackgroundStyle: any;
    boxStyle: any;
    stackframeStyle: any;
    stacktraceBackground: any;
    centeredText: any;
  }
}
declare namespace UnityEditor {
  class Handles {
    // constructors
    constructor();
    // methods
    static PositionHandle(position: any, rotation: any): any;
    static RotationHandle(rotation: any, position: any): any;
    static ScaleHandle(scale: any, position: any, rotation: any, size: number): any;
    static RadiusHandle(rotation: any, position: any, radius: number, handlesOnly: boolean): number;
    static RadiusHandle(rotation: any, position: any, radius: number): number;
    static Slider(position: any, direction: any): any;
    static Slider(position: any, direction: any, size: number, drawFunc: ((number, any, any, number) => void), snap: number): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any): any;
    static Slider2D(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: number): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: number, drawHelper: boolean): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: number): any;
    static Slider2D(handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: number, drawHelper: boolean): any;
    static FreeRotateHandle(rotation: any, position: any, size: number): any;
    static FreeMoveHandle(position: any, rotation: any, size: number, snap: any, capFunc: ((number, any, any, number) => void)): any;
    static ScaleSlider(scale: number, position: any, direction: any, rotation: any, size: number, snap: number): number;
    static ScaleValueHandle(value: number, position: any, rotation: any, size: number, capFunc: ((number, any, any, number) => void), snap: number): number;
    static Disc(rotation: any, position: any, axis: any, size: number, cutoffPlane: boolean, snap: number): any;
    static Button(position: any, direction: any, size: number, pickSize: number, capFunc: ((number, any, any, number) => void)): boolean;
    static SnapValue(val: number, snap: number): number;
    static CubeCap(controlID: number, position: any, rotation: any, size: number): void;
    static SphereCap(controlID: number, position: any, rotation: any, size: number): void;
    static ConeCap(controlID: number, position: any, rotation: any, size: number): void;
    static CylinderCap(controlID: number, position: any, rotation: any, size: number): void;
    static RectangleCap(controlID: number, position: any, rotation: any, size: number): void;
    static SelectionFrame(controlID: number, position: any, rotation: any, size: number): void;
    static DotCap(controlID: number, position: any, rotation: any, size: number): void;
    static CircleCap(controlID: number, position: any, rotation: any, size: number): void;
    static ArrowCap(controlID: number, position: any, rotation: any, size: number): void;
    static DrawCylinder(controlID: number, position: any, rotation: any, size: number): void;
    static DrawSphere(controlID: number, position: any, rotation: any, size: number): void;
    static DrawRectangle(controlID: number, position: any, rotation: any, size: number): void;
    static DrawCube(controlID: number, position: any, rotation: any, size: number): void;
    static DrawArrow(controlID: number, position: any, rotation: any, size: number): void;
    static DrawCone(controlID: number, position: any, rotation: any, size: number): void;
    static DrawAAPolyLine(points: any[]): void;
    static DrawAAPolyLine(width: number, points: any[]): void;
    static DrawAAPolyLine(lineTex: any, points: any[]): void;
    static DrawAAPolyLine(width: number, actualNumberOfPoints: number, points: any[]): void;
    static DrawAAPolyLine(lineTex: any, width: number, points: any[]): void;
    static DrawAAConvexPolygon(points: any[]): void;
    static DrawBezier(startPosition: any, endPosition: any, startTangent: any, endTangent: any, color: any, texture: any, width: number): void;
    static DrawWireDisc(center: any, normal: any, radius: number): void;
    static DrawWireArc(center: any, normal: any, from: any, angle: number, radius: number): void;
    static DrawSolidRectangleWithOutline(rectangle: any, faceColor: any, outlineColor: any): void;
    static DrawSolidRectangleWithOutline(verts: any[], faceColor: any, outlineColor: any): void;
    static DrawSolidDisc(center: any, normal: any, radius: number): void;
    static DrawSolidArc(center: any, normal: any, from: any, angle: number, radius: number): void;
    static Label(position: any, text: string): void;
    static Label(position: any, image: any): void;
    static Label(position: any, content: any): void;
    static Label(position: any, text: string, style: any): void;
    static Label(position: any, content: any, style: any): void;
    static GetMainGameViewSize(): any;
    static ClearCamera(position: any, camera: any): void;
    static DrawCamera(position: any, camera: any): void;
    static DrawCamera(position: any, camera: any, drawMode: UnityEditor.DrawCameraMode): void;
    static SetCamera(camera: any): void;
    static SetCamera(position: any, camera: any): void;
    static BeginGUI(): void;
    static BeginGUI(position: any): void;
    static EndGUI(): void;
    static MakeBezierPoints(startPosition: any, endPosition: any, startTangent: any, endTangent: any, division: number): any[];
    static DrawPolyLine(points: any[]): void;
    static DrawLine(p1: any, p2: any): void;
    static DrawLines(lineSegments: any[]): void;
    static DrawLines(points: any[], segmentIndices: number[]): void;
    static DrawDottedLine(p1: any, p2: any, screenSpaceSize: number): void;
    static DrawDottedLines(lineSegments: any[], screenSpaceSize: number): void;
    static DrawDottedLines(points: any[], segmentIndices: number[], screenSpaceSize: number): void;
    static DrawWireCube(center: any, size: any): void;
    static Slider(position: any, direction: any, size: number, capFunction: ((number, any, any, number, any) => void), snap: number): any;
    static FreeMoveHandle(position: any, rotation: any, size: number, snap: any, capFunction: ((number, any, any, number, any) => void)): any;
    static ScaleValueHandle(value: number, position: any, rotation: any, size: number, capFunction: ((number, any, any, number, any) => void), snap: number): number;
    static Button(position: any, direction: any, size: number, pickSize: number, capFunction: ((number, any, any, number, any) => void)): boolean;
    static CubeHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static SphereHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static ConeHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static CylinderHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static RectangleHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DotHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static CircleHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static ArrowHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DrawSelectionFrame(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DoPositionHandle(position: any, rotation: any): any;
    static DoRotationHandle(rotation: any, position: any): any;
    static DoScaleHandle(scale: any, position: any, rotation: any, size: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly xAxisColor: any;
    static readonly yAxisColor: any;
    static readonly zAxisColor: any;
    static readonly centerColor: any;
    static readonly selectedColor: any;
    static readonly secondaryColor: any;
    static lighting: boolean;
    static color: any;
    static matrix: any;
    static readonly inverseMatrix: any;
    currentCamera: any;
    // fields
  }
}
declare namespace UnityEditor.Handles {
  class FilterMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Off: UnityEditor.Handles.FilterMode;
    static ShowFiltered: UnityEditor.Handles.FilterMode;
    static ShowRest: UnityEditor.Handles.FilterMode;
  }
}
declare namespace UnityEditor.Handles {
  class PlaneHandle {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static xzPlane: UnityEditor.Handles.PlaneHandle;
    static xyPlane: UnityEditor.Handles.PlaneHandle;
    static yzPlane: UnityEditor.Handles.PlaneHandle;
  }
}
declare namespace UnityEditor {
  class HandleUtility {
    // constructors
    constructor();
    // methods
    static CalcLineTranslation(src: any, dest: any, srcPosition: any, constraintDir: any): number;
    static PointOnLineParameter(point: any, linePoint: any, lineDirection: any): number;
    static ProjectPointLine(point: any, lineStart: any, lineEnd: any): any;
    static DistancePointLine(point: any, lineStart: any, lineEnd: any): number;
    static DistancePointBezier(point: any, startPosition: any, endPosition: any, startTangent: any, endTangent: any): number;
    static DistanceToLine(p1: any, p2: any): number;
    static DistanceToCircle(position: any, radius: number): number;
    static DistanceToRectangle(position: any, rotation: any, size: number): number;
    static DistancePointToLine(p: any, a: any, b: any): number;
    static DistancePointToLineSegment(p: any, a: any, b: any): number;
    static DistanceToDisc(center: any, normal: any, radius: number): number;
    static ClosestPointToDisc(center: any, normal: any, radius: number): any;
    static DistanceToArc(center: any, normal: any, from: any, angle: number, radius: number): number;
    static ClosestPointToArc(center: any, normal: any, from: any, angle: number, radius: number): any;
    static DistanceToPolyLine(points: any[]): number;
    static ClosestPointToPolyLine(vertices: any[]): any;
    static AddControl(controlId: number, distance: number): void;
    static AddDefaultControl(controlId: number): void;
    static GetHandleSize(position: any): number;
    static WorldToGUIPoint(world: any): any;
    static GUIPointToWorldRay(position: any): any;
    static WorldPointToSizedRect(position: any, content: any, style: any): any;
    static PickRectObjects(rect: any): any[];
    static PickRectObjects(rect: any, selectPrefabRootsOnly: boolean): any[];
    static PickGameObject(position: any, materialIndex: any): any;
    static PickGameObject(position: any, ignore: any[], materialIndex: any): any;
    static PickGameObject(position: any, selectPrefabRoot: boolean): any;
    static PickGameObject(position: any, selectPrefabRoot: boolean, ignore: any[]): any;
    static PushCamera(camera: any): void;
    static PopCamera(camera: any): void;
    static RaySnap(ray: any): any;
    static Repaint(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly acceleration: number;
    static readonly niceMouseDelta: number;
    static readonly niceMouseDeltaZoom: number;
    static nearestControl: number;
    static readonly handleMaterial: any;
    // fields
  }
}
declare namespace UnityEditor.HandleUtility {
  class SavedCamera {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Hardware {
  class DevDevice {
    // constructors
    private constructor();
    // methods
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly isConnected: boolean;
    static readonly none: UnityEditor.Hardware.DevDevice;
    // fields
    id: string;
    name: string;
    type: string;
    module: string;
    state: UnityEditor.Hardware.DevDeviceState;
    features: UnityEditor.Hardware.DevDeviceFeatures;
  }
}
declare namespace UnityEditor.Hardware {
  class DevDeviceFeatures {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.Hardware.DevDeviceFeatures;
    static PlayerConnection: UnityEditor.Hardware.DevDeviceFeatures;
    static RemoteConnection: UnityEditor.Hardware.DevDeviceFeatures;
  }
}
declare namespace UnityEditor.Hardware {
  class DevDeviceList {
    // constructors
    constructor();
    // methods
    static OnChanged(): void;
    static FindDevice(deviceId: string, device: any): boolean;
    static GetDevices(): UnityEditor.Hardware.DevDevice[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Hardware {
  class DevDeviceState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Disconnected: UnityEditor.Hardware.DevDeviceState;
    static Connected: UnityEditor.Hardware.DevDeviceState;
  }
}
declare namespace UnityEditor.Hardware {
  class Usb {
    // constructors
    constructor();
    // methods
    static OnDevicesChanged(devices: UnityEditor.Hardware.UsbDevice[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Hardware {
  class UsbDevice {
    // constructors
    private constructor();
    // methods
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    vendorId: number;
    productId: number;
    revision: number;
    udid: string;
    name: string;
  }
}
declare namespace UnityEditor {
  class HeaderDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any): void;
    GetHeight(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    // fields
  }
}
declare namespace UnityEditor {
  class HeightmapFilters {
    // constructors
    constructor();
    // methods
    static Smooth(heights: number[], terrain: any): void;
    static Smooth(terrain: any): void;
    static Flatten(terrain: any, height: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class HeightmapPainter {
    // constructors
    constructor();
    // methods
    PaintHeight(xCenterNormalized: number, yCenterNormalized: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    size: number;
    strength: number;
    targetHeight: number;
    tool: UnityEditor.TerrainTool;
    brush: UnityEditor.Brush;
    terrainData: any;
  }
}
declare namespace UnityEditor {
  class Help {
    // constructors
    constructor();
    // methods
    static HasHelpForObject(obj: any): boolean;
    static GetHelpURLForObject(obj: any): string;
    static ShowHelpForObject(obj: any): void;
    static ShowHelpPage(page: string): void;
    static BrowseURL(url: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class HierarchyProperty {
    // constructors
    constructor(hierarchytType: UnityEditor.HierarchyType);
    // methods
    Reset(): void;
    GetScene(): any;
    IsExpanded(expanded: number[]): boolean;
    Next(expanded: number[]): boolean;
    NextWithDepthCheck(expanded: number[], minDepth: number): boolean;
    Previous(expanded: number[]): boolean;
    Parent(): boolean;
    Find(instanceID: number, expanded: number[]): boolean;
    Skip(count: number, expanded: number[]): boolean;
    CountRemaining(expanded: number[]): number;
    SetSearchFilter(searchString: string, mode: number): void;
    FindAllAncestors(instanceIDs: number[]): number[];
    static ClearSceneObjectsFilter(): void;
    static FilterSingleSceneObject(instanceID: number, otherVisibilityState: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly instanceID: number;
    readonly pptrValue: any;
    readonly name: string;
    readonly hasChildren: boolean;
    readonly depth: number;
    readonly ancestors: number[];
    readonly row: number;
    readonly colorCode: number;
    readonly guid: string;
    alphaSorted: boolean;
    readonly isValid: boolean;
    readonly isMainRepresentation: boolean;
    readonly hasFullPreviewImage: boolean;
    readonly iconDrawStyle: UnityEditor.IconDrawStyle;
    readonly isFolder: boolean;
    readonly icon: any;
    // fields
  }
}
declare namespace UnityEditor {
  class HierarchySorting {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor {
  class HierarchyType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Assets: UnityEditor.HierarchyType;
    static GameObjects: UnityEditor.HierarchyType;
  }
}
declare namespace UnityEditor {
  class HighLevelEvent {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.HighLevelEvent;
    static Click: UnityEditor.HighLevelEvent;
    static DoubleClick: UnityEditor.HighLevelEvent;
    static ContextClick: UnityEditor.HighLevelEvent;
    static BeginDrag: UnityEditor.HighLevelEvent;
    static Drag: UnityEditor.HighLevelEvent;
    static EndDrag: UnityEditor.HighLevelEvent;
    static Delete: UnityEditor.HighLevelEvent;
    static SelectionChanged: UnityEditor.HighLevelEvent;
  }
}
declare namespace UnityEditor {
  class Highlighter {
    // constructors
    constructor();
    // methods
    static Stop(): void;
    static Highlight(windowTitle: string, text: string): boolean;
    static Highlight(windowTitle: string, text: string, mode: UnityEditor.HighlightSearchMode): boolean;
    static HighlightIdentifier(position: any, identifier: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly active: boolean;
    static readonly activeVisible: boolean;
    static readonly activeText: string;
    static readonly activeRect: any;
    // fields
  }
}
declare namespace UnityEditor {
  class HighlightSearchMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.HighlightSearchMode;
    static Auto: UnityEditor.HighlightSearchMode;
    static Identifier: UnityEditor.HighlightSearchMode;
    static PrefixLabel: UnityEditor.HighlightSearchMode;
    static Content: UnityEditor.HighlightSearchMode;
  }
}
declare namespace UnityEditor {
  class HingeJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class HingeJointEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class EmulationMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.HolographicEmulation.EmulationMode;
    static RemoteDevice: UnityEditor.HolographicEmulation.EmulationMode;
    static Simulated: UnityEditor.HolographicEmulation.EmulationMode;
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class GestureHand {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Left: UnityEditor.HolographicEmulation.GestureHand;
    static Right: UnityEditor.HolographicEmulation.GestureHand;
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class HolographicEmulationWindow {
    // constructors
    constructor();
    // methods
    static Init(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class HolographicStreamerConnectionFailureReason {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.HolographicEmulation.HolographicStreamerConnectionFailureReason;
    static Unknown: UnityEditor.HolographicEmulation.HolographicStreamerConnectionFailureReason;
    static Unreachable: UnityEditor.HolographicEmulation.HolographicStreamerConnectionFailureReason;
    static HandshakeFailed: UnityEditor.HolographicEmulation.HolographicStreamerConnectionFailureReason;
    static ProtocolVersionMismatch: UnityEditor.HolographicEmulation.HolographicStreamerConnectionFailureReason;
    static ConnectionLost: UnityEditor.HolographicEmulation.HolographicStreamerConnectionFailureReason;
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class HolographicStreamerConnectionState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Disconnected: UnityEditor.HolographicEmulation.HolographicStreamerConnectionState;
    static Connecting: UnityEditor.HolographicEmulation.HolographicStreamerConnectionState;
    static Connected: UnityEditor.HolographicEmulation.HolographicStreamerConnectionState;
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class PerceptionRemotingPlugin {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.HolographicEmulation {
  class PerceptionSimulation {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class HorizontalLayout {
    // constructors
    private constructor();
    // methods
    static DoLayout(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class HostView {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    static EndOffsetArea(): void;
    static BeginOffsetArea(screenRect: any, content: any, style: any): void;
    InvokeOnGUI(onGUIPosition: any): void;
    PopupGenericMenu(view: UnityEditor.EditorWindow, pos: any): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class HumanTemplate {
    // constructors
    constructor();
    // methods
    Insert(name: string, templateName: string): void;
    Find(name: string): string;
    ClearTemplate(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class IAudioEffectPlugin {
    // constructors
    private constructor();
    // methods
    SetFloatParameter(name: string, value: number): boolean;
    GetFloatParameter(name: string, value: any): boolean;
    GetFloatParameterInfo(name: string, minRange: any, maxRange: any, defaultValue: any): boolean;
    GetFloatBuffer(name: string, data: any, numsamples: number): boolean;
    GetSampleRate(): number;
    IsPluginEditableAndEnabled(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IAudioEffectPluginGUI {
    // constructors
    private constructor();
    // methods
    OnGUI(plugin: UnityEditor.IAudioEffectPlugin): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Name: string;
    readonly Description: string;
    readonly Vendor: string;
    // fields
  }
}
declare namespace UnityEditor {
  class IBaseInspectView {
    // constructors
    private constructor();
    // methods
    UpdateInstructions(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    Unselect(): void;
    SelectRow(index: number): void;
    ShowOverlay(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ICleanuppable {
    // constructors
    private constructor();
    // methods
    Cleanup(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IconDrawStyle {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NonTexture: UnityEditor.IconDrawStyle;
    static Texture: UnityEditor.IconDrawStyle;
  }
}
declare namespace UnityEditor {
  class IconSelector {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.IconSelector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    seperator: any;
    selection: any;
    selectionLabel: any;
    noneButton: any;
  }
}
declare namespace UnityEditor {
  class ICurveEditorState {
    // constructors
    private constructor();
    // methods
    // properties
    readonly syncTimeDuringDrag: boolean;
    readonly timeFormat: UnityEditor.TimeArea.TimeFormat;
    // fields
  }
}
declare namespace UnityEditor {
  class IDeviceUtils {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IDropArea {
    // constructors
    private constructor();
    // methods
    DragOver(w: UnityEditor.EditorWindow, screenPos: any): UnityEditor.DropInfo;
    PerformDrop(w: UnityEditor.EditorWindow, dropInfo: UnityEditor.DropInfo, screenPos: any): boolean;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IEditablePoint {
    // constructors
    private constructor();
    // methods
    GetPosition(idx: number): any;
    SetPosition(idx: number, position: any): void;
    GetDefaultColor(): any;
    GetSelectedColor(): any;
    GetPointScale(): number;
    GetPositions(): any;
    GetUnselectedPositions(): any[];
    GetSelectedPositions(): any[];
    // properties
    readonly Count: number;
    // fields
  }
}
declare namespace UnityEditor {
  class IFlexibleMenuItemProvider {
    // constructors
    private constructor();
    // methods
    Count(): number;
    GetItem(index: number): any;
    Add(obj: any): number;
    Replace(index: number, newPresetObject: any): void;
    Remove(index: number): void;
    Create(): any;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    GetName(index: number): string;
    IsModificationAllowed(index: number): boolean;
    GetSeperatorIndices(): number[];
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IGameViewSizeMenuUser {
    // constructors
    private constructor();
    // methods
    SizeSelectionCallback(indexClicked: number, objectSelected: any): void;
    // properties
    lowResolutionForAspectRatios: boolean;
    readonly forceLowResolutionAspectRatios: boolean;
    readonly showLowResolutionToggle: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class IHasCustomMenu {
    // constructors
    private constructor();
    // methods
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IHierarchyProperty {
    // constructors
    private constructor();
    // methods
    Reset(): void;
    IsExpanded(expanded: number[]): boolean;
    Next(expanded: number[]): boolean;
    NextWithDepthCheck(expanded: number[], minDepth: number): boolean;
    Previous(expanded: number[]): boolean;
    Parent(): boolean;
    Find(instanceID: number, expanded: number[]): boolean;
    FindAllAncestors(instanceIDs: number[]): number[];
    Skip(count: number, expanded: number[]): boolean;
    CountRemaining(expanded: number[]): number;
    // properties
    readonly instanceID: number;
    readonly pptrValue: any;
    readonly name: string;
    readonly hasChildren: boolean;
    readonly depth: number;
    readonly row: number;
    readonly colorCode: number;
    readonly guid: string;
    readonly icon: any;
    readonly isValid: boolean;
    readonly isMainRepresentation: boolean;
    readonly hasFullPreviewImage: boolean;
    readonly iconDrawStyle: UnityEditor.IconDrawStyle;
    readonly isFolder: boolean;
    readonly ancestors: number[];
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ITreeViewDataSource {
    // constructors
    private constructor();
    // methods
    OnInitialize(): void;
    ReloadData(): void;
    InitIfNeeded(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    SetExpanded(id: number, expand: boolean): boolean;
    IsExpanded(id: number): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    RemoveFakeItem(): void;
    HasFakeItem(): boolean;
    OnSearchChanged(): void;
    // properties
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ITreeViewDragging {
    // constructors
    private constructor();
    // methods
    OnInitialize(): void;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class ITreeViewGUI {
    // constructors
    private constructor();
    // methods
    OnInitialize(): void;
    GetTotalSize(): any;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    // properties
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class LazyTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    static CreateChildListForCollapsedParent(): any;
    static IsChildListForACollapsedParent(childList: any): boolean;
    RevealItem(itemID: number): void;
    FindItem(itemID: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    InitIfNeeded(): void;
    GetRows(): any;
    OnInitialize(): void;
    FetchData(): void;
    ReloadData(): void;
    IsRevealed(id: number): boolean;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class MultiColumnHeader {
    // constructors
    constructor(state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState);
    // methods
    SetSortDirection(columnIndex: number, sortAscending: boolean): void;
    IsSortedAscending(columnIndex: number): boolean;
    GetColumn(columnIndex: number): UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column;
    GetVisibleColumnIndex(columnIndex: number): number;
    GetCellRect(visibleColumnIndex: number, rowRect: any): any;
    GetColumnRect(visibleColumnIndex: number): any;
    OnGUI(rect: any, xScroll: number): void;
    Repaint(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    sortedColumnIndex: number;
    readonly previousSortedColumnIndex: number;
    state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState;
    height: number;
    canSort: boolean;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.MultiColumnHeader {
  class DefaultGUI {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly defaultHeight: number;
    static readonly minimumHeight: number;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.MultiColumnHeader {
  class DefaultStyles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static columnHeader: any;
    static columnHeaderRightAligned: any;
    static background: any;
    static arrowStyle: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.MultiColumnHeaderState {
  class Column {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    width: number;
    sortedAscending: boolean;
    headerText: string;
    headerTextAlignment: any;
    sortingArrowAlignment: any;
    minWidth: number;
    maxWidth: number;
    autoResize: boolean;
    allowToggleVisibility: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class MultiColumnHeaderState {
    // constructors
    constructor(columns: UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    sortedColumnIndex: number;
    readonly previousSortedColumnIndex: number;
    readonly columns: UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column[];
    visibleColumns: number[];
    readonly widthOfAllVisibleColumns: number;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class CanStartDragArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem;
    draggedItemIDs: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeView {
    // constructors
    constructor(state: UnityEditor.IMGUI.Controls.TreeViewState);
    constructor(state: UnityEditor.IMGUI.Controls.TreeViewState, multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader);
    // methods
    Reload(): void;
    GetCellRectForTreeFoldouts(rowRect: any): any;
    SetCustomRowHeights(rowHeights: any): void;
    GetRows(): any;
    GetRowsFromIDs(ids: any): any;
    ExpandAll(): void;
    CollapseAll(): void;
    SetExpandedRecursive(id: number, expanded: boolean): void;
    SetExpanded(id: number, expanded: boolean): boolean;
    SetExpanded(ids: any): void;
    GetExpanded(): any;
    IsExpanded(id: number): boolean;
    GetSelection(): any;
    SetSelection(selectedIDs: any): void;
    SetSelection(selectedIDs: any, options: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions): void;
    IsSelected(id: number): boolean;
    HasSelection(): boolean;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    FrameItem(id: number): void;
    OnGUI(rect: any): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    static CreateChildListForCollapsedParent(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly state: UnityEditor.IMGUI.Controls.TreeViewState;
    readonly multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader;
    treeViewRect: any;
    baseIndent: number;
    readonly foldoutWidth: number;
    foldoutYOffset: number;
    columnIndexForTreeFoldouts: number;
    readonly depthIndentWidth: number;
    rowHeight: number;
    readonly treeViewControlID: number;
    readonly rootItem: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly isDragging: boolean;
    readonly hasSearch: boolean;
    searchString: string;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DefaultGUI {
    // constructors
    private constructor();
    // methods
    static Label(rect: any, label: string, selected: boolean, focused: boolean): void;
    static LabelRightAligned(rect: any, label: string, selected: boolean, focused: boolean): void;
    static BoldLabel(rect: any, label: string, selected: boolean, focused: boolean): void;
    static BoldLabelRightAligned(rect: any, label: string, selected: boolean, focused: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly contentLeftMargin: number;
    static readonly columnMargin: number;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DefaultStyles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static label: any;
    static labelRightAligned: any;
    static boldLabel: any;
    static boldLabelRightAligned: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class DragAndDropArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    parentItem: UnityEditor.IMGUI.Controls.TreeViewItem;
    insertAtIndex: number;
    performDrop: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class ItemGUIEventArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    item: UnityEditor.IMGUI.Controls.TreeViewItem;
    rowRect: any;
    cellRect: any;
    row: number;
    column: number;
    selected: boolean;
    focused: boolean;
    isRenaming: boolean;
    isDropTarget: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class OverriddenMethods {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeView);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    hasItemGUI: boolean;
    hasDrawItemBackground: boolean;
    hasHandleDragAndDrop: boolean;
    hasGetRenameRect: boolean;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class RenameEndedArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    acceptedRename: boolean;
    itemID: number;
    originalName: string;
    newName: string;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class SetupDragAndDropArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    draggedItemIDs: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class TreeViewControlDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.IMGUI.Controls.TreeView);
    // methods
    FetchData(): void;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    RevealItem(itemID: number): void;
    FindItem(itemID: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    InitIfNeeded(): void;
    GetRows(): any;
    OnInitialize(): void;
    ReloadData(): void;
    IsRevealed(id: number): boolean;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class TreeViewControlDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.IMGUI.Controls.TreeView);
    // methods
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPosition: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeView {
  class TreeViewControlGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.IMGUI.Controls.TreeView);
    // methods
    GetTotalSize(): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    DefaultRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    SetRowHeights(rowHeights: any): void;
    OnInitialize(): void;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly foldoutWidth: number;
    columnIndexForTreeFoldouts: number;
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewAnimationInput {
    // constructors
    constructor();
    // methods
    FireAnimationEndedEvent(): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly elapsedTimeNormalized: number;
    elapsedTime: number;
    startRow: number;
    endRow: number;
    rowsRect: any;
    startRowRect: any;
    startTime: number;
    animationDuration: number;
    expanding: boolean;
    item: UnityEditor.IMGUI.Controls.TreeViewItem;
    treeView: UnityEditor.IMGUI.Controls.TreeViewController;
    // fields
    animationEnded: ((UnityEditor.IMGUI.Controls.TreeViewAnimationInput) => void);
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewController {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState);
    // methods
    Init(rect: any, data: UnityEditor.IMGUI.Controls.ITreeViewDataSource, gui: UnityEditor.IMGUI.Controls.ITreeViewGUI, dragging: UnityEditor.IMGUI.Controls.ITreeViewDragging): void;
    IsSelected(id: number): boolean;
    HasSelection(): boolean;
    GetSelection(): number[];
    GetRowIDs(): number[];
    SetSelection(selectedIDs: number[], revealSelectionAndFrameLastSelected: boolean): void;
    SetSelection(selectedIDs: number[], revealSelectionAndFrameLastSelected: boolean, animatedFraming: boolean): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    SetUseScrollView(useScrollView: boolean): void;
    Repaint(): void;
    ReloadData(): void;
    HasFocus(): boolean;
    HandleUnusedMouseEventsForItem(rect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number): void;
    GrabKeyboardFocus(): void;
    NotifyListenersThatSelectionChanged(): void;
    NotifyListenersThatDragEnded(draggedIDs: number[], draggedItemsFromOwnTreeView: boolean): void;
    GetContentSize(): any;
    GetTotalRect(): any;
    SetTotalRect(rect: any): void;
    IsItemDragSelectedOrSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnGUI(rect: any, keyboardControlID: number): void;
    UserInputChangedExpandedState(item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, expand: boolean): void;
    OnEvent(): void;
    BeginNameEditing(delay: number): boolean;
    EndNameEditing(acceptChanges: boolean): void;
    IsLastClickedPartOfRows(): boolean;
    OffsetSelection(offset: number): void;
    SelectionClick(itemClicked: UnityEditor.IMGUI.Controls.TreeViewItem, keepMultiSelection: boolean): void;
    RemoveSelection(): void;
    Frame(id: number, frame: boolean, ping: boolean): void;
    Frame(id: number, frame: boolean, ping: boolean, animated: boolean): void;
    EndPing(): void;
    SortIDsInVisiblityOrder(ids: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectionChangedCallback: ((number[]) => void);
    itemDoubleClickedCallback: ((number) => void);
    dragEndedCallback: ((number[], boolean) => void);
    contextClickItemCallback: ((number) => void);
    contextClickOutsideItemsCallback: (() => void);
    keyboardInputCallback: (() => void);
    expandedStateChanged: (() => void);
    searchChanged: ((string) => void);
    scrollChanged: ((any) => void);
    onGUIRowCallback: ((number, any) => void);
    data: UnityEditor.IMGUI.Controls.ITreeViewDataSource;
    dragging: UnityEditor.IMGUI.Controls.ITreeViewDragging;
    gui: UnityEditor.IMGUI.Controls.ITreeViewGUI;
    state: UnityEditor.IMGUI.Controls.TreeViewState;
    readonly expansionAnimator: UnityEditor.IMGUI.Controls.TreeViewItemExpansionAnimator;
    deselectOnUnhandledMouseDown: boolean;
    useExpansionAnimation: boolean;
    readonly isSearching: boolean;
    readonly isDragging: boolean;
    searchString: string;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnInitialize(): void;
    FetchData(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPosition: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeViewDragging {
  class DropData {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    expandedArrayBeforeDrag: number[];
    lastControlID: number;
    dropTargetControlID: number;
    rowMarkerControlID: number;
    expandItemBeginTimer: number;
    expandItemBeginPosition: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeViewDragging {
  class DropPosition {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Upon: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition;
    static Below: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition;
    static Above: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, useHorizontalScroll: boolean);
    // methods
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.IMGUI.Controls.TreeViewGUI {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly foldoutWidth: number;
    // fields
    foldout: any;
    insertion: any;
    ping: any;
    toolbarButton: any;
    lineStyle: any;
    lineBoldStyle: any;
    selectionStyle: any;
    content: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewItem {
    // constructors
    constructor(id: number);
    constructor(id: number, depth: number);
    constructor(id: number, depth: number, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewItemAlphaNumericSort {
    // constructors
    constructor();
    // methods
    Compare(lhs: UnityEditor.IMGUI.Controls.TreeViewItem, rhs: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewItemExpansionAnimator {
    // constructors
    constructor();
    // methods
    BeginAnimating(setup: UnityEditor.IMGUI.Controls.TreeViewAnimationInput): void;
    CullRow(row: number, gui: UnityEditor.IMGUI.Controls.ITreeViewGUI): boolean;
    OnRowGUI(row: number): void;
    OnBeginRowGUI(row: number, rowRect: any): any;
    OnEndRowGUI(row: number): void;
    OnBeforeAllRowsGUI(): void;
    OnAfterAllRowsGUI(): void;
    IsAnimating(itemID: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly expandedValueNormalized: number;
    readonly startRow: number;
    readonly endRow: number;
    readonly deltaHeight: number;
    readonly isAnimating: boolean;
    readonly isExpanding: boolean;
    // fields
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewSelectionOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions;
    static FireSelectionChanged: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions;
    static RevealAndFrame: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIDs: any;
    lastClickedID: number;
    expandedIDs: any;
    searchString: string;
    // fields
    scrollPos: any;
  }
}
declare namespace UnityEditor.IMGUI.Controls {
  class TreeViewUtility {
    // constructors
    private constructor();
    // methods
    static SetParentAndChildrenForItems(rows: any, root: UnityEditor.IMGUI.Controls.TreeViewItem): void;
    static BuildRowsUsingExpandedState(rows: any, root: UnityEditor.IMGUI.Controls.TreeViewItem, treeView: UnityEditor.IMGUI.Controls.TreeView): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IMGUIClipInstruction {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    screenRect: any;
    unclippedScreenRect: any;
    scrollOffset: any;
    renderOffset: any;
    resetOffset: boolean;
    level: number;
    pushStacktrace: UnityEditor.StackFrame[];
    popStacktrace: UnityEditor.StackFrame[];
  }
}
declare namespace UnityEditor {
  class IMGUIInstruction {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    type: UnityEditor.InstructionType;
    level: number;
    unclippedRect: any;
    stack: UnityEditor.StackFrame[];
    typeInstructionIndex: number;
  }
}
declare namespace UnityEditor {
  class IMGUILayoutInstruction {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    level: number;
    unclippedRect: any;
    marginLeft: number;
    marginRight: number;
    marginTop: number;
    marginBottom: number;
    style: any;
    stack: UnityEditor.StackFrame[];
    isGroup: number;
    isVertical: number;
  }
}
declare namespace UnityEditor {
  class ImportAssetOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.ImportAssetOptions;
    static ForceUpdate: UnityEditor.ImportAssetOptions;
    static ForceSynchronousImport: UnityEditor.ImportAssetOptions;
    static ImportRecursive: UnityEditor.ImportAssetOptions;
    static DontDownloadFromCacheServer: UnityEditor.ImportAssetOptions;
    static ForceUncompressedImport: UnityEditor.ImportAssetOptions;
  }
}
declare namespace UnityEditor {
  class ImportPackageItem {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    exportedAssetPath: string;
    destinationAssetPath: string;
    sourceFolder: string;
    previewPath: string;
    guid: string;
    enabledStatus: number;
    isFolder: boolean;
    exists: boolean;
    assetChanged: boolean;
    pathConflict: boolean;
    projectAsset: boolean;
  }
}
declare namespace UnityEditor.ImportRawHeightmap {
  class ByteOrder {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mac: UnityEditor.ImportRawHeightmap.ByteOrder;
    static Windows: UnityEditor.ImportRawHeightmap.ByteOrder;
  }
}
declare namespace UnityEditor {
  class ImportRawHeightmap {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_Depth: UnityEditor.ImportRawHeightmap.Depth;
    m_Width: number;
    m_Height: number;
    m_ByteOrder: UnityEditor.ImportRawHeightmap.ByteOrder;
    m_FlipVertically: boolean;
    m_TerrainSize: any;
  }
}
declare namespace UnityEditor.ImportRawHeightmap {
  class Depth {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Bit8: UnityEditor.ImportRawHeightmap.Depth;
    static Bit16: UnityEditor.ImportRawHeightmap.Depth;
  }
}
declare namespace UnityEditor {
  class IncrementalInitialize {
    // constructors
    constructor();
    // methods
    Restart(): void;
    OnEvent(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly state: UnityEditor.IncrementalInitialize.State;
    // fields
  }
}
declare namespace UnityEditor.IncrementalInitialize {
  class State {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PreInitialize: UnityEditor.IncrementalInitialize.State;
    static Initialize: UnityEditor.IncrementalInitialize.State;
    static Initialized: UnityEditor.IncrementalInitialize.State;
  }
}
declare namespace UnityEditor {
  class InheritVelocityModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.InheritVelocityModuleUI {
  class Modes {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Initial: UnityEditor.InheritVelocityModuleUI.Modes;
    static Current: UnityEditor.InheritVelocityModuleUI.Modes;
  }
}
declare namespace UnityEditor.InheritVelocityModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    mode: any;
    velocity: any;
    modes: string[];
  }
}
declare namespace UnityEditor {
  class InitializeOnLoadAttribute {
    // constructors
    constructor();
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class InitializeOnLoadMethodAttribute {
    // constructors
    constructor();
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class InitialModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    GetXAxisScalar(): number;
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_LengthInSec: UnityEditor.SerializedProperty;
    m_Looping: UnityEditor.SerializedProperty;
    m_Prewarm: UnityEditor.SerializedProperty;
    m_StartDelay: UnityEditor.SerializedMinMaxCurve;
    m_PlayOnAwake: UnityEditor.SerializedProperty;
    m_SimulationSpace: UnityEditor.SerializedProperty;
    m_CustomSimulationSpace: UnityEditor.SerializedProperty;
    m_SimulationSpeed: UnityEditor.SerializedProperty;
    m_ScalingMode: UnityEditor.SerializedProperty;
    m_LifeTime: UnityEditor.SerializedMinMaxCurve;
    m_Speed: UnityEditor.SerializedMinMaxCurve;
    m_Color: UnityEditor.SerializedMinMaxGradient;
    m_Size3D: UnityEditor.SerializedProperty;
    m_SizeX: UnityEditor.SerializedMinMaxCurve;
    m_SizeY: UnityEditor.SerializedMinMaxCurve;
    m_SizeZ: UnityEditor.SerializedMinMaxCurve;
    m_Rotation3D: UnityEditor.SerializedProperty;
    m_RotationX: UnityEditor.SerializedMinMaxCurve;
    m_RotationY: UnityEditor.SerializedMinMaxCurve;
    m_RotationZ: UnityEditor.SerializedMinMaxCurve;
    m_RandomizeRotationDirection: UnityEditor.SerializedProperty;
    m_GravityModifier: UnityEditor.SerializedMinMaxCurve;
    m_MaxNumParticles: UnityEditor.SerializedProperty;
    m_AutoRandomSeed: UnityEditor.SerializedProperty;
    m_RandomSeed: UnityEditor.SerializedProperty;
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.InitialModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    duration: any;
    looping: any;
    prewarm: any;
    startDelay: any;
    maxParticles: any;
    lifetime: any;
    speed: any;
    color: any;
    size3D: any;
    size: any;
    rotation3D: any;
    rotation: any;
    randomizeRotationDirection: any;
    autoplay: any;
    gravity: any;
    scalingMode: any;
    simulationSpace: any;
    customSimulationSpace: any;
    simulationSpeed: any;
    autoRandomSeed: any;
    randomSeed: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class InspectorMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.InspectorMode;
    static Debug: UnityEditor.InspectorMode;
    static DebugInternal: UnityEditor.InspectorMode;
  }
}
declare namespace UnityEditor {
  class InspectorWindow {
    // constructors
    constructor();
    // methods
    static GetAllInspectorWindows(): UnityEditor.InspectorWindow[];
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    GetTracker(): UnityEditor.ActiveEditorTracker;
    GetLastInteractedEditor(): UnityEditor.Editor;
    GetEditorThatControlsPreview(editors: UnityEditor.IPreviewable[]): UnityEditor.IPreviewable;
    GetEditorsWithPreviews(editors: UnityEditor.Editor[]): UnityEditor.IPreviewable[];
    GetInspectedObject(): any;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    isLocked: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_ScrollPosition: any;
    m_InspectorMode: UnityEditor.InspectorMode;
    static s_CurrentInspectorWindow: UnityEditor.InspectorWindow;
  }
}
declare namespace UnityEditor.InspectorWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    preToolbar: any;
    preToolbar2: any;
    preDropDown: any;
    dragHandle: any;
    lockButton: any;
    preTitle: any;
    labelTitle: any;
    addComponentLabel: any;
    preBackground: any;
    addComponentArea: any;
    addComponentButtonStyle: any;
    previewMiniLabel: any;
    typeSelection: any;
    lockedHeaderButton: any;
    stickyNote: any;
    stickyNoteArrow: any;
    stickyNotePerforce: any;
    stickyNoteLabel: any;
  }
}
declare namespace UnityEditor {
  class InstructionOverlayWindow {
    // constructors
    constructor();
    // methods
    SetTransparent(d: number): void;
    Show(view: UnityEditor.GUIView, instructionRect: any, style: any): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.InstructionOverlayWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    solidColor: any;
  }
}
declare namespace UnityEditor {
  class InstructionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kStyleDraw: UnityEditor.InstructionType;
    static kClipPush: UnityEditor.InstructionType;
    static kClipPop: UnityEditor.InstructionType;
    static kLayoutBeginGroup: UnityEditor.InstructionType;
    static kLayoutEndGroup: UnityEditor.InstructionType;
    static kLayoutEntry: UnityEditor.InstructionType;
  }
}
declare namespace UnityEditor {
  class InternalMeshUtil {
    // constructors
    constructor();
    // methods
    static GetPrimitiveCount(mesh: any): number;
    static CalcTriangleCount(mesh: any): number;
    static HasNormals(mesh: any): boolean;
    static GetVertexFormat(mesh: any): string;
    static GetCachedMeshSurfaceArea(meshRenderer: any): number;
    static GetCachedSkinnedMeshSurfaceArea(skinnedMeshRenderer: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class iOSAppInBackgroundBehavior {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Custom: UnityEditor.iOSAppInBackgroundBehavior;
    static Suspend: UnityEditor.iOSAppInBackgroundBehavior;
    static Exit: UnityEditor.iOSAppInBackgroundBehavior;
  }
}
declare namespace UnityEditor {
  class iOSBackgroundMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.iOSBackgroundMode;
    static Audio: UnityEditor.iOSBackgroundMode;
    static Location: UnityEditor.iOSBackgroundMode;
    static VOIP: UnityEditor.iOSBackgroundMode;
    static NewsstandContent: UnityEditor.iOSBackgroundMode;
    static ExternalAccessory: UnityEditor.iOSBackgroundMode;
    static BluetoothCentral: UnityEditor.iOSBackgroundMode;
    static BluetoothPeripheral: UnityEditor.iOSBackgroundMode;
    static Fetch: UnityEditor.iOSBackgroundMode;
    static RemoteNotification: UnityEditor.iOSBackgroundMode;
  }
}
declare namespace UnityEditor {
  class iOSBuildType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Debug: UnityEditor.iOSBuildType;
    static Release: UnityEditor.iOSBuildType;
  }
}
declare namespace UnityEditor {
  class iOSDeviceRequirement {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly values: any;
    // fields
  }
}
declare namespace UnityEditor {
  class iOSDeviceRequirementGroup {
    // constructors
    private constructor();
    // methods
    RemoveAt(index: number): void;
    Add(requirement: UnityEditor.iOSDeviceRequirement): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly count: number;
    get_Item(index: number): UnityEditor.iOSDeviceRequirement;
    set_Item(index: number, value: UnityEditor.iOSDeviceRequirement): void;
    // fields
  }
}
declare namespace UnityEditor {
  class iOSLaunchScreenType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.iOSLaunchScreenType;
    static ImageAndBackgroundRelative: UnityEditor.iOSLaunchScreenType;
    static CustomXib: UnityEditor.iOSLaunchScreenType;
    static None: UnityEditor.iOSLaunchScreenType;
    static ImageAndBackgroundConstant: UnityEditor.iOSLaunchScreenType;
  }
}
declare namespace UnityEditor {
  class iOSSdkVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DeviceSDK: UnityEditor.iOSSdkVersion;
    static SimulatorSDK: UnityEditor.iOSSdkVersion;
  }
}
declare namespace UnityEditor {
  class iOSShowActivityIndicatorOnLoading {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static WhiteLarge: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static White: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static Gray: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static DontShow: UnityEditor.iOSShowActivityIndicatorOnLoading;
  }
}
declare namespace UnityEditor {
  class iOSStatusBarStyle {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.iOSStatusBarStyle;
    static BlackTranslucent: UnityEditor.iOSStatusBarStyle;
    static BlackOpaque: UnityEditor.iOSStatusBarStyle;
  }
}
declare namespace UnityEditor {
  class iOSTargetDevice {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static iPhoneOnly: UnityEditor.iOSTargetDevice;
    static iPadOnly: UnityEditor.iOSTargetDevice;
    static iPhoneAndiPad: UnityEditor.iOSTargetDevice;
  }
}
declare namespace UnityEditor {
  class iOSTargetOSVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static iOS_4_0: UnityEditor.iOSTargetOSVersion;
    static iOS_4_1: UnityEditor.iOSTargetOSVersion;
    static iOS_4_2: UnityEditor.iOSTargetOSVersion;
    static iOS_4_3: UnityEditor.iOSTargetOSVersion;
    static iOS_5_0: UnityEditor.iOSTargetOSVersion;
    static iOS_5_1: UnityEditor.iOSTargetOSVersion;
    static iOS_6_0: UnityEditor.iOSTargetOSVersion;
    static iOS_7_0: UnityEditor.iOSTargetOSVersion;
    static iOS_7_1: UnityEditor.iOSTargetOSVersion;
    static iOS_8_0: UnityEditor.iOSTargetOSVersion;
    static iOS_8_1: UnityEditor.iOSTargetOSVersion;
    static Unknown: UnityEditor.iOSTargetOSVersion;
  }
}
declare namespace UnityEditor {
  class iOSTargetResolution {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Native: UnityEditor.iOSTargetResolution;
    static ResolutionAutoPerformance: UnityEditor.iOSTargetResolution;
    static ResolutionAutoQuality: UnityEditor.iOSTargetResolution;
    static Resolution320p: UnityEditor.iOSTargetResolution;
    static Resolution640p: UnityEditor.iOSTargetResolution;
    static Resolution768p: UnityEditor.iOSTargetResolution;
  }
}
declare namespace UnityEditor {
  class IPrefType {
    // constructors
    private constructor();
    // methods
    ToUniqueString(): string;
    FromUniqueString(sstr: string): void;
    Load(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class IPreviewable {
    // constructors
    private constructor();
    // methods
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    DrawPreview(previewArea: any): void;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    // properties
    readonly target: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ISelectionBinding {
    // constructors
    private constructor();
    // methods
    // properties
    readonly rootGameObject: any;
    readonly animationClip: any;
    readonly clipIsEditable: boolean;
    readonly animationIsEditable: boolean;
    readonly timeOffset: number;
    readonly id: number;
    // fields
  }
}
declare namespace UnityEditor {
  class Joint2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    static AnchorHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static ConnectedAnchorHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DrawAALine(start: any, end: any): void;
    static DrawDistanceGizmo(anchor: any, connectedAnchor: any, distance: number): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Joint2DEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    anchor: any;
    anchorActive: any;
    connectedAnchor: any;
    connectedAnchorActive: any;
  }
}
declare namespace UnityEditor {
  class Json {
    // constructors
    private constructor();
    // methods
    static Deserialize(json: string): any;
    static Serialize(obj: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Json {
  class Parser {
    // constructors
    private constructor();
    // methods
    static IsWordBreak(c: any): boolean;
    static Parse(jsonString: string): any;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Json.Parser {
  class TOKEN {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NONE: UnityEditor.Json.Parser.TOKEN;
    static CURLY_OPEN: UnityEditor.Json.Parser.TOKEN;
    static CURLY_CLOSE: UnityEditor.Json.Parser.TOKEN;
    static SQUARED_OPEN: UnityEditor.Json.Parser.TOKEN;
    static SQUARED_CLOSE: UnityEditor.Json.Parser.TOKEN;
    static COLON: UnityEditor.Json.Parser.TOKEN;
    static COMMA: UnityEditor.Json.Parser.TOKEN;
    static STRING: UnityEditor.Json.Parser.TOKEN;
    static NUMBER: UnityEditor.Json.Parser.TOKEN;
    static TRUE: UnityEditor.Json.Parser.TOKEN;
    static FALSE: UnityEditor.Json.Parser.TOKEN;
    static NULL: UnityEditor.Json.Parser.TOKEN;
  }
}
declare namespace UnityEditor.Json {
  class Serializer {
    // constructors
    private constructor();
    // methods
    static Serialize(obj: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class KeyIdentifier {
    // constructors
    constructor(_curve: any, _curveId: number, _keyIndex: number);
    constructor(_curve: any, _curveId: number, _keyIndex: number, _binding: UnityEditor.EditorCurveBinding);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly keyframe: any;
    // fields
    curve: any;
    curveId: number;
    key: number;
    binding: UnityEditor.EditorCurveBinding;
  }
}
declare namespace UnityEditor {
  class KnobState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    dragStartPos: number;
    dragStartValue: number;
    isDragging: boolean;
    isEditing: boolean;
  }
}
declare namespace UnityEditor {
  class LabelGUI {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnLostFocus(): void;
    AssetLabelsChangedForObject(asset: any): void;
    SaveLabels(): void;
    AssetLabelListCallback(element: UnityEditor.PopupList.ListElement): void;
    InitLabelCache(assets: any[]): void;
    OnLabelGUI(assets: any[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LayerMatrixGUI {
    // constructors
    constructor();
    // methods
    static DoGUI(title: string, show: any, scrollPos: any, getValue: ((number, number) => boolean), setValue: ((number, number, boolean) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LayerVisibilityWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LayerVisibilityWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    menuItem: any;
    listEvenBg: any;
    listOddBg: any;
    separator: any;
    lockButton: any;
    listTextStyle: any;
    listHeaderStyle: any;
    visibleOn: any;
    visibleOff: any;
  }
}
declare namespace UnityEditor {
  class LayoutDropdownWindow {
    // constructors
    constructor(so: UnityEditor.SerializedObject);
    // methods
    OnOpen(): void;
    OnClose(): void;
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.LayoutDropdownWindow {
  class LayoutMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Undefined: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Min: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Middle: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Max: UnityEditor.LayoutDropdownWindow.LayoutMode;
    static Stretch: UnityEditor.LayoutDropdownWindow.LayoutMode;
  }
}
declare namespace UnityEditor.LayoutDropdownWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    tableHeaderColor: any;
    tableLineColor: any;
    parentColor: any;
    selfColor: any;
    simpleAnchorColor: any;
    stretchAnchorColor: any;
    anchorCornerColor: any;
    pivotColor: any;
    frame: any;
    label: any;
  }
}
declare namespace UnityEditor {
  class LegacyIlluminShaderGUI {
    // constructors
    constructor();
    // methods
    OnGUI(materialEditor: UnityEditor.MaterialEditor, props: UnityEditor.MaterialProperty[]): void;
    OnMaterialPreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialInteractivePreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialPreviewSettingsGUI(materialEditor: UnityEditor.MaterialEditor): void;
    AssignNewShaderToMaterial(material: any, oldShader: any, newShader: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LicenseManagementWindow {
    // constructors
    constructor();
    // methods
    static CheckForUpdates(): void;
    static ActivateNewLicense(): void;
    static ManualActivation(): void;
    static ReturnLicense(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LightEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LightEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    LightBounceIntensity: any;
    ShadowType: any;
    BakedShadowRadius: any;
    BakedShadowAngle: any;
    ShadowNearPlane: any;
    iconRemove: any;
    invisibleButton: any;
    LightmappingModeLabel: any;
    LightmappingModes: any[];
    LightmappingModeValues: number[];
  }
}
declare namespace UnityEditor {
  class LightingDataAsset {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LightingEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    parentWindow: UnityEditor.EditorWindow;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LightingEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static environmentHeader: any;
    static sunLabel: any;
    static skyboxLabel: any;
    static ambientIntensity: any;
    static reflectionIntensity: any;
    static reflectionBounces: any;
    static skyboxWarning: any;
    static defReflectionWarning: any;
    static createLight: any;
    static ambientModeLabel: any;
    static ambientUp: any;
    static ambientMid: any;
    static ambientDown: any;
    static ambient: any;
    static reflectionModeLabel: any;
    static customReflection: any;
    static skyLightColor: any;
    static skyboxTint: any;
    static SkyLightBaked: any;
    static ReflectionCompression: any;
    static defaultReflectionResolution: any;
    static defaultReflectionSizesValues: number[];
    static defaultReflectionSizes: any[];
    static kFullAmbientModes: any[];
    static kFullAmbientModeValues: number[];
  }
}
declare namespace UnityEditor.LightingWindow {
  class BakeMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BakeReflectionProbes: UnityEditor.LightingWindow.BakeMode;
    static Clear: UnityEditor.LightingWindow.BakeMode;
  }
}
declare namespace UnityEditor {
  class LightingWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LightingWindow {
  class Mode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ObjectSettings: UnityEditor.LightingWindow.Mode;
    static BakeSettings: UnityEditor.LightingWindow.Mode;
    static Maps: UnityEditor.LightingWindow.Mode;
  }
}
declare namespace UnityEditor.LightingWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ModeToggles: any[];
    RuntimeCPUUsageValues: number[];
    RuntimeCPUUsageStrings: any[];
    RuntimeCPUUsage: any;
    RealtimeGILabel: any;
    BakedGILabel: any;
    GeneralGILabel: any;
    ContinuousBakeLabel: any;
    BuildLabel: any;
    IndirectResolution: any;
    UpdateRealtimeProbeLabel: any;
    BounceScale: any;
    UpdateThreshold: any;
    AlbedoBoost: any;
    IndirectOutputScale: any;
    Resolution: any;
    BakeResolution: any;
    ConcurrentJobs: any;
    ForceWhiteAlbedo: any;
    ForceUpdates: any;
    AO: any;
    AmbientOcclusion: any;
    AmbientOcclusionDirect: any;
    AOMaxDistance: any;
    DirectionalMode: any;
    NoDirectionalSpecularInSM2AndGLES2: any;
    NoDirectionalInSM2AndGLES2: any;
    Padding: any;
    MaxAtlasSize: any;
    TextureCompression: any;
    LightProbesTitle: any;
    DirectLightInLightProbes: any;
    FinalGather: any;
    FinalGatherRayCount: any;
    FinalGatherFiltering: any;
    DefaultLightmapParameters: any;
    SceneViewLightmapDisplay: any;
    labelStyle: any;
  }
}
declare namespace UnityEditor {
  class LightingWindowLightmapPreviewTab {
    // constructors
    constructor();
    // methods
    LightmapPreview(r: any): void;
    UpdateLightmapSelection(): void;
    Maps(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.LightingWindowLightmapPreviewTab {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    selectedLightmapHighlight: any;
    LightProbes: any;
    LightingDataAsset: any;
    MapsArraySize: any;
  }
}
declare namespace UnityEditor {
  class LightingWindowObjectTab {
    // constructors
    constructor();
    // methods
    OnEnable(window: UnityEditor.EditorWindow): void;
    OnDisable(): void;
    ObjectPreview(r: any): void;
    EditLights(): boolean;
    EditLightmapParameters(): boolean;
    EditTerrains(): boolean;
    EditRenderers(): boolean;
    ObjectSettings(): void;
    static LightmapParametersGUI(prop: UnityEditor.SerializedProperty, content: any, advancedParameters: boolean): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.LightingWindowObjectTab {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    PreserveUVs: any;
    IgnoreNormalsForChartDetection: any;
    MinimumChartSizeValues: number[];
    MinimumChartSizeStrings: any[];
    MinimumChartSize: any;
    ImportantGI: any;
    AutoUVMaxDistance: any;
    AutoUVMaxAngle: any;
    LightmapParameters: any;
    AtlasTilingX: any;
    AtlasTilingY: any;
    AtlasOffsetX: any;
    AtlasOffsetY: any;
    ClampedSize: any;
    ClampedPackingResolution: any;
    ZeroAreaPackingMesh: any;
    NoNormalsNoLightmapping: any;
    Atlas: any;
    RealtimeLM: any;
    ChunkSize: any;
    EmptySelection: any;
    ScaleInLightmap: any;
    TerrainLightmapSize: any;
    AtlasIndex: any;
    RealtimeLMResolution: any;
    RealtimeLMInstanceResolution: any;
    RealtimeLMInputSystemHash: any;
    RealtimeLMInstanceHash: any;
    RealtimeLMGeometryHash: any;
  }
}
declare namespace UnityEditor {
  class LightmapBakeQuality {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static High: UnityEditor.LightmapBakeQuality;
    static Low: UnityEditor.LightmapBakeQuality;
  }
}
declare namespace UnityEditor {
  class LightmapEditorSettings {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static maxAtlasWidth: number;
    static maxAtlasHeight: number;
    static realtimeResolution: number;
    static bakeResolution: number;
    static textureCompression: boolean;
    static reflectionCubemapCompression: any;
    static aoMaxDistance: number;
    static padding: number;
    static aoContrast: number;
    static aoAmount: number;
    static lockAtlas: boolean;
    static skyLightColor: any;
    static skyLightIntensity: number;
    static quality: UnityEditor.LightmapBakeQuality;
    static bounceBoost: number;
    static finalGatherRays: number;
    static finalGatherContrastThreshold: number;
    static finalGatherGradientThreshold: number;
    static finalGatherInterpolationPoints: number;
    static lastUsedResolution: number;
    static bounces: number;
    static bounceIntensity: number;
    static resolution: number;
    // fields
  }
}
declare namespace UnityEditor {
  class LightmapParameters {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    resolution: number;
    clusterResolution: number;
    irradianceBudget: number;
    irradianceQuality: number;
    backFaceTolerance: number;
    modellingTolerance: number;
    stitchEdges: boolean;
    systemTag: number;
    isTransparent: boolean;
    AOQuality: number;
    AOAntiAliasingSamples: number;
    blurRadius: number;
    directLightQuality: number;
    antiAliasingSamples: number;
    bakedLightmapTag: number;
    edgeStitching: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LightmapParametersEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LightmapParametersEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static generalGIContent: any;
    static precomputedRealtimeGIContent: any;
    static resolutionContent: any;
    static clusterResolutionContent: any;
    static irradianceBudgetContent: any;
    static irradianceQualityContent: any;
    static backFaceToleranceContent: any;
    static modellingToleranceContent: any;
    static edgeStitchingContent: any;
    static systemTagContent: any;
    static bakedGIContent: any;
    static blurRadiusContent: any;
    static antiAliasingSamplesContent: any;
    static directLightQualityContent: any;
    static bakedAOContent: any;
    static aoQualityContent: any;
    static aoAntiAliasingSamplesContent: any;
    static isTransparent: any;
    static bakedLightmapTagContent: any;
    static pushoffContent: any;
  }
}
declare namespace UnityEditor.Lightmapping {
  class ConcurrentJobsType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Min: UnityEditor.Lightmapping.ConcurrentJobsType;
    static Low: UnityEditor.Lightmapping.ConcurrentJobsType;
    static High: UnityEditor.Lightmapping.ConcurrentJobsType;
  }
}
declare namespace UnityEditor {
  class Lightmapping {
    // constructors
    constructor();
    // methods
    static ClearDiskCache(): void;
    static BakeAsync(): boolean;
    static Bake(): boolean;
    static Cancel(): void;
    static Clear(): void;
    static ClearLightingDataAsset(): void;
    static Tetrahedralize(positions: any[], outIndices: any, outPositions: any): void;
    static BakeReflectionProbe(probe: any, path: string): boolean;
    static GetTerrainGIChunks(terrain: any, numChunksX: any, numChunksY: any): void;
    static BakeMultipleScenes(paths: string[]): void;
    static BakeSelectedAsync(): boolean;
    static BakeSelected(): boolean;
    static BakeLightProbesOnlyAsync(): boolean;
    static BakeLightProbesOnly(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static giWorkflowMode: UnityEditor.Lightmapping.GIWorkflowMode;
    static realtimeGI: boolean;
    static bakedGI: boolean;
    static indirectOutputScale: number;
    static bounceBoost: number;
    static readonly isRunning: boolean;
    static readonly buildProgress: number;
    static lightingDataAsset: UnityEditor.LightingDataAsset;
    static lightmapSnapshot: UnityEditor.LightmapSnapshot;
    // fields
    static completed: (() => void);
  }
}
declare namespace UnityEditor.Lightmapping {
  class GIWorkflowMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Iterative: UnityEditor.Lightmapping.GIWorkflowMode;
    static OnDemand: UnityEditor.Lightmapping.GIWorkflowMode;
    static Legacy: UnityEditor.Lightmapping.GIWorkflowMode;
  }
}
declare namespace UnityEditor {
  class LightmapSnapshot {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LightmapVisualization {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static enabled: boolean;
    static useLightmaps: boolean;
    static showResolution: boolean;
    static showLightProbes: boolean;
    static showLightProbeLocations: boolean;
    static showLightProbeCells: boolean;
    static dynamicUpdateLightProbes: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class LightmapVisualizationUtility {
    // constructors
    constructor();
    // methods
    static GetLightmapTilingOffset(lightmapType: any): any;
    static GetGITexture(textureType: any): any;
    static DrawTextureWithUVOverlay(texture: any, gameObject: any, drawableArea: any, position: any, textureType: any, drawSpecularUV: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LightProbeGroupEditor {
    // constructors
    constructor(group: any, inspector: UnityEditor.LightProbeGroupInspector);
    // methods
    SetEditing(editing: boolean): void;
    AddProbe(position: any): void;
    SelectAllProbes(): void;
    DeselectProbes(): void;
    DuplicateSelectedProbes(): void;
    RemoveSelectedProbes(): void;
    PullProbePositions(): void;
    PushProbePositions(): void;
    HandleEditMenuHotKeyCommands(): void;
    static TetrahedralizeSceneProbes(positions: any, indices: any): void;
    OnSceneGUI(transform: any): boolean;
    MarkTetrahedraDirty(): void;
    GetPosition(idx: number): any;
    GetWorldPosition(idx: number): any;
    SetPosition(idx: number, position: any): void;
    GetDefaultColor(): any;
    GetSelectedColor(): any;
    GetPointScale(): number;
    GetSelectedPositions(): any[];
    UpdateSelectedPosition(idx: number, position: any): void;
    GetPositions(): any;
    GetUnselectedPositions(): any[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawTetrahedra: boolean;
    readonly selectedProbeBounds: any;
    readonly bounds: any;
    readonly Count: number;
    readonly SelectedCount: number;
    // fields
  }
}
declare namespace UnityEditor {
  class LightProbeGroupInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    StartEditMode(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnSceneGUIDelegate(sceneView: UnityEditor.SceneView): void;
    HasFrameBounds(): boolean;
    OnGetFrameBounds(): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LightProbeGroupInspector {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static showWireframe: any;
    static selectedProbePosition: any;
    static addProbe: any;
    static deleteSelected: any;
    static selectAll: any;
    static duplicateSelected: any;
  }
}
declare namespace UnityEditor {
  class LightProbeGroupSelection {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    m_Selection: any;
  }
}
declare namespace UnityEditor {
  class LightProbeGUI {
    // constructors
    constructor();
    // methods
    DisplayControls(sceneView: UnityEditor.SceneView): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LightProbeProxyVolumeEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LightProbeProxyVolumeEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static richTextMiniLabel: any;
    static volumeResolutionText: any;
    static resolutionXText: any;
    static resolutionYText: any;
    static resolutionZText: any;
    static sizeText: any;
    static bbSettingsText: any;
    static originText: any;
    static bbModeText: any;
    static resModeText: any;
    static probePositionText: any;
    static refreshModeText: any;
    static bbMode: any[];
    static resMode: any[];
    static probePositionMode: any[];
    static refreshMode: any[];
    static resProbesPerUnit: any;
    static componentUnusedNote: any;
    static noRendererNode: any;
    static noLightProbes: any;
    static componentUnsuportedOnTreesNote: any;
    static volTextureSizesValues: number[];
    static volTextureSizes: any[];
    static toolContents: any[];
    static sceneViewEditModes: UnityEditorInternal.EditMode.SceneViewEditMode[];
    static baseSceneEditingToolText: string;
    static toolNames: any[];
  }
}
declare namespace UnityEditor {
  class LightProbesInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LightsModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.LightsModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ratio: any;
    randomDistribution: any;
    light: any;
    color: any;
    range: any;
    intensity: any;
    rangeCurve: any;
    intensityCurve: any;
    maxLights: any;
  }
}
declare namespace UnityEditor {
  class LineRendererCurveEditor {
    // constructors
    constructor();
    // methods
    OnEnable(serializedObject: UnityEditor.SerializedObject): void;
    OnDisable(): void;
    GetAxisScalars(): any;
    CheckCurveChangedExternally(): void;
    OnInspectorGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.LineRendererCurveEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static widthMultiplier: any;
  }
}
declare namespace UnityEditor {
  class LineRendererInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LineRendererInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static colorGradient: any;
    static numCornerVertices: any;
    static numCapVertices: any;
    static alignment: any;
    static alignmentOptions: any[];
    static textureMode: any;
    static textureModeOptions: any[];
  }
}
declare namespace UnityEditor {
  class ListViewElement {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    row: number;
    column: number;
    position: any;
  }
}
declare namespace UnityEditor {
  class ListViewGUI {
    // constructors
    constructor();
    // methods
    static ListView(pos: any, state: UnityEditor.ListViewState): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, colWidths: number[], style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, colWidths: number[], dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static DoListView(pos: any, state: UnityEditor.ListViewState, colWidths: number[], dragTitle: string): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static MultiSelection(prevSelected: number, currSelected: number, initialSelected: any, selectedItems: any): boolean;
    static HasMouseUp(r: any): boolean;
    static HasMouseDown(r: any): boolean;
    static HasMouseDown(r: any, button: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ListViewGUILayout {
    // constructors
    constructor();
    // methods
    static ListView(state: UnityEditor.ListViewState, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static ListView(state: UnityEditor.ListViewState, lvOptions: UnityEditor.ListViewOptions, dragTitle: string, style: any, options: any[]): UnityEditor.ListViewShared.ListViewElementsEnumerator;
    static MultiSelection(prevSelected: number, currSelected: number, initialSelected: any, selectedItems: any): boolean;
    static HasMouseUp(r: any): boolean;
    static HasMouseDown(r: any): boolean;
    static HasMouseDown(r: any, button: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ListViewGUILayout {
  class GUILayoutedListViewGroup {
    // constructors
    constructor();
    // methods
    CalcWidth(): void;
    CalcHeight(): void;
    AddY(): void;
    AddY(val: number): void;
    ApplyOptions(options: any[]): void;
    ResetCursor(): void;
    PeekNext(): any;
    GetNext(): any;
    GetLast(): any;
    Add(e: any): void;
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly margin: any;
    style: any;
    // fields
    entries: any;
    isVertical: boolean;
    resetCoords: boolean;
    spacing: number;
    sameSize: boolean;
    isWindow: boolean;
    windowID: number;
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    rect: any;
    stretchWidth: number;
    stretchHeight: number;
  }
}
declare namespace UnityEditor {
  class ListViewOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static wantsReordering: UnityEditor.ListViewOptions;
    static wantsExternalFiles: UnityEditor.ListViewOptions;
    static wantsToStartCustomDrag: UnityEditor.ListViewOptions;
    static wantsToAcceptCustomDrag: UnityEditor.ListViewOptions;
  }
}
declare namespace UnityEditor.ListViewShared {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static insertion: string;
  }
}
declare namespace UnityEditor {
  class ListViewShared {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static OSX: boolean;
  }
}
declare namespace UnityEditor.ListViewShared {
  class InternalLayoutedListViewState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    group: UnityEditor.ListViewGUILayout.GUILayoutedListViewGroup;
    id: number;
    invisibleRows: number;
    endRow: number;
    rectHeight: number;
    state: UnityEditor.ListViewState;
    beganHorizontal: boolean;
    rect: any;
    wantsReordering: boolean;
    wantsExternalFiles: boolean;
    wantsToStartCustomDrag: boolean;
    wantsToAcceptCustomDrag: boolean;
    dragItem: number;
  }
}
declare namespace UnityEditor.ListViewShared {
  class InternalListViewState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    id: number;
    invisibleRows: number;
    endRow: number;
    rectHeight: number;
    state: UnityEditor.ListViewState;
    beganHorizontal: boolean;
    rect: any;
    wantsReordering: boolean;
    wantsExternalFiles: boolean;
    wantsToStartCustomDrag: boolean;
    wantsToAcceptCustomDrag: boolean;
    dragItem: number;
  }
}
declare namespace UnityEditor.ListViewShared {
  class ListViewElementsEnumerator {
    // constructors
    private constructor();
    // methods
    MoveNext(): boolean;
    Reset(): void;
    GetEnumerator(): any;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ListViewState {
    // constructors
    constructor();
    constructor(totalRows: number);
    constructor(totalRows: number, rowHeight: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    row: number;
    column: number;
    scrollPos: any;
    totalRows: number;
    rowHeight: number;
    ID: number;
    selectionChanged: boolean;
    draggedFrom: number;
    draggedTo: number;
    drawDropHere: boolean;
    dropHereRect: any;
    fileNames: string[];
    customDraggedFromID: number;
  }
}
declare namespace UnityEditor {
  class LocalCacheServer {
    // constructors
    constructor();
    // methods
    static GetCacheLocation(): string;
    static GetRandomUnusedPort(): number;
    static PingHost(host: string, port: number, timeout: number): boolean;
    static WaitForServerToComeAlive(port: number): boolean;
    static Kill(): void;
    static CreateIfNeeded(): void;
    static Setup(): void;
    static GetLocalCacheServerPort(): number;
    static Clear(): void;
    static CheckValidCacheLocation(path: string): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    path: string;
    port: number;
    size: number;
    pid: number;
    time: string;
    static SizeKey: string;
    static PathKey: string;
    static CustomPathKey: string;
  }
}
declare namespace UnityEditor {
  class LocalizationDatabase {
    // constructors
    constructor();
    // methods
    static GetLocalizedString(original: string): string;
    static MarkForTranslation(value: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LODGroupEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    Update(): void;
    OnInspectorGUI(): void;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.LODGroupEditor {
  class LODAction {
    // constructors
    constructor(lods: any, percentage: number, clickedPosition: any, propLODs: UnityEditor.SerializedProperty, callback: (() => void));
    // methods
    InsertLOD(): void;
    DeleteLOD(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.LODGroupEditor {
  class LODLightmapScale {
    // constructors
    constructor(scale: number, renderers: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Scale: number;
    m_Renderers: any;
  }
}
declare namespace UnityEditor {
  class LODGroupGUI {
    // constructors
    private constructor();
    // methods
    static DelinearizeScreenPercentage(percentage: number): number;
    static LinearizeScreenPercentage(percentage: number): number;
    static CalcLODButton(totalRect: any, percentage: number): any;
    static GetCulledBox(totalRect: any, previousLODPercentage: number): any;
    static CreateLODInfos(numLODs: number, area: any, nameGen: ((number) => string), heightGen: ((number) => number)): any;
    static GetCameraPercent(position: any, sliderRect: any): number;
    static SetSelectedLODLevelPercentage(newScreenPercentage: number, lod: number, lods: any): void;
    static DrawLODSlider(area: any, lods: any, selectedLevel: number): void;
    static DrawMixedValueLODSlider(area: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly Styles: UnityEditor.LODGroupGUI.GUIStyles;
    // fields
    static kLODColors: any[];
    static kCulledLODColor: any;
    static kSceneLabelHalfWidth: number;
    static kSceneLabelHeight: number;
    static kSceneHeaderOffset: number;
    static kSliderBarTopMargin: number;
    static kSliderBarHeight: number;
    static kSliderBarBottomMargin: number;
    static kRenderersButtonHeight: number;
    static kButtonPadding: number;
    static kDeleteButtonSize: number;
    static kSelectedLODRangePadding: number;
    static kRenderAreaForegroundPadding: number;
  }
}
declare namespace UnityEditor.LODGroupGUI {
  class GUIStyles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_LODSliderBG: any;
    m_LODSliderRange: any;
    m_LODSliderRangeSelected: any;
    m_LODSliderText: any;
    m_LODSliderTextSelected: any;
    m_LODStandardButton: any;
    m_LODRendererButton: any;
    m_LODRendererAddButton: any;
    m_LODRendererRemove: any;
    m_LODBlackBox: any;
    m_LODCameraLine: any;
    m_LODSceneText: any;
    m_LODRenderersText: any;
    m_LODLevelNotifyText: any;
    m_IconRendererPlus: any;
    m_IconRendererMinus: any;
    m_CameraIcon: any;
    m_UploadToImporter: any;
    m_UploadToImporterDisabled: any;
    m_RecalculateBounds: any;
    m_RecalculateBoundsDisabled: any;
    m_LightmapScale: any;
    m_RendersTitle: any;
    m_AnimatedCrossFadeInvalidText: any;
    m_AnimatedCrossFadeInconsistentText: any;
    m_AnimateBetweenPreviousLOD: any;
  }
}
declare namespace UnityEditor.LODGroupGUI {
  class LODInfo {
    // constructors
    constructor(lodLevel: number, name: string, screenPercentage: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly LODLevel: number;
    readonly LODName: string;
    RawScreenPercent: number;
    ScreenPercent: number;
    // fields
    m_ButtonPosition: any;
    m_RangePosition: any;
  }
}
declare namespace UnityEditor {
  class LODUtility {
    // constructors
    constructor();
    // methods
    static CalculateLODGroupBoundingBox(group: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class LODVisualizationInformation {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    triangleCount: number;
    vertexCount: number;
    rendererCount: number;
    submeshCount: number;
    activeLODLevel: number;
    activeLODFade: number;
    activeDistance: number;
    activeRelativeScreenSize: number;
    activePixelSize: number;
    worldSpaceSize: number;
  }
}
declare namespace UnityEditor {
  class LookDevConfig {
    // constructors
    constructor();
    // methods
    UpdateFloatProperty(type: UnityEditor.LookDevProperty, value: number): void;
    UpdateFloatProperty(type: UnityEditor.LookDevProperty, value: number, recordUndo: boolean): void;
    UpdateIntProperty(property: UnityEditor.LookDevProperty, value: number): void;
    UpdateIntProperty(property: UnityEditor.LookDevProperty, value: number, recordUndo: boolean): void;
    GetFloatProperty(property: UnityEditor.LookDevProperty, context: UnityEditor.LookDevEditionContext): number;
    GetIntProperty(property: UnityEditor.LookDevProperty, context: UnityEditor.LookDevEditionContext): number;
    UpdateFloatProperty(property: UnityEditor.LookDevProperty, value: number, recordUndo: boolean, forceLinked: boolean): void;
    UpdateIntProperty(property: UnityEditor.LookDevProperty, value: number, recordUndo: boolean, forceLinked: boolean): void;
    IsPropertyLinked(type: UnityEditor.LookDevProperty): boolean;
    UpdatePropertyLink(property: UnityEditor.LookDevProperty, value: boolean): void;
    GetObjectLoDCount(context: UnityEditor.LookDevEditionContext): number;
    UpdateFocus(context: UnityEditor.LookDevEditionContext): void;
    SetEnabledRecursive(go: any, enabled: boolean): void;
    ResynchronizeObjects(): void;
    UpdateCurrentObjectArray(): void;
    SetCurrentPreviewObject(go: any): boolean;
    SetCurrentPreviewObject(go: any, context: UnityEditor.LookDevEditionContext): void;
    OnEnable(): void;
    OnDestroy(): void;
    Cleanup(): void;
    SetLookDevView(lookDevView: UnityEditor.LookDevView): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    enableShadowCubemap: boolean;
    sideBySideCameraLinked: boolean;
    readonly currentEditionContextIndex: number;
    readonly currentEditionContext: UnityEditor.LookDevEditionContext;
    dualViewBlendFactor: number;
    gizmo: UnityEditor.GizmoInfo;
    readonly lookDevContexts: UnityEditor.LookDevContext[];
    readonly currentLookDevContext: UnityEditor.LookDevContext;
    readonly currentObject: any[];
    readonly cameraState: UnityEditor.CameraState[];
    cameraStateCommon: UnityEditor.CameraState;
    cameraStateLeft: UnityEditor.CameraState;
    cameraStateRight: UnityEditor.CameraState;
    lookDevMode: UnityEditor.LookDevMode;
    enableToneMap: boolean;
    allowDifferentObjects: boolean;
    exposureRange: number;
    shadowDistance: number;
    showBalls: boolean;
    showControlWindows: boolean;
    rotateObjectMode: boolean;
    objRotationSpeed: number;
    rotateEnvMode: boolean;
    envRotationSpeed: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LookDevContext {
    // constructors
    constructor();
    // methods
    GetProperty(property: UnityEditor.LookDevProperty): UnityEditor.LookDevContext.LookDevPropertyValue;
    UpdateProperty(property: UnityEditor.LookDevProperty, value: number): void;
    UpdateProperty(property: UnityEditor.LookDevProperty, value: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly exposureValue: number;
    envRotation: number;
    currentHDRIIndex: number;
    readonly shadingMode: number;
    readonly lodIndex: number;
    // fields
  }
}
declare namespace UnityEditor.LookDevContext {
  class LookDevPropertyValue {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    floatValue: number;
    intValue: number;
  }
}
declare namespace UnityEditor {
  class LookDevEditionContext {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Left: UnityEditor.LookDevEditionContext;
    static Right: UnityEditor.LookDevEditionContext;
    static None: UnityEditor.LookDevEditionContext;
  }
}
declare namespace UnityEditor {
  class LookDevEnvironmentLibrary {
    // constructors
    constructor();
    // methods
    InsertHDRI(cubemap: any): void;
    InsertHDRI(cubemap: any, insertionIndex: number): void;
    RemoveHDRI(cubemap: any): boolean;
    CleanupDeletedHDRI(): void;
    SetLookDevView(lookDevView: UnityEditor.LookDevView): void;
    OnBeforeSerialize(): void;
    OnAfterDeserialize(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    dirty: boolean;
    readonly hdriList: any;
    readonly hdriCount: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LookDevEnvironmentLibraryInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class LookDevEnvironmentWindow {
    // constructors
    constructor(lookDevView: UnityEditor.LookDevView);
    // methods
    SetRects(positionInLookDev: any, GUIRect: any, displayRect: any): void;
    GetCurrentSelection(): any;
    GetSelectedPositionOffset(): any;
    CancelSelection(): void;
    static PositionToLatLong(position: any): any;
    ResetShadowCubemap(): void;
    OnGUI(windowID: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly styles: UnityEditor.LookDevEnvironmentWindow.Styles;
    // fields
    static m_latLongHeight: number;
    static m_HDRIHeaderHeight: number;
    static m_HDRIHeight: number;
    static m_HDRIWidth: number;
  }
}
declare namespace UnityEditor.LookDevEnvironmentWindow {
  class EnvSettingsWindow {
    // constructors
    constructor(lookDevView: UnityEditor.LookDevView, infos: UnityEditor.CubemapInfo);
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly styles: UnityEditor.LookDevEnvironmentWindow.EnvSettingsWindow.Styles;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.LookDevEnvironmentWindow.EnvSettingsWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sMenuItem: any;
    sSeparator: any;
    sEnvironment: any;
    sAngleOffset: any;
    sResetEnv: any;
    sShadows: any;
    sShadowIntensity: any;
    sShadowColor: any;
    sBrightest: any;
    sResetShadow: any;
  }
}
declare namespace UnityEditor.LookDevEnvironmentWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sTitle: any;
    sCloseIcon: any;
    sSeparatorStyle: any;
    sLabelStyleFirstContext: any;
    sLabelStyleSecondContext: any;
    sLabelStyleBothContext: any;
    sLightTexture: any;
    sLatlongFrameTexture: any;
    sEnvControlIcon: any;
    sDragAndDropHDRIText: any;
  }
}
declare namespace UnityEditor {
  class LookDevMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Single1: UnityEditor.LookDevMode;
    static Single2: UnityEditor.LookDevMode;
    static SideBySide: UnityEditor.LookDevMode;
    static Split: UnityEditor.LookDevMode;
    static Zone: UnityEditor.LookDevMode;
    static Count: UnityEditor.LookDevMode;
  }
}
declare namespace UnityEditor {
  class LookDevOperationType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.LookDevOperationType;
    static GizmoTranslation: UnityEditor.LookDevOperationType;
    static GizmoRotationZone1: UnityEditor.LookDevOperationType;
    static GizmoRotationZone2: UnityEditor.LookDevOperationType;
    static GizmoAll: UnityEditor.LookDevOperationType;
    static BlendFactor: UnityEditor.LookDevOperationType;
    static RotateLight: UnityEditor.LookDevOperationType;
    static RotateEnvironment: UnityEditor.LookDevOperationType;
  }
}
declare namespace UnityEditor {
  class LookDevProperty {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ExposureValue: UnityEditor.LookDevProperty;
    static HDRI: UnityEditor.LookDevProperty;
    static ShadingMode: UnityEditor.LookDevProperty;
    static EnvRotation: UnityEditor.LookDevProperty;
    static LoDIndex: UnityEditor.LookDevProperty;
    static Count: UnityEditor.LookDevProperty;
  }
}
declare namespace UnityEditor {
  class LookDevPropertyInfo {
    // constructors
    constructor(type: UnityEditor.LookDevPropertyType);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly propertyType: UnityEditor.LookDevPropertyType;
    linked: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class LookDevPropertyType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Int: UnityEditor.LookDevPropertyType;
    static Float: UnityEditor.LookDevPropertyType;
  }
}
declare namespace UnityEditor {
  class LookDevResources {
    // constructors
    constructor();
    // methods
    static Initialize(): void;
    static Cleanup(): void;
    static UpdateShadowInfoWithBrightestSpot(cubemapInfo: UnityEditor.CubemapInfo): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static m_ZeroAmbientProbe: any;
    static m_SkyboxMaterial: any;
    static m_GBufferPatchMaterial: any;
    static m_DrawBallsMaterial: any;
    static m_ScreenQuadMesh: any;
    static m_LookDevCompositing: any;
    static m_DeferredOverlayMaterial: any;
    static m_DefaultHDRI: any;
    static m_LookDevCubeToLatlong: any;
    static m_SelectionTexture: any;
    static m_BrightestPointRT: any;
    static m_BrightestPointTexture: any;
  }
}
declare namespace UnityEditor {
  class LookDevSettingsWindow {
    // constructors
    constructor(lookDevView: UnityEditor.LookDevView);
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly styles: UnityEditor.LookDevSettingsWindow.Styles;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.LookDevSettingsWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sMenuItem: any;
    sSeparator: any;
    sTitle: any;
    sMultiView: any;
    sCamera: any;
    sLighting: any;
    sAnimation: any;
    sViewport: any;
    sEnvLibrary: any;
    sMisc: any;
    sResetCamera: any;
    sCreateNewLibrary: any;
    sSaveCurrentLibrary: any;
    sResetView: any;
    sEnableToneMap: any;
    sEnableAutoExp: any;
    sExposureRange: any;
    sEnableShadows: any;
    sShadowDistance: any;
    sShowBalls: any;
    sShowControlWindows: any;
    sAllowDifferentObjects: any;
    sResyncObjects: any;
    sRotateObjectMode: any;
    sObjRotationSpeed: any;
    sRotateEnvMode: any;
    sEnvRotationSpeed: any;
    sEnableShadowIcon: any;
    sEnableObjRotationIcon: any;
    sEnableEnvRotationIcon: any;
    sEnableShadowTexture: any;
    sEnableObjRotationTexture: any;
    sEnableEnvRotationTexture: any;
    sMultiViewMode: any[];
    sMultiViewTextures: any[];
  }
}
declare namespace UnityEditor.LookDevSettingsWindow {
  class UINumElement {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static UINumDrawHeader: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumToggle: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumSlider: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumSeparator: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UINumButton: UnityEditor.LookDevSettingsWindow.UINumElement;
    static UITotalElement: UnityEditor.LookDevSettingsWindow.UINumElement;
  }
}
declare namespace UnityEditor {
  class LookDevView {
    // constructors
    constructor();
    // methods
    static DrawFullScreenQuad(previewRect: any): void;
    CreateNewLibrary(assetPath: string): void;
    static OpenInLookDevTool(go: any): void;
    OnDestroy(): void;
    UpdateLookDevModeToggle(lookDevMode: UnityEditor.LookDevMode, value: boolean): void;
    Update(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    ResetView(): void;
    SaveLookDevConfig(): void;
    SaveLookDevLibrary(): boolean;
    OnEnable(): void;
    OnDisable(): void;
    HandleKeyboardShortcut(): void;
    Frame(): void;
    Frame(animate: boolean): void;
    UpdateFocus(position: any): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly styles: UnityEditor.LookDevView.Styles;
    readonly hotControl: number;
    readonly config: UnityEditor.LookDevConfig;
    envLibrary: UnityEditor.LookDevEnvironmentLibrary;
    readonly userEnvLibrary: UnityEditor.LookDevEnvironmentLibrary;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static m_FirstViewGizmoColor: any;
    static m_SecondViewGizmoColor: any;
  }
}
declare namespace UnityEditor.LookDevView {
  class PreviewContext {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_PreviewUtility: UnityEditor.PreviewRenderUtility[];
    m_PreviewResult: any[];
    m_PreviewCB: UnityEditor.LookDevView.PreviewContextCB[];
  }
}
declare namespace UnityEditor.LookDevView.PreviewContext {
  class PreviewContextPass {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kView: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    static kViewWithShadow: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    static kShadow: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
    static kCount: UnityEditor.LookDevView.PreviewContext.PreviewContextPass;
  }
}
declare namespace UnityEditor.LookDevView {
  class PreviewContextCB {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_drawBallCB: any;
    m_patchGBufferCB: any;
    m_drawBallPB: any;
  }
}
declare namespace UnityEditor.LookDevView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sBigTitleInnerStyle: any;
    sToolBarButton: any;
    sSingleMode1: any;
    sSingleMode2: any;
    sSideBySideMode: any;
    sSplitMode: any;
    sZoneMode: any;
    sLinkActive: any;
    sLinkInactive: any;
    sDragAndDropObjsText: any;
    sPropertyLabelStyle: any[];
  }
}
declare namespace UnityEditor {
  class LookDevViewsWindow {
    // constructors
    constructor(lookDevView: UnityEditor.LookDevView);
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly styles: UnityEditor.LookDevViewsWindow.Styles;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.LookDevViewsWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sMenuItem: any;
    sHeaderStyle: any;
    sToolBarButton: any;
    sTitle: any;
    sExposure: any;
    sEnvironment: any;
    sRotation: any;
    sZero: any;
    sLoD: any;
    sLoDAuto: any;
    sShadingMode: any;
    sViewTitle: any[];
    sViewTitleStyles: any[];
    sShadingModeStrings: string[];
    sShadingModeValues: number[];
    sLinkActive: any;
    sLinkInactive: any;
  }
}
declare namespace UnityEditor {
  class MacFullscreenMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CaptureDisplay: UnityEditor.MacFullscreenMode;
    static FullscreenWindow: UnityEditor.MacFullscreenMode;
    static FullscreenWindowWithDockAndMenuBar: UnityEditor.MacFullscreenMode;
  }
}
declare namespace UnityEditor.Macros {
  class MacroEvaluator {
    // constructors
    private constructor();
    // methods
    static Eval(macro: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Macros.MacroEvaluator {
  class EditorEvaluationDomainProvider {
    // constructors
    constructor();
    // methods
    GetAssemblyReferences(): any[];
    GetImports(): string[];
    GetEvaluationDomain(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Macros.MethodEvaluator {
  class AssemblyResolver {
    // constructors
    constructor(assemblyDirectory: string);
    // methods
    AssemblyResolve(sender: any, args: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Macros {
  class MethodEvaluator {
    // constructors
    private constructor();
    // methods
    static Eval(assemblyFile: string, typeName: string, methodName: string, paramTypes: any[], args: any[]): any;
    static ExecuteExternalCode(parcel: string): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaintDatabaseRecord {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    name: string;
    dbName: string;
  }
}
declare namespace UnityEditor {
  class MaintUserRecord {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    enabled: number;
    userName: string;
    fullName: string;
    email: string;
  }
}
declare namespace UnityEditor {
  class MainView {
    // constructors
    constructor();
    // methods
    static MakeMain(): void;
    Cleanup(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ManagedEditorCodeRebuilder {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ManipulationTool {
    // constructors
    private constructor();
    // methods
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ManipulationToolUtility {
    // constructors
    constructor();
    // methods
    static SetMinDragDifferenceForPos(position: any): void;
    static DisableMinDragDifference(): void;
    static DisableMinDragDifferenceForAxis(axis: number): void;
    static DisableMinDragDifferenceBasedOnSnapping(positionBeforeSnapping: any, positionAfterSnapping: any): void;
    static BeginDragging(handleName: string): void;
    static EndDragging(handleName: string): void;
    static DetectDraggingBasedOnMouseDownUp(handleName: string, typeBefore: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static minDragDifference: any;
    // fields
    static handleDragChange: ((string, boolean) => void);
  }
}
declare namespace UnityEditor {
  class MaskFieldGUI {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.MaskFieldGUI {
  class MaskCallbackInfo {
    // constructors
    constructor(controlID: number);
    // methods
    static GetSelectedValueForControl(controlID: number, mask: number, changedFlags: any, changedToValue: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static m_Instance: UnityEditor.MaskFieldGUI.MaskCallbackInfo;
  }
}
declare namespace UnityEditor {
  class MaterialEditor {
    // constructors
    constructor();
    // methods
    SetShader(shader: any): void;
    SetShader(newShader: any, registerUndo: boolean): void;
    Awake(): void;
    OnInspectorGUI(): void;
    PropertiesChanged(): void;
    GetFloat(propertyName: string, hasMixedValue: any): number;
    SetFloat(propertyName: string, value: number): void;
    GetColor(propertyName: string, hasMixedValue: any): any;
    SetColor(propertyName: string, value: any): void;
    GetVector(propertyName: string, hasMixedValue: any): any;
    SetVector(propertyName: string, value: any): void;
    GetTexture(propertyName: string, hasMixedValue: any): any;
    SetTexture(propertyName: string, value: any): void;
    GetTextureScale(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    GetTextureOffset(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    SetTextureScale(propertyName: string, value: any, coord: number): void;
    SetTextureOffset(propertyName: string, value: any, coord: number): void;
    RangeProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    RangeProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    ColorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    ColorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureScaleOffsetProperty(property: UnityEditor.MaterialProperty): void;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty): number;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty, partOfTexturePropertyControl: boolean): number;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    HelpBoxWithButton(messageContent: any, buttonContent: any): boolean;
    TextureCompatibilityWarning(prop: UnityEditor.MaterialProperty): void;
    TexturePropertyMiniThumbnail(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string): any;
    GetTexturePropertyCustomArea(position: any): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string, scaleOffset: boolean): any;
    static TextureScaleOffsetProperty(position: any, scaleOffset: any): any;
    static TextureScaleOffsetProperty(position: any, scaleOffset: any, partOfTexturePropertyControl: boolean): any;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string): number;
    static GetDefaultPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    BeginAnimatedCheck(prop: UnityEditor.MaterialProperty): void;
    EndAnimatedCheck(): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    LightmapEmissionProperty(): void;
    LightmapEmissionProperty(labelIndent: number): void;
    LightmapEmissionProperty(position: any, labelIndent: number): void;
    DefaultShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    DefaultShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    RangeProperty(propertyName: string, label: string, v2: number, v3: number): number;
    FloatProperty(propertyName: string, label: string): number;
    ColorProperty(propertyName: string, label: string): any;
    VectorProperty(propertyName: string, label: string): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim, scaleOffset: boolean): any;
    ShaderProperty(shader: any, propertyIndex: number): void;
    static GetMaterialProperties(mats: any[]): UnityEditor.MaterialProperty[];
    static GetMaterialProperty(mats: any[], name: string): UnityEditor.MaterialProperty;
    static GetMaterialProperty(mats: any[], propertyIndex: number): UnityEditor.MaterialProperty;
    static PrepareMaterialPropertiesForAnimationMode(properties: UnityEditor.MaterialProperty[], isMaterialEditable: boolean): any;
    SetDefaultGUIWidths(): void;
    PropertiesGUI(): boolean;
    PropertiesDefaultGUI(props: UnityEditor.MaterialProperty[]): void;
    static ApplyMaterialPropertyDrawers(material: any): void;
    static ApplyMaterialPropertyDrawers(targets: any[]): void;
    RegisterPropertyChangeUndo(label: string): void;
    OnPreviewSettings(): void;
    DefaultPreviewSettingsGUI(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    RequiresConstantRepaint(): boolean;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    DefaultPreviewGUI(r: any, background: any): void;
    OnEnable(): void;
    UndoRedoPerformed(): void;
    OnDisable(): void;
    RenderQueueField(): void;
    RenderQueueField(r: any): void;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, extraProperty2: UnityEditor.MaterialProperty): any;
    TexturePropertyWithHDRColor(label: any, textureProp: UnityEditor.MaterialProperty, colorProperty: UnityEditor.MaterialProperty, hdrConfig: UnityEditor.ColorPickerHDRConfig, showAlpha: boolean): any;
    TexturePropertyTwoLines(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, label2: any, extraProperty2: UnityEditor.MaterialProperty): any;
    static GetRightAlignedFieldRect(r: any): any;
    static GetLeftAlignedFieldRect(r: any): any;
    static GetFlexibleRectBetweenLabelAndField(r: any): any;
    static GetFlexibleRectBetweenFieldAndRightEdge(r: any): any;
    static GetRectAfterLabelWidth(r: any): any;
    DrawDefaultInspector(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly isVisible: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static kMiniTextureFieldLabelIndentLevel: number;
  }
}
declare namespace UnityEditor.MaterialEditor {
  class ForwardApplyMaterialModification {
    // constructors
    constructor(r: any, inIsMaterialEditable: boolean);
    // methods
    DidModifyAnimationModeMaterialProperty(property: UnityEditor.MaterialProperty, changedMask: number, previousValue: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.MaterialEditor {
  class PreviewType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mesh: UnityEditor.MaterialEditor.PreviewType;
    static Plane: UnityEditor.MaterialEditor.PreviewType;
    static Skybox: UnityEditor.MaterialEditor.PreviewType;
  }
}
declare namespace UnityEditor.MaterialEditor {
  class ReflectionProbePicker {
    // constructors
    constructor();
    // methods
    GetWindowSize(): any;
    OnEnable(): void;
    OnDisable(): void;
    OnGUI(rc: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Target: any;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.MaterialEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kReflectionProbePickerStyle: any;
    static lightmapEmissiveStrings: string[];
    static lightmapEmissiveValues: number[];
    static lightmapEmissiveLabel: string;
    static propBlockWarning: string;
    static kCustomQueueValue: number;
    static queueLabel: any;
    static queueNames: any[];
    static queueValues: number[];
  }
}
declare namespace UnityEditor {
  class MaterialEnumDrawer {
    // constructors
    constructor(enumName: string);
    constructor(n1: string, v1: number);
    constructor(n1: string, v1: number, n2: string, v2: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number, n5: string, v5: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number, n5: string, v5: number, n6: string, v6: number);
    constructor(n1: string, v1: number, n2: string, v2: number, n3: string, v3: number, n4: string, v4: number, n5: string, v5: number, n6: string, v6: number, n7: string, v7: number);
    constructor(enumNames: string[], vals: number[]);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialHeaderDecorator {
    // constructors
    constructor(header: string);
    constructor(headerAsNumber: number);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialIntRangeDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    Apply(prop: UnityEditor.MaterialProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialKeywordEnumDrawer {
    // constructors
    constructor(kw1: string);
    constructor(kw1: string, kw2: string);
    constructor(kw1: string, kw2: string, kw3: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string, kw7: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string, kw7: string, kw8: string);
    constructor(kw1: string, kw2: string, kw3: string, kw4: string, kw5: string, kw6: string, kw7: string, kw8: string, kw9: string);
    constructor(keywords: string[]);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialPowerSliderDrawer {
    // constructors
    constructor(power: number);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialProperty {
    // constructors
    constructor();
    // methods
    ReadFromMaterialPropertyBlock(block: any): void;
    WriteToMaterialPropertyBlock(materialblock: any, changedPropertyMask: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly targets: any[];
    readonly type: UnityEditor.MaterialProperty.PropType;
    readonly name: string;
    readonly displayName: string;
    readonly flags: UnityEditor.MaterialProperty.PropFlags;
    readonly textureDimension: any;
    readonly rangeLimits: any;
    readonly hasMixedValue: boolean;
    applyPropertyCallback: ((UnityEditor.MaterialProperty, number, any) => boolean);
    colorValue: any;
    vectorValue: any;
    floatValue: number;
    textureValue: any;
    textureScaleAndOffset: any;
    // fields
  }
}
declare namespace UnityEditor.MaterialProperty {
  class PropFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.MaterialProperty.PropFlags;
    static HideInInspector: UnityEditor.MaterialProperty.PropFlags;
    static PerRendererData: UnityEditor.MaterialProperty.PropFlags;
    static NoScaleOffset: UnityEditor.MaterialProperty.PropFlags;
    static Normal: UnityEditor.MaterialProperty.PropFlags;
    static HDR: UnityEditor.MaterialProperty.PropFlags;
  }
}
declare namespace UnityEditor.MaterialProperty {
  class PropType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Color: UnityEditor.MaterialProperty.PropType;
    static Vector: UnityEditor.MaterialProperty.PropType;
    static Float: UnityEditor.MaterialProperty.PropType;
    static Range: UnityEditor.MaterialProperty.PropType;
    static Texture: UnityEditor.MaterialProperty.PropType;
  }
}
declare namespace UnityEditor.MaterialProperty {
  class TexDim {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unknown: UnityEditor.MaterialProperty.TexDim;
    static None: UnityEditor.MaterialProperty.TexDim;
    static Tex2D: UnityEditor.MaterialProperty.TexDim;
    static Tex3D: UnityEditor.MaterialProperty.TexDim;
    static Cube: UnityEditor.MaterialProperty.TexDim;
    static Any: UnityEditor.MaterialProperty.TexDim;
  }
}
declare namespace UnityEditor {
  class MaterialPropertyDrawer {
    // constructors
    private constructor();
    // methods
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    Apply(prop: UnityEditor.MaterialProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialPropertyHandler {
    // constructors
    constructor();
    // methods
    IsEmpty(): boolean;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly propertyDrawer: UnityEditor.MaterialPropertyDrawer;
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialSpaceDecorator {
    // constructors
    constructor();
    constructor(height: number);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialToggleDrawer {
    // constructors
    constructor();
    constructor(keyword: string);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaterialToggleOffDrawer {
    // constructors
    constructor();
    constructor(keyword: string);
    // methods
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): number;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: any, editor: UnityEditor.MaterialEditor): void;
    Apply(prop: UnityEditor.MaterialProperty): void;
    OnGUI(position: any, prop: UnityEditor.MaterialProperty, label: string, editor: UnityEditor.MaterialEditor): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MathUtils {
    // constructors
    constructor();
    // methods
    static GetQuatLength(q: any): number;
    static GetQuatConjugate(q: any): any;
    static OrthogonalizeMatrix(m: any): any;
    static QuaternionNormalize(q: any): void;
    static QuaternionFromMatrix(m: any): any;
    static GetQuatLog(q: any): any;
    static GetQuatExp(q: any): any;
    static GetQuatSquad(t: number, q0: any, q1: any, a0: any, a1: any): any;
    static GetSquadIntermediate(q0: any, q1: any, q2: any): any;
    static Ease(t: number, k1: number, k2: number): number;
    static Slerp(p: any, q: any, t: number): any;
    static IntersectRayTriangle(ray: any, v0: any, v1: any, v2: any, bidirectional: boolean): any;
    static ClosestPtSegmentRay(p1: any, q1: any, ray: any, squaredDist: any, s: any, closestRay: any): any;
    static IntersectRaySphere(ray: any, sphereOrigin: any, sphereRadius: number, t: any, q: any): boolean;
    static ClosestPtRaySphere(ray: any, sphereOrigin: any, sphereRadius: number, t: any, q: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MaximizedHostView {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    OnEnable(): void;
    OnDestroy(): void;
    InvokeOnGUI(onGUIPosition: any): void;
    PopupGenericMenu(view: UnityEditor.EditorWindow, pos: any): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MemoryElement {
    // constructors
    constructor();
    constructor(n: string);
    constructor(memInfo: UnityEditor.ObjectInfo, finalize: boolean);
    constructor(n: string, groups: any);
    // methods
    ExpandChildren(): void;
    AccumulatedChildCount(): number;
    ChildCount(): number;
    ReferenceCount(): number;
    AddChild(node: UnityEditor.MemoryElement): void;
    GetChildIndexInList(): number;
    GetPrevNode(): UnityEditor.MemoryElement;
    GetNextNode(): UnityEditor.MemoryElement;
    GetRoot(): UnityEditor.MemoryElement;
    FirstChild(): UnityEditor.MemoryElement;
    LastChild(): UnityEditor.MemoryElement;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    children: any;
    parent: UnityEditor.MemoryElement;
    memoryInfo: UnityEditor.ObjectInfo;
    totalMemory: number;
    totalChildCount: number;
    name: string;
    expanded: boolean;
    description: string;
  }
}
declare namespace UnityEditor {
  class MemoryElementDataManager {
    // constructors
    constructor();
    // methods
    static GetTreeRoot(memoryObjectList: UnityEditorInternal.ObjectMemoryInfo[], referencesIndices: number[]): UnityEditor.MemoryElement;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.MemoryElementDataManager {
  class ObjectTypeFilter {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Scene: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static Asset: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static BuiltinResource: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static DontSave: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
    static Other: UnityEditor.MemoryElementDataManager.ObjectTypeFilter;
  }
}
declare namespace UnityEditor {
  class MemoryElementSelection {
    // constructors
    constructor();
    // methods
    SetSelection(node: UnityEditor.MemoryElement): void;
    ClearSelection(): void;
    isSelected(node: UnityEditor.MemoryElement): boolean;
    MoveUp(): void;
    MoveDown(): void;
    MoveFirst(): void;
    MoveLast(): void;
    MoveParent(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Selected: UnityEditor.MemoryElement;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class Connection {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    from: number;
    to: number;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class FieldDescription {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly name: string;
    readonly offset: number;
    readonly typeIndex: number;
    readonly isStatic: boolean;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class MemorySection {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly bytes: number[];
    readonly startAddress: number;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class MemorySnapshot {
    // constructors
    private constructor();
    // methods
    static RequestNewSnapshot(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedGCHandle {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly target: number;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedMemorySnapshot {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly nativeTypes: UnityEditor.MemoryProfiler.PackedNativeType[];
    readonly nativeObjects: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject[];
    readonly gcHandles: UnityEditor.MemoryProfiler.PackedGCHandle[];
    readonly connections: UnityEditor.MemoryProfiler.Connection[];
    readonly managedHeapSections: UnityEditor.MemoryProfiler.MemorySection[];
    readonly typeDescriptions: UnityEditor.MemoryProfiler.TypeDescription[];
    readonly virtualMachineInformation: UnityEditor.MemoryProfiler.VirtualMachineInformation;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedNativeType {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly name: string;
    readonly baseClassId: number;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class PackedNativeUnityEngineObject {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly isPersistent: boolean;
    readonly isDontDestroyOnLoad: boolean;
    readonly isManager: boolean;
    readonly name: string;
    readonly instanceId: number;
    readonly size: number;
    readonly classId: number;
    readonly hideFlags: any;
    readonly nativeObjectAddress: number;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject {
  class ObjectFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static IsDontDestroyOnLoad: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags;
    static IsPersistent: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags;
    static IsManager: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class TypeDescription {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly isValueType: boolean;
    readonly isArray: boolean;
    readonly arrayRank: number;
    readonly name: string;
    readonly assembly: string;
    readonly fields: UnityEditor.MemoryProfiler.FieldDescription[];
    readonly staticFieldBytes: number[];
    readonly baseOrElementTypeIndex: number;
    readonly size: number;
    readonly typeInfoAddress: number;
    readonly typeIndex: number;
    // fields
  }
}
declare namespace UnityEditor.MemoryProfiler.TypeDescription {
  class TypeFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kNone: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    static kValueType: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    static kArray: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
    static kArrayRankMask: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags;
  }
}
declare namespace UnityEditor.MemoryProfiler {
  class VirtualMachineInformation {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly pointerSize: number;
    readonly objectHeaderSize: number;
    readonly arrayHeaderSize: number;
    readonly arrayBoundsOffsetInHeader: number;
    readonly arraySizeOffsetInHeader: number;
    readonly allocationGranularity: number;
    readonly heapFormatVersion: number;
    // fields
  }
}
declare namespace UnityEditor {
  class MemoryTreeList {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, detailview: UnityEditor.MemoryTreeList);
    // methods
    OnGUI(): void;
    SetRoot(root: UnityEditor.MemoryElement): void;
    GetRoot(): UnityEditor.MemoryElement;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    RequiresRefresh: boolean;
    // fields
    m_MemorySelection: UnityEditor.MemoryElementSelection;
  }
}
declare namespace UnityEditor.MemoryTreeList {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    header: any;
    entryEven: any;
    entryOdd: any;
    numberLabel: any;
    foldout: any;
  }
}
declare namespace UnityEditor {
  class MemoryTreeListClickable {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, detailview: UnityEditor.MemoryTreeList);
    // methods
    OnGUI(): void;
    SetRoot(root: UnityEditor.MemoryElement): void;
    GetRoot(): UnityEditor.MemoryElement;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    RequiresRefresh: boolean;
    // fields
    m_MemorySelection: UnityEditor.MemoryElementSelection;
  }
}
declare namespace UnityEditor {
  class Menu {
    // constructors
    constructor();
    // methods
    static SetChecked(menuPath: string, isChecked: boolean): void;
    static GetChecked(menuPath: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MenuCommand {
    // constructors
    constructor(inContext: any, inUserData: number);
    constructor(inContext: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    context: any;
    userData: number;
  }
}
declare namespace UnityEditor {
  class MenuItem {
    // constructors
    constructor(itemName: string);
    constructor(itemName: string, isValidateFunction: boolean);
    constructor(itemName: string, isValidateFunction: boolean, priority: number);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
    menuItem: string;
    validate: boolean;
    priority: number;
  }
}
declare namespace UnityEditor {
  class MenuUtils {
    // constructors
    constructor();
    // methods
    static MenuCallback(callbackObject: any): void;
    static ExtractSubMenuWithPath(path: string, menu: UnityEditor.GenericMenu, replacementPath: string, temporaryContext: any[]): void;
    static ExtractMenuItemWithPath(menuString: string, menu: UnityEditor.GenericMenu, replacementMenuString: string, temporaryContext: any[], userData: number, onBeforeExecuteCallback: ((string, any[], number) => void), onAfterExecuteCallback: ((string, any[], number) => void)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.MenuUtils {
  class MenuCallbackObject {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    menuItemPath: string;
    temporaryContext: any[];
    onBeforeExecuteCallback: ((string, any[], number) => void);
    onAfterExecuteCallback: ((string, any[], number) => void);
    userData: number;
  }
}
declare namespace UnityEditor {
  class MeshColliderEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.MeshColliderEditor {
  class Texts {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static isTriggerText: any;
    static convextText: any;
    static inflateMeshText: any;
    static skinWidthText: any;
  }
}
declare namespace UnityEditor {
  class MeshRendererEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MeshUtility {
    // constructors
    constructor();
    // methods
    static SetPerTriangleUV2(src: any, triUV: any[]): void;
    static SetMeshCompression(mesh: any, compression: UnityEditor.ModelImporterMeshCompression): void;
    static GetMeshCompression(mesh: any): UnityEditor.ModelImporterMeshCompression;
    static Optimize(mesh: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MessageType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.MessageType;
    static Info: UnityEditor.MessageType;
    static Warning: UnityEditor.MessageType;
    static Error: UnityEditor.MessageType;
  }
}
declare namespace UnityEditor {
  class MetroCertificatePasswordWindow {
    // constructors
    constructor();
    // methods
    static Show(path: string): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MetroCreateTestCertificateWindow {
    // constructors
    constructor();
    // methods
    static Show(publisher: string): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MinMaxCurveState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static k_Scalar: UnityEditor.MinMaxCurveState;
    static k_Curve: UnityEditor.MinMaxCurveState;
    static k_TwoCurves: UnityEditor.MinMaxCurveState;
    static k_TwoScalars: UnityEditor.MinMaxCurveState;
  }
}
declare namespace UnityEditor {
  class MinMaxGradientState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static k_Color: UnityEditor.MinMaxGradientState;
    static k_Gradient: UnityEditor.MinMaxGradientState;
    static k_RandomBetweenTwoColors: UnityEditor.MinMaxGradientState;
    static k_RandomBetweenTwoGradients: UnityEditor.MinMaxGradientState;
    static k_RandomColor: UnityEditor.MinMaxGradientState;
  }
}
declare namespace UnityEditor {
  class MobileTextureSubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Generic: UnityEditor.MobileTextureSubtarget;
    static DXT: UnityEditor.MobileTextureSubtarget;
    static PVRTC: UnityEditor.MobileTextureSubtarget;
    static ATC: UnityEditor.MobileTextureSubtarget;
    static ETC: UnityEditor.MobileTextureSubtarget;
    static ETC2: UnityEditor.MobileTextureSubtarget;
    static ASTC: UnityEditor.MobileTextureSubtarget;
  }
}
declare namespace UnityEditor {
  class ModelImporter {
    // constructors
    constructor();
    // methods
    CreateDefaultMaskForClip(clip: UnityEditor.ModelImporterClipAnimation): void;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    generateMaterials: UnityEditor.ModelImporterGenerateMaterials;
    importMaterials: boolean;
    materialName: UnityEditor.ModelImporterMaterialName;
    materialSearch: UnityEditor.ModelImporterMaterialSearch;
    globalScale: number;
    readonly isUseFileUnitsSupported: boolean;
    useFileUnits: boolean;
    readonly fileScale: number;
    readonly isFileScaleUsed: boolean;
    importBlendShapes: boolean;
    addCollider: boolean;
    normalSmoothingAngle: number;
    splitTangentsAcrossSeams: boolean;
    swapUVChannels: boolean;
    generateSecondaryUV: boolean;
    secondaryUVAngleDistortion: number;
    secondaryUVAreaDistortion: number;
    secondaryUVHardAngle: number;
    secondaryUVPackMargin: number;
    generateAnimations: UnityEditor.ModelImporterGenerateAnimations;
    readonly importedTakeInfos: UnityEditor.TakeInfo[];
    readonly transformPaths: string[];
    readonly referencedClips: string[];
    isReadable: boolean;
    optimizeMesh: boolean;
    normalImportMode: UnityEditor.ModelImporterTangentSpaceMode;
    tangentImportMode: UnityEditor.ModelImporterTangentSpaceMode;
    importNormals: UnityEditor.ModelImporterNormals;
    importTangents: UnityEditor.ModelImporterTangents;
    bakeIK: boolean;
    readonly isBakeIKSupported: boolean;
    resampleRotations: boolean;
    resampleCurves: boolean;
    readonly isTangentImportSupported: boolean;
    meshCompression: UnityEditor.ModelImporterMeshCompression;
    importAnimation: boolean;
    optimizeGameObjects: boolean;
    extraExposedTransformPaths: string[];
    animationCompression: UnityEditor.ModelImporterAnimationCompression;
    animationRotationError: number;
    animationPositionError: number;
    animationScaleError: number;
    animationWrapMode: any;
    animationType: UnityEditor.ModelImporterAnimationType;
    humanoidOversampling: UnityEditor.ModelImporterHumanoidOversampling;
    motionNodeName: string;
    sourceAvatar: any;
    humanDescription: any;
    splitAnimations: boolean;
    clipAnimations: UnityEditor.ModelImporterClipAnimation[];
    readonly defaultClipAnimations: UnityEditor.ModelImporterClipAnimation[];
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ModelImporterAnimationCompression {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Off: UnityEditor.ModelImporterAnimationCompression;
    static KeyframeReduction: UnityEditor.ModelImporterAnimationCompression;
    static KeyframeReductionAndCompression: UnityEditor.ModelImporterAnimationCompression;
    static Optimal: UnityEditor.ModelImporterAnimationCompression;
  }
}
declare namespace UnityEditor {
  class ModelImporterAnimationType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ModelImporterAnimationType;
    static Legacy: UnityEditor.ModelImporterAnimationType;
    static Generic: UnityEditor.ModelImporterAnimationType;
    static Human: UnityEditor.ModelImporterAnimationType;
  }
}
declare namespace UnityEditor {
  class ModelImporterClipAnimation {
    // constructors
    constructor();
    // methods
    ConfigureMaskFromClip(mask: any): void;
    ConfigureClipFromMask(mask: UnityEditor.Animations.AvatarMask): void;
    Equals(o: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    takeName: string;
    name: string;
    firstFrame: number;
    lastFrame: number;
    wrapMode: any;
    loop: boolean;
    rotationOffset: number;
    heightOffset: number;
    cycleOffset: number;
    loopTime: boolean;
    loopPose: boolean;
    lockRootRotation: boolean;
    lockRootHeightY: boolean;
    lockRootPositionXZ: boolean;
    keepOriginalOrientation: boolean;
    keepOriginalPositionY: boolean;
    keepOriginalPositionXZ: boolean;
    heightFromFeet: boolean;
    mirror: boolean;
    maskType: UnityEditor.ClipAnimationMaskType;
    maskSource: UnityEditor.Animations.AvatarMask;
    events: any[];
    curves: UnityEditor.ClipAnimationInfoCurve[];
    readonly maskNeedsUpdating: boolean;
    additiveReferencePoseFrame: number;
    hasAdditiveReferencePose: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class ModelImporterClipEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDestroy(): void;
    OnInspectorGUI(): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    selectedClipIndex: number;
    motionNodeIndex: number;
    pivotNodeIndex: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    m_SelectedClipIndexDoNotUseDirectly: number;
  }
}
declare namespace UnityEditor.ModelImporterClipEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ImportAnimations: any;
    numberStyle: any;
    AnimWrapModeLabel: any;
    AnimWrapModeOpt: any[];
    BakeIK: any;
    ResampleCurves: any;
    AnimCompressionLabel: any;
    AnimCompressionOptLegacy: any[];
    AnimCompressionOpt: any[];
    AnimRotationErrorLabel: any;
    AnimPositionErrorLabel: any;
    AnimScaleErrorLabel: any;
    AnimationCompressionHelp: any;
    clipMultiEditInfo: any;
    updateMuscleDefinitionFromSource: any;
    MotionSetting: any;
    MotionNode: any;
    ImportMessages: any;
    GenerateRetargetingWarnings: any;
    Mask: any;
  }
}
declare namespace UnityEditor {
  class ModelImporterEditor {
    // constructors
    constructor();
    // methods
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly activeEditor: UnityEditor.AssetImporterInspector;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ModelImporterGenerateAnimations {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ModelImporterGenerateAnimations;
    static GenerateAnimations: UnityEditor.ModelImporterGenerateAnimations;
    static InRoot: UnityEditor.ModelImporterGenerateAnimations;
    static InOriginalRoots: UnityEditor.ModelImporterGenerateAnimations;
    static InNodes: UnityEditor.ModelImporterGenerateAnimations;
  }
}
declare namespace UnityEditor {
  class ModelImporterGenerateMaterials {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ModelImporterGenerateMaterials;
    static PerTexture: UnityEditor.ModelImporterGenerateMaterials;
    static PerSourceMaterial: UnityEditor.ModelImporterGenerateMaterials;
  }
}
declare namespace UnityEditor {
  class ModelImporterHumanoidOversampling {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static X1: UnityEditor.ModelImporterHumanoidOversampling;
    static X2: UnityEditor.ModelImporterHumanoidOversampling;
    static X4: UnityEditor.ModelImporterHumanoidOversampling;
    static X8: UnityEditor.ModelImporterHumanoidOversampling;
  }
}
declare namespace UnityEditor {
  class ModelImporterMaterialName {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BasedOnTextureName: UnityEditor.ModelImporterMaterialName;
    static BasedOnMaterialName: UnityEditor.ModelImporterMaterialName;
    static BasedOnModelNameAndMaterialName: UnityEditor.ModelImporterMaterialName;
    static BasedOnTextureName_Or_ModelNameAndMaterialName: UnityEditor.ModelImporterMaterialName;
  }
}
declare namespace UnityEditor {
  class ModelImporterMaterialSearch {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Local: UnityEditor.ModelImporterMaterialSearch;
    static RecursiveUp: UnityEditor.ModelImporterMaterialSearch;
    static Everywhere: UnityEditor.ModelImporterMaterialSearch;
  }
}
declare namespace UnityEditor {
  class ModelImporterMeshCompression {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Off: UnityEditor.ModelImporterMeshCompression;
    static Low: UnityEditor.ModelImporterMeshCompression;
    static Medium: UnityEditor.ModelImporterMeshCompression;
    static High: UnityEditor.ModelImporterMeshCompression;
  }
}
declare namespace UnityEditor {
  class ModelImporterModelEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ModelImporterModelEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    Meshes: any;
    ScaleFactor: any;
    UseFileUnits: any;
    FileScaleFactor: any;
    ImportBlendShapes: any;
    GenerateColliders: any;
    SwapUVChannels: any;
    GenerateSecondaryUV: any;
    GenerateSecondaryUVAdvanced: any;
    secondaryUVAngleDistortion: any;
    secondaryUVAreaDistortion: any;
    secondaryUVHardAngle: any;
    secondaryUVPackMargin: any;
    secondaryUVDefaults: any;
    TangentSpace: any;
    TangentSpaceNormalLabel: any;
    TangentSpaceTangentLabel: any;
    TangentSpaceOptionImport: any;
    TangentSpaceOptionCalculateLegacy: any;
    TangentSpaceOptionCalculateLegacySplit: any;
    TangentSpaceOptionCalculate: any;
    TangentSpaceOptionNone: any;
    TangentSpaceOptionNoneNoNormals: any;
    NormalOptionImport: any;
    NormalOptionCalculate: any;
    NormalOptionNone: any;
    TangentSpaceModeOptLabelsAll: any[];
    TangentSpaceModeOptLabelsCalculate: any[];
    TangentSpaceModeOptLabelsNone: any[];
    NormalModeLabelsAll: any[];
    TangentSpaceModeOptEnumsAll: UnityEditor.ModelImporterTangents[];
    TangentSpaceModeOptEnumsCalculate: UnityEditor.ModelImporterTangents[];
    TangentSpaceModeOptEnumsNone: UnityEditor.ModelImporterTangents[];
    SmoothingAngle: any;
    MeshCompressionLabel: any;
    MeshCompressionOpt: any[];
    OptimizeMeshForGPU: any;
    KeepQuads: any;
    IsReadable: any;
    Materials: any;
    ImportMaterials: any;
    MaterialName: any;
    MaterialNameTex: any;
    MaterialNameMat: any;
    MaterialNameOptMain: any[];
    MaterialNameOptAll: any[];
    MaterialSearch: any;
    MaterialSearchOpt: any[];
    MaterialHelpStart: any;
    MaterialHelpEnd: any;
    MaterialHelpDefault: any;
    MaterialNameHelp: any[];
    MaterialSearchHelp: any[];
  }
}
declare namespace UnityEditor {
  class ModelImporterNormals {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Import: UnityEditor.ModelImporterNormals;
    static Calculate: UnityEditor.ModelImporterNormals;
    static None: UnityEditor.ModelImporterNormals;
  }
}
declare namespace UnityEditor {
  class ModelImporterRigEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    rootIndex: number;
    readonly isLocked: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    m_SelectedClipIndex: number;
  }
}
declare namespace UnityEditor.ModelImporterRigEditor {
  class MappingRelevantSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly usesOwnAvatar: boolean;
    // fields
    humanoid: boolean;
    copyAvatar: boolean;
    hasNoAnimation: boolean;
  }
}
declare namespace UnityEditor.ModelImporterRigEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    AnimationType: any;
    AnimationTypeOpt: any[];
    AnimLabel: any;
    AnimationsOpt: any[];
    helpText: any;
    avatar: any;
    configureAvatar: any;
    avatarValid: any;
    avatarInvalid: any;
    avatarPending: any;
    UpdateMuscleDefinitionFromSource: any;
    RootNode: any;
    AvatarDefinition: any;
    AvatarDefinitionOpt: any[];
    UpdateReferenceClips: any;
  }
}
declare namespace UnityEditor {
  class ModelImporterTangents {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Import: UnityEditor.ModelImporterTangents;
    static CalculateLegacy: UnityEditor.ModelImporterTangents;
    static CalculateLegacyWithSplitTangents: UnityEditor.ModelImporterTangents;
    static CalculateMikk: UnityEditor.ModelImporterTangents;
    static None: UnityEditor.ModelImporterTangents;
  }
}
declare namespace UnityEditor {
  class ModelImporterTangentSpaceMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Import: UnityEditor.ModelImporterTangentSpaceMode;
    static Calculate: UnityEditor.ModelImporterTangentSpaceMode;
    static None: UnityEditor.ModelImporterTangentSpaceMode;
  }
}
declare namespace UnityEditor {
  class ModelInspector {
    // constructors
    constructor();
    // methods
    OnPreviewSettings(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    OnDestroy(): void;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    previewDir: any;
  }
}
declare namespace UnityEditor.Modules {
  class BuildLaunchPlayerArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    target: UnityEditor.BuildTarget;
    playerPackage: string;
    installPath: string;
    productName: string;
    options: UnityEditor.BuildOptions;
  }
}
declare namespace UnityEditor.Modules {
  class BuildPostProcessArgs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    target: UnityEditor.BuildTarget;
    stagingArea: string;
    stagingAreaData: string;
    stagingAreaDataManaged: string;
    playerPackage: string;
    installPath: string;
    companyName: string;
    productName: string;
    productGUID: any;
    options: UnityEditor.BuildOptions;
    report: UnityEditor.BuildReporting.BuildReport;
  }
}
declare namespace UnityEditor.Modules {
  class CSharpCompiler {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mono: UnityEditor.Modules.CSharpCompiler;
    static Microsoft: UnityEditor.Modules.CSharpCompiler;
  }
}
declare namespace UnityEditor.Modules {
  class CSharpProject {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    Path: string;
    Guid: any;
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultBuildPostprocessor {
    // constructors
    private constructor();
    // methods
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    SupportsInstallInBuildFolder(): boolean;
    PostProcessScriptsOnly(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    SupportsScriptsOnlyBuild(): boolean;
    GetScriptLayoutFileFromBuild(options: UnityEditor.BuildOptions, installPath: string, fileName: string): string;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultBuildWindowExtension {
    // constructors
    constructor();
    // methods
    ShowPlatformBuildOptions(): void;
    ShowInternalPlatformBuildOptions(): void;
    EnabledBuildButton(): boolean;
    EnabledBuildAndRunButton(): boolean;
    ShouldDrawScriptDebuggingCheckbox(): boolean;
    ShouldDrawProfilerCheckbox(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShouldDrawExplicitNullCheckbox(): boolean;
    ShouldDrawExplicitDivideByZeroCheckbox(): boolean;
    ShouldDrawForceOptimizeScriptsCheckbox(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultCompilationExtension {
    // constructors
    constructor();
    // methods
    GetCsCompiler(buildingForEditor: boolean, assemblyName: string): UnityEditor.Modules.CSharpCompiler;
    GetCompilerExtraAssemblyPaths(isEditor: boolean, assemblyPathName: string): string[];
    GetAssemblyResolver(buildingForEditor: boolean, assemblyPath: string, searchDirectories: string[]): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultPlatformSupportModule {
    // constructors
    private constructor();
    // methods
    GetDisplayNames(): any[];
    CreateBuildAnalyzer(): UnityEditor.Modules.IBuildAnalyzer;
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    CreateSettingsEditorExtension(): UnityEditor.Modules.ISettingEditorExtension;
    CreatePreferenceWindowExtension(): UnityEditor.Modules.IPreferenceWindowExtension;
    CreateTextureImportSettingsExtension(): UnityEditor.Modules.ITextureImportSettingsExtension;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreateCompilationExtension(): UnityEditor.Modules.ICompilationExtension;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreateUserAssembliesValidatorExtension(): UnityEditor.Modules.IUserAssembliesValidator;
    CreateProjectGeneratorExtension(): UnityEditor.Modules.IProjectGeneratorExtension;
    RegisterAdditionalUnityExtensions(): void;
    CreateDevice(id: string): UnityEditor.Modules.IDevice;
    OnActivate(): void;
    OnDeactivate(): void;
    OnLoad(): void;
    OnUnload(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TargetName: string;
    readonly JamTarget: string;
    readonly ExtensionVersion: string;
    readonly NativeLibraries: string[];
    readonly AssemblyReferencesForUserScripts: string[];
    readonly AssemblyReferencesForEditorCsharpProject: string[];
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultPlayerSettingsEditorExtension {
    // constructors
    private constructor();
    // methods
    OnEnable(settingsEditor: UnityEditor.PlayerSettingsEditor): void;
    HasPublishSection(): boolean;
    PublishSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    HasIdentificationGUI(): boolean;
    IdentificationSectionGUI(): void;
    ConfigurationSectionGUI(): void;
    SupportsOrientation(): boolean;
    CanShowUnitySplashScreen(): boolean;
    SplashSectionGUI(): void;
    UsesStandardIcons(): boolean;
    IconSectionGUI(): void;
    HasResolutionSection(): boolean;
    SupportsStaticBatching(): boolean;
    SupportsDynamicBatching(): boolean;
    ResolutionSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    HasBundleIdentifier(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultPluginImporterExtension {
    // constructors
    constructor(properties: UnityEditor.Modules.DefaultPluginImporterExtension.Property[]);
    // methods
    ResetValues(inspector: UnityEditor.PluginImporterInspector): void;
    HasModified(inspector: UnityEditor.PluginImporterInspector): boolean;
    Apply(inspector: UnityEditor.PluginImporterInspector): void;
    OnEnable(inspector: UnityEditor.PluginImporterInspector): void;
    OnDisable(inspector: UnityEditor.PluginImporterInspector): void;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    CalculateFinalPluginPath(platformName: string, imp: UnityEditor.PluginImporter): string;
    CheckFileCollisions(buildTargetName: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules.DefaultPluginImporterExtension {
  class Property {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultProjectGeneratorExtension {
    // constructors
    private constructor();
    // methods
    GenerateCSharpProject(project: UnityEditor.Modules.CSharpProject, assemblyName: string, sourceFiles: any, defines: any, additionalProjectReferences: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class DefaultTextureImportSettingsExtension {
    // constructors
    constructor();
    // methods
    ShowImportSettings(baseEditor: UnityEditor.Editor, platformSettings: UnityEditor.TextureImportPlatformSettings): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IBuildAnalyzer {
    // constructors
    private constructor();
    // methods
    OnAddedExecutable(report: UnityEditor.BuildReporting.BuildReport, fileIndex: number): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IBuildPostprocessor {
    // constructors
    private constructor();
    // methods
    LaunchPlayer(args: UnityEditor.Modules.BuildLaunchPlayerArgs): void;
    PostProcess(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    SupportsInstallInBuildFolder(): boolean;
    PostProcessScriptsOnly(args: UnityEditor.Modules.BuildPostProcessArgs): void;
    SupportsScriptsOnlyBuild(): boolean;
    GetScriptLayoutFileFromBuild(options: UnityEditor.BuildOptions, installPath: string, fileName: string): string;
    PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    GetExtension(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IBuildWindowExtension {
    // constructors
    private constructor();
    // methods
    ShowPlatformBuildOptions(): void;
    ShowInternalPlatformBuildOptions(): void;
    EnabledBuildButton(): boolean;
    EnabledBuildAndRunButton(): boolean;
    ShouldDrawScriptDebuggingCheckbox(): boolean;
    ShouldDrawProfilerCheckbox(): boolean;
    ShouldDrawDevelopmentPlayerCheckbox(): boolean;
    ShouldDrawExplicitNullCheckbox(): boolean;
    ShouldDrawExplicitDivideByZeroCheckbox(): boolean;
    ShouldDrawForceOptimizeScriptsCheckbox(): boolean;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class ICompilationExtension {
    // constructors
    private constructor();
    // methods
    GetCsCompiler(buildingForEditor: boolean, assemblyName: string): UnityEditor.Modules.CSharpCompiler;
    GetCompilerExtraAssemblyPaths(isEditor: boolean, assemblyPathName: string): string[];
    GetAssemblyResolver(buildingForEditor: boolean, assemblyPath: string, searchDirectories: string[]): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IDevice {
    // constructors
    private constructor();
    // methods
    StartRemoteSupport(): UnityEditor.Modules.RemoteAddress;
    StopRemoteSupport(): void;
    StartPlayerConnectionSupport(): UnityEditor.Modules.RemoteAddress;
    StopPlayerConnectionSupport(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IPlatformSupportModule {
    // constructors
    private constructor();
    // methods
    GetDisplayNames(): any[];
    CreateBuildPostprocessor(): UnityEditor.Modules.IBuildPostprocessor;
    CreateScriptingImplementations(): UnityEditor.Modules.IScriptingImplementations;
    CreateSettingsEditorExtension(): UnityEditor.Modules.ISettingEditorExtension;
    CreatePreferenceWindowExtension(): UnityEditor.Modules.IPreferenceWindowExtension;
    CreateBuildWindowExtension(): UnityEditor.Modules.IBuildWindowExtension;
    CreateCompilationExtension(): UnityEditor.Modules.ICompilationExtension;
    CreateTextureImportSettingsExtension(): UnityEditor.Modules.ITextureImportSettingsExtension;
    CreatePluginImporterExtension(): UnityEditor.Modules.IPluginImporterExtension;
    CreateBuildAnalyzer(): UnityEditor.Modules.IBuildAnalyzer;
    CreateUserAssembliesValidatorExtension(): UnityEditor.Modules.IUserAssembliesValidator;
    CreateProjectGeneratorExtension(): UnityEditor.Modules.IProjectGeneratorExtension;
    RegisterAdditionalUnityExtensions(): void;
    CreateDevice(id: string): UnityEditor.Modules.IDevice;
    OnActivate(): void;
    OnDeactivate(): void;
    OnLoad(): void;
    OnUnload(): void;
    // properties
    readonly TargetName: string;
    readonly JamTarget: string;
    readonly NativeLibraries: string[];
    readonly AssemblyReferencesForUserScripts: string[];
    readonly AssemblyReferencesForEditorCsharpProject: string[];
    readonly ExtensionVersion: string;
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IPluginImporterExtension {
    // constructors
    private constructor();
    // methods
    ResetValues(inspector: UnityEditor.PluginImporterInspector): void;
    HasModified(inspector: UnityEditor.PluginImporterInspector): boolean;
    Apply(inspector: UnityEditor.PluginImporterInspector): void;
    OnEnable(inspector: UnityEditor.PluginImporterInspector): void;
    OnDisable(inspector: UnityEditor.PluginImporterInspector): void;
    OnPlatformSettingsGUI(inspector: UnityEditor.PluginImporterInspector): void;
    CalculateFinalPluginPath(buildTargetName: string, imp: UnityEditor.PluginImporter): string;
    CheckFileCollisions(buildTargetName: string): boolean;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IPreferenceWindowExtension {
    // constructors
    private constructor();
    // methods
    ReadPreferences(): void;
    WritePreferences(): void;
    HasExternalApplications(): boolean;
    ShowExternalApplications(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IProjectGeneratorExtension {
    // constructors
    private constructor();
    // methods
    GenerateCSharpProject(project: UnityEditor.Modules.CSharpProject, assemblyName: string, sourceFiles: any, defines: any, additionalProjectReferences: any): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IScriptingImplementations {
    // constructors
    private constructor();
    // methods
    Supported(): UnityEditor.ScriptingImplementation[];
    Enabled(): UnityEditor.ScriptingImplementation[];
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class ISettingEditorExtension {
    // constructors
    private constructor();
    // methods
    OnEnable(settingsEditor: UnityEditor.PlayerSettingsEditor): void;
    HasPublishSection(): boolean;
    PublishSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    HasIdentificationGUI(): boolean;
    IdentificationSectionGUI(): void;
    ConfigurationSectionGUI(): void;
    SupportsOrientation(): boolean;
    SupportsStaticBatching(): boolean;
    SupportsDynamicBatching(): boolean;
    CanShowUnitySplashScreen(): boolean;
    SplashSectionGUI(): void;
    UsesStandardIcons(): boolean;
    IconSectionGUI(): void;
    HasResolutionSection(): boolean;
    ResolutionSectionGUI(h: number, midWidth: number, maxWidth: number): void;
    HasBundleIdentifier(): boolean;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class ITextureImportSettingsExtension {
    // constructors
    private constructor();
    // methods
    ShowImportSettings(baseEditor: UnityEditor.Editor, platformSettings: UnityEditor.TextureImportPlatformSettings): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class IUserAssembliesValidator {
    // constructors
    private constructor();
    // methods
    Validate(userAssemblies: string[]): void;
    Cleanup(): void;
    // properties
    readonly canRunInBackground: boolean;
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class ModuleManager {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class ModuleUtils {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Modules {
  class RemoteAddress {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    ip: string;
    port: number;
  }
}
declare namespace UnityEditor.ModuleUI {
  class ColorCallbackData {
    // constructors
    constructor(state: boolean, bp: UnityEditor.SerializedProperty);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    boolProp: UnityEditor.SerializedProperty;
    selectedState: boolean;
  }
}
declare namespace UnityEditor.ModuleUI {
  class CurveStateCallbackData {
    // constructors
    constructor(state: UnityEditor.MinMaxCurveState, curves: UnityEditor.SerializedMinMaxCurve[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    minMaxCurves: UnityEditor.SerializedMinMaxCurve[];
    selectedState: UnityEditor.MinMaxCurveState;
  }
}
declare namespace UnityEditor {
  class ModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, name: string, displayName: string);
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, name: string, displayName: string, initialVisibilityState: UnityEditor.ModuleUI.VisibilityState);
    // methods
    Validate(): void;
    GetXAxisScalar(): number;
    OnInspectorGUI(s: any): void;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    static FloatDraggable(rect: any, floatValue: number, remap: number, dragWidth: number, formatString: string): number;
    static FloatDraggable(rect: any, floatProp: UnityEditor.SerializedProperty, remap: number, dragWidth: number, formatString: string): number;
    static GUIVector3Field(guiContent: any, vecProp: UnityEditor.SerializedProperty, layoutOptions: any[]): any;
    static GUIFloat(label: string, floatProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static GUIFloat(guiContent: any, floatProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static GUIFloat(guiContent: any, floatProp: UnityEditor.SerializedProperty, formatString: string, layoutOptions: any[]): number;
    static GUIFloat(guiContent: any, floatValue: number, formatString: string, layoutOptions: any[]): number;
    static GUIToggle(label: string, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): boolean;
    static GUIToggle(guiContent: any, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): boolean;
    static GUILayerMask(guiContent: any, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIToggle(guiContent: any, boolValue: boolean, layoutOptions: any[]): boolean;
    static GUIToggleWithFloatField(name: string, boolProp: UnityEditor.SerializedProperty, floatProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIToggleWithFloatField(guiContent: any, boolProp: UnityEditor.SerializedProperty, floatProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIToggleWithIntField(name: string, boolProp: UnityEditor.SerializedProperty, floatProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIToggleWithIntField(guiContent: any, boolProp: UnityEditor.SerializedProperty, intProp: UnityEditor.SerializedProperty, invertToggle: boolean, layoutOptions: any[]): void;
    static GUIObject(label: any, objectProp: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIObjectFieldAndToggle(label: any, objectProp: UnityEditor.SerializedProperty, boolProp: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    static GUIIntDraggable(label: any, intProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static GUIIntDraggable(label: any, intValue: number, layoutOptions: any[]): number;
    static GUIIntDraggableX2(mainLabel: any, label1: any, intProp1: UnityEditor.SerializedProperty, label2: any, intProp2: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static IntDraggable(rect: any, label: any, intProp: UnityEditor.SerializedProperty, dragWidth: number): number;
    static GUIInt(guiContent: any, intValue: number, layoutOptions: any[]): number;
    static GUIInt(guiContent: any, intProp: UnityEditor.SerializedProperty, layoutOptions: any[]): number;
    static IntDraggable(rect: any, label: any, value: number, dragWidth: number): number;
    static GUIMinMaxRange(label: any, vec2Prop: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUISlider(floatProp: UnityEditor.SerializedProperty, a: number, b: number, remap: number): void;
    static GUISlider(name: string, floatProp: UnityEditor.SerializedProperty, a: number, b: number, remap: number): void;
    static GUIMinMaxSlider(label: any, vec2Prop: UnityEditor.SerializedProperty, a: number, b: number, layoutOptions: any[]): void;
    static GUIBoolAsPopup(label: any, boolProp: UnityEditor.SerializedProperty, options: string[], layoutOptions: any[]): boolean;
    static GUIEnumMask(label: any, enumValue: any, layoutOptions: any[]): any;
    static GUIMask(label: any, intValue: number, options: string[], layoutOptions: any[]): number;
    static GUIPopup(name: string, intProp: UnityEditor.SerializedProperty, options: string[], layoutOptions: any[]): number;
    static GUIPopup(label: any, intProp: UnityEditor.SerializedProperty, options: string[], layoutOptions: any[]): number;
    static GUIPopup(label: any, intValue: number, options: string[], layoutOptions: any[]): number;
    static GUIMinMaxCurve(label: string, mmCurve: UnityEditor.SerializedMinMaxCurve, layoutOptions: any[]): void;
    static GUIMinMaxCurve(label: any, mmCurve: UnityEditor.SerializedMinMaxCurve, layoutOptions: any[]): void;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    static GUIMMCurveStateList(rect: any, minMaxCurves: UnityEditor.SerializedMinMaxCurve): void;
    static GUIMMCurveStateList(rect: any, minMaxCurves: UnityEditor.SerializedMinMaxCurve[]): void;
    static GUIMMGradientPopUp(rect: any, gradientProp: UnityEditor.SerializedMinMaxGradient): void;
    static GUIMMColorPopUp(rect: any, boolProp: UnityEditor.SerializedProperty): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
    static k_CompactFixedModuleWidth: number;
    static k_SpaceBetweenModules: number;
  }
}
declare namespace UnityEditor.ModuleUI {
  class GradientCallbackData {
    // constructors
    constructor(state: UnityEditor.MinMaxGradientState, p: UnityEditor.SerializedMinMaxGradient);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    gradientProp: UnityEditor.SerializedMinMaxGradient;
    selectedState: UnityEditor.MinMaxGradientState;
  }
}
declare namespace UnityEditor.ModuleUI {
  class VisibilityState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotVisible: UnityEditor.ModuleUI.VisibilityState;
    static VisibleAndFolded: UnityEditor.ModuleUI.VisibilityState;
    static VisibleAndFoldedOut: UnityEditor.ModuleUI.VisibilityState;
  }
}
declare namespace UnityEditor {
  class MonoAOTRegistration {
    // constructors
    constructor();
    // methods
    static BuildReferencedTypeList(assemblies: any[]): any;
    static WriteCPlusPlusFileForStaticAOTModuleRegistration(buildTarget: UnityEditor.BuildTarget, file: string, crossCompileOptions: UnityEditor.CrossCompileOptions, advancedLic: boolean, targetDevice: string, stripping: boolean, usedClassRegistry: UnityEditor.RuntimeClassRegistry, checker: UnityEditor.AssemblyReferenceChecker, stagingAreaDataManaged: string): void;
    static ResolveReferencedUnityEngineClassesFromMono(assemblies: any[], unityEngine: any, res: UnityEditor.RuntimeClassRegistry): void;
    static ResolveDefinedNativeClassesFromMono(assemblies: any[], res: UnityEditor.RuntimeClassRegistry): void;
    static GenerateRegisterModules(nativeClasses: any, nativeModules: any, output: any, strippingEnabled: boolean): void;
    static GenerateRegisterClassesForStripping(nativeClassesAndBaseClasses: any, output: any): void;
    static GenerateRegisterClasses(allClasses: any, output: any): void;
    static GenerateRegisterInternalCalls(assemblies: any[], output: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.MonoAssemblyStripping {
  class AssemblyDefinitionComparer {
    // constructors
    constructor();
    // methods
    Equals(x: any, y: any): boolean;
    GetHashCode(obj: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MonoAssemblyStripping {
    // constructors
    constructor();
    // methods
    static MonoCilStrip(buildTarget: UnityEditor.BuildTarget, managedLibrariesDirectory: string, fileNames: string[]): void;
    static GenerateBlackList(librariesFolder: string, usedClasses: UnityEditor.RuntimeClassRegistry, allAssemblies: string[]): string;
    static GenerateLinkXmlToPreserveDerivedTypes(stagingArea: string, librariesFolder: string, usedClasses: UnityEditor.RuntimeClassRegistry): string;
    static MonoLink(buildTarget: UnityEditor.BuildTarget, managedLibrariesDirectory: string, input: string[], allAssemblies: string[], usedClasses: UnityEditor.RuntimeClassRegistry): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MonoCrossCompile {
    // constructors
    constructor();
    // methods
    static CrossCompileAOTDirectory(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, additionalOptions: string): void;
    static CrossCompileAOTDirectory(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, pathExtension: string, additionalOptions: string): void;
    static CrossCompileAOTDirectoryParallel(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, additionalOptions: string): boolean;
    static CrossCompileAOTDirectoryParallel(buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, pathExtension: string, additionalOptions: string): boolean;
    static DisplayAOTProgressBar(totalFiles: number, filesFinished: number): void;
    static CrossCompileAOTDirectoryParallel(crossCompilerPath: string, buildTarget: UnityEditor.BuildTarget, crossCompileOptions: UnityEditor.CrossCompileOptions, sourceAssembliesFolder: string, targetCrossCompiledASMFolder: string, additionalOptions: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static ArtifactsPath: string;
  }
}
declare namespace UnityEditor.MonoCrossCompile {
  class JobCompileAOT {
    // constructors
    constructor(target: UnityEditor.BuildTarget, crossCompilerAbsolutePath: string, assembliesAbsoluteDirectory: string, crossCompileOptions: UnityEditor.CrossCompileOptions, input: string, output: string, additionalOptions: string);
    // methods
    ThreadPoolCallback(threadContext: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_input: string;
    m_output: string;
    m_additionalOptions: string;
    m_doneEvent: any;
    m_Exception: any;
  }
}
declare namespace UnityEditor {
  class MonoImporter {
    // constructors
    constructor();
    // methods
    SetDefaultReferences(name: string[], target: any[]): void;
    static GetAllRuntimeMonoScripts(): UnityEditor.MonoScript[];
    static SetExecutionOrder(script: UnityEditor.MonoScript, order: number): void;
    static GetExecutionOrder(script: UnityEditor.MonoScript): number;
    GetScript(): UnityEditor.MonoScript;
    GetDefaultReference(name: string): any;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MonoManager {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MonoProcessRunner {
    // constructors
    constructor();
    // methods
    Run(process: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    Output: any;
    Error: any;
  }
}
declare namespace UnityEditor {
  class MonoProcessUtility {
    // constructors
    constructor();
    // methods
    static ProcessToString(process: any): string;
    static RunMonoProcess(process: any, name: string, resultingFile: string): void;
    static GetMonoExec(buildTarget: UnityEditor.BuildTarget): string;
    static GetMonoPath(buildTarget: UnityEditor.BuildTarget): string;
    static PrepareMonoProcess(target: UnityEditor.BuildTarget, workDir: string): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MonoReloadableIntPtr {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MonoReloadableIntPtrClear {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MonoScript {
    // constructors
    constructor();
    // methods
    GetClass(): any;
    static FromMonoBehaviour(behaviour: any): UnityEditor.MonoScript;
    static FromScriptableObject(scriptableObject: any): UnityEditor.MonoScript;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly text: string;
    readonly bytes: number[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MonoScriptImporterInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MonoScriptInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MouseCursor {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Arrow: UnityEditor.MouseCursor;
    static Text: UnityEditor.MouseCursor;
    static ResizeVertical: UnityEditor.MouseCursor;
    static ResizeHorizontal: UnityEditor.MouseCursor;
    static Link: UnityEditor.MouseCursor;
    static SlideArrow: UnityEditor.MouseCursor;
    static ResizeUpRight: UnityEditor.MouseCursor;
    static ResizeUpLeft: UnityEditor.MouseCursor;
    static MoveArrow: UnityEditor.MouseCursor;
    static RotateArrow: UnityEditor.MouseCursor;
    static ScaleArrow: UnityEditor.MouseCursor;
    static ArrowPlus: UnityEditor.MouseCursor;
    static ArrowMinus: UnityEditor.MouseCursor;
    static Pan: UnityEditor.MouseCursor;
    static Orbit: UnityEditor.MouseCursor;
    static Zoom: UnityEditor.MouseCursor;
    static FPS: UnityEditor.MouseCursor;
    static CustomCursor: UnityEditor.MouseCursor;
    static SplitResizeUpDown: UnityEditor.MouseCursor;
    static SplitResizeLeftRight: UnityEditor.MouseCursor;
  }
}
declare namespace UnityEditor {
  class MoveTool {
    // constructors
    constructor();
    // methods
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MovieImporter {
    // constructors
    constructor();
    // methods
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    quality: number;
    linearTexture: boolean;
    readonly duration: number;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MovieImporterInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MovieTextureInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnPreviewSettings(): void;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    GetMipLevelForRendering(): number;
    HasPreviewGUI(): boolean;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mipLevel: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MultilineDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditor {
  class MuscleClipEditorUtilities {
    // constructors
    constructor();
    // methods
    static GetMuscleClipQualityInfo(clip: any, startTime: number, stopTime: number): UnityEditor.MuscleClipQualityInfo;
    static CalculateQualityCurves(clip: any, time: UnityEditor.QualityCurvesTime, poseCurve: any[], rotationCurve: any[], heightCurve: any[], positionCurve: any[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class MuscleClipQualityInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    loop: number;
    loopOrientation: number;
    loopPositionY: number;
    loopPositionXZ: number;
  }
}
declare namespace UnityEditor {
  class NameConflictResolution {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unresolved: UnityEditor.NameConflictResolution;
    static RenameLocal: UnityEditor.NameConflictResolution;
    static RenameRemote: UnityEditor.NameConflictResolution;
  }
}
declare namespace UnityEditor {
  class NavMeshAgentInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.NavMeshAgentInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_AgentSizeHeader: any;
    m_AgentSteeringHeader: any;
    m_AgentAvoidanceHeader: any;
    m_AgentPathFindingHeader: any;
  }
}
declare namespace UnityEditor {
  class NavMeshEditorHelpers {
    // constructors
    constructor();
    // methods
    static DrawAgentDiagram(rect: any, agentRadius: number, agentHeight: number, agentClimb: number, agentSlope: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class NavMeshEditorWindow {
    // constructors
    constructor();
    // methods
    static SetupWindow(): void;
    OnEnable(): void;
    OnDisable(): void;
    OnGUI(): void;
    OnBecameVisible(): void;
    OnBecameInvisible(): void;
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    static BackgroundTaskStatusChanged(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.NavMeshEditorWindow {
  class Mode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ObjectSettings: UnityEditor.NavMeshEditorWindow.Mode;
    static SceneBakeSettings: UnityEditor.NavMeshEditorWindow.Mode;
    static AreaSettings: UnityEditor.NavMeshEditorWindow.Mode;
  }
}
declare namespace UnityEditor.NavMeshEditorWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_AgentRadiusContent: any;
    m_AgentHeightContent: any;
    m_AgentSlopeContent: any;
    m_AgentDropContent: any;
    m_AgentClimbContent: any;
    m_AgentJumpContent: any;
    m_AgentPlacementContent: any;
    m_MinRegionAreaContent: any;
    m_ManualCellSizeContent: any;
    m_CellSizeContent: any;
    m_AgentSizeHeader: any;
    m_OffmeshHeader: any;
    m_AdvancedHeader: any;
    m_NameLabel: any;
    m_CostLabel: any;
    m_ModeToggles: any[];
  }
}
declare namespace UnityEditor {
  class NavMeshObstacleInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class NETVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NET_1_1: UnityEditor.NETVersion;
    static NET_2_1: UnityEditor.NETVersion;
  }
}
declare namespace UnityEditor {
  class NetworkDetailStats {
    // constructors
    constructor();
    // methods
    static NewProfilerTick(newTime: number): void;
    static SetStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, msgId: number, entryName: string, amount: number): void;
    static IncrementStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, msgId: number, entryName: string, amount: number): void;
    static ResetAll(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkDirection {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Incoming: UnityEditor.NetworkDetailStats.NetworkDirection;
    static Outgoing: UnityEditor.NetworkDetailStats.NetworkDirection;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkOperationDetails {
    // constructors
    constructor();
    // methods
    NewProfilerTick(tickId: number): void;
    Clear(): void;
    SetStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, entryName: string, amount: number): void;
    IncrementStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, entryName: string, amount: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    MsgId: number;
    totalIn: number;
    totalOut: number;
    m_Entries: any;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkOperationEntryDetails {
    // constructors
    constructor();
    // methods
    NewProfilerTick(tickId: number): void;
    Clear(): void;
    AddStat(direction: UnityEditor.NetworkDetailStats.NetworkDirection, amount: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_EntryName: string;
    m_IncomingTotal: number;
    m_OutgoingTotal: number;
    m_IncomingSequence: UnityEditor.NetworkDetailStats.NetworkStatsSequence;
    m_OutgoingSequence: UnityEditor.NetworkDetailStats.NetworkStatsSequence;
  }
}
declare namespace UnityEditor.NetworkDetailStats {
  class NetworkStatsSequence {
    // constructors
    constructor();
    // methods
    Add(tick: number, amount: number): void;
    NewProfilerTick(tick: number): void;
    GetFiveTick(tick: number): number;
    GetTenTick(tick: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    MessageTotal: number;
  }
}
declare namespace UnityEditor {
  class NoiseModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.NoiseModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    separateAxes: any;
    strength: any;
    frequency: any;
    damping: any;
    octaves: any;
    octaveMultiplier: any;
    octaveScale: any;
    quality: any;
    scrollSpeed: any;
    remap: any;
    remapCurve: any;
    x: any;
    y: any;
    z: any;
    previewTexture: any;
    qualityDropdown: string[];
  }
}
declare namespace UnityEditor {
  class NormalCurveRenderer {
    // constructors
    constructor(curve: any);
    // methods
    GetCurve(): any;
    RangeStart(): number;
    RangeEnd(): number;
    SetWrap(wrap: any): void;
    SetWrap(preWrap: any, postWrap: any): void;
    SetCustomRange(start: number, end: number): void;
    EvaluateCurveSlow(time: number): number;
    EvaluateCurveDeltaSlow(time: number): number;
    static CalculateRanges(minTime: number, maxTime: number, rangeStart: number, rangeEnd: number, preWrapMode: any, postWrapMode: any): number[];
    DrawCurve(minTime: number, maxTime: number, color: any, transform: any, wrapColor: any): void;
    static DrawPolyLine(transform: any, minDistance: number, points: any[]): void;
    static DrawCurveWrapped(minTime: number, maxTime: number, rangeStart: number, rangeEnd: number, preWrap: any, postWrap: any, mesh: any, firstPoint: any, lastPoint: any, transform: any, color: any, wrapColor: any): void;
    static DrawCurveWrapped(minTime: number, maxTime: number, rangeStart: number, rangeEnd: number, preWrap: any, postWrap: any, color: any, transform: any, points: any[], wrapColor: any): void;
    GetBounds(): any;
    GetBounds(minTime: number, maxTime: number): any;
    FlushCache(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly curveMaterial: any;
    // fields
  }
}
declare namespace UnityEditor.NScreen {
  class NScreenManager {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.NScreen {
  class RemoteGame {
    // constructors
    constructor();
    // methods
    SizeSelectionCallback(indexClicked: number, objectSelected: any): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    lowResolutionForAspectRatios: boolean;
    readonly forceLowResolutionAspectRatios: boolean;
    readonly showLowResolutionToggle: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    bridge: UnityEngine.NScreenBridge;
    shouldExit: boolean;
    shouldBuild: boolean;
    id: number;
  }
}
declare namespace UnityEditor {
  class ObjectCopier {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ObjectInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    instanceId: number;
    memorySize: number;
    reason: number;
    referencedBy: any;
    name: string;
    className: string;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class AssetStoreGroup {
    // constructors
    constructor(owner: UnityEditor.ObjectListArea, groupTitle: string, groupName: string);
    // methods
    UpdateAssets(): void;
    UpdateFilter(hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, showFoldersFirst: boolean): void;
    UpdateHeight(): void;
    IndexOf(assetID: number): number;
    AssetAtIndex(selectedIdx: number): UnityEditor.AssetStoreAsset;
    Draw(yOffset: number, scrollPos: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Name: string;
    Assets: any;
    readonly ItemCount: number;
    ListMode: boolean;
    readonly NeedItems: boolean;
    readonly NeedsRepaint: boolean;
    readonly Height: number;
    visiblePreference: boolean;
    // fields
    static kDefaultRowsShown: number;
    static kDefaultRowsShownListMode: number;
    m_Owner: UnityEditor.ObjectListArea;
    m_Grid: UnityEditor.VerticalGrid;
    m_Height: number;
    Visible: boolean;
    ItemsAvailable: number;
    ItemsWantedShown: number;
    m_LastClickedDrawTime: number;
  }
}
declare namespace UnityEditor {
  class ObjectListArea {
    // constructors
    constructor(state: UnityEditor.ObjectListAreaState, owner: UnityEditor.EditorWindow, showNoneItem: boolean);
    // methods
    ShowObjectsInList(instanceIDs: number[]): void;
    Init(rect: any, hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, checkThumbnails: boolean): void;
    GetAssetStoreButtonText(): string;
    ShowAssetStoreHitCountWhileSearchingLocalAssetsChanged(): void;
    OnGUI(position: any, keyboardControlID: number): void;
    CanShowThumbnails(): boolean;
    OnEvent(): void;
    BeginRename(delay: number): boolean;
    EndRename(acceptChanges: boolean): void;
    IsSelected(instanceID: number): boolean;
    GetSelection(): number[];
    IsLastClickedItemVisible(): boolean;
    SelectAll(): void;
    InitSelection(selectedInstanceIDs: number[]): void;
    HandleKeyboard(checkKeyboardControl: boolean): void;
    OffsetSelection(selectionOffset: number): void;
    SelectFirst(): void;
    GetInstanceIDByIndex(index: number): number;
    Frame(instanceID: number, frame: boolean, ping: boolean): boolean;
    OnInspectorUpdate(): void;
    IsShowing(instanceID: number): boolean;
    IsShowingAny(instanceIDs: number[]): boolean;
    BeginPing(instanceID: number): void;
    EndPing(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    allowDragging: boolean;
    allowRenaming: boolean;
    allowMultiSelect: boolean;
    allowDeselection: boolean;
    allowFocusRendering: boolean;
    allowBuiltinResources: boolean;
    allowUserRenderingHook: boolean;
    allowFindNextShortcut: boolean;
    foldersFirst: boolean;
    repaintCallback: (() => void);
    itemSelectedCallback: ((boolean) => void);
    keyboardCallback: (() => void);
    gotKeyboardFocus: (() => void);
    assetStoreSearchEnded: (() => void);
    drawLocalAssetHeader: ((any) => number);
    gridSize: number;
    readonly minGridSize: number;
    readonly maxGridSize: number;
    readonly numItemsDisplayed: number;
    // fields
    selectedAssetStoreAsset: boolean;
    m_RequeryAssetStore: boolean;
    m_SpaceBetween: number;
    m_TopMargin: number;
    m_BottomMargin: number;
    m_RightMargin: number;
    m_LeftMargin: number;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class Group {
    // constructors
    constructor(owner: UnityEditor.ObjectListArea, groupTitle: string);
    // methods
    UpdateAssets(): void;
    UpdateHeight(): void;
    UpdateFilter(hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, showFoldersFirst: boolean): void;
    Draw(yOffset: number, scrollPos: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Height: number;
    readonly ItemCount: number;
    ListMode: boolean;
    readonly NeedsRepaint: boolean;
    visiblePreference: boolean;
    // fields
    m_Owner: UnityEditor.ObjectListArea;
    m_Grid: UnityEditor.VerticalGrid;
    m_Height: number;
    Visible: boolean;
    ItemsAvailable: number;
    ItemsWantedShown: number;
    m_LastClickedDrawTime: number;
  }
}
declare namespace UnityEditor.ObjectListArea {
  class LocalGroup {
    // constructors
    constructor(owner: UnityEditor.ObjectListArea, groupTitle: string, showNone: boolean);
    // methods
    UpdateAssets(): void;
    UpdateHeight(): void;
    IsAnyLastRenderedAssetsDirty(): boolean;
    ChangeExpandedState(instanceID: number, expanded: boolean): void;
    GetVisibleNameAndInstanceIDs(): any;
    GetInstanceIDs(): any;
    GetNewSelection(clickedInstanceID: number, beginOfDrag: boolean, useShiftAsActionKey: boolean): any;
    UpdateFilter(hierarchyType: UnityEditor.HierarchyType, searchFilter: UnityEditor.SearchFilter, foldersFirst: boolean): void;
    GetNameOfLocalAsset(instanceID: number): string;
    IsBuiltinAsset(instanceID: number): boolean;
    InitBuiltinResources(): void;
    PrintBuiltinResourcesAvailable(): void;
    IndexOfNewText(newText: string, isCreatingNewFolder: boolean, foldersFirst: boolean): number;
    IndexOf(instanceID: number): number;
    LookupByInstanceID(instanceID: number): UnityEditor.FilteredHierarchy.FilterResult;
    InstanceIdAtIndex(index: number, instanceID: any): boolean;
    StartDrag(draggedInstanceID: number, selectedInstanceIDs: any): void;
    DoDrag(dragToInstanceID: number, perform: boolean): UnityEditor.DragAndDropVisualMode;
    DoCharacterOffsetSelection(): boolean;
    ShowObjectsInList(instanceIDs: number[]): void;
    static DrawIconAndLabel(rect: any, filterItem: UnityEditor.FilteredHierarchy.FilterResult, label: string, icon: any, selected: boolean, focus: boolean): void;
    Draw(yOffset: number, scrollPos: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly ShowNone: boolean;
    readonly NeedsRepaint: boolean;
    readonly searchFilter: UnityEditor.SearchFilter;
    ListMode: boolean;
    readonly HasBuiltinResources: boolean;
    readonly ItemCount: number;
    readonly Height: number;
    visiblePreference: boolean;
    // fields
    m_ListMode: boolean;
    static k_ListModeLeftPadding: number;
    static k_ListModeLeftPaddingForSubAssets: number;
    static k_ListModeVersionControlOverlayPadding: number;
    m_Owner: UnityEditor.ObjectListArea;
    m_Grid: UnityEditor.VerticalGrid;
    m_Height: number;
    Visible: boolean;
    ItemsAvailable: number;
    ItemsWantedShown: number;
    m_LastClickedDrawTime: number;
  }
}
declare namespace UnityEditor.ObjectListArea.LocalGroup {
  class ItemFader {
    // constructors
    constructor();
    // methods
    Start(instanceIDs: any): void;
    GetAlpha(instanceID: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ObjectListArea {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    resultsLabel: any;
    resultsGridLabel: any;
    resultsGrid: any;
    background: any;
    previewTextureBackground: any;
    groupHeaderMiddle: any;
    groupHeaderTop: any;
    groupHeaderLabel: any;
    groupHeaderLabelCount: any;
    groupFoldout: any;
    toolbarBack: any;
    resultsFocusMarker: any;
    miniRenameField: any;
    ping: any;
    miniPing: any;
    iconDropShadow: any;
    textureIconDropShadow: any;
    iconAreaBg: any;
    previewBg: any;
    subAssetBg: any;
    subAssetBgOpenEnded: any;
    subAssetBgCloseEnded: any;
    subAssetBgMiddle: any;
    subAssetBgDivider: any;
    subAssetExpandButton: any;
    m_AssetStoreNotAvailableText: any;
  }
}
declare namespace UnityEditor {
  class ObjectListAreaState {
    // constructors
    constructor();
    // methods
    OnAwake(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_SelectedInstanceIDs: any;
    m_LastClickedInstanceID: number;
    m_HadKeyboardFocusLastEvent: boolean;
    m_ExpandedInstanceIDs: any;
    m_RenameOverlay: UnityEditor.RenameOverlay;
    m_CreateAssetUtility: UnityEditor.CreateAssetUtility;
    m_NewAssetIndexInList: number;
    m_ScrollPosition: any;
    m_GridSize: number;
  }
}
declare namespace UnityEditor {
  class ObjectNames {
    // constructors
    constructor();
    // methods
    static NicifyVariableName(name: string): string;
    static GetInspectorTitle(obj: any): string;
    static GetClassName(obj: any): string;
    static GetDragAndDropTitle(obj: any): string;
    static SetNameSmart(obj: any, name: string): void;
    static MangleVariableName(name: string): string;
    static GetPropertyEditorTitle(obj: any): string;
    static GetUniqueName(existingNames: string[], name: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ObjectPreview {
    // constructors
    constructor();
    // methods
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    DrawPreview(previewArea: any): void;
    ReloadPreviewInstances(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly target: any;
    // fields
  }
}
declare namespace UnityEditor.ObjectPreview {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    preBackground: any;
    preBackgroundSolid: any;
    previewMiniLabel: any;
    dropShadowLabelStyle: any;
  }
}
declare namespace UnityEditor {
  class ObjectPreviewPopup {
    // constructors
    constructor(previewObject: any);
    // methods
    OnClose(): void;
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.ObjectPreviewPopup {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    toolbar: any;
    toolbarText: any;
    background: any;
  }
}
declare namespace UnityEditor {
  class ObjectReferenceKeyframe {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    time: number;
    value: any;
  }
}
declare namespace UnityEditor {
  class ObjectSelector {
    // constructors
    constructor();
    // methods
    SetupPreview(): void;
    Show(obj: any, requiredType: any, property: UnityEditor.SerializedProperty, allowSceneObjects: boolean): void;
    static GetCurrentObject(): any;
    static GetInitialObject(): any;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly allowedInstanceIDs: any;
    static readonly get: UnityEditor.ObjectSelector;
    static readonly isVisible: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ObjectSelector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    smallStatus: any;
    largeStatus: any;
    toolbarBack: any;
    tab: any;
    bottomResize: any;
    background: any;
    previewBackground: any;
    previewTextureBackground: any;
  }
}
declare namespace UnityEditor {
  class ObjectTreeForSelector {
    // constructors
    constructor();
    // methods
    IsInitialized(): boolean;
    Init(position: any, owner: UnityEditor.EditorWindow, treeViewNeededCallback: ((UnityEditor.ObjectTreeForSelector.TreeSelectorData) => void), selectionCallback: ((UnityEditor.IMGUI.Controls.TreeViewItem) => void), doubleClickedCallback: (() => void), initialSelectedTreeViewItemID: number, userData: number): void;
    Clear(): void;
    GetSelection(): number[];
    SetTreeView(treeView: UnityEditor.IMGUI.Controls.TreeViewController): void;
    OnGUI(position: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class DoubleClickedEvent {
    // constructors
    constructor();
    // methods
    AddListener(call: (() => void)): void;
    RemoveListener(call: (() => void)): void;
    Invoke(): void;
    GetPersistentEventCount(): number;
    GetPersistentTarget(index: number): any;
    GetPersistentMethodName(index: number): string;
    SetPersistentListenerState(index: number, state: any): void;
    RemoveAllListeners(): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class SelectionEvent {
    // constructors
    constructor();
    // methods
    AddListener(call: ((UnityEditor.IMGUI.Controls.TreeViewItem) => void)): void;
    RemoveListener(call: ((UnityEditor.IMGUI.Controls.TreeViewItem) => void)): void;
    Invoke(arg0: UnityEditor.IMGUI.Controls.TreeViewItem): void;
    GetPersistentEventCount(): number;
    GetPersistentTarget(index: number): any;
    GetPersistentMethodName(index: number): string;
    SetPersistentListenerState(index: number, state: any): void;
    RemoveAllListeners(): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    searchBg: any;
    bottomBarBg: any;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class TreeSelectorData {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    objectTreeForSelector: UnityEditor.ObjectTreeForSelector;
    editorWindow: UnityEditor.EditorWindow;
    state: UnityEditor.IMGUI.Controls.TreeViewState;
    treeViewRect: any;
    userData: number;
  }
}
declare namespace UnityEditor.ObjectTreeForSelector {
  class TreeViewNeededEvent {
    // constructors
    constructor();
    // methods
    AddListener(call: ((UnityEditor.ObjectTreeForSelector.TreeSelectorData) => void)): void;
    RemoveListener(call: ((UnityEditor.ObjectTreeForSelector.TreeSelectorData) => void)): void;
    Invoke(arg0: UnityEditor.ObjectTreeForSelector.TreeSelectorData): void;
    GetPersistentEventCount(): number;
    GetPersistentTarget(index: number): any;
    GetPersistentMethodName(index: number): string;
    SetPersistentListenerState(index: number, state: any): void;
    RemoveAllListeners(): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class OcclusionAreaEditor {
    // constructors
    constructor();
    // methods
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class OcclusionCullingWindow {
    // constructors
    constructor();
    // methods
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.OcclusionCullingWindow {
  class Mode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AreaSettings: UnityEditor.OcclusionCullingWindow.Mode;
    static BakeSettings: UnityEditor.OcclusionCullingWindow.Mode;
    static Visualization: UnityEditor.OcclusionCullingWindow.Mode;
  }
}
declare namespace UnityEditor.OcclusionCullingWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ModeToggles: any[];
    labelStyle: any;
    emptyAreaSelection: any;
    emptyCameraSelection: any;
    visualizationNote: any;
    seeVisualizationInScene: any;
    noOcclusionData: any;
    smallestHole: any;
    backfaceThreshold: any;
    farClipPlane: any;
    smallestOccluder: any;
    defaultParameterText: any;
  }
}
declare namespace UnityEditor {
  class OcclusionPortalInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class OffMeshLinkInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class OptimizedGUIBlock {
    // constructors
    constructor();
    // methods
    Dispose(): void;
    Begin(hasChanged: boolean, position: any): boolean;
    End(): void;
    BeginRecording(): void;
    EndRecording(): void;
    Execute(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    valid: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class OSColorPicker {
    // constructors
    constructor();
    // methods
    static Show(showAlpha: boolean): void;
    static Close(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly visible: boolean;
    static color: any;
    // fields
  }
}
declare namespace UnityEditor {
  class OSUtil {
    // constructors
    constructor();
    // methods
    static GetDefaultApps(fileType: string): string[];
    static GetAppFriendlyName(app: string): string;
    static GetDefaultAppPath(fileType: string): string;
    static GetDefaultCachePath(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class OtherRenderingEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.OtherRenderingEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static otherHeader: any;
  }
}
declare namespace UnityEditor {
  class PackageExport {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly items: UnityEditor.ExportPackageItem[];
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PackageExport {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static title: any;
    static bottomBarBg: any;
    static topBarBg: any;
    static loadingTextStyle: any;
    static allText: any;
    static noneText: any;
    static includeDependenciesText: any;
    static header: any;
  }
}
declare namespace UnityEditor {
  class PackageExportTreeView {
    // constructors
    constructor(packageExport: UnityEditor.PackageExport, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, startRect: any);
    // methods
    OnGUI(rect: any): void;
    SetAllEnabled(enabled: UnityEditor.PackageExportTreeView.EnabledState): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly items: UnityEditor.ExportPackageItem[];
    // fields
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class EnabledState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotSet: UnityEditor.PackageExportTreeView.EnabledState;
    static None: UnityEditor.PackageExportTreeView.EnabledState;
    static All: UnityEditor.PackageExportTreeView.EnabledState;
    static Mixed: UnityEditor.PackageExportTreeView.EnabledState;
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class PackageExportTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageExportTreeView);
    // methods
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.PackageExportTreeView.PackageExportTreeViewGUI {
  class Constants {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static folderIcon: any;
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class PackageExportTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageExportTreeView);
    // methods
    OnRowGUI(rowRect: any, tvItem: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showPreviewForID: number;
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    itemWasToggled: ((UnityEditor.PackageExportTreeView.PackageExportTreeViewItem) => void);
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.PackageExportTreeView {
  class PackageExportTreeViewItem {
    // constructors
    constructor(itemIn: UnityEditor.ExportPackageItem, id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    item: UnityEditor.ExportPackageItem;
    enabledState: UnityEditor.PackageExportTreeView.EnabledState;
    readonly isFolder: boolean;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor.PackageImport {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ConsoleEntryBackEven: any;
    ConsoleEntryBackOdd: any;
    title: any;
    bottomBarBg: any;
    topBarBg: any;
    textureIconDropShadow: any;
    lineColor: any;
  }
}
declare namespace UnityEditor {
  class PackageImport {
    // constructors
    constructor();
    // methods
    static ShowImportPackage(packagePath: string, items: UnityEditor.ImportPackageItem[], packageIconPath: string, allowReInstall: boolean): void;
    OnGUI(): void;
    static DrawTexture(r: any, tex: any, useDropshadow: boolean): void;
    static GetPreview(previewPath: string): any;
    static HasInvalidCharInFilePath(filePath: string): boolean;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly canReInstall: boolean;
    readonly doReInstall: boolean;
    readonly packageItems: UnityEditor.ImportPackageItem[];
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PackageImportTreeView {
    // constructors
    constructor(packageImport: UnityEditor.PackageImport, treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, startRect: any);
    // methods
    OnGUI(rect: any): void;
    SetAllEnabled(state: UnityEditor.PackageImportTreeView.EnabledState): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly canReInstall: boolean;
    readonly doReInstall: boolean;
    readonly packageItems: UnityEditor.ImportPackageItem[];
    // fields
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class EnabledState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotSet: UnityEditor.PackageImportTreeView.EnabledState;
    static None: UnityEditor.PackageImportTreeView.EnabledState;
    static All: UnityEditor.PackageImportTreeView.EnabledState;
    static Mixed: UnityEditor.PackageImportTreeView.EnabledState;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PackageImportTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageImportTreeView);
    // methods
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.PackageImportTreeView.PackageImportTreeViewGUI {
  class Constants {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static folderIcon: any;
    static badgeNew: any;
    static badgeDelete: any;
    static badgeWarn: any;
    static badgeChange: any;
    static paddinglessStyle: any;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PackageImportTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, view: UnityEditor.PackageImportTreeView);
    // methods
    OnRowGUI(rowRect: any, tvItem: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showPreviewForID: number;
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    itemWasToggled: ((UnityEditor.PackageImportTreeView.PackageImportTreeViewItem) => void);
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PackageImportTreeViewItem {
    // constructors
    constructor(itemIn: UnityEditor.ImportPackageItem, id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    item: UnityEditor.ImportPackageItem;
    enableState: UnityEditor.PackageImportTreeView.EnabledState;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor.PackageImportTreeView {
  class PreviewPopup {
    // constructors
    constructor(preview: any);
    // methods
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor {
  class PackageInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    packagePath: string;
    jsonInfo: string;
    iconURL: string;
  }
}
declare namespace UnityEditor {
  class PackageUtility {
    // constructors
    constructor();
    // methods
    static BuildExportPackageItemsList(guids: string[], dependencies: boolean): UnityEditor.ExportPackageItem[];
    static ExportPackage(guids: string[], fileName: string): void;
    static ExtractAndPrepareAssetList(packagePath: string, packageIconPath: any, canPerformReInstall: any): UnityEditor.ImportPackageItem[];
    static ImportPackageAssets(packageName: string, items: UnityEditor.ImportPackageItem[], performReInstall: boolean): void;
    static ImportPackageAssetsImmediately(packageName: string, items: UnityEditor.ImportPackageItem[], performReInstall: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PaneDragTab {
    // constructors
    constructor();
    // methods
    SetDropInfo(di: UnityEditor.DropInfo, mouseScreenPos: any, inFrontOf: UnityEditor.ContainerWindow): void;
    Close(): void;
    Show(pixelPos: any, content: any, viewSize: any, mouseScreenPosition: any): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly get: UnityEditor.PaneDragTab;
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ParamEqGUI {
    // constructors
    constructor();
    // methods
    static BuildGUIStyleForLabel(color: any, fontSize: number, wrapText: boolean, fontstyle: any, anchor: any): any;
    OnGUI(plugin: UnityEditor.IAudioEffectPlugin): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Name: string;
    readonly Description: string;
    readonly Vendor: string;
    // fields
    static kCenterFreqName: string;
    static kOctaveRangeName: string;
    static kFrequencyGainName: string;
    static textStyle10: any;
  }
}
declare namespace UnityEditor {
  class ParentViewFile {
    // constructors
    constructor(name: string, guid: string);
    constructor(name: string, guid: string, flags: UnityEditor.ChangeFlags);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    guid: string;
    name: string;
    changeFlags: UnityEditor.ChangeFlags;
  }
}
declare namespace UnityEditor {
  class ParentViewFolder {
    // constructors
    constructor(name: string, guid: string);
    constructor(name: string, guid: string, flags: UnityEditor.ChangeFlags);
    // methods
    static MakeNiceName(name: string): string;
    CloneWithoutFiles(): UnityEditor.ParentViewFolder;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    guid: string;
    name: string;
    changeFlags: UnityEditor.ChangeFlags;
    files: UnityEditor.ParentViewFile[];
  }
}
declare namespace UnityEditor {
  class ParentViewState {
    // constructors
    constructor();
    // methods
    GetLineCount(): number;
    HasTrue(): boolean;
    SetLineCount(): void;
    GetFoldersCount(): number;
    ClearSelection(): void;
    AddAssetItems(assets: UnityEditor.AssetsItem[]): void;
    AddAssetItems(assets: UnityEditor.Changeset): void;
    AddAssetItems(assets: UnityEditor.DeletedAsset[]): void;
    Clear(): void;
    NextFileFolder(folder: any, file: any): boolean;
    IndexToFolderAndFile(index: number, folder: any, file: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    lv: UnityEditor.ListViewState;
    selectedFolder: number;
    selectedFile: number;
    initialSelectedItem: number;
    folders: UnityEditor.ParentViewFolder[];
    selectedItems: boolean[];
  }
}
declare namespace UnityEditor {
  class ParticleEffectUI {
    // constructors
    constructor(owner: UnityEditor.ParticleEffectUIOwner);
    // methods
    InitializeIfNeeded(shuriken: any): boolean;
    Clear(): void;
    static GetMinSize(): any;
    Refresh(): void;
    GetNextParticleSystemName(): string;
    IsParticleSystemUIVisible(psUI: UnityEditor.ParticleSystemUI): boolean;
    GetParticleSystemUIForParticleSystem(shuriken: any): UnityEditor.ParticleSystemUI;
    PlayOnAwakeChanged(newPlayOnAwake: boolean): void;
    ValidateParticleSystemProperty(shurikenProperty: UnityEditor.SerializedProperty): boolean;
    CreateParticleSystem(parentOfNewParticleSystem: any, defaultType: UnityEditor.SubModuleUI.SubEmitterType): any;
    GetParticleSystemUIList(shurikens: any): any;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    OnSceneViewGUI(): void;
    OnSceneGUI(): void;
    OnGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Owner: UnityEditor.ParticleEffectUIOwner;
    m_Emitters: UnityEditor.ParticleSystemUI[];
    static m_ShowWireframe: boolean;
    static m_ShowBounds: boolean;
    static m_VerticalLayout: boolean;
  }
}
declare namespace UnityEditor.ParticleEffectUI {
  class OwnerType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Inspector: UnityEditor.ParticleEffectUI.OwnerType;
    static ParticleSystemWindow: UnityEditor.ParticleEffectUI.OwnerType;
  }
}
declare namespace UnityEditor.ParticleEffectUI {
  class PlayState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Stopped: UnityEditor.ParticleEffectUI.PlayState;
    static Playing: UnityEditor.ParticleEffectUI.PlayState;
    static Paused: UnityEditor.ParticleEffectUI.PlayState;
  }
}
declare namespace UnityEditor.ParticleEffectUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    previewSpeed: any;
    previewTime: any;
    particleCount: any;
    subEmitterParticleCount: any;
    play: any;
    stop: any;
    pause: any;
    addParticleSystem: any;
    wireframe: any;
    bounds: any;
    resimulation: any;
    secondsFloatFieldFormatString: string;
  }
}
declare namespace UnityEditor {
  class ParticleEffectUIOwner {
    // constructors
    private constructor();
    // methods
    Repaint(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ParticleEffectUtils {
    // constructors
    constructor();
    // methods
    static GetPlane(index: number): any;
    static HidePlaneIfExists(index: number): void;
    static ClearPlanes(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ParticleRendererEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ParticleSystemClipboard {
    // constructors
    constructor();
    // methods
    static HasSingleGradient(): boolean;
    static HasDoubleGradient(): boolean;
    static CopyGradient(gradient1: any, gradient2: any): void;
    static PasteGradient(gradientProperty: UnityEditor.SerializedProperty, gradientProperty2: UnityEditor.SerializedProperty): void;
    static HasSingleAnimationCurve(): boolean;
    static HasDoubleAnimationCurve(): boolean;
    static CopyAnimationCurves(animCurve: any, animCurve2: any, scalar: number): void;
    static PasteAnimationCurves(animCurveProperty: UnityEditor.SerializedProperty, animCurveProperty2: UnityEditor.SerializedProperty, scalarProperty: UnityEditor.SerializedProperty, curveRanges: any, particleSystemCurveEditor: ParticleSystemCurveEditor): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ParticleSystemEditorUtils {
    // constructors
    constructor();
    // methods
    static GetRoot(ps: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ParticleSystemInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    UseDefaultMargins(): boolean;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    GetPreviewTitle(): any;
    OnPreviewSettings(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly playBackTitle: any;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ParticleSystemStyles {
    // constructors
    private constructor();
    // methods
    static Get(): UnityEditor.ParticleSystemStyles;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    label: any;
    numberField: any;
    objectField: any;
    effectBgStyle: any;
    emitterHeaderStyle: any;
    moduleHeaderStyle: any;
    moduleBgStyle: any;
    plus: any;
    minus: any;
    line: any;
    checkmark: any;
    minMaxCurveStateDropDown: any;
    toggle: any;
    popup: any;
    selectionMarker: any;
    toolbarButtonLeftAlignText: any;
    modulePadding: any;
    warningIcon: any;
  }
}
declare namespace UnityEditor {
  class ParticleSystemUI {
    // constructors
    constructor();
    // methods
    Init(owner: UnityEditor.ParticleEffectUI, ps: any): void;
    GetName(): string;
    GetEmitterDuration(): number;
    OnGUI(root: any, width: number, fixedWidth: boolean): void;
    OnSceneGUI(): void;
    ApplyProperties(): void;
    UpdateProperties(): void;
    static GetUIModuleNames(): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ParticleEffectUI: UnityEditor.ParticleEffectUI;
    m_Modules: UnityEditor.ModuleUI[];
    m_ParticleSystem: any;
    m_ParticleSystemSerializedObject: UnityEditor.SerializedObject;
    m_RendererSerializedObject: UnityEditor.SerializedObject;
  }
}
declare namespace UnityEditor.ParticleSystemUI {
  class DefaultTypes {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Root: UnityEditor.ParticleSystemUI.DefaultTypes;
    static SubBirth: UnityEditor.ParticleSystemUI.DefaultTypes;
    static SubCollision: UnityEditor.ParticleSystemUI.DefaultTypes;
    static SubDeath: UnityEditor.ParticleSystemUI.DefaultTypes;
  }
}
declare namespace UnityEditor.ParticleSystemUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    addModules: any;
    supportsCullingText: any;
  }
}
declare namespace UnityEditor {
  class ParticleSystemWindow {
    // constructors
    private constructor();
    // methods
    static CreateWindow(): void;
    OnSceneViewGUI(sceneView: UnityEditor.SceneView): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ParticleSystemWindow {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    lockParticleSystem: any;
    previewAll: any;
  }
}
declare namespace UnityEditor {
  class Physics2DSettings {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class Physics2DSettingsInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PhysicsManager {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PhysicsManagerInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PingData {
    // constructors
    constructor();
    // methods
    HandlePing(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly isPinging: boolean;
    // fields
    m_TimeStart: number;
    m_ZoomTime: number;
    m_WaitTime: number;
    m_FadeOutTime: number;
    m_PeakScale: number;
    m_ContentDraw: ((any) => void);
    m_ContentRect: any;
    m_AvailableWidth: number;
    m_PingStyle: any;
  }
}
declare namespace UnityEditor {
  class PivotMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Center: UnityEditor.PivotMode;
    static Pivot: UnityEditor.PivotMode;
  }
}
declare namespace UnityEditor {
  class PivotRotation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Local: UnityEditor.PivotRotation;
    static Global: UnityEditor.PivotRotation;
  }
}
declare namespace UnityEditor {
  class PlaceTreeWizard {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    numberOfTrees: number;
    keepExistingTrees: boolean;
  }
}
declare namespace UnityEditor {
  class PlatformEffector2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class Android {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static disableDepthAndStencilBuffers: boolean;
    static use24BitDepthBuffer: boolean;
    static bundleVersionCode: number;
    static minSdkVersion: UnityEditor.AndroidSdkVersions;
    static preferredInstallLocation: UnityEditor.AndroidPreferredInstallLocation;
    static forceInternetPermission: boolean;
    static forceSDCardPermission: boolean;
    static androidTVCompatibility: boolean;
    static androidIsGame: boolean;
    static targetDevice: UnityEditor.AndroidTargetDevice;
    static splashScreenScale: UnityEditor.AndroidSplashScreenScale;
    static keystoreName: string;
    static keystorePass: string;
    static keyaliasName: string;
    static keyaliasPass: string;
    static readonly licenseVerification: boolean;
    static useAPKExpansionFiles: boolean;
    static showActivityIndicatorOnLoading: UnityEditor.AndroidShowActivityIndicatorOnLoading;
    // fields
  }
}
declare namespace UnityEditor {
  class PlayerSettings {
    // constructors
    constructor();
    // methods
    static SetPropertyInt(name: string, value: number, target: UnityEditor.BuildTargetGroup): void;
    static SetPropertyInt(name: string, value: number): void;
    static SetPropertyInt(name: string, value: number, target: UnityEditor.BuildTarget): void;
    static GetPropertyInt(name: string, target: UnityEditor.BuildTargetGroup): number;
    static GetPropertyInt(name: string): number;
    static GetPropertyOptionalInt(name: string, value: any): boolean;
    static GetPropertyOptionalInt(name: string, value: any, target: UnityEditor.BuildTargetGroup): boolean;
    static SetPropertyBool(name: string, value: boolean, target: UnityEditor.BuildTargetGroup): void;
    static SetPropertyBool(name: string, value: boolean): void;
    static SetPropertyBool(name: string, value: boolean, target: UnityEditor.BuildTarget): void;
    static GetPropertyBool(name: string, target: UnityEditor.BuildTargetGroup): boolean;
    static GetPropertyBool(name: string): boolean;
    static GetPropertyOptionalBool(name: string, value: any): boolean;
    static GetPropertyOptionalBool(name: string, value: any, target: UnityEditor.BuildTargetGroup): boolean;
    static SetPropertyString(name: string, value: string, target: UnityEditor.BuildTargetGroup): void;
    static SetPropertyString(name: string, value: string): void;
    static SetPropertyString(name: string, value: string, target: UnityEditor.BuildTarget): void;
    static GetPropertyString(name: string, target: UnityEditor.BuildTargetGroup): string;
    static GetPropertyString(name: string): string;
    static GetPropertyOptionalString(name: string, value: any): boolean;
    static GetPropertyOptionalString(name: string, value: any, target: UnityEditor.BuildTargetGroup): boolean;
    static HasAspectRatio(aspectRatio: UnityEditor.AspectRatio): boolean;
    static SetAspectRatio(aspectRatio: UnityEditor.AspectRatio, enable: boolean): void;
    static GetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup): any[];
    static SetIconsForTargetGroup(platform: UnityEditor.BuildTargetGroup, icons: any[]): void;
    static GetIconSizesForTargetGroup(platform: UnityEditor.BuildTargetGroup): number[];
    static GetGraphicsAPIs(platform: UnityEditor.BuildTarget): any[];
    static SetGraphicsAPIs(platform: UnityEditor.BuildTarget, apis: any[]): void;
    static GetUseDefaultGraphicsAPIs(platform: UnityEditor.BuildTarget): boolean;
    static SetUseDefaultGraphicsAPIs(platform: UnityEditor.BuildTarget, automatic: boolean): void;
    static GetScriptingDefineSymbolsForGroup(targetGroup: UnityEditor.BuildTargetGroup): string;
    static SetScriptingDefineSymbolsForGroup(targetGroup: UnityEditor.BuildTargetGroup, defines: string): void;
    static GetArchitecture(targetGroup: UnityEditor.BuildTargetGroup): number;
    static SetArchitecture(targetGroup: UnityEditor.BuildTargetGroup, architecture: number): void;
    static GetScriptingBackend(targetGroup: UnityEditor.BuildTargetGroup): UnityEditor.ScriptingImplementation;
    static SetScriptingBackend(targetGroup: UnityEditor.BuildTargetGroup, backend: UnityEditor.ScriptingImplementation): void;
    static GetIncrementalIl2CppBuild(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static SetIncrementalIl2CppBuild(targetGroup: UnityEditor.BuildTargetGroup, enabled: boolean): void;
    static GetAdditionalIl2CppArgs(): string;
    static SetAdditionalIl2CppArgs(additionalArgs: string): void;
    static GetStackTraceLogType(logType: any): any;
    static SetStackTraceLogType(logType: any, stackTraceType: any): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static companyName: string;
    static productName: string;
    static showUnitySplashScreen: boolean;
    static splashScreenStyle: UnityEditor.SplashScreenStyle;
    static readonly cloudProjectId: string;
    static readonly productGUID: any;
    static colorSpace: any;
    static defaultScreenWidth: number;
    static defaultScreenHeight: number;
    static defaultWebScreenWidth: number;
    static defaultWebScreenHeight: number;
    static displayResolutionDialog: UnityEditor.ResolutionDialogSetting;
    static defaultIsFullScreen: boolean;
    static defaultIsNativeResolution: boolean;
    static runInBackground: boolean;
    static captureSingleScreen: boolean;
    static usePlayerLog: boolean;
    static resizableWindow: boolean;
    static bakeCollisionMeshes: boolean;
    static useMacAppStoreValidation: boolean;
    static macFullscreenMode: UnityEditor.MacFullscreenMode;
    static d3d9FullscreenMode: UnityEditor.D3D9FullscreenMode;
    static d3d11FullscreenMode: UnityEditor.D3D11FullscreenMode;
    static virtualRealitySupported: boolean;
    static singlePassStereoRendering: boolean;
    static stereoRenderingPath: UnityEditor.StereoRenderingPath;
    static protectGraphicsMemory: boolean;
    static visibleInBackground: boolean;
    static allowFullscreenSwitch: boolean;
    static forceSingleInstance: boolean;
    static openGLRequireES31: boolean;
    static openGLRequireES31AEP: boolean;
    static resolutionDialogBanner: any;
    static virtualRealitySplashScreen: any;
    static iPhoneBundleIdentifier: string;
    static keystorePass: string;
    static keyaliasPass: string;
    static xboxTitleId: string;
    static readonly xboxImageXexFilePath: string;
    static readonly xboxSpaFilePath: string;
    static readonly xboxGenerateSpa: boolean;
    static readonly xboxEnableGuest: boolean;
    static readonly xboxDeployKinectResources: boolean;
    static xboxDeployKinectHeadOrientation: boolean;
    static xboxDeployKinectHeadPosition: boolean;
    static readonly xboxSplashScreen: any;
    static xboxAdditionalTitleMemorySize: number;
    static readonly xboxEnableKinect: boolean;
    static readonly xboxEnableKinectAutoTracking: boolean;
    static readonly xboxEnableSpeech: boolean;
    static readonly xboxSpeechDB: number;
    static gpuSkinning: boolean;
    static graphicsJobs: boolean;
    static readonly xboxPIXTextureCapture: boolean;
    static readonly xboxEnableAvatar: boolean;
    static readonly xboxOneResolution: number;
    static enableInternalProfiler: boolean;
    static actionOnDotNetUnhandledException: UnityEditor.ActionOnDotNetUnhandledException;
    static logObjCUncaughtExceptions: boolean;
    static enableCrashReportAPI: boolean;
    static bundleIdentifier: string;
    static bundleVersion: string;
    static statusBarHidden: boolean;
    static strippingLevel: UnityEditor.StrippingLevel;
    static stripEngineCode: boolean;
    static defaultInterfaceOrientation: UnityEditor.UIOrientation;
    static allowedAutorotateToPortrait: boolean;
    static allowedAutorotateToPortraitUpsideDown: boolean;
    static allowedAutorotateToLandscapeRight: boolean;
    static allowedAutorotateToLandscapeLeft: boolean;
    static useAnimatedAutorotation: boolean;
    static use32BitDisplayBuffer: boolean;
    static apiCompatibilityLevel: UnityEditor.ApiCompatibilityLevel;
    static stripUnusedMeshComponents: boolean;
    static readonly advancedLicense: boolean;
    static aotOptions: string;
    static defaultCursor: any;
    static cursorHotspot: any;
    static accelerometerFrequency: number;
    static MTRendering: boolean;
    static mobileMTRendering: boolean;
    static useDirect3D11: boolean;
    static stereoscopic3D: boolean;
    static muteOtherAudioSources: boolean;
    static alwaysDisplayWatermark: boolean;
    static firstStreamedLevelWithResources: number;
    static targetGlesGraphics: UnityEditor.TargetGlesGraphics;
    static targetIOSGraphics: UnityEditor.TargetIOSGraphics;
    static locationUsageDescription: string;
    static renderingPath: any;
    static mobileRenderingPath: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class iOS {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static applicationDisplayName: string;
    static buildNumber: string;
    static scriptCallOptimization: UnityEditor.ScriptCallOptimizationLevel;
    static sdkVersion: UnityEditor.iOSSdkVersion;
    static targetOSVersion: UnityEditor.iOSTargetOSVersion;
    static targetOSVersionString: string;
    static targetDevice: UnityEditor.iOSTargetDevice;
    static prerenderedIcon: boolean;
    static requiresPersistentWiFi: boolean;
    static requiresFullScreen: boolean;
    static statusBarStyle: UnityEditor.iOSStatusBarStyle;
    static appInBackgroundBehavior: UnityEditor.iOSAppInBackgroundBehavior;
    static backgroundModes: UnityEditor.iOSBackgroundMode;
    static forceHardShadowsOnMetal: boolean;
    static allowHTTPDownload: boolean;
    static appleDeveloperTeamID: string;
    static cameraUsageDescription: string;
    static locationUsageDescription: string;
    static microphoneUsageDescription: string;
    static showActivityIndicatorOnLoading: UnityEditor.iOSShowActivityIndicatorOnLoading;
    static useOnDemandResources: boolean;
    static exitOnSuspend: boolean;
    static targetResolution: UnityEditor.iOSTargetResolution;
    static overrideIPodMusic: boolean;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class N3DS {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static disableDepthAndStencilBuffers: boolean;
    static disableStereoscopicView: boolean;
    static enableSharedListOpt: boolean;
    static enableVSync: boolean;
    static useExtSaveData: boolean;
    static compressStaticMem: boolean;
    static extSaveDataNumber: string;
    static stackSize: number;
    static targetPlatform: UnityEditor.PlayerSettings.N3DS.TargetPlatform;
    static region: UnityEditor.PlayerSettings.N3DS.Region;
    static mediaSize: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static logoStyle: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static title: string;
    static productCode: string;
    static applicationId: string;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class LogoStyle {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Nintendo: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static Distributed: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static iQue: UnityEditor.PlayerSettings.N3DS.LogoStyle;
    static Licensed: UnityEditor.PlayerSettings.N3DS.LogoStyle;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class MediaSize {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static _128MB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _256MB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _512MB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _1GB: UnityEditor.PlayerSettings.N3DS.MediaSize;
    static _2GB: UnityEditor.PlayerSettings.N3DS.MediaSize;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class Region {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Japan: UnityEditor.PlayerSettings.N3DS.Region;
    static America: UnityEditor.PlayerSettings.N3DS.Region;
    static Europe: UnityEditor.PlayerSettings.N3DS.Region;
    static China: UnityEditor.PlayerSettings.N3DS.Region;
    static Korea: UnityEditor.PlayerSettings.N3DS.Region;
    static Taiwan: UnityEditor.PlayerSettings.N3DS.Region;
    static All: UnityEditor.PlayerSettings.N3DS.Region;
  }
}
declare namespace UnityEditor.PlayerSettings.N3DS {
  class TargetPlatform {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Nintendo3DS: UnityEditor.PlayerSettings.N3DS.TargetPlatform;
    static NewNintendo3DS: UnityEditor.PlayerSettings.N3DS.TargetPlatform;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class PS4 {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static npTrophyPackPath: string;
    static npAgeRating: number;
    static npTitleSecret: string;
    static parentalLevel: number;
    static applicationParameter1: number;
    static applicationParameter2: number;
    static applicationParameter3: number;
    static applicationParameter4: number;
    static passcode: string;
    static monoEnv: string;
    static playerPrefsSupport: boolean;
    static restrictedAudioUsageRights: boolean;
    static useResolutionFallback: boolean;
    static contentID: string;
    static category: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
    static appType: number;
    static masterVersion: string;
    static appVersion: string;
    static remotePlayKeyAssignment: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static remotePlayKeyMappingDir: string;
    static playTogetherPlayerCount: number;
    static enterButtonAssignment: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
    static paramSfxPath: string;
    static videoOutPixelFormat: number;
    static videoOutInitialWidth: number;
    static videoOutReprojectionRate: number;
    static videoOutResolution: number;
    static PronunciationXMLPath: string;
    static PronunciationSIGPath: string;
    static BackgroundImagePath: string;
    static StartupImagePath: string;
    static SaveDataImagePath: string;
    static SdkOverride: string;
    static BGMPath: string;
    static ShareFilePath: string;
    static ShareOverlayImagePath: string;
    static PrivacyGuardImagePath: string;
    static patchDayOne: boolean;
    static PatchPkgPath: string;
    static PatchLatestPkgPath: string;
    static PatchChangeinfoPath: string;
    static NPtitleDatPath: string;
    static pnSessions: boolean;
    static pnPresence: boolean;
    static pnFriends: boolean;
    static pnGameCustomData: boolean;
    static downloadDataSize: number;
    static garlicHeapSize: number;
    static reprojectionSupport: boolean;
    static useAudio3dBackend: boolean;
    static audio3dVirtualSpeakerCount: number;
    static scriptOptimizationLevel: number;
    static socialScreenEnabled: number;
    static attribUserManagement: boolean;
    static attribMoveSupport: boolean;
    static attrib3DSupport: boolean;
    static attribShareSupport: boolean;
    static attribExclusiveVR: boolean;
    static disableAutoHideSplash: boolean;
    static attribCpuUsage: number;
    static includedModules: string[];
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PS4AppCategory {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Application: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
    static Patch: UnityEditor.PlayerSettings.PS4.PS4AppCategory;
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PS4EnterButtonAssignment {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CircleButton: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
    static CrossButton: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
  }
}
declare namespace UnityEditor.PlayerSettings.PS4 {
  class PS4RemotePlayKeyAssignment {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternA: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternB: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternC: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternD: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternE: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternF: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternG: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
    static PatternH: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class PSM {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class PSVita {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static npTrophyPackPath: string;
    static powerMode: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    static acquireBGM: boolean;
    static npSupportGBMorGJP: boolean;
    static tvBootMode: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    static tvDisableEmu: boolean;
    static upgradable: boolean;
    static healthWarning: boolean;
    static useLibLocation: boolean;
    static infoBarOnStartup: boolean;
    static infoBarColor: boolean;
    static enterButtonAssignment: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    static saveDataQuota: number;
    static parentalLevel: number;
    static shortTitle: string;
    static contentID: string;
    static category: UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory;
    static masterVersion: string;
    static appVersion: string;
    static AllowTwitterDialog: boolean;
    static npAgeRating: number;
    static npTitleDatPath: string;
    static npCommunicationsID: string;
    static npCommsPassphrase: string;
    static npCommsSig: string;
    static paramSfxPath: string;
    static manualPath: string;
    static liveAreaGatePath: string;
    static liveAreaBackroundPath: string;
    static liveAreaPath: string;
    static liveAreaTrialPath: string;
    static patchChangeInfoPath: string;
    static patchOriginalPackage: string;
    static packagePassword: string;
    static keystoneFile: string;
    static memoryExpansionMode: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static drmType: UnityEditor.PlayerSettings.PSVita.PSVitaDRMType;
    static storageType: number;
    static mediaCapacity: number;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaAppCategory {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Application: UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory;
    static ApplicationPatch: UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaDRMType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PaidFor: UnityEditor.PlayerSettings.PSVita.PSVitaDRMType;
    static Free: UnityEditor.PlayerSettings.PSVita.PSVitaDRMType;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaEnterButtonAssignment {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    static CircleButton: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
    static CrossButton: UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaMemoryExpansionMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static ExpandBy29MB: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static ExpandBy77MB: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
    static ExpandBy109MB: UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaPowerMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ModeA: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    static ModeB: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
    static ModeC: UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode;
  }
}
declare namespace UnityEditor.PlayerSettings.PSVita {
  class PSVitaTvBootMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    static PSVitaBootablePSVitaTvBootable: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
    static PSVitaBootablePSVitaTvNotBootable: UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class SamsungTV {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static deviceAddress: string;
    static productDescription: string;
    static productAuthor: string;
    static productAuthorEmail: string;
    static productLink: string;
    static productCategory: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings.SamsungTV {
  class SamsungTVProductCategories {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Games: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Videos: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Sports: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Lifestyle: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Information: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Education: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
    static Kids: UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories;
  }
}
declare namespace UnityEditor.PlayerSettings.SplashScreen {
  class AnimationMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Static: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    static Dolly: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    static Custom: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class SplashScreen {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static animationMode: UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
    static animationBackgroundZoom: number;
    static animationLogoZoom: number;
    static background: any;
    static backgroundPortrait: any;
    static backgroundColor: any;
    static drawMode: UnityEditor.PlayerSettings.SplashScreen.DrawMode;
    static logos: UnityEditor.PlayerSettings.SplashScreenLogo[];
    static overlayOpacity: number;
    static show: boolean;
    static showUnityLogo: boolean;
    static unityLogoStyle: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings.SplashScreen {
  class DrawMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static UnityLogoBelow: UnityEditor.PlayerSettings.SplashScreen.DrawMode;
    static AllSequential: UnityEditor.PlayerSettings.SplashScreen.DrawMode;
  }
}
declare namespace UnityEditor.PlayerSettings.SplashScreen {
  class UnityLogoStyle {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DarkOnLight: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
    static LightOnDark: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class SplashScreenLogo {
    // constructors
    private constructor();
    // methods
    static Create(duration: number): UnityEditor.PlayerSettings.SplashScreenLogo;
    static Create(): UnityEditor.PlayerSettings.SplashScreenLogo;
    static Create(duration: number, logo: any): UnityEditor.PlayerSettings.SplashScreenLogo;
    static CreateWithUnityLogo(): UnityEditor.PlayerSettings.SplashScreenLogo;
    static CreateWithUnityLogo(duration: number): UnityEditor.PlayerSettings.SplashScreenLogo;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    logo: any;
    static readonly unityLogo: any;
    duration: number;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class Tizen {
    // constructors
    constructor();
    // methods
    static SetCapability(capability: UnityEditor.PlayerSettings.TizenCapability, value: boolean): void;
    static GetCapability(capability: UnityEditor.PlayerSettings.TizenCapability): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static productDescription: string;
    static productURL: string;
    static signingProfileName: string;
    static deploymentTarget: string;
    static deploymentTargetType: number;
    static minOSVersion: UnityEditor.TizenOSVersion;
    static showActivityIndicatorOnLoading: UnityEditor.TizenShowActivityIndicatorOnLoading;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class TizenCapability {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Location: UnityEditor.PlayerSettings.TizenCapability;
    static DataSharing: UnityEditor.PlayerSettings.TizenCapability;
    static NetworkGet: UnityEditor.PlayerSettings.TizenCapability;
    static WifiDirect: UnityEditor.PlayerSettings.TizenCapability;
    static CallHistoryRead: UnityEditor.PlayerSettings.TizenCapability;
    static Power: UnityEditor.PlayerSettings.TizenCapability;
    static ContactWrite: UnityEditor.PlayerSettings.TizenCapability;
    static MessageWrite: UnityEditor.PlayerSettings.TizenCapability;
    static ContentWrite: UnityEditor.PlayerSettings.TizenCapability;
    static Push: UnityEditor.PlayerSettings.TizenCapability;
    static AccountRead: UnityEditor.PlayerSettings.TizenCapability;
    static ExternalStorage: UnityEditor.PlayerSettings.TizenCapability;
    static Recorder: UnityEditor.PlayerSettings.TizenCapability;
    static PackageManagerInfo: UnityEditor.PlayerSettings.TizenCapability;
    static NFCCardEmulation: UnityEditor.PlayerSettings.TizenCapability;
    static CalendarWrite: UnityEditor.PlayerSettings.TizenCapability;
    static WindowPrioritySet: UnityEditor.PlayerSettings.TizenCapability;
    static VolumeSet: UnityEditor.PlayerSettings.TizenCapability;
    static CallHistoryWrite: UnityEditor.PlayerSettings.TizenCapability;
    static AlarmSet: UnityEditor.PlayerSettings.TizenCapability;
    static Call: UnityEditor.PlayerSettings.TizenCapability;
    static Email: UnityEditor.PlayerSettings.TizenCapability;
    static ContactRead: UnityEditor.PlayerSettings.TizenCapability;
    static Shortcut: UnityEditor.PlayerSettings.TizenCapability;
    static KeyManager: UnityEditor.PlayerSettings.TizenCapability;
    static LED: UnityEditor.PlayerSettings.TizenCapability;
    static NetworkProfile: UnityEditor.PlayerSettings.TizenCapability;
    static AlarmGet: UnityEditor.PlayerSettings.TizenCapability;
    static Display: UnityEditor.PlayerSettings.TizenCapability;
    static CalendarRead: UnityEditor.PlayerSettings.TizenCapability;
    static NFC: UnityEditor.PlayerSettings.TizenCapability;
    static AccountWrite: UnityEditor.PlayerSettings.TizenCapability;
    static Bluetooth: UnityEditor.PlayerSettings.TizenCapability;
    static Notification: UnityEditor.PlayerSettings.TizenCapability;
    static NetworkSet: UnityEditor.PlayerSettings.TizenCapability;
    static ExternalStorageAppData: UnityEditor.PlayerSettings.TizenCapability;
    static Download: UnityEditor.PlayerSettings.TizenCapability;
    static Telephony: UnityEditor.PlayerSettings.TizenCapability;
    static MessageRead: UnityEditor.PlayerSettings.TizenCapability;
    static MediaStorage: UnityEditor.PlayerSettings.TizenCapability;
    static Internet: UnityEditor.PlayerSettings.TizenCapability;
    static Camera: UnityEditor.PlayerSettings.TizenCapability;
    static Haptic: UnityEditor.PlayerSettings.TizenCapability;
    static AppManagerLaunch: UnityEditor.PlayerSettings.TizenCapability;
    static SystemSettings: UnityEditor.PlayerSettings.TizenCapability;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class tvOS {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static sdkVersion: UnityEditor.tvOSSdkVersion;
    static targetOSVersion: UnityEditor.tvOSTargetOSVersion;
    static targetOSVersionString: string;
    static requireExtendedGameController: boolean;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WebGL {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static memorySize: number;
    static exceptionSupport: UnityEditor.WebGLExceptionSupport;
    static dataCaching: boolean;
    static emscriptenArgs: string;
    static modulesDirectory: string;
    static template: string;
    static analyzeBuildSize: boolean;
    static useEmbeddedResources: boolean;
    static useWasm: boolean;
    static compressionFormat: UnityEditor.WebGLCompressionFormat;
    static debugSymbols: boolean;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WiiU {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static titleID: string;
    static groupID: string;
    static commonSaveSize: number;
    static accountSaveSize: number;
    static olvAccessKey: string;
    static tinCode: string;
    static joinGameId: string;
    static joinGameModeMask: string;
    static commonBossSize: number;
    static accountBossSize: number;
    static addOnUniqueIDs: string[];
    static supportsNunchuk: boolean;
    static supportsClassicController: boolean;
    static supportsBalanceBoard: boolean;
    static supportsMotionPlus: boolean;
    static supportsProController: boolean;
    static allowScreenCapture: boolean;
    static controllerCount: number;
    static mainThreadStackSize: number;
    static loaderThreadStackSize: number;
    static systemHeapSize: number;
    static tvResolution: UnityEditor.WiiUTVResolution;
    static readonly tvStartupScreen: any;
    static readonly gamePadStartupScreen: any;
    static gamePadMSAA: number;
    static profilerLibraryPath: string;
    static drcBufferDisabled: boolean;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSA {
    // constructors
    constructor();
    // methods
    static SetCertificate(path: string, password: string): boolean;
    static GetVisualAssetsImage(type: UnityEditor.PlayerSettings.WSAImageType, scale: UnityEditor.PlayerSettings.WSAImageScale): string;
    static SetVisualAssetsImage(image: string, type: UnityEditor.PlayerSettings.WSAImageType, scale: UnityEditor.PlayerSettings.WSAImageScale): void;
    static SetCapability(capability: UnityEditor.PlayerSettings.WSACapability, value: boolean): void;
    static GetCapability(capability: UnityEditor.PlayerSettings.WSACapability): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static packageName: string;
    static packageLogo: string;
    static packageLogo140: string;
    static packageLogo180: string;
    static packageLogo240: string;
    static commandLineArgsFile: string;
    static readonly certificatePath: string;
    static readonly certificateSubject: string;
    static readonly certificateIssuer: string;
    static applicationDescription: string;
    static storeTileLogo80: string;
    static storeTileLogo: string;
    static storeTileLogo140: string;
    static storeTileLogo180: string;
    static storeTileWideLogo80: string;
    static storeTileWideLogo: string;
    static storeTileWideLogo140: string;
    static storeTileWideLogo180: string;
    static storeTileSmallLogo80: string;
    static storeTileSmallLogo: string;
    static storeTileSmallLogo140: string;
    static storeTileSmallLogo180: string;
    static storeSmallTile80: string;
    static storeSmallTile: string;
    static storeSmallTile140: string;
    static storeSmallTile180: string;
    static storeLargeTile80: string;
    static storeLargeTile: string;
    static storeLargeTile140: string;
    static storeLargeTile180: string;
    static storeSplashScreenImage: string;
    static storeSplashScreenImageScale140: string;
    static storeSplashScreenImageScale180: string;
    static phoneAppIcon: string;
    static phoneAppIcon140: string;
    static phoneAppIcon240: string;
    static phoneSmallTile: string;
    static phoneSmallTile140: string;
    static phoneSmallTile240: string;
    static phoneMediumTile: string;
    static phoneMediumTile140: string;
    static phoneMediumTile240: string;
    static phoneWideTile: string;
    static phoneWideTile140: string;
    static phoneWideTile240: string;
    static phoneSplashScreenImage: string;
    static phoneSplashScreenImageScale140: string;
    static phoneSplashScreenImageScale240: string;
    static tileShortName: string;
    static tileShowName: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static mediumTileShowName: boolean;
    static largeTileShowName: boolean;
    static wideTileShowName: boolean;
    static defaultTileSize: UnityEditor.PlayerSettings.WSADefaultTileSize;
    static compilationOverrides: UnityEditor.PlayerSettings.WSACompilationOverrides;
    static tileForegroundText: UnityEditor.PlayerSettings.WSAApplicationForegroundText;
    static tileBackgroundColor: any;
    static enableIndependentInputSource: boolean;
    static inputSource: UnityEditor.PlayerSettings.WSAInputSource;
    static enableLowLatencyPresentationAPI: boolean;
    static packageVersion: any;
    static readonly certificateNotAfter: any;
    static splashScreenBackgroundColor: any;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings.WSA {
  class Declarations {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static protocolName: string;
    static fileTypeAssociations: UnityEditor.PlayerSettings.WSAFileTypeAssociations;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAApplicationForegroundText {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Light: UnityEditor.PlayerSettings.WSAApplicationForegroundText;
    static Dark: UnityEditor.PlayerSettings.WSAApplicationForegroundText;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAApplicationShowName {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotSet: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static AllLogos: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static NoLogos: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static StandardLogoOnly: UnityEditor.PlayerSettings.WSAApplicationShowName;
    static WideLogoOnly: UnityEditor.PlayerSettings.WSAApplicationShowName;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSACapability {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static EnterpriseAuthentication: UnityEditor.PlayerSettings.WSACapability;
    static InternetClient: UnityEditor.PlayerSettings.WSACapability;
    static InternetClientServer: UnityEditor.PlayerSettings.WSACapability;
    static MusicLibrary: UnityEditor.PlayerSettings.WSACapability;
    static PicturesLibrary: UnityEditor.PlayerSettings.WSACapability;
    static PrivateNetworkClientServer: UnityEditor.PlayerSettings.WSACapability;
    static RemovableStorage: UnityEditor.PlayerSettings.WSACapability;
    static SharedUserCertificates: UnityEditor.PlayerSettings.WSACapability;
    static VideosLibrary: UnityEditor.PlayerSettings.WSACapability;
    static WebCam: UnityEditor.PlayerSettings.WSACapability;
    static Proximity: UnityEditor.PlayerSettings.WSACapability;
    static Microphone: UnityEditor.PlayerSettings.WSACapability;
    static Location: UnityEditor.PlayerSettings.WSACapability;
    static HumanInterfaceDevice: UnityEditor.PlayerSettings.WSACapability;
    static AllJoyn: UnityEditor.PlayerSettings.WSACapability;
    static BlockedChatMessages: UnityEditor.PlayerSettings.WSACapability;
    static Chat: UnityEditor.PlayerSettings.WSACapability;
    static CodeGeneration: UnityEditor.PlayerSettings.WSACapability;
    static Objects3D: UnityEditor.PlayerSettings.WSACapability;
    static PhoneCall: UnityEditor.PlayerSettings.WSACapability;
    static UserAccountInformation: UnityEditor.PlayerSettings.WSACapability;
    static VoipCall: UnityEditor.PlayerSettings.WSACapability;
    static Bluetooth: UnityEditor.PlayerSettings.WSACapability;
    static SpatialPerception: UnityEditor.PlayerSettings.WSACapability;
    static InputInjectionBrokered: UnityEditor.PlayerSettings.WSACapability;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSACompilationOverrides {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.PlayerSettings.WSACompilationOverrides;
    static UseNetCore: UnityEditor.PlayerSettings.WSACompilationOverrides;
    static UseNetCorePartially: UnityEditor.PlayerSettings.WSACompilationOverrides;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSADefaultTileSize {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotSet: UnityEditor.PlayerSettings.WSADefaultTileSize;
    static Medium: UnityEditor.PlayerSettings.WSADefaultTileSize;
    static Wide: UnityEditor.PlayerSettings.WSADefaultTileSize;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAFileTypeAssociations {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    supportedFileTypes: UnityEditor.PlayerSettings.WSASupportedFileType[];
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAImageScale {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static _80: UnityEditor.PlayerSettings.WSAImageScale;
    static _100: UnityEditor.PlayerSettings.WSAImageScale;
    static _125: UnityEditor.PlayerSettings.WSAImageScale;
    static _140: UnityEditor.PlayerSettings.WSAImageScale;
    static _150: UnityEditor.PlayerSettings.WSAImageScale;
    static _180: UnityEditor.PlayerSettings.WSAImageScale;
    static _200: UnityEditor.PlayerSettings.WSAImageScale;
    static _240: UnityEditor.PlayerSettings.WSAImageScale;
    static _400: UnityEditor.PlayerSettings.WSAImageScale;
    static Target16: UnityEditor.PlayerSettings.WSAImageScale;
    static Target24: UnityEditor.PlayerSettings.WSAImageScale;
    static Target32: UnityEditor.PlayerSettings.WSAImageScale;
    static Target48: UnityEditor.PlayerSettings.WSAImageScale;
    static Target256: UnityEditor.PlayerSettings.WSAImageScale;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAImageType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PackageLogo: UnityEditor.PlayerSettings.WSAImageType;
    static SplashScreenImage: UnityEditor.PlayerSettings.WSAImageType;
    static StoreTileLogo: UnityEditor.PlayerSettings.WSAImageType;
    static StoreTileWideLogo: UnityEditor.PlayerSettings.WSAImageType;
    static StoreTileSmallLogo: UnityEditor.PlayerSettings.WSAImageType;
    static StoreSmallTile: UnityEditor.PlayerSettings.WSAImageType;
    static StoreLargeTile: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneAppIcon: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneSmallTile: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneMediumTile: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneWideTile: UnityEditor.PlayerSettings.WSAImageType;
    static PhoneSplashScreen: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare44x44Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare71x71Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare150x150Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPSquare310x310Logo: UnityEditor.PlayerSettings.WSAImageType;
    static UWPWide310x150Logo: UnityEditor.PlayerSettings.WSAImageType;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSAInputSource {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CoreWindow: UnityEditor.PlayerSettings.WSAInputSource;
    static IndependentInputSource: UnityEditor.PlayerSettings.WSAInputSource;
    static SwapChainPanel: UnityEditor.PlayerSettings.WSAInputSource;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class WSASupportedFileType {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    contentType: string;
    fileType: string;
  }
}
declare namespace UnityEditor.PlayerSettings {
  class XboxOne {
    // constructors
    constructor();
    // methods
    static SetCapability(capability: string, value: boolean): void;
    static GetCapability(capability: string): boolean;
    static SetSupportedLanguage(language: string, enabled: boolean): void;
    static GetSupportedLanguage(language: string): boolean;
    static RemoveSocketDefinition(name: string): void;
    static SetSocketDefinition(name: string, port: string, protocol: number, usages: number[], templateName: string, sessionRequirment: number, deviceUsages: number[]): void;
    static GetSocketDefinition(name: string, port: any, protocol: any, usages: any, templateName: any, sessionRequirment: any, deviceUsages: any): void;
    static RemoveAllowedProductId(id: string): void;
    static AddAllowedProductId(id: string): boolean;
    static UpdateAllowedProductId(idx: number, id: string): void;
    static SetGameRating(name: string, value: number): void;
    static GetGameRating(name: string): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static defaultLoggingLevel: UnityEditor.XboxOneLoggingLevel;
    static ProductId: string;
    static UpdateKey: string;
    static SandboxId: string;
    static ContentId: string;
    static TitleId: string;
    static SCID: string;
    static EnableVariableGPU: boolean;
    static DisableKinectGpuReservation: boolean;
    static EnablePIXSampling: boolean;
    static GameOsOverridePath: string;
    static PackagingOverridePath: string;
    static PackagingEncryption: UnityEditor.XboxOneEncryptionLevel;
    static PackageUpdateGranularity: UnityEditor.XboxOnePackageUpdateGranularity;
    static AppManifestOverridePath: string;
    static IsContentPackage: boolean;
    static Version: string;
    static Description: string;
    static readonly SocketNames: string[];
    static readonly AllowedProductIds: string[];
    static PersistentLocalStorageSize: number;
    static monoLoggingLevel: number;
    // fields
  }
}
declare namespace UnityEditor {
  class PlayerSettingsEditor {
    // constructors
    constructor();
    // methods
    FindPropertyAssert(name: string): UnityEditor.SerializedProperty;
    UseDefaultMargins(): boolean;
    OnInspectorGUI(): void;
    BeginSettingsBox(nr: number, header: any): boolean;
    EndSettingsBox(): void;
    ShowSharedNote(): void;
    ResolutionSectionGUI(targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension): void;
    DebugAndCrashReportingGUI(platform: UnityEditor.BuildPlayerWindow.BuildPlatform, targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension): void;
    static BuildDisabledEnumPopup(selected: any, uiString: any): void;
    OtherSectionGUI(platform: UnityEditor.BuildPlayerWindow.BuildPlatform, targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension): void;
    BrowseablePathProperty(propertyLabel: string, property: UnityEditor.SerializedProperty, browsePanelTitle: string, extension: string, dir: string): void;
    PublishSectionGUI(targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static defaultIsFullScreen: any;
    m_VRSettings: UnityEditorInternal.VR.PlayerSettingsEditorVR;
  }
}
declare namespace UnityEditor.PlayerSettingsEditor {
  class FakeEnum {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static WiiUSubset: UnityEditor.PlayerSettingsEditor.FakeEnum;
    static WSASubset: UnityEditor.PlayerSettingsEditor.FakeEnum;
  }
}
declare namespace UnityEditor.PlayerSettingsEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static categoryBox: any;
    static colorSpaceWindowsWarning: any;
    static colorSpaceAndroidWarning: any;
    static colorSpaceWebGLWarning: any;
    static colorSpaceIOSWarning: any;
    static colorSpaceTVOSWarning: any;
    static cursorHotspot: any;
    static defaultCursor: any;
    static defaultIcon: any;
    static vertexChannelCompressionMask: any;
    static require31: any;
    static requireAEP: any;
    static kStereoRenderingMethodsAll: any[];
  }
}
declare namespace UnityEditor {
  class PlayerSettingsSplashScreenEditor {
    // constructors
    constructor(owner: UnityEditor.PlayerSettingsEditor);
    // methods
    OnEnable(): void;
    SplashSectionGUI(platform: UnityEditor.BuildPlayerWindow.BuildPlatform, targetGroup: UnityEditor.BuildTargetGroup, settingsExtension: UnityEditor.Modules.ISettingEditorExtension): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly licenseAllowsDisabling: boolean;
    // fields
  }
}
declare namespace UnityEditor.PlayerSettingsSplashScreenEditor {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    animate: any;
    backgroundColor: any;
    backgroundImage: any;
    backgroundPortraitImage: any;
    backgroundTitle: any;
    backgroundZoom: any;
    configDialogBanner: any;
    drawMode: any;
    logoDuration: any;
    logosTitle: any;
    logoZoom: any;
    overlayOpacity: any;
    previewSplash: any;
    showLogo: any;
    showSplash: any;
    splashStyle: any;
    splashTitle: any;
    title: any;
    vrSplashScreen: any;
  }
}
declare namespace UnityEditor {
  class PListConfig {
    // constructors
    constructor(fileName: string);
    // methods
    Save(): void;
    Clear(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    get_Item(paramName: string): string;
    set_Item(paramName: string, value: string): void;
    // fields
  }
}
declare namespace UnityEditor {
  class PluginImporter {
    // constructors
    constructor();
    // methods
    ClearSettings(): void;
    SetCompatibleWithAnyPlatform(enable: boolean): void;
    GetCompatibleWithAnyPlatform(): boolean;
    SetExcludeFromAnyPlatform(platformName: string, excludedFromAny: boolean): void;
    GetExcludeFromAnyPlatform(platformName: string): boolean;
    SetExcludeFromAnyPlatform(platform: UnityEditor.BuildTarget, excludedFromAny: boolean): void;
    GetExcludeFromAnyPlatform(platform: UnityEditor.BuildTarget): boolean;
    SetExcludeEditorFromAnyPlatform(excludedFromAny: boolean): void;
    GetExcludeEditorFromAnyPlatform(): boolean;
    SetCompatibleWithEditor(enable: boolean): void;
    GetCompatibleWithEditor(): boolean;
    GetIsOverridable(): boolean;
    ShouldIncludeInBuild(): boolean;
    SetCompatibleWithPlatform(platform: UnityEditor.BuildTarget, enable: boolean): void;
    GetCompatibleWithPlatform(platform: UnityEditor.BuildTarget): boolean;
    SetCompatibleWithPlatform(platformName: string, enable: boolean): void;
    GetCompatibleWithPlatform(platformName: string): boolean;
    SetPlatformData(platform: UnityEditor.BuildTarget, key: string, value: string): void;
    GetPlatformData(platform: UnityEditor.BuildTarget, key: string): string;
    SetPlatformData(platformName: string, key: string, value: string): void;
    GetPlatformData(platformName: string, key: string): string;
    SetEditorData(key: string, value: string): void;
    GetEditorData(key: string): string;
    static GetAllImporters(): UnityEditor.PluginImporter[];
    static GetImporters(platformName: string): UnityEditor.PluginImporter[];
    static GetImporters(platform: UnityEditor.BuildTarget): UnityEditor.PluginImporter[];
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly isNativePlugin: boolean;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PluginImporterInspector {
  class Compatibility {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mixed: UnityEditor.PluginImporterInspector.Compatibility;
    static NotCompatible: UnityEditor.PluginImporterInspector.Compatibility;
    static Compatible: UnityEditor.PluginImporterInspector.Compatibility;
  }
}
declare namespace UnityEditor {
  class PluginImporterInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PointEditor {
    // constructors
    constructor();
    // methods
    static MovePoints(points: UnityEditor.IEditablePoint, cloudTransform: any, selection: any): boolean;
    static FindNearest(point: any, cloudTransform: any, points: UnityEditor.IEditablePoint): number;
    static SelectPoints(points: UnityEditor.IEditablePoint, cloudTransform: any, selection: any, firstSelect: boolean): boolean;
    static Draw(points: UnityEditor.IEditablePoint, cloudTransform: any, selection: any, twoPassDrawing: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PointEffector2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PolygonCollider2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnDisable(): void;
    FinalizeInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PolygonEditor {
    // constructors
    constructor();
    // methods
    static StartEditing(collider: any): void;
    static ApplyEditing(collider: any): void;
    static StopEditing(): void;
    static GetNearestPoint(point: any, pathIndex: any, pointIndex: any, distance: any): boolean;
    static GetNearestEdge(point: any, pathIndex: any, pointIndex0: any, pointIndex1: any, distance: any, loop: boolean): boolean;
    static GetPathCount(): number;
    static GetPointCount(pathIndex: number): number;
    static GetPoint(pathIndex: number, pointIndex: number, point: any): boolean;
    static SetPoint(pathIndex: number, pointIndex: number, value: any): void;
    static InsertPoint(pathIndex: number, pointIndex: number, value: any): void;
    static RemovePoint(pathIndex: number, pointIndex: number): void;
    static TestPointMove(pathIndex: number, pointIndex: number, movePosition: any, leftIntersect: any, rightIntersect: any, loop: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PolygonEditorUtility {
    // constructors
    constructor();
    // methods
    Reset(): void;
    StartEditing(collider: any): void;
    StopEditing(): void;
    OnSceneGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PopupList {
    // constructors
    constructor(inputData: UnityEditor.PopupList.InputData);
    constructor(inputData: UnityEditor.PopupList.InputData, initialSelectionLabel: string);
    // methods
    OnClose(): void;
    GetWindowHeight(): number;
    GetWindowWidth(): number;
    GetWindowSize(): any;
    OnGUI(windowRect: any): void;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.PopupList {
  class Gravity {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Top: UnityEditor.PopupList.Gravity;
    static Bottom: UnityEditor.PopupList.Gravity;
  }
}
declare namespace UnityEditor.PopupList {
  class InputData {
    // constructors
    constructor();
    // methods
    DeselectAll(): void;
    ResetScores(): void;
    BuildQuery(prefix: string): any;
    GetFilteredList(prefix: string): any;
    GetFilteredCount(prefix: string): number;
    NewOrMatchingElement(label: string): UnityEditor.PopupList.ListElement;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListElements: any;
    m_CloseOnSelection: boolean;
    m_AllowCustom: boolean;
    m_EnableAutoCompletion: boolean;
    m_SortAlphabetically: boolean;
    m_OnSelectCallback: ((UnityEditor.PopupList.ListElement) => void);
    m_MaxCount: number;
  }
}
declare namespace UnityEditor.PopupList {
  class ListElement {
    // constructors
    constructor(text: string, selected: boolean, score: number);
    constructor(text: string, selected: boolean);
    constructor(text: string);
    // methods
    ResetScore(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    filterScore: number;
    selected: boolean;
    enabled: boolean;
    partiallySelected: boolean;
    text: string;
    // fields
    m_Content: any;
  }
}
declare namespace UnityEditor.PopupList {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    menuItem: any;
    menuItemMixed: any;
    label: any;
    background: any;
    customTextField: any;
    customTextFieldCancelButton: any;
    customTextFieldCancelButtonEmpty: any;
  }
}
declare namespace UnityEditor {
  class PopupLocationHelper {
    // constructors
    private constructor();
    // methods
    static GetDropDownRect(buttonRect: any, minSize: any, maxSize: any, popupContainerWindow: UnityEditor.ContainerWindow): any;
    static GetDropDownRect(buttonRect: any, minSize: any, maxSize: any, popupContainerWindow: UnityEditor.ContainerWindow, locationPriorityOrder: UnityEditor.PopupLocationHelper.PopupLocation[]): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.PopupLocationHelper {
  class PopupLocation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Below: UnityEditor.PopupLocationHelper.PopupLocation;
    static Above: UnityEditor.PopupLocationHelper.PopupLocation;
    static Left: UnityEditor.PopupLocationHelper.PopupLocation;
    static Right: UnityEditor.PopupLocationHelper.PopupLocation;
  }
}
declare namespace UnityEditor {
  class PopupWindow {
    // constructors
    private constructor();
    // methods
    static Show(activatorRect: any, windowContent: UnityEditor.PopupWindowContent): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PopupWindowContent {
    // constructors
    private constructor();
    // methods
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor {
  class PopupWindowContentForNewLibrary {
    // constructors
    constructor(createLibraryCallback: ((string, UnityEditor.PresetFileLocation) => string));
    // methods
    OnGUI(rect: any): void;
    GetWindowSize(): any;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.PopupWindowContentForNewLibrary {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    header: any;
    name: any;
    location: any;
    fileLocations: any[];
    fileLocationOrder: UnityEditor.PresetFileLocation[];
  }
}
declare namespace UnityEditor {
  class PopupWindowWithoutFocus {
    // constructors
    constructor();
    // methods
    static Show(activatorRect: any, windowContent: UnityEditor.PopupWindowContent): void;
    static IsVisible(): boolean;
    static Hide(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PostProcessAttribute {
    // constructors
    private constructor();
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PostprocessBuildPlayer {
    // constructors
    constructor();
    // methods
    static GetScriptLayoutFileFromBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget, installPath: string, fileName: string): string;
    static PrepareForBuild(options: UnityEditor.BuildOptions, target: UnityEditor.BuildTarget): string;
    static SupportsScriptsOnlyBuild(target: UnityEditor.BuildTarget): boolean;
    static GetExtensionForBuildTarget(target: UnityEditor.BuildTarget, options: UnityEditor.BuildOptions): string;
    static SupportsInstallInBuildFolder(target: UnityEditor.BuildTarget): boolean;
    static Launch(target: UnityEditor.BuildTarget, path: string, productName: string, options: UnityEditor.BuildOptions): void;
    static Postprocess(target: UnityEditor.BuildTarget, installPath: string, companyName: string, productName: string, width: number, height: number, downloadWebplayerUrl: string, manualDownloadWebplayerUrl: string, options: UnityEditor.BuildOptions, usedClassRegistry: UnityEditor.RuntimeClassRegistry, report: UnityEditor.BuildReporting.BuildReport): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly subDir32Bit: string;
    static readonly subDir64Bit: string;
    // fields
  }
}
declare namespace UnityEditor {
  class PostprocessScene {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.PostprocessScene {
  class UnityBuildPostprocessor {
    // constructors
    constructor();
    // methods
    static OnPostprocessScene(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PragmaFixingWindow {
    // constructors
    constructor();
    // methods
    static ShowWindow(paths: string[]): void;
    SetPaths(paths: string[]): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PragmaFixingWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    selected: any;
    box: any;
    button: any;
  }
}
declare namespace UnityEditor {
  class PrefabInspector {
    // constructors
    constructor();
    // methods
    static OnOverridenPrefabsInspector(gameObject: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PrefabType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.PrefabType;
    static Prefab: UnityEditor.PrefabType;
    static ModelPrefab: UnityEditor.PrefabType;
    static PrefabInstance: UnityEditor.PrefabType;
    static ModelPrefabInstance: UnityEditor.PrefabType;
    static MissingPrefabInstance: UnityEditor.PrefabType;
    static DisconnectedPrefabInstance: UnityEditor.PrefabType;
    static DisconnectedModelPrefabInstance: UnityEditor.PrefabType;
  }
}
declare namespace UnityEditor {
  class PrefabUtility {
    // constructors
    constructor();
    // methods
    static GetPrefabParent(source: any): any;
    static GetPrefabObject(targetObject: any): any;
    static GetPropertyModifications(targetPrefab: any): UnityEditor.PropertyModification[];
    static SetPropertyModifications(targetPrefab: any, modifications: UnityEditor.PropertyModification[]): void;
    static InstantiateAttachedAsset(targetObject: any): any;
    static RecordPrefabInstancePropertyModifications(targetObject: any): void;
    static MergeAllPrefabInstances(targetObject: any): void;
    static DisconnectPrefabInstance(targetObject: any): void;
    static InstantiatePrefab(target: any): any;
    static InstantiatePrefab(target: any, destinationScene: any): any;
    static CreateEmptyPrefab(path: string): any;
    static CreatePrefab(path: string, go: any, options: UnityEditor.ReplacePrefabOptions): any;
    static CreatePrefab(path: string, go: any): any;
    static ReplacePrefab(go: any, targetPrefab: any, options: UnityEditor.ReplacePrefabOptions): any;
    static ReplacePrefab(go: any, targetPrefab: any): any;
    static ConnectGameObjectToPrefab(go: any, sourcePrefab: any): any;
    static FindRootGameObjectWithSameParentPrefab(target: any): any;
    static FindValidUploadPrefabInstanceRoot(target: any): any;
    static ReconnectToLastPrefab(go: any): boolean;
    static ResetToPrefabState(obj: any): boolean;
    static IsComponentAddedToPrefabInstance(source: any): boolean;
    static RevertPrefabInstance(go: any): boolean;
    static GetPrefabType(target: any): UnityEditor.PrefabType;
    static FindPrefabRoot(source: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static prefabInstanceUpdated: ((any) => void);
  }
}
declare namespace UnityEditor {
  class PrefColor {
    // constructors
    constructor();
    constructor(name: string, defaultRed: number, defaultGreen: number, defaultBlue: number, defaultAlpha: number);
    // methods
    Load(): void;
    ToUniqueString(): string;
    FromUniqueString(s: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    Color: any;
    readonly Name: string;
    // fields
  }
}
declare namespace UnityEditor {
  class PreferenceItem {
    // constructors
    constructor(name: string);
    // methods
    GetHashCode(): number;
    IsDefaultAttribute(): boolean;
    Match(obj: any): boolean;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly TypeId: any;
    // fields
    name: string;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class AppsListUserData {
    // constructors
    constructor(paths: string[], str: UnityEditor.PreferencesWindow.RefString, onChanged: (() => void));
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    paths: string[];
    str: UnityEditor.PreferencesWindow.RefString;
    onChanged: (() => void);
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class Constants {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sectionScrollView: any;
    settingsBoxTitle: any;
    settingsBox: any;
    errorLabel: any;
    sectionElement: any;
    evenRow: any;
    oddRow: any;
    selected: any;
    keysElement: any;
    warningIcon: any;
    sectionHeader: any;
    cacheFolderLocation: any;
  }
}
declare namespace UnityEditor {
  class PreferencesWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class GICacheSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    m_EnableCustomPath: boolean;
    m_MaximumSize: number;
    m_CachePath: string;
    m_CompressionLevel: number;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class RefString {
    // constructors
    constructor(s: string);
    // methods
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    str: string;
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class Section {
    // constructors
    constructor(name: string, guiFunc: (() => void));
    constructor(name: string, icon: any, guiFunc: (() => void));
    constructor(content: any, guiFunc: (() => void));
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    content: any;
    guiFunc: (() => void);
  }
}
declare namespace UnityEditor.PreferencesWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static browse: any;
    static maxCacheSize: any;
    static customCacheLocation: any;
    static cacheFolderLocation: any;
    static cacheCompression: any;
    static cantChangeCacheSettings: any;
    static cleanCache: any;
    static browseGICacheLocation: any;
    static cacheSizeIs: any;
    static pleaseWait: any;
    static spriteMaxCacheSize: any;
  }
}
declare namespace UnityEditor {
  class PrefKey {
    // constructors
    constructor();
    constructor(name: string, shortcut: string);
    // methods
    Load(): void;
    ToUniqueString(): string;
    FromUniqueString(s: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Name: string;
    KeyboardEvent: any;
    readonly activated: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class PresetFileLocation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PreferencesFolder: UnityEditor.PresetFileLocation;
    static ProjectFolder: UnityEditor.PresetFileLocation;
  }
}
declare namespace UnityEditor {
  class PresetLibrary {
    // constructors
    private constructor();
    // methods
    Count(): number;
    GetPreset(index: number): any;
    Add(presetObject: any, presetName: string): void;
    Replace(index: number, newPresetObject: any): void;
    Remove(index: number): void;
    Move(index: number, destIndex: number, insertAfterDestIndex: boolean): void;
    Draw(rect: any, index: number): void;
    Draw(rect: any, presetObject: any): void;
    GetName(index: number): string;
    SetName(index: number, name: string): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PresetLibraryEditorState {
    // constructors
    constructor(prefix: string);
    // methods
    static GetItemViewMode(prefix: string): UnityEditor.PresetLibraryEditorState.ItemViewMode;
    TransferEditorPrefsState(load: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    itemViewMode: UnityEditor.PresetLibraryEditorState.ItemViewMode;
    // fields
    m_PreviewHeight: number;
    m_ScrollPosition: any;
    m_CurrrentLibrary: string;
    m_HoverIndex: number;
    m_RenameOverlay: UnityEditor.RenameOverlay;
    m_Prefix: string;
  }
}
declare namespace UnityEditor.PresetLibraryEditorState {
  class ItemViewMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Grid: UnityEditor.PresetLibraryEditorState.ItemViewMode;
    static List: UnityEditor.PresetLibraryEditorState.ItemViewMode;
  }
}
declare namespace UnityEditor {
  class PresetLibraryHelpers {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PresetLibraryLocations {
    // constructors
    private constructor();
    // methods
    static GetAvailableFilesWithExtensionOnTheHDD(fileLocation: UnityEditor.PresetFileLocation, fileExtensionWithoutDot: string): any;
    static GetDefaultFilePathForFileLocation(fileLocation: UnityEditor.PresetFileLocation): string;
    static GetFileLocationFromPath(path: string): UnityEditor.PresetFileLocation;
    static GetParticleCurveLibraryExtension(singleCurve: boolean, signedRange: boolean): string;
    static GetCurveLibraryExtension(normalized: boolean): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly defaultLibraryLocation: string;
    static readonly defaultPresetLibraryPath: string;
    static readonly defaultLibraryName: string;
    // fields
  }
}
declare namespace UnityEditor {
  class PresetLibraryManager {
    // constructors
    constructor();
    // methods
    GetLastError(): string;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.PresetLibraryManager {
  class LibraryCache {
    // constructors
    constructor(identifier: string);
    // methods
    UnloadScriptableObjects(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly identifier: string;
    readonly loadedLibraries: any;
    readonly loadedLibraryIDs: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PreviewBlendTree {
    // constructors
    constructor();
    // methods
    Init(blendTree: UnityEditor.Animations.BlendTree, animator: any): void;
    CreateParameters(): void;
    ResetStateMachine(): void;
    OnDisable(): void;
    OnDestroy(): void;
    TestForReset(): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly PreviewAnimator: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PreviewHelpers {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PreviewRenderUtility {
    // constructors
    constructor();
    constructor(renderFullScene: boolean);
    // methods
    Cleanup(): void;
    GetScaleFactor(width: number, height: number): number;
    BeginStaticPreview(r: any): void;
    BeginStaticPreviewHDR(r: any): void;
    BeginPreview(r: any, previewBackground: any): void;
    BeginPreviewHDR(r: any, previewBackground: any): void;
    EndPreview(): any;
    EndAndDrawPreview(r: any): void;
    EndStaticPreview(): any;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number): void;
    DrawMesh(mesh: any, matrix: any, mat: any, subMeshIndex: number): void;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number, customProperties: any): void;
    DrawMesh(mesh: any, pos: any, rot: any, mat: any, subMeshIndex: number, customProperties: any, probeAnchor: any): void;
    DrawMesh(mesh: any, matrix: any, mat: any, subMeshIndex: number, customProperties: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Camera: any;
    m_CameraFieldOfView: number;
    m_Light: any[];
  }
}
declare namespace UnityEditor {
  class PreviewResizer {
    // constructors
    constructor();
    // methods
    Init(prefName: string): void;
    ResizeHandle(windowPosition: any, minSize: number, minRemainingSize: number, resizerHeight: number): number;
    ResizeHandle(windowPosition: any, minSize: number, minRemainingSize: number, resizerHeight: number, dragRect: any): number;
    GetExpanded(): boolean;
    GetPreviewSize(): number;
    GetExpandedBeforeDragging(): boolean;
    SetExpanded(expanded: boolean): void;
    ToggleExpanded(): void;
    static PixelPreciseCollapsibleSlider(id: number, position: any, value: number, min: number, max: number, expanded: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PreviewWindow {
    // constructors
    constructor();
    // methods
    SetParentInspector(inspector: UnityEditor.InspectorWindow): void;
    GetLastInteractedEditor(): UnityEditor.Editor;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    GetTracker(): UnityEditor.ActiveEditorTracker;
    GetEditorThatControlsPreview(editors: UnityEditor.IPreviewable[]): UnityEditor.IPreviewable;
    GetEditorsWithPreviews(editors: UnityEditor.Editor[]): UnityEditor.IPreviewable[];
    GetInspectedObject(): any;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    isLocked: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_ScrollPosition: any;
    m_InspectorMode: UnityEditor.InspectorMode;
  }
}
declare namespace UnityEditor {
  class ProceduralMaterialInspector {
    // constructors
    constructor();
    // methods
    DisableReimportOnDisable(): void;
    ReimportSubstances(): void;
    Awake(): void;
    OnEnable(): void;
    ReimportSubstancesIfNeeded(): void;
    OnDisable(): void;
    UndoRedoPerformed(): void;
    OnInspectorGUI(): void;
    static ShowIsGenerating(mat: any): boolean;
    GetInfoString(): string;
    HasProceduralTextureProperties(material: any): boolean;
    static ResetSubstance(command: UnityEditor.MenuCommand): void;
    static ExportBitmapsAlphaRemap(command: UnityEditor.MenuCommand): void;
    static ExportBitmapsNoAlphaRemap(command: UnityEditor.MenuCommand): void;
    static ExportPreset(command: UnityEditor.MenuCommand): void;
    BuildTargetList(): void;
    ShowTextureSizeGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    InputsGUI(): void;
    SetShader(shader: any): void;
    SetShader(newShader: any, registerUndo: boolean): void;
    PropertiesChanged(): void;
    GetFloat(propertyName: string, hasMixedValue: any): number;
    SetFloat(propertyName: string, value: number): void;
    GetColor(propertyName: string, hasMixedValue: any): any;
    SetColor(propertyName: string, value: any): void;
    GetVector(propertyName: string, hasMixedValue: any): any;
    SetVector(propertyName: string, value: any): void;
    GetTexture(propertyName: string, hasMixedValue: any): any;
    SetTexture(propertyName: string, value: any): void;
    GetTextureScale(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    GetTextureOffset(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    SetTextureScale(propertyName: string, value: any, coord: number): void;
    SetTextureOffset(propertyName: string, value: any, coord: number): void;
    RangeProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    RangeProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    ColorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    ColorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureScaleOffsetProperty(property: UnityEditor.MaterialProperty): void;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty): number;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty, partOfTexturePropertyControl: boolean): number;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    HelpBoxWithButton(messageContent: any, buttonContent: any): boolean;
    TextureCompatibilityWarning(prop: UnityEditor.MaterialProperty): void;
    TexturePropertyMiniThumbnail(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string): any;
    GetTexturePropertyCustomArea(position: any): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string, scaleOffset: boolean): any;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string): number;
    BeginAnimatedCheck(prop: UnityEditor.MaterialProperty): void;
    EndAnimatedCheck(): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    LightmapEmissionProperty(): void;
    LightmapEmissionProperty(labelIndent: number): void;
    LightmapEmissionProperty(position: any, labelIndent: number): void;
    DefaultShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    DefaultShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    RangeProperty(propertyName: string, label: string, v2: number, v3: number): number;
    FloatProperty(propertyName: string, label: string): number;
    ColorProperty(propertyName: string, label: string): any;
    VectorProperty(propertyName: string, label: string): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim, scaleOffset: boolean): any;
    ShaderProperty(shader: any, propertyIndex: number): void;
    SetDefaultGUIWidths(): void;
    PropertiesGUI(): boolean;
    PropertiesDefaultGUI(props: UnityEditor.MaterialProperty[]): void;
    RegisterPropertyChangeUndo(label: string): void;
    OnPreviewSettings(): void;
    DefaultPreviewSettingsGUI(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    RequiresConstantRepaint(): boolean;
    OnInteractivePreviewGUI(r: any, background: any): void;
    DefaultPreviewGUI(r: any, background: any): void;
    RenderQueueField(): void;
    RenderQueueField(r: any): void;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, extraProperty2: UnityEditor.MaterialProperty): any;
    TexturePropertyWithHDRColor(label: any, textureProp: UnityEditor.MaterialProperty, colorProperty: UnityEditor.MaterialProperty, hdrConfig: UnityEditor.ColorPickerHDRConfig, showAlpha: boolean): any;
    TexturePropertyTwoLines(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, label2: any, extraProperty2: UnityEditor.MaterialProperty): any;
    DrawDefaultInspector(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly isVisible: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProceduralMaterialInspector {
  class ProceduralPlatformSetting {
    // constructors
    constructor(objects: any[], _name: string, _target: UnityEditor.BuildTarget, _icon: any);
    // methods
    SetOverride(master: UnityEditor.ProceduralMaterialInspector.ProceduralPlatformSetting): void;
    ClearOverride(master: UnityEditor.ProceduralMaterialInspector.ProceduralPlatformSetting): void;
    HasChanged(): boolean;
    Apply(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly isDefault: boolean;
    textureFormat: number;
    readonly overridden: boolean;
    // fields
    name: string;
    m_Overridden: boolean;
    maxTextureWidth: number;
    maxTextureHeight: number;
    m_TextureFormat: number;
    m_LoadBehavior: number;
    target: UnityEditor.BuildTarget;
    icon: any;
  }
}
declare namespace UnityEditor.ProceduralMaterialInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    hslContent: any;
    randomSeedContent: any;
    randomizeButtonContent: any;
    generateAllOutputsContent: any;
    animatedContent: any;
    defaultPlatform: any;
    targetWidth: any;
    targetHeight: any;
    textureFormat: any;
    loadBehavior: any;
    mipmapContent: any;
  }
}
declare namespace UnityEditor {
  class ProceduralTextureInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnPreviewGUI(r: any, background: any): void;
    GetMipLevelForRendering(): number;
    OnPreviewSettings(): void;
    HasPreviewGUI(): boolean;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mipLevel: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ProfilerChoise {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    Name: string;
    Enabled: boolean;
    IsSelected: (() => boolean);
    ConnectTo: (() => void);
  }
}
declare namespace UnityEditor {
  class ProfilerIPWindow {
    // constructors
    constructor();
    // methods
    static Show(buttonScreenRect: any): void;
    static GetLastIPString(): string;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ProfilerWindow {
    // constructors
    constructor();
    // methods
    SetSelectedPropertyPath(path: string): void;
    ClearSelectedPropertyPath(): void;
    CreateProperty(details: boolean): UnityEditorInternal.ProfilerProperty;
    GetActiveVisibleFrameIndex(): number;
    SetSearch(searchString: string): void;
    GetSearch(): string;
    IsSearching(): boolean;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProfilerWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    addArea: any;
    deepProfile: any;
    profileEditor: any;
    noData: any;
    frameDebugger: any;
    noFrameDebugger: any;
    gatherObjectReferences: any;
    timelineHighDetail: any;
    memRecord: any;
    profilerRecord: any;
    profilerInstrumentation: any;
    prevFrame: any;
    nextFrame: any;
    currentFrame: any;
    frame: any;
    clearData: any;
    reasons: any[];
    background: any;
    header: any;
    label: any;
    entryEven: any;
    entryOdd: any;
    profilerGraphBackground: any;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class AssetStoreItemContextMenu {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class BreadCrumbListMenu {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ProjectBrowser {
    // constructors
    private constructor();
    // methods
    static GetAllProjectBrowsers(): any;
    Initialized(): boolean;
    Init(): void;
    SetSearch(searchString: string): void;
    SetSearch(searchFilter: UnityEditor.SearchFilter): void;
    static ShowAssetStoreHitsWhileSearchingLocalAssetsChanged(): void;
    TypeListCallback(element: UnityEditor.PopupList.ListElement): void;
    AssetLabelListCallback(element: UnityEditor.PopupList.ListElement): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    FrameObject(instanceID: number, ping: boolean): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly listAreaGridSize: number;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static s_LastInteractedProjectBrowser: UnityEditor.ProjectBrowser;
    m_SearchAllAssets: any;
    m_SearchInFolders: any;
    m_SearchAssetStore: any;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class ItemType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Asset: UnityEditor.ProjectBrowser.ItemType;
    static SavedFilter: UnityEditor.ProjectBrowser.ItemType;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class SavedFiltersContextMenu {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class SearchViewState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotSearching: UnityEditor.ProjectBrowser.SearchViewState;
    static AllAssets: UnityEditor.ProjectBrowser.SearchViewState;
    static SubFolders: UnityEditor.ProjectBrowser.SearchViewState;
    static AssetStore: UnityEditor.ProjectBrowser.SearchViewState;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    smallStatus: any;
    largeStatus: any;
    toolbarBack: any;
    tab: any;
    bottomResize: any;
    background: any;
    previewBackground: any;
    previewTextureBackground: any;
    bottomBarBg: any;
    topBarBg: any;
    selectedPathLabel: any;
    exposablePopup: any;
    lockButton: any;
    foldout: any;
    exposablePopupItem: any;
    m_FilterByLabel: any;
    m_FilterByType: any;
    m_ShowChildAssetsContent: any;
    m_CreateDropdownContent: any;
    m_SaveFilterContent: any;
    m_EmptyFolderText: any;
    m_SearchIn: any;
  }
}
declare namespace UnityEditor.ProjectBrowser {
  class ViewMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static OneColumn: UnityEditor.ProjectBrowser.ViewMode;
    static TwoColumns: UnityEditor.ProjectBrowser.ViewMode;
  }
}
declare namespace UnityEditor {
  class ProjectBrowserColumnOneTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    SetExpanded(id: number, expand: boolean): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsVisibleRootNode(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    static GetAssetsFolderInstanceID(): number;
    FetchData(): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class ProjectBrowserColumnOneTreeViewDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class ProjectBrowserColumnOneTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    GetTotalSize(): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    static GetListAreaGridSize(): number;
    BeginRowGUI(): void;
    BeginCreateNewAsset(instanceID: number, endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, pathName: string, icon: any, resourceFile: string): void;
    OnInitialize(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateAnimatorController {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateAudioMixer {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateFolder {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateNewAsset {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreatePrefab {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateScene {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateScriptAsset {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class DoCreateSpritePolygon {
    // constructors
    constructor();
    // methods
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    OnEnable(): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    sides: number;
  }
}
declare namespace UnityEditor.ProjectWindowCallback {
  class EndNameEditAction {
    // constructors
    private constructor();
    // methods
    OnEnable(): void;
    Action(instanceId: number, pathName: string, resourceFile: string): void;
    CleanUp(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ProjectWindowUtil {
    // constructors
    constructor();
    // methods
    static CreateNewGUISkin(): void;
    static CreateAsset(asset: any, pathName: string): void;
    static CreateFolder(): void;
    static CreateScene(): void;
    static CreatePrefab(): void;
    static ShowCreatedAsset(o: any): void;
    static StartNameEditingIfProjectWindowExists(instanceID: number, endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, pathName: string, icon: any, resourceFile: string): void;
    static GetAncestors(instanceID: number): number[];
    static IsFolder(instanceID: number): boolean;
    static GetContainingFolder(path: string): string;
    static GetBaseFolders(folders: string[]): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PropertyAndTargetHandler {
    // constructors
    constructor(property: UnityEditor.SerializedProperty, target: any, function_: ((UnityEditor.SerializedProperty, any) => void));
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    property: UnityEditor.SerializedProperty;
    target: any;
    "function": ((UnityEditor.SerializedProperty, any) => void);
  }
}
declare namespace UnityEditor {
  class PropertyDrawer {
    // constructors
    private constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditor {
  class PropertyGUIData {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    property: UnityEditor.SerializedProperty;
    totalPosition: any;
    wasBoldDefaultFont: boolean;
    wasEnabled: boolean;
    color: any;
  }
}
declare namespace UnityEditor {
  class PropertyHandler {
    // constructors
    constructor();
    // methods
    HandleAttribute(attribute: any, field: any, propertyType: any): void;
    HandleDrawnType(drawnType: any, propertyType: any, field: any, attribute: any): void;
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): boolean;
    OnGUILayout(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean, options: any[]): boolean;
    GetHeight(property: UnityEditor.SerializedProperty, label: any, includeChildren: boolean): number;
    AddMenuItems(property: UnityEditor.SerializedProperty, menu: UnityEditor.GenericMenu): void;
    CallMenuCallback(targets: any[], method: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly hasPropertyDrawer: boolean;
    readonly empty: boolean;
    // fields
    tooltip: string;
    contextMenuItems: any;
  }
}
declare namespace UnityEditor {
  class PropertyHandlerCache {
    // constructors
    constructor();
    // methods
    Clear(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class PropertyModification {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    target: any;
    propertyPath: string;
    value: string;
    objectReference: any;
  }
}
declare namespace UnityEditor {
  class PS4BuildSubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PCHosted: UnityEditor.PS4BuildSubtarget;
    static Package: UnityEditor.PS4BuildSubtarget;
  }
}
declare namespace UnityEditor {
  class PS4HardwareTarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BaseOnly: UnityEditor.PS4HardwareTarget;
    static NeoAndBase: UnityEditor.PS4HardwareTarget;
  }
}
declare namespace UnityEditor {
  class PSMBuildSubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DevAssistant: UnityEditor.PSMBuildSubtarget;
    static Master: UnityEditor.PSMBuildSubtarget;
    static Intermediate: UnityEditor.PSMBuildSubtarget;
  }
}
declare namespace UnityEditor {
  class PSP2BuildSubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static PCHosted: UnityEditor.PSP2BuildSubtarget;
    static Package: UnityEditor.PSP2BuildSubtarget;
  }
}
declare namespace UnityEditor {
  class PurchaseResult {
    // constructors
    constructor(c: ((UnityEditor.PurchaseResult) => void));
    // methods
    Parse(response: UnityEditor.AssetStoreResponse): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    status: UnityEditor.PurchaseResult.Status;
    packageID: number;
    message: string;
    error: string;
    warnings: string;
  }
}
declare namespace UnityEditor.PurchaseResult {
  class Status {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BasketNotEmpty: UnityEditor.PurchaseResult.Status;
    static ServiceDisabled: UnityEditor.PurchaseResult.Status;
    static AnonymousUser: UnityEditor.PurchaseResult.Status;
    static PasswordMissing: UnityEditor.PurchaseResult.Status;
    static PasswordWrong: UnityEditor.PurchaseResult.Status;
    static PurchaseDeclined: UnityEditor.PurchaseResult.Status;
    static Ok: UnityEditor.PurchaseResult.Status;
  }
}
declare namespace UnityEditor.Purchasing {
  class PurchasingSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static enabled: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class QualityCurvesTime {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    fixedTime: number;
    variableEndStart: number;
    variableEndEnd: number;
    q: number;
  }
}
declare namespace UnityEditor {
  class QualitySettingsEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static kMinAsyncRingBufferSize: number;
    static kMaxAsyncRingBufferSize: number;
    static kMinAsyncUploadTimeSlice: number;
    static kMaxAsyncUploadTimeSlice: number;
  }
}
declare namespace UnityEditor.QualitySettingsEditor {
  class Dragging {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_StartPosition: number;
    m_Position: number;
  }
}
declare namespace UnityEditor.QualitySettingsEditor {
  class QualitySetting {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    m_Name: string;
    m_PropertyPath: string;
    m_ExcludedPlatforms: any;
  }
}
declare namespace UnityEditor.QualitySettingsEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kToggle: any;
    static kDefaultToggle: any;
    static kButton: any;
    static kSelected: any;
    static kPlatformTooltip: any;
    static kIconTrash: any;
    static kSoftParticlesHint: any;
    static kBillboardsFaceCameraPos: any;
    static kListEvenBg: any;
    static kListOddBg: any;
    static kDefaultDropdown: any;
    static kMinToggleWidth: number;
    static kMaxToggleWidth: number;
    static kHeaderRowHeight: number;
    static kLabelWidth: number;
  }
}
declare namespace UnityEditor {
  class QuaternionCurveTangentCalculation {
    // constructors
    private constructor();
    // methods
    GetCurve(index: number): any;
    SetCurve(index: number, curve: any): void;
    CalculateLinearTangent(fromIndex: number, toIndex: number, componentIndex: number): number;
    CalculateLinearTangent(from: any, to: any, component: number): number;
    CalculateSmoothTangent(index: number, component: number): number;
    static GetEquivalentEulerAngles(quat: any): any[];
    static GetEulerFromQuaternion(q: any, refEuler: any): any;
    static SafeDeltaDivide(dy: number, dx: number): number;
    UpdateTangentsFromMode(componentIndex: number): void;
    UpdateTangentsFromMode(index: number, componentIndex: number): void;
    static UpdateTangentsFromMode(curve: any, clip: any, curveBinding: UnityEditor.EditorCurveBinding): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RagdollBuilder {
  class BoneInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    name: string;
    anchor: any;
    joint: any;
    parent: UnityEditor.RagdollBuilder.BoneInfo;
    minLimit: number;
    maxLimit: number;
    swingLimit: number;
    axis: any;
    normalAxis: any;
    radiusScale: number;
    colliderType: any;
    children: any;
    density: number;
    summedMass: number;
  }
}
declare namespace UnityEditor {
  class RagdollBuilder {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    pelvis: any;
    leftHips: any;
    leftKnee: any;
    leftFoot: any;
    rightHips: any;
    rightKnee: any;
    rightFoot: any;
    leftArm: any;
    leftElbow: any;
    rightArm: any;
    rightElbow: any;
    middleSpine: any;
    head: any;
    totalMass: number;
    strength: number;
    flipForward: boolean;
  }
}
declare namespace UnityEditor {
  class RangeDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditor {
  class RectangleTool {
    // constructors
    constructor();
    // methods
    Initialize(timeArea: UnityEditor.TimeArea): void;
    ToolCoordToPosition(coord: UnityEditor.RectangleTool.ToolCoord, bounds: any): any;
    CalculateScaleTimeMatrix(fromTime: number, toTime: number, offsetTime: number, pivotTime: number, frameRate: number, transform: any, flipKeys: any): boolean;
    CalculateScaleValueMatrix(fromValue: number, toValue: number, offsetValue: number, pivotValue: number, transform: any, flipKeys: any): boolean;
    PixelToTime(pixelTime: number, frameRate: number): number;
    PixelToValue(pixelValue: number): number;
    TimeToPixel(time: number): number;
    ValueToPixel(value: number): number;
    HandleClutchKeys(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly timeArea: UnityEditor.TimeArea;
    readonly styles: UnityEditor.RectangleTool.Styles;
    readonly rippleTimeClutch: boolean;
    readonly contentRect: any;
    // fields
  }
}
declare namespace UnityEditor.RectangleTool {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    rectangleToolHBarLeft: any;
    rectangleToolHBarRight: any;
    rectangleToolHBar: any;
    rectangleToolVBarBottom: any;
    rectangleToolVBarTop: any;
    rectangleToolVBar: any;
    rectangleToolSelection: any;
    rectangleToolHighlight: any;
    rectangleToolScaleLeft: any;
    rectangleToolScaleRight: any;
    rectangleToolScaleBottom: any;
    rectangleToolScaleTop: any;
    dopesheetScaleLeft: any;
    dopesheetScaleRight: any;
    dragLabel: any;
  }
}
declare namespace UnityEditor.RectangleTool {
  class ToolCoord {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BottomLeft: UnityEditor.RectangleTool.ToolCoord;
    static Bottom: UnityEditor.RectangleTool.ToolCoord;
    static BottomRight: UnityEditor.RectangleTool.ToolCoord;
    static Left: UnityEditor.RectangleTool.ToolCoord;
    static Center: UnityEditor.RectangleTool.ToolCoord;
    static Right: UnityEditor.RectangleTool.ToolCoord;
    static TopLeft: UnityEditor.RectangleTool.ToolCoord;
    static Top: UnityEditor.RectangleTool.ToolCoord;
    static TopRight: UnityEditor.RectangleTool.ToolCoord;
  }
}
declare namespace UnityEditor {
  class RectHandles {
    // constructors
    constructor();
    // methods
    static AngleAroundAxis(dirA: any, dirB: any, axis: any): number;
    static RotationSlider(id: number, cornerPos: any, rotation: number, pivot: any, handleDir: any, outwardsDir1: any, outwardsDir2: any, handleSize: number, drawFunc: ((number, any, any, number, any) => void), snap: any): number;
    static RectScalingHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static PivotHandleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static RenderRectWithShadow(active: boolean, corners: any[]): void;
    static DrawPolyLineWithShadow(shadowColor: any, screenOffset: any, points: any[]): void;
    static DrawDottedLineWithShadow(shadowColor: any, screenOffset: any, p1: any, p2: any, screenSpaceSize: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RectHandles {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    dragdot: any;
    pivotdot: any;
    dragdotactive: any;
    pivotdotactive: any;
  }
}
declare namespace UnityEditor {
  class RectSelection {
    // constructors
    constructor(window: UnityEditor.EditorWindow);
    // methods
    OnGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RectSelection {
  class SelectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.RectSelection.SelectionType;
    static Additive: UnityEditor.RectSelection.SelectionType;
    static Subtractive: UnityEditor.RectSelection.SelectionType;
  }
}
declare namespace UnityEditor {
  class RectTool {
    // constructors
    constructor();
    // methods
    static OnGUI(view: UnityEditor.SceneView): void;
    static GetLocalRectPoint(rect: any, index: number): any;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RectTransformEditor {
  class AnchorFusedState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.RectTransformEditor.AnchorFusedState;
    static All: UnityEditor.RectTransformEditor.AnchorFusedState;
    static Horizontal: UnityEditor.RectTransformEditor.AnchorFusedState;
    static Vertical: UnityEditor.RectTransformEditor.AnchorFusedState;
  }
}
declare namespace UnityEditor {
  class RectTransformEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    static SetPivotSmart(rect: any, value: number, axis: number, smart: boolean, parentSpace: boolean): void;
    static SetAnchorSmart(rect: any, value: number, axis: number, isMax: boolean, smart: boolean): void;
    static SetAnchorSmart(rect: any, value: number, axis: number, isMax: boolean, smart: boolean, enforceExactValue: boolean): void;
    static SetAnchorSmart(rect: any, value: number, axis: number, isMax: boolean, smart: boolean, enforceExactValue: boolean, enforceMinNoLargerThanMax: boolean, moveTogether: boolean): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.RectTransformEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    lockStyle: any;
    measuringLabelStyle: any;
    anchorsContent: any;
    anchorMinContent: any;
    anchorMaxContent: any;
    positionContent: any;
    sizeContent: any;
    pivotContent: any;
    transformScaleContent: any;
    transformPositionZContent: any;
    rawEditContent: any;
    blueprintContent: any;
  }
}
declare namespace UnityEditor {
  class RectTransformSnapping {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ReflectionProbeEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnPreviewGUI(position: any, style: any): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ReflectionProbeEditor {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static richTextMiniLabel: any;
    static bakeButtonText: string;
    static editBoundsText: string;
    static bakeCustomOptionText: string[];
    static bakeButtonsText: string[];
    static bakeCustomButtonText: any;
    static runtimeSettingsHeader: any;
    static backgroundColorText: any;
    static clearFlagsText: any;
    static intensityText: any;
    static resolutionText: any;
    static captureCubemapHeaderText: any;
    static boxProjectionText: any;
    static blendDistanceText: any;
    static sizeText: any;
    static centerText: any;
    static skipFramesText: any;
    static customCubemapText: any;
    static editorUpdateText: any;
    static importanceText: any;
    static renderDynamicObjects: any;
    static timeSlicing: any;
    static refreshMode: any;
    static typeText: any;
    static reflectionProbeMode: any[];
    static reflectionProbeModeValues: number[];
    static renderTextureSizesValues: any;
    static renderTextureSizes: any;
    static clearFlags: any[];
    static clearFlagsValues: number[];
    static toolContents: any[];
    static sceneViewEditModes: UnityEditorInternal.EditMode.SceneViewEditMode[];
    static baseSceneEditingToolText: string;
    static toolNames: any[];
    static commandStyle: any;
  }
}
declare namespace UnityEditor {
  class RelativeJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class RemoveAssetOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static MoveAssetToTrash: UnityEditor.RemoveAssetOptions;
    static DeleteAssets: UnityEditor.RemoveAssetOptions;
  }
}
declare namespace UnityEditor {
  class RenameOverlay {
    // constructors
    constructor();
    // methods
    BeginRename(name: string, userData: number, delay: number): boolean;
    EndRename(acceptChanges: boolean): void;
    Clear(): void;
    HasKeyboardFocus(): boolean;
    IsRenaming(): boolean;
    OnEvent(): boolean;
    OnGUI(): boolean;
    OnGUI(textFieldStyle: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    readonly originalName: string;
    readonly userAcceptedRename: boolean;
    readonly userData: number;
    readonly isWaitingForDelay: boolean;
    editFieldRect: any;
    isRenamingFilename: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class RendererEditorBase {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    DrawDefaultInspector(): boolean;
    OnInspectorGUI(): void;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.RendererEditorBase {
  class Probes {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RendererEditorBase {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static m_SortingLayerStyle: any;
    static m_SortingOrderStyle: any;
  }
}
declare namespace UnityEditor {
  class RendererModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    IsMeshEmitter(): boolean;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.RendererModuleUI {
  class RenderMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Billboard: UnityEditor.RendererModuleUI.RenderMode;
    static Stretch3D: UnityEditor.RendererModuleUI.RenderMode;
    static BillboardFixedHorizontal: UnityEditor.RendererModuleUI.RenderMode;
    static BillboardFixedVertical: UnityEditor.RendererModuleUI.RenderMode;
    static Mesh: UnityEditor.RendererModuleUI.RenderMode;
    static None: UnityEditor.RendererModuleUI.RenderMode;
  }
}
declare namespace UnityEditor.RendererModuleUI {
  class StreamCallbackData {
    // constructors
    constructor(prop: UnityEditor.SerializedProperty, t: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    streamProp: UnityEditor.SerializedProperty;
    text: string;
  }
}
declare namespace UnityEditor.RendererModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    renderMode: any;
    material: any;
    trailMaterial: any;
    mesh: any;
    minParticleSize: any;
    maxParticleSize: any;
    cameraSpeedScale: any;
    speedScale: any;
    lengthScale: any;
    sortingFudge: any;
    sortMode: any;
    rotation: any;
    castShadows: any;
    receiveShadows: any;
    normalDirection: any;
    sortingLayer: any;
    sortingOrder: any;
    space: any;
    pivot: any;
    visualizePivot: any;
    useCustomVertexStreams: any;
    streams: any;
    particleTypes: string[];
    sortTypes: string[];
    spaces: string[];
    vertexStreams: string[];
    vertexStreamIsTexCoord: boolean[];
    vertexStreamDataTypes: string[];
  }
}
declare namespace UnityEditor.Rendering {
  class EditorGraphicsSettings {
    // constructors
    constructor();
    // methods
    static GetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any): UnityEditor.Rendering.TierSettings;
    static SetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any, settings: UnityEditor.Rendering.TierSettings): void;
    static GetShaderSettingsForPlatform(target: UnityEditor.BuildTargetGroup, tier: any): UnityEditor.Rendering.PlatformShaderSettings;
    static SetShaderSettingsForPlatform(target: UnityEditor.BuildTargetGroup, tier: any, settings: UnityEditor.Rendering.PlatformShaderSettings): void;
    static GetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any): UnityEditor.Rendering.TierSettings;
    static SetTierSettings(target: UnityEditor.BuildTargetGroup, tier: any, settings: UnityEditor.Rendering.TierSettings): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Rendering {
  class PlatformShaderSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    cascadedShadowMaps: boolean;
    reflectionProbeBoxProjection: boolean;
    reflectionProbeBlending: boolean;
    standardShaderQuality: UnityEditor.Rendering.ShaderQuality;
  }
}
declare namespace UnityEditor.Rendering {
  class ShaderQuality {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Low: UnityEditor.Rendering.ShaderQuality;
    static Medium: UnityEditor.Rendering.ShaderQuality;
    static High: UnityEditor.Rendering.ShaderQuality;
  }
}
declare namespace UnityEditor.Rendering {
  class TierSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    standardShaderQuality: UnityEditor.Rendering.ShaderQuality;
    cascadedShadowMaps: boolean;
    reflectionProbeBoxProjection: boolean;
    reflectionProbeBlending: boolean;
    renderingPath: any;
  }
}
declare namespace UnityEditor {
  class RenderSettingsInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class RenderTextureInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    GetInfoString(): string;
    GetMipLevelForRendering(): number;
    OnPreviewSettings(): void;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mipLevel: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class RenderThumbnailUtility {
    // constructors
    constructor();
    // methods
    static CalculateVisibleBounds(prefab: any): any;
    static Render(prefab: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ReplacePrefabOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.ReplacePrefabOptions;
    static ConnectToPrefab: UnityEditor.ReplacePrefabOptions;
    static ReplaceNameBased: UnityEditor.ReplacePrefabOptions;
  }
}
declare namespace UnityEditor {
  class ResolutionDialogSetting {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Disabled: UnityEditor.ResolutionDialogSetting;
    static Enabled: UnityEditor.ResolutionDialogSetting;
    static HiddenByDefault: UnityEditor.ResolutionDialogSetting;
  }
}
declare namespace UnityEditor.RestService.AssetRestHandler {
  class AssetHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class AssetRestHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService.AssetRestHandler {
  class LibraryHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class Handler {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class HttpStatusCode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Ok: UnityEditor.RestService.HttpStatusCode;
    static Created: UnityEditor.RestService.HttpStatusCode;
    static Accepted: UnityEditor.RestService.HttpStatusCode;
    static NoContent: UnityEditor.RestService.HttpStatusCode;
    static BadRequest: UnityEditor.RestService.HttpStatusCode;
    static Forbidden: UnityEditor.RestService.HttpStatusCode;
    static NotFound: UnityEditor.RestService.HttpStatusCode;
    static MethodNotAllowed: UnityEditor.RestService.HttpStatusCode;
    static InternalServerError: UnityEditor.RestService.HttpStatusCode;
    static NotImplemented: UnityEditor.RestService.HttpStatusCode;
  }
}
declare namespace UnityEditor.RestService {
  class Logger {
    // constructors
    constructor();
    // methods
    static Log(an_exception: any): void;
    static Log(a_message: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class OpenDocumentsRestHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class PairingRestHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class PlayModeRestHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class ProjectStateRestHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService.ProjectStateRestHandler {
  class Island {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    MonoIsland: UnityEditor.Scripting.MonoIsland;
    Name: string;
    References: any;
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class Request {
    // constructors
    constructor();
    // methods
    GetParam(paramName: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Payload: string;
    readonly Url: string;
    readonly MessageType: number;
    readonly Depth: number;
    readonly Info: boolean;
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class Response {
    // constructors
    constructor();
    // methods
    SimpleResponse(status: UnityEditor.RestService.HttpStatusCode, payload: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class RestRequest {
    // constructors
    constructor();
    // methods
    static Send(endpoint: string, payload: string, timeout: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class RestRequestException {
    // constructors
    constructor();
    constructor(httpStatusCode: UnityEditor.RestService.HttpStatusCode, restErrorString: string);
    constructor(httpStatusCode: UnityEditor.RestService.HttpStatusCode, restErrorString: string, restErrorDescription: string);
    // methods
    GetBaseException(): any;
    GetObjectData(info: any, context: any): void;
    ToString(): string;
    GetType(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    RestErrorString: string;
    HttpStatusCode: UnityEditor.RestService.HttpStatusCode;
    RestErrorDescription: string;
    readonly InnerException: any;
    HelpLink: string;
    readonly Message: string;
    Source: string;
    readonly StackTrace: string;
    readonly TargetSite: any;
    readonly Data: any;
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class RestServiceRegistration {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class Router {
    // constructors
    constructor();
    // methods
    static RegisterHandler(route: string, handler: UnityEditor.RestService.Handler): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.RestService {
  class ScriptEditorSettings {
    // constructors
    constructor();
    // methods
    static Save(): void;
    static Load(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static Name: string;
    static ServerURL: string;
    static ProcessId: number;
    static OpenDocuments: any;
    // fields
  }
}
declare namespace UnityEditor {
  class Rigidbody2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class RigidbodyEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class RotateTool {
    // constructors
    constructor();
    // methods
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class RotationByVelocityModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.RotationByVelocityModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    velocityRange: any;
    rotation: any;
    separateAxes: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class RotationCurveInterpolation {
    // constructors
    constructor();
    // methods
    static GetModeFromCurveData(data: UnityEditor.EditorCurveBinding): UnityEditor.RotationCurveInterpolation.Mode;
    static GetCurveState(clip: any, selection: UnityEditor.EditorCurveBinding[]): UnityEditor.RotationCurveInterpolation.State;
    static GetCurveIndexFromName(name: string): number;
    static ExtractComponentCharacter(name: string): any;
    static GetPrefixForInterpolation(newInterpolationMode: UnityEditor.RotationCurveInterpolation.Mode): string;
    static RemapAnimationBindingForAddKey(binding: UnityEditor.EditorCurveBinding, clip: any): UnityEditor.EditorCurveBinding[];
    static RemapAnimationBindingForRotationAddKey(binding: UnityEditor.EditorCurveBinding, clip: any): UnityEditor.EditorCurveBinding[];
    static RemapAnimationBindingForRotationCurves(curveBinding: UnityEditor.EditorCurveBinding, clip: any): UnityEditor.EditorCurveBinding;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kPostFix: any[];
  }
}
declare namespace UnityEditor.RotationCurveInterpolation {
  class Mode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Baked: UnityEditor.RotationCurveInterpolation.Mode;
    static NonBaked: UnityEditor.RotationCurveInterpolation.Mode;
    static RawQuaternions: UnityEditor.RotationCurveInterpolation.Mode;
    static RawEuler: UnityEditor.RotationCurveInterpolation.Mode;
    static Undefined: UnityEditor.RotationCurveInterpolation.Mode;
  }
}
declare namespace UnityEditor.RotationCurveInterpolation {
  class State {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    allAreNonBaked: boolean;
    allAreBaked: boolean;
    allAreRaw: boolean;
    allAreRotations: boolean;
  }
}
declare namespace UnityEditor {
  class RotationModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.RotationModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    rotation: any;
    separateAxes: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class RuntimeClassRegistry {
    // constructors
    constructor();
    // methods
    GetScenesForClass(ID: number): any;
    AddNativeClassID(ID: number): void;
    SetUsedTypesInUserAssembly(typeNames: string[], assemblyName: string): void;
    IsDLLUsed(dll: string): boolean;
    AddMonoClass(className: string): void;
    AddMonoClasses(classes: any): void;
    SynchronizeClasses(): void;
    GetAllNativeClassesAsString(): any;
    GetAllNativeClassesIncludingManagersAsString(): any;
    GetAllManagedClassesAsString(): any;
    GetAllManagedBaseClassesAsString(): any;
    static Create(): UnityEditor.RuntimeClassRegistry;
    Initialize(nativeClassIDs: number[], buildTarget: UnityEditor.BuildTarget): void;
    SetSceneClasses(nativeClassIDs: number[], scene: string): void;
    GetRetentionLevel(className: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly UsedTypePerUserAssembly: any;
    // fields
  }
}
declare namespace UnityEditor.RuntimeClassRegistry {
  class MethodDescription {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    assembly: string;
    fullTypeName: string;
    methodName: string;
  }
}
declare namespace UnityEditor {
  class SaveAssetsProcessor {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SavedBool {
    // constructors
    constructor(name: string, value: boolean);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    value: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class SavedFilter {
    // constructors
    constructor(name: string, filter: UnityEditor.SearchFilter, depth: number, previewSize: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Name: string;
    m_Depth: number;
    m_PreviewSize: number;
    m_ID: number;
    m_Filter: UnityEditor.SearchFilter;
  }
}
declare namespace UnityEditor {
  class SavedFloat {
    // constructors
    constructor(name: string, value: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    value: number;
    // fields
  }
}
declare namespace UnityEditor {
  class SavedGUIState {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SavedInt {
    // constructors
    constructor(name: string, value: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    value: number;
    // fields
  }
}
declare namespace UnityEditor {
  class SavedRenderTargetState {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SavedSearchFilters {
    // constructors
    constructor();
    // methods
    static AddSavedFilter(displayName: string, filter: UnityEditor.SearchFilter, previewSize: number): number;
    static AddSavedFilterAfterInstanceID(displayName: string, filter: UnityEditor.SearchFilter, previewSize: number, insertAfterID: number, addAsChild: boolean): number;
    static RemoveSavedFilter(instanceID: number): void;
    static IsSavedFilter(instanceID: number): boolean;
    static GetRootInstanceID(): number;
    static GetFilter(instanceID: number): UnityEditor.SearchFilter;
    static GetPreviewSize(instanceID: number): number;
    static GetName(instanceID: number): string;
    static SetName(instanceID: number, name: string): void;
    static UpdateExistingSavedFilter(instanceID: number, filter: UnityEditor.SearchFilter, previewSize: number): void;
    static ConvertToTreeView(): UnityEditor.IMGUI.Controls.TreeViewItem;
    static AddChangeListener(callback: (() => void)): void;
    static MoveSavedFilter(instanceID: number, parentInstanceID: number, targetInstanceID: number, after: boolean): void;
    static CanMoveSavedFilter(instanceID: number, parentInstanceID: number, targetInstanceID: number, after: boolean): boolean;
    static AllowsHierarchy(): boolean;
    ToString(): string;
    SetDirty(): void;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SaveType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Binary: UnityEditor.SaveType;
    static Text: UnityEditor.SaveType;
  }
}
declare namespace UnityEditor {
  class SaveWindowLayout {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ScaleTool {
    // constructors
    constructor();
    // methods
    static OnGUI(view: UnityEditor.SceneView): void;
    ToolGUI(view: UnityEditor.SceneView, handlePosition: any, isStatic: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SceneAsset {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SceneFXWindow {
    // constructors
    constructor(sceneView: UnityEditor.SceneView);
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.SceneFXWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    menuItem: any;
  }
}
declare namespace UnityEditor {
  class SceneHierarchySortingWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SceneHierarchySortingWindow {
  class InputData {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_TypeName: string;
    m_Name: string;
    m_Selected: boolean;
  }
}
declare namespace UnityEditor.SceneHierarchySortingWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    menuItem: any;
  }
}
declare namespace UnityEditor {
  class SceneHierarchyWindow {
    // constructors
    constructor();
    // methods
    static GetAllSceneHierarchyWindows(): any;
    SetCurrentRootInstanceID(instanceID: number): void;
    GetCurrentVisibleObjects(): string[];
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    static IsSceneHeaderInHierarchyWindow(scene: any): boolean;
    SetExpandedRecursive(id: number, expand: boolean): void;
    ReloadData(): void;
    SearchChanged(): void;
    SetSortFunction(sortType: any): void;
    DirtySortingMethods(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    FrameObject(instanceID: number, ping: boolean): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly lastInteractedHierarchyWindow: UnityEditor.SceneHierarchyWindow;
    static s_Debug: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SceneHierarchyWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    defaultSortingContent: any;
    createContent: any;
    fetchWarning: any;
    MiniButton: any;
    lockButton: any;
  }
}
declare namespace UnityEditor.SceneManagement {
  class EditorSceneManager {
    // constructors
    constructor();
    // methods
    static OpenScene(scenePath: string, mode: UnityEditor.SceneManagement.OpenSceneMode): any;
    static OpenScene(scenePath: string): any;
    static NewScene(setup: UnityEditor.SceneManagement.NewSceneSetup, mode: UnityEditor.SceneManagement.NewSceneMode): any;
    static NewScene(setup: UnityEditor.SceneManagement.NewSceneSetup): any;
    static CloseScene(scene: any, removeScene: boolean): boolean;
    static MoveSceneBefore(src: any, dst: any): void;
    static MoveSceneAfter(src: any, dst: any): void;
    static SaveScene(scene: any, dstScenePath: string, saveAsCopy: boolean): boolean;
    static SaveScene(scene: any, dstScenePath: string): boolean;
    static SaveScene(scene: any): boolean;
    static SaveOpenScenes(): boolean;
    static SaveScenes(scenes: any[]): boolean;
    static SaveCurrentModifiedScenesIfUserWantsTo(): boolean;
    static SaveModifiedScenesIfUserWantsTo(scenes: any[]): boolean;
    static MarkSceneDirty(scene: any): boolean;
    static MarkAllScenesDirty(): void;
    static GetSceneManagerSetup(): UnityEditor.SceneManagement.SceneSetup[];
    static RestoreSceneManagerSetup(value: UnityEditor.SceneManagement.SceneSetup[]): void;
    static DetectCrossSceneReferences(scene: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly loadedSceneCount: number;
    static preventCrossSceneReferences: boolean;
    // fields
  }
}
declare namespace UnityEditor.SceneManagement {
  class NewSceneMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Single: UnityEditor.SceneManagement.NewSceneMode;
    static Additive: UnityEditor.SceneManagement.NewSceneMode;
  }
}
declare namespace UnityEditor.SceneManagement {
  class NewSceneSetup {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static EmptyScene: UnityEditor.SceneManagement.NewSceneSetup;
    static DefaultGameObjects: UnityEditor.SceneManagement.NewSceneSetup;
  }
}
declare namespace UnityEditor.SceneManagement {
  class OpenSceneMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Single: UnityEditor.SceneManagement.OpenSceneMode;
    static Additive: UnityEditor.SceneManagement.OpenSceneMode;
    static AdditiveWithoutLoading: UnityEditor.SceneManagement.OpenSceneMode;
  }
}
declare namespace UnityEditor.SceneManagement {
  class SceneSetup {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    path: string;
    isLoaded: boolean;
    isActive: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class SceneModeUtility {
    // constructors
    private constructor();
    // methods
    static SearchForType(type: any): void;
    static SearchBar(types: any[]): any;
    static StaticFlagField(label: string, property: UnityEditor.SerializedProperty, flag: number): boolean;
    static SetStaticFlags(targetObjects: any[], changedFlags: number, flagValue: boolean): boolean;
    static GetObjects(gameObjects: any[], includeChildren: boolean): any[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.SceneModeUtility {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    typeButton: any;
  }
}
declare namespace UnityEditor {
  class SceneRenderModeWindow {
    // constructors
    constructor(sceneView: UnityEditor.SceneView);
    // methods
    GetWindowSize(): any;
    OnOpen(): void;
    OnGUI(rect: any): void;
    static GetGUIContent(drawCameraMode: UnityEditor.DrawCameraMode): any;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.SceneRenderModeWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static sMenuItem: any;
    static sSeparator: any;
    static sShadedHeader: any;
    static sMiscellaneous: any;
    static sDeferredHeader: any;
    static sGlobalIlluminationHeader: any;
    static sResolutionToggle: any;
    static sRenderModeOptions: any[];
  }
}
declare namespace UnityEditor.SceneView {
  class CursorRect {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    rect: any;
    cursor: UnityEditor.MouseCursor;
  }
}
declare namespace UnityEditor {
  class SceneView {
    // constructors
    constructor();
    // methods
    SetSceneViewShaderReplace(shader: any, replaceString: string): void;
    static FrameLastActiveSceneView(): boolean;
    static FrameLastActiveSceneViewWithLock(): boolean;
    static GetAllSceneCameras(): any[];
    static RepaintAll(): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    OnSelectionChange(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    SetSceneViewFiltering(enable: boolean): void;
    FixNegativeSize(): void;
    LookAt(pos: any): void;
    LookAt(pos: any, rot: any): void;
    LookAtDirect(pos: any, rot: any): void;
    LookAt(pos: any, rot: any, newSize: number): void;
    LookAtDirect(pos: any, rot: any, newSize: number): void;
    LookAt(pos: any, rot: any, newSize: number, ortho: boolean): void;
    LookAt(pos: any, rot: any, newSize: number, ortho: boolean, instant: boolean): void;
    AlignViewToObject(t: any): void;
    AlignWithView(): void;
    MoveToView(): void;
    MoveToView(target: any): void;
    FrameSelected(): boolean;
    FrameSelected(lockView: boolean): boolean;
    static ShowCompileErrorNotification(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static readonly lastActiveSceneView: UnityEditor.SceneView;
    static readonly currentDrawingSceneView: UnityEditor.SceneView;
    in2DMode: boolean;
    isRotationLocked: boolean;
    renderMode: UnityEditor.DrawCameraMode;
    lastSceneViewRotation: any;
    static readonly sceneViews: any;
    readonly camera: any;
    pivot: any;
    rotation: any;
    size: number;
    orthographic: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_SceneLighting: boolean;
    lastFramingTime: number;
    m_AudioPlay: boolean;
    static onSceneGUIDelegate: ((UnityEditor.SceneView) => void);
    m_RenderMode: UnityEditor.DrawCameraMode;
  }
}
declare namespace UnityEditor.SceneView {
  class DraggingLockedState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotDragging: UnityEditor.SceneView.DraggingLockedState;
    static Dragging: UnityEditor.SceneView.DraggingLockedState;
    static LookAt: UnityEditor.SceneView.DraggingLockedState;
  }
}
declare namespace UnityEditor.SceneView {
  class SceneViewState {
    // constructors
    constructor();
    constructor(other: UnityEditor.SceneView.SceneViewState);
    // methods
    IsAllOn(): boolean;
    Toggle(value: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    showFog: boolean;
    showMaterialUpdate: boolean;
    showSkybox: boolean;
    showFlares: boolean;
    showImageEffects: boolean;
  }
}
declare namespace UnityEditor {
  class SceneViewGrid {
    // constructors
    constructor();
    // methods
    Register(source: UnityEditor.SceneView): void;
    PrepareGridRender(camera: any, pivot: any, rotation: any, size: number, orthoMode: boolean, gridVisible: boolean): UnityEditor.DrawGridParameters;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SceneViewMotion {
    // constructors
    constructor();
    // methods
    static ArrowKeys(sv: UnityEditor.SceneView): void;
    static DoViewTool(view: UnityEditor.SceneView): void;
    static ResetMotion(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SceneViewOverlay {
    // constructors
    constructor(sceneView: UnityEditor.SceneView);
    // methods
    Begin(): void;
    End(): void;
    static Window(title: any, sceneViewFunc: ((any, UnityEditor.SceneView) => void), order: number, option: UnityEditor.SceneViewOverlay.WindowDisplayOption): void;
    static Window(title: any, sceneViewFunc: ((any, UnityEditor.SceneView) => void), order: number, target: any, option: UnityEditor.SceneViewOverlay.WindowDisplayOption): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.SceneViewOverlay {
  class Ordering {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Camera: UnityEditor.SceneViewOverlay.Ordering;
    static Cloth: UnityEditor.SceneViewOverlay.Ordering;
    static OcclusionCulling: UnityEditor.SceneViewOverlay.Ordering;
    static Lightmapping: UnityEditor.SceneViewOverlay.Ordering;
    static NavMesh: UnityEditor.SceneViewOverlay.Ordering;
    static ParticleEffect: UnityEditor.SceneViewOverlay.Ordering;
  }
}
declare namespace UnityEditor.SceneViewOverlay {
  class OverlayWindow {
    // constructors
    constructor();
    // methods
    CompareTo(other: UnityEditor.SceneViewOverlay.OverlayWindow): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Title: any;
    m_SceneViewFunc: ((any, UnityEditor.SceneView) => void);
    m_PrimaryOrder: number;
    m_SecondaryOrder: number;
    m_Target: any;
  }
}
declare namespace UnityEditor.SceneViewOverlay {
  class WindowDisplayOption {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static MultipleWindowsPerTarget: UnityEditor.SceneViewOverlay.WindowDisplayOption;
    static OneWindowPerTarget: UnityEditor.SceneViewOverlay.WindowDisplayOption;
    static OneWindowPerTitle: UnityEditor.SceneViewOverlay.WindowDisplayOption;
  }
}
declare namespace UnityEditor {
  class SceneViewPicking {
    // constructors
    constructor();
    // methods
    static PickGameObject(mousePosition: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SceneViewRotation {
    // constructors
    constructor();
    // methods
    Register(view: UnityEditor.SceneView): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.SceneViewRotation {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    viewLabelStyleLeftAligned: any;
    viewLabelStyleCentered: any;
    viewAxisLabelStyle: any;
    lockStyle: any;
    unlockedRotationIcon: any;
    lockedRotationIcon: any;
  }
}
declare namespace UnityEditor {
  class ScreenShots {
    // constructors
    constructor();
    // methods
    static SetMainWindowSize(): void;
    static SetMainWindowSizeSmall(): void;
    static Screenshot(): void;
    static ScreenshotToolbar(): void;
    static ScreenshotExtendedRight(): void;
    static ScreenShotComponent(): void;
    static ScreenShotComponent(contentRect: any, target: any): void;
    static ScreenGameViewContent(): void;
    static ToggleFakeNonDeveloperBuild(): void;
    static SaveScreenShot(r: any, name: string): void;
    static SaveScreenShotWithBorder(r: any, borderColor: any, name: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kToolbarBorderColor: any;
    static kWindowBorderColor: any;
    static s_TakeComponentScreenshot: boolean;
  }
}
declare namespace UnityEditor {
  class ScriptableWizard {
    // constructors
    constructor();
    // methods
    static DisplayWizard(title: string, klass: any, createButtonName: string): UnityEditor.ScriptableWizard;
    static DisplayWizard(title: string, klass: any): UnityEditor.ScriptableWizard;
    static DisplayWizard(title: string, klass: any, createButtonName: string, otherButtonName: string): UnityEditor.ScriptableWizard;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ScriptableWizard {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static errorText: string;
    static box: string;
  }
}
declare namespace UnityEditor {
  class ScriptAttributeUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ScriptAttributeUtility {
  class DrawerKeySet {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    drawer: any;
    type: any;
  }
}
declare namespace UnityEditor {
  class ScriptCallOptimizationLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SlowAndSafe: UnityEditor.ScriptCallOptimizationLevel;
    static FastButNoExceptions: UnityEditor.ScriptCallOptimizationLevel;
  }
}
declare namespace UnityEditor {
  class ScriptExecutionOrderInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    UseDefaultMargins(): boolean;
    OnInspectorGUI(): void;
    DrawElement(r: any, obj: any, dragging: boolean): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static m_Styles: UnityEditor.ScriptExecutionOrderInspector.Styles;
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class DragReorderGUI {
    // constructors
    constructor();
    // methods
    static DragReorder(position: any, elementHeight: number, elements: any, drawElementDelegate: ((any, any, boolean) => void)): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class SortMonoScriptExecutionOrder {
    // constructors
    constructor(inspector: UnityEditor.ScriptExecutionOrderInspector);
    // methods
    Compare(x: UnityEditor.MonoScript, y: UnityEditor.MonoScript): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class SortMonoScriptNameOrder {
    // constructors
    constructor();
    // methods
    Compare(x: UnityEditor.MonoScript, y: UnityEditor.MonoScript): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ScriptExecutionOrderInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    helpText: any;
    iconToolbarPlus: any;
    iconToolbarMinus: any;
    defaultTimeContent: any;
    toolbar: any;
    toolbarDropDown: any;
    boxBackground: any;
    removeButton: any;
    elementBackground: any;
    defaultTime: any;
    draggingHandle: any;
    dropField: any;
  }
}
declare namespace UnityEditor.Scripting {
  class APIUpdaterHelper {
    // constructors
    constructor();
    // methods
    static IsReferenceToMissingObsoleteMember(namespaceName: string, className: string): boolean;
    static IsReferenceToTypeWithChangedNamespace(simpleOrQualifiedName: string): boolean;
    static Run(commaSeparatedListOfAssemblies: string): void;
    static DoesAssemblyRequireUpgrade(assemblyFullPath: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting {
  class APIUpdaterLogger {
    // constructors
    constructor();
    // methods
    static WriteToFile(msg: string, args: any[]): void;
    static WriteErrorToConsole(msg: string, args: any[]): void;
    static WriteInfoToConsole(line: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class APIUpdaterHelper {
    // constructors
    constructor();
    // methods
    static UpdateScripts(responseFile: string, sourceExtension: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class BooCompiler {
    // constructors
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
    // methods
    BeginCompiling(): void;
    Dispose(): void;
    Poll(): boolean;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class BooCompilerOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class BooLanguage {
    // constructors
    constructor();
    // methods
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetNamespace(fileName: string, definedSymbols: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class Cil2AsOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CommandLineFormatter {
    // constructors
    private constructor();
    // methods
    static EscapeCharsQuote(input: string): string;
    static PrepareFileName(input: string): string;
    static EscapeCharsWindows(input: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CompilerMessage {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    message: string;
    file: string;
    line: number;
    column: number;
    type: UnityEditor.Scripting.Compilers.CompilerMessageType;
    normalizedStatus: UnityEditor.Scripting.Compilers.NormalizedCompilerStatus;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CompilerMessageType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Error: UnityEditor.Scripting.Compilers.CompilerMessageType;
    static Warning: UnityEditor.Scripting.Compilers.CompilerMessageType;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CompilerOutputParserBase {
    // constructors
    private constructor();
    // methods
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class CSharpLanguage {
    // constructors
    constructor();
    // methods
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetNamespace(fileName: string, definedSymbols: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers.CSharpLanguage {
  class NamespaceVisitor {
    // constructors
    constructor();
    // methods
    VisitNamespaceDeclaration(namespaceDeclaration: any, data: any): any;
    VisitTypeDeclaration(typeDeclaration: any, data: any): any;
    VisitAddHandlerStatement(addHandlerStatement: any, data: any): any;
    VisitAddressOfExpression(addressOfExpression: any, data: any): any;
    VisitAnonymousMethodExpression(anonymousMethodExpression: any, data: any): any;
    VisitArrayCreateExpression(arrayCreateExpression: any, data: any): any;
    VisitAssignmentExpression(assignmentExpression: any, data: any): any;
    VisitAttribute(attribute: any, data: any): any;
    VisitAttributeSection(attributeSection: any, data: any): any;
    VisitBaseReferenceExpression(baseReferenceExpression: any, data: any): any;
    VisitBinaryOperatorExpression(binaryOperatorExpression: any, data: any): any;
    VisitBlockStatement(blockStatement: any, data: any): any;
    VisitBreakStatement(breakStatement: any, data: any): any;
    VisitCaseLabel(caseLabel: any, data: any): any;
    VisitCastExpression(castExpression: any, data: any): any;
    VisitCatchClause(catchClause: any, data: any): any;
    VisitCheckedExpression(checkedExpression: any, data: any): any;
    VisitCheckedStatement(checkedStatement: any, data: any): any;
    VisitClassReferenceExpression(classReferenceExpression: any, data: any): any;
    VisitCollectionInitializerExpression(collectionInitializerExpression: any, data: any): any;
    VisitCompilationUnit(compilationUnit: any, data: any): any;
    VisitConditionalExpression(conditionalExpression: any, data: any): any;
    VisitConstructorDeclaration(constructorDeclaration: any, data: any): any;
    VisitConstructorInitializer(constructorInitializer: any, data: any): any;
    VisitContinueStatement(continueStatement: any, data: any): any;
    VisitDeclareDeclaration(declareDeclaration: any, data: any): any;
    VisitDefaultValueExpression(defaultValueExpression: any, data: any): any;
    VisitDelegateDeclaration(delegateDeclaration: any, data: any): any;
    VisitDestructorDeclaration(destructorDeclaration: any, data: any): any;
    VisitDirectionExpression(directionExpression: any, data: any): any;
    VisitDoLoopStatement(doLoopStatement: any, data: any): any;
    VisitElseIfSection(elseIfSection: any, data: any): any;
    VisitEmptyStatement(emptyStatement: any, data: any): any;
    VisitEndStatement(endStatement: any, data: any): any;
    VisitEraseStatement(eraseStatement: any, data: any): any;
    VisitErrorStatement(errorStatement: any, data: any): any;
    VisitEventAddRegion(eventAddRegion: any, data: any): any;
    VisitEventDeclaration(eventDeclaration: any, data: any): any;
    VisitEventRaiseRegion(eventRaiseRegion: any, data: any): any;
    VisitEventRemoveRegion(eventRemoveRegion: any, data: any): any;
    VisitExitStatement(exitStatement: any, data: any): any;
    VisitExpressionRangeVariable(expressionRangeVariable: any, data: any): any;
    VisitExpressionStatement(expressionStatement: any, data: any): any;
    VisitExternAliasDirective(externAliasDirective: any, data: any): any;
    VisitFieldDeclaration(fieldDeclaration: any, data: any): any;
    VisitFixedStatement(fixedStatement: any, data: any): any;
    VisitForeachStatement(foreachStatement: any, data: any): any;
    VisitForNextStatement(forNextStatement: any, data: any): any;
    VisitForStatement(forStatement: any, data: any): any;
    VisitGotoCaseStatement(gotoCaseStatement: any, data: any): any;
    VisitGotoStatement(gotoStatement: any, data: any): any;
    VisitIdentifierExpression(identifierExpression: any, data: any): any;
    VisitIfElseStatement(ifElseStatement: any, data: any): any;
    VisitIndexerDeclaration(indexerDeclaration: any, data: any): any;
    VisitIndexerExpression(indexerExpression: any, data: any): any;
    VisitInnerClassTypeReference(innerClassTypeReference: any, data: any): any;
    VisitInterfaceImplementation(interfaceImplementation: any, data: any): any;
    VisitInvocationExpression(invocationExpression: any, data: any): any;
    VisitLabelStatement(labelStatement: any, data: any): any;
    VisitLambdaExpression(lambdaExpression: any, data: any): any;
    VisitLocalVariableDeclaration(localVariableDeclaration: any, data: any): any;
    VisitLockStatement(lockStatement: any, data: any): any;
    VisitMemberReferenceExpression(memberReferenceExpression: any, data: any): any;
    VisitMethodDeclaration(methodDeclaration: any, data: any): any;
    VisitNamedArgumentExpression(namedArgumentExpression: any, data: any): any;
    VisitObjectCreateExpression(objectCreateExpression: any, data: any): any;
    VisitOnErrorStatement(onErrorStatement: any, data: any): any;
    VisitOperatorDeclaration(operatorDeclaration: any, data: any): any;
    VisitOptionDeclaration(optionDeclaration: any, data: any): any;
    VisitParameterDeclarationExpression(parameterDeclarationExpression: any, data: any): any;
    VisitParenthesizedExpression(parenthesizedExpression: any, data: any): any;
    VisitPointerReferenceExpression(pointerReferenceExpression: any, data: any): any;
    VisitPrimitiveExpression(primitiveExpression: any, data: any): any;
    VisitPropertyDeclaration(propertyDeclaration: any, data: any): any;
    VisitPropertyGetRegion(propertyGetRegion: any, data: any): any;
    VisitPropertySetRegion(propertySetRegion: any, data: any): any;
    VisitQueryExpression(queryExpression: any, data: any): any;
    VisitQueryExpressionAggregateClause(queryExpressionAggregateClause: any, data: any): any;
    VisitQueryExpressionDistinctClause(queryExpressionDistinctClause: any, data: any): any;
    VisitQueryExpressionFromClause(queryExpressionFromClause: any, data: any): any;
    VisitQueryExpressionGroupClause(queryExpressionGroupClause: any, data: any): any;
    VisitQueryExpressionGroupJoinVBClause(queryExpressionGroupJoinVBClause: any, data: any): any;
    VisitQueryExpressionGroupVBClause(queryExpressionGroupVBClause: any, data: any): any;
    VisitQueryExpressionJoinClause(queryExpressionJoinClause: any, data: any): any;
    VisitQueryExpressionJoinConditionVB(queryExpressionJoinConditionVB: any, data: any): any;
    VisitQueryExpressionJoinVBClause(queryExpressionJoinVBClause: any, data: any): any;
    VisitQueryExpressionLetClause(queryExpressionLetClause: any, data: any): any;
    VisitQueryExpressionLetVBClause(queryExpressionLetVBClause: any, data: any): any;
    VisitQueryExpressionOrderClause(queryExpressionOrderClause: any, data: any): any;
    VisitQueryExpressionOrdering(queryExpressionOrdering: any, data: any): any;
    VisitQueryExpressionPartitionVBClause(queryExpressionPartitionVBClause: any, data: any): any;
    VisitQueryExpressionSelectClause(queryExpressionSelectClause: any, data: any): any;
    VisitQueryExpressionSelectVBClause(queryExpressionSelectVBClause: any, data: any): any;
    VisitQueryExpressionWhereClause(queryExpressionWhereClause: any, data: any): any;
    VisitRaiseEventStatement(raiseEventStatement: any, data: any): any;
    VisitReDimStatement(reDimStatement: any, data: any): any;
    VisitRemoveHandlerStatement(removeHandlerStatement: any, data: any): any;
    VisitResumeStatement(resumeStatement: any, data: any): any;
    VisitReturnStatement(returnStatement: any, data: any): any;
    VisitSizeOfExpression(sizeOfExpression: any, data: any): any;
    VisitStackAllocExpression(stackAllocExpression: any, data: any): any;
    VisitStopStatement(stopStatement: any, data: any): any;
    VisitSwitchSection(switchSection: any, data: any): any;
    VisitSwitchStatement(switchStatement: any, data: any): any;
    VisitTemplateDefinition(templateDefinition: any, data: any): any;
    VisitThisReferenceExpression(thisReferenceExpression: any, data: any): any;
    VisitThrowStatement(throwStatement: any, data: any): any;
    VisitTryCatchStatement(tryCatchStatement: any, data: any): any;
    VisitTypeOfExpression(typeOfExpression: any, data: any): any;
    VisitTypeOfIsExpression(typeOfIsExpression: any, data: any): any;
    VisitTypeReference(typeReference: any, data: any): any;
    VisitTypeReferenceExpression(typeReferenceExpression: any, data: any): any;
    VisitUnaryOperatorExpression(unaryOperatorExpression: any, data: any): any;
    VisitUncheckedExpression(uncheckedExpression: any, data: any): any;
    VisitUncheckedStatement(uncheckedStatement: any, data: any): any;
    VisitUnsafeStatement(unsafeStatement: any, data: any): any;
    VisitUsing(using: any, data: any): any;
    VisitUsingDeclaration(usingDeclaration: any, data: any): any;
    VisitUsingStatement(usingStatement: any, data: any): any;
    VisitVariableDeclaration(variableDeclaration: any, data: any): any;
    VisitWithStatement(withStatement: any, data: any): any;
    VisitYieldStatement(yieldStatement: any, data: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers.CSharpLanguage {
  class VisitorData {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    TargetClassName: string;
    CurrentNamespaces: any;
    DiscoveredNamespace: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class GendarmeOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class GendarmeRuleData {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    LastIndex: number;
    Line: number;
    File: string;
    Problem: string;
    Details: string;
    Severity: string;
    Source: string;
    Location: string;
    Target: string;
    IsAssemblyError: boolean;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class Il2CppOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MicrosoftCSharpCompiler {
    // constructors
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
    // methods
    BeginCompiling(): void;
    Dispose(): void;
    Poll(): boolean;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MicrosoftCSharpCompilerOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MonoCSharpCompiler {
    // constructors
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
    // methods
    static Compile(sources: string[], references: string[], defines: string[], outputFile: string): string[];
    BeginCompiling(): void;
    Dispose(): void;
    Poll(): boolean;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MonoCSharpCompilerOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class MonoScriptCompilerBase {
    // constructors
    private constructor();
    // methods
    BeginCompiling(): void;
    Dispose(): void;
    Poll(): boolean;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class NormalizedCompilerStatus {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    code: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    details: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class NormalizedCompilerStatusCode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotNormalized: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    static MemberNotFound: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
    static UnknownTypeOrNamespace: UnityEditor.Scripting.Compilers.NormalizedCompilerStatusCode;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class NuGetPackageResolver {
    // constructors
    constructor();
    // methods
    Resolve(): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    PackagesDirectory: string;
    ProjectLockFile: string;
    TargetMoniker: string;
    readonly ResolvedReferences: string[];
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class ScriptCompilerBase {
    // constructors
    private constructor();
    // methods
    BeginCompiling(): void;
    Dispose(): void;
    Poll(): boolean;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class SupportedLanguage {
    // constructors
    private constructor();
    // methods
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetNamespace(fileName: string, definedSymbols: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UnityScriptCompiler {
    // constructors
    constructor(island: UnityEditor.Scripting.MonoIsland, runUpdater: boolean);
    // methods
    BeginCompiling(): void;
    Dispose(): void;
    Poll(): boolean;
    GetCompilerMessages(): UnityEditor.Scripting.Compilers.CompilerMessage[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UnityScriptCompilerOutputParser {
    // constructors
    constructor();
    // methods
    Parse(errorOutput: string[], compilationHadFailure: boolean): any;
    Parse(errorOutput: string[], standardOutput: string[], compilationHadFailure: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UnityScriptLanguage {
    // constructors
    constructor();
    // methods
    GetExtensionICanCompile(): string;
    GetLanguageName(): string;
    CreateCompiler(island: UnityEditor.Scripting.MonoIsland, buildingForEditor: boolean, targetPlatform: UnityEditor.BuildTarget, runUpdater: boolean): UnityEditor.Scripting.Compilers.ScriptCompilerBase;
    GetNamespace(fileName: string, definedSymbols: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UWPExtensionSDK {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    Name: string;
    Version: string;
    ManifestPath: string;
  }
}
declare namespace UnityEditor.Scripting.Compilers {
  class UWPReferences {
    // constructors
    private constructor();
    // methods
    static GetReferences(): string[];
    static GetExtensionSDKs(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Compilers.UWPReferences {
  class UWPExtension {
    // constructors
    constructor(manifest: string, referencesFolder: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Name: string;
    readonly References: string[];
    // fields
  }
}
declare namespace UnityEditor.Scripting {
  class ManagedProgram {
    // constructors
    constructor(monodistribution: string, profile: string, executable: string, arguments_: string, setupStartInfo: ((any) => void));
    constructor(monodistribution: string, profile: string, executable: string, arguments_: string, setMonoEnvironmentVariables: boolean, setupStartInfo: ((any) => void));
    // methods
    Start(): void;
    GetProcessStartInfo(): any;
    LogProcessStartInfo(): void;
    GetAllOutput(): string;
    Dispose(): void;
    Kill(): void;
    GetStandardInput(): any;
    GetStandardOutput(): string[];
    GetStandardOutputAsString(): string;
    GetErrorOutput(): string[];
    GetErrorOutputAsString(): string;
    WaitForExit(): void;
    WaitForExit(milliseconds: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly HasExited: boolean;
    readonly ExitCode: number;
    readonly Id: number;
    // fields
    _process: any;
  }
}
declare namespace UnityEditor.Scripting {
  class MonoIsland {
    // constructors
    private constructor();
    // methods
    GetExtensionOfSourceFiles(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    _target: UnityEditor.BuildTarget;
    _development_player: boolean;
    _editor: boolean;
    _classlib_profile: string;
    _files: string[];
    _references: string[];
    _defines: string[];
    _output: string;
  }
}
declare namespace UnityEditor.Scripting {
  class PragmaFixing30 {
    // constructors
    constructor();
    // methods
    static FixFiles(filesToFix: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting {
  class ScriptCompilers {
    // constructors
    private constructor();
    // methods
    static GetExtensionOfSourceFile(file: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting.Serialization {
  class Weaver {
    // constructors
    private constructor();
    // methods
    static ShouldWeave(name: string): boolean;
    static WeaveAssembliesInFolder(folder: string, playerPackage: string): void;
    static WeaveUnetFromEditor(assemblyPath: string, destPath: string, unityEngine: string, unityUNet: string, buildingForEditor: boolean): boolean;
    static WeaveInto(unityUNet: string, destPath: string, unityEngine: string, assemblyPath: string, extraAssemblyPaths: string[], assemblyResolver: any): boolean;
    static GetReferences(island: UnityEditor.Scripting.MonoIsland, projectDirectory: string): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Scripting {
  class SupportedLanguageStruct {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    extension: string;
    languageName: string;
  }
}
declare namespace UnityEditor {
  class ScriptingImplementation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mono2x: UnityEditor.ScriptingImplementation;
    static IL2CPP: UnityEditor.ScriptingImplementation;
    static WinRTDotNET: UnityEditor.ScriptingImplementation;
  }
}
declare namespace UnityEditor {
  class ScriptingProceduralMaterialInformation {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    offset: any;
    scale: any;
    generateAllOutputs: boolean;
    animationUpdateRate: number;
    generateMipMaps: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class ScriptReloadProperties {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    EditorGUI_IsActuallEditing: boolean;
    EditorGUI_TextEditor_cursorIndex: number;
    EditorGUI_TextEditor_selectIndex: number;
    EditorGUI_TextEditor_controlID: number;
    EditorGUI_TextEditor_hasHorizontalCursorPos: boolean;
    EditorGUI_TextEditor_scrollOffset: any;
    EditorGUI_TextEditor_hasFocus: boolean;
    EditorGUI_TextEditor_graphicalCursorPos: any;
    EditorGUI_TextEditor_content: string;
    EditorGUI_Current_Editing_String: string;
    EditorGUI_DelayedTextEditor_cursorIndex: number;
    EditorGUI_DelayedTextEditor_selectIndex: number;
    EditorGUI_DelayedTextEditor_controlID: number;
    EditorGUI_DelayedTextEditor_hasHorizontalCursorPos: boolean;
    EditorGUI_DelayedTextEditor_scrollOffset: any;
    EditorGUI_DelayedTextEditor_hasFocus: boolean;
    EditorGUI_DelayedTextEditor_graphicalCursorPos: any;
    EditorGUI_DelayedTextEditor_content: string;
    EditorGUI_DelayedControlThatHadFocusValue: string;
  }
}
declare namespace UnityEditor {
  class SearchableEditorWindow {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SearchableEditorWindow {
  class SearchMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static All: UnityEditor.SearchableEditorWindow.SearchMode;
    static Name: UnityEditor.SearchableEditorWindow.SearchMode;
    static Type: UnityEditor.SearchableEditorWindow.SearchMode;
    static Label: UnityEditor.SearchableEditorWindow.SearchMode;
    static AssetBundleName: UnityEditor.SearchableEditorWindow.SearchMode;
  }
}
declare namespace UnityEditor.SearchableEditorWindow {
  class SearchModeHierarchyWindow {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static All: UnityEditor.SearchableEditorWindow.SearchModeHierarchyWindow;
    static Name: UnityEditor.SearchableEditorWindow.SearchModeHierarchyWindow;
    static Type: UnityEditor.SearchableEditorWindow.SearchModeHierarchyWindow;
  }
}
declare namespace UnityEditor {
  class SearchFilter {
    // constructors
    constructor();
    // methods
    ClearSearch(): void;
    GetState(): UnityEditor.SearchFilter.State;
    IsSearching(): boolean;
    SetNewFilter(newFilter: UnityEditor.SearchFilter): boolean;
    ToString(): string;
    static Split(text: string): string[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    nameFilter: string;
    classNames: string[];
    assetLabels: string[];
    versionControlStates: string[];
    assetBundleNames: string[];
    referencingInstanceIDs: number[];
    scenePaths: string[];
    showAllHits: boolean;
    folders: string[];
    searchArea: UnityEditor.SearchFilter.SearchArea;
    // fields
  }
}
declare namespace UnityEditor.SearchFilter {
  class SearchArea {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AllAssets: UnityEditor.SearchFilter.SearchArea;
    static SelectedFolders: UnityEditor.SearchFilter.SearchArea;
    static AssetStore: UnityEditor.SearchFilter.SearchArea;
  }
}
declare namespace UnityEditor.SearchFilter {
  class State {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static EmptySearchFilter: UnityEditor.SearchFilter.State;
    static FolderBrowsing: UnityEditor.SearchFilter.State;
    static SearchingInAllAssets: UnityEditor.SearchFilter.State;
    static SearchingInFolders: UnityEditor.SearchFilter.State;
    static SearchingInAssetStore: UnityEditor.SearchFilter.State;
  }
}
declare namespace UnityEditor {
  class SearchFilterTreeItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, isFolder: boolean);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly isFolder: boolean;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SearchUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class Selection {
    // constructors
    constructor();
    // methods
    static Contains(instanceID: number): boolean;
    static Contains(obj: any): boolean;
    static GetTransforms(mode: UnityEditor.SelectionMode): any[];
    static GetFiltered(type: any, mode: UnityEditor.SelectionMode): any[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly transforms: any[];
    static activeTransform: any;
    static readonly gameObjects: any[];
    static activeGameObject: any;
    static activeObject: any;
    static activeInstanceID: number;
    static objects: any[];
    static instanceIDs: number[];
    static readonly assetGUIDs: string[];
    // fields
    static selectionChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class SelectionMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unfiltered: UnityEditor.SelectionMode;
    static TopLevel: UnityEditor.SelectionMode;
    static Deep: UnityEditor.SelectionMode;
    static ExcludePrefab: UnityEditor.SelectionMode;
    static Editable: UnityEditor.SelectionMode;
    static Assets: UnityEditor.SelectionMode;
    static DeepAssets: UnityEditor.SelectionMode;
    static OnlyUserModifiable: UnityEditor.SelectionMode;
  }
}
declare namespace UnityEditor {
  class SemanticMergeMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Off: UnityEditor.SemanticMergeMode;
    static Premerge: UnityEditor.SemanticMergeMode;
    static Ask: UnityEditor.SemanticMergeMode;
  }
}
declare namespace UnityEditor {
  class SerializationMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Mixed: UnityEditor.SerializationMode;
    static ForceBinary: UnityEditor.SerializationMode;
    static ForceText: UnityEditor.SerializationMode;
  }
}
declare namespace UnityEditor {
  class SerializedMinMaxColor {
    // constructors
    constructor(m: UnityEditor.SerializedModule);
    constructor(m: UnityEditor.SerializedModule, name: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    maxColor: UnityEditor.SerializedProperty;
    minColor: UnityEditor.SerializedProperty;
    minMax: UnityEditor.SerializedProperty;
  }
}
declare namespace UnityEditor {
  class SerializedMinMaxCurve {
    // constructors
    constructor(m: UnityEditor.ModuleUI, displayName: any);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string);
    constructor(m: UnityEditor.ModuleUI, displayName: any, signedRange: boolean);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string, signedRange: boolean);
    constructor(m: UnityEditor.ModuleUI, displayName: any, name: string, signedRange: boolean, useProp0: boolean);
    // methods
    SetScalarAndNormalizedConstants(newScalar: number, totalMin: number, totalMax: number): void;
    GetAxisScalars(): any;
    SetAxisScalars(axisScalars: any): void;
    RemoveCurveFromEditor(): void;
    OnCurveAreaMouseDown(button: number, drawRect: any, curveRanges: any): boolean;
    CreateCurveData(color: any): ParticleSystemCurveEditor.CurveData;
    ToggleCurveInEditor(): void;
    GetUniqueCurveName(): string;
    SupportsProcedural(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    state: UnityEditor.MinMaxCurveState;
    readonly signedRange: boolean;
    maxConstant: number;
    minConstant: number;
    // fields
    scalar: UnityEditor.SerializedProperty;
    maxCurve: UnityEditor.SerializedProperty;
    minCurve: UnityEditor.SerializedProperty;
    minCurveFirstKeyValue: UnityEditor.SerializedProperty;
    maxCurveFirstKeyValue: UnityEditor.SerializedProperty;
    m_Module: UnityEditor.ModuleUI;
    m_DisplayName: any;
    m_DefaultCurveScalar: number;
    m_RemapValue: number;
    m_AllowConstant: boolean;
    m_AllowRandom: boolean;
    m_AllowCurves: boolean;
    m_MaxAllowedScalar: number;
  }
}
declare namespace UnityEditor {
  class SerializedMinMaxGradient {
    // constructors
    constructor(m: UnityEditor.SerializedModule);
    constructor(m: UnityEditor.SerializedModule, name: string);
    // methods
    static GetGradientAsColor(gradientProp: UnityEditor.SerializedProperty): any;
    static SetGradientAsColor(gradientProp: UnityEditor.SerializedProperty, color: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    state: UnityEditor.MinMaxGradientState;
    // fields
    m_MaxGradient: UnityEditor.SerializedProperty;
    m_MinGradient: UnityEditor.SerializedProperty;
    m_MaxColor: UnityEditor.SerializedProperty;
    m_MinColor: UnityEditor.SerializedProperty;
    m_AllowColor: boolean;
    m_AllowGradient: boolean;
    m_AllowRandomBetweenTwoColors: boolean;
    m_AllowRandomBetweenTwoGradients: boolean;
    m_AllowRandomColor: boolean;
  }
}
declare namespace UnityEditor {
  class SerializedModule {
    // constructors
    constructor(o: UnityEditor.SerializedObject, name: string);
    // methods
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    static Concat(a: string, b: string): string;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SerializedObject {
    // constructors
    constructor(obj: any);
    constructor(objs: any[]);
    // methods
    Update(): void;
    SetIsDifferentCacheDirty(): void;
    UpdateIfDirtyOrScript(): void;
    Dispose(): void;
    GetIterator(): UnityEditor.SerializedProperty;
    FindProperty(propertyPath: string): UnityEditor.SerializedProperty;
    ApplyModifiedProperties(): boolean;
    ApplyModifiedPropertiesWithoutUndo(): boolean;
    CopyFromSerializedProperty(prop: UnityEditor.SerializedProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly targetObject: any;
    readonly targetObjects: any[];
    readonly isEditingMultipleObjects: boolean;
    maxArraySizeForMultiEditing: number;
    // fields
  }
}
declare namespace UnityEditor {
  class SerializedProperty {
    // constructors
    private constructor();
    // methods
    Dispose(): void;
    static EqualContents(x: UnityEditor.SerializedProperty, y: UnityEditor.SerializedProperty): boolean;
    Next(enterChildren: boolean): boolean;
    NextVisible(enterChildren: boolean): boolean;
    Reset(): void;
    CountRemaining(): number;
    CountInProperty(): number;
    Copy(): UnityEditor.SerializedProperty;
    DuplicateCommand(): boolean;
    DeleteCommand(): boolean;
    FindPropertyRelative(relativePropertyPath: string): UnityEditor.SerializedProperty;
    GetEndProperty(): UnityEditor.SerializedProperty;
    GetEndProperty(includeInvisible: boolean): UnityEditor.SerializedProperty;
    GetEnumerator(): any;
    GetArrayElementAtIndex(index: number): UnityEditor.SerializedProperty;
    InsertArrayElementAtIndex(index: number): void;
    DeleteArrayElementAtIndex(index: number): void;
    ClearArray(): void;
    MoveArrayElement(srcIndex: number, dstIndex: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly serializedObject: UnityEditor.SerializedObject;
    readonly hasMultipleDifferentValues: boolean;
    readonly displayName: string;
    readonly name: string;
    readonly type: string;
    readonly tooltip: string;
    readonly depth: number;
    readonly propertyPath: string;
    readonly editable: boolean;
    readonly isAnimated: boolean;
    isExpanded: boolean;
    readonly hasChildren: boolean;
    readonly hasVisibleChildren: boolean;
    readonly isInstantiatedPrefab: boolean;
    prefabOverride: boolean;
    readonly propertyType: UnityEditor.SerializedPropertyType;
    intValue: number;
    longValue: number;
    boolValue: boolean;
    floatValue: number;
    doubleValue: number;
    stringValue: string;
    colorValue: any;
    animationCurveValue: any;
    objectReferenceValue: any;
    objectReferenceInstanceIDValue: number;
    enumValueIndex: number;
    readonly enumNames: string[];
    readonly enumDisplayNames: string[];
    vector2Value: any;
    vector3Value: any;
    vector4Value: any;
    quaternionValue: any;
    rectValue: any;
    boundsValue: any;
    readonly isArray: boolean;
    arraySize: number;
    // fields
  }
}
declare namespace UnityEditor {
  class SerializedPropertyType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Generic: UnityEditor.SerializedPropertyType;
    static Integer: UnityEditor.SerializedPropertyType;
    static Boolean: UnityEditor.SerializedPropertyType;
    static Float: UnityEditor.SerializedPropertyType;
    static String: UnityEditor.SerializedPropertyType;
    static Color: UnityEditor.SerializedPropertyType;
    static ObjectReference: UnityEditor.SerializedPropertyType;
    static LayerMask: UnityEditor.SerializedPropertyType;
    static Enum: UnityEditor.SerializedPropertyType;
    static Vector2: UnityEditor.SerializedPropertyType;
    static Vector3: UnityEditor.SerializedPropertyType;
    static Vector4: UnityEditor.SerializedPropertyType;
    static Rect: UnityEditor.SerializedPropertyType;
    static ArraySize: UnityEditor.SerializedPropertyType;
    static Character: UnityEditor.SerializedPropertyType;
    static AnimationCurve: UnityEditor.SerializedPropertyType;
    static Bounds: UnityEditor.SerializedPropertyType;
    static Gradient: UnityEditor.SerializedPropertyType;
    static Quaternion: UnityEditor.SerializedPropertyType;
  }
}
declare namespace UnityEditor {
  class SessionState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class Settings {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ShaderError {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    message: string;
    messageDetails: string;
    platform: string;
    file: string;
    line: number;
    warning: number;
  }
}
declare namespace UnityEditor {
  class ShaderGUI {
    // constructors
    private constructor();
    // methods
    OnGUI(materialEditor: UnityEditor.MaterialEditor, properties: UnityEditor.MaterialProperty[]): void;
    OnMaterialPreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialInteractivePreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialPreviewSettingsGUI(materialEditor: UnityEditor.MaterialEditor): void;
    AssignNewShaderToMaterial(material: any, oldShader: any, newShader: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ShaderGUIUtility {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class ShaderImporter {
    // constructors
    constructor();
    // methods
    GetShader(): any;
    SetDefaultTextures(name: string[], textures: any[]): void;
    GetDefaultTexture(name: string): any;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ShaderImporterInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ShaderInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ShaderInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static errorIcon: any;
    static warningIcon: any;
    static showSurface: any;
    static showFF: any;
    static showCurrent: any;
    static messageStyle: any;
    static evenBackground: any;
    static no: any;
    static builtinShader: any;
  }
}
declare namespace UnityEditor {
  class ShaderInspectorPlatformsPopup {
    // constructors
    constructor(shader: any);
    // methods
    GetWindowSize(): any;
    OnGUI(rect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static currentMode: number;
    static currentPlatformMask: number;
    static currentVariantStripping: number;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.ShaderInspectorPlatformsPopup {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static menuItem: any;
    static separator: any;
  }
}
declare namespace UnityEditor {
  class ShaderUtil {
    // constructors
    constructor();
    // methods
    static GetPropertyCount(s: any): number;
    static GetPropertyDescription(s: any, propertyIdx: number): string;
    static GetPropertyName(s: any, propertyIdx: number): string;
    static GetPropertyType(s: any, propertyIdx: number): UnityEditor.ShaderUtil.ShaderPropertyType;
    static GetRangeLimits(s: any, propertyIdx: number, defminmax: number): number;
    static GetTexDim(s: any, propertyIdx: number): any;
    static IsShaderPropertyHidden(s: any, propertyIdx: number): boolean;
    static CreateShaderAsset(source: string): any;
    static UpdateShaderAsset(shader: any, source: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly hardwareSupportsRectRenderTexture: boolean;
    // fields
  }
}
declare namespace UnityEditor.ShaderUtil {
  class ShaderCompilerPlatformType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static OpenGL: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static D3D9: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Xbox360: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PS3: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static D3D11: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLES20: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLES20Desktop: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Flash: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static D3D11_9x: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLES30: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PSVita: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PS4: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static XboxOne: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static PSM: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Metal: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static OpenGLCore: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static N3DS: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static WiiU: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Vulkan: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
    static Count: UnityEditor.ShaderUtil.ShaderCompilerPlatformType;
  }
}
declare namespace UnityEditor.ShaderUtil {
  class ShaderPropertyTexDim {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static TexDimNone: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDim2D: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDim3D: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDimCUBE: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
    static TexDimAny: UnityEditor.ShaderUtil.ShaderPropertyTexDim;
  }
}
declare namespace UnityEditor.ShaderUtil {
  class ShaderPropertyType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Color: UnityEditor.ShaderUtil.ShaderPropertyType;
    static Vector: UnityEditor.ShaderUtil.ShaderPropertyType;
    static Float: UnityEditor.ShaderUtil.ShaderPropertyType;
    static Range: UnityEditor.ShaderUtil.ShaderPropertyType;
    static TexEnv: UnityEditor.ShaderUtil.ShaderPropertyType;
  }
}
declare namespace UnityEditor {
  class ShaderVariantCollectionInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.ShaderVariantCollectionInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static iconAdd: any;
    static iconRemove: any;
    static invisibleButton: any;
  }
}
declare namespace UnityEditor {
  class ShadowCascadeSplitGUI {
    // constructors
    private constructor();
    // methods
    static HandleCascadeSliderGUI(normalizedCascadePartitions: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.ShadowCascadeSplitGUI {
  class DragCache {
    // constructors
    constructor(activePartition: number, normalizedPartitionSize: number, currentMousePos: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ActivePartition: number;
    m_NormalizedPartitionSize: number;
    m_LastCachedMousePosition: any;
  }
}
declare namespace UnityEditor {
  class ShadowInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    shadowIntensity: number;
    shadowColor: any;
    latitude: number;
    longitude: number;
    // fields
  }
}
declare namespace UnityEditor {
  class ShapeEditor {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    Edges(): void;
    Tangents(): void;
    Points(): void;
    HandlePointInsertToEdge(closestEdge: number, closestEdgeDist: number): void;
    HandlePointClick(pointIndex: number): void;
    CycleTangentMode(): void;
    static GetNextTangentMode(current: UnityEditor.ShapeEditor.TangentMode): UnityEditor.ShapeEditor.TangentMode;
    RefreshTangentsAfterModeChange(pointIndex: number, oldMode: UnityEditor.ShapeEditor.TangentMode, newMode: UnityEditor.ShapeEditor.TangentMode): void;
    FindClosestPointOnEdge(edgeIndex: number, position: any, iterations: number): any;
    static RectCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static CircleCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    static DiamondCap(controlID: number, position: any, rotation: any, size: number, eventType: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    lineTexture: any;
    activePoint: number;
    readonly selectedPoints: any;
    inEditMode: boolean;
    activeEdge: number;
    // fields
    GetPointPosition: ((number) => any);
    SetPointPosition: ((number, any) => void);
    GetPointLTangent: ((number) => any);
    SetPointLTangent: ((number, any) => void);
    GetPointRTangent: ((number) => any);
    SetPointRTangent: ((number, any) => void);
    GetTangentMode: ((number) => UnityEditor.ShapeEditor.TangentMode);
    SetTangentMode: ((number, UnityEditor.ShapeEditor.TangentMode) => void);
    InsertPointAt: ((number, any) => void);
    RemovePointAt: ((number) => void);
    GetPointsCount: (() => number);
    ScreenToLocal: ((any) => any);
    LocalToScreen: ((any) => any);
    LocalToWorldMatrix: (() => any);
    DistanceToRectangle: (() => ((any, any, number) => number));
    DistanceToDiamond: (() => ((any, any, number) => number));
    DistanceToCircle: (() => ((any, any, number) => number));
    Repaint: (() => void);
    RecordUndo: (() => void);
    Snap: ((any) => any);
    Frame: ((any) => void);
    OnPointClick: ((number) => void);
    OpenEnded: (() => boolean);
    GetHandleSize: (() => number);
  }
}
declare namespace UnityEditor.ShapeEditor {
  class SelectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.ShapeEditor.SelectionType;
    static Additive: UnityEditor.ShapeEditor.SelectionType;
    static Subtractive: UnityEditor.ShapeEditor.SelectionType;
  }
}
declare namespace UnityEditor.ShapeEditor {
  class TangentMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Linear: UnityEditor.ShapeEditor.TangentMode;
    static Continuous: UnityEditor.ShapeEditor.TangentMode;
    static Broken: UnityEditor.ShapeEditor.TangentMode;
  }
}
declare namespace UnityEditor.ShapeEditor {
  class Tool {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Edit: UnityEditor.ShapeEditor.Tool;
    static Create: UnityEditor.ShapeEditor.Tool;
    static Break: UnityEditor.ShapeEditor.Tool;
  }
}
declare namespace UnityEditor {
  class ShapeEditorSelection {
    // constructors
    constructor(owner: UnityEditor.ShapeEditor);
    // methods
    Contains(i: number): boolean;
    DeleteSelection(): void;
    MoveSelection(delta: any): void;
    Clear(): void;
    SelectPoint(i: number, type: UnityEditor.ShapeEditor.SelectionType): void;
    RectSelect(rect: any, type: UnityEditor.ShapeEditor.SelectionType): void;
    OnGUI(): void;
    GetEnumerator(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly Count: number;
    readonly isSelecting: boolean;
    readonly indices: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ShapeModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    GetXAxisScalar(): number;
    OnInspectorGUI(s: any): void;
    OnSceneGUI(system: any, initial: UnityEditor.InitialModuleUI): void;
    Validate(): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.ShapeModuleUI {
  class ShapeTypes {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Sphere: UnityEditor.ShapeModuleUI.ShapeTypes;
    static SphereShell: UnityEditor.ShapeModuleUI.ShapeTypes;
    static Hemisphere: UnityEditor.ShapeModuleUI.ShapeTypes;
    static HemisphereShell: UnityEditor.ShapeModuleUI.ShapeTypes;
    static Cone: UnityEditor.ShapeModuleUI.ShapeTypes;
    static Box: UnityEditor.ShapeModuleUI.ShapeTypes;
    static Mesh: UnityEditor.ShapeModuleUI.ShapeTypes;
    static ConeShell: UnityEditor.ShapeModuleUI.ShapeTypes;
    static ConeVolume: UnityEditor.ShapeModuleUI.ShapeTypes;
    static ConeVolumeShell: UnityEditor.ShapeModuleUI.ShapeTypes;
    static Circle: UnityEditor.ShapeModuleUI.ShapeTypes;
    static CircleEdge: UnityEditor.ShapeModuleUI.ShapeTypes;
    static SingleSidedEdge: UnityEditor.ShapeModuleUI.ShapeTypes;
    static MeshRenderer: UnityEditor.ShapeModuleUI.ShapeTypes;
    static SkinnedMeshRenderer: UnityEditor.ShapeModuleUI.ShapeTypes;
    static BoxShell: UnityEditor.ShapeModuleUI.ShapeTypes;
    static BoxEdge: UnityEditor.ShapeModuleUI.ShapeTypes;
  }
}
declare namespace UnityEditor.ShapeModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    shape: any;
    radius: any;
    coneAngle: any;
    coneLength: any;
    boxX: any;
    boxY: any;
    boxZ: any;
    mesh: any;
    meshRenderer: any;
    skinnedMeshRenderer: any;
    meshMaterialIndex: any;
    useMeshColors: any;
    meshNormalOffset: any;
    meshScale: any;
    alignToDirection: any;
    randomDirectionAmount: any;
    sphericalDirectionAmount: any;
    emitFromShell: any;
    emitFromEdge: any;
    emitFrom: any;
    arc: any;
  }
}
declare namespace UnityEditor {
  class ShowMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NormalWindow: UnityEditor.ShowMode;
    static PopupMenu: UnityEditor.ShowMode;
    static Utility: UnityEditor.ShowMode;
    static NoShadow: UnityEditor.ShowMode;
    static MainWindow: UnityEditor.ShowMode;
    static AuxWindow: UnityEditor.ShowMode;
    static PopupMenuWithKeyboardFocus: UnityEditor.ShowMode;
  }
}
declare namespace UnityEditor {
  class SimpleProfiler {
    // constructors
    constructor();
    // methods
    static Begin(label: string): void;
    static End(): void;
    static PrintTimes(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SizeByVelocityModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.SizeByVelocityModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    velocityRange: any;
    size: any;
    separateAxes: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class SizeModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.SizeModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    size: any;
    separateAxes: any;
    x: any;
    y: any;
    z: any;
  }
}
declare namespace UnityEditor {
  class SketchUpDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, nodes: UnityEditor.SketchUpNodeInfo[]);
    // methods
    FetchEnableNodes(): number[];
    FetchData(): void;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class SketchUpImportCamera {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    position: any;
    lookAt: any;
    up: any;
    fieldOfView: number;
    aspectRatio: number;
    orthoSize: number;
    isPerspective: boolean;
  }
}
declare namespace UnityEditor {
  class SketchUpImportDlg {
    // constructors
    constructor();
    // methods
    Init(nodes: UnityEditor.SketchUpNodeInfo[], suModelEditor: UnityEditor.SketchUpImporterModelEditor): void;
    OnTreeSelectionChanged(selection: number[]): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SketchUpImportDlg {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly styles: UnityEditor.SketchUpImportDlg.Styles;
    // fields
    buttonWidth: number;
    headerStyle: any;
    toggleStyle: any;
    boxBackground: any;
    okButton: any;
    cancelButton: any;
    nodesLabel: any;
    windowTitle: any;
  }
}
declare namespace UnityEditor {
  class SketchUpImporter {
    // constructors
    constructor();
    // methods
    GetScenes(): UnityEditor.SketchUpImportScene[];
    GetDefaultCamera(): UnityEditor.SketchUpImportCamera;
    CreateDefaultMaskForClip(clip: UnityEditor.ModelImporterClipAnimation): void;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly latitude: number;
    readonly longitude: number;
    readonly northCorrection: number;
    generateMaterials: UnityEditor.ModelImporterGenerateMaterials;
    importMaterials: boolean;
    materialName: UnityEditor.ModelImporterMaterialName;
    materialSearch: UnityEditor.ModelImporterMaterialSearch;
    globalScale: number;
    readonly isUseFileUnitsSupported: boolean;
    useFileUnits: boolean;
    readonly fileScale: number;
    readonly isFileScaleUsed: boolean;
    importBlendShapes: boolean;
    addCollider: boolean;
    normalSmoothingAngle: number;
    splitTangentsAcrossSeams: boolean;
    swapUVChannels: boolean;
    generateSecondaryUV: boolean;
    secondaryUVAngleDistortion: number;
    secondaryUVAreaDistortion: number;
    secondaryUVHardAngle: number;
    secondaryUVPackMargin: number;
    generateAnimations: UnityEditor.ModelImporterGenerateAnimations;
    readonly importedTakeInfos: UnityEditor.TakeInfo[];
    readonly transformPaths: string[];
    readonly referencedClips: string[];
    isReadable: boolean;
    optimizeMesh: boolean;
    normalImportMode: UnityEditor.ModelImporterTangentSpaceMode;
    tangentImportMode: UnityEditor.ModelImporterTangentSpaceMode;
    importNormals: UnityEditor.ModelImporterNormals;
    importTangents: UnityEditor.ModelImporterTangents;
    bakeIK: boolean;
    readonly isBakeIKSupported: boolean;
    resampleRotations: boolean;
    resampleCurves: boolean;
    readonly isTangentImportSupported: boolean;
    meshCompression: UnityEditor.ModelImporterMeshCompression;
    importAnimation: boolean;
    optimizeGameObjects: boolean;
    extraExposedTransformPaths: string[];
    animationCompression: UnityEditor.ModelImporterAnimationCompression;
    animationRotationError: number;
    animationPositionError: number;
    animationScaleError: number;
    animationWrapMode: any;
    animationType: UnityEditor.ModelImporterAnimationType;
    humanoidOversampling: UnityEditor.ModelImporterHumanoidOversampling;
    motionNodeName: string;
    sourceAvatar: any;
    humanDescription: any;
    splitAnimations: boolean;
    clipAnimations: UnityEditor.ModelImporterClipAnimation[];
    readonly defaultClipAnimations: UnityEditor.ModelImporterClipAnimation[];
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SketchUpImporterEditor {
    // constructors
    constructor();
    // methods
    HasPreviewGUI(): boolean;
    OnInspectorGUI(): void;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly activeEditor: UnityEditor.AssetImporterInspector;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SketchUpImporterModelEditor {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    SetSelectedNodes(selectedNodes: number[]): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SketchUpImporterModelEditor {
  class EFileUnit {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Meters: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Centimeters: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Millimeters: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Feet: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
    static Inches: UnityEditor.SketchUpImporterModelEditor.EFileUnit;
  }
}
declare namespace UnityEditor.SketchUpImporterModelEditor {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static sketchUpLabel: any;
    static generateBackFaceLabel: any;
    static mergeCoplanarFaces: any;
    static selectNodeButton: any;
    static fileUnitLabel: any;
    static longitudeLabel: any;
    static latitudeLabel: any;
    static northCorrectionLabel: any;
    static measurementOptions: any[];
  }
}
declare namespace UnityEditor {
  class SketchUpImportScene {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    camera: UnityEditor.SketchUpImportCamera;
    name: string;
  }
}
declare namespace UnityEditor {
  class SketchUpNode {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, info: UnityEditor.SketchUpNodeInfo);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    Enabled: boolean;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    Info: UnityEditor.SketchUpNodeInfo;
  }
}
declare namespace UnityEditor {
  class SketchUpNodeInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    parent: number;
    enabled: boolean;
    nodeIndex: number;
  }
}
declare namespace UnityEditor {
  class SketchUpTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor {
  class SkinnedMeshRendererEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    OnBlendShapeUI(): void;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SliderJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SliderLabels {
    // constructors
    private constructor();
    // methods
    SetLabels(leftLabel: any, rightLabel: any): void;
    HasLabels(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    leftLabel: any;
    rightLabel: any;
  }
}
declare namespace UnityEditor {
  class SnapGuide {
    // constructors
    constructor(value: number, vertices: any[]);
    constructor(value: number, safe: boolean, vertices: any[]);
    // methods
    Draw(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    value: number;
    lineVertices: any;
    safe: boolean;
  }
}
declare namespace UnityEditor {
  class SnapGuideCollection {
    // constructors
    constructor();
    // methods
    Clear(): void;
    AddGuide(guide: UnityEditor.SnapGuide): void;
    SnapToGuides(value: number, snapDistance: number): number;
    OnGUI(): void;
    DrawGuides(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SnapSettings {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static move: any;
    static scale: number;
    static rotation: number;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SnapSettings {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    buttonLeft: any;
    buttonMid: any;
    buttonRight: any;
    snapAllAxes: any;
    snapX: any;
    snapY: any;
    snapZ: any;
    moveX: any;
    moveY: any;
    moveZ: any;
    scale: any;
    rotation: any;
  }
}
declare namespace UnityEditor {
  class SpaceDrawer {
    // constructors
    constructor();
    // methods
    GetHeight(): number;
    OnGUI(position: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SpeedTreeImporter {
    // constructors
    constructor();
    // methods
    GenerateMaterials(): void;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasImported: boolean;
    readonly materialFolderPath: string;
    scaleFactor: number;
    mainColor: any;
    specColor: any;
    shininess: number;
    hueVariation: any;
    alphaTestRef: number;
    readonly hasBillboard: boolean;
    enableSmoothLODTransition: boolean;
    animateCrossFading: boolean;
    billboardTransitionCrossFadeWidth: number;
    fadeOutWidth: number;
    LODHeights: number[];
    castShadows: boolean[];
    receiveShadows: boolean[];
    useLightProbes: boolean[];
    reflectionProbeUsages: any[];
    enableBump: boolean[];
    enableHue: boolean[];
    readonly bestWindQuality: number;
    windQualities: number[];
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
    static windQualityNames: string[];
  }
}
declare namespace UnityEditor {
  class SpeedTreeImporterInspector {
    // constructors
    constructor();
    // methods
    OnDisable(): void;
    HasSameLODConfig(): boolean;
    CanUnifyLODConfig(): boolean;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SpeedTreeImporterInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static LODHeader: any;
    static ResetLOD: any;
    static SmoothLOD: any;
    static AnimateCrossFading: any;
    static CrossFadeWidth: any;
    static FadeOutWidth: any;
    static MeshesHeader: any;
    static ScaleFactor: any;
    static ScaleFactorHelp: any;
    static MaterialsHeader: any;
    static MainColor: any;
    static HueVariation: any;
    static AlphaTestRef: any;
    static CastShadows: any;
    static ReceiveShadows: any;
    static UseLightProbes: any;
    static UseReflectionProbes: any;
    static EnableBump: any;
    static EnableHue: any;
    static WindQuality: any;
    static ApplyAndGenerate: any;
    static Regenerate: any;
  }
}
declare namespace UnityEditor {
  class SpeedTreeMaterialInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    SetShader(shader: any): void;
    SetShader(newShader: any, registerUndo: boolean): void;
    Awake(): void;
    PropertiesChanged(): void;
    GetFloat(propertyName: string, hasMixedValue: any): number;
    SetFloat(propertyName: string, value: number): void;
    GetColor(propertyName: string, hasMixedValue: any): any;
    SetColor(propertyName: string, value: any): void;
    GetVector(propertyName: string, hasMixedValue: any): any;
    SetVector(propertyName: string, value: any): void;
    GetTexture(propertyName: string, hasMixedValue: any): any;
    SetTexture(propertyName: string, value: any): void;
    GetTextureScale(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    GetTextureOffset(propertyName: string, hasMixedValueX: any, hasMixedValueY: any): any;
    SetTextureScale(propertyName: string, value: any, coord: number): void;
    SetTextureOffset(propertyName: string, value: any, coord: number): void;
    RangeProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    RangeProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(prop: UnityEditor.MaterialProperty, label: string): number;
    FloatProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): number;
    ColorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    ColorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    VectorProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureScaleOffsetProperty(property: UnityEditor.MaterialProperty): void;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty): number;
    TextureScaleOffsetProperty(position: any, property: UnityEditor.MaterialProperty, partOfTexturePropertyControl: boolean): number;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    HelpBoxWithButton(messageContent: any, buttonContent: any): boolean;
    TextureCompatibilityWarning(prop: UnityEditor.MaterialProperty): void;
    TexturePropertyMiniThumbnail(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string): any;
    GetTexturePropertyCustomArea(position: any): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, scaleOffset: boolean): any;
    TextureProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, tooltip: string, scaleOffset: boolean): any;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty): number;
    GetPropertyHeight(prop: UnityEditor.MaterialProperty, label: string): number;
    BeginAnimatedCheck(prop: UnityEditor.MaterialProperty): void;
    EndAnimatedCheck(): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string, labelIndent: number): void;
    ShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: any, labelIndent: number): void;
    LightmapEmissionProperty(): void;
    LightmapEmissionProperty(labelIndent: number): void;
    LightmapEmissionProperty(position: any, labelIndent: number): void;
    DefaultShaderProperty(prop: UnityEditor.MaterialProperty, label: string): void;
    DefaultShaderProperty(position: any, prop: UnityEditor.MaterialProperty, label: string): void;
    RangeProperty(propertyName: string, label: string, v2: number, v3: number): number;
    FloatProperty(propertyName: string, label: string): number;
    ColorProperty(propertyName: string, label: string): any;
    VectorProperty(propertyName: string, label: string): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim): any;
    TextureProperty(propertyName: string, label: string, texDim: UnityEditor.ShaderUtil.ShaderPropertyTexDim, scaleOffset: boolean): any;
    ShaderProperty(shader: any, propertyIndex: number): void;
    SetDefaultGUIWidths(): void;
    PropertiesGUI(): boolean;
    PropertiesDefaultGUI(props: UnityEditor.MaterialProperty[]): void;
    RegisterPropertyChangeUndo(label: string): void;
    OnPreviewSettings(): void;
    DefaultPreviewSettingsGUI(): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    RequiresConstantRepaint(): boolean;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewGUI(r: any, background: any): void;
    DefaultPreviewGUI(r: any, background: any): void;
    OnEnable(): void;
    UndoRedoPerformed(): void;
    OnDisable(): void;
    RenderQueueField(): void;
    RenderQueueField(r: any): void;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty): any;
    TexturePropertySingleLine(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, extraProperty2: UnityEditor.MaterialProperty): any;
    TexturePropertyWithHDRColor(label: any, textureProp: UnityEditor.MaterialProperty, colorProperty: UnityEditor.MaterialProperty, hdrConfig: UnityEditor.ColorPickerHDRConfig, showAlpha: boolean): any;
    TexturePropertyTwoLines(label: any, textureProp: UnityEditor.MaterialProperty, extraProperty1: UnityEditor.MaterialProperty, label2: any, extraProperty2: UnityEditor.MaterialProperty): any;
    DrawDefaultInspector(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly isVisible: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SpeedTreeMaterialInspector {
  class SpeedTreeGeometryType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Branch: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static BranchDetail: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static Frond: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static Leaf: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
    static Mesh: UnityEditor.SpeedTreeMaterialInspector.SpeedTreeGeometryType;
  }
}
declare namespace UnityEditor {
  class SphereColliderEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    OnSceneGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly editingCollider: boolean;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SplashScreenStyle {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Light: UnityEditor.SplashScreenStyle;
    static Dark: UnityEditor.SplashScreenStyle;
  }
}
declare namespace UnityEditor {
  class SplatPainter {
    // constructors
    constructor();
    // methods
    Paint(xCenterNormalized: number, yCenterNormalized: number, splatIndex: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    size: number;
    strength: number;
    brush: UnityEditor.Brush;
    target: number;
    terrainData: any;
    tool: UnityEditor.TerrainTool;
  }
}
declare namespace UnityEditor {
  class SplitterGUILayout {
    // constructors
    constructor();
    // methods
    static BeginSplit(state: UnityEditor.SplitterState, style: any, vertical: boolean, options: any[]): void;
    static BeginHorizontalSplit(state: UnityEditor.SplitterState, options: any[]): void;
    static BeginVerticalSplit(state: UnityEditor.SplitterState, options: any[]): void;
    static BeginHorizontalSplit(state: UnityEditor.SplitterState, style: any, options: any[]): void;
    static BeginVerticalSplit(state: UnityEditor.SplitterState, style: any, options: any[]): void;
    static EndVerticalSplit(): void;
    static EndHorizontalSplit(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.SplitterGUILayout {
  class GUISplitterGroup {
    // constructors
    constructor();
    // methods
    SetHorizontal(x: number, width: number): void;
    SetVertical(y: number, height: number): void;
    ApplyOptions(options: any[]): void;
    ResetCursor(): void;
    PeekNext(): any;
    GetNext(): any;
    GetLast(): any;
    Add(e: any): void;
    CalcWidth(): void;
    CalcHeight(): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly margin: any;
    style: any;
    // fields
    state: UnityEditor.SplitterState;
    entries: any;
    isVertical: boolean;
    resetCoords: boolean;
    spacing: number;
    sameSize: boolean;
    isWindow: boolean;
    windowID: number;
    minWidth: number;
    maxWidth: number;
    minHeight: number;
    maxHeight: number;
    rect: any;
    stretchWidth: number;
    stretchHeight: number;
  }
}
declare namespace UnityEditor {
  class SplitterState {
    // constructors
    constructor(relativeSizes: number[]);
    constructor(realSizes: number[], minSizes: number[], maxSizes: number[]);
    constructor(relativeSizes: number[], minSizes: number[], maxSizes: number[]);
    constructor(relativeSizes: number[], minSizes: number[], maxSizes: number[], splitSize: number);
    // methods
    NormalizeRelativeSizes(): void;
    RealToRelativeSizes(): void;
    RelativeToRealSizes(totalSpace: number): void;
    DoSplitter(i1: number, i2: number, diff: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ID: number;
    splitterInitialOffset: number;
    currentActiveSplitter: number;
    realSizes: number[];
    relativeSizes: number[];
    minSizes: number[];
    maxSizes: number[];
    lastTotalSize: number;
    splitSize: number;
    xOffset: number;
  }
}
declare namespace UnityEditor {
  class SplitView {
    // constructors
    constructor();
    // methods
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChildNice(child: UnityEditor.View): void;
    RemoveChild(child: UnityEditor.View): void;
    DragOverRootView(mouseScreenPosition: any): UnityEditor.DropInfo;
    DragOver(w: UnityEditor.EditorWindow, mouseScreenPosition: any): UnityEditor.DropInfo;
    ToString(): string;
    PerformDrop(dropWindow: UnityEditor.EditorWindow, dropInfo: UnityEditor.DropInfo, screenPos: any): boolean;
    Cleanup(): void;
    SplitGUI(evt: any): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
    vertical: boolean;
    controlID: number;
  }
}
declare namespace UnityEditor.SplitView {
  class ExtraDropInfo {
    // constructors
    constructor(rootWindow: boolean, edge: UnityEditor.SplitView.ViewEdge, index: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    rootWindow: boolean;
    edge: UnityEditor.SplitView.ViewEdge;
    index: number;
  }
}
declare namespace UnityEditor.SplitView {
  class ViewEdge {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.SplitView.ViewEdge;
    static Left: UnityEditor.SplitView.ViewEdge;
    static Bottom: UnityEditor.SplitView.ViewEdge;
    static Top: UnityEditor.SplitView.ViewEdge;
    static Right: UnityEditor.SplitView.ViewEdge;
    static BottomLeft: UnityEditor.SplitView.ViewEdge;
    static BottomRight: UnityEditor.SplitView.ViewEdge;
    static TopLeft: UnityEditor.SplitView.ViewEdge;
    static TopRight: UnityEditor.SplitView.ViewEdge;
    static FitsVertical: UnityEditor.SplitView.ViewEdge;
    static FitsHorizontal: UnityEditor.SplitView.ViewEdge;
    static Before: UnityEditor.SplitView.ViewEdge;
    static After: UnityEditor.SplitView.ViewEdge;
  }
}
declare namespace UnityEditor {
  class SpringJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SpriteEditorTexturePostprocessor {
    // constructors
    constructor();
    // methods
    GetPostprocessOrder(): number;
    OnPostprocessTexture(tex: any): void;
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: any): void;
    LogError(warning: string): void;
    LogError(warning: string, context: any): void;
    GetVersion(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    assetPath: string;
    readonly assetImporter: UnityEditor.AssetImporter;
    preview: any;
    // fields
  }
}
declare namespace UnityEditor.SpriteEditorWindow {
  class AutoSlicingMethod {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DeleteAll: UnityEditor.SpriteEditorWindow.AutoSlicingMethod;
    static Smart: UnityEditor.SpriteEditorWindow.AutoSlicingMethod;
    static Safe: UnityEditor.SpriteEditorWindow.AutoSlicingMethod;
  }
}
declare namespace UnityEditor {
  class SpriteEditorWindow {
    // constructors
    constructor();
    // methods
    static GetWindow(): void;
    static TextureImporterApply(so: UnityEditor.SerializedObject): void;
    RefreshPropertiesCache(): void;
    InvalidatePropertiesCache(): void;
    IsEditingDisabled(): boolean;
    Reset(): void;
    ApplySpriteAlignmentToPivot(pivot: any, rect: any, alignment: any): any;
    AddSprite(rect: any, alignment: number, pivot: any, colliderAlphaCutoff: number, colliderDetail: number): UnityEditor.SpriteRect;
    DoTextureReimport(path: string): void;
    DoAutomaticSlicing(minimumSpriteSize: number, alignment: number, pivot: any, slicingMethod: UnityEditor.SpriteEditorWindow.AutoSlicingMethod): void;
    DoGridSlicing(size: any, offset: any, padding: any, alignment: number, pivot: any): void;
    GeneratePolygonOutline(sides: number): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly originalTexture: any;
    textureIsDirty: boolean;
    readonly selectedTextureChanged: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static s_Instance: UnityEditor.SpriteEditorWindow;
    m_ResetOnNextRepaint: boolean;
    m_IgnoreNextPostprocessEvent: boolean;
    m_OriginalTexture: any;
    static s_OneClickDragStarted: boolean;
    m_SelectedAssetPath: string;
  }
}
declare namespace UnityEditor.SpriteEditorWindow {
  class GizmoMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BorderEditing: UnityEditor.SpriteEditorWindow.GizmoMode;
    static RectEditing: UnityEditor.SpriteEditorWindow.GizmoMode;
  }
}
declare namespace UnityEditor.SpriteEditorWindow {
  class SpriteEditorWindowStyles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static changeShapeLabel: any;
    static sliceButtonLabel: any;
    static trimButtonLabel: any;
    static sidesLabel: any;
    static polygonChangeShapeHelpBoxContent: any;
    static changeButtonLabel: any;
    static editingDiableMessageLabel: any;
    static spriteLabel: any;
    static customPivotLabel: any;
    static borderLabel: any;
    static lLabel: any;
    static tLabel: any;
    static rLabel: any;
    static bLabel: any;
    static positionLabel: any;
    static xLabel: any;
    static yLabel: any;
    static wLabel: any;
    static hLabel: any;
    static nameLabel: any;
    static revertButtonLabel: any;
    static applyButtonLabel: any;
    static spriteEditorWindowTitle: any;
    static pendingChangesDialogContent: any;
    static yesButtonLabel: any;
    static noButtonLabel: any;
    static applyRevertDialogTitle: any;
    static applyRevertDialogContent: any;
    static creatingMultipleSpriteDialogTitle: any;
    static creatingMultipleSpriteDialogContent: any;
    static okButtonLabel: any;
    static cancelButtonLabel: any;
  }
}
declare namespace UnityEditor {
  class SpriteImportMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.SpriteImportMode;
    static Single: UnityEditor.SpriteImportMode;
    static Multiple: UnityEditor.SpriteImportMode;
    static Polygon: UnityEditor.SpriteImportMode;
  }
}
declare namespace UnityEditor {
  class SpriteInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    static BuildPreviewTexture(width: number, height: number, sprite: any, spriteRendererMaterial: any, isPolygon: boolean): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    static DrawPreview(r: any, frame: any, spriteRendererMaterial: any, isPolygon: boolean): void;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SpriteInspector {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static spriteAlignmentOptions: any[];
    static spriteAlignment: any;
  }
}
declare namespace UnityEditor {
  class SpriteMetaData {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    rect: any;
    alignment: number;
    pivot: any;
    border: any;
  }
}
declare namespace UnityEditor {
  class SpritePackerMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Disabled: UnityEditor.SpritePackerMode;
    static BuildTimeOnly: UnityEditor.SpritePackerMode;
    static AlwaysOn: UnityEditor.SpritePackerMode;
  }
}
declare namespace UnityEditor {
  class SpriteRect {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Name: string;
    m_OriginalName: string;
    m_Pivot: any;
    m_Alignment: any;
    m_Border: any;
    m_Rect: any;
    m_Outline: any;
    m_TessellationDetail: number;
  }
}
declare namespace UnityEditor {
  class SpriteRectCache {
    // constructors
    constructor();
    // methods
    RectAt(i: number): UnityEditor.SpriteRect;
    AddRect(r: UnityEditor.SpriteRect): void;
    RemoveRect(r: UnityEditor.SpriteRect): void;
    ClearAll(): void;
    GetIndex(spriteRect: UnityEditor.SpriteRect): number;
    Contains(spriteRect: UnityEditor.SpriteRect): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly Count: number;
    name: string;
    hideFlags: any;
    // fields
    m_Rects: any;
  }
}
declare namespace UnityEditor.SpriteRendererEditor {
  class Contents {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static flipLabel: any;
    static flipToggleHash: number;
    static materialLabel: any;
    static spriteLabel: any;
    static colorLabel: any;
    static warningIcon: any;
  }
}
declare namespace UnityEditor {
  class SpriteRendererEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Sprites {
  class AtlasSettings {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    format: any;
    colorSpace: any;
    compressionQuality: number;
    filterMode: any;
    maxWidth: number;
    maxHeight: number;
    paddingPower: number;
    anisoLevel: number;
    generateMipMaps: boolean;
    enableRotation: boolean;
    allowsAlphaSplitting: boolean;
  }
}
declare namespace UnityEditor.Sprites {
  class DataUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Sprites {
  class DefaultPackerPolicy {
    // constructors
    constructor();
    // methods
    GetVersion(): number;
    OnGroupAtlases(target: UnityEditor.BuildTarget, job: UnityEditor.Sprites.PackerJob, textureImporterInstanceIDs: number[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Sprites.DefaultPackerPolicy {
  class Entry {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sprite: any;
    settings: UnityEditor.Sprites.AtlasSettings;
    atlasName: string;
    packingMode: any;
    anisoLevel: number;
  }
}
declare namespace UnityEditor.Sprites {
  class IPackerPolicy {
    // constructors
    private constructor();
    // methods
    OnGroupAtlases(target: UnityEditor.BuildTarget, job: UnityEditor.Sprites.PackerJob, textureImporterInstanceIDs: number[]): void;
    GetVersion(): number;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Sprites {
  class Packer {
    // constructors
    constructor();
    // methods
    static GetTexturesForAtlas(atlasName: string): any[];
    static GetAlphaTexturesForAtlas(atlasName: string): any[];
    static RebuildAtlasCacheIfNeeded(target: UnityEditor.BuildTarget, displayProgressBar: boolean, execution: UnityEditor.Sprites.Packer.Execution): void;
    static RebuildAtlasCacheIfNeeded(target: UnityEditor.BuildTarget, displayProgressBar: boolean): void;
    static RebuildAtlasCacheIfNeeded(target: UnityEditor.BuildTarget): void;
    static GetAtlasDataForSprite(sprite: any, atlasName: any, atlasTexture: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly atlasNames: string[];
    static readonly Policies: string[];
    static SelectedPolicy: string;
    // fields
    static kDefaultPolicy: string;
  }
}
declare namespace UnityEditor.Sprites.Packer {
  class Execution {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.Sprites.Packer.Execution;
    static ForceRegroup: UnityEditor.Sprites.Packer.Execution;
  }
}
declare namespace UnityEditor.Sprites {
  class PackerJob {
    // constructors
    private constructor();
    // methods
    AddAtlas(atlasName: string, settings: UnityEditor.Sprites.AtlasSettings): void;
    AssignToAtlas(atlasName: string, sprite: any, packingMode: any, packingRotation: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Sprites {
  class PackerWindow {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Sprites.PackerWindow {
  class Edge {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    v0: number;
    v1: number;
  }
}
declare namespace UnityEditor.Sprites {
  class SpriteUtility {
    // constructors
    constructor();
    // methods
    static GetSpriteTexture(sprite: any, getAtlasData: boolean): any;
    static GetSpriteMesh(sprite: any, getAtlasData: boolean): any[];
    static GetSpriteUVs(sprite: any, getAtlasData: boolean): any[];
    static GetSpriteIndices(sprite: any, getAtlasData: boolean): number[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Sprites {
  class TightPackerPolicy {
    // constructors
    constructor();
    // methods
    GetVersion(): number;
    OnGroupAtlases(target: UnityEditor.BuildTarget, job: UnityEditor.Sprites.PackerJob, textureImporterInstanceIDs: number[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Sprites {
  class TightRotateEnabledSpritePackerPolicy {
    // constructors
    constructor();
    // methods
    GetVersion(): number;
    OnGroupAtlases(target: UnityEditor.BuildTarget, job: UnityEditor.Sprites.PackerJob, textureImporterInstanceIDs: number[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class SpriteUtility {
    // constructors
    private constructor();
    // methods
    static OnSceneDrag(sceneView: UnityEditor.SceneView): void;
    static GetSpriteFromPathsOrObjects(objects: any[], paths: string[], currentEventType: any): any[];
    static GetSpritesFromDraggedObjects(): any[];
    static CreateDragGO(frame: any, position: any): any;
    static AddAnimationToGO(go: any, frames: any[]): void;
    static DropSpriteToSceneToCreateGO(sprite: any, position: any): any;
    static RemapObjectToSprite(obj: any): any;
    static TextureToSprites(tex: any): any[];
    static TextureToSprite(tex: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.SpriteUtility {
  class DragType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NotInitialized: UnityEditor.SpriteUtility.DragType;
    static SpriteAnimation: UnityEditor.SpriteUtility.DragType;
    static CreateMultiple: UnityEditor.SpriteUtility.DragType;
  }
}
declare namespace UnityEditor {
  class SpriteUtilityWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.SpriteUtilityWindow {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    dragdot: any;
    dragdotDimmed: any;
    dragdotactive: any;
    createRect: any;
    preToolbar: any;
    preButton: any;
    preLabel: any;
    preSlider: any;
    preSliderThumb: any;
    preBackground: any;
    pivotdotactive: any;
    pivotdot: any;
    dragBorderdot: any;
    dragBorderDotActive: any;
    toolbar: any;
    alphaIcon: any;
    RGBIcon: any;
    notice: any;
    smallMip: any;
    largeMip: any;
    static spriteAlignmentOptions: any[];
    static s_PivotLabel: any;
    static s_NoSelectionWarning: any;
    static s_SpriteTessellationDetail: any;
  }
}
declare namespace UnityEditor {
  class StackFrame {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    lineNumber: number;
    sourceFile: string;
    methodName: string;
    signature: string;
    moduleName: string;
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class BlendMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Opaque: UnityEditor.StandardShaderGUI.BlendMode;
    static Cutout: UnityEditor.StandardShaderGUI.BlendMode;
    static Fade: UnityEditor.StandardShaderGUI.BlendMode;
    static Transparent: UnityEditor.StandardShaderGUI.BlendMode;
  }
}
declare namespace UnityEditor {
  class StandardShaderGUI {
    // constructors
    constructor();
    // methods
    FindProperties(props: UnityEditor.MaterialProperty[]): void;
    OnGUI(materialEditor: UnityEditor.MaterialEditor, props: UnityEditor.MaterialProperty[]): void;
    ShaderPropertiesGUI(material: any): void;
    AssignNewShaderToMaterial(material: any, oldShader: any, newShader: any): void;
    static SetupMaterialWithBlendMode(material: any, blendMode: UnityEditor.StandardShaderGUI.BlendMode): void;
    OnMaterialPreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialInteractivePreviewGUI(materialEditor: UnityEditor.MaterialEditor, r: any, background: any): void;
    OnMaterialPreviewSettingsGUI(materialEditor: UnityEditor.MaterialEditor): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class SmoothnessMapChannel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SpecularMetallicAlpha: UnityEditor.StandardShaderGUI.SmoothnessMapChannel;
    static AlbedoAlpha: UnityEditor.StandardShaderGUI.SmoothnessMapChannel;
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static optionsButton: any;
    static uvSetLabel: any;
    static uvSetOptions: any[];
    static emptyTootip: string;
    static albedoText: any;
    static alphaCutoffText: any;
    static specularMapText: any;
    static metallicMapText: any;
    static smoothnessText: any;
    static smoothnessScaleText: any;
    static smoothnessMapChannelText: any;
    static highlightsText: any;
    static reflectionsText: any;
    static normalMapText: any;
    static heightMapText: any;
    static occlusionText: any;
    static emissionText: any;
    static detailMaskText: any;
    static detailAlbedoText: any;
    static detailNormalMapText: any;
    static whiteSpaceString: string;
    static primaryMapsText: string;
    static secondaryMapsText: string;
    static forwardText: string;
    static renderingMode: string;
    static emissiveWarning: any;
    static emissiveColorWarning: any;
    static blendNames: string[];
  }
}
declare namespace UnityEditor.StandardShaderGUI {
  class WorkflowMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Specular: UnityEditor.StandardShaderGUI.WorkflowMode;
    static Metallic: UnityEditor.StandardShaderGUI.WorkflowMode;
    static Dielectric: UnityEditor.StandardShaderGUI.WorkflowMode;
  }
}
declare namespace UnityEditor {
  class StaticEditorFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static LightmapStatic: UnityEditor.StaticEditorFlags;
    static OccluderStatic: UnityEditor.StaticEditorFlags;
    static OccludeeStatic: UnityEditor.StaticEditorFlags;
    static BatchingStatic: UnityEditor.StaticEditorFlags;
    static NavigationStatic: UnityEditor.StaticEditorFlags;
    static OffMeshLinkGeneration: UnityEditor.StaticEditorFlags;
    static ReflectionProbeStatic: UnityEditor.StaticEditorFlags;
  }
}
declare namespace UnityEditor {
  class StaticOcclusionCulling {
    // constructors
    constructor();
    // methods
    static Compute(): boolean;
    static GenerateInBackground(): boolean;
    static Cancel(): void;
    static Clear(): void;
    static SetDefaultOcclusionBakeSettings(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly isRunning: boolean;
    static smallestOccluder: number;
    static smallestHole: number;
    static backfaceThreshold: number;
    static readonly doesSceneHaveManualPortals: boolean;
    static readonly umbraDataSize: number;
    // fields
  }
}
declare namespace UnityEditor {
  class StaticOcclusionCullingVisualization {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static showOcclusionCulling: boolean;
    static showPreVisualization: boolean;
    static showViewVolumes: boolean;
    static showDynamicObjectBounds: boolean;
    static showPortals: boolean;
    static showVisibilityLines: boolean;
    static showGeometryCulling: boolean;
    static readonly isPreviewOcclusionCullingCameraInPVS: boolean;
    static readonly previewOcclusionCamera: any;
    static readonly previewOcclucionCamera: any;
    // fields
  }
}
declare namespace UnityEditor {
  class StereoRenderingPath {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static MultiPass: UnityEditor.StereoRenderingPath;
    static SinglePass: UnityEditor.StereoRenderingPath;
    static Instancing: UnityEditor.StereoRenderingPath;
  }
}
declare namespace UnityEditor {
  class StrippingLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Disabled: UnityEditor.StrippingLevel;
    static StripAssemblies: UnityEditor.StrippingLevel;
    static StripByteCode: UnityEditor.StrippingLevel;
    static UseMicroMSCorlib: UnityEditor.StrippingLevel;
  }
}
declare namespace UnityEditor {
  class StructPropertyGUI {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class StructPropertyGUILayout {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.StyleDrawInspectView {
  class CachedInstructionInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    styleContainerSerializedObject: UnityEditor.SerializedObject;
    styleSerializedProperty: UnityEditor.SerializedProperty;
    styleContainer: UnityEditor.GUIStyleHolder;
  }
}
declare namespace UnityEditor {
  class StyleDrawInspectView {
    // constructors
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    // methods
    UpdateInstructions(): void;
    GetSelectedStyleProperty(serializedObject: any, styleProperty: any): void;
    Unselect(): void;
    ShowOverlay(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    SelectRow(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListViewState: UnityEditor.ListViewState;
  }
}
declare namespace UnityEditor.StyleDrawInspectView {
  class GUIInstruction {
    // constructors
    constructor();
    // methods
    Reset(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    rect: any;
    usedGUIStyle: any;
    usedGUIContent: any;
    stackframes: UnityEditor.StackFrame[];
  }
}
declare namespace UnityEditor {
  class SubModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.SubModuleUI {
  class SubEmitterType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.SubModuleUI.SubEmitterType;
    static Birth: UnityEditor.SubModuleUI.SubEmitterType;
    static Collision: UnityEditor.SubModuleUI.SubEmitterType;
    static Death: UnityEditor.SubModuleUI.SubEmitterType;
    static TypesMax: UnityEditor.SubModuleUI.SubEmitterType;
  }
}
declare namespace UnityEditor.SubModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    create: any;
    inherit: any;
    subEmitterTypeTexts: string[];
    propertyStrings: string[];
  }
}
declare namespace UnityEditor {
  class SubstanceArchive {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SubstanceImporter {
    // constructors
    constructor();
    // methods
    GetPrototypeNames(): string[];
    GetMaterialCount(): number;
    GetMaterials(): any[];
    CloneMaterial(material: any): string;
    InstantiateMaterial(prototypeName: string): string;
    DestroyMaterial(material: any): void;
    ResetMaterial(material: any): void;
    RenameMaterial(material: any, name: string): boolean;
    OnShaderModified(material: any): void;
    GetTextureAlphaSource(material: any, textureName: string): any;
    SetTextureAlphaSource(material: any, textureName: string, alphaSource: any): void;
    GetPlatformTextureSettings(materialName: string, platform: string, maxTextureWidth: any, maxTextureHeight: any, textureFormat: any, loadBehavior: any): boolean;
    SetPlatformTextureSettings(material: any, platform: string, maxTextureWidth: number, maxTextureHeight: number, textureFormat: number, loadBehavior: number): void;
    GetMaterialOffset(material: any): any;
    SetMaterialOffset(material: any, offset: any): void;
    GetMaterialScale(material: any): any;
    SetMaterialScale(material: any, scale: any): void;
    GetGenerateAllOutputs(material: any): boolean;
    SetGenerateAllOutputs(material: any, generated: boolean): void;
    GetAnimationUpdateRate(material: any): number;
    SetAnimationUpdateRate(material: any, animation_update_rate: number): void;
    GetGenerateMipMaps(material: any): boolean;
    SetGenerateMipMaps(material: any, mode: boolean): void;
    ExportBitmaps(material: any, exportPath: string, alphaRemap: boolean): void;
    ExportPreset(material: any, exportPath: string): void;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SubstanceImporterInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(position: any, style: any): void;
    GetInfoString(): string;
    OnPreviewSettings(): void;
    InstanciatePrototype(prototypeName: any): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    previewDir: any;
    selectedMesh: number;
    lightMode: number;
  }
}
declare namespace UnityEditor.SubstanceImporterInspector {
  class SubstanceNameComparer {
    // constructors
    constructor();
    // methods
    Compare(o1: any, o2: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.SubstanceImporterInspector {
  class SubstanceStyles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    iconToolbarPlus: any;
    iconToolbarMinus: any;
    iconDuplicate: any;
    resultsGridLabel: any;
    resultsGrid: any;
    gridBackground: any;
    background: any;
    toolbar: any;
    toolbarButton: any;
    toolbarDropDown: any;
  }
}
declare namespace UnityEditor {
  class SurfaceEffector2DEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class SyncVS {
    // constructors
    constructor();
    // methods
    static FindBestVisualStudio(): string;
    static ProjectExists(): boolean;
    static CreateIfDoesntExist(): void;
    static SyncVisualStudioProjectIfItAlreadyExists(): void;
    static PostprocessSyncProject(importedAssets: string[], addedAssets: string[], deletedAssets: string[], movedAssets: string[], movedFromAssetPaths: string[]): void;
    static SyncSolution(): void;
    static SyncIfFirstFileOpenSinceDomainLoad(): void;
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: any): void;
    LogError(warning: string): void;
    LogError(warning: string, context: any): void;
    GetVersion(): number;
    GetPostprocessOrder(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    assetPath: string;
    readonly assetImporter: UnityEditor.AssetImporter;
    preview: any;
    // fields
  }
}
declare namespace UnityEditor.SyncVS {
  class SolutionSynchronizationSettings {
    // constructors
    constructor();
    // methods
    GetProjectHeaderTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    GetProjectFooterTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly VisualStudioVersion: number;
    readonly SolutionTemplate: string;
    readonly EditorAssemblyPath: string;
    readonly EngineAssemblyPath: string;
    readonly Defines: string[];
    readonly SolutionProjectEntryTemplate: string;
    readonly SolutionProjectConfigurationTemplate: string;
    readonly MonoLibFolder: string;
    // fields
  }
}
declare namespace UnityEditor {
  class TabbedEditor {
    // constructors
    private constructor();
    // methods
    OnInspectorGUI(): void;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    HasPreviewGUI(): boolean;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly activeEditor: UnityEditor.Editor;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TagManager {
    // constructors
    constructor();
    // methods
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TagManagerInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    ReorderSortLayerList(list: UnityEditorInternal.ReorderableList): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly tagManager: UnityEditor.TagManager;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.TagManagerInspector {
  class EnterNamePopup {
    // constructors
    constructor(tags: UnityEditor.SerializedProperty, cb: ((string) => void));
    // methods
    GetWindowSize(): any;
    OnGUI(windowRect: any): void;
    OnOpen(): void;
    OnClose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditor.TagManagerInspector {
  class InitialExpansionState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TagManagerInspector.InitialExpansionState;
    static Tags: UnityEditor.TagManagerInspector.InitialExpansionState;
    static Layers: UnityEditor.TagManagerInspector.InitialExpansionState;
    static SortingLayers: UnityEditor.TagManagerInspector.InitialExpansionState;
  }
}
declare namespace UnityEditor {
  class TakeInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    defaultClipName: string;
    startTime: number;
    stopTime: number;
    bakeStartTime: number;
    bakeStopTime: number;
    sampleRate: number;
  }
}
declare namespace UnityEditor {
  class TargetChoiceHandler {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TargetGlesGraphics {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static OpenGLES_1_x: UnityEditor.TargetGlesGraphics;
    static OpenGLES_2_0: UnityEditor.TargetGlesGraphics;
    static OpenGLES_3_0: UnityEditor.TargetGlesGraphics;
    static Automatic: UnityEditor.TargetGlesGraphics;
  }
}
declare namespace UnityEditor {
  class TargetIOSGraphics {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static OpenGLES_2_0: UnityEditor.TargetIOSGraphics;
    static OpenGLES_3_0: UnityEditor.TargetIOSGraphics;
    static Metal: UnityEditor.TargetIOSGraphics;
    static Automatic: UnityEditor.TargetIOSGraphics;
  }
}
declare namespace UnityEditor {
  class TargetJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainDetailContextMenus {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainEditorUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    MenuButton(title: any, menuName: string, userData: number): void;
    static AspectSelectionGrid(selected: number, textures: any[], approxSize: number, style: any, emptyString: string, doubleClick: any): number;
    static AspectSelectionGridImageAndText(selected: number, textures: any[], approxSize: number, style: any, emptyString: string, doubleClick: any): number;
    ShowTrees(): void;
    ShowDetails(): void;
    ShowSettings(): void;
    ShowRaiseHeight(): void;
    ShowSmoothHeight(): void;
    ShowTextures(): void;
    ShowBrushes(): void;
    ShowHeightmaps(): void;
    ShowResolution(): void;
    ShowUpgradeTreePrototypeScaleUI(): void;
    ShowRefreshPrototypes(): void;
    ShowMassPlaceTrees(): void;
    ShowBrushSettings(): void;
    ShowSetHeight(): void;
    OnInspectorGUI(): void;
    Raycast(uv: any, pos: any): boolean;
    HasFrameBounds(): boolean;
    OnGetFrameBounds(): any;
    OnSceneGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.TerrainInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    gridList: any;
    gridListText: any;
    label: any;
    largeSquare: any;
    command: any;
    settingsIcon: any;
    toolIcons: any[];
    toolNames: any[];
    brushSize: any;
    opacity: any;
    settings: any;
    brushes: any;
    mismatchedTerrainData: any;
    assign: any;
    textures: any;
    editTextures: any;
    trees: any;
    noTrees: any;
    editTrees: any;
    treeDensity: any;
    treeHeight: any;
    treeHeightRandomLabel: any;
    treeHeightRandomToggle: any;
    lockWidth: any;
    treeWidth: any;
    treeWidthRandomLabel: any;
    treeWidthRandomToggle: any;
    treeColorVar: any;
    treeRotation: any;
    massPlaceTrees: any;
    details: any;
    editDetails: any;
    detailTargetStrength: any;
    heightmap: any;
    importRaw: any;
    exportRaw: any;
    flatten: any;
    overrideSmoothness: any;
    bakeLightProbesForTrees: any;
    resolution: any;
    refresh: any;
  }
}
declare namespace UnityEditor {
  class TerrainInspectorUtil {
    // constructors
    constructor();
    // methods
    static GetTreePlacementSize(terrainData: any, prototypeIndex: number, spacing: number, treeCount: number): number;
    static CheckTreeDistance(terrainData: any, position: any, prototypeIndex: number, distanceBias: number): boolean;
    static GetPrototypeExtent(terrainData: any, prototypeIndex: number): any;
    static GetPrototypeCount(terrainData: any): number;
    static PrototypeIsRenderable(terrainData: any, prototypeIndex: number): boolean;
    static RefreshPhysicsInEditMode(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainMenus {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainSplatContextMenus {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainSplatEditor {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_Texture: any;
    m_NormalMap: any;
  }
}
declare namespace UnityEditor {
  class TerrainTool {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TerrainTool;
    static PaintHeight: UnityEditor.TerrainTool;
    static SetHeight: UnityEditor.TerrainTool;
    static SmoothHeight: UnityEditor.TerrainTool;
    static PaintTexture: UnityEditor.TerrainTool;
    static PlaceTree: UnityEditor.TerrainTool;
    static PaintDetail: UnityEditor.TerrainTool;
    static TerrainSettings: UnityEditor.TerrainTool;
    static TerrainToolCount: UnityEditor.TerrainTool;
  }
}
declare namespace UnityEditor {
  class TerrainTreeContextMenus {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainWizard {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TerrainWizards {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TextAreaDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TextAssetInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TextMeshInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class Texture3DInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    GetInfoString(): string;
    OnPreviewSettings(): void;
    OnPreviewGUI(r: any, background: any): void;
    GetMipLevelForRendering(): number;
    HasPreviewGUI(): boolean;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mipLevel: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    m_PreviewDir: any;
  }
}
declare namespace UnityEditor {
  class TextureImporter {
    // constructors
    constructor();
    // methods
    GetAllowsAlphaSplitting(): boolean;
    SetAllowsAlphaSplitting(flag: boolean): void;
    GetPlatformTextureSettings(platform: string, maxTextureSize: any, textureFormat: any, compressionQuality: any, etc1AlphaSplitEnabled: any): boolean;
    GetPlatformTextureSettings(platform: string, maxTextureSize: any, textureFormat: any, compressionQuality: any): boolean;
    GetPlatformTextureSettings(platform: string, maxTextureSize: any, textureFormat: any): boolean;
    GetPlatformTextureSettings(platform: string): UnityEditor.TextureImporterPlatformSettings;
    GetDefaultPlatformTextureSettings(): UnityEditor.TextureImporterPlatformSettings;
    GetAutomaticFormat(platform: string): UnityEditor.TextureImporterFormat;
    SetPlatformTextureSettings(platform: string, maxTextureSize: number, textureFormat: UnityEditor.TextureImporterFormat, compressionQuality: number, allowsAlphaSplit: boolean): void;
    SetPlatformTextureSettings(platform: string, maxTextureSize: number, textureFormat: UnityEditor.TextureImporterFormat): void;
    SetPlatformTextureSettings(platform: string, maxTextureSize: number, textureFormat: UnityEditor.TextureImporterFormat, allowsAlphaSplit: boolean): void;
    SetPlatformTextureSettings(platformSettings: UnityEditor.TextureImporterPlatformSettings): void;
    ClearPlatformTextureSettings(platform: string): void;
    DoesSourceTextureHaveAlpha(): boolean;
    DoesSourceTextureHaveColor(): boolean;
    ReadTextureSettings(dest: UnityEditor.TextureImporterSettings): void;
    SetTextureSettings(src: UnityEditor.TextureImporterSettings): void;
    ReadTextureImportInstructions(target: UnityEditor.BuildTarget, desiredFormat: any, colorSpace: any, compressionQuality: any): void;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    textureFormat: UnityEditor.TextureImporterFormat;
    maxTextureSize: number;
    compressionQuality: number;
    crunchedCompression: boolean;
    allowAlphaSplitting: boolean;
    textureCompression: UnityEditor.TextureImporterCompression;
    alphaSource: UnityEditor.TextureImporterAlphaSource;
    grayscaleToAlpha: boolean;
    generateCubemap: UnityEditor.TextureImporterGenerateCubemap;
    npotScale: UnityEditor.TextureImporterNPOTScale;
    isReadable: boolean;
    mipmapEnabled: boolean;
    borderMipmap: boolean;
    sRGBTexture: boolean;
    mipmapFilter: UnityEditor.TextureImporterMipFilter;
    fadeout: boolean;
    mipmapFadeDistanceStart: number;
    mipmapFadeDistanceEnd: number;
    generateMipsInLinearSpace: boolean;
    correctGamma: boolean;
    linearTexture: boolean;
    normalmap: boolean;
    lightmap: boolean;
    convertToNormalmap: boolean;
    normalmapFilter: UnityEditor.TextureImporterNormalFilter;
    heightmapScale: number;
    anisoLevel: number;
    filterMode: any;
    wrapMode: any;
    mipMapBias: number;
    alphaIsTransparency: boolean;
    readonly qualifiesForSpritePacking: boolean;
    spriteImportMode: UnityEditor.SpriteImportMode;
    spritesheet: UnityEditor.SpriteMetaData[];
    spritePackingTag: string;
    spritePixelsPerUnit: number;
    spritePixelsToUnits: number;
    spritePivot: any;
    spriteBorder: any;
    textureType: UnityEditor.TextureImporterType;
    textureShape: UnityEditor.TextureImporterShape;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TextureImporterAlphaSource {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TextureImporterAlphaSource;
    static FromInput: UnityEditor.TextureImporterAlphaSource;
    static FromGrayScale: UnityEditor.TextureImporterAlphaSource;
  }
}
declare namespace UnityEditor {
  class TextureImporterCompression {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Uncompressed: UnityEditor.TextureImporterCompression;
    static Compressed: UnityEditor.TextureImporterCompression;
    static CompressedHQ: UnityEditor.TextureImporterCompression;
    static CompressedLQ: UnityEditor.TextureImporterCompression;
  }
}
declare namespace UnityEditor {
  class TextureImporterCubemapConvolution {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TextureImporterCubemapConvolution;
    static Specular: UnityEditor.TextureImporterCubemapConvolution;
    static Diffuse: UnityEditor.TextureImporterCubemapConvolution;
  }
}
declare namespace UnityEditor {
  class TextureImporterFormat {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Automatic: UnityEditor.TextureImporterFormat;
    static AutomaticCompressed: UnityEditor.TextureImporterFormat;
    static Automatic16bit: UnityEditor.TextureImporterFormat;
    static AutomaticTruecolor: UnityEditor.TextureImporterFormat;
    static AutomaticCrunched: UnityEditor.TextureImporterFormat;
    static AutomaticHDR: UnityEditor.TextureImporterFormat;
    static AutomaticCompressedHDR: UnityEditor.TextureImporterFormat;
    static DXT1: UnityEditor.TextureImporterFormat;
    static DXT5: UnityEditor.TextureImporterFormat;
    static RGB16: UnityEditor.TextureImporterFormat;
    static RGB24: UnityEditor.TextureImporterFormat;
    static Alpha8: UnityEditor.TextureImporterFormat;
    static ARGB16: UnityEditor.TextureImporterFormat;
    static RGBA32: UnityEditor.TextureImporterFormat;
    static ARGB32: UnityEditor.TextureImporterFormat;
    static RGBA16: UnityEditor.TextureImporterFormat;
    static RGBAHalf: UnityEditor.TextureImporterFormat;
    static BC4: UnityEditor.TextureImporterFormat;
    static BC5: UnityEditor.TextureImporterFormat;
    static BC6H: UnityEditor.TextureImporterFormat;
    static BC7: UnityEditor.TextureImporterFormat;
    static DXT1Crunched: UnityEditor.TextureImporterFormat;
    static DXT5Crunched: UnityEditor.TextureImporterFormat;
    static PVRTC_RGB2: UnityEditor.TextureImporterFormat;
    static PVRTC_RGBA2: UnityEditor.TextureImporterFormat;
    static PVRTC_RGB4: UnityEditor.TextureImporterFormat;
    static PVRTC_RGBA4: UnityEditor.TextureImporterFormat;
    static ETC_RGB4: UnityEditor.TextureImporterFormat;
    static ATC_RGB4: UnityEditor.TextureImporterFormat;
    static ATC_RGBA8: UnityEditor.TextureImporterFormat;
    static EAC_R: UnityEditor.TextureImporterFormat;
    static EAC_R_SIGNED: UnityEditor.TextureImporterFormat;
    static EAC_RG: UnityEditor.TextureImporterFormat;
    static EAC_RG_SIGNED: UnityEditor.TextureImporterFormat;
    static ETC2_RGB4: UnityEditor.TextureImporterFormat;
    static ETC2_RGB4_PUNCHTHROUGH_ALPHA: UnityEditor.TextureImporterFormat;
    static ETC2_RGBA8: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_4x4: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_5x5: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_6x6: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_8x8: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_10x10: UnityEditor.TextureImporterFormat;
    static ASTC_RGB_12x12: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_4x4: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_5x5: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_6x6: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_8x8: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_10x10: UnityEditor.TextureImporterFormat;
    static ASTC_RGBA_12x12: UnityEditor.TextureImporterFormat;
  }
}
declare namespace UnityEditor {
  class TextureImporterGenerateCubemap {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TextureImporterGenerateCubemap;
    static Spheremap: UnityEditor.TextureImporterGenerateCubemap;
    static Cylindrical: UnityEditor.TextureImporterGenerateCubemap;
    static SimpleSpheremap: UnityEditor.TextureImporterGenerateCubemap;
    static NiceSpheremap: UnityEditor.TextureImporterGenerateCubemap;
    static FullCubemap: UnityEditor.TextureImporterGenerateCubemap;
    static AutoCubemap: UnityEditor.TextureImporterGenerateCubemap;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class CookieMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Spot: UnityEditor.TextureImporterInspector.CookieMode;
    static Directional: UnityEditor.TextureImporterInspector.CookieMode;
    static Point: UnityEditor.TextureImporterInspector.CookieMode;
  }
}
declare namespace UnityEditor {
  class TextureImporterInspector {
    // constructors
    constructor();
    // methods
    OnDisable(): void;
    static IsCompressedDXTTextureFormat(format: UnityEditor.TextureImporterFormat): boolean;
    OnEnable(): void;
    OnInspectorGUI(): void;
    static GetBuildPlayerValidPlatforms(): UnityEditor.BuildPlayerWindow.BuildPlatform[];
    BuildTargetList(): void;
    static SelectMainAssets(targets: any[]): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
    static s_DefaultPlatformName: string;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    textureTypeTitle: any;
    textureTypeOptions: any[];
    textureTypeValues: number[];
    textureShape: any;
    textureShapeOptionsDictionnary: any;
    textureShapeValuesDictionnary: any;
    filterMode: any;
    filterModeOptions: any[];
    cookieType: any;
    cookieOptions: any[];
    generateFromBump: any;
    bumpiness: any;
    bumpFiltering: any;
    bumpFilteringOptions: any[];
    cubemap: any;
    cubemapOptions: any[];
    cubemapValues2: number[];
    cubemapConvolution: any;
    cubemapConvolutionOptions: any[];
    cubemapConvolutionValues: number[];
    seamlessCubemap: any;
    textureFormat: any;
    defaultPlatform: any;
    mipmapFadeOutToggle: any;
    mipmapFadeOut: any;
    readWrite: any;
    alphaSource: any;
    alphaSourceOptions: any[];
    alphaSourceValues: number[];
    generateMipMaps: any;
    sRGBTexture: any;
    borderMipMaps: any;
    mipMapFilter: any;
    mipMapFilterOptions: any[];
    npot: any;
    generateCubemap: any;
    compressionQuality: any;
    compressionQualitySlider: any;
    mobileCompressionQualityOptions: any[];
    spriteMode: any;
    spriteModeOptions: any[];
    spriteMeshTypeOptions: any[];
    spritePackingTag: any;
    spritePixelsPerUnit: any;
    spriteExtrude: any;
    spriteMeshType: any;
    spriteAlignment: any;
    spriteAlignmentOptions: any[];
    alphaIsTransparency: any;
    etc1Compression: any;
    crunchedCompression: any;
    showAdvanced: any;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class TextureInspectorGUIElement {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static PowerOfTwo: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static Readable: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static AlphaHandling: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static ColorSpace: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static MipMaps: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static NormalMap: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static Sprite: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static Cookie: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static CubeMapConvolution: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    static CubeMapping: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
  }
}
declare namespace UnityEditor.TextureImporterInspector {
  class TextureInspectorTypeGUIProperties {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    commonElements: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    advancedElements: UnityEditor.TextureImporterInspector.TextureInspectorGUIElement;
    shapeCaps: UnityEditor.TextureImporterShape;
  }
}
declare namespace UnityEditor {
  class TextureImporterMipFilter {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static BoxFilter: UnityEditor.TextureImporterMipFilter;
    static KaiserFilter: UnityEditor.TextureImporterMipFilter;
  }
}
declare namespace UnityEditor {
  class TextureImporterNormalFilter {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Standard: UnityEditor.TextureImporterNormalFilter;
    static Sobel: UnityEditor.TextureImporterNormalFilter;
  }
}
declare namespace UnityEditor {
  class TextureImporterNPOTScale {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TextureImporterNPOTScale;
    static ToNearest: UnityEditor.TextureImporterNPOTScale;
    static ToLarger: UnityEditor.TextureImporterNPOTScale;
    static ToSmaller: UnityEditor.TextureImporterNPOTScale;
  }
}
declare namespace UnityEditor {
  class TextureImporterPlatformSettings {
    // constructors
    constructor();
    // methods
    CopyTo(target: UnityEditor.TextureImporterPlatformSettings): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    name: string;
    overridden: boolean;
    maxTextureSize: number;
    format: UnityEditor.TextureImporterFormat;
    textureCompression: UnityEditor.TextureImporterCompression;
    compressionQuality: number;
    crunchedCompression: boolean;
    allowsAlphaSplitting: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class TextureImporterRGBMMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Auto: UnityEditor.TextureImporterRGBMMode;
    static On: UnityEditor.TextureImporterRGBMMode;
    static Off: UnityEditor.TextureImporterRGBMMode;
    static Encoded: UnityEditor.TextureImporterRGBMMode;
  }
}
declare namespace UnityEditor {
  class TextureImporterSettings {
    // constructors
    constructor();
    // methods
    static Equal(a: UnityEditor.TextureImporterSettings, b: UnityEditor.TextureImporterSettings): boolean;
    CopyTo(target: UnityEditor.TextureImporterSettings): void;
    ApplyTextureType(type: UnityEditor.TextureImporterType, applyAll: boolean): void;
    ApplyTextureType(type: UnityEditor.TextureImporterType): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    textureType: UnityEditor.TextureImporterType;
    textureShape: UnityEditor.TextureImporterShape;
    mipmapFilter: UnityEditor.TextureImporterMipFilter;
    mipmapEnabled: boolean;
    generateMipsInLinearSpace: boolean;
    sRGBTexture: boolean;
    fadeOut: boolean;
    borderMipmap: boolean;
    mipmapFadeDistanceStart: number;
    mipmapFadeDistanceEnd: number;
    convertToNormalMap: boolean;
    heightmapScale: number;
    normalMapFilter: UnityEditor.TextureImporterNormalFilter;
    alphaSource: UnityEditor.TextureImporterAlphaSource;
    readable: boolean;
    npotScale: UnityEditor.TextureImporterNPOTScale;
    generateCubemap: UnityEditor.TextureImporterGenerateCubemap;
    cubemapConvolution: UnityEditor.TextureImporterCubemapConvolution;
    seamlessCubemap: boolean;
    filterMode: any;
    aniso: number;
    mipmapBias: number;
    wrapMode: any;
    alphaIsTransparency: boolean;
    spriteMode: number;
    spritePixelsPerUnit: number;
    spritePixelsToUnits: number;
    spriteTessellationDetail: number;
    spriteExtrude: number;
    spriteMeshType: any;
    spriteAlignment: number;
    spritePivot: any;
    spriteBorder: any;
    linearTexture: boolean;
    normalMap: boolean;
    textureFormat: UnityEditor.TextureImporterFormat;
    maxTextureSize: number;
    lightmap: boolean;
    rgbm: UnityEditor.TextureImporterRGBMMode;
    grayscaleToAlpha: boolean;
    cubemapConvolutionSteps: number;
    cubemapConvolutionExponent: number;
    compressionQuality: number;
    // fields
  }
}
declare namespace UnityEditor {
  class TextureImporterShape {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Texture2D: UnityEditor.TextureImporterShape;
    static TextureCube: UnityEditor.TextureImporterShape;
  }
}
declare namespace UnityEditor {
  class TextureImporterType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.TextureImporterType;
    static Image: UnityEditor.TextureImporterType;
    static NormalMap: UnityEditor.TextureImporterType;
    static Bump: UnityEditor.TextureImporterType;
    static GUI: UnityEditor.TextureImporterType;
    static Sprite: UnityEditor.TextureImporterType;
    static Cursor: UnityEditor.TextureImporterType;
    static Cubemap: UnityEditor.TextureImporterType;
    static Reflection: UnityEditor.TextureImporterType;
    static Cookie: UnityEditor.TextureImporterType;
    static Lightmap: UnityEditor.TextureImporterType;
    static HDRI: UnityEditor.TextureImporterType;
    static Advanced: UnityEditor.TextureImporterType;
    static SingleChannel: UnityEditor.TextureImporterType;
  }
}
declare namespace UnityEditor {
  class TextureImportPlatformSettings {
    // constructors
    constructor(name: string, target: UnityEditor.BuildTarget, inspector: UnityEditor.TextureImporterInspector);
    // methods
    SetOverriddenForAll(overridden: boolean): void;
    SetMaxTextureSizeForAll(maxTextureSize: number): void;
    SetTextureCompressionForAll(textureCompression: UnityEditor.TextureImporterCompression): void;
    SetCompressionQualityForAll(quality: number): void;
    SetCrunchedCompressionForAll(crunched: boolean): void;
    SetTextureFormatForAll(format: UnityEditor.TextureImporterFormat): void;
    SetAllowsAlphaSplitForAll(value: boolean): void;
    SupportsFormat(format: UnityEditor.TextureImporterFormat, importer: UnityEditor.TextureImporter): boolean;
    GetSettings(importer: UnityEditor.TextureImporter): UnityEditor.TextureImporterSettings;
    SetChanged(): void;
    HasChanged(): boolean;
    Sync(): void;
    Apply(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly platformTextureSettings: UnityEditor.TextureImporterPlatformSettings;
    readonly name: string;
    readonly overridden: boolean;
    readonly overriddenIsDifferent: boolean;
    readonly allAreOverridden: boolean;
    readonly maxTextureSize: number;
    readonly maxTextureSizeIsDifferent: boolean;
    readonly textureCompression: UnityEditor.TextureImporterCompression;
    readonly textureCompressionIsDifferent: boolean;
    readonly compressionQuality: number;
    readonly compressionQualityIsDifferent: boolean;
    readonly crunchedCompression: boolean;
    readonly crunchedCompressionIsDifferent: boolean;
    readonly format: UnityEditor.TextureImporterFormat;
    readonly textureFormatIsDifferent: boolean;
    readonly allowsAlphaSplitting: boolean;
    readonly allowsAlphaSplitIsDifferent: boolean;
    readonly importers: UnityEditor.TextureImporter[];
    readonly isDefault: boolean;
    // fields
    m_Target: UnityEditor.BuildTarget;
    static kTextureFormatsValueWiiU: number[];
    static kTextureFormatsValueApplePVR: number[];
    static kTextureFormatsValueAndroid: number[];
    static kTextureFormatsValueTizen: number[];
    static kTextureFormatsValueSTV: number[];
    static kTextureFormatsValueWebGL: number[];
    static kNormalFormatsValueDefault: number[];
    static kTextureFormatsValueDefault: number[];
    static kTextureFormatsValueSingleChannel: number[];
  }
}
declare namespace UnityEditor {
  class TextureInspector {
    // constructors
    constructor();
    // methods
    static IsNormalMap(t: any): boolean;
    GetMipLevelForRendering(): number;
    OnInspectorGUI(): void;
    OnPreviewSettings(): void;
    HasPreviewGUI(): boolean;
    OnPreviewGUI(r: any, background: any): void;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    mipLevel: number;
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.TextureInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    smallZoom: any;
    largeZoom: any;
    alphaIcon: any;
    RGBIcon: any;
    previewButton: any;
    previewSlider: any;
    previewSliderThumb: any;
    previewLabel: any;
  }
}
declare namespace UnityEditor {
  class TextureUsageMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.TextureUsageMode;
    static LightmapDoubleLDR: UnityEditor.TextureUsageMode;
    static LightmapRGBM: UnityEditor.TextureUsageMode;
    static NormalmapDXT5nm: UnityEditor.TextureUsageMode;
    static NormalmapPlain: UnityEditor.TextureUsageMode;
    static RGBMEncoded: UnityEditor.TextureUsageMode;
    static AlwaysPadded: UnityEditor.TextureUsageMode;
  }
}
declare namespace UnityEditor {
  class TextureUtil {
    // constructors
    constructor();
    // methods
    static GetStorageMemorySize(t: any): number;
    static GetRuntimeMemorySize(t: any): number;
    static IsNonPowerOfTwo(t: any): boolean;
    static GetUsageMode(t: any): UnityEditor.TextureUsageMode;
    static GetBytesFromTextureFormat(inFormat: any): number;
    static GetRowBytesFromWidthAndFormat(width: number, format: any): number;
    static IsValidTextureFormat(format: any): boolean;
    static IsCompressedTextureFormat(format: any): boolean;
    static GetTextureFormat(texture: any): any;
    static IsAlphaOnlyTextureFormat(format: any): boolean;
    static HasAlphaTextureFormat(format: any): boolean;
    static GetTextureFormatString(format: any): string;
    static GetTextureColorSpaceString(texture: any): string;
    static ConvertToAlphaTextureFormat(format: any): any;
    static IsDepthRTFormat(format: any): boolean;
    static HasMipMap(t: any): boolean;
    static GetGPUWidth(t: any): number;
    static GetGPUHeight(t: any): number;
    static GetMipmapCount(t: any): number;
    static GetLinearSampled(t: any): boolean;
    static GetDefaultCompressionQuality(): number;
    static GetTexelSizeVector(t: any): any;
    static GetSourceTexture(cubemapRef: any, face: any): any;
    static SetSourceTexture(cubemapRef: any, face: any, tex: any): void;
    static CopyTextureIntoCubemapFace(textureRef: any, cubemapRef: any, face: any): void;
    static CopyCubemapFaceIntoTexture(cubemapRef: any, face: any, textureRef: any): void;
    static ReformatCubemap(cubemap: any, width: number, height: number, textureFormat: any, useMipmap: boolean, linear: boolean): boolean;
    static ReformatTexture(texture: any, width: number, height: number, textureFormat: any, useMipmap: boolean, linear: boolean): boolean;
    static SetAnisoLevelNoDirty(tex: any, level: number): void;
    static SetWrapModeNoDirty(tex: any, mode: any): void;
    static SetMipMapBiasNoDirty(tex: any, bias: number): void;
    static SetFilterModeNoDirty(tex: any, mode: any): void;
    static DoesTextureStillNeedToBeCompressed(assetPath: string): boolean;
    static IsCubemapReadable(cubemapRef: any): boolean;
    static MarkCubemapReadable(cubemapRef: any, readable: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TickHandler {
    // constructors
    constructor();
    // methods
    SetTickModulos(tickModulos: number[]): void;
    SetTickModulosForFrameRate(frameRate: number): void;
    SetRanges(minValue: number, maxValue: number, minPixel: number, maxPixel: number): void;
    GetTicksAtLevel(level: number, excludeTicksFromHigherlevels: boolean): number[];
    GetStrengthOfLevel(level: number): number;
    GetPeriodOfLevel(level: number): number;
    GetLevelWithMinSeparation(pixelSeparation: number): number;
    SetTickStrengths(tickMinSpacing: number, tickMaxSpacing: number, sqrt: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly tickLevels: number;
    // fields
  }
}
declare namespace UnityEditor {
  class TickStyle {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    tickColor: UnityEditor.EditorGUIUtility.SkinnedColor;
    labelColor: UnityEditor.EditorGUIUtility.SkinnedColor;
    distMin: number;
    distFull: number;
    distLabel: number;
    stubs: boolean;
    centerLabel: boolean;
    unit: string;
  }
}
declare namespace UnityEditor {
  class TickTimerHelper {
    // constructors
    constructor(intervalBetweenTicksInSeconds: number);
    // methods
    DoTick(): boolean;
    Reset(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TimeArea {
    // constructors
    constructor(minimalGUI: boolean);
    // methods
    SetTickMarkerRanges(): void;
    DrawMajorTicks(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number, timeFormat: UnityEditor.TimeArea.TimeFormat): void;
    static DrawVerticalLine(x: number, minY: number, maxY: number, color: any): void;
    static DrawVerticalLineFast(x: number, minY: number, maxY: number, color: any): void;
    BrowseRuler(position: any, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    BrowseRuler(position: any, id: number, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    FrameToPixel(i: number, frameRate: number, rect: any): number;
    TimeField(rect: any, id: number, time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): number;
    ValueField(rect: any, id: number, value: number): number;
    FormatTime(time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): string;
    FormatValue(value: number): string;
    SnapTimeToWholeFPS(time: number, frameRate: number): number;
    SetShownHRangeInsideMargins(min: number, max: number): void;
    SetShownHRange(min: number, max: number): void;
    SetShownVRangeInsideMargins(min: number, max: number): void;
    SetShownVRange(min: number, max: number): void;
    DrawingToViewTransformPoint(lhs: any): any;
    DrawingToViewTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    NormalizeInViewSpace(vec: any): any;
    BeginViewGUI(): void;
    HandleZoomAndPanEvents(area: any): void;
    EndViewGUI(): void;
    SetScaleFocused(focalPoint: any, newScale: any): void;
    SetScaleFocused(focalPoint: any, newScale: any, lockHorizontal: boolean, lockVertical: boolean): void;
    SetTransform(newTranslation: any, newScale: any): void;
    EnforceScaleAndRange(): void;
    PixelToTime(pixelX: number, rect: any): number;
    TimeToPixel(time: number, rect: any): number;
    PixelDeltaToTime(rect: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    hTicks: UnityEditor.TickHandler;
    vTicks: UnityEditor.TickHandler;
    hRangeLocked: boolean;
    vRangeLocked: boolean;
    hBaseRangeMin: number;
    hBaseRangeMax: number;
    vBaseRangeMin: number;
    vBaseRangeMax: number;
    hAllowExceedBaseRangeMin: boolean;
    hAllowExceedBaseRangeMax: boolean;
    vAllowExceedBaseRangeMin: boolean;
    vAllowExceedBaseRangeMax: boolean;
    hRangeMin: number;
    hRangeMax: number;
    vRangeMin: number;
    vRangeMax: number;
    hScaleMin: number;
    hScaleMax: number;
    vScaleMin: number;
    vScaleMax: number;
    scaleWithWindow: boolean;
    hSlider: boolean;
    vSlider: boolean;
    ignoreScrollWheelUntilClicked: boolean;
    enableMouseInput: boolean;
    uniformScale: boolean;
    upDirection: UnityEditor.ZoomableArea.YDirection;
    readonly scale: any;
    readonly translation: any;
    leftmargin: number;
    rightmargin: number;
    topmargin: number;
    bottommargin: number;
    rect: any;
    readonly drawRect: any;
    shownArea: any;
    shownAreaInsideMargins: any;
    readonly drawingBounds: any;
    readonly drawingToViewMatrix: any;
    readonly mousePositionInDrawing: any;
    // fields
    m_UniformScale: boolean;
  }
}
declare namespace UnityEditor.TimeArea {
  class Styles2 {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    TimelineTick: any;
    labelTickMarks: any;
  }
}
declare namespace UnityEditor.TimeArea {
  class TimeFormat {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TimeArea.TimeFormat;
    static TimeFrame: UnityEditor.TimeArea.TimeFormat;
    static Frame: UnityEditor.TimeArea.TimeFormat;
  }
}
declare namespace UnityEditor.TimeArea {
  class TimeRulerDragMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.TimeArea.TimeRulerDragMode;
    static Start: UnityEditor.TimeArea.TimeRulerDragMode;
    static End: UnityEditor.TimeArea.TimeRulerDragMode;
    static Dragging: UnityEditor.TimeArea.TimeRulerDragMode;
    static Cancel: UnityEditor.TimeArea.TimeRulerDragMode;
  }
}
declare namespace UnityEditor {
  class TimeControl {
    // constructors
    constructor();
    // methods
    DoTimeControl(rect: any): void;
    OnDisable(): void;
    Update(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    deltaTime: number;
    normalizedTime: number;
    playing: boolean;
    // fields
    currentTime: number;
    startTime: number;
    stopTime: number;
    playSelection: boolean;
    loop: boolean;
    playbackSpeed: number;
  }
}
declare namespace UnityEditor.TimeControl {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    playIcon: any;
    pauseIcon: any;
    playButton: any;
    timeScrubber: any;
  }
}
declare namespace UnityEditor.TimeCursorManipulator {
  class Alignment {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Center: UnityEditor.TimeCursorManipulator.Alignment;
    static Left: UnityEditor.TimeCursorManipulator.Alignment;
    static Right: UnityEditor.TimeCursorManipulator.Alignment;
  }
}
declare namespace UnityEditor {
  class TimeCursorManipulator {
    // constructors
    constructor(style: any);
    // methods
    OnGUI(windowRect: any, pixelTime: number): void;
    HandleEvents(): void;
    IgnoreEvents(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    alignment: UnityEditor.TimeCursorManipulator.Alignment;
    headColor: any;
    lineColor: any;
    dottedLine: boolean;
    drawLine: boolean;
    drawHead: boolean;
    tooltip: string;
    onStartDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    onDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    onEndDrag: ((UnityEditor.AnimationWindowManipulator, any) => boolean);
    rect: any;
    controlID: number;
  }
}
declare namespace UnityEditor {
  class TimeHelper {
    // constructors
    private constructor();
    // methods
    Begin(): void;
    Update(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    deltaTime: number;
  }
}
declare namespace UnityEditor {
  class Timeline {
    // constructors
    constructor();
    // methods
    ResetRange(): void;
    DoTimeline(timeRect: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    SrcPivotList: any;
    DstPivotList: any;
    srcLoop: boolean;
    dstLoop: boolean;
    Time: number;
    StartTime: number;
    StopTime: number;
    SrcName: string;
    DstName: string;
    SrcStartTime: number;
    SrcStopTime: number;
    readonly SrcDuration: number;
    DstStartTime: number;
    DstStopTime: number;
    readonly DstDuration: number;
    TransitionStartTime: number;
    TransitionStopTime: number;
    HasExitTime: boolean;
    readonly TransitionDuration: number;
    SampleStopTime: number;
    // fields
  }
}
declare namespace UnityEditor.Timeline {
  class DragStates {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.Timeline.DragStates;
    static LeftSelection: UnityEditor.Timeline.DragStates;
    static RightSelection: UnityEditor.Timeline.DragStates;
    static FullSelection: UnityEditor.Timeline.DragStates;
    static Destination: UnityEditor.Timeline.DragStates;
    static Source: UnityEditor.Timeline.DragStates;
    static Playhead: UnityEditor.Timeline.DragStates;
    static TimeArea: UnityEditor.Timeline.DragStates;
  }
}
declare namespace UnityEditor.Timeline {
  class PivotSample {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Time: number;
    m_Weight: number;
  }
}
declare namespace UnityEditor.Timeline {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    block: any;
    leftBlock: any;
    rightBlock: any;
    timeBlockRight: any;
    timeBlockLeft: any;
    offLeft: any;
    offRight: any;
    onLeft: any;
    onRight: any;
    offOn: any;
    onOff: any;
    background: any;
    header: any;
    handLeft: any;
    handRight: any;
    handLeftPrev: any;
    playhead: any;
    selectHead: any;
    select: any;
    overlay: any;
  }
}
declare namespace UnityEditor {
  class TizenOSVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Version23: UnityEditor.TizenOSVersion;
    static Version24: UnityEditor.TizenOSVersion;
  }
}
declare namespace UnityEditor {
  class TizenShowActivityIndicatorOnLoading {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Large: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static InversedLarge: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static Small: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static InversedSmall: UnityEditor.TizenShowActivityIndicatorOnLoading;
    static DontShow: UnityEditor.TizenShowActivityIndicatorOnLoading;
  }
}
declare namespace UnityEditor {
  class Tool {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static View: UnityEditor.Tool;
    static Move: UnityEditor.Tool;
    static Rotate: UnityEditor.Tool;
    static Scale: UnityEditor.Tool;
    static Rect: UnityEditor.Tool;
    static None: UnityEditor.Tool;
  }
}
declare namespace UnityEditor.Toolbar {
  class CollabToolbarState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static NeedToEnableCollab: UnityEditor.Toolbar.CollabToolbarState;
    static UpToDate: UnityEditor.Toolbar.CollabToolbarState;
    static Conflict: UnityEditor.Toolbar.CollabToolbarState;
    static OperationError: UnityEditor.Toolbar.CollabToolbarState;
    static ServerHasChanges: UnityEditor.Toolbar.CollabToolbarState;
    static FilesToPush: UnityEditor.Toolbar.CollabToolbarState;
    static InProgress: UnityEditor.Toolbar.CollabToolbarState;
    static Disabled: UnityEditor.Toolbar.CollabToolbarState;
    static Offline: UnityEditor.Toolbar.CollabToolbarState;
  }
}
declare namespace UnityEditor {
  class Toolbar {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnCollabStateChanged(info: UnityEditor.Collaboration.CollabInfo): void;
    UpdateCollabToolbarState(): void;
    CalcHeight(): number;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
    static get: UnityEditor.Toolbar;
    static requestShowCollabToolbar: boolean;
  }
}
declare namespace UnityEditor.Toolbar {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static collabButtonStyle: any;
    static dropdown: any;
    static appToolbar: any;
  }
}
declare namespace UnityEditor {
  class Tools {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    static current: UnityEditor.Tool;
    static viewTool: UnityEditor.ViewTool;
    static readonly handlePosition: any;
    static readonly handleRect: any;
    static readonly handleRectRotation: any;
    static pivotMode: UnityEditor.PivotMode;
    static rectBlueprintMode: boolean;
    static handleRotation: any;
    static pivotRotation: UnityEditor.PivotRotation;
    static hidden: boolean;
    static visibleLayers: number;
    static lockedLayers: number;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TooltipView {
    // constructors
    constructor();
    // methods
    static Show(tooltip: string, rect: any): void;
    static Close(): void;
    static SetAlpha(percent: number): void;
    SetInternalGameViewDimensions(rect: any, clippedRect: any, targetSize: any): void;
    SetAsStartView(): void;
    ClearStartView(): void;
    Focus(): void;
    Repaint(): void;
    RepaintImmediately(): void;
    CaptureRenderDoc(): void;
    OnDestroy(): void;
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly hasFocus: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    depthBufferBits: number;
    antiAlias: number;
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TrailModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.TrailModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    ratio: any;
    lifetime: any;
    minVertexDistance: any;
    textureMode: any;
    worldSpace: any;
    dieWithParticles: any;
    sizeAffectsWidth: any;
    sizeAffectsLifetime: any;
    inheritParticleColor: any;
    colorOverLifetime: any;
    widthOverTrail: any;
    colorOverTrail: any;
    textureModeOptions: string[];
  }
}
declare namespace UnityEditor {
  class TrailRendererInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.TrailRendererInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static colorGradient: any;
    static numCornerVertices: any;
    static numCapVertices: any;
    static alignment: any;
    static alignmentOptions: any[];
    static textureMode: any;
    static textureModeOptions: any[];
  }
}
declare namespace UnityEditor.TransformInspector {
  class Contents {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    positionContent: any;
    scaleContent: any;
    subLabels: any[];
    floatingPointWarning: string;
  }
}
declare namespace UnityEditor {
  class TransformInspector {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TransformManipulator {
    // constructors
    constructor();
    // methods
    static BeginManipulationHandling(lockHandleWhileDragging: boolean): void;
    static EndManipulationHandling(): any;
    static SetScaleDelta(scaleDelta: any, pivotRotation: any): void;
    static SetResizeDelta(scaleDelta: any, pivotPosition: any, pivotRotation: any): void;
    static SetPositionDelta(positionDelta: any): void;
    static DebugAlignment(targetRotation: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly mouseDownHandlePosition: any;
    static readonly active: boolean;
    static readonly individualSpace: boolean;
    // fields
  }
}
declare namespace UnityEditor.TransformManipulator {
  class TransformData {
    // constructors
    private constructor();
    // methods
    static GetData(t: any): UnityEditor.TransformManipulator.TransformData;
    SetScaleDelta(scaleDelta: any, scalePivot: any, scaleRotation: any, preferRectResize: boolean): void;
    SetPositionDelta(positionDelta: any): void;
    DebugAlignment(targetRotation: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    static s_Alignments: any[];
    transform: any;
    position: any;
    localPosition: any;
    rotation: any;
    scale: any;
    rectTransform: any;
    rect: any;
    anchoredPosition: any;
    sizeDelta: any;
  }
}
declare namespace UnityEditor {
  class TransformMaskElement {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    path: string;
    weight: number;
  }
}
declare namespace UnityEditor {
  class TransformRotationGUI {
    // constructors
    constructor();
    // methods
    OnEnable(m_Rotation: UnityEditor.SerializedProperty, label: any): void;
    RotationField(): void;
    RotationField(disabled: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TransformSort {
    // constructors
    constructor();
    // methods
    Compare(lhs: any, rhs: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TransformSorting {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly content: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TransformX {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    position: any;
    rotation: any;
    scale: any;
  }
}
declare namespace UnityEditor {
  class TransitionPreview {
    // constructors
    constructor();
    // methods
    SetTransition(transition: UnityEditor.Animations.AnimatorStateTransition, sourceState: UnityEditor.Animations.AnimatorState, destinationState: UnityEditor.Animations.AnimatorState, srcLayer: UnityEditor.Animations.AnimatorControllerLayer, previewObject: any): void;
    DoTransitionPreview(): void;
    OnDisable(): void;
    OnDestroy(): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    mustResample: boolean;
    // fields
  }
}
declare namespace UnityEditor.TransitionPreview {
  class ParameterInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_Name: string;
    m_Value: number;
  }
}
declare namespace UnityEditor.TransitionPreview {
  class TransitionInfo {
    // constructors
    constructor();
    // methods
    IsEqual(info: UnityEditor.TransitionPreview.TransitionInfo): boolean;
    Set(transition: UnityEditor.Animations.AnimatorStateTransition, srcState: UnityEditor.Animations.AnimatorState, dstState: UnityEditor.Animations.AnimatorState): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TreeAO {
    // constructors
    constructor();
    // methods
    static InitializeDirections(): void;
    static CalcSoftOcclusion(mesh: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TreeAOImporter {
    // constructors
    constructor();
    // methods
    LogWarning(warning: string): void;
    LogWarning(warning: string, context: any): void;
    LogError(warning: string): void;
    LogError(warning: string, context: any): void;
    GetVersion(): number;
    GetPostprocessOrder(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    assetPath: string;
    readonly assetImporter: UnityEditor.AssetImporter;
    preview: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TreePainter {
    // constructors
    constructor();
    // methods
    static PlaceTrees(terrain: any, xBase: number, yBase: number): void;
    static RemoveTrees(terrain: any, xBase: number, yBase: number, clearSelectedOnly: boolean): void;
    static MassPlaceTrees(terrainData: any, numberOfTrees: number, randomTreeColor: boolean, keepExistingTrees: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static brushSize: number;
    static spacing: number;
    static lockWidthToHeight: boolean;
    static randomRotation: boolean;
    static allowHeightVar: boolean;
    static allowWidthVar: boolean;
    static treeColorAdjustment: number;
    static treeHeight: number;
    static treeHeightVariation: number;
    static treeWidth: number;
    static treeWidthVariation: number;
    static selectedTree: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class BackendData {
    // constructors
    constructor();
    // methods
    GenerateData(maxNumItems: number): void;
    Find(id: number): UnityEditor.TreeViewExamples.BackendData.Foo;
    FindRecursive(id: number, parent: UnityEditor.TreeViewExamples.BackendData.Foo): UnityEditor.TreeViewExamples.BackendData.Foo;
    GetParentsBelow(id: number): any;
    ReparentSelection(parentItem: UnityEditor.TreeViewExamples.BackendData.Foo, insertionIndex: number, draggedItems: any): void;
    static FindItemRecursive(item: UnityEditor.TreeViewExamples.BackendData.Foo, id: number): UnityEditor.TreeViewExamples.BackendData.Foo;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly root: UnityEditor.TreeViewExamples.BackendData.Foo;
    readonly IDCounter: number;
    // fields
    m_RecursiveFindParentsBelow: boolean;
  }
}
declare namespace UnityEditor.TreeViewExamples.BackendData {
  class Foo {
    // constructors
    constructor(name: string, depth: number, id: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    name: string;
    id: number;
    depth: number;
    parent: UnityEditor.TreeViewExamples.BackendData.Foo;
    children: any;
    readonly hasChildren: boolean;
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class FooTreeViewItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, foo: UnityEditor.TreeViewExamples.BackendData.Foo);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly foo: UnityEditor.TreeViewExamples.BackendData.Foo;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class LazyTestDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, data: UnityEditor.TreeViewExamples.BackendData);
    // methods
    FetchData(): void;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    RevealItem(itemID: number): void;
    FindItem(itemID: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    SetExpandedWithChildren(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    InitIfNeeded(): void;
    GetRows(): any;
    OnInitialize(): void;
    ReloadData(): void;
    IsRevealed(id: number): boolean;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly itemCounter: number;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, data: UnityEditor.TreeViewExamples.BackendData);
    // methods
    FetchData(): void;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly itemCounter: number;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestDragging {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, data: UnityEditor.TreeViewExamples.BackendData);
    // methods
    StartDrag(draggedItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any): void;
    DoDrag(parentItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, perform: boolean, dropPos: UnityEditor.IMGUI.Controls.TreeViewDragging.DropPosition): UnityEditor.DragAndDropVisualMode;
    OnInitialize(): void;
    GetDropTargetControlID(): number;
    GetRowMarkerControlID(): number;
    CanStartDrag(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, draggedItemIDs: any, mouseDownPosition: any): boolean;
    DragElement(targetItem: UnityEditor.IMGUI.Controls.TreeViewItem, targetItemRect: any, firstItem: boolean): boolean;
    DragCleanup(revertExpanded: boolean): void;
    GetCurrentExpanded(): any;
    RestoreExpanded(ids: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    drawRowMarkerAbove: boolean;
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples.TestDragging {
  class FooDragData {
    // constructors
    constructor(draggedItems: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_DraggedItems: any;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TestGUICustomItemHeights {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    OnInitialize(): void;
    GetRowRect(row: number, rowWidth: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRectForFraming(row: number): any;
    CalculateRowRects(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples.TestGUICustomItemHeights {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static foldout: any;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewColumnHeader {
    // constructors
    constructor();
    // methods
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    columnWidths: number[];
    minColumnWidth: number;
    dragWidth: number;
    columnRenderer: ((number, any) => void);
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewTest {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, lazy: boolean);
    // methods
    GetNumItemsInData(): number;
    GetNumItemsInTree(): number;
    Init(rect: any, backendData: UnityEditor.TreeViewExamples.BackendData): void;
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewTestWindow {
    // constructors
    constructor();
    // methods
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.TreeViewExamples.TreeViewTestWindow {
  class TestType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static LargeTreesWithStandardGUI: UnityEditor.TreeViewExamples.TreeViewTestWindow.TestType;
    static TreeWithCustomItemHeight: UnityEditor.TreeViewExamples.TreeViewTestWindow.TestType;
  }
}
declare namespace UnityEditor.TreeViewExamples {
  class TreeViewTestWithCustomHeight {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, backendData: UnityEditor.TreeViewExamples.BackendData, rect: any);
    // methods
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class TreeViewForAudioMixerGroup {
    // constructors
    private constructor();
    // methods
    static CreateAndSetTreeView(data: UnityEditor.ObjectTreeForSelector.TreeSelectorData): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.TreeViewForAudioMixerGroup {
  class GroupTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    GetRowRect(row: number, rowWidth: number): any;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    CalculateRowRects(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    OnInitialize(): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditor.TreeViewForAudioMixerGroup {
  class TreeViewDataSourceForMixers {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, ignoreController: UnityEditor.Audio.AudioMixerController);
    // methods
    FetchData(): void;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly ignoreThisController: UnityEditor.Audio.AudioMixerController;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditor {
  class TreeViewGUIWithCustomItemsHeights {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnInitialize(): void;
    GetRowRect(row: number, rowWidth: number): any;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRectForFraming(row: number): any;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    CalculateRowRects(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
  }
}
declare namespace UnityEditor {
  class TreeWizard {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    helpString: string;
    errorString: string;
    createButtonName: string;
    otherButtonName: string;
    isValid: boolean;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    m_Tree: any;
    m_BendFactor: number;
  }
}
declare namespace UnityEditor {
  class TriggerModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.TriggerModuleUI {
  class OverlapOptions {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Ignore: UnityEditor.TriggerModuleUI.OverlapOptions;
    static Kill: UnityEditor.TriggerModuleUI.OverlapOptions;
    static Callback: UnityEditor.TriggerModuleUI.OverlapOptions;
  }
}
declare namespace UnityEditor.TriggerModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    collisionShapes: any;
    createCollisionShape: any;
    inside: any;
    outside: any;
    enter: any;
    exit: any;
    radiusScale: any;
    visualizeBounds: any;
    overlapOptions: string[];
  }
}
declare namespace UnityEditor {
  class TrueTypeFontImporter {
    // constructors
    constructor();
    // methods
    GenerateEditableFont(path: string): any;
    SetAssetBundleNameAndVariant(assetBundleName: string, assetBundleVariant: string): void;
    SaveAndReimport(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    fontSize: number;
    fontTextureCase: UnityEditor.FontTextureCase;
    includeFontData: boolean;
    ascentCalculationMode: UnityEditor.AscentCalculationMode;
    fontNames: string[];
    fontReferences: any[];
    customCharacters: string;
    readonly fontTTFName: string;
    characterSpacing: number;
    characterPadding: number;
    fontRenderingMode: UnityEditor.FontRenderingMode;
    readonly assetPath: string;
    readonly assetTimeStamp: number;
    userData: string;
    assetBundleName: string;
    assetBundleVariant: string;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class TrueTypeFontImporterInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    OnDisable(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class tvOSSdkVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Device: UnityEditor.tvOSSdkVersion;
    static Simulator: UnityEditor.tvOSSdkVersion;
  }
}
declare namespace UnityEditor {
  class tvOSTargetOSVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unknown: UnityEditor.tvOSTargetOSVersion;
    static tvOS_9_0: UnityEditor.tvOSTargetOSVersion;
    static tvOS_9_1: UnityEditor.tvOSTargetOSVersion;
  }
}
declare namespace UnityEditor {
  class TypeSelection {
    // constructors
    constructor(typeName: string, objects: any[]);
    // methods
    CompareTo(o: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    label: any;
    objects: any[];
  }
}
declare namespace UnityEditor {
  class TypeSelectionList {
    // constructors
    constructor(objects: any[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly typeSelections: any;
    // fields
  }
}
declare namespace UnityEditor {
  class UIOrientation {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Portrait: UnityEditor.UIOrientation;
    static PortraitUpsideDown: UnityEditor.UIOrientation;
    static LandscapeRight: UnityEditor.UIOrientation;
    static LandscapeLeft: UnityEditor.UIOrientation;
    static AutoRotation: UnityEditor.UIOrientation;
  }
}
declare namespace UnityEditor {
  class Undo {
    // constructors
    constructor();
    // methods
    static RegisterCompleteObjectUndo(objectToUndo: any, name: string): void;
    static RegisterCompleteObjectUndo(objectsToUndo: any[], name: string): void;
    static SetTransformParent(transform: any, newParent: any, name: string): void;
    static MoveGameObjectToScene(go: any, scene: any, name: string): void;
    static RegisterCreatedObjectUndo(objectToUndo: any, name: string): void;
    static DestroyObjectImmediate(objectToUndo: any): void;
    static AddComponent(gameObject: any, type: any): any;
    static RegisterFullObjectHierarchyUndo(objectToUndo: any, name: string): void;
    static RegisterFullObjectHierarchyUndo(objectToUndo: any): void;
    static RecordObject(objectToUndo: any, name: string): void;
    static RecordObjects(objectsToUndo: any[], name: string): void;
    static ClearUndo(identifier: any): void;
    static PerformUndo(): void;
    static PerformRedo(): void;
    static IncrementCurrentGroup(): void;
    static GetCurrentGroup(): number;
    static GetCurrentGroupName(): string;
    static SetCurrentGroupName(name: string): void;
    static RevertAllInCurrentGroup(): void;
    static RevertAllDownToGroup(group: number): void;
    static CollapseUndoOperations(groupIndex: number): void;
    static RegisterUndo(objectToUndo: any, name: string): void;
    static RegisterUndo(objectsToUndo: any[], name: string): void;
    static FlushUndoRecordObjects(): void;
    static SetSnapshotTarget(objectToUndo: any, name: string): void;
    static SetSnapshotTarget(objectsToUndo: any[], name: string): void;
    static ClearSnapshotTarget(): void;
    static CreateSnapshot(): void;
    static RestoreSnapshot(): void;
    static RegisterSnapshot(): void;
    static RegisterSceneUndo(name: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static undoRedoPerformed: (() => void);
    static willFlushUndoRecord: (() => void);
    static postprocessModifications: ((UnityEditor.UndoPropertyModification[]) => UnityEditor.UndoPropertyModification[]);
  }
}
declare namespace UnityEditor {
  class UndoPropertyModification {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    keepPrefabOverride: boolean;
    // fields
    previousValue: UnityEditor.PropertyModification;
    currentValue: UnityEditor.PropertyModification;
  }
}
declare namespace UnityEditor {
  class UndoSnapshot {
    // constructors
    constructor(objectsToUndo: any[]);
    // methods
    Restore(): void;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class UndoWindow {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class UnifiedInspectView {
    // constructors
    constructor(guiViewDebuggerWindow: UnityEditor.GUIViewDebuggerWindow);
    // methods
    UpdateInstructions(): void;
    ShowOverlay(): void;
    DrawInstructionList(): void;
    DrawSelectedInstructionDetails(): void;
    Unselect(): void;
    SelectRow(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListViewState: UnityEditor.ListViewState;
  }
}
declare namespace UnityEditor {
  class UnityStats {
    // constructors
    constructor();
    // methods
    static GetNetworkStats(i: number): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly batches: number;
    static readonly drawCalls: number;
    static readonly dynamicBatchedDrawCalls: number;
    static readonly staticBatchedDrawCalls: number;
    static readonly instancedBatchedDrawCalls: number;
    static readonly dynamicBatches: number;
    static readonly staticBatches: number;
    static readonly instancedBatches: number;
    static readonly setPassCalls: number;
    static readonly triangles: number;
    static readonly vertices: number;
    static readonly shadowCasters: number;
    static readonly renderTextureChanges: number;
    static readonly frameTime: number;
    static readonly renderTime: number;
    static readonly audioLevel: number;
    static readonly audioClippingAmount: number;
    static readonly audioDSPLoad: number;
    static readonly audioStreamLoad: number;
    static readonly renderTextureCount: number;
    static readonly renderTextureBytes: number;
    static readonly usedTextureMemorySize: number;
    static readonly usedTextureCount: number;
    static readonly screenRes: string;
    static readonly screenBytes: number;
    static readonly vboTotal: number;
    static readonly vboTotalBytes: number;
    static readonly vboUploads: number;
    static readonly vboUploadBytes: number;
    static readonly ibUploads: number;
    static readonly ibUploadBytes: number;
    static readonly visibleSkinnedMeshes: number;
    static readonly visibleAnimations: number;
    // fields
  }
}
declare namespace UnityEditor {
  class UnityType {
    // constructors
    constructor();
    // methods
    IsDerivedFrom(baseClass: UnityEditor.UnityType): boolean;
    static FindTypeByPersistentTypeID(id: number): UnityEditor.UnityType;
    static FindTypeByName(name: string): UnityEditor.UnityType;
    static FindTypeByNameCaseInsensitive(name: string): UnityEditor.UnityType;
    static GetTypes(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    readonly nativeNamespace: string;
    readonly persistentTypeID: number;
    readonly baseClass: UnityEditor.UnityType;
    readonly flags: UnityEditor.UnityTypeFlags;
    readonly isAbstract: boolean;
    readonly isSealed: boolean;
    readonly isEditorOnly: boolean;
    readonly isDeprecated: boolean;
    readonly qualifiedName: string;
    readonly hasNativeNamespace: boolean;
    // fields
  }
}
declare namespace UnityEditor.UnityType {
  class UnityTypeTransport {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    runtimeTypeIndex: number;
    descendantCount: number;
    baseClassIndex: number;
    className: string;
    classNamespace: string;
    persistentTypeID: number;
    flags: number;
  }
}
declare namespace UnityEditor {
  class UnityTypeFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Abstract: UnityEditor.UnityTypeFlags;
    static Sealed: UnityEditor.UnityTypeFlags;
    static EditorOnly: UnityEditor.UnityTypeFlags;
    static Deprecated: UnityEditor.UnityTypeFlags;
  }
}
declare namespace UnityEditor {
  class Unsupported {
    // constructors
    constructor();
    // methods
    static CaptureScreenshotImmediate(filePath: string, x: number, y: number, width: number, height: number): void;
    static GetSubmenusCommands(menuPath: string): string[];
    static GetTypeFromFullName(fullName: string): any;
    static GetSubmenus(menuPath: string): string[];
    static GetSubmenusIncludingSeparators(menuPath: string): string[];
    static PrepareObjectContextMenu(c: any, contextUserData: number): void;
    static IsDeveloperBuild(): boolean;
    static IsBleedingEdgeBuild(): boolean;
    static IsDestroyScriptableObject(target: any): boolean;
    static IsNativeCodeBuiltInReleaseMode(): boolean;
    static GetBaseUnityDeveloperFolder(): string;
    static StopPlayingImmediately(): void;
    static SceneTrackerFlushDirty(): void;
    static SetAllowCursorHide(allow: boolean): void;
    static SetAllowCursorLock(allow: boolean): void;
    static SetRenderSettingsUseFogNoDirty(fog: boolean): void;
    static SetQualitySettingsShadowDistanceTemporarily(distance: number): void;
    static DeleteGameObjectSelection(): void;
    static CopyGameObjectsToPasteboard(): void;
    static PasteGameObjectsFromPasteboard(): void;
    static GetSerializedAssetInterfaceSingleton(className: string): any;
    static DuplicateGameObjectsUsingPasteboard(): void;
    static CopyComponentToPasteboard(component: any): boolean;
    static PasteComponentFromPasteboard(go: any): boolean;
    static PasteComponentValuesFromPasteboard(component: any): boolean;
    static CopyStateMachineDataToPasteboard(stateMachineObject: any, controller: UnityEditor.Animations.AnimatorController, layerIndex: number): void;
    static CopyStateMachineDataToPasteboard(stateMachineObjects: any[], monoPositions: any[], controller: UnityEditor.Animations.AnimatorController, layerIndex: number): void;
    static PasteToStateMachineFromPasteboard(sm: UnityEditor.Animations.AnimatorStateMachine, controller: UnityEditor.Animations.AnimatorController, layerIndex: number, position: any): void;
    static HasStateMachineDataInPasteboard(): boolean;
    static SmartReset(obj: any): void;
    static ResolveSymlinks(path: string): string;
    static SetApplicationSettingCompressAssetsOnImport(value: boolean): void;
    static GetApplicationSettingCompressAssetsOnImport(): boolean;
    static GetLocalIdentifierInFile(instanceID: number): number;
    static IsHiddenFile(path: string): boolean;
    static ClearSkinCache(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class UnwrapParam {
    // constructors
    private constructor();
    // methods
    static SetDefaults(param: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    angleError: number;
    areaError: number;
    hardAngle: number;
    packMargin: number;
  }
}
declare namespace UnityEditor {
  class Unwrapping {
    // constructors
    constructor();
    // methods
    static GeneratePerTriangleUV(src: any): any[];
    static GeneratePerTriangleUV(src: any, settings: UnityEditor.UnwrapParam): any[];
    static GenerateSecondaryUVSet(src: any): void;
    static GenerateSecondaryUVSet(src: any, settings: UnityEditor.UnwrapParam): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class UsabilityAnalytics {
    // constructors
    constructor();
    // methods
    static Track(page: string): void;
    static Event(category: string, action: string, label: string, value: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class Utility2D {
    // constructors
    constructor();
    // methods
    static ScreenToLocal(transform: any, screenPosition: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Utils {
  class MonoInstallationFinder {
    // constructors
    constructor();
    // methods
    static GetFrameWorksFolder(): string;
    static GetProfileDirectory(target: UnityEditor.BuildTarget, profile: string): string;
    static GetProfileDirectory(target: UnityEditor.BuildTarget, profile: string, monoInstallation: string): string;
    static GetProfilesDirectory(monoInstallation: string): string;
    static GetEtcDirectory(monoInstallation: string): string;
    static GetMonoInstallation(): string;
    static GetMonoInstallation(monoName: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static MonoInstallation: string;
    static MonoBleedingEdgeInstallation: string;
  }
}
declare namespace UnityEditor.Utils {
  class Paths {
    // constructors
    private constructor();
    // methods
    static Combine(components: string[]): string;
    static Split(path: string): string[];
    static GetFileOrFolderName(path: string): string;
    static CreateTempDirectory(): string;
    static NormalizePath(path: string): string;
    static UnifyDirectorySeparator(path: string): string;
    static AreEqual(pathA: string, pathB: string, ignoreCase: boolean): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Utils {
  class PerformanceChecks {
    // constructors
    constructor();
    // methods
    static CheckMaterial(mat: any, buildTarget: UnityEditor.BuildTarget): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Utils {
  class ProcessOutputStreamReader {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Utils {
  class Program {
    // constructors
    constructor(si: any);
    // methods
    Start(): void;
    GetProcessStartInfo(): any;
    LogProcessStartInfo(): void;
    GetAllOutput(): string;
    Dispose(): void;
    Kill(): void;
    GetStandardInput(): any;
    GetStandardOutput(): string[];
    GetStandardOutputAsString(): string;
    GetErrorOutput(): string[];
    GetErrorOutputAsString(): string;
    WaitForExit(): void;
    WaitForExit(milliseconds: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly HasExited: boolean;
    readonly ExitCode: number;
    readonly Id: number;
    // fields
    _process: any;
  }
}
declare namespace UnityEditor.UVModuleUI {
  class AnimationType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static WholeSheet: UnityEditor.UVModuleUI.AnimationType;
    static SingleRow: UnityEditor.UVModuleUI.AnimationType;
  }
}
declare namespace UnityEditor {
  class UVModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    UpdateCullingSupportedString(text: any): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.UVModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    frameOverTime: any;
    startFrame: any;
    animation: any;
    tiles: any;
    tilesX: any;
    tilesY: any;
    row: any;
    frame: any;
    cycles: any;
    uvChannelMask: any;
    randomRow: any;
    flipU: any;
    flipV: any;
    types: string[];
  }
}
declare namespace UnityEditor {
  class VelocityModuleUI {
    // constructors
    constructor(owner: UnityEditor.ParticleSystemUI, o: UnityEditor.SerializedObject, displayName: string);
    // methods
    OnInspectorGUI(s: any): void;
    UpdateCullingSupportedString(text: any): void;
    Validate(): void;
    GetXAxisScalar(): number;
    OnSceneGUI(s: any, initial: UnityEditor.InitialModuleUI): void;
    GetParticleSystemCurveEditor(): ParticleSystemCurveEditor;
    AddToModuleCurves(curveProp: UnityEditor.SerializedProperty): void;
    GUIListOfFloatObjectToggleFields(label: any, objectProps: UnityEditor.SerializedProperty[], validator: ((any[], any, UnityEditor.SerializedProperty) => any), buttonTooltip: any, allowCreation: boolean, layoutOptions: any[]): number;
    GUIMinMaxGradient(label: any, minMaxGradient: UnityEditor.SerializedMinMaxGradient, layoutOptions: any[]): void;
    GUIMinMaxColor(label: any, minMaxColor: UnityEditor.SerializedMinMaxColor, layoutOptions: any[]): void;
    GUITripleMinMaxCurve(label: any, x: any, xCurve: UnityEditor.SerializedMinMaxCurve, y: any, yCurve: UnityEditor.SerializedMinMaxCurve, z: any, zCurve: UnityEditor.SerializedMinMaxCurve, randomizePerFrame: UnityEditor.SerializedProperty, layoutOptions: any[]): void;
    GetProperty0(name: string): UnityEditor.SerializedProperty;
    GetProperty(name: string): UnityEditor.SerializedProperty;
    GetProperty0(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetProperty(structName: string, propName: string): UnityEditor.SerializedProperty;
    GetUniqueModuleName(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    visibleUI: boolean;
    foldout: boolean;
    enabled: boolean;
    readonly displayName: string;
    readonly toolTip: string;
    // fields
    m_ParticleSystemUI: UnityEditor.ParticleSystemUI;
    m_ModuleCurves: any;
  }
}
declare namespace UnityEditor.VelocityModuleUI {
  class Texts {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    x: any;
    y: any;
    z: any;
    space: any;
    spaces: string[];
  }
}
declare namespace UnityEditor.VersionControl {
  class Asset {
    // constructors
    constructor(clientPath: string);
    // methods
    Dispose(): void;
    IsChildOf(other: UnityEditor.VersionControl.Asset): boolean;
    IsState(state: UnityEditor.VersionControl.Asset.States): boolean;
    IsOneOfStates(states: UnityEditor.VersionControl.Asset.States[]): boolean;
    Edit(): void;
    Load(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly state: UnityEditor.VersionControl.Asset.States;
    readonly path: string;
    readonly isFolder: boolean;
    readonly readOnly: boolean;
    readonly isMeta: boolean;
    readonly locked: boolean;
    readonly name: string;
    readonly fullName: string;
    readonly isInCurrentProject: boolean;
    readonly prettyPath: string;
    // fields
  }
}
declare namespace UnityEditor.VersionControl.Asset {
  class States {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.VersionControl.Asset.States;
    static Local: UnityEditor.VersionControl.Asset.States;
    static Synced: UnityEditor.VersionControl.Asset.States;
    static OutOfSync: UnityEditor.VersionControl.Asset.States;
    static Missing: UnityEditor.VersionControl.Asset.States;
    static CheckedOutLocal: UnityEditor.VersionControl.Asset.States;
    static CheckedOutRemote: UnityEditor.VersionControl.Asset.States;
    static DeletedLocal: UnityEditor.VersionControl.Asset.States;
    static DeletedRemote: UnityEditor.VersionControl.Asset.States;
    static AddedLocal: UnityEditor.VersionControl.Asset.States;
    static AddedRemote: UnityEditor.VersionControl.Asset.States;
    static Conflicted: UnityEditor.VersionControl.Asset.States;
    static LockedLocal: UnityEditor.VersionControl.Asset.States;
    static LockedRemote: UnityEditor.VersionControl.Asset.States;
    static Updating: UnityEditor.VersionControl.Asset.States;
    static ReadOnly: UnityEditor.VersionControl.Asset.States;
    static MetaFile: UnityEditor.VersionControl.Asset.States;
  }
}
declare namespace UnityEditor.VersionControl {
  class AssetList {
    // constructors
    constructor();
    constructor(src: UnityEditor.VersionControl.AssetList);
    // methods
    Filter(includeFolder: boolean, states: UnityEditor.VersionControl.Asset.States[]): UnityEditor.VersionControl.AssetList;
    FilterCount(includeFolder: boolean, states: UnityEditor.VersionControl.Asset.States[]): number;
    FilterChildren(): UnityEditor.VersionControl.AssetList;
    Add(item: UnityEditor.VersionControl.Asset): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(item: UnityEditor.VersionControl.Asset): number;
    BinarySearch(item: UnityEditor.VersionControl.Asset, comparer: any): number;
    BinarySearch(index: number, count: number, item: UnityEditor.VersionControl.Asset, comparer: any): number;
    Clear(): void;
    Contains(item: UnityEditor.VersionControl.Asset): boolean;
    CopyTo(array: UnityEditor.VersionControl.Asset[]): void;
    CopyTo(array: UnityEditor.VersionControl.Asset[], arrayIndex: number): void;
    CopyTo(index: number, array: UnityEditor.VersionControl.Asset[], arrayIndex: number, count: number): void;
    Exists(match: ((UnityEditor.VersionControl.Asset) => boolean)): boolean;
    Find(match: ((UnityEditor.VersionControl.Asset) => boolean)): UnityEditor.VersionControl.Asset;
    FindAll(match: ((UnityEditor.VersionControl.Asset) => boolean)): any;
    FindIndex(match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    FindIndex(startIndex: number, match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    FindIndex(startIndex: number, count: number, match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    FindLast(match: ((UnityEditor.VersionControl.Asset) => boolean)): UnityEditor.VersionControl.Asset;
    FindLastIndex(match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    FindLastIndex(startIndex: number, count: number, match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    ForEach(action: ((UnityEditor.VersionControl.Asset) => void)): void;
    GetEnumerator(): any;
    GetRange(index: number, count: number): any;
    IndexOf(item: UnityEditor.VersionControl.Asset): number;
    IndexOf(item: UnityEditor.VersionControl.Asset, index: number): number;
    IndexOf(item: UnityEditor.VersionControl.Asset, index: number, count: number): number;
    Insert(index: number, item: UnityEditor.VersionControl.Asset): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEditor.VersionControl.Asset): number;
    LastIndexOf(item: UnityEditor.VersionControl.Asset, index: number): number;
    LastIndexOf(item: UnityEditor.VersionControl.Asset, index: number, count: number): number;
    Remove(item: UnityEditor.VersionControl.Asset): boolean;
    RemoveAll(match: ((UnityEditor.VersionControl.Asset) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(comparer: any): void;
    Sort(comparison: ((UnityEditor.VersionControl.Asset, UnityEditor.VersionControl.Asset) => number)): void;
    Sort(index: number, count: number, comparer: any): void;
    ToArray(): UnityEditor.VersionControl.Asset[];
    TrimExcess(): void;
    TrueForAll(match: ((UnityEditor.VersionControl.Asset) => boolean)): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEditor.VersionControl.Asset;
    set_Item(index: number, value: UnityEditor.VersionControl.Asset): void;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class ChangeSet {
    // constructors
    constructor();
    constructor(description: string);
    constructor(description: string, revision: string);
    constructor(other: UnityEditor.VersionControl.ChangeSet);
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly description: string;
    readonly id: string;
    // fields
    static defaultID: string;
  }
}
declare namespace UnityEditor.VersionControl {
  class ChangeSets {
    // constructors
    constructor();
    // methods
    Add(item: UnityEditor.VersionControl.ChangeSet): void;
    AddRange(collection: any): void;
    AsReadOnly(): any;
    BinarySearch(item: UnityEditor.VersionControl.ChangeSet): number;
    BinarySearch(item: UnityEditor.VersionControl.ChangeSet, comparer: any): number;
    BinarySearch(index: number, count: number, item: UnityEditor.VersionControl.ChangeSet, comparer: any): number;
    Clear(): void;
    Contains(item: UnityEditor.VersionControl.ChangeSet): boolean;
    CopyTo(array: UnityEditor.VersionControl.ChangeSet[]): void;
    CopyTo(array: UnityEditor.VersionControl.ChangeSet[], arrayIndex: number): void;
    CopyTo(index: number, array: UnityEditor.VersionControl.ChangeSet[], arrayIndex: number, count: number): void;
    Exists(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): boolean;
    Find(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): UnityEditor.VersionControl.ChangeSet;
    FindAll(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): any;
    FindIndex(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindIndex(startIndex: number, match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindIndex(startIndex: number, count: number, match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindLast(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): UnityEditor.VersionControl.ChangeSet;
    FindLastIndex(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindLastIndex(startIndex: number, match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    FindLastIndex(startIndex: number, count: number, match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    ForEach(action: ((UnityEditor.VersionControl.ChangeSet) => void)): void;
    GetEnumerator(): any;
    GetRange(index: number, count: number): any;
    IndexOf(item: UnityEditor.VersionControl.ChangeSet): number;
    IndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number): number;
    IndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number, count: number): number;
    Insert(index: number, item: UnityEditor.VersionControl.ChangeSet): void;
    InsertRange(index: number, collection: any): void;
    LastIndexOf(item: UnityEditor.VersionControl.ChangeSet): number;
    LastIndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number): number;
    LastIndexOf(item: UnityEditor.VersionControl.ChangeSet, index: number, count: number): number;
    Remove(item: UnityEditor.VersionControl.ChangeSet): boolean;
    RemoveAll(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): number;
    RemoveAt(index: number): void;
    RemoveRange(index: number, count: number): void;
    Reverse(): void;
    Reverse(index: number, count: number): void;
    Sort(): void;
    Sort(comparer: any): void;
    Sort(comparison: ((UnityEditor.VersionControl.ChangeSet, UnityEditor.VersionControl.ChangeSet) => number)): void;
    Sort(index: number, count: number, comparer: any): void;
    ToArray(): UnityEditor.VersionControl.ChangeSet[];
    TrimExcess(): void;
    TrueForAll(match: ((UnityEditor.VersionControl.ChangeSet) => boolean)): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    Capacity: number;
    readonly Count: number;
    get_Item(index: number): UnityEditor.VersionControl.ChangeSet;
    set_Item(index: number, value: UnityEditor.VersionControl.ChangeSet): void;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class CheckoutMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Asset: UnityEditor.VersionControl.CheckoutMode;
    static Meta: UnityEditor.VersionControl.CheckoutMode;
    static Both: UnityEditor.VersionControl.CheckoutMode;
    static Exact: UnityEditor.VersionControl.CheckoutMode;
  }
}
declare namespace UnityEditor.VersionControl {
  class CommandContext {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Global: UnityEditor.VersionControl.CommandContext;
  }
}
declare namespace UnityEditor.VersionControl {
  class CompletionAction {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static UpdatePendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnChangeContentsPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnIncomingPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnChangeSetsPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnGotLatestPendingWindow: UnityEditor.VersionControl.CompletionAction;
    static OnSubmittedChangeWindow: UnityEditor.VersionControl.CompletionAction;
    static OnAddedChangeWindow: UnityEditor.VersionControl.CompletionAction;
    static OnCheckoutCompleted: UnityEditor.VersionControl.CompletionAction;
  }
}
declare namespace UnityEditor.VersionControl {
  class ConfigField {
    // constructors
    private constructor();
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    readonly label: string;
    readonly description: string;
    readonly isRequired: boolean;
    readonly isPassword: boolean;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class CustomCommand {
    // constructors
    private constructor();
    // methods
    StartTask(): UnityEditor.VersionControl.Task;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly name: string;
    readonly label: string;
    readonly context: UnityEditor.VersionControl.CommandContext;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class FileMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.VersionControl.FileMode;
    static Binary: UnityEditor.VersionControl.FileMode;
    static Text: UnityEditor.VersionControl.FileMode;
  }
}
declare namespace UnityEditor.VersionControl {
  class MergeMethod {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static MergeNone: UnityEditor.VersionControl.MergeMethod;
    static MergeAll: UnityEditor.VersionControl.MergeMethod;
    static MergeNonConflicting: UnityEditor.VersionControl.MergeMethod;
  }
}
declare namespace UnityEditor.VersionControl {
  class Message {
    // constructors
    private constructor();
    // methods
    Dispose(): void;
    Show(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly severity: UnityEditor.VersionControl.Message.Severity;
    readonly message: string;
    // fields
  }
}
declare namespace UnityEditor.VersionControl.Message {
  class Severity {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Data: UnityEditor.VersionControl.Message.Severity;
    static Verbose: UnityEditor.VersionControl.Message.Severity;
    static Info: UnityEditor.VersionControl.Message.Severity;
    static Warning: UnityEditor.VersionControl.Message.Severity;
    static Error: UnityEditor.VersionControl.Message.Severity;
  }
}
declare namespace UnityEditor.VersionControl {
  class OnlineState {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Updating: UnityEditor.VersionControl.OnlineState;
    static Online: UnityEditor.VersionControl.OnlineState;
    static Offline: UnityEditor.VersionControl.OnlineState;
  }
}
declare namespace UnityEditor.VersionControl {
  class Plugin {
    // constructors
    private constructor();
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly availablePlugins: UnityEditor.VersionControl.Plugin[];
    readonly name: string;
    readonly configFields: UnityEditor.VersionControl.ConfigField[];
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class Provider {
    // constructors
    constructor();
    // methods
    static GetActivePlugin(): UnityEditor.VersionControl.Plugin;
    static GetActiveConfigFields(): UnityEditor.VersionControl.ConfigField[];
    static ChangeSets(): UnityEditor.VersionControl.Task;
    static Incoming(): UnityEditor.VersionControl.Task;
    static IsOpenForEdit(asset: UnityEditor.VersionControl.Asset): boolean;
    static UpdateSettings(): UnityEditor.VersionControl.Task;
    static GetAssetByPath(unityPath: string): UnityEditor.VersionControl.Asset;
    static GetAssetByGUID(guid: string): UnityEditor.VersionControl.Asset;
    static ClearCache(): void;
    static Status(assets: UnityEditor.VersionControl.AssetList): UnityEditor.VersionControl.Task;
    static Status(asset: UnityEditor.VersionControl.Asset): UnityEditor.VersionControl.Task;
    static Status(assets: UnityEditor.VersionControl.AssetList, recursively: boolean): UnityEditor.VersionControl.Task;
    static Status(asset: UnityEditor.VersionControl.Asset, recursively: boolean): UnityEditor.VersionControl.Task;
    static Status(assets: string[]): UnityEditor.VersionControl.Task;
    static Status(assets: string[], recursively: boolean): UnityEditor.VersionControl.Task;
    static Status(asset: string): UnityEditor.VersionControl.Task;
    static Status(asset: string, recursively: boolean): UnityEditor.VersionControl.Task;
    static Move(from: string, to: string): UnityEditor.VersionControl.Task;
    static CheckoutIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static CheckoutIsValid(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.CheckoutMode): boolean;
    static Checkout(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(assets: string[], mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(assets: any[], mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static CheckoutIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static CheckoutIsValid(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.CheckoutMode): boolean;
    static Checkout(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(asset: string, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Checkout(asset: any, mode: UnityEditor.VersionControl.CheckoutMode): UnityEditor.VersionControl.Task;
    static Delete(assetProjectPath: string): UnityEditor.VersionControl.Task;
    static Delete(assets: UnityEditor.VersionControl.AssetList): UnityEditor.VersionControl.Task;
    static Delete(asset: UnityEditor.VersionControl.Asset): UnityEditor.VersionControl.Task;
    static AddIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static Add(assets: UnityEditor.VersionControl.AssetList, recursive: boolean): UnityEditor.VersionControl.Task;
    static Add(asset: UnityEditor.VersionControl.Asset, recursive: boolean): UnityEditor.VersionControl.Task;
    static DeleteChangeSetsIsValid(changesets: UnityEditor.VersionControl.ChangeSets): boolean;
    static DeleteChangeSets(changesets: UnityEditor.VersionControl.ChangeSets): UnityEditor.VersionControl.Task;
    static SubmitIsValid(changeset: UnityEditor.VersionControl.ChangeSet, assets: UnityEditor.VersionControl.AssetList): boolean;
    static Submit(changeset: UnityEditor.VersionControl.ChangeSet, list: UnityEditor.VersionControl.AssetList, description: string, saveOnly: boolean): UnityEditor.VersionControl.Task;
    static DiffIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static DiffHead(assets: UnityEditor.VersionControl.AssetList, includingMetaFiles: boolean): UnityEditor.VersionControl.Task;
    static ResolveIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static Resolve(assets: UnityEditor.VersionControl.AssetList, resolveMethod: UnityEditor.VersionControl.ResolveMethod): UnityEditor.VersionControl.Task;
    static Merge(assets: UnityEditor.VersionControl.AssetList, method: UnityEditor.VersionControl.MergeMethod): UnityEditor.VersionControl.Task;
    static LockIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static LockIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static UnlockIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static UnlockIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static Lock(assets: UnityEditor.VersionControl.AssetList, locked: boolean): UnityEditor.VersionControl.Task;
    static Lock(asset: UnityEditor.VersionControl.Asset, locked: boolean): UnityEditor.VersionControl.Task;
    static RevertIsValid(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.RevertMode): boolean;
    static Revert(assets: UnityEditor.VersionControl.AssetList, mode: UnityEditor.VersionControl.RevertMode): UnityEditor.VersionControl.Task;
    static RevertIsValid(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.RevertMode): boolean;
    static Revert(asset: UnityEditor.VersionControl.Asset, mode: UnityEditor.VersionControl.RevertMode): UnityEditor.VersionControl.Task;
    static GetLatestIsValid(assets: UnityEditor.VersionControl.AssetList): boolean;
    static GetLatestIsValid(asset: UnityEditor.VersionControl.Asset): boolean;
    static GetLatest(assets: UnityEditor.VersionControl.AssetList): UnityEditor.VersionControl.Task;
    static GetLatest(asset: UnityEditor.VersionControl.Asset): UnityEditor.VersionControl.Task;
    static ChangeSetDescription(changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSetStatus(changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSetStatus(changesetID: string): UnityEditor.VersionControl.Task;
    static IncomingChangeSetAssets(changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static IncomingChangeSetAssets(changesetID: string): UnityEditor.VersionControl.Task;
    static ChangeSetMove(assets: UnityEditor.VersionControl.AssetList, changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSetMove(asset: UnityEditor.VersionControl.Asset, changeset: UnityEditor.VersionControl.ChangeSet): UnityEditor.VersionControl.Task;
    static ChangeSetMove(assets: UnityEditor.VersionControl.AssetList, changesetID: string): UnityEditor.VersionControl.Task;
    static ChangeSetMove(asset: UnityEditor.VersionControl.Asset, changesetID: string): UnityEditor.VersionControl.Task;
    static GetAssetListFromSelection(): UnityEditor.VersionControl.AssetList;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly enabled: boolean;
    static readonly isActive: boolean;
    static readonly requiresNetwork: boolean;
    static readonly hasChangelistSupport: boolean;
    static readonly hasCheckoutSupport: boolean;
    static readonly isVersioningFolders: boolean;
    static readonly onlineState: UnityEditor.VersionControl.OnlineState;
    static readonly offlineReason: string;
    static readonly activeTask: UnityEditor.VersionControl.Task;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class ResolveMethod {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static UseMine: UnityEditor.VersionControl.ResolveMethod;
    static UseTheirs: UnityEditor.VersionControl.ResolveMethod;
    static UseMerged: UnityEditor.VersionControl.ResolveMethod;
  }
}
declare namespace UnityEditor.VersionControl {
  class RevertMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditor.VersionControl.RevertMode;
    static Unchanged: UnityEditor.VersionControl.RevertMode;
    static KeepModifications: UnityEditor.VersionControl.RevertMode;
  }
}
declare namespace UnityEditor.VersionControl {
  class SubmitResult {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static OK: UnityEditor.VersionControl.SubmitResult;
    static Error: UnityEditor.VersionControl.SubmitResult;
    static ConflictingFiles: UnityEditor.VersionControl.SubmitResult;
    static UnaddedFiles: UnityEditor.VersionControl.SubmitResult;
  }
}
declare namespace UnityEditor.VersionControl {
  class Task {
    // constructors
    private constructor();
    // methods
    Wait(): void;
    SetCompletionAction(action: UnityEditor.VersionControl.CompletionAction): void;
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    userIdentifier: number;
    readonly text: string;
    readonly description: string;
    readonly success: boolean;
    readonly secondsSpent: number;
    readonly progressPct: number;
    readonly progressMessage: string;
    readonly resultCode: number;
    readonly messages: UnityEditor.VersionControl.Message[];
    readonly assetList: UnityEditor.VersionControl.AssetList;
    readonly changeSets: UnityEditor.VersionControl.ChangeSets;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class VCSProviderIdentifier {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static UnsetIdentifier: UnityEditor.VersionControl.VCSProviderIdentifier;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowChange {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    static Open(list: UnityEditor.VersionControl.AssetList, submit: boolean): void;
    static Open(change: UnityEditor.VersionControl.ChangeSet, assets: UnityEditor.VersionControl.AssetList, submit: boolean): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowCheckoutFailure {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    static OpenIfCheckoutFailed(assets: UnityEditor.VersionControl.AssetList): void;
    OnGUI(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowPending {
    // constructors
    constructor();
    // methods
    OnSelectionChange(): void;
    static ExpandLatestChangeSet(): void;
    static OnStatusUpdated(): void;
    static UpdateAllWindows(): void;
    static CloseAllWindows(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.VersionControl.WindowPending {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    box: any;
    bottomBarBg: any;
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowResolve {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnDisable(): void;
    static Open(change: UnityEditor.VersionControl.ChangeSet): void;
    static Open(assets: UnityEditor.VersionControl.AssetList): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.VersionControl {
  class WindowRevert {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    static Open(change: UnityEditor.VersionControl.ChangeSet): void;
    static Open(assets: UnityEditor.VersionControl.AssetList): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class VertexChannelCompressionFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kPosition: UnityEditor.VertexChannelCompressionFlags;
    static kNormal: UnityEditor.VertexChannelCompressionFlags;
    static kColor: UnityEditor.VertexChannelCompressionFlags;
    static kUV0: UnityEditor.VertexChannelCompressionFlags;
    static kUV1: UnityEditor.VertexChannelCompressionFlags;
    static kUV2: UnityEditor.VertexChannelCompressionFlags;
    static kUV3: UnityEditor.VertexChannelCompressionFlags;
    static kTangent: UnityEditor.VertexChannelCompressionFlags;
  }
}
declare namespace UnityEditor {
  class VertexSnapping {
    // constructors
    constructor();
    // methods
    static HandleKeyAndMouseMove(id: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class VerticalGrid {
    // constructors
    constructor();
    // methods
    InitNumRowsAndColumns(itemCount: number, maxNumRows: number): void;
    CalcColumns(): number;
    CalcRows(itemCount: number): number;
    CalcRect(itemIdx: number, yOffset: number): any;
    GetMaxVisibleItems(height: number): number;
    IsVisibleInScrollView(scrollViewHeight: number, scrollPos: number, gridStartY: number, maxIndex: number, startIndex: any, endIndex: any): boolean;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly columns: number;
    readonly rows: number;
    readonly height: number;
    readonly horizontalSpacing: number;
    fixedWidth: number;
    itemSize: any;
    verticalSpacing: number;
    minHorizontalSpacing: number;
    topMargin: number;
    bottomMargin: number;
    rightMargin: number;
    leftMargin: number;
    fixedHorizontalSpacing: number;
    useFixedHorizontalSpacing: boolean;
    // fields
  }
}
declare namespace UnityEditor {
  class VerticalGridWithSplitter {
    // constructors
    constructor();
    // methods
    InitNumRowsAndColumns(itemCount: number, maxNumRows: number): void;
    CalcRect(itemIdx: number, yOffset: number): any;
    GetMaxVisibleItems(height: number): number;
    ResetSplit(): void;
    OpenSplit(splitAfterRowIndex: number, numItems: number): void;
    CalcSplitRect(splitIndex: number, yOffset: number): any;
    CloseSplit(): void;
    UpdateSplitAnimationOnGUI(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly columns: number;
    readonly rows: number;
    readonly height: number;
    readonly horizontalSpacing: number;
    fixedWidth: number;
    itemSize: any;
    verticalSpacing: number;
    minHorizontalSpacing: number;
    topMargin: number;
    bottomMargin: number;
    rightMargin: number;
    leftMargin: number;
    // fields
  }
}
declare namespace UnityEditor {
  class VerticalLayout {
    // constructors
    private constructor();
    // methods
    static DoLayout(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class View {
    // constructors
    constructor();
    // methods
    IndexOfChild(child: UnityEditor.View): number;
    OnDestroy(): void;
    AddChild(child: UnityEditor.View): void;
    AddChild(child: UnityEditor.View, idx: number): void;
    RemoveChild(child: UnityEditor.View): void;
    RemoveChild(idx: number): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly minSize: any;
    readonly maxSize: any;
    readonly allChildren: UnityEditor.View[];
    position: any;
    readonly windowPosition: any;
    readonly screenPosition: any;
    readonly window: UnityEditor.ContainerWindow;
    readonly parent: UnityEditor.View;
    readonly children: UnityEditor.View[];
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class ViewTool {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.ViewTool;
    static Orbit: UnityEditor.ViewTool;
    static Pan: UnityEditor.ViewTool;
    static Zoom: UnityEditor.ViewTool;
    static FPS: UnityEditor.ViewTool;
  }
}
declare namespace UnityEditor {
  class VisualizationBlendTree {
    // constructors
    constructor();
    // methods
    Init(blendTree: UnityEditor.Animations.BlendTree, animator: any): void;
    Reset(): void;
    Destroy(): void;
    Update(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly animator: any;
    readonly controllerDirty: boolean;
    // fields
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class DefaultSolutionSynchronizationSettings {
    // constructors
    constructor();
    // methods
    GetProjectHeaderTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    GetProjectFooterTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly VisualStudioVersion: number;
    readonly SolutionTemplate: string;
    readonly SolutionProjectEntryTemplate: string;
    readonly SolutionProjectConfigurationTemplate: string;
    readonly EditorAssemblyPath: string;
    readonly EngineAssemblyPath: string;
    readonly MonoLibFolder: string;
    readonly Defines: string[];
    // fields
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class ISolutionSynchronizationSettings {
    // constructors
    private constructor();
    // methods
    GetProjectHeaderTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    GetProjectFooterTemplate(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    // properties
    readonly VisualStudioVersion: number;
    readonly SolutionTemplate: string;
    readonly SolutionProjectEntryTemplate: string;
    readonly SolutionProjectConfigurationTemplate: string;
    readonly EditorAssemblyPath: string;
    readonly EngineAssemblyPath: string;
    readonly MonoLibFolder: string;
    readonly Defines: string[];
    // fields
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class ScriptingLanguage {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    static Boo: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    static CSharp: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
    static UnityScript: UnityEditor.VisualStudioIntegration.ScriptingLanguage;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class SolutionGuidGenerator {
    // constructors
    private constructor();
    // methods
    static GuidForProject(projectName: string): string;
    static GuidForSolution(projectName: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class SolutionSynchronizer {
    // constructors
    constructor(projectDirectory: string, settings: UnityEditor.VisualStudioIntegration.ISolutionSynchronizationSettings);
    constructor(projectDirectory: string);
    // methods
    ShouldFileBePartOfSolution(file: string): boolean;
    ProjectExists(island: UnityEditor.Scripting.MonoIsland): boolean;
    SolutionExists(): boolean;
    SyncIfNeeded(affectedFiles: any): boolean;
    Sync(): void;
    ProjectFile(island: UnityEditor.Scripting.MonoIsland): string;
    static IsManagedAssembly(file: string): boolean;
    static GetProjectExtension(language: UnityEditor.VisualStudioIntegration.ScriptingLanguage): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static DefaultSynchronizationSettings: UnityEditor.VisualStudioIntegration.ISolutionSynchronizationSettings;
    static MSBuildNamespaceUri: string;
    static scriptReferenceExpression: any;
  }
}
declare namespace UnityEditor.VisualStudioIntegration.SolutionSynchronizer {
  class Mode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static UnityScriptAsUnityProj: UnityEditor.VisualStudioIntegration.SolutionSynchronizer.Mode;
    static UnityScriptAsPrecompiledAssembly: UnityEditor.VisualStudioIntegration.SolutionSynchronizer.Mode;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class UnityVSSupport {
    // constructors
    constructor();
    // methods
    static Initialize(): void;
    static Initialize(editorPath: string): void;
    static ShouldUnityVSBeActive(): boolean;
    static IsUnityVSEnabled(): boolean;
    static ScriptEditorChanged(editorPath: string): void;
    static GetAboutWindowLabel(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static s_UnityVSBridgeToLoad: string;
  }
}
declare namespace UnityEditor.VisualStudioIntegration {
  class VSCodeTemplates {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static SettingsJson: string;
  }
}
declare namespace UnityEditor {
  class VisualStudioVersion {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Invalid: UnityEditor.VisualStudioVersion;
    static VisualStudio2008: UnityEditor.VisualStudioVersion;
    static VisualStudio2010: UnityEditor.VisualStudioVersion;
    static VisualStudio2012: UnityEditor.VisualStudioVersion;
    static VisualStudio2013: UnityEditor.VisualStudioVersion;
    static VisualStudio2015: UnityEditor.VisualStudioVersion;
    static VisualStudio15: UnityEditor.VisualStudioVersion;
  }
}
declare namespace UnityEditor.Web {
  class AdsAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    IsInitializedOnStartup(): boolean;
    SetInitializedOnStartup(enabled: boolean): void;
    IsIOSEnabled(): boolean;
    SetIOSEnabled(enabled: boolean): void;
    IsAndroidEnabled(): boolean;
    SetAndroidEnabled(enabled: boolean): void;
    GetIOSGameId(): string;
    SetIOSGameId(value: string): void;
    GetAndroidGameId(): string;
    SetAndroidGameId(value: string): void;
    IsTestModeEnabled(): boolean;
    SetTestModeEnabled(enabled: boolean): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class AnalyticsAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    IsTestModeEnabled(): boolean;
    SetTestModeEnabled(enabled: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class BuildAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class ClipboardAccess {
    // constructors
    private constructor();
    // methods
    CopyToClipboard(value: string): void;
    PasteFromClipboard(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class CloudServiceAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class CollabAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    EnableService(enabled: boolean): void;
    IsCollabUIAccessible(): boolean;
    IsServiceEnabled(): boolean;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly Instance: UnityEditor.Web.CollabAccess;
    // fields
  }
}
declare namespace UnityEditor.Web {
  class CrashReportingAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    GetCaptureEditorExceptions(): boolean;
    SetCaptureEditorExceptions(captureEditorExceptions: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class EditorProjectAccess {
    // constructors
    constructor();
    // methods
    GetProjectEditorVersion(): string;
    GetRESTServiceURI(): string;
    OpenLink(link: string): void;
    IsOnline(): boolean;
    IsLoggedIn(): boolean;
    GetEnvironment(): string;
    GetUserName(): string;
    GetUserDisplayName(): string;
    GetUserPrimaryOrganizationId(): string;
    GetUserAccessToken(): string;
    GetProjectName(): string;
    GetProjectGUID(): string;
    GetProjectPath(): string;
    GetProjectIcon(): string;
    GetOrganizationID(): string;
    GetBuildTarget(): string;
    IsProjectBound(): boolean;
    EnableCloud(enable: boolean): void;
    EnterPlayMode(): void;
    IsPlayMode(): boolean;
    SaveCurrentModifiedScenesIfUserWantsTo(): boolean;
    GetEditorSkinIndex(): number;
    GoToHistory(): void;
    ShowToolbarDropdown(): void;
    CloseToolbarWindow(): void;
    CloseToolbarWindowImmediately(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class ErrorHubAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly instance: UnityEditor.Web.ErrorHubAccess;
    errorMessage: string;
    // fields
    static kServiceName: string;
  }
}
declare namespace UnityEditor.Web {
  class HubAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    GetServices(): UnityEditor.Connect.UnityConnectServiceCollection.ServiceInfo[];
    ShowService(name: string): void;
    EnableCloudService(name: string, enabled: boolean): void;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly instance: UnityEditor.Web.HubAccess;
    // fields
    static kServiceName: string;
  }
}
declare namespace UnityEditor.Web {
  class JspmError {
    // constructors
    constructor(messageID: number, status: number, errorClass: string, message: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    errorClass: string;
    message: string;
    version: number;
    messageID: number;
    status: number;
  }
}
declare namespace UnityEditor.Web {
  class JspmMethodInfo {
    // constructors
    constructor(name: string, parameters: string[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    name: string;
    parameters: string[];
  }
}
declare namespace UnityEditor.Web {
  class JspmPropertyInfo {
    // constructors
    constructor(name: string, value: any);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    name: string;
    value: any;
  }
}
declare namespace UnityEditor.Web {
  class JspmResult {
    // constructors
    constructor();
    constructor(messageID: number, status: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    version: number;
    messageID: number;
    status: number;
  }
}
declare namespace UnityEditor.Web {
  class JspmStubInfo {
    // constructors
    constructor(properties: UnityEditor.Web.JspmPropertyInfo[], methods: UnityEditor.Web.JspmMethodInfo[], events: string[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    properties: UnityEditor.Web.JspmPropertyInfo[];
    methods: UnityEditor.Web.JspmMethodInfo[];
    events: string[];
  }
}
declare namespace UnityEditor.Web {
  class JspmStubInfoSuccess {
    // constructors
    constructor(messageID: number, reference: string, properties: UnityEditor.Web.JspmPropertyInfo[], methods: UnityEditor.Web.JspmMethodInfo[], events: string[]);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    reference: string;
    result: any;
    type: string;
    version: number;
    messageID: number;
    status: number;
  }
}
declare namespace UnityEditor.Web {
  class JspmSuccess {
    // constructors
    constructor(messageID: number, result: any, type: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    result: any;
    type: string;
    version: number;
    messageID: number;
    status: number;
  }
}
declare namespace UnityEditor.Web {
  class JSProxyMgr {
    // constructors
    private constructor();
    // methods
    static GetInstance(): UnityEditor.Web.JSProxyMgr;
    static DoTasks(): void;
    AddGlobalObject(referenceName: string, obj: any): void;
    RemoveGlobalObject(referenceName: string): void;
    DoMessage(jsonRequest: string, callback: ((any) => void), webView: UnityEditor.WebView): boolean;
    static FormatError(messageID: number, status: number, errorClass: string, message: string): UnityEditor.Web.JspmError;
    static FormatSuccess(messageID: number, result: any): UnityEditor.Web.JspmSuccess;
    GetDestinationObject(reference: string): any;
    ParseParams(method: any, data: any): any[];
    Stringify(target: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kProtocolVersion: number;
    static kInvalidMessageID: number;
    static kErrNone: number;
    static kErrInvalidMessageFormat: number;
    static kErrUnknownObject: number;
    static kErrUnknownMethod: number;
    static kErrInvocationFailed: number;
    static kErrUnsupportedProtocol: number;
    static kErrUnknownEvent: number;
    static kTypeInvoke: string;
    static kTypeGetStubInfo: string;
    static kTypeOnEvent: string;
  }
}
declare namespace UnityEditor.Web {
  class PreviewGenerator {
    // constructors
    constructor();
    // methods
    static GetInstance(): UnityEditor.Web.PreviewGenerator;
    GeneratePreview(assetPath: string, width: number, height: number): number[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class PurchasingAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    InstallUnityPackage(): void;
    GetInstalledETag(): string;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class TestObject {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    StringProperty: string;
    NumberProperty: number;
    BoolProperty: boolean;
    // fields
  }
}
declare namespace UnityEditor.Web {
  class UnetAccess {
    // constructors
    constructor();
    // methods
    GetServiceName(): string;
    GetServiceDisplayName(): string;
    SetMultiplayerId(id: number): void;
    IsServiceEnabled(): boolean;
    EnableService(enabled: boolean): void;
    OnProjectUnbound(): void;
    ShowServicePage(): void;
    GoBackToHub(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor.Web {
  class WebScriptObject {
    // constructors
    private constructor();
    // methods
    ProcessMessage(jsonRequest: string, callback: UnityEditor.WebViewV8CallbackCSharp): boolean;
    processMessage(jsonRequest: string, callback: UnityEditor.WebViewV8CallbackCSharp): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    webView: UnityEditor.WebView;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Web {
  class WebViewEditorStaticWindow {
    // constructors
    private constructor();
    // methods
    OnDestroy(): void;
    OnInitScripting(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Reload(): void;
    About(): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    Init(): void;
    OnGUI(): void;
    OnBatchMode(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnEnable(): void;
    OnBecameInvisible(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    initialOpenUrl: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Web {
  class WebViewEditorWindow {
    // constructors
    private constructor();
    // methods
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Reload(): void;
    About(): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    Init(): void;
    OnGUI(): void;
    OnBatchMode(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnEnable(): void;
    OnBecameInvisible(): void;
    OnDestroy(): void;
    OnInitScripting(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    initialOpenUrl: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Web {
  class WebViewEditorWindowTabs {
    // constructors
    private constructor();
    // methods
    Init(): void;
    OnDestroy(): void;
    OnBeforeSerialize(): void;
    OnAfterDeserialize(): void;
    GetWebViewFromURL(url: string): UnityEditor.WebView;
    OnInitScripting(): void;
    AddItemsToMenu(menu: UnityEditor.GenericMenu): void;
    Reload(): void;
    About(): void;
    OnLoadError(url: string): void;
    ToggleMaximize(): void;
    OnGUI(): void;
    OnBatchMode(): void;
    Refresh(): void;
    OnFocus(): void;
    OnLostFocus(): void;
    OnEnable(): void;
    OnBecameInvisible(): void;
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    initialOpenUrl: string;
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.Web {
  class WebViewTestFunctions {
    // constructors
    constructor();
    // methods
    ReturnInt(): number;
    ReturnString(): string;
    ReturnBool(): boolean;
    ReturnNumberArray(): number[];
    ReturnStringArray(): string[];
    ReturnBoolArray(): boolean[];
    ReturnObject(): UnityEditor.Web.TestObject;
    AcceptInt(passedInt: number): void;
    AcceptString(passedString: string): void;
    AcceptBool(passedBool: boolean): void;
    AcceptIntArray(passedArray: number[]): void;
    AcceptStringArray(passedArray: string[]): void;
    AcceptBoolArray(passedArray: boolean[]): void;
    AcceptTestObject(passedObject: UnityEditor.Web.TestObject): void;
    VoidMethod(logMessage: string): void;
    ArrayReverse(input: string[]): string[];
    LogMessage(message: string): void;
    static RunTestScript(path: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class WebCamTextureInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    HasPreviewGUI(): boolean;
    OnPreviewSettings(): void;
    OnPreviewGUI(r: any, background: any): void;
    OnDisable(): void;
    GetInfoString(): string;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnInteractivePreviewGUI(r: any, background: any): void;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class WebGLCompressionFormat {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Brotli: UnityEditor.WebGLCompressionFormat;
    static Gzip: UnityEditor.WebGLCompressionFormat;
    static Disabled: UnityEditor.WebGLCompressionFormat;
  }
}
declare namespace UnityEditor {
  class WebGLExceptionSupport {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.WebGLExceptionSupport;
    static ExplicitlyThrownExceptionsOnly: UnityEditor.WebGLExceptionSupport;
    static Full: UnityEditor.WebGLExceptionSupport;
  }
}
declare namespace UnityEditor {
  class WebTemplate {
    // constructors
    constructor();
    // methods
    Equals(other: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    ToGUIContent(defaultIcon: any): any;
    GetType(): any;
    // properties
    readonly CustomKeys: string[];
    // fields
    m_Path: string;
    m_Name: string;
    m_Thumbnail: any;
    m_CustomKeys: string[];
  }
}
declare namespace UnityEditor {
  class WebTemplateManagerBase {
    // constructors
    private constructor();
    // methods
    GetTemplateIndex(path: string): number;
    ClearTemplates(): void;
    SelectionUI(templateProp: UnityEditor.SerializedProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly customTemplatesFolder: string;
    readonly builtinTemplatesFolder: string;
    readonly defaultIcon: any;
    readonly Templates: UnityEditor.WebTemplate[];
    readonly TemplateGUIThumbnails: any[];
    // fields
  }
}
declare namespace UnityEditor.WebTemplateManagerBase {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    thumbnail: any;
    thumbnailLabel: any;
  }
}
declare namespace UnityEditor {
  class WebView {
    // constructors
    constructor();
    // methods
    OnDestroy(): void;
    InitWebView(host: UnityEditor.GUIView, x: number, y: number, width: number, height: number, showResizeHandle: boolean): void;
    ExecuteJavascript(scriptCode: string): void;
    LoadURL(url: string): void;
    LoadFile(path: string): void;
    DefineScriptObject(path: string, obj: any): boolean;
    SetDelegateObject(value: any): void;
    SetHostView(view: UnityEditor.GUIView): void;
    SetSizeAndPosition(x: number, y: number, width: number, height: number): void;
    SetFocus(value: boolean): void;
    HasApplicationFocus(): boolean;
    SetApplicationFocus(applicationFocus: boolean): void;
    Show(): void;
    Hide(): void;
    Back(): void;
    Forward(): void;
    SendOnEvent(jsonStr: string): void;
    Reload(): void;
    AllowRightClickMenu(allowRightClickMenu: boolean): void;
    ShowDevTools(): void;
    ToggleMaximize(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class WebViewStatic {
    // constructors
    constructor();
    // methods
    static GetWebView(): UnityEditor.WebView;
    static SetWebView(webView: UnityEditor.WebView): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class WebViewV8CallbackCSharp {
    // constructors
    constructor();
    // methods
    Callback(result: string): void;
    OnDestroy(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class WheelColliderEditor {
    // constructors
    constructor();
    // methods
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class WheelJoint2DEditor {
    // constructors
    constructor();
    // methods
    OnSceneGUI(): void;
    OnSceneGUI(): void;
    OnEnable(): void;
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class WiiUBuildDebugLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Debug: UnityEditor.WiiUBuildDebugLevel;
    static DebugOptimized: UnityEditor.WiiUBuildDebugLevel;
    static Development: UnityEditor.WiiUBuildDebugLevel;
    static Master: UnityEditor.WiiUBuildDebugLevel;
  }
}
declare namespace UnityEditor {
  class WiiUBuildOutput {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unpackaged: UnityEditor.WiiUBuildOutput;
    static WUMADFile: UnityEditor.WiiUBuildOutput;
    static DownloadImage: UnityEditor.WiiUBuildOutput;
  }
}
declare namespace UnityEditor {
  class WiiUTVResolution {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Resolution_720p: UnityEditor.WiiUTVResolution;
    static Resolution_1080p: UnityEditor.WiiUTVResolution;
  }
}
declare namespace UnityEditor {
  class WindInspector {
    // constructors
    constructor();
    // methods
    OnInspectorGUI(): void;
    DrawDefaultInspector(): boolean;
    RequiresConstantRepaint(): boolean;
    Repaint(): void;
    HasPreviewGUI(): boolean;
    GetPreviewTitle(): any;
    RenderStaticPreview(assetPath: string, subAssets: any[], width: number, height: number): any;
    OnPreviewGUI(r: any, background: any): void;
    OnInteractivePreviewGUI(r: any, background: any): void;
    OnPreviewSettings(): void;
    GetInfoString(): string;
    ReloadPreviewInstances(): void;
    DrawHeader(): void;
    DrawPreview(previewArea: any): void;
    UseDefaultMargins(): boolean;
    Initialize(targets: any[]): void;
    MoveNextTarget(): boolean;
    ResetTarget(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    target: any;
    readonly targets: any[];
    readonly serializedObject: UnityEditor.SerializedObject;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor.WindInspector {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static Mode: any;
    static Radius: any;
    static WindMain: any;
    static WindTurbulence: any;
    static WindPulseMagnitude: any;
    static WindPulseFrequency: any;
  }
}
declare namespace UnityEditor {
  class WindowFocusState {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditor {
  class WindowLayout {
    // constructors
    constructor();
    // methods
    static Unmaximize(win: UnityEditor.EditorWindow): void;
    static AddSplitViewAndChildrenRecurse(splitview: UnityEditor.View, list: any): void;
    static SaveSplitViewAndChildren(splitview: UnityEditor.View, win: UnityEditor.EditorWindow, path: string): void;
    static Maximize(win: UnityEditor.EditorWindow): void;
    static MaximizePrepare(win: UnityEditor.EditorWindow): boolean;
    static MaximizePresent(win: UnityEditor.EditorWindow): void;
    static LoadWindowLayout(path: string, newProjectLayoutWasCreated: boolean): boolean;
    static CloseWindows(): void;
    static SaveWindowLayout(path: string): void;
    static EnsureMainWindowHasBeenLoaded(): void;
    static SaveGUI(): void;
    static DeleteGUI(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditor {
  class WrapModeFixed {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Default: UnityEditor.WrapModeFixed;
    static Once: UnityEditor.WrapModeFixed;
    static Loop: UnityEditor.WrapModeFixed;
    static ClampForever: UnityEditor.WrapModeFixed;
    static PingPong: UnityEditor.WrapModeFixed;
  }
}
declare namespace UnityEditor {
  class WrapModeFixedCurve {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Clamp: UnityEditor.WrapModeFixedCurve;
    static Loop: UnityEditor.WrapModeFixedCurve;
    static PingPong: UnityEditor.WrapModeFixedCurve;
  }
}
declare namespace UnityEditor {
  class WSABuildAndRunDeployTarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static LocalMachine: UnityEditor.WSABuildAndRunDeployTarget;
    static WindowsPhone: UnityEditor.WSABuildAndRunDeployTarget;
    static LocalMachineAndWindowsPhone: UnityEditor.WSABuildAndRunDeployTarget;
  }
}
declare namespace UnityEditor {
  class WSABuildType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Debug: UnityEditor.WSABuildType;
    static Release: UnityEditor.WSABuildType;
    static Master: UnityEditor.WSABuildType;
  }
}
declare namespace UnityEditor {
  class WSASDK {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SDK80: UnityEditor.WSASDK;
    static SDK81: UnityEditor.WSASDK;
    static PhoneSDK81: UnityEditor.WSASDK;
    static UniversalSDK81: UnityEditor.WSASDK;
    static UWP: UnityEditor.WSASDK;
  }
}
declare namespace UnityEditor {
  class WSASubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AnyDevice: UnityEditor.WSASubtarget;
    static PC: UnityEditor.WSASubtarget;
    static Mobile: UnityEditor.WSASubtarget;
    static HoloLens: UnityEditor.WSASubtarget;
  }
}
declare namespace UnityEditor {
  class WSAUWPBuildType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static XAML: UnityEditor.WSAUWPBuildType;
    static D3D: UnityEditor.WSAUWPBuildType;
  }
}
declare namespace UnityEditor {
  class XboxBuildSubtarget {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Development: UnityEditor.XboxBuildSubtarget;
    static Master: UnityEditor.XboxBuildSubtarget;
    static Debug: UnityEditor.XboxBuildSubtarget;
  }
}
declare namespace UnityEditor {
  class XboxOneDeployMethod {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Push: UnityEditor.XboxOneDeployMethod;
    static Pull: UnityEditor.XboxOneDeployMethod;
    static RunFromPC: UnityEditor.XboxOneDeployMethod;
    static Package: UnityEditor.XboxOneDeployMethod;
    static PackageStreaming: UnityEditor.XboxOneDeployMethod;
  }
}
declare namespace UnityEditor {
  class XboxOneEncryptionLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditor.XboxOneEncryptionLevel;
    static DevkitCompatible: UnityEditor.XboxOneEncryptionLevel;
    static FullEncryption: UnityEditor.XboxOneEncryptionLevel;
  }
}
declare namespace UnityEditor {
  class XboxOneLoggingLevel {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AllLogging: UnityEditor.XboxOneLoggingLevel;
    static WarningsAndErrors: UnityEditor.XboxOneLoggingLevel;
    static ErrorsOnly: UnityEditor.XboxOneLoggingLevel;
  }
}
declare namespace UnityEditor {
  class XboxOnePackageUpdateGranularity {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Chunk: UnityEditor.XboxOnePackageUpdateGranularity;
    static File: UnityEditor.XboxOnePackageUpdateGranularity;
  }
}
declare namespace UnityEditor {
  class ZoomableArea {
    // constructors
    constructor();
    constructor(minimalGUI: boolean);
    constructor(minimalGUI: boolean, enableSliderZoom: boolean);
    // methods
    SetShownHRangeInsideMargins(min: number, max: number): void;
    SetShownHRange(min: number, max: number): void;
    SetShownVRangeInsideMargins(min: number, max: number): void;
    SetShownVRange(min: number, max: number): void;
    DrawingToViewTransformPoint(lhs: any): any;
    DrawingToViewTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    NormalizeInViewSpace(vec: any): any;
    BeginViewGUI(): void;
    HandleZoomAndPanEvents(area: any): void;
    EndViewGUI(): void;
    SetScaleFocused(focalPoint: any, newScale: any): void;
    SetScaleFocused(focalPoint: any, newScale: any, lockHorizontal: boolean, lockVertical: boolean): void;
    SetTransform(newTranslation: any, newScale: any): void;
    EnforceScaleAndRange(): void;
    PixelToTime(pixelX: number, rect: any): number;
    TimeToPixel(time: number, rect: any): number;
    PixelDeltaToTime(rect: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    hRangeLocked: boolean;
    vRangeLocked: boolean;
    hBaseRangeMin: number;
    hBaseRangeMax: number;
    vBaseRangeMin: number;
    vBaseRangeMax: number;
    hAllowExceedBaseRangeMin: boolean;
    hAllowExceedBaseRangeMax: boolean;
    vAllowExceedBaseRangeMin: boolean;
    vAllowExceedBaseRangeMax: boolean;
    hRangeMin: number;
    hRangeMax: number;
    vRangeMin: number;
    vRangeMax: number;
    hScaleMin: number;
    hScaleMax: number;
    vScaleMin: number;
    vScaleMax: number;
    scaleWithWindow: boolean;
    hSlider: boolean;
    vSlider: boolean;
    ignoreScrollWheelUntilClicked: boolean;
    enableMouseInput: boolean;
    uniformScale: boolean;
    upDirection: UnityEditor.ZoomableArea.YDirection;
    readonly scale: any;
    readonly translation: any;
    leftmargin: number;
    rightmargin: number;
    topmargin: number;
    bottommargin: number;
    rect: any;
    readonly drawRect: any;
    shownArea: any;
    shownAreaInsideMargins: any;
    readonly drawingBounds: any;
    readonly drawingToViewMatrix: any;
    readonly mousePositionInDrawing: any;
    // fields
    m_UniformScale: boolean;
  }
}
declare namespace UnityEditor.ZoomableArea {
  class Styles {
    // constructors
    constructor(minimalGUI: boolean);
    // methods
    InitGUIStyles(minimalGUI: boolean, enableSliderZoom: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    horizontalScrollbar: any;
    horizontalMinMaxScrollbarThumb: any;
    horizontalScrollbarLeftButton: any;
    horizontalScrollbarRightButton: any;
    verticalScrollbar: any;
    verticalMinMaxScrollbarThumb: any;
    verticalScrollbarUpButton: any;
    verticalScrollbarDownButton: any;
    sliderWidth: number;
    visualSliderWidth: number;
  }
}
declare namespace UnityEditor.ZoomableArea {
  class YDirection {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Positive: UnityEditor.ZoomableArea.YDirection;
    static Negative: UnityEditor.ZoomableArea.YDirection;
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopup {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupGameObjectNode {
    // constructors
    constructor(gameObject: any, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupHierarchy {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, owner: UnityEditor.EditorWindow): void;
    InitIfNeeded(owner: UnityEditor.EditorWindow, rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupHierarchyDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    FetchData(): void;
    UpdateData(): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static showEntireHierarchy: boolean;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupHierarchyGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, owner: UnityEditor.EditorWindow);
    // methods
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showPlusButton: boolean;
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    owner: UnityEditor.EditorWindow;
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupObjectNode {
    // constructors
    constructor(parent: UnityEditor.IMGUI.Controls.TreeViewItem, path: string, className: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AddCurvesPopupPropertyNode {
    // constructors
    constructor(parent: UnityEditor.IMGUI.Controls.TreeViewItem, selectionItem: UnityEditorInternal.AnimationWindowSelectionItem, curveBindings: UnityEditor.EditorCurveBinding[]);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    selectionItem: UnityEditorInternal.AnimationWindowSelectionItem;
    curveBindings: UnityEditor.EditorCurveBinding[];
  }
}
declare namespace UnityEditorInternal {
  class AnimationClipSelectionItem {
    // constructors
    constructor();
    // methods
    static Create(animationClip: any, sourceObject: any): UnityEditorInternal.AnimationClipSelectionItem;
    GetRefreshHash(): number;
    ClearCache(): void;
    Synchronize(): void;
    Equals(other: UnityEditorInternal.AnimationWindowSelectionItem): boolean;
    GetEditorCurveValueType(curveBinding: UnityEditor.EditorCurveBinding): any;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly canRecord: boolean;
    readonly canChangeAnimationClip: boolean;
    readonly canSyncSceneSelection: boolean;
    timeOffset: number;
    id: number;
    gameObject: any;
    scriptableObject: any;
    animationClip: any;
    readonly rootGameObject: any;
    readonly animationPlayer: any;
    readonly animationIsEditable: boolean;
    readonly clipIsEditable: boolean;
    readonly objectIsPrefab: boolean;
    readonly canAddCurves: boolean;
    readonly curves: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationCurvePreviewCache {
    // constructors
    constructor();
    // methods
    static ClearCache(): void;
    static GetPropertyPreview(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, color: any): any;
    static GetPropertyPreviewFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPropertyPreviewRegion(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any): any;
    static GetPropertyPreviewRegionFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetCurvePreview(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, color: any): any;
    static GetCurvePreviewFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetCurvePreviewRegion(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, curve2: any, color: any): any;
    static GetCurvePreviewRegionFilled(previewWidth: number, previewHeight: number, useCurveRanges: boolean, curveRanges: any, curve: any, curve2: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, property2: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, curve2: any, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, property: UnityEditor.SerializedProperty, color: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any, topFillColor: any, bottomFillColor: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any, curveRanges: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any, topFillColor: any, bottomFillColor: any): any;
    static GetPreview(previewWidth: number, previewHeight: number, curve: any, color: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationKeyTime {
    // constructors
    private constructor();
    // methods
    static Time(time: number, frameRate: number): UnityEditorInternal.AnimationKeyTime;
    static Frame(frame: number, frameRate: number): UnityEditorInternal.AnimationKeyTime;
    ContainsTime(time: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    readonly time: number;
    readonly frame: number;
    readonly frameRate: number;
    readonly frameFloor: number;
    readonly frameCeiling: number;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationRecording {
    // constructors
    constructor();
    // methods
    static Process(state: UnityEditorInternal.IAnimationRecordingState, modifications: UnityEditor.UndoPropertyModification[]): UnityEditor.UndoPropertyModification[];
    static SaveModifiedCurve(curve: UnityEditorInternal.AnimationWindowCurve, clip: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.AnimationRecording {
  class RotationModification {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    x: UnityEditor.UndoPropertyModification;
    y: UnityEditor.UndoPropertyModification;
    z: UnityEditor.UndoPropertyModification;
    w: UnityEditor.UndoPropertyModification;
    lastQuatModification: UnityEditor.UndoPropertyModification;
    useEuler: boolean;
    eulerX: UnityEditor.UndoPropertyModification;
    eulerY: UnityEditor.UndoPropertyModification;
    eulerZ: UnityEditor.UndoPropertyModification;
  }
}
declare namespace UnityEditorInternal {
  class AnimationRecordMode {
    // constructors
    constructor();
    // methods
    Dispose(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly canEnable: boolean;
    enable: boolean;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowCurve {
    // constructors
    constructor(clip: any, binding: UnityEditor.EditorCurveBinding, valueType: any);
    // methods
    LoadKeyframes(clip: any): void;
    GetHashCode(): number;
    CompareTo(obj: UnityEditorInternal.AnimationWindowCurve): number;
    ToAnimationCurve(): any;
    ToObjectCurve(): UnityEditor.ObjectReferenceKeyframe[];
    FindKeyAtTime(keyTime: UnityEditorInternal.AnimationKeyTime): UnityEditorInternal.AnimationWindowKeyframe;
    Evaluate(time: number): any;
    AddKeyframe(key: UnityEditorInternal.AnimationWindowKeyframe, keyTime: UnityEditorInternal.AnimationKeyTime): void;
    RemoveKeyframe(time: UnityEditorInternal.AnimationKeyTime): void;
    HasKeyframe(time: UnityEditorInternal.AnimationKeyTime): boolean;
    GetKeyframeIndex(time: UnityEditorInternal.AnimationKeyTime): number;
    RemoveKeysAtRange(startTime: number, endTime: number): void;
    Equals(obj: any): boolean;
    GetType(): any;
    ToString(): string;
    // properties
    readonly binding: UnityEditor.EditorCurveBinding;
    readonly isPPtrCurve: boolean;
    readonly isPhantom: boolean;
    readonly propertyName: string;
    readonly path: string;
    readonly type: any;
    readonly valueType: any;
    readonly length: number;
    readonly depth: number;
    readonly clip: any;
    readonly rootGameObject: any;
    readonly scriptableObject: any;
    readonly timeOffset: number;
    readonly clipIsEditable: boolean;
    readonly animationIsEditable: boolean;
    readonly selectionID: number;
    selectionBinding: UnityEditorInternal.AnimationWindowSelectionItem;
    // fields
    static timeEpsilon: number;
    m_Keyframes: any;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchy {
    // constructors
    constructor(state: UnityEditorInternal.AnimationWindowState, owner: UnityEditor.EditorWindow, position: any);
    // methods
    GetContentSize(): any;
    GetTotalRect(): any;
    OnGUI(position: any): void;
    Init(owner: UnityEditor.EditorWindow, rect: any): void;
    IsIDVisible(id: number): boolean;
    EndNameEditing(acceptChanges: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyAddButtonNode {
    // constructors
    constructor();
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    path: string;
    animatableObjectType: any;
    propertyName: string;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    topPixel: any;
    indent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyClipNode {
    // constructors
    constructor(parent: UnityEditor.IMGUI.Controls.TreeViewItem, setId: number, name: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    path: string;
    animatableObjectType: any;
    propertyName: string;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    topPixel: any;
    indent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, animationWindowState: UnityEditorInternal.AnimationWindowState);
    // methods
    FetchData(): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CreateTreeFromCurves(): any;
    GetIcon(selectedItem: UnityEditorInternal.AnimationWindowSelectionItem, curveBinding: UnityEditor.EditorCurveBinding): any;
    UpdateData(): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showAll: boolean;
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, state: UnityEditorInternal.AnimationWindowState);
    // methods
    BeginRowGUI(): void;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    GetNodeHeight(node: UnityEditorInternal.AnimationWindowHierarchyNode): number;
    GetTotalSize(): any;
    GetRowRect(row: number, rowWidth: number): any;
    OnRowGUI(rowRect: any, node: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    OnInitialize(): void;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    EndRowGUI(): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    state: UnityEditorInternal.AnimationWindowState;
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    static k_DopeSheetRowHeight: number;
    static k_DopeSheetRowHeightTall: number;
    static k_AddCurveButtonNodeHeight: number;
    static k_RowBackgroundColorBrightness: number;
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyMasterNode {
    // constructors
    constructor();
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    path: string;
    animatableObjectType: any;
    propertyName: string;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    topPixel: any;
    indent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyNode {
    // constructors
    constructor(instanceID: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, animatableObjectType: any, propertyName: string, path: string, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    path: string;
    animatableObjectType: any;
    propertyName: string;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    topPixel: any;
    indent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyPropertyGroupNode {
    // constructors
    constructor(animatableObjectType: any, setId: number, propertyName: string, path: string, parent: UnityEditor.IMGUI.Controls.TreeViewItem);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    path: string;
    animatableObjectType: any;
    propertyName: string;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    topPixel: any;
    indent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyPropertyNode {
    // constructors
    constructor(animatableObjectType: any, setId: number, propertyName: string, path: string, parent: UnityEditor.IMGUI.Controls.TreeViewItem, binding: UnityEditor.EditorCurveBinding, isPptrNode: boolean);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    isPptrNode: boolean;
    path: string;
    animatableObjectType: any;
    propertyName: string;
    binding: any;
    curves: UnityEditorInternal.AnimationWindowCurve[];
    topPixel: any;
    indent: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowHierarchyState {
    // constructors
    constructor();
    // methods
    GetTallMode(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    SetTallMode(node: UnityEditorInternal.AnimationWindowHierarchyNode, tallMode: boolean): void;
    GetTallInstancesCount(): number;
    AddTallInstance(id: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIDs: any;
    lastClickedID: number;
    expandedIDs: any;
    searchString: string;
    // fields
    scrollPos: any;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowKeyframe {
    // constructors
    constructor();
    constructor(key: UnityEditorInternal.AnimationWindowKeyframe);
    constructor(curve: UnityEditorInternal.AnimationWindowCurve, key: any);
    constructor(curve: UnityEditorInternal.AnimationWindowCurve, key: UnityEditor.ObjectReferenceKeyframe);
    // methods
    GetHash(): number;
    GetIndex(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    time: number;
    value: any;
    inTangent: number;
    outTangent: number;
    curve: UnityEditorInternal.AnimationWindowCurve;
    readonly isPPtrCurve: boolean;
    // fields
    m_InTangent: number;
    m_OutTangent: number;
    m_TangentMode: number;
    m_TimeHash: number;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowKeySelection {
    // constructors
    constructor();
    // methods
    SaveSelection(undoLabel: string): void;
    OnBeforeSerialize(): void;
    OnAfterDeserialize(): void;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    selectedKeyHashes: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowPolicy {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    triggerFramingOnSelection: boolean;
    unitialized: boolean;
    SynchronizeGeometry: ((any, any) => boolean);
    SynchronizeFrameRate: ((any) => boolean);
    SynchronizeCurrentTime: ((any) => boolean);
    SynchronizeZoomableArea: ((any, any) => boolean);
    OnGeometryChange: ((number[]) => void);
    OnCurrentTimeChange: ((number) => void);
    OnZoomableAreaChange: ((number, number) => void);
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowSelection {
    // constructors
    constructor();
    // methods
    BeginOperations(): void;
    EndOperations(): void;
    Notify(): void;
    Set(newItem: UnityEditorInternal.AnimationWindowSelectionItem): void;
    Add(newItem: UnityEditorInternal.AnimationWindowSelectionItem): void;
    RangeAdd(newItemArray: UnityEditorInternal.AnimationWindowSelectionItem[]): void;
    UpdateClip(itemToUpdate: UnityEditorInternal.AnimationWindowSelectionItem, newClip: any): void;
    UpdateTimeOffset(itemToUpdate: UnityEditorInternal.AnimationWindowSelectionItem, timeOffset: number): void;
    Exists(itemToFind: UnityEditorInternal.AnimationWindowSelectionItem): boolean;
    Exists(predicate: ((UnityEditorInternal.AnimationWindowSelectionItem) => boolean)): boolean;
    Find(predicate: ((UnityEditorInternal.AnimationWindowSelectionItem) => boolean)): UnityEditorInternal.AnimationWindowSelectionItem;
    First(): UnityEditorInternal.AnimationWindowSelectionItem;
    GetRefreshHash(): number;
    Refresh(): void;
    ToArray(): UnityEditorInternal.AnimationWindowSelectionItem[];
    Clear(): void;
    ClearCache(): void;
    Synchronize(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly count: number;
    readonly curves: any;
    locked: boolean;
    readonly disabled: boolean;
    readonly canRecord: boolean;
    readonly canAddCurves: boolean;
    // fields
    onSelectionChanged: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowSelectionItem {
    // constructors
    constructor();
    // methods
    static Create(): UnityEditorInternal.AnimationWindowSelectionItem;
    GetRefreshHash(): number;
    ClearCache(): void;
    Synchronize(): void;
    Equals(other: UnityEditorInternal.AnimationWindowSelectionItem): boolean;
    GetEditorCurveValueType(curveBinding: UnityEditor.EditorCurveBinding): any;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    timeOffset: number;
    id: number;
    gameObject: any;
    scriptableObject: any;
    animationClip: any;
    readonly rootGameObject: any;
    readonly animationPlayer: any;
    readonly animationIsEditable: boolean;
    readonly clipIsEditable: boolean;
    readonly objectIsPrefab: boolean;
    readonly canRecord: boolean;
    readonly canChangeAnimationClip: boolean;
    readonly canAddCurves: boolean;
    readonly canSyncSceneSelection: boolean;
    readonly curves: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowState {
    // constructors
    constructor();
    // methods
    OnGUI(): void;
    ForceRefresh(): void;
    OnEnable(): void;
    OnDisable(): void;
    OnDestroy(): void;
    OnSelectionChanged(): void;
    UndoRedoPerformed(): void;
    SaveKeySelection(undoLabel: string): void;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve, undoLabel: string): void;
    RemoveCurve(curve: UnityEditorInternal.AnimationWindowCurve, undoLabel: string): void;
    AnyKeyIsSelected(dopeline: UnityEditorInternal.DopeLine): boolean;
    KeyIsSelected(keyframe: UnityEditorInternal.AnimationWindowKeyframe): boolean;
    SelectKey(keyframe: UnityEditorInternal.AnimationWindowKeyframe): void;
    SelectKeysFromDopeline(dopeline: UnityEditorInternal.DopeLine): void;
    UnselectKey(keyframe: UnityEditorInternal.AnimationWindowKeyframe): void;
    UnselectKeysFromDopeline(dopeline: UnityEditorInternal.DopeLine): void;
    DeleteSelectedKeys(): void;
    DeleteKeys(keys: any): void;
    StartLiveEdit(): void;
    EndLiveEdit(): void;
    InLiveEdit(): boolean;
    MoveSelectedKeys(deltaTime: number, snapToFrame: boolean): void;
    TransformSelectedKeys(matrix: any, flipX: boolean, flipY: boolean, snapToFrame: boolean): void;
    TransformRippleKeys(matrix: any, t1: number, t2: number, flipX: boolean, snapToFrame: boolean): void;
    CopyKeys(): void;
    CopyAllActiveCurves(): void;
    PasteKeys(): void;
    ClearSelections(): void;
    ClearKeySelections(): void;
    ClearHierarchySelection(): void;
    ResampleAnimation(): void;
    Repaint(): void;
    GetAggregateKeys(hierarchyNode: UnityEditorInternal.AnimationWindowHierarchyNode): any;
    OnHierarchySelectionChanged(selectedInstanceIDs: number[]): void;
    HandleHierarchySelectionChanged(selectedInstanceIDs: number[], triggerSceneSelectionSync: boolean): void;
    SelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine, additive: boolean): void;
    SelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine, additive: boolean, triggerSceneSelectionSync: boolean): void;
    SelectHierarchyItem(hierarchyNodeID: number, additive: boolean, triggerSceneSelectionSync: boolean): void;
    UnSelectHierarchyItem(dopeline: UnityEditorInternal.DopeLine): void;
    UnSelectHierarchyItem(hierarchyNodeID: number): void;
    GetAffectedHierarchyIDs(keyframes: any): any;
    GetAffectedDopelines(keyframes: any): any;
    GetAffectedCurves(keyframes: any): any;
    GetDopeline(selectedInstanceID: number): UnityEditorInternal.DopeLine;
    PixelToTime(pixel: number): number;
    PixelToTime(pixel: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    TimeToPixel(time: number): number;
    TimeToPixel(time: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    SnapToFrame(time: number, snap: UnityEditorInternal.AnimationWindowState.SnapMode): number;
    SnapToFrame(time: number, fps: number): number;
    FormatFrame(frame: number, frameDigits: number): string;
    TimeToFrame(time: number): number;
    FrameToTime(frame: number): number;
    TimeToFrameFloor(time: number): number;
    TimeToFrameRound(time: number): number;
    FrameToPixel(i: number, rect: any): number;
    FrameDeltaToPixel(rect: any): number;
    TimeToPixel(time: number, rect: any): number;
    PixelToTime(pixelX: number, rect: any): number;
    PixelDeltaToTime(rect: any): number;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    readonly selection: UnityEditorInternal.AnimationWindowSelection;
    selectedItem: UnityEditorInternal.AnimationWindowSelectionItem;
    readonly activeAnimationClip: any;
    readonly activeGameObject: any;
    readonly activeRootGameObject: any;
    readonly activeAnimationPlayer: any;
    readonly animatorIsOptimized: boolean;
    locked: boolean;
    readonly disabled: boolean;
    refresh: UnityEditorInternal.AnimationWindowState.RefreshType;
    readonly allCurves: any;
    readonly activeCurves: any;
    readonly activeCurveWrappers: any;
    readonly dopelines: any;
    readonly selectedHierarchyNodes: any;
    activeKeyframe: UnityEditorInternal.AnimationWindowKeyframe;
    readonly selectedKeys: any;
    readonly syncTimeDuringDrag: boolean;
    clipFrameRate: number;
    frameRate: number;
    frame: number;
    currentTime: number;
    readonly time: UnityEditorInternal.AnimationKeyTime;
    timeFormat: UnityEditor.TimeArea.TimeFormat;
    playing: boolean;
    readonly canRecord: boolean;
    recording: boolean;
    policy: UnityEditorInternal.AnimationWindowPolicy;
    timeArea: UnityEditor.TimeArea;
    readonly pixelPerSecond: number;
    readonly zeroTimePixel: number;
    readonly minVisibleTime: number;
    readonly maxVisibleTime: number;
    readonly visibleTimeSpan: number;
    readonly minVisibleFrame: number;
    readonly maxVisibleFrame: number;
    readonly visibleFrameSpan: number;
    readonly minTime: number;
    readonly maxTime: number;
    readonly timeRange: any;
    name: string;
    hideFlags: any;
    // fields
    hierarchyState: UnityEditorInternal.AnimationWindowHierarchyState;
    animEditor: UnityEditor.AnimEditor;
    showCurveEditor: boolean;
    onStartLiveEdit: (() => void);
    onEndLiveEdit: (() => void);
    hierarchyData: UnityEditorInternal.AnimationWindowHierarchyDataSource;
    static kDefaultFrameRate: number;
    static kEditCurveUndoLabel: string;
    onFrameRateChange: ((number) => void);
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class LiveEditCurve {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    curve: UnityEditorInternal.AnimationWindowCurve;
    selectedKeys: any;
    unselectedKeys: any;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class LiveEditKeyframe {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    keySnapshot: UnityEditorInternal.AnimationWindowKeyframe;
    key: UnityEditorInternal.AnimationWindowKeyframe;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class RefreshType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditorInternal.AnimationWindowState.RefreshType;
    static CurvesOnly: UnityEditorInternal.AnimationWindowState.RefreshType;
    static Everything: UnityEditorInternal.AnimationWindowState.RefreshType;
  }
}
declare namespace UnityEditorInternal.AnimationWindowState {
  class SnapMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Disabled: UnityEditorInternal.AnimationWindowState.SnapMode;
    static SnapToFrame: UnityEditorInternal.AnimationWindowState.SnapMode;
    static SnapToClipFrame: UnityEditorInternal.AnimationWindowState.SnapMode;
  }
}
declare namespace UnityEditorInternal {
  class AnimationWindowUtility {
    // constructors
    private constructor();
    // methods
    static CreateDefaultCurves(state: UnityEditorInternal.IAnimationRecordingState, selectionItem: UnityEditorInternal.AnimationWindowSelectionItem, properties: UnityEditor.EditorCurveBinding[]): void;
    static CreateDefaultCurve(selectionItem: UnityEditorInternal.AnimationWindowSelectionItem, binding: UnityEditor.EditorCurveBinding): UnityEditorInternal.AnimationWindowCurve;
    static ShouldShowAnimationWindowCurve(curveBinding: UnityEditor.EditorCurveBinding): boolean;
    static IsNodeLeftOverCurve(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    static IsNodeAmbiguous(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    static IsNodePhantom(node: UnityEditorInternal.AnimationWindowHierarchyNode): boolean;
    static AddSelectedKeyframes(state: UnityEditorInternal.AnimationWindowState, time: UnityEditorInternal.AnimationKeyTime): void;
    static AddKeyframes(state: UnityEditorInternal.AnimationWindowState, curves: UnityEditorInternal.AnimationWindowCurve[], time: UnityEditorInternal.AnimationKeyTime): void;
    static RemoveKeyframes(state: UnityEditorInternal.AnimationWindowState, curves: UnityEditorInternal.AnimationWindowCurve[], time: UnityEditorInternal.AnimationKeyTime): void;
    static AddKeyframeToCurve(curve: UnityEditorInternal.AnimationWindowCurve, value: any, type: any, time: UnityEditorInternal.AnimationKeyTime): UnityEditorInternal.AnimationWindowKeyframe;
    static FilterCurves(curves: UnityEditorInternal.AnimationWindowCurve[], path: string, entireHierarchy: boolean): any;
    static FilterCurves(curves: UnityEditorInternal.AnimationWindowCurve[], path: string, animatableObjectType: any): any;
    static IsCurveCreated(clip: any, binding: UnityEditor.EditorCurveBinding): boolean;
    static IsRectTransformPosition(curveBinding: UnityEditor.EditorCurveBinding): boolean;
    static ContainsFloatKeyframes(keyframes: any): boolean;
    static FilterCurves(curves: UnityEditorInternal.AnimationWindowCurve[], path: string, animatableObjectType: any, propertyName: string): any;
    static GetCurrentValue(rootGameObject: any, curveBinding: UnityEditor.EditorCurveBinding): any;
    static GetAnimatableProperties(gameObject: any, root: any, valueType: any): any;
    static GetAnimatableProperties(gameObject: any, root: any, objectType: any, valueType: any): any;
    static GetAnimatableProperties(scriptableObject: any, valueType: any): any;
    static CurveExists(binding: UnityEditor.EditorCurveBinding, curves: UnityEditorInternal.AnimationWindowCurve[]): boolean;
    static GetRenamedBinding(binding: UnityEditor.EditorCurveBinding, newPath: string): UnityEditor.EditorCurveBinding;
    static RenameCurvePath(curve: UnityEditorInternal.AnimationWindowCurve, newBinding: UnityEditor.EditorCurveBinding, clip: any): void;
    static GetPropertyDisplayName(propertyName: string): string;
    static ShouldPrefixWithTypeName(animatableObjectType: any, propertyName: string): boolean;
    static GetNicePropertyDisplayName(animatableObjectType: any, propertyName: string): string;
    static GetNicePropertyGroupDisplayName(animatableObjectType: any, propertyGroupName: string): string;
    static NicifyPropertyGroupName(animatableObjectType: any, propertyGroupName: string): string;
    static GetComponentIndex(name: string): number;
    static GetPropertyGroupName(propertyName: string): string;
    static GetNextKeyframeTime(curves: UnityEditorInternal.AnimationWindowCurve[], currentTime: number, frameRate: number): number;
    static GetPreviousKeyframeTime(curves: UnityEditorInternal.AnimationWindowCurve[], currentTime: number, frameRate: number): number;
    static GameObjectIsAnimatable(gameObject: any, animationClip: any): boolean;
    static InitializeGameobjectForAnimation(animatedObject: any): boolean;
    static EnsureActiveAnimationPlayer(animatedObject: any): any;
    static AddClipToAnimationPlayerComponent(animationPlayer: any, newClip: any): boolean;
    static AddClipToAnimatorComponent(animator: any, newClip: any): boolean;
    static AddClipToAnimationComponent(animation: any, newClip: any): boolean;
    static GetPropertyNodeID(setId: number, path: string, type: any, propertyName: string): number;
    static GetClosestAnimationPlayerComponentInParents(tr: any): any;
    static GetClosestAnimatorInParents(tr: any): any;
    static GetClosestAnimationInParents(tr: any): any;
    static SyncTimeArea(from: UnityEditor.TimeArea, to: UnityEditor.TimeArea): void;
    static DrawRangeOfClip(rect: any, startOfClipPixel: number, endOfClipPixel: number): void;
    static DrawRangeOfSelection(rect: any, startPixel: number, endPixel: number): void;
    static DrawPlayHead(positionX: number, minY: number, maxY: number, alpha: number): void;
    static GetCurveWrapper(curve: UnityEditorInternal.AnimationWindowCurve, clip: any): UnityEditor.CurveWrapper;
    static CurveSelectionToAnimationWindowKeyframe(curveSelection: UnityEditor.CurveSelection, allCurves: any): UnityEditorInternal.AnimationWindowKeyframe;
    static AnimationWindowKeyframeToCurveSelection(keyframe: UnityEditorInternal.AnimationWindowKeyframe, curveEditor: UnityEditor.CurveEditor): UnityEditor.CurveSelection;
    static BestMatchForPaste(binding: UnityEditor.EditorCurveBinding, clipboardCurves: any, targetCurves: any): UnityEditorInternal.AnimationWindowCurve;
    static IsTransformType(type: any): boolean;
    static ForceGrouping(binding: UnityEditor.EditorCurveBinding): boolean;
    static ControllerChanged(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AnimEditorOverlay {
    // constructors
    constructor();
    // methods
    Initialize(): void;
    OnGUI(rect: any, contentRect: any): void;
    HandleEvents(): void;
    MousePositionToTime(evt: any): number;
    MousePositionToValue(evt: any): number;
    TimeToPixel(time: number): number;
    ValueToPixel(value: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly rect: any;
    readonly contentRect: any;
    // fields
    state: UnityEditorInternal.AnimationWindowState;
  }
}
declare namespace UnityEditorInternal {
  class AssemblyStripper {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AssetStore {
    // constructors
    constructor();
    // methods
    static Open(assetStoreURL: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AssetStoreToolUtils {
    // constructors
    constructor();
    // methods
    static BuildAssetStoreAssetBundle(targetObject: any, targetPath: string): boolean;
    static PreviewAssetStoreAssetBundleInInspector(bundle: any, info: UnityEditor.AssetStoreAsset): boolean;
    static UpdatePreloadingInternal(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    assetInstanceId: number;
    assetNameOffset: number;
    loadState: number;
    internalLoadState: number;
    age: number;
    disposed: number;
    numChannelInstances: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipInfoHelper {
  class AudioProfilerClipInfoComparer {
    // constructors
    constructor(primarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices, secondarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices, sortByDescendingOrder: boolean);
    // methods
    Compare(a: UnityEditorInternal.AudioProfilerClipInfoWrapper, b: UnityEditorInternal.AudioProfilerClipInfoWrapper): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    primarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    secondarySortKey: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    sortByDescendingOrder: boolean;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipInfoHelper {
  class ColumnIndices {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static AssetName: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static LoadState: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static InternalLoadState: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static Age: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static Disposed: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static NumChannelInstances: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
    static _LastColumn: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipInfoHelper {
    // constructors
    constructor();
    // methods
    static GetColumnString(info: UnityEditorInternal.AudioProfilerClipInfoWrapper, index: UnityEditorInternal.AudioProfilerClipInfoHelper.ColumnIndices): string;
    static GetLastColumnIndex(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipInfoWrapper {
    // constructors
    constructor(info: UnityEditorInternal.AudioProfilerClipInfo, assetName: string);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    info: UnityEditorInternal.AudioProfilerClipInfo;
    assetName: string;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipTreeViewState {
    // constructors
    constructor();
    // methods
    SetSelectedColumn(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIDs: any;
    lastClickedID: number;
    expandedIDs: any;
    searchString: string;
    // fields
    selectedColumn: number;
    prevSelectedColumn: number;
    sortByDescendingOrder: boolean;
    scrollPos: any;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerClipTreeViewItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, info: UnityEditorInternal.AudioProfilerClipInfoWrapper);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    info: UnityEditorInternal.AudioProfilerClipInfoWrapper;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerClipViewColumnHeader {
    // constructors
    constructor(state: UnityEditorInternal.AudioProfilerClipTreeViewState, backend: UnityEditorInternal.AudioProfilerClipViewBackend);
    // methods
    OnGUI(rect: any, allowSorting: boolean, headerStyle: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    columnWidths: number[];
    minColumnWidth: number;
    dragWidth: number;
    // fields
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerClipViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    GetTotalSize(): any;
    OnInitialize(): void;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerClipView {
  class AudioProfilerDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, backend: UnityEditorInternal.AudioProfilerClipViewBackend);
    // methods
    FetchData(): void;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipView {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, state: UnityEditorInternal.AudioProfilerClipTreeViewState);
    // methods
    GetNumItemsInData(): number;
    Init(rect: any, backend: UnityEditorInternal.AudioProfilerClipViewBackend): void;
    OnTreeSelectionChanged(selection: number[]): void;
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerClipViewBackend {
    // constructors
    constructor(state: UnityEditorInternal.AudioProfilerClipTreeViewState);
    // methods
    SetData(data: any): void;
    UpdateSorting(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly items: any;
    // fields
    OnUpdate: (() => void);
    m_TreeViewState: UnityEditorInternal.AudioProfilerClipTreeViewState;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerDSPInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    id: number;
    target: number;
    targetPort: number;
    numChannels: number;
    nameOffset: number;
    weight: number;
    cpuLoad: number;
    level1: number;
    level2: number;
    numLevels: number;
    flags: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerDSPView {
  class AudioProfilerDSPNode {
    // constructors
    constructor(firstTarget: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode, info: UnityEditorInternal.AudioProfilerDSPInfo, x: number, y: number, level: number);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    firstTarget: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode;
    info: UnityEditorInternal.AudioProfilerDSPInfo;
    x: number;
    y: number;
    level: number;
    maxY: number;
    targetPort: number;
    audible: boolean;
  }
}
declare namespace UnityEditorInternal.AudioProfilerDSPView {
  class AudioProfilerDSPWire {
    // constructors
    constructor(source: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode, target: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode, info: UnityEditorInternal.AudioProfilerDSPInfo);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    source: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode;
    target: UnityEditorInternal.AudioProfilerDSPView.AudioProfilerDSPNode;
    info: UnityEditorInternal.AudioProfilerDSPInfo;
    targetPort: number;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerDSPView {
    // constructors
    constructor();
    // methods
    OnGUI(clippingRect: any, property: UnityEditorInternal.ProfilerProperty, showInactiveDSPChains: boolean, highlightAudibleDSPChains: boolean, zoomFactor: any, scrollPos: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    assetInstanceId: number;
    objectInstanceId: number;
    assetNameOffset: number;
    objectNameOffset: number;
    parentId: number;
    uniqueId: number;
    flags: number;
    playCount: number;
    distanceToListener: number;
    volume: number;
    audibility: number;
    minDist: number;
    maxDist: number;
    time: number;
    duration: number;
    frequency: number;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupInfoHelper {
  class AudioProfilerGroupInfoComparer {
    // constructors
    constructor(primarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices, secondarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices, sortByDescendingOrder: boolean);
    // methods
    Compare(a: UnityEditorInternal.AudioProfilerGroupInfoWrapper, b: UnityEditorInternal.AudioProfilerGroupInfoWrapper): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    primarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    secondarySortKey: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    sortByDescendingOrder: boolean;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupInfoHelper {
  class ColumnIndices {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ObjectName: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static AssetName: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Volume: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Audibility: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static PlayCount: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Is3D: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsPaused: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsMuted: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsVirtual: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOneShot: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsLooped: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static DistanceToListener: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static MinDist: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static MaxDist: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Time: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Duration: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static Frequency: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsStream: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsCompressed: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsNonBlocking: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOpenUser: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOpenMemory: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static IsOpenMemoryPoint: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
    static _LastColumn: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupInfoHelper {
    // constructors
    constructor();
    // methods
    static GetColumnString(info: UnityEditorInternal.AudioProfilerGroupInfoWrapper, index: UnityEditorInternal.AudioProfilerGroupInfoHelper.ColumnIndices): string;
    static GetLastColumnIndex(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static AUDIOPROFILER_FLAGS_3D: number;
    static AUDIOPROFILER_FLAGS_ISSPATIAL: number;
    static AUDIOPROFILER_FLAGS_PAUSED: number;
    static AUDIOPROFILER_FLAGS_MUTED: number;
    static AUDIOPROFILER_FLAGS_VIRTUAL: number;
    static AUDIOPROFILER_FLAGS_ONESHOT: number;
    static AUDIOPROFILER_FLAGS_GROUP: number;
    static AUDIOPROFILER_FLAGS_STREAM: number;
    static AUDIOPROFILER_FLAGS_COMPRESSED: number;
    static AUDIOPROFILER_FLAGS_LOOPED: number;
    static AUDIOPROFILER_FLAGS_OPENMEMORY: number;
    static AUDIOPROFILER_FLAGS_OPENMEMORYPOINT: number;
    static AUDIOPROFILER_FLAGS_OPENUSER: number;
    static AUDIOPROFILER_FLAGS_NONBLOCKING: number;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupInfoWrapper {
    // constructors
    constructor(info: UnityEditorInternal.AudioProfilerGroupInfo, assetName: string, objectName: string, addToRoot: boolean);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    info: UnityEditorInternal.AudioProfilerGroupInfo;
    assetName: string;
    objectName: string;
    addToRoot: boolean;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupTreeViewState {
    // constructors
    constructor();
    // methods
    SetSelectedColumn(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIDs: any;
    lastClickedID: number;
    expandedIDs: any;
    searchString: string;
    // fields
    selectedColumn: number;
    prevSelectedColumn: number;
    sortByDescendingOrder: boolean;
    scrollPos: any;
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, backend: UnityEditorInternal.AudioProfilerGroupViewBackend);
    // methods
    FetchData(): void;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerGroupTreeViewItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditor.IMGUI.Controls.TreeViewItem, displayName: string, info: UnityEditorInternal.AudioProfilerGroupInfoWrapper);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    info: UnityEditorInternal.AudioProfilerGroupInfoWrapper;
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerGroupViewColumnHeader {
    // constructors
    constructor(state: UnityEditorInternal.AudioProfilerGroupTreeViewState, backend: UnityEditorInternal.AudioProfilerGroupViewBackend);
    // methods
    OnGUI(rect: any, allowSorting: boolean, headerStyle: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    columnWidths: number[];
    minColumnWidth: number;
    dragWidth: number;
    // fields
  }
}
declare namespace UnityEditorInternal.AudioProfilerGroupView {
  class AudioProfilerGroupViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    GetTotalSize(): any;
    OnInitialize(): void;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupView {
    // constructors
    constructor(editorWindow: UnityEditor.EditorWindow, state: UnityEditorInternal.AudioProfilerGroupTreeViewState);
    // methods
    GetNumItemsInData(): number;
    Init(rect: any, backend: UnityEditorInternal.AudioProfilerGroupViewBackend): void;
    OnTreeSelectionChanged(selection: number[]): void;
    OnGUI(rect: any, allowSorting: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class AudioProfilerGroupViewBackend {
    // constructors
    constructor(state: UnityEditorInternal.AudioProfilerGroupTreeViewState);
    // methods
    SetData(data: any): void;
    UpdateSorting(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly items: any;
    // fields
    OnUpdate: (() => void);
    m_TreeViewState: UnityEditorInternal.AudioProfilerGroupTreeViewState;
  }
}
declare namespace UnityEditorInternal {
  class BaseIl2CppPlatformProvider {
    // constructors
    constructor(target: UnityEditor.BuildTarget, libraryFolder: string);
    // methods
    CreateNativeCompiler(): INativeCompiler;
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly target: UnityEditor.BuildTarget;
    readonly libraryFolder: string;
    readonly developmentMode: boolean;
    readonly emitNullChecks: boolean;
    readonly enableStackTraces: boolean;
    readonly enableArrayBoundsCheck: boolean;
    readonly enableDivideByZeroCheck: boolean;
    readonly loadSymbols: boolean;
    readonly supportsEngineStripping: boolean;
    readonly buildReport: UnityEditor.BuildReporting.BuildReport;
    readonly includePaths: string[];
    readonly libraryPaths: string[];
    readonly nativeLibraryFileName: string;
    readonly staticLibraryExtension: string;
    readonly il2CppFolder: string;
    readonly moduleStrippingInformationFolder: string;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class BaseObjectTools {
    // constructors
    constructor();
    // methods
    static ClassIDToString(ID: number): string;
    static NamespaceFromClassID(ID: number): string;
    static StringToClassID(classString: string): number;
    static StringToClassIDCaseInsensitive(classString: string): number;
    static IsBaseObject(ID: number): boolean;
    static IsDerivedFromClassID(classID: number, derivedFromClassID: number): boolean;
    static GetSuperClassID(ID: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class BlendTreePreviewUtility {
    // constructors
    constructor();
    // methods
    static GetRootBlendTreeChildWeights(animator: any, layerIndex: number, stateHash: number, weightArray: number[]): void;
    static CalculateRootBlendTreeChildWeights(animator: any, layerIndex: number, stateHash: number, weightArray: number[], blendX: number, blendY: number): void;
    static CalculateBlendTexture(animator: any, layerIndex: number, stateHash: number, blendTexture: any, weightTextures: any[], rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class Button {
    // constructors
    constructor();
    // methods
    static Do(id: number, position: any, direction: any, size: number, pickSize: number, capFunc: ((number, any, any, number) => void)): boolean;
    static Do(id: number, position: any, direction: any, size: number, pickSize: number, capFunction: ((number, any, any, number, any) => void)): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class CanAppendBuild {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unsupported: UnityEditorInternal.CanAppendBuild;
    static Yes: UnityEditorInternal.CanAppendBuild;
    static No: UnityEditorInternal.CanAppendBuild;
  }
}
declare namespace UnityEditorInternal.Chart {
  class ChartAction {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditorInternal.Chart.ChartAction;
    static Activated: UnityEditorInternal.Chart.ChartAction;
    static Closed: UnityEditorInternal.Chart.ChartAction;
  }
}
declare namespace UnityEditorInternal.Chart {
  class ChartType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static StackedFill: UnityEditorInternal.Chart.ChartType;
    static Line: UnityEditorInternal.Chart.ChartType;
  }
}
declare namespace UnityEditorInternal {
  class Chart {
    // constructors
    constructor();
    // methods
    LoadAndBindSettings(chartSettingsName: string, cdata: UnityEditorInternal.ChartData): void;
    OnLostFocus(): void;
    DoGUI(type: UnityEditorInternal.Chart.ChartType, selectedFrame: number, cdata: UnityEditorInternal.ChartData, area: UnityEditorInternal.ProfilerArea, active: boolean, icon: any, action: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    static kSideWidth: number;
    m_NotSupportedWarning: string;
  }
}
declare namespace UnityEditorInternal.Chart {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    performanceWarning: any;
    background: any;
    leftPane: any;
    rightPane: any;
    paneSubLabel: any;
    closeButton: any;
    whiteLabel: any;
    selectedLabel: any;
  }
}
declare namespace UnityEditorInternal {
  class ChartData {
    // constructors
    constructor();
    // methods
    Assign(items: UnityEditorInternal.ChartSeries[], firstFrame: number, firstSelectableFrame: number): void;
    AssignScale(scale: number[]): void;
    SetGrid(grid: number[], labels: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly NumberOfFrames: number;
    // fields
    charts: UnityEditorInternal.ChartSeries[];
    chartOrder: number[];
    scale: number[];
    grid: number[];
    gridLabels: string[];
    selectedLabels: string[];
    firstFrame: number;
    firstSelectableFrame: number;
    hasOverlay: boolean;
    maxValue: number;
  }
}
declare namespace UnityEditorInternal {
  class ChartSeries {
    // constructors
    constructor(name: string, len: number, clr: any);
    // methods
    CreateOverlayData(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    identifierName: string;
    name: string;
    data: number[];
    overlayData: number[];
    color: any;
    enabled: boolean;
  }
}
declare namespace UnityEditorInternal {
  class ComponentUtility {
    // constructors
    constructor();
    // methods
    static MoveComponentUp(component: any): boolean;
    static MoveComponentDown(component: any): boolean;
    static CopyComponent(component: any): boolean;
    static PasteComponentValues(component: any): boolean;
    static PasteComponentAsNew(go: any): boolean;
    static DestroyComponentsMatching(dst: any, componentFilter: ((any) => boolean)): void;
    static ReplaceComponentsIfDifferent(src: any, dst: any, componentFilter: ((any) => boolean)): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class CPUArch {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Any: UnityEditorInternal.CPUArch;
    static x86: UnityEditorInternal.CPUArch;
    static ARMv7: UnityEditorInternal.CPUArch;
  }
}
declare namespace UnityEditorInternal {
  class CurveBindingUtility {
    // constructors
    private constructor();
    // methods
    static GetCurrentValue(state: UnityEditorInternal.AnimationWindowState, curve: UnityEditorInternal.AnimationWindowCurve): any;
    static GetCurrentValue(rootGameObject: any, curveBinding: UnityEditor.EditorCurveBinding): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class Disc {
    // constructors
    constructor();
    // methods
    static Do(id: number, rotation: any, position: any, axis: any, size: number, cutoffPlane: boolean, snap: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class DllType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Unknown: UnityEditorInternal.DllType;
    static Native: UnityEditorInternal.DllType;
    static UnknownManaged: UnityEditorInternal.DllType;
    static ManagedNET35: UnityEditorInternal.DllType;
    static ManagedNET40: UnityEditorInternal.DllType;
    static WinMDNative: UnityEditorInternal.DllType;
    static WinMDNET40: UnityEditorInternal.DllType;
  }
}
declare namespace UnityEditorInternal {
  class DopeLine {
    // constructors
    constructor(hierarchyNodeID: number, curves: UnityEditorInternal.AnimationWindowCurve[]);
    // methods
    InvalidateKeyframes(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly valueType: any;
    readonly isPptrDopeline: boolean;
    readonly isEditable: boolean;
    readonly hierarchyNodeID: number;
    readonly curves: UnityEditorInternal.AnimationWindowCurve[];
    readonly keys: any;
    // fields
    static dopekeyStyle: any;
    position: any;
    objectType: any;
    tallMode: boolean;
    hasChildren: boolean;
    isMasterDopeline: boolean;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class AddKeyToDopelineContext {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    dopeline: UnityEditorInternal.DopeLine;
    time: UnityEditorInternal.AnimationKeyTime;
  }
}
declare namespace UnityEditorInternal {
  class DopeSheetEditor {
    // constructors
    constructor(owner: UnityEditor.EditorWindow);
    // methods
    OnDisable(): void;
    OnGUI(position: any, scrollPosition: any): void;
    Init(): void;
    RecalculateBounds(): void;
    DrawMasterDopelineBackground(position: any): void;
    FrameClip(): void;
    FrameSelected(): void;
    UpdateCurves(changedCurves: any, undoText: string): void;
    SetTickMarkerRanges(): void;
    DrawMajorTicks(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number): void;
    TimeRuler(position: any, frameRate: number, labels: boolean, useEntireHeight: boolean, alpha: number, timeFormat: UnityEditor.TimeArea.TimeFormat): void;
    BrowseRuler(position: any, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    BrowseRuler(position: any, id: number, time: any, frameRate: number, pickAnywhere: boolean, thumbStyle: any): UnityEditor.TimeArea.TimeRulerDragMode;
    FrameToPixel(i: number, frameRate: number, rect: any): number;
    TimeField(rect: any, id: number, time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): number;
    ValueField(rect: any, id: number, value: number): number;
    FormatTime(time: number, frameRate: number, timeFormat: UnityEditor.TimeArea.TimeFormat): string;
    FormatValue(value: number): string;
    SnapTimeToWholeFPS(time: number, frameRate: number): number;
    SetShownHRangeInsideMargins(min: number, max: number): void;
    SetShownHRange(min: number, max: number): void;
    SetShownVRangeInsideMargins(min: number, max: number): void;
    SetShownVRange(min: number, max: number): void;
    DrawingToViewTransformPoint(lhs: any): any;
    DrawingToViewTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    ViewToDrawingTransformPoint(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    DrawingToViewTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    ViewToDrawingTransformVector(lhs: any): any;
    NormalizeInViewSpace(vec: any): any;
    BeginViewGUI(): void;
    HandleZoomAndPanEvents(area: any): void;
    EndViewGUI(): void;
    SetScaleFocused(focalPoint: any, newScale: any): void;
    SetScaleFocused(focalPoint: any, newScale: any, lockHorizontal: boolean, lockVertical: boolean): void;
    SetTransform(newTranslation: any, newScale: any): void;
    EnforceScaleAndRange(): void;
    PixelToTime(pixelX: number, rect: any): number;
    TimeToPixel(time: number, rect: any): number;
    PixelDeltaToTime(rect: any): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly contentHeight: number;
    readonly drawingBounds: any;
    readonly selectionBounds: any;
    readonly isDragging: boolean;
    hTicks: UnityEditor.TickHandler;
    vTicks: UnityEditor.TickHandler;
    hRangeLocked: boolean;
    vRangeLocked: boolean;
    hBaseRangeMin: number;
    hBaseRangeMax: number;
    vBaseRangeMin: number;
    vBaseRangeMax: number;
    hAllowExceedBaseRangeMin: boolean;
    hAllowExceedBaseRangeMax: boolean;
    vAllowExceedBaseRangeMin: boolean;
    vAllowExceedBaseRangeMax: boolean;
    hRangeMin: number;
    hRangeMax: number;
    vRangeMin: number;
    vRangeMax: number;
    hScaleMin: number;
    hScaleMax: number;
    vScaleMin: number;
    vScaleMax: number;
    scaleWithWindow: boolean;
    hSlider: boolean;
    vSlider: boolean;
    ignoreScrollWheelUntilClicked: boolean;
    enableMouseInput: boolean;
    uniformScale: boolean;
    upDirection: UnityEditor.ZoomableArea.YDirection;
    readonly scale: any;
    readonly translation: any;
    leftmargin: number;
    rightmargin: number;
    topmargin: number;
    bottommargin: number;
    rect: any;
    readonly drawRect: any;
    shownArea: any;
    shownAreaInsideMargins: any;
    readonly drawingToViewMatrix: any;
    readonly mousePositionInDrawing: any;
    // fields
    state: UnityEditorInternal.AnimationWindowState;
    m_Owner: UnityEditor.EditorWindow;
    m_Bounds: any;
    m_SpritePreviewLoading: boolean;
    m_SpritePreviewCacheSize: number;
    m_UniformScale: boolean;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class DopeSheetControlPointRenderer {
    // constructors
    constructor();
    // methods
    FlushCache(): void;
    Clear(): void;
    Render(): void;
    AddUnselectedKey(element: UnityEditorInternal.DopeSheetEditor.DrawElement): void;
    AddSelectedKey(element: UnityEditorInternal.DopeSheetEditor.DrawElement): void;
    AddDragDropKey(element: UnityEditorInternal.DopeSheetEditor.DrawElement): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class DopeSheetSelectionRect {
    // constructors
    constructor(owner: UnityEditorInternal.DopeSheetEditor);
    // methods
    OnGUI(position: any): void;
    GetCurrentPixelRect(): any;
    GetCurrentTimeRect(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    createRect: any;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect {
  class SelectionType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Normal: UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect.SelectionType;
    static Additive: UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect.SelectionType;
    static Subtractive: UnityEditorInternal.DopeSheetEditor.DopeSheetSelectionRect.SelectionType;
  }
}
declare namespace UnityEditorInternal.DopeSheetEditor {
  class DrawElement {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    position: any;
    color: any;
    texture: any;
  }
}
declare namespace UnityEditorInternal {
  class EditMode {
    // constructors
    constructor();
    // methods
    static IsOwner(editor: UnityEditor.Editor): boolean;
    static ResetToolToPrevious(): void;
    static OnSelectionChange(): void;
    static QuitEditMode(): void;
    static DoEditModeInspectorModeButton(mode: UnityEditorInternal.EditMode.SceneViewEditMode, label: string, icon: any, bounds: any, caller: UnityEditor.Editor): void;
    static DoInspectorToolbar(modes: UnityEditorInternal.EditMode.SceneViewEditMode[], guiContents: any[], bounds: any, caller: UnityEditor.Editor): void;
    static ChangeEditMode(mode: UnityEditorInternal.EditMode.SceneViewEditMode, bounds: any, caller: UnityEditor.Editor): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly editMode: UnityEditorInternal.EditMode.SceneViewEditMode;
    // fields
    static onEditModeEndDelegate: ((UnityEditor.Editor) => void);
    static onEditModeStartDelegate: ((UnityEditor.Editor, UnityEditorInternal.EditMode.SceneViewEditMode) => void);
  }
}
declare namespace UnityEditorInternal.EditMode {
  class SceneViewEditMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditorInternal.EditMode.SceneViewEditMode;
    static Collider: UnityEditorInternal.EditMode.SceneViewEditMode;
    static Cloth: UnityEditorInternal.EditMode.SceneViewEditMode;
    static ReflectionProbeBox: UnityEditorInternal.EditMode.SceneViewEditMode;
    static ReflectionProbeOrigin: UnityEditorInternal.EditMode.SceneViewEditMode;
    static LightProbeProxyVolumeBox: UnityEditorInternal.EditMode.SceneViewEditMode;
    static LightProbeProxyVolumeOrigin: UnityEditorInternal.EditMode.SceneViewEditMode;
    static LightProbeGroup: UnityEditorInternal.EditMode.SceneViewEditMode;
  }
}
declare namespace UnityEditorInternal {
  class EditorResourcesUtility {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly lightSkinSourcePath: string;
    static readonly darkSkinSourcePath: string;
    static readonly fontsPath: string;
    static readonly brushesPath: string;
    static readonly iconsPath: string;
    static readonly generatedIconsPath: string;
    static readonly folderIconName: string;
    static readonly emptyFolderIconName: string;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class FileMirroring {
    // constructors
    private constructor();
    // methods
    static MirrorFile(from: string, to: string): void;
    static MirrorFile(from: string, to: string, comparer: ((string, string) => boolean)): void;
    static MirrorFolder(from: string, to: string): void;
    static MirrorFolder(from: string, to: string, comparer: ((string, string) => boolean)): void;
    static CanSkipCopy(from: string, to: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.FileMirroring {
  class FileEntryType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static File: UnityEditorInternal.FileMirroring.FileEntryType;
    static Directory: UnityEditorInternal.FileMirroring.FileEntryType;
    static NotExisting: UnityEditorInternal.FileMirroring.FileEntryType;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerBlendState {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    writeMask: number;
    srcBlend: any;
    dstBlend: any;
    srcBlendAlpha: any;
    dstBlendAlpha: any;
    blendOp: any;
    blendOpAlpha: any;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerDepthState {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    depthWrite: number;
    depthFunc: any;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerEvent {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    type: UnityEditorInternal.FrameEventType;
    gameObject: any;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerEventData {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    frameEventIndex: number;
    vertexCount: number;
    indexCount: number;
    instanceCount: number;
    shaderName: string;
    shader: any;
    shaderInstanceID: number;
    shaderPassIndex: number;
    shaderKeywords: string;
    rendererInstanceID: number;
    mesh: any;
    meshInstanceID: number;
    meshSubset: number;
    rtName: string;
    rtWidth: number;
    rtHeight: number;
    rtFormat: number;
    rtDim: number;
    rtFace: number;
    rtCount: number;
    rtHasDepthTexture: number;
    blendState: UnityEditorInternal.FrameDebuggerBlendState;
    rasterState: UnityEditorInternal.FrameDebuggerRasterState;
    depthState: UnityEditorInternal.FrameDebuggerDepthState;
    shaderProperties: UnityEditorInternal.ShaderProperties;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerRasterState {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    cullMode: any;
    depthBias: number;
    slopeScaledDepthBias: number;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerTreeView {
    // constructors
    constructor(frameEvents: UnityEditorInternal.FrameDebuggerEvent[], treeViewState: UnityEditor.IMGUI.Controls.TreeViewState, window: UnityEditor.FrameDebuggerWindow, startRect: any);
    // methods
    SelectFrameEventIndex(eventIndex: number): void;
    OnGUI(rect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView {
  class FDTreeViewDataSource {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController, frameEvents: UnityEditorInternal.FrameDebuggerEvent[]);
    // methods
    SetEvents(frameEvents: UnityEditorInternal.FrameDebuggerEvent[]): void;
    IsRenamingItemAllowed(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeMultiSelected(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    FetchData(): void;
    OnInitialize(): void;
    ReloadData(): void;
    FindItem(id: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    IsRevealed(id: number): boolean;
    RevealItem(id: number): void;
    OnSearchChanged(): void;
    GetRow(id: number): number;
    GetItem(row: number): UnityEditor.IMGUI.Controls.TreeViewItem;
    GetRows(): any;
    InitIfNeeded(): void;
    GetExpandedIDs(): number[];
    SetExpandedIDs(ids: number[]): void;
    IsExpanded(id: number): boolean;
    SetExpanded(id: number, expand: boolean): boolean;
    SetExpandedWithChildren(id: number, expand: boolean): void;
    SetExpandedWithChildren(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    SetExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem, expand: boolean): void;
    IsExpanded(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    IsExpandable(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    CanBeParent(item: UnityEditor.IMGUI.Controls.TreeViewItem): boolean;
    OnExpandedStateChanged(): void;
    InsertFakeItem(id: number, parentID: number, name: string, icon: any): void;
    HasFakeItem(): boolean;
    RemoveFakeItem(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    showRootItem: boolean;
    rootIsCollapsable: boolean;
    alwaysAddFirstItemToSearchResult: boolean;
    readonly root: UnityEditor.IMGUI.Controls.TreeViewItem;
    readonly rowCount: number;
    // fields
    onVisibleRowsChanged: (() => void);
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView.FDTreeViewDataSource {
  class FDTreeHierarchyLevel {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView {
  class FDTreeViewGUI {
    // constructors
    constructor(treeView: UnityEditor.IMGUI.Controls.TreeViewController);
    // methods
    OnInitialize(): void;
    GetTotalSize(): any;
    GetNumRowsOnPageUpDown(fromItem: UnityEditor.IMGUI.Controls.TreeViewItem, pageUp: boolean, heightOfTreeView: number): number;
    GetFirstAndLastRowVisible(firstRowVisible: any, lastRowVisible: any): void;
    BeginRowGUI(): void;
    EndRowGUI(): void;
    OnRowGUI(rowRect: any, item: UnityEditor.IMGUI.Controls.TreeViewItem, row: number, selected: boolean, focused: boolean): void;
    GetRenameRect(rowRect: any, row: number, item: UnityEditor.IMGUI.Controls.TreeViewItem): any;
    GetRowRect(row: number, rowWidth: number): any;
    GetRectForFraming(row: number): any;
    BeginPingItem(item: UnityEditor.IMGUI.Controls.TreeViewItem, topPixelOfRow: number, availableWidth: number): void;
    EndPingItem(): void;
    BeginRename(item: UnityEditor.IMGUI.Controls.TreeViewItem, delay: number): boolean;
    EndRename(): void;
    DoRenameOverlay(): void;
    GetFoldoutIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    GetContentIndent(item: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    iconLeftPadding: number;
    iconRightPadding: number;
    readonly iconTotalPadding: number;
    iconOverlayGUI: ((UnityEditor.IMGUI.Controls.TreeViewItem, any) => void);
    readonly indentWidth: number;
    readonly halfDropBetweenHeight: number;
    readonly topRowMargin: number;
    readonly bottomRowMargin: number;
    // fields
    k_LineHeight: number;
    k_BaseIndent: number;
    k_IndentWidth: number;
    k_IconWidth: number;
    k_SpaceBetweenIconAndText: number;
    k_TopRowMargin: number;
    k_BottomRowMargin: number;
    k_HalfDropBetweenHeight: number;
    foldoutYOffset: number;
    extraInsertionMarkerIndent: number;
  }
}
declare namespace UnityEditorInternal.FrameDebuggerTreeView {
  class FDTreeViewItem {
    // constructors
    constructor(id: number, depth: number, parent: UnityEditorInternal.FrameDebuggerTreeView.FDTreeViewItem, displayName: string);
    // methods
    CompareTo(other: UnityEditor.IMGUI.Controls.TreeViewItem): number;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    id: number;
    displayName: string;
    depth: number;
    readonly hasChildren: boolean;
    children: any;
    parent: UnityEditor.IMGUI.Controls.TreeViewItem;
    icon: any;
    // fields
    m_FrameEvent: UnityEditorInternal.FrameDebuggerEvent;
    m_ChildEventCount: number;
    m_EventIndex: number;
  }
}
declare namespace UnityEditorInternal {
  class FrameDebuggerUtility {
    // constructors
    constructor();
    // methods
    static SetEnabled(enabled: boolean, remotePlayerGUID: number): void;
    static IsLocalEnabled(): boolean;
    static IsRemoteEnabled(): boolean;
    static GetRemotePlayerGUID(): number;
    static SetRenderTargetDisplayOptions(rtIndex: number, channels: any, blackLevel: number, whiteLevel: number): void;
    static GetFrameEvents(): UnityEditorInternal.FrameDebuggerEvent[];
    static GetFrameEventData(index: number, frameDebuggerEventData: any): boolean;
    static GetFrameEventInfoName(index: number): string;
    static GetFrameEventGameObject(index: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly receivingRemoteFrameEventData: boolean;
    static readonly locallySupported: boolean;
    static readonly count: number;
    static limit: number;
    static readonly eventsHash: number;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class FrameEventType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static ClearNone: UnityEditorInternal.FrameEventType;
    static ClearColor: UnityEditorInternal.FrameEventType;
    static ClearDepth: UnityEditorInternal.FrameEventType;
    static ClearColorDepth: UnityEditorInternal.FrameEventType;
    static ClearStencil: UnityEditorInternal.FrameEventType;
    static ClearColorStencil: UnityEditorInternal.FrameEventType;
    static ClearDepthStencil: UnityEditorInternal.FrameEventType;
    static ClearAll: UnityEditorInternal.FrameEventType;
    static SetRenderTarget: UnityEditorInternal.FrameEventType;
    static ResolveRT: UnityEditorInternal.FrameEventType;
    static ResolveDepth: UnityEditorInternal.FrameEventType;
    static GrabIntoRT: UnityEditorInternal.FrameEventType;
    static StaticBatch: UnityEditorInternal.FrameEventType;
    static DynamicBatch: UnityEditorInternal.FrameEventType;
    static Mesh: UnityEditorInternal.FrameEventType;
    static DynamicGeometry: UnityEditorInternal.FrameEventType;
    static GLDraw: UnityEditorInternal.FrameEventType;
    static SkinOnGPU: UnityEditorInternal.FrameEventType;
    static DrawProcedural: UnityEditorInternal.FrameEventType;
    static ComputeDispatch: UnityEditorInternal.FrameEventType;
    static PluginEvent: UnityEditorInternal.FrameEventType;
    static InstancedMesh: UnityEditorInternal.FrameEventType;
  }
}
declare namespace UnityEditorInternal {
  class FreeMove {
    // constructors
    constructor();
    // methods
    static Do(id: number, position: any, rotation: any, size: number, snap: any, capFunc: ((number, any, any, number) => void)): any;
    static Do(id: number, position: any, rotation: any, size: number, snap: any, handleFunction: ((number, any, any, number, any) => void)): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class FreeRotate {
    // constructors
    constructor();
    // methods
    static Do(id: number, rotation: any, position: any, size: number): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class GameObjectSelectionItem {
    // constructors
    constructor();
    // methods
    static Create(gameObject: any): UnityEditorInternal.GameObjectSelectionItem;
    Synchronize(): void;
    GetRefreshHash(): number;
    ClearCache(): void;
    Equals(other: UnityEditorInternal.AnimationWindowSelectionItem): boolean;
    GetEditorCurveValueType(curveBinding: UnityEditor.EditorCurveBinding): any;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    animationClip: any;
    timeOffset: number;
    id: number;
    gameObject: any;
    scriptableObject: any;
    readonly rootGameObject: any;
    readonly animationPlayer: any;
    readonly animationIsEditable: boolean;
    readonly clipIsEditable: boolean;
    readonly objectIsPrefab: boolean;
    readonly canRecord: boolean;
    readonly canChangeAnimationClip: boolean;
    readonly canAddCurves: boolean;
    readonly canSyncSceneSelection: boolean;
    readonly curves: any;
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class GenerateIconsWithMipLevels {
    // constructors
    constructor();
    // methods
    static GenerateAllIconsWithMipLevels(): void;
    static VerifyIconPath(assetPath: string, logError: boolean): boolean;
    static GenerateSelectedIconsWithMips(): void;
    static GenerateIconWithMipLevels(assetPath: string, mipTextures: any, fileInfo: any): void;
    static MipLevelForAssetPath(assetPath: string, separator: string): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.GenerateIconsWithMipLevels {
  class InputData {
    // constructors
    constructor();
    // methods
    GetMipFileName(baseName: string, mipResolution: number): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    sourceFolder: string;
    targetFolder: string;
    mipIdentifier: string;
    mipFileExtension: string;
    generatedFileNames: any;
  }
}
declare namespace UnityEditorInternal {
  class GradientPreviewCache {
    // constructors
    constructor();
    // methods
    static ClearCache(): void;
    static GetPropertyPreview(property: UnityEditor.SerializedProperty): any;
    static GetGradientPreview(curve: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class IAnimationRecordingState {
    // constructors
    private constructor();
    // methods
    SaveCurve(curve: UnityEditorInternal.AnimationWindowCurve): void;
    // properties
    readonly activeGameObject: any;
    readonly activeRootGameObject: any;
    readonly activeAnimationClip: any;
    readonly frame: number;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class IBounds {
    // constructors
    private constructor();
    // methods
    // properties
    readonly boundingRect: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class IIl2CppPlatformProvider {
    // constructors
    private constructor();
    // methods
    CreateNativeCompiler(): INativeCompiler;
    CreateIl2CppNativeCodeBuilder(): UnityEditorInternal.Il2CppNativeCodeBuilder;
    // properties
    readonly target: UnityEditor.BuildTarget;
    readonly emitNullChecks: boolean;
    readonly enableStackTraces: boolean;
    readonly enableArrayBoundsCheck: boolean;
    readonly enableDivideByZeroCheck: boolean;
    readonly loadSymbols: boolean;
    readonly nativeLibraryFileName: string;
    readonly il2CppFolder: string;
    readonly developmentMode: boolean;
    readonly moduleStrippingInformationFolder: string;
    readonly supportsEngineStripping: boolean;
    readonly buildReport: UnityEditor.BuildReporting.BuildReport;
    readonly includePaths: string[];
    readonly libraryPaths: string[];
    // fields
  }
}
declare namespace UnityEditorInternal {
  class IL2CPPBuilder {
    // constructors
    constructor(tempFolder: string, stagingAreaData: string, platformProvider: UnityEditorInternal.IIl2CppPlatformProvider, modifyOutputBeforeCompile: ((string) => void), runtimeClassRegistry: UnityEditor.RuntimeClassRegistry, developmentBuild: boolean);
    // methods
    Run(): void;
    RunCompileAndLink(): void;
    GetCppOutputDirectoryInStagingArea(): string;
    static GetCppOutputPath(tempFolder: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class Il2CppNativeCodeBuilder {
    // constructors
    private constructor();
    // methods
    ConvertIncludesToFullPaths(relativeIncludePaths: any): any;
    ConvertOutputFileToFullPath(outputFileRelativePath: string): string;
    SetupStartInfo(startInfo: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly CompilerPlatform: string;
    readonly CompilerArchitecture: string;
    readonly CompilerFlags: string;
    readonly LinkerFlags: string;
    readonly SetsUpEnvironment: boolean;
    readonly CacheDirectory: string;
    readonly PluginPath: string;
    readonly AdditionalIl2CPPArguments: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class Il2CppNativeCodeBuilderUtils {
    // constructors
    private constructor();
    // methods
    static AddBuilderArguments(builder: UnityEditorInternal.Il2CppNativeCodeBuilder, outputRelativePath: string, includeRelativePaths: any): any;
    static ClearAndPrepareCacheDirectory(builder: UnityEditorInternal.Il2CppNativeCodeBuilder): void;
    static ClearCacheIfEditorVersionDiffers(builder: UnityEditorInternal.Il2CppNativeCodeBuilder, currentEditorVersion: string): void;
    static PrepareCacheDirectory(builder: UnityEditorInternal.Il2CppNativeCodeBuilder, currentEditorVersion: string): void;
    static ObjectFilePathInCacheDirectoryFor(builderCacheDirectory: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class IL2CPPUtils {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class InstrumentedAssemblyTypes {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditorInternal.InstrumentedAssemblyTypes;
    static System: UnityEditorInternal.InstrumentedAssemblyTypes;
    static Unity: UnityEditorInternal.InstrumentedAssemblyTypes;
    static Plugins: UnityEditorInternal.InstrumentedAssemblyTypes;
    static Script: UnityEditorInternal.InstrumentedAssemblyTypes;
    static All: UnityEditorInternal.InstrumentedAssemblyTypes;
  }
}
declare namespace UnityEditorInternal {
  class InternalEditorUtility {
    // constructors
    constructor();
    // methods
    static BumpMapSettingsFixingWindowReportResult(result: number): void;
    static BumpMapTextureNeedsFixingInternal(material: any, propName: string, flaggedAsNormal: boolean): boolean;
    static FixNormalmapTextureInternal(material: any, propName: string): void;
    static GetEditorAssemblyPath(): string;
    static GetEngineAssemblyPath(): string;
    static CalculateHashForObjectsAndDependencies(objects: any[]): string;
    static ExecuteCommandOnKeyWindow(commandName: string): void;
    static InstantiateMaterialsInEditMode(renderer: any): any[];
    static BuildCanBeAppended(target: UnityEditor.BuildTarget, location: string): UnityEditorInternal.CanAppendBuild;
    static LoadAssemblyWrapper(dllName: string, dllLocation: string): any;
    static CreateScriptableObjectUnchecked(script: UnityEditor.MonoScript): number;
    static RequestScriptReload(): void;
    static SwitchSkinAndRepaintAllViews(): void;
    static RepaintAllViews(): void;
    static GetIsInspectorExpanded(obj: any): boolean;
    static SetIsInspectorExpanded(obj: any, isExpanded: boolean): void;
    static SaveToSerializedFileAndForget(obj: any[], path: string, allowTextSerialization: boolean): void;
    static LoadSerializedFileAndForget(path: string): any[];
    static ProjectWindowDrag(property: UnityEditor.HierarchyProperty, perform: boolean): UnityEditor.DragAndDropVisualMode;
    static HierarchyWindowDrag(property: UnityEditor.HierarchyProperty, perform: boolean, dropMode: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode): UnityEditor.DragAndDropVisualMode;
    static SceneViewDrag(dropUpon: any, worldPosition: any, viewportPosition: any, perform: boolean): UnityEditor.DragAndDropVisualMode;
    static SetRectTransformTemporaryRect(rectTransform: any, rect: any): void;
    static HasTeamLicense(): boolean;
    static HasPro(): boolean;
    static HasFreeLicense(): boolean;
    static HasEduLicense(): boolean;
    static HasAdvancedLicenseOnBuildTarget(target: UnityEditor.BuildTarget): boolean;
    static GetBoundsOfDesktopAtPoint(pos: any): any;
    static RemoveTag(tag: string): void;
    static AddTag(tag: string): void;
    static GetSpriteOuterUV(sprite: any, getAtlasData: boolean): any;
    static GetObjectFromInstanceID(instanceID: number): any;
    static GetClassIDWithoutLoadingObject(instanceID: number): number;
    static GetLoadedObjectFromInstanceID(instanceID: number): any;
    static GetLayerName(layer: number): string;
    static GetAssetsFolder(): string;
    static GetEditorFolder(): string;
    static IsInEditorFolder(path: string): boolean;
    static ReloadWindowLayoutMenu(): void;
    static RevertFactoryLayoutSettings(quitOnCancel: boolean): void;
    static LoadDefaultLayout(): void;
    static SetupShaderMenu(material: any): void;
    static GetUnityVersionFull(): string;
    static GetFullUnityVersion(): string;
    static GetUnityVersion(): any;
    static GetUnityVersionDigits(): string;
    static GetUnityBuildBranch(): string;
    static GetUnityVersionDate(): number;
    static GetUnityRevision(): number;
    static IsUnityBeta(): boolean;
    static GetUnityCopyright(): string;
    static GetLicenseInfo(): string;
    static GetLicenseFlags(): number[];
    static GetAuthToken(): string;
    static OpenEditorConsole(): void;
    static GetGameObjectInstanceIDFromComponent(instanceID: number): number;
    static ReadScreenPixel(pixelPos: any, sizex: number, sizey: number): any[];
    static OpenPlayerConsole(): void;
    static GetDesktopResolution(): any;
    static TextifyEvent(evt: any): string;
    static GetAvailableDiffTools(): string[];
    static GetNoDiffToolsDetectedMessage(): string;
    static TransformBounds(b: any, t: any): any;
    static SetCustomLighting(lights: any[], ambient: any): void;
    static RemoveCustomLighting(): void;
    static HasFullscreenCamera(): boolean;
    static ResetCursor(): void;
    static CalculateSelectionBounds(usePivotOnlyForParticles: boolean, onlyUseActiveSelection: boolean): any;
    static OnGameViewFocus(focus: boolean): void;
    static OpenFileAtLineExternal(filename: string, line: number): boolean;
    static WiiUSaveStartupScreenToFile(image: any, path: string, outputWidth: number, outputHeight: number): boolean;
    static CanConnectToCacheServer(): boolean;
    static VerifyCacheServerIntegrity(): number;
    static FixCacheServerIntegrityErrors(): number;
    static DetectDotNetDll(path: string): UnityEditorInternal.DllType;
    static IsDotNet4Dll(path: string): boolean;
    static GetCrashReportFolder(): string;
    static DetermineDepthOrder(lhs: any, rhs: any): number;
    static ShowPackageManagerWindow(): void;
    static PassAndReturnVector2(v: any): any;
    static PassAndReturnColor32(c: any): any;
    static EnsureSceneHasBeenSaved(operation: string): boolean;
    static SaveCursorToFile(path: string, image: any, hotSpot: any): boolean;
    static GetScriptEditorFromPath(path: string): UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static IsScriptEditorSpecial(path: string): boolean;
    static GetExternalScriptEditor(): string;
    static SetExternalScriptEditor(path: string): void;
    static GetExternalScriptEditorArgs(): string;
    static SetExternalScriptEditorArgs(args: string): void;
    static GetScriptEditorFromPreferences(): UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static GetIconForFile(fileName: string): any;
    static GetEditorSettingsList(prefix: string, count: number): string[];
    static SaveEditorSettingsList(prefix: string, aList: string[], count: number): void;
    static TextAreaForDocBrowser(position: any, text: string, style: any): string;
    static GetSceneViewCameras(): any[];
    static ShowGameView(): void;
    static GetNewSelection(clickedInstanceID: number, allInstanceIDs: any, selectedInstanceIDs: any, lastClickedInstanceID: number, keepMultiSelection: boolean, useShiftAsActionKey: boolean, allowMultiSelection: boolean): any;
    static IsValidFileName(filename: string): boolean;
    static RemoveInvalidCharsFromFileName(filename: string, logIfInvalidChars: boolean): string;
    static GetDisplayStringOfInvalidCharsOfFileName(filename: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly isApplicationActive: boolean;
    static readonly inBatchMode: boolean;
    static readonly isHumanControllingUs: boolean;
    static expandedProjectWindowItems: number[];
    static readonly tags: string[];
    static readonly layers: string[];
    static readonly unityPreferencesFolder: string;
    static readonly defaultScreenWidth: number;
    static readonly defaultScreenHeight: number;
    static readonly defaultWebScreenWidth: number;
    static readonly defaultWebScreenHeight: number;
    static readonly remoteScreenWidth: number;
    static readonly remoteScreenHeight: number;
    static readonly ignoreInspectorChanges: boolean;
    // fields
  }
}
declare namespace UnityEditorInternal.InternalEditorUtility {
  class HierarchyDropMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static kHierarchyDragNormal: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchyDropUpon: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchyDropBetween: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
    static kHierarchyDropAfterParent: UnityEditorInternal.InternalEditorUtility.HierarchyDropMode;
  }
}
declare namespace UnityEditorInternal.InternalEditorUtility {
  class ScriptEditor {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Internal: UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static MonoDevelop: UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static VisualStudio: UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static VisualStudioExpress: UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static VisualStudioCode: UnityEditorInternal.InternalEditorUtility.ScriptEditor;
    static Other: UnityEditorInternal.InternalEditorUtility.ScriptEditor;
  }
}
declare namespace UnityEditorInternal {
  class InternalSpriteUtility {
    // constructors
    constructor();
    // methods
    static GenerateAutomaticSpriteRectangles(texture: any, minRectSize: number, extrudeSize: number): any[];
    static GenerateGridSpriteRectangles(texture: any, offset: any, size: any, padding: any): any[];
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class IProfilerWindowController {
    // constructors
    private constructor();
    // methods
    SetSelectedPropertyPath(path: string): void;
    ClearSelectedPropertyPath(): void;
    CreateProperty(details: boolean): UnityEditorInternal.ProfilerProperty;
    GetActiveVisibleFrameIndex(): number;
    SetSearch(searchString: string): void;
    GetSearch(): string;
    IsSearching(): boolean;
    Repaint(): void;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class JSONParseException {
    // constructors
    constructor(msg: string);
    // methods
    GetBaseException(): any;
    GetObjectData(info: any, context: any): void;
    ToString(): string;
    GetType(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly InnerException: any;
    HelpLink: string;
    readonly Message: string;
    Source: string;
    readonly StackTrace: string;
    readonly TargetSite: any;
    readonly Data: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class JSONParser {
    // constructors
    constructor(jsondata: string);
    // methods
    static SimpleParse(jsondata: string): UnityEditorInternal.JSONValue;
    Parse(): UnityEditorInternal.JSONValue;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class JSONTypeException {
    // constructors
    constructor(msg: string);
    // methods
    GetBaseException(): any;
    GetObjectData(info: any, context: any): void;
    ToString(): string;
    GetType(): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    readonly InnerException: any;
    HelpLink: string;
    readonly Message: string;
    Source: string;
    readonly StackTrace: string;
    readonly TargetSite: any;
    readonly Data: any;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class JSONValue {
    // constructors
    private constructor();
    // methods
    IsString(): boolean;
    IsFloat(): boolean;
    IsList(): boolean;
    IsDict(): boolean;
    IsBool(): boolean;
    IsNull(): boolean;
    AsObject(): any;
    AsString(nothrow: boolean): string;
    AsString(): string;
    AsFloat(nothrow: boolean): number;
    AsFloat(): number;
    AsBool(nothrow: boolean): boolean;
    AsBool(): boolean;
    AsList(nothrow: boolean): any;
    AsList(): any;
    AsDict(nothrow: boolean): any;
    AsDict(): any;
    static NewString(val: string): UnityEditorInternal.JSONValue;
    static NewFloat(val: number): UnityEditorInternal.JSONValue;
    static NewDict(): UnityEditorInternal.JSONValue;
    static NewList(): UnityEditorInternal.JSONValue;
    static NewBool(val: boolean): UnityEditorInternal.JSONValue;
    static NewNull(): UnityEditorInternal.JSONValue;
    ContainsKey(index: string): boolean;
    Get(key: string): UnityEditorInternal.JSONValue;
    Set(key: string, value: string): void;
    Set(key: string, value: number): void;
    Set(key: string, value: boolean): void;
    Add(value: string): void;
    Add(value: number): void;
    Add(value: boolean): void;
    ToString(): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    get_Item(index: string): UnityEditorInternal.JSONValue;
    set_Item(index: string, value: UnityEditorInternal.JSONValue): void;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class LinkXmlReader {
    // constructors
    constructor();
    // methods
    IsDLLUsed(assemblyFileName: string): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class LogEntries {
    // constructors
    constructor();
    // methods
    static RowGotDoubleClicked(index: number): void;
    static GetStatusText(): string;
    static GetStatusMask(): number;
    static StartGettingEntries(): number;
    static SetConsoleFlag(bit: number, value: boolean): void;
    static EndGettingEntries(): void;
    static GetCount(): number;
    static GetCountsByType(errorCount: any, warningCount: any, logCount: any): void;
    static GetFirstTwoLinesEntryTextAndModeInternal(row: number, mask: any, outString: any): void;
    static GetEntryInternal(row: number, outputEntry: UnityEditorInternal.LogEntry): boolean;
    static GetEntryCount(row: number): number;
    static Clear(): void;
    static GetStatusViewErrorIndex(): number;
    static ClickStatusBar(count: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static consoleFlags: number;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class LogEntry {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    condition: string;
    errorNum: number;
    file: string;
    line: number;
    mode: number;
    instanceID: number;
    identifier: number;
    isWorldPlaying: number;
  }
}
declare namespace UnityEditorInternal {
  class MaterialAnimationUtility {
    // constructors
    private constructor();
    // methods
    static IsAnimated(materialProp: UnityEditor.MaterialProperty, target: any): boolean;
    static SetupMaterialPropertyBlock(materialProp: UnityEditor.MaterialProperty, changedMask: number, target: any): void;
    static ApplyMaterialModificationToAnimationRecording(materialProp: UnityEditor.MaterialProperty, changedMask: number, target: any, oldValue: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class MemoryInfoGCReason {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static SceneObject: UnityEditorInternal.MemoryInfoGCReason;
    static BuiltinResource: UnityEditorInternal.MemoryInfoGCReason;
    static MarkedDontSave: UnityEditorInternal.MemoryInfoGCReason;
    static AssetMarkedDirtyInEditor: UnityEditorInternal.MemoryInfoGCReason;
    static SceneAssetReferencedByNativeCodeOnly: UnityEditorInternal.MemoryInfoGCReason;
    static SceneAssetReferenced: UnityEditorInternal.MemoryInfoGCReason;
    static AssetReferencedByNativeCodeOnly: UnityEditorInternal.MemoryInfoGCReason;
    static AssetReferenced: UnityEditorInternal.MemoryInfoGCReason;
    static NotApplicable: UnityEditorInternal.MemoryInfoGCReason;
  }
}
declare namespace UnityEditorInternal {
  class ModuleMetadata {
    // constructors
    constructor();
    // methods
    static GetModuleNames(): string[];
    static GetModuleStrippable(moduleName: string): boolean;
    static GetModuleTypes(moduleName: string): UnityEditor.UnityType[];
    static GetModuleClasses(moduleName: string): number[];
    static GetICallModule(icall: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class MonoScripts {
    // constructors
    private constructor();
    // methods
    static CreateMonoScript(scriptContents: string, className: string, nameSpace: string, assemblyName: string, isEditorScript: boolean): UnityEditor.MonoScript;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class NativeProgram {
    // constructors
    constructor(executable: string, arguments_: string);
    // methods
    Start(): void;
    GetProcessStartInfo(): any;
    LogProcessStartInfo(): void;
    GetAllOutput(): string;
    Dispose(): void;
    Kill(): void;
    GetStandardInput(): any;
    GetStandardOutput(): string[];
    GetStandardOutputAsString(): string;
    GetErrorOutput(): string[];
    GetErrorOutputAsString(): string;
    WaitForExit(): void;
    WaitForExit(milliseconds: number): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly HasExited: boolean;
    readonly ExitCode: number;
    readonly Id: number;
    // fields
    _process: any;
  }
}
declare namespace UnityEditorInternal {
  class ObjectMemoryInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    instanceId: number;
    memorySize: number;
    count: number;
    reason: number;
    name: string;
    className: string;
  }
}
declare namespace UnityEditorInternal {
  class ObjectMemoryStackInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    expanded: boolean;
    sorted: boolean;
    allocated: number;
    ownedAllocated: number;
    callerSites: UnityEditorInternal.ObjectMemoryStackInfo[];
    name: string;
  }
}
declare namespace UnityEditorInternal {
  class PluginDesc {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    pluginPath: string;
    architecture: UnityEditorInternal.CPUArch;
  }
}
declare namespace UnityEditorInternal {
  class PluginsHelper {
    // constructors
    constructor();
    // methods
    static CheckFileCollisions(buildTarget: UnityEditor.BuildTarget): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ProfilerArea {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static CPU: UnityEditorInternal.ProfilerArea;
    static GPU: UnityEditorInternal.ProfilerArea;
    static Rendering: UnityEditorInternal.ProfilerArea;
    static Memory: UnityEditorInternal.ProfilerArea;
    static Audio: UnityEditorInternal.ProfilerArea;
    static Physics: UnityEditorInternal.ProfilerArea;
    static Physics2D: UnityEditorInternal.ProfilerArea;
    static NetworkMessages: UnityEditorInternal.ProfilerArea;
    static NetworkOperations: UnityEditorInternal.ProfilerArea;
    static AreaCount: UnityEditorInternal.ProfilerArea;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerAudioView {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Stats: UnityEditorInternal.ProfilerAudioView;
    static Channels: UnityEditorInternal.ProfilerAudioView;
    static Groups: UnityEditorInternal.ProfilerAudioView;
    static ChannelsAndGroups: UnityEditorInternal.ProfilerAudioView;
    static DSPGraph: UnityEditorInternal.ProfilerAudioView;
    static Clips: UnityEditorInternal.ProfilerAudioView;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerCaptureFlags {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditorInternal.ProfilerCaptureFlags;
    static Channels: UnityEditorInternal.ProfilerCaptureFlags;
    static DSPNodes: UnityEditorInternal.ProfilerCaptureFlags;
    static Clips: UnityEditorInternal.ProfilerCaptureFlags;
    static All: UnityEditorInternal.ProfilerCaptureFlags;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerChart {
    // constructors
    constructor(area: UnityEditorInternal.ProfilerArea, type: UnityEditorInternal.Chart.ChartType, dataScale: number, seriesCount: number);
    // methods
    DoChartGUI(currentFrame: number, currentArea: UnityEditorInternal.ProfilerArea, action: any): number;
    LoadAndBindSettings(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    active: boolean;
    // fields
    m_Area: UnityEditorInternal.ProfilerArea;
    m_Type: UnityEditorInternal.Chart.ChartType;
    m_DataScale: number;
    m_Chart: UnityEditorInternal.Chart;
    m_Data: UnityEditorInternal.ChartData;
    m_Series: UnityEditorInternal.ChartSeries[];
    m_Icon: any;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerColors {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ProfilerColumn {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static DontSort: UnityEditorInternal.ProfilerColumn;
    static FunctionName: UnityEditorInternal.ProfilerColumn;
    static TotalPercent: UnityEditorInternal.ProfilerColumn;
    static SelfPercent: UnityEditorInternal.ProfilerColumn;
    static Calls: UnityEditorInternal.ProfilerColumn;
    static GCMemory: UnityEditorInternal.ProfilerColumn;
    static TotalTime: UnityEditorInternal.ProfilerColumn;
    static SelfTime: UnityEditorInternal.ProfilerColumn;
    static DrawCalls: UnityEditorInternal.ProfilerColumn;
    static TotalGPUTime: UnityEditorInternal.ProfilerColumn;
    static SelfGPUTime: UnityEditorInternal.ProfilerColumn;
    static TotalGPUPercent: UnityEditorInternal.ProfilerColumn;
    static SelfGPUPercent: UnityEditorInternal.ProfilerColumn;
    static WarningCount: UnityEditorInternal.ProfilerColumn;
    static ObjectName: UnityEditorInternal.ProfilerColumn;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerDraw {
    // constructors
    constructor();
    // methods
    static DrawNative(d: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ProfilerDriver {
    // constructors
    constructor();
    // methods
    static BeginFrame(): void;
    static EndFrame(): void;
    static ResetHistory(): void;
    static GetNextFrameIndex(frame: number): number;
    static GetPreviousFrameIndex(frame: number): number;
    static GetFormattedStatisticsValue(frame: number, identifier: number): string;
    static GetStatisticsValues(identifier: number, firstFrame: number, scale: number, buffer: number[], maxValue: any): void;
    static ClearAllFrames(): void;
    static GetAllStatisticsProperties(): string[];
    static GetGraphStatisticsPropertiesForArea(area: UnityEditorInternal.ProfilerArea): string[];
    static GetStatisticsIdentifier(propertyName: string): number;
    static GetAvailableProfilers(): number[];
    static GetConnectionIdentifier(guid: number): string;
    static IsIdentifierConnectable(guid: number): boolean;
    static DirectIPConnect(IP: string): void;
    static DirectURLConnect(url: string): void;
    static GetOverviewText(profilerArea: UnityEditorInternal.ProfilerArea, frame: number): string;
    static RequestMemorySnapshot(): void;
    static RequestObjectMemoryInfo(gatherObjectReferences: boolean): void;
    static QueryInstrumentableFunctions(): void;
    static QueryFunctionCallees(fullName: string): void;
    static SetAutoInstrumentedAssemblies(value: UnityEditorInternal.InstrumentedAssemblyTypes): void;
    static SetAudioCaptureFlags(flags: number): void;
    static BeginInstrumentFunction(fullName: string): void;
    static EndInstrumentFunction(fullName: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly firstFrameIndex: number;
    static readonly lastFrameIndex: number;
    static readonly maxHistoryLength: number;
    static selectedPropertyPath: string;
    static profileGPU: boolean;
    static profileEditor: boolean;
    static deepProfiling: boolean;
    static memoryRecordMode: UnityEditorInternal.ProfilerMemoryRecordMode;
    static readonly directConnectionUrl: string;
    static connectedProfiler: number;
    static readonly miniMemoryOverview: string;
    static readonly usedHeapSize: number;
    static readonly objectCount: number;
    static readonly isGPUProfilerBuggyOnDriver: boolean;
    static readonly isGPUProfilerSupportedByOS: boolean;
    static readonly isGPUProfilerSupported: boolean;
    // fields
    static directConnectionPort: string;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerFrameDataIterator {
    // constructors
    constructor();
    // methods
    Dispose(): void;
    Next(enterChildren: boolean): boolean;
    GetThreadCount(frame: number): number;
    GetFrameStartS(frame: number): number;
    GetGroupCount(frame: number): number;
    GetGroupName(): string;
    GetThreadName(): string;
    SetRoot(frame: number, threadIdx: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly group: number;
    readonly depth: number;
    readonly path: string;
    readonly name: string;
    readonly sampleId: number;
    readonly instanceId: number;
    readonly frameTimeMS: number;
    readonly startTimeMS: number;
    readonly durationMS: number;
    readonly id: number;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ProfilerHierarchyGUI {
    // constructors
    constructor(window: UnityEditorInternal.IProfilerWindowController, columnSettingsName: string, columnsToShow: UnityEditorInternal.ProfilerColumn[], columnNames: string[], detailPane: boolean, sort: UnityEditorInternal.ProfilerColumn);
    // methods
    SetKeyboardFocus(): void;
    SelectFirstRow(): void;
    GetDetailedProperty(property: UnityEditorInternal.ProfilerProperty): UnityEditorInternal.ProfilerProperty;
    FrameSelection(): void;
    DoGUI(property: UnityEditorInternal.ProfilerProperty, searchString: string, expandAll: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    selectedIndex: number;
    readonly sortType: UnityEditorInternal.ProfilerColumn;
    // fields
  }
}
declare namespace UnityEditorInternal.ProfilerHierarchyGUI {
  class SearchResults {
    // constructors
    constructor();
    // methods
    Init(maxNumberSearchResults: number): void;
    Filter(property: UnityEditorInternal.ProfilerProperty, columns: UnityEditorInternal.ProfilerColumn[], searchString: string, frameIndex: number, sortType: UnityEditorInternal.ProfilerColumn): void;
    Draw(gui: UnityEditorInternal.ProfilerHierarchyGUI, controlID: number): void;
    MoveSelection(steps: number, gui: UnityEditorInternal.ProfilerHierarchyGUI): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly numRows: number;
    selectedSearchIndex: number;
    // fields
  }
}
declare namespace UnityEditorInternal.ProfilerHierarchyGUI.SearchResults {
  class SearchResult {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    propertyPath: string;
    columnValues: string[];
  }
}
declare namespace UnityEditorInternal.ProfilerHierarchyGUI {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    header: any;
    rightHeader: any;
    entryEven: any;
    entryOdd: any;
    numberLabel: any;
    foldout: any;
    miniPullDown: any;
    disabledSearchText: any;
    notShowingAllResults: any;
    instrumentationIcon: any;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerInstrumentationPopup {
    // constructors
    constructor(functions: any, showAllCheckbox: boolean, showAutoInstrumemtationParams: boolean);
    // methods
    OnGUI(rect: any): void;
    OnClose(): void;
    GetWindowSize(): any;
    UpdateAllCheckbox(): void;
    static UpdateInstrumentableFunctions(): void;
    static Show(r: any): void;
    static Show(r: any, funcName: string): void;
    static FunctionHasInstrumentationPopup(funcName: string): boolean;
    OnOpen(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly InstrumentationEnabled: boolean;
    readonly editorWindow: UnityEditor.EditorWindow;
    // fields
  }
}
declare namespace UnityEditorInternal.ProfilerInstrumentationPopup {
  class InputData {
    // constructors
    constructor();
    // methods
    BuildQuery(prefix: string): any;
    DeselectAll(): void;
    ResetScores(): void;
    GetFilteredList(prefix: string): any;
    GetFilteredCount(prefix: string): number;
    NewOrMatchingElement(label: string): UnityEditor.PopupList.ListElement;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ListElements: any;
    m_CloseOnSelection: boolean;
    m_AllowCustom: boolean;
    m_EnableAutoCompletion: boolean;
    m_SortAlphabetically: boolean;
    m_OnSelectCallback: ((UnityEditor.PopupList.ListElement) => void);
    m_MaxCount: number;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerMemoryRecordMode {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static None: UnityEditorInternal.ProfilerMemoryRecordMode;
    static SampleOnly: UnityEditorInternal.ProfilerMemoryRecordMode;
    static CallstackFast: UnityEditorInternal.ProfilerMemoryRecordMode;
    static CallstackFull: UnityEditorInternal.ProfilerMemoryRecordMode;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerMemoryView {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Simple: UnityEditorInternal.ProfilerMemoryView;
    static Detailed: UnityEditorInternal.ProfilerMemoryView;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerProperty {
    // constructors
    constructor();
    // methods
    Dispose(): void;
    Cleanup(): void;
    Next(enterChildren: boolean): boolean;
    SetRoot(frame: number, profilerSortColumn: UnityEditorInternal.ProfilerColumn, viewType: UnityEditorInternal.ProfilerViewType): void;
    InitializeDetailProperty(source: UnityEditorInternal.ProfilerProperty): void;
    GetTooltip(column: UnityEditorInternal.ProfilerColumn): string;
    GetColumn(column: UnityEditorInternal.ProfilerColumn): string;
    GetAudioProfilerGroupInfo(): UnityEditorInternal.AudioProfilerGroupInfo[];
    GetAudioProfilerDSPInfo(): UnityEditorInternal.AudioProfilerDSPInfo[];
    GetAudioProfilerClipInfo(): UnityEditorInternal.AudioProfilerClipInfo[];
    GetAudioProfilerNameByOffset(offset: number): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly HasChildren: boolean;
    onlyShowGPUSamples: boolean;
    readonly instanceIDs: number[];
    readonly depth: number;
    readonly propertyPath: string;
    readonly frameFPS: string;
    readonly frameTime: string;
    readonly frameGpuTime: string;
    readonly frameDataReady: boolean;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ProfilerTimelineGUI {
    // constructors
    constructor(window: UnityEditorInternal.IProfilerWindowController);
    // methods
    DoGUI(frameIndex: number, width: number, ypos: number, height: number, detailView: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class GroupInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    expanded: boolean;
    name: string;
    height: number;
    threads: any;
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class Styles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    tooltip: any;
    tooltipArrow: any;
    bar: any;
    leftPane: any;
    rightPane: any;
    foldout: any;
    profilerGraphBackground: any;
  }
}
declare namespace UnityEditorInternal.ProfilerTimelineGUI {
  class ThreadInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    height: number;
    desiredWeight: number;
    weight: number;
    threadIndex: number;
    name: string;
  }
}
declare namespace UnityEditorInternal {
  class ProfilerViewType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Hierarchy: UnityEditorInternal.ProfilerViewType;
    static Timeline: UnityEditorInternal.ProfilerViewType;
    static RawHierarchy: UnityEditorInternal.ProfilerViewType;
  }
}
declare namespace UnityEditorInternal {
  class ProfilingDataDrawNativeInfo {
    // constructors
    private constructor();
    // methods
    Reset(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    trySelect: number;
    frameIndex: number;
    threadIndex: number;
    timeOffset: number;
    threadRect: any;
    shownAreaRect: any;
    mousePos: any;
    profilerColors: any[];
    nativeAllocationColor: any;
    ghostAlpha: number;
    nonSelectedAlpha: number;
    guiStyle: any;
    lineHeight: number;
    textFadeOutWidth: number;
    textFadeStartWidth: number;
    out_SelectedThread: number;
    out_SelectedInstanceId: number;
    out_SelectedTime: number;
    out_SelectedDur: number;
    out_SelectedY: number;
    out_SelectedPath: string;
    out_SelectedName: string;
  }
}
declare namespace UnityEditorInternal {
  class RectUtils {
    // constructors
    constructor();
    // methods
    static Contains(a: any, b: any): boolean;
    static Encompass(a: any, b: any): any;
    static Inflate(a: any, factor: number): any;
    static Inflate(a: any, factorX: number, factorY: number): any;
    static Intersects(r1: any, r2: any): boolean;
    static Intersection(r1: any, r2: any, intersection: any): boolean;
    static IntersectsSegment(rect: any, p1: any, p2: any): boolean;
    static OffsetX(r: any, offsetX: number): any;
    static Offset(r: any, offsetX: number, offsetY: number): any;
    static Offset(a: any, b: any): any;
    static Move(r: any, delta: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class RegistryUtil {
    // constructors
    constructor();
    // methods
    static GetRegistryUInt32Value32(subKey: string, valueName: string, defaultValue: number): number;
    static GetRegistryStringValue32(subKey: string, valueName: string, defaultValue: string): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class RenderDoc {
    // constructors
    constructor();
    // methods
    static IsInstalled(): boolean;
    static IsLoaded(): boolean;
    static IsSupported(): boolean;
    static Load(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ReorderableList {
    // constructors
    constructor(elements: any, elementType: any);
    constructor(elements: any, elementType: any, draggable: boolean, displayHeader: boolean, displayAddButton: boolean, displayRemoveButton: boolean);
    constructor(serializedObject: UnityEditor.SerializedObject, elements: UnityEditor.SerializedProperty);
    constructor(serializedObject: UnityEditor.SerializedObject, elements: UnityEditor.SerializedProperty, draggable: boolean, displayHeader: boolean, displayAddButton: boolean, displayRemoveButton: boolean);
    // methods
    DoLayoutList(): void;
    DoList(rect: any): void;
    GetHeight(): number;
    GrabKeyboardFocus(): void;
    ReleaseKeyboardFocus(): void;
    HasKeyboardControl(): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly defaultBehaviours: UnityEditorInternal.ReorderableList.Defaults;
    serializedProperty: UnityEditor.SerializedProperty;
    list: any;
    index: number;
    draggable: boolean;
    readonly count: number;
    // fields
    drawHeaderCallback: ((any) => void);
    drawFooterCallback: ((any) => void);
    drawElementCallback: ((any, number, boolean, boolean) => void);
    drawElementBackgroundCallback: ((any, number, boolean, boolean) => void);
    elementHeightCallback: ((number) => number);
    onReorderCallback: ((UnityEditorInternal.ReorderableList) => void);
    onSelectCallback: ((UnityEditorInternal.ReorderableList) => void);
    onAddCallback: ((UnityEditorInternal.ReorderableList) => void);
    onAddDropdownCallback: ((any, UnityEditorInternal.ReorderableList) => void);
    onRemoveCallback: ((UnityEditorInternal.ReorderableList) => void);
    onMouseUpCallback: ((UnityEditorInternal.ReorderableList) => void);
    onCanRemoveCallback: ((UnityEditorInternal.ReorderableList) => boolean);
    onChangedCallback: ((UnityEditorInternal.ReorderableList) => void);
    displayAdd: boolean;
    displayRemove: boolean;
    elementHeight: number;
    headerHeight: number;
    footerHeight: number;
    showDefaultBackground: boolean;
  }
}
declare namespace UnityEditorInternal.ReorderableList {
  class Defaults {
    // constructors
    constructor();
    // methods
    DrawFooter(rect: any, list: UnityEditorInternal.ReorderableList): void;
    DoAddButton(list: UnityEditorInternal.ReorderableList): void;
    DoRemoveButton(list: UnityEditorInternal.ReorderableList): void;
    DrawHeaderBackground(headerRect: any): void;
    DrawHeader(headerRect: any, serializedObject: UnityEditor.SerializedObject, element: UnityEditor.SerializedProperty, elementList: any): void;
    DrawElementBackground(rect: any, index: number, selected: boolean, focused: boolean, draggable: boolean): void;
    DrawElementDraggingHandle(rect: any, index: number, selected: boolean, focused: boolean, draggable: boolean): void;
    DrawElement(rect: any, element: UnityEditor.SerializedProperty, listItem: any, selected: boolean, focused: boolean, draggable: boolean): void;
    DrawNoneElement(rect: any, draggable: boolean): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    iconToolbarPlus: any;
    iconToolbarPlusMore: any;
    iconToolbarMinus: any;
    draggingHandle: any;
    headerBackground: any;
    footerBackground: any;
    boxBackground: any;
    preButton: any;
    elementBackground: any;
    static padding: number;
    static dragHandleWidth: number;
  }
}
declare namespace UnityEditorInternal {
  class ReorderableListWithRenameAndScrollView {
    // constructors
    constructor(list: UnityEditorInternal.ReorderableList, state: UnityEditorInternal.ReorderableListWithRenameAndScrollView.State);
    // methods
    OnEvent(): void;
    OnGUI(rect: any): void;
    IsRenamingIndex(index: number): boolean;
    DrawElement(r: any, index: number, isActive: boolean, isFocused: boolean): void;
    DrawElementText(r: any, index: number, isActive: boolean, isSelected: boolean, isFocused: boolean): void;
    DoRenameOverlay(): void;
    BeginRename(index: number, delay: number): void;
    EndRename(acceptChanges: boolean): void;
    ReorderCallback(list: UnityEditorInternal.ReorderableList): void;
    MouseUpCallback(list: UnityEditorInternal.ReorderableList): void;
    SelectCallback(list: UnityEditorInternal.ReorderableList): void;
    FrameItem(index: number): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly list: UnityEditorInternal.ReorderableList;
    readonly elementStyle: any;
    readonly elementStyleRightAligned: any;
    // fields
    listElementStyle: any;
    renameOverlayStyle: any;
    onGetNameAtIndex: ((number) => string);
    onNameChangedAtIndex: ((number, string) => void);
    onSelectionChanged: ((number) => void);
    onDeleteItemAtIndex: ((number) => void);
    onCustomDrawElement: ((any, number, boolean, boolean) => void);
  }
}
declare namespace UnityEditorInternal.ReorderableListWithRenameAndScrollView {
  class State {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    m_ScrollPos: any;
    m_RenameOverlay: UnityEditor.RenameOverlay;
  }
}
declare namespace UnityEditorInternal.ReorderableListWithRenameAndScrollView {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    reorderableListLabel: any;
    reorderableListLabelRightAligned: any;
  }
}
declare namespace UnityEditorInternal {
  class Runner {
    // constructors
    constructor();
    // methods
    static RunNativeProgram(exe: string, args: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ScriptUpdatingManager {
    // constructors
    constructor();
    // methods
    static WaitForVCSServerConnection(reportTimeout: boolean): boolean;
    static ReportExpectedUpdateFailure(): void;
    static ReportGroupedAPIUpdaterFailure(msg: string): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly numberOfTimesAsked: number;
    // fields
  }
}
declare namespace UnityEditorInternal {
  class ShaderFloatInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    flags: number;
    value: number;
  }
}
declare namespace UnityEditorInternal {
  class ShaderMatrixInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    flags: number;
    value: any;
  }
}
declare namespace UnityEditorInternal {
  class ShaderProperties {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    floats: UnityEditorInternal.ShaderFloatInfo[];
    vectors: UnityEditorInternal.ShaderVectorInfo[];
    matrices: UnityEditorInternal.ShaderMatrixInfo[];
    textures: UnityEditorInternal.ShaderTextureInfo[];
  }
}
declare namespace UnityEditorInternal {
  class ShaderTextureInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    flags: number;
    textureName: string;
    value: any;
  }
}
declare namespace UnityEditorInternal {
  class ShaderVectorInfo {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    name: string;
    flags: number;
    value: any;
  }
}
declare namespace UnityEditorInternal {
  class ShowAdditionalInfo {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Preview: UnityEditorInternal.ShowAdditionalInfo;
    static ShaderProperties: UnityEditorInternal.ShowAdditionalInfo;
  }
}
declare namespace UnityEditorInternal {
  class Slider1D {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class Slider2D {
    // constructors
    constructor();
    // methods
    static Do(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, drawFunc: ((number, any, any, number) => void), snap: any, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: number, drawHelper: boolean): any;
    static Do(id: number, handlePos: any, offset: any, handleDir: any, slideDir1: any, slideDir2: any, handleSize: number, capFunction: ((number, any, any, number, any) => void), snap: any, drawHelper: boolean): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class SliderScale {
    // constructors
    constructor();
    // methods
    static DoAxis(id: number, scale: number, position: any, direction: any, rotation: any, size: number, snap: number): number;
    static DoCenter(id: number, value: number, position: any, rotation: any, size: number, capFunc: ((number, any, any, number) => void), snap: number): number;
    static DoCenter(id: number, value: number, position: any, rotation: any, size: number, capFunction: ((number, any, any, number, any) => void), snap: number): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorHandles {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorMenu {
    // constructors
    constructor();
    // methods
    BeginWindows(): void;
    EndWindows(): void;
    ShowNotification(notification: any): void;
    RemoveNotification(): void;
    ShowTab(): void;
    Focus(): void;
    ShowUtility(): void;
    ShowPopup(): void;
    ShowAsDropDown(buttonRect: any, windowSize: any): void;
    Show(): void;
    Show(immediateDisplay: boolean): void;
    ShowAuxWindow(): void;
    Close(): void;
    Repaint(): void;
    SendEvent(e: any): boolean;
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    wantsMouseMove: boolean;
    autoRepaintOnSceneChange: boolean;
    maximized: boolean;
    minSize: any;
    maxSize: any;
    title: string;
    titleContent: any;
    depthBufferBits: number;
    antiAlias: number;
    position: any;
    name: string;
    hideFlags: any;
    // fields
    static s_SpriteEditorMenu: UnityEditorInternal.SpriteEditorMenu;
    static s_SpriteEditor: UnityEditor.SpriteEditorWindow;
  }
}
declare namespace UnityEditorInternal.SpriteEditorMenu {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    background: any;
    notice: any;
    spriteAlignmentOptions: any[];
    slicingMethodOptions: any[];
    methodLabel: any;
    pivotLabel: any;
    typeLabel: any;
    sliceButtonLabel: any;
    columnAndRowLabel: any;
    columnLabel: any;
    rowLabel: any;
    pixelSizeLabel: any;
    xLabel: any;
    yLabel: any;
    offsetLabel: any;
    paddingLabel: any;
    automaticSlicingHintLabel: any;
    customPivotLabel: any;
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorMenuSetting {
    // constructors
    constructor();
    // methods
    SetDirty(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
    gridCellCount: any;
    gridSpriteSize: any;
    gridSpriteOffset: any;
    gridSpritePadding: any;
    pivot: any;
    autoSlicingMethod: number;
    spriteAlignment: number;
    slicingType: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
  }
}
declare namespace UnityEditorInternal.SpriteEditorMenuSetting {
  class SlicingType {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Automatic: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
    static GridByCellSize: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
    static GridByCellCount: UnityEditorInternal.SpriteEditorMenuSetting.SlicingType;
  }
}
declare namespace UnityEditorInternal {
  class SpriteEditorUtility {
    // constructors
    private constructor();
    // methods
    static GetPivotValue(alignment: any, customOffset: any): any;
    static RoundedRect(rect: any): any;
    static RoundToInt(r: any): any;
    static ClampedRect(rect: any, clamp: any, maintainSize: boolean): any;
    static DrawBox(position: any): void;
    static DrawLine(p1: any, p2: any): void;
    static BeginLines(color: any): void;
    static EndLines(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class UnityEventDrawer {
    // constructors
    constructor();
    // methods
    OnGUI(position: any, property: UnityEditor.SerializedProperty, label: any): void;
    GetPropertyHeight(property: UnityEditor.SerializedProperty, label: any): number;
    OnGUI(position: any): void;
    static IsPersistantListenerValid(dummyEvent: any, methodName: string, uObject: any, modeEnum: any, argumentType: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly attribute: any;
    readonly fieldInfo: any;
    // fields
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class State {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    lastSelectedIndex: number;
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class Styles {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    iconToolbarMinus: any;
    genericFieldStyle: any;
    removeButton: any;
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class UnityEventFunction {
    // constructors
    private constructor();
    // methods
    Assign(): void;
    Clear(): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.UnityEventDrawer {
  class ValidMethodMap {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    target: any;
    methodInfo: any;
    mode: any;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class AssetModificationHook {
    // constructors
    constructor();
    // methods
    static OnWillMoveAsset(from: string, to: string): UnityEditor.AssetMoveResult;
    static OnWillDeleteAsset(assetPath: string, option: UnityEditor.RemoveAssetOptions): UnityEditor.AssetDeleteResult;
    static IsOpenForEdit(assetPath: string, message: any): boolean;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ChangeSetContextMenu {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ListControl {
    // constructors
    constructor();
    // methods
    static FromID(id: number): UnityEditorInternal.VersionControl.ListControl;
    FindItemWithIdentifier(identifier: number): UnityEditorInternal.VersionControl.ListItem;
    Add(parent: UnityEditorInternal.VersionControl.ListItem, name: string, asset: UnityEditor.VersionControl.Asset): UnityEditorInternal.VersionControl.ListItem;
    Add(parent: UnityEditorInternal.VersionControl.ListItem, name: string, change: UnityEditor.VersionControl.ChangeSet): UnityEditorInternal.VersionControl.ListItem;
    Clear(): void;
    Refresh(): void;
    Refresh(updateExpanded: boolean): void;
    Sync(): void;
    OnGUI(area: any, focus: boolean): boolean;
    SelectedSet(item: UnityEditorInternal.VersionControl.ListItem): void;
    SelectedAll(): void;
    SelectedAdd(item: UnityEditorInternal.VersionControl.ListItem): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    readonly listState: UnityEditorInternal.VersionControl.ListControl.ListState;
    ExpandEvent: ((UnityEditor.VersionControl.ChangeSet, UnityEditorInternal.VersionControl.ListItem) => void);
    DragEvent: ((UnityEditor.VersionControl.ChangeSet) => void);
    ActionEvent: ((UnityEditorInternal.VersionControl.ListItem, number) => void);
    readonly Root: UnityEditorInternal.VersionControl.ListItem;
    readonly SelectedAssets: UnityEditor.VersionControl.AssetList;
    readonly SelectedChangeSets: UnityEditor.VersionControl.ChangeSets;
    readonly EmptyChangeSets: UnityEditor.VersionControl.ChangeSets;
    ReadOnly: boolean;
    MenuFolder: string;
    MenuDefault: string;
    DragAcceptOnly: boolean;
    readonly Size: number;
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl.ListControl {
  class ListState {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
    Scroll: number;
    Expanded: any;
  }
}
declare namespace UnityEditorInternal.VersionControl.ListControl {
  class SelectDirection {
    // constructors
    private constructor();
    // methods
    GetTypeCode(): any;
    CompareTo(target: any): number;
    ToString(): string;
    ToString(provider: any): string;
    ToString(format: string): string;
    ToString(format: string, provider: any): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    // properties
    // fields
    value__: number;
    static Up: UnityEditorInternal.VersionControl.ListControl.SelectDirection;
    static Down: UnityEditorInternal.VersionControl.ListControl.SelectDirection;
    static Current: UnityEditorInternal.VersionControl.ListControl.SelectDirection;
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ListItem {
    // constructors
    constructor();
    // methods
    HasPath(): boolean;
    IsChildOf(listItem: UnityEditorInternal.VersionControl.ListItem): boolean;
    Clear(): void;
    Add(listItem: UnityEditorInternal.VersionControl.ListItem): void;
    Remove(listItem: UnityEditorInternal.VersionControl.ListItem): boolean;
    RemoveAll(): void;
    FindWithIdentifierRecurse(inIdentifier: number): UnityEditorInternal.VersionControl.ListItem;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    Icon: any;
    readonly Identifier: number;
    Name: string;
    Indent: number;
    Item: any;
    Asset: UnityEditor.VersionControl.Asset;
    Change: UnityEditor.VersionControl.ChangeSet;
    Expanded: boolean;
    Exclusive: boolean;
    Dummy: boolean;
    Hidden: boolean;
    readonly HasChildren: boolean;
    readonly HasActions: boolean;
    Actions: string[];
    readonly CanExpand: boolean;
    CanAccept: boolean;
    readonly OpenCount: number;
    readonly ChildCount: number;
    readonly Parent: UnityEditorInternal.VersionControl.ListItem;
    readonly FirstChild: UnityEditorInternal.VersionControl.ListItem;
    readonly LastChild: UnityEditorInternal.VersionControl.ListItem;
    readonly Prev: UnityEditorInternal.VersionControl.ListItem;
    readonly Next: UnityEditorInternal.VersionControl.ListItem;
    readonly PrevOpen: UnityEditorInternal.VersionControl.ListItem;
    readonly NextOpen: UnityEditorInternal.VersionControl.ListItem;
    readonly PrevOpenSkip: UnityEditorInternal.VersionControl.ListItem;
    readonly NextOpenSkip: UnityEditorInternal.VersionControl.ListItem;
    readonly PrevOpenVisible: UnityEditorInternal.VersionControl.ListItem;
    readonly NextOpenVisible: UnityEditorInternal.VersionControl.ListItem;
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class Overlay {
    // constructors
    constructor();
    // methods
    static GetOverlayRect(itemRect: any): any;
    static DrawOverlay(asset: UnityEditor.VersionControl.Asset, itemRect: any): void;
    static DrawOverlay(asset: UnityEditor.VersionControl.Asset, metaAsset: UnityEditor.VersionControl.Asset, itemRect: any): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class PendingWindowContextMenu {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ProjectContextMenu {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VersionControl {
  class ProjectHooks {
    // constructors
    constructor();
    // methods
    static OnProjectWindowItem(guid: string, drawRect: any): void;
    static GetOverlayRect(drawRect: any): any;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VR {
  class PlayerSettingsEditorVR {
    // constructors
    constructor(settingsEditor: UnityEditor.SerializedProperty);
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptions {
    // constructors
    private constructor();
    // methods
    Initialize(vrEditorSettings: UnityEditor.SerializedProperty): void;
    Draw(rect: any): void;
    GetHeight(): number;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    IsExpanded: boolean;
    // fields
  }
}
declare namespace UnityEditorInternal.VR {
  class VRCustomOptionsNone {
    // constructors
    constructor();
    // methods
    Draw(rect: any): void;
    GetHeight(): number;
    Initialize(vrEditorSettings: UnityEditor.SerializedProperty): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    IsExpanded: boolean;
    // fields
  }
}
declare namespace UnityEditorInternal.VR {
  class VRDeviceInfoEditor {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    deviceNameKey: string;
    deviceNameUI: string;
    externalPluginName: string;
    supportsEditorMode: boolean;
    inListByDefault: boolean;
  }
}
declare namespace UnityEditorInternal.VR {
  class VREditor {
    // constructors
    constructor();
    // methods
    static GetVREnabled(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static SetVREnabled(targetGroup: UnityEditor.BuildTargetGroup, value: boolean): void;
    static GetVREnabledDevices(targetGroup: UnityEditor.BuildTargetGroup): string[];
    static SetVREnabledDevices(targetGroup: UnityEditor.BuildTargetGroup, devices: string[]): void;
    static GetEnabledVRDeviceInfo(targetGroup: UnityEditor.BuildTargetGroup): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetEnabledVRDeviceInfo(target: UnityEditor.BuildTarget): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetAllVRDeviceInfo(targetGroup: UnityEditor.BuildTargetGroup): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetAllVRDeviceInfoByTarget(target: UnityEditor.BuildTarget): UnityEditorInternal.VR.VRDeviceInfoEditor[];
    static GetVREnabledOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup): boolean;
    static SetVREnabledOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup, value: boolean): void;
    static GetVREnabledDevicesOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup): string[];
    static GetVREnabledDevicesOnTarget(target: UnityEditor.BuildTarget): string[];
    static SetVREnabledDevicesOnTargetGroup(targetGroup: UnityEditor.BuildTargetGroup, devices: string[]): void;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEditorInternal {
  class WebURLs {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    static readonly unity: string;
    static readonly unityConnect: string;
    static readonly unityForum: string;
    static readonly unityAnswers: string;
    static readonly unityFeedback: string;
    static readonly whatsNewPage: string;
    static readonly betaLandingPage: string;
    static readonly cloudBuildPage: string;
    // fields
  }
}
declare namespace UnityEngine {
  class NScreenBridge {
    // constructors
    constructor();
    // methods
    InitServer(id: number): void;
    Update(): void;
    StartWatchdogForPid(pid: number): void;
    SetResolution(x: number, y: number): void;
    SetInput(x: number, y: number, button: number, key: number, type: number): void;
    ResetInput(): void;
    GetScreenTexture(): any;
    Shutdown(): void;
    ToString(): string;
    GetInstanceID(): number;
    GetHashCode(): number;
    Equals(other: any): boolean;
    GetType(): any;
    // properties
    name: string;
    hideFlags: any;
    // fields
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeClassInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeMethodInfo {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
declare namespace UnityEngine {
  class RuntimeInitializeOnLoadManager {
    // constructors
    constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
}
  class ValidationResult {
    // constructors
    private constructor();
    // methods
    Equals(obj: any): boolean;
    GetHashCode(): number;
    ToString(): string;
    GetType(): any;
    // properties
    // fields
    Success: boolean;
    Rule: IValidationRule;
    CompilerMessages: any;
  }
  class WinRTUtils {
    // constructors
    constructor();
    // methods
    static GetProcessorArchitecture(target: UnityEditor.BuildTarget): string;
    Equals(obj: any): boolean;
    GetHashCode(): number;
    GetType(): any;
    ToString(): string;
    // properties
    // fields
  }
